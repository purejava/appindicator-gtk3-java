// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_18 extends app_indicator_h_19 {

    app_indicator_h_18() {
        // Should not be called directly
    }

    private static class memccpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("memccpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *memccpy(void *restrict __dest, const void *restrict __src, int __c, size_t __n)
     * }
     */
    public static FunctionDescriptor memccpy$descriptor() {
        return memccpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *memccpy(void *restrict __dest, const void *restrict __src, int __c, size_t __n)
     * }
     */
    public static MethodHandle memccpy$handle() {
        return memccpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *memccpy(void *restrict __dest, const void *restrict __src, int __c, size_t __n)
     * }
     */
    public static MemorySegment memccpy(MemorySegment __dest, MemorySegment __src, int __c, long __n) {
        var mh$ = memccpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memccpy", __dest, __src, __c, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __c, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class memset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("memset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *memset(void *__s, int __c, size_t __n)
     * }
     */
    public static FunctionDescriptor memset$descriptor() {
        return memset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *memset(void *__s, int __c, size_t __n)
     * }
     */
    public static MethodHandle memset$handle() {
        return memset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *memset(void *__s, int __c, size_t __n)
     * }
     */
    public static MemorySegment memset(MemorySegment __s, int __c, long __n) {
        var mh$ = memset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memset", __s, __c, __n);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class memcmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("memcmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int memcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static FunctionDescriptor memcmp$descriptor() {
        return memcmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int memcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static MethodHandle memcmp$handle() {
        return memcmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int memcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static int memcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = memcmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memcmp", __s1, __s2, __n);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __memcmpeq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__memcmpeq"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __memcmpeq(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static FunctionDescriptor __memcmpeq$descriptor() {
        return __memcmpeq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __memcmpeq(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static MethodHandle __memcmpeq$handle() {
        return __memcmpeq.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int __memcmpeq(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static int __memcmpeq(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = __memcmpeq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__memcmpeq", __s1, __s2, __n);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class memchr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("memchr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *memchr(const void *__s, int __c, size_t __n)
     * }
     */
    public static FunctionDescriptor memchr$descriptor() {
        return memchr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *memchr(const void *__s, int __c, size_t __n)
     * }
     */
    public static MethodHandle memchr$handle() {
        return memchr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *memchr(const void *__s, int __c, size_t __n)
     * }
     */
    public static MemorySegment memchr(MemorySegment __s, int __c, long __n) {
        var mh$ = memchr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("memchr", __s, __c, __n);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strcpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static FunctionDescriptor strcpy$descriptor() {
        return strcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MethodHandle strcpy$handle() {
        return strcpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment strcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = strcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcpy", __dest, __src);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strncpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strncpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor strncpy$descriptor() {
        return strncpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle strncpy$handle() {
        return strncpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment strncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strncpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strncpy", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strcat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strcat(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static FunctionDescriptor strcat$descriptor() {
        return strcat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strcat(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MethodHandle strcat$handle() {
        return strcat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strcat(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment strcat(MemorySegment __dest, MemorySegment __src) {
        var mh$ = strcat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcat", __dest, __src);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strncat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strncat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strncat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor strncat$descriptor() {
        return strncat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strncat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle strncat$handle() {
        return strncat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strncat(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment strncat(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strncat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strncat", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strcmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strcmp(const char *__s1, const char *__s2)
     * }
     */
    public static FunctionDescriptor strcmp$descriptor() {
        return strcmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strcmp(const char *__s1, const char *__s2)
     * }
     */
    public static MethodHandle strcmp$handle() {
        return strcmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int strcmp(const char *__s1, const char *__s2)
     * }
     */
    public static int strcmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcmp", __s1, __s2);
            }
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strncmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strncmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strncmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static FunctionDescriptor strncmp$descriptor() {
        return strncmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strncmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static MethodHandle strncmp$handle() {
        return strncmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int strncmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static int strncmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strncmp", __s1, __s2, __n);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strcoll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strcoll(const char *__s1, const char *__s2)
     * }
     */
    public static FunctionDescriptor strcoll$descriptor() {
        return strcoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strcoll(const char *__s1, const char *__s2)
     * }
     */
    public static MethodHandle strcoll$handle() {
        return strcoll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int strcoll(const char *__s1, const char *__s2)
     * }
     */
    public static int strcoll(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcoll", __s1, __s2);
            }
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strxfrm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strxfrm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strxfrm(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor strxfrm$descriptor() {
        return strxfrm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strxfrm(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle strxfrm$handle() {
        return strxfrm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long strxfrm(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static long strxfrm(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = strxfrm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strxfrm", __dest, __src, __n);
            }
            return (long)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcoll_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strcoll_l"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strcoll_l(const char *__s1, const char *__s2, locale_t __l)
     * }
     */
    public static FunctionDescriptor strcoll_l$descriptor() {
        return strcoll_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strcoll_l(const char *__s1, const char *__s2, locale_t __l)
     * }
     */
    public static MethodHandle strcoll_l$handle() {
        return strcoll_l.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int strcoll_l(const char *__s1, const char *__s2, locale_t __l)
     * }
     */
    public static int strcoll_l(MemorySegment __s1, MemorySegment __s2, MemorySegment __l) {
        var mh$ = strcoll_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcoll_l", __s1, __s2, __l);
            }
            return (int)mh$.invokeExact(__s1, __s2, __l);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strxfrm_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strxfrm_l"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n, locale_t __l)
     * }
     */
    public static FunctionDescriptor strxfrm_l$descriptor() {
        return strxfrm_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n, locale_t __l)
     * }
     */
    public static MethodHandle strxfrm_l$handle() {
        return strxfrm_l.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern size_t strxfrm_l(char *__dest, const char *__src, size_t __n, locale_t __l)
     * }
     */
    public static long strxfrm_l(MemorySegment __dest, MemorySegment __src, long __n, MemorySegment __l) {
        var mh$ = strxfrm_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strxfrm_l", __dest, __src, __n, __l);
            }
            return (long)mh$.invokeExact(__dest, __src, __n, __l);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strdup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strdup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strdup(const char *__s)
     * }
     */
    public static FunctionDescriptor strdup$descriptor() {
        return strdup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strdup(const char *__s)
     * }
     */
    public static MethodHandle strdup$handle() {
        return strdup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strdup(const char *__s)
     * }
     */
    public static MemorySegment strdup(MemorySegment __s) {
        var mh$ = strdup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strdup", __s);
            }
            return (MemorySegment)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strndup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strndup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strndup(const char *__string, size_t __n)
     * }
     */
    public static FunctionDescriptor strndup$descriptor() {
        return strndup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strndup(const char *__string, size_t __n)
     * }
     */
    public static MethodHandle strndup$handle() {
        return strndup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strndup(const char *__string, size_t __n)
     * }
     */
    public static MemorySegment strndup(MemorySegment __string, long __n) {
        var mh$ = strndup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strndup", __string, __n);
            }
            return (MemorySegment)mh$.invokeExact(__string, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strchr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strchr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strchr(const char *__s, int __c)
     * }
     */
    public static FunctionDescriptor strchr$descriptor() {
        return strchr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strchr(const char *__s, int __c)
     * }
     */
    public static MethodHandle strchr$handle() {
        return strchr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strchr(const char *__s, int __c)
     * }
     */
    public static MemorySegment strchr(MemorySegment __s, int __c) {
        var mh$ = strchr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strchr", __s, __c);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strrchr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strrchr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strrchr(const char *__s, int __c)
     * }
     */
    public static FunctionDescriptor strrchr$descriptor() {
        return strrchr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strrchr(const char *__s, int __c)
     * }
     */
    public static MethodHandle strrchr$handle() {
        return strrchr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strrchr(const char *__s, int __c)
     * }
     */
    public static MemorySegment strrchr(MemorySegment __s, int __c) {
        var mh$ = strrchr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strrchr", __s, __c);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcspn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strcspn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strcspn(const char *__s, const char *__reject)
     * }
     */
    public static FunctionDescriptor strcspn$descriptor() {
        return strcspn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strcspn(const char *__s, const char *__reject)
     * }
     */
    public static MethodHandle strcspn$handle() {
        return strcspn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long strcspn(const char *__s, const char *__reject)
     * }
     */
    public static long strcspn(MemorySegment __s, MemorySegment __reject) {
        var mh$ = strcspn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcspn", __s, __reject);
            }
            return (long)mh$.invokeExact(__s, __reject);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strspn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strspn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strspn(const char *__s, const char *__accept)
     * }
     */
    public static FunctionDescriptor strspn$descriptor() {
        return strspn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strspn(const char *__s, const char *__accept)
     * }
     */
    public static MethodHandle strspn$handle() {
        return strspn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long strspn(const char *__s, const char *__accept)
     * }
     */
    public static long strspn(MemorySegment __s, MemorySegment __accept) {
        var mh$ = strspn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strspn", __s, __accept);
            }
            return (long)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strpbrk {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strpbrk"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strpbrk(const char *__s, const char *__accept)
     * }
     */
    public static FunctionDescriptor strpbrk$descriptor() {
        return strpbrk.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strpbrk(const char *__s, const char *__accept)
     * }
     */
    public static MethodHandle strpbrk$handle() {
        return strpbrk.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strpbrk(const char *__s, const char *__accept)
     * }
     */
    public static MemorySegment strpbrk(MemorySegment __s, MemorySegment __accept) {
        var mh$ = strpbrk.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strpbrk", __s, __accept);
            }
            return (MemorySegment)mh$.invokeExact(__s, __accept);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strstr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strstr(const char *__haystack, const char *__needle)
     * }
     */
    public static FunctionDescriptor strstr$descriptor() {
        return strstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strstr(const char *__haystack, const char *__needle)
     * }
     */
    public static MethodHandle strstr$handle() {
        return strstr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strstr(const char *__haystack, const char *__needle)
     * }
     */
    public static MemorySegment strstr(MemorySegment __haystack, MemorySegment __needle) {
        var mh$ = strstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strstr", __haystack, __needle);
            }
            return (MemorySegment)mh$.invokeExact(__haystack, __needle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtok {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strtok"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strtok(char *restrict __s, const char *restrict __delim)
     * }
     */
    public static FunctionDescriptor strtok$descriptor() {
        return strtok.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strtok(char *restrict __s, const char *restrict __delim)
     * }
     */
    public static MethodHandle strtok$handle() {
        return strtok.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strtok(char *restrict __s, const char *restrict __delim)
     * }
     */
    public static MemorySegment strtok(MemorySegment __s, MemorySegment __delim) {
        var mh$ = strtok.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtok", __s, __delim);
            }
            return (MemorySegment)mh$.invokeExact(__s, __delim);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __strtok_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__strtok_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *__strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static FunctionDescriptor __strtok_r$descriptor() {
        return __strtok_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *__strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static MethodHandle __strtok_r$handle() {
        return __strtok_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *__strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static MemorySegment __strtok_r(MemorySegment __s, MemorySegment __delim, MemorySegment __save_ptr) {
        var mh$ = __strtok_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__strtok_r", __s, __delim, __save_ptr);
            }
            return (MemorySegment)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtok_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strtok_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static FunctionDescriptor strtok_r$descriptor() {
        return strtok_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static MethodHandle strtok_r$handle() {
        return strtok_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strtok_r(char *restrict __s, const char *restrict __delim, char **restrict __save_ptr)
     * }
     */
    public static MemorySegment strtok_r(MemorySegment __s, MemorySegment __delim, MemorySegment __save_ptr) {
        var mh$ = strtok_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtok_r", __s, __delim, __save_ptr);
            }
            return (MemorySegment)mh$.invokeExact(__s, __delim, __save_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strlen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strlen(const char *__s)
     * }
     */
    public static FunctionDescriptor strlen$descriptor() {
        return strlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strlen(const char *__s)
     * }
     */
    public static MethodHandle strlen$handle() {
        return strlen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long strlen(const char *__s)
     * }
     */
    public static long strlen(MemorySegment __s) {
        var mh$ = strlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strlen", __s);
            }
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strnlen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strnlen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t strnlen(const char *__string, size_t __maxlen)
     * }
     */
    public static FunctionDescriptor strnlen$descriptor() {
        return strnlen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t strnlen(const char *__string, size_t __maxlen)
     * }
     */
    public static MethodHandle strnlen$handle() {
        return strnlen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern size_t strnlen(const char *__string, size_t __maxlen)
     * }
     */
    public static long strnlen(MemorySegment __string, long __maxlen) {
        var mh$ = strnlen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strnlen", __string, __maxlen);
            }
            return (long)mh$.invokeExact(__string, __maxlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strerror {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strerror"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strerror(int __errnum)
     * }
     */
    public static FunctionDescriptor strerror$descriptor() {
        return strerror.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strerror(int __errnum)
     * }
     */
    public static MethodHandle strerror$handle() {
        return strerror.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strerror(int __errnum)
     * }
     */
    public static MemorySegment strerror(int __errnum) {
        var mh$ = strerror.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strerror", __errnum);
            }
            return (MemorySegment)mh$.invokeExact(__errnum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strerror_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strerror_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strerror_r(int __errnum, char *__buf, size_t __buflen)
     * }
     */
    public static FunctionDescriptor strerror_r$descriptor() {
        return strerror_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strerror_r(int __errnum, char *__buf, size_t __buflen)
     * }
     */
    public static MethodHandle strerror_r$handle() {
        return strerror_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int strerror_r(int __errnum, char *__buf, size_t __buflen)
     * }
     */
    public static int strerror_r(int __errnum, MemorySegment __buf, long __buflen) {
        var mh$ = strerror_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strerror_r", __errnum, __buf, __buflen);
            }
            return (int)mh$.invokeExact(__errnum, __buf, __buflen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strerror_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strerror_l"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strerror_l(int __errnum, locale_t __l)
     * }
     */
    public static FunctionDescriptor strerror_l$descriptor() {
        return strerror_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strerror_l(int __errnum, locale_t __l)
     * }
     */
    public static MethodHandle strerror_l$handle() {
        return strerror_l.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strerror_l(int __errnum, locale_t __l)
     * }
     */
    public static MemorySegment strerror_l(int __errnum, MemorySegment __l) {
        var mh$ = strerror_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strerror_l", __errnum, __l);
            }
            return (MemorySegment)mh$.invokeExact(__errnum, __l);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bcmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("bcmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int bcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static FunctionDescriptor bcmp$descriptor() {
        return bcmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int bcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static MethodHandle bcmp$handle() {
        return bcmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int bcmp(const void *__s1, const void *__s2, size_t __n)
     * }
     */
    public static int bcmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = bcmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bcmp", __s1, __s2, __n);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bcopy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("bcopy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void bcopy(const void *__src, void *__dest, size_t __n)
     * }
     */
    public static FunctionDescriptor bcopy$descriptor() {
        return bcopy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void bcopy(const void *__src, void *__dest, size_t __n)
     * }
     */
    public static MethodHandle bcopy$handle() {
        return bcopy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void bcopy(const void *__src, void *__dest, size_t __n)
     * }
     */
    public static void bcopy(MemorySegment __src, MemorySegment __dest, long __n) {
        var mh$ = bcopy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bcopy", __src, __dest, __n);
            }
            mh$.invokeExact(__src, __dest, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bzero {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("bzero"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void bzero(void *__s, size_t __n)
     * }
     */
    public static FunctionDescriptor bzero$descriptor() {
        return bzero.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void bzero(void *__s, size_t __n)
     * }
     */
    public static MethodHandle bzero$handle() {
        return bzero.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void bzero(void *__s, size_t __n)
     * }
     */
    public static void bzero(MemorySegment __s, long __n) {
        var mh$ = bzero.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bzero", __s, __n);
            }
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *index(const char *__s, int __c)
     * }
     */
    public static FunctionDescriptor index$descriptor() {
        return index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *index(const char *__s, int __c)
     * }
     */
    public static MethodHandle index$handle() {
        return index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *index(const char *__s, int __c)
     * }
     */
    public static MemorySegment index(MemorySegment __s, int __c) {
        var mh$ = index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("index", __s, __c);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rindex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("rindex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *rindex(const char *__s, int __c)
     * }
     */
    public static FunctionDescriptor rindex$descriptor() {
        return rindex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *rindex(const char *__s, int __c)
     * }
     */
    public static MethodHandle rindex$handle() {
        return rindex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *rindex(const char *__s, int __c)
     * }
     */
    public static MemorySegment rindex(MemorySegment __s, int __c) {
        var mh$ = rindex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rindex", __s, __c);
            }
            return (MemorySegment)mh$.invokeExact(__s, __c);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ffs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ffs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ffs(int __i)
     * }
     */
    public static FunctionDescriptor ffs$descriptor() {
        return ffs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ffs(int __i)
     * }
     */
    public static MethodHandle ffs$handle() {
        return ffs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ffs(int __i)
     * }
     */
    public static int ffs(int __i) {
        var mh$ = ffs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ffs", __i);
            }
            return (int)mh$.invokeExact(__i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ffsl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ffsl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ffsl(long __l)
     * }
     */
    public static FunctionDescriptor ffsl$descriptor() {
        return ffsl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ffsl(long __l)
     * }
     */
    public static MethodHandle ffsl$handle() {
        return ffsl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ffsl(long __l)
     * }
     */
    public static int ffsl(long __l) {
        var mh$ = ffsl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ffsl", __l);
            }
            return (int)mh$.invokeExact(__l);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ffsll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ffsll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ffsll(long long __ll)
     * }
     */
    public static FunctionDescriptor ffsll$descriptor() {
        return ffsll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ffsll(long long __ll)
     * }
     */
    public static MethodHandle ffsll$handle() {
        return ffsll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ffsll(long long __ll)
     * }
     */
    public static int ffsll(long __ll) {
        var mh$ = ffsll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ffsll", __ll);
            }
            return (int)mh$.invokeExact(__ll);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcasecmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strcasecmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strcasecmp(const char *__s1, const char *__s2)
     * }
     */
    public static FunctionDescriptor strcasecmp$descriptor() {
        return strcasecmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strcasecmp(const char *__s1, const char *__s2)
     * }
     */
    public static MethodHandle strcasecmp$handle() {
        return strcasecmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int strcasecmp(const char *__s1, const char *__s2)
     * }
     */
    public static int strcasecmp(MemorySegment __s1, MemorySegment __s2) {
        var mh$ = strcasecmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcasecmp", __s1, __s2);
            }
            return (int)mh$.invokeExact(__s1, __s2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strncasecmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strncasecmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strncasecmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static FunctionDescriptor strncasecmp$descriptor() {
        return strncasecmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strncasecmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static MethodHandle strncasecmp$handle() {
        return strncasecmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int strncasecmp(const char *__s1, const char *__s2, size_t __n)
     * }
     */
    public static int strncasecmp(MemorySegment __s1, MemorySegment __s2, long __n) {
        var mh$ = strncasecmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strncasecmp", __s1, __s2, __n);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strcasecmp_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strcasecmp_l"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strcasecmp_l(const char *__s1, const char *__s2, locale_t __loc)
     * }
     */
    public static FunctionDescriptor strcasecmp_l$descriptor() {
        return strcasecmp_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strcasecmp_l(const char *__s1, const char *__s2, locale_t __loc)
     * }
     */
    public static MethodHandle strcasecmp_l$handle() {
        return strcasecmp_l.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int strcasecmp_l(const char *__s1, const char *__s2, locale_t __loc)
     * }
     */
    public static int strcasecmp_l(MemorySegment __s1, MemorySegment __s2, MemorySegment __loc) {
        var mh$ = strcasecmp_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strcasecmp_l", __s1, __s2, __loc);
            }
            return (int)mh$.invokeExact(__s1, __s2, __loc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strncasecmp_l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strncasecmp_l"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n, locale_t __loc)
     * }
     */
    public static FunctionDescriptor strncasecmp_l$descriptor() {
        return strncasecmp_l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n, locale_t __loc)
     * }
     */
    public static MethodHandle strncasecmp_l$handle() {
        return strncasecmp_l.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int strncasecmp_l(const char *__s1, const char *__s2, size_t __n, locale_t __loc)
     * }
     */
    public static int strncasecmp_l(MemorySegment __s1, MemorySegment __s2, long __n, MemorySegment __loc) {
        var mh$ = strncasecmp_l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strncasecmp_l", __s1, __s2, __n, __loc);
            }
            return (int)mh$.invokeExact(__s1, __s2, __n, __loc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class explicit_bzero {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("explicit_bzero"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void explicit_bzero(void *__s, size_t __n)
     * }
     */
    public static FunctionDescriptor explicit_bzero$descriptor() {
        return explicit_bzero.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void explicit_bzero(void *__s, size_t __n)
     * }
     */
    public static MethodHandle explicit_bzero$handle() {
        return explicit_bzero.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void explicit_bzero(void *__s, size_t __n)
     * }
     */
    public static void explicit_bzero(MemorySegment __s, long __n) {
        var mh$ = explicit_bzero.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("explicit_bzero", __s, __n);
            }
            mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strsep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strsep"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strsep(char **restrict __stringp, const char *restrict __delim)
     * }
     */
    public static FunctionDescriptor strsep$descriptor() {
        return strsep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strsep(char **restrict __stringp, const char *restrict __delim)
     * }
     */
    public static MethodHandle strsep$handle() {
        return strsep.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strsep(char **restrict __stringp, const char *restrict __delim)
     * }
     */
    public static MemorySegment strsep(MemorySegment __stringp, MemorySegment __delim) {
        var mh$ = strsep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strsep", __stringp, __delim);
            }
            return (MemorySegment)mh$.invokeExact(__stringp, __delim);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strsignal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strsignal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *strsignal(int __sig)
     * }
     */
    public static FunctionDescriptor strsignal$descriptor() {
        return strsignal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *strsignal(int __sig)
     * }
     */
    public static MethodHandle strsignal$handle() {
        return strsignal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *strsignal(int __sig)
     * }
     */
    public static MemorySegment strsignal(int __sig) {
        var mh$ = strsignal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strsignal", __sig);
            }
            return (MemorySegment)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stpcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__stpcpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *__stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static FunctionDescriptor __stpcpy$descriptor() {
        return __stpcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *__stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MethodHandle __stpcpy$handle() {
        return __stpcpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *__stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment __stpcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = __stpcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stpcpy", __dest, __src);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class stpcpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("stpcpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static FunctionDescriptor stpcpy$descriptor() {
        return stpcpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MethodHandle stpcpy$handle() {
        return stpcpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *stpcpy(char *restrict __dest, const char *restrict __src)
     * }
     */
    public static MemorySegment stpcpy(MemorySegment __dest, MemorySegment __src) {
        var mh$ = stpcpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("stpcpy", __dest, __src);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __stpncpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__stpncpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *__stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor __stpncpy$descriptor() {
        return __stpncpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *__stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle __stpncpy$handle() {
        return __stpncpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *__stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment __stpncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = __stpncpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__stpncpy", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class stpncpy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("stpncpy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static FunctionDescriptor stpncpy$descriptor() {
        return stpncpy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MethodHandle stpncpy$handle() {
        return stpncpy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *stpncpy(char *restrict __dest, const char *restrict __src, size_t __n)
     * }
     */
    public static MemorySegment stpncpy(MemorySegment __dest, MemorySegment __src, long __n) {
        var mh$ = stpncpy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("stpncpy", __dest, __src, __n);
            }
            return (MemorySegment)mh$.invokeExact(__dest, __src, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_new(gboolean zero_terminated, gboolean clear_, guint element_size)
     * }
     */
    public static FunctionDescriptor g_array_new$descriptor() {
        return g_array_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_new(gboolean zero_terminated, gboolean clear_, guint element_size)
     * }
     */
    public static MethodHandle g_array_new$handle() {
        return g_array_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_new(gboolean zero_terminated, gboolean clear_, guint element_size)
     * }
     */
    public static MemorySegment g_array_new(int zero_terminated, int clear_, int element_size) {
        var mh$ = g_array_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_new", zero_terminated, clear_, element_size);
            }
            return (MemorySegment)mh$.invokeExact(zero_terminated, clear_, element_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_new_take {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_new_take"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_new_take(gpointer data, gsize len, gboolean clear, gsize element_size)
     * }
     */
    public static FunctionDescriptor g_array_new_take$descriptor() {
        return g_array_new_take.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_new_take(gpointer data, gsize len, gboolean clear, gsize element_size)
     * }
     */
    public static MethodHandle g_array_new_take$handle() {
        return g_array_new_take.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_new_take(gpointer data, gsize len, gboolean clear, gsize element_size)
     * }
     */
    public static MemorySegment g_array_new_take(MemorySegment data, long len, int clear, long element_size) {
        var mh$ = g_array_new_take.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_new_take", data, len, clear, element_size);
            }
            return (MemorySegment)mh$.invokeExact(data, len, clear, element_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_new_take_zero_terminated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_new_take_zero_terminated"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_new_take_zero_terminated(gpointer data, gboolean clear, gsize element_size)
     * }
     */
    public static FunctionDescriptor g_array_new_take_zero_terminated$descriptor() {
        return g_array_new_take_zero_terminated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_new_take_zero_terminated(gpointer data, gboolean clear, gsize element_size)
     * }
     */
    public static MethodHandle g_array_new_take_zero_terminated$handle() {
        return g_array_new_take_zero_terminated.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_new_take_zero_terminated(gpointer data, gboolean clear, gsize element_size)
     * }
     */
    public static MemorySegment g_array_new_take_zero_terminated(MemorySegment data, int clear, long element_size) {
        var mh$ = g_array_new_take_zero_terminated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_new_take_zero_terminated", data, clear, element_size);
            }
            return (MemorySegment)mh$.invokeExact(data, clear, element_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_steal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_array_steal(GArray *array, gsize *len)
     * }
     */
    public static FunctionDescriptor g_array_steal$descriptor() {
        return g_array_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_array_steal(GArray *array, gsize *len)
     * }
     */
    public static MethodHandle g_array_steal$handle() {
        return g_array_steal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_array_steal(GArray *array, gsize *len)
     * }
     */
    public static MemorySegment g_array_steal(MemorySegment array, MemorySegment len) {
        var mh$ = g_array_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_steal", array, len);
            }
            return (MemorySegment)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_sized_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_sized_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_sized_new(gboolean zero_terminated, gboolean clear_, guint element_size, guint reserved_size)
     * }
     */
    public static FunctionDescriptor g_array_sized_new$descriptor() {
        return g_array_sized_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_sized_new(gboolean zero_terminated, gboolean clear_, guint element_size, guint reserved_size)
     * }
     */
    public static MethodHandle g_array_sized_new$handle() {
        return g_array_sized_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_sized_new(gboolean zero_terminated, gboolean clear_, guint element_size, guint reserved_size)
     * }
     */
    public static MemorySegment g_array_sized_new(int zero_terminated, int clear_, int element_size, int reserved_size) {
        var mh$ = g_array_sized_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_sized_new", zero_terminated, clear_, element_size, reserved_size);
            }
            return (MemorySegment)mh$.invokeExact(zero_terminated, clear_, element_size, reserved_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_copy(GArray *array)
     * }
     */
    public static FunctionDescriptor g_array_copy$descriptor() {
        return g_array_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_copy(GArray *array)
     * }
     */
    public static MethodHandle g_array_copy$handle() {
        return g_array_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_copy(GArray *array)
     * }
     */
    public static MemorySegment g_array_copy(MemorySegment array) {
        var mh$ = g_array_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_copy", array);
            }
            return (MemorySegment)mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_array_free(GArray *array, gboolean free_segment)
     * }
     */
    public static FunctionDescriptor g_array_free$descriptor() {
        return g_array_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_array_free(GArray *array, gboolean free_segment)
     * }
     */
    public static MethodHandle g_array_free$handle() {
        return g_array_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_array_free(GArray *array, gboolean free_segment)
     * }
     */
    public static MemorySegment g_array_free(MemorySegment array, int free_segment) {
        var mh$ = g_array_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_free", array, free_segment);
            }
            return (MemorySegment)mh$.invokeExact(array, free_segment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_ref(GArray *array)
     * }
     */
    public static FunctionDescriptor g_array_ref$descriptor() {
        return g_array_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_ref(GArray *array)
     * }
     */
    public static MethodHandle g_array_ref$handle() {
        return g_array_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_ref(GArray *array)
     * }
     */
    public static MemorySegment g_array_ref(MemorySegment array) {
        var mh$ = g_array_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_ref", array);
            }
            return (MemorySegment)mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_array_unref(GArray *array)
     * }
     */
    public static FunctionDescriptor g_array_unref$descriptor() {
        return g_array_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_array_unref(GArray *array)
     * }
     */
    public static MethodHandle g_array_unref$handle() {
        return g_array_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_array_unref(GArray *array)
     * }
     */
    public static void g_array_unref(MemorySegment array) {
        var mh$ = g_array_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_unref", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_get_element_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_get_element_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_array_get_element_size(GArray *array)
     * }
     */
    public static FunctionDescriptor g_array_get_element_size$descriptor() {
        return g_array_get_element_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_array_get_element_size(GArray *array)
     * }
     */
    public static MethodHandle g_array_get_element_size$handle() {
        return g_array_get_element_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_array_get_element_size(GArray *array)
     * }
     */
    public static int g_array_get_element_size(MemorySegment array) {
        var mh$ = g_array_get_element_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_get_element_size", array);
            }
            return (int)mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_append_vals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_append_vals"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_append_vals(GArray *array, gconstpointer data, guint len)
     * }
     */
    public static FunctionDescriptor g_array_append_vals$descriptor() {
        return g_array_append_vals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_append_vals(GArray *array, gconstpointer data, guint len)
     * }
     */
    public static MethodHandle g_array_append_vals$handle() {
        return g_array_append_vals.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_append_vals(GArray *array, gconstpointer data, guint len)
     * }
     */
    public static MemorySegment g_array_append_vals(MemorySegment array, MemorySegment data, int len) {
        var mh$ = g_array_append_vals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_append_vals", array, data, len);
            }
            return (MemorySegment)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_prepend_vals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_prepend_vals"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_prepend_vals(GArray *array, gconstpointer data, guint len)
     * }
     */
    public static FunctionDescriptor g_array_prepend_vals$descriptor() {
        return g_array_prepend_vals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_prepend_vals(GArray *array, gconstpointer data, guint len)
     * }
     */
    public static MethodHandle g_array_prepend_vals$handle() {
        return g_array_prepend_vals.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_prepend_vals(GArray *array, gconstpointer data, guint len)
     * }
     */
    public static MemorySegment g_array_prepend_vals(MemorySegment array, MemorySegment data, int len) {
        var mh$ = g_array_prepend_vals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_prepend_vals", array, data, len);
            }
            return (MemorySegment)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_insert_vals {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_insert_vals"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_insert_vals(GArray *array, guint index_, gconstpointer data, guint len)
     * }
     */
    public static FunctionDescriptor g_array_insert_vals$descriptor() {
        return g_array_insert_vals.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_insert_vals(GArray *array, guint index_, gconstpointer data, guint len)
     * }
     */
    public static MethodHandle g_array_insert_vals$handle() {
        return g_array_insert_vals.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_insert_vals(GArray *array, guint index_, gconstpointer data, guint len)
     * }
     */
    public static MemorySegment g_array_insert_vals(MemorySegment array, int index_, MemorySegment data, int len) {
        var mh$ = g_array_insert_vals.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_insert_vals", array, index_, data, len);
            }
            return (MemorySegment)mh$.invokeExact(array, index_, data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_set_size(GArray *array, guint length)
     * }
     */
    public static FunctionDescriptor g_array_set_size$descriptor() {
        return g_array_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_set_size(GArray *array, guint length)
     * }
     */
    public static MethodHandle g_array_set_size$handle() {
        return g_array_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_set_size(GArray *array, guint length)
     * }
     */
    public static MemorySegment g_array_set_size(MemorySegment array, int length) {
        var mh$ = g_array_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_set_size", array, length);
            }
            return (MemorySegment)mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_remove_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_remove_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_remove_index(GArray *array, guint index_)
     * }
     */
    public static FunctionDescriptor g_array_remove_index$descriptor() {
        return g_array_remove_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_remove_index(GArray *array, guint index_)
     * }
     */
    public static MethodHandle g_array_remove_index$handle() {
        return g_array_remove_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_remove_index(GArray *array, guint index_)
     * }
     */
    public static MemorySegment g_array_remove_index(MemorySegment array, int index_) {
        var mh$ = g_array_remove_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_remove_index", array, index_);
            }
            return (MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_remove_index_fast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_remove_index_fast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_remove_index_fast(GArray *array, guint index_)
     * }
     */
    public static FunctionDescriptor g_array_remove_index_fast$descriptor() {
        return g_array_remove_index_fast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_remove_index_fast(GArray *array, guint index_)
     * }
     */
    public static MethodHandle g_array_remove_index_fast$handle() {
        return g_array_remove_index_fast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_remove_index_fast(GArray *array, guint index_)
     * }
     */
    public static MemorySegment g_array_remove_index_fast(MemorySegment array, int index_) {
        var mh$ = g_array_remove_index_fast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_remove_index_fast", array, index_);
            }
            return (MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_remove_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_remove_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GArray *g_array_remove_range(GArray *array, guint index_, guint length)
     * }
     */
    public static FunctionDescriptor g_array_remove_range$descriptor() {
        return g_array_remove_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GArray *g_array_remove_range(GArray *array, guint index_, guint length)
     * }
     */
    public static MethodHandle g_array_remove_range$handle() {
        return g_array_remove_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GArray *g_array_remove_range(GArray *array, guint index_, guint length)
     * }
     */
    public static MemorySegment g_array_remove_range(MemorySegment array, int index_, int length) {
        var mh$ = g_array_remove_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_remove_range", array, index_, length);
            }
            return (MemorySegment)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_array_sort(GArray *array, GCompareFunc compare_func)
     * }
     */
    public static FunctionDescriptor g_array_sort$descriptor() {
        return g_array_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_array_sort(GArray *array, GCompareFunc compare_func)
     * }
     */
    public static MethodHandle g_array_sort$handle() {
        return g_array_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_array_sort(GArray *array, GCompareFunc compare_func)
     * }
     */
    public static void g_array_sort(MemorySegment array, MemorySegment compare_func) {
        var mh$ = g_array_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_sort", array, compare_func);
            }
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_sort_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_sort_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_array_sort_with_data(GArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_array_sort_with_data$descriptor() {
        return g_array_sort_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_array_sort_with_data(GArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_array_sort_with_data$handle() {
        return g_array_sort_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_array_sort_with_data(GArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static void g_array_sort_with_data(MemorySegment array, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_array_sort_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_sort_with_data", array, compare_func, user_data);
            }
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_binary_search {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_binary_search"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_array_binary_search(GArray *array, gconstpointer target, GCompareFunc compare_func, guint *out_match_index)
     * }
     */
    public static FunctionDescriptor g_array_binary_search$descriptor() {
        return g_array_binary_search.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_array_binary_search(GArray *array, gconstpointer target, GCompareFunc compare_func, guint *out_match_index)
     * }
     */
    public static MethodHandle g_array_binary_search$handle() {
        return g_array_binary_search.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_array_binary_search(GArray *array, gconstpointer target, GCompareFunc compare_func, guint *out_match_index)
     * }
     */
    public static int g_array_binary_search(MemorySegment array, MemorySegment target, MemorySegment compare_func, MemorySegment out_match_index) {
        var mh$ = g_array_binary_search.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_binary_search", array, target, compare_func, out_match_index);
            }
            return (int)mh$.invokeExact(array, target, compare_func, out_match_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_set_clear_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_set_clear_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_array_set_clear_func(GArray *array, GDestroyNotify clear_func)
     * }
     */
    public static FunctionDescriptor g_array_set_clear_func$descriptor() {
        return g_array_set_clear_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_array_set_clear_func(GArray *array, GDestroyNotify clear_func)
     * }
     */
    public static MethodHandle g_array_set_clear_func$handle() {
        return g_array_set_clear_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_array_set_clear_func(GArray *array, GDestroyNotify clear_func)
     * }
     */
    public static void g_array_set_clear_func(MemorySegment array, MemorySegment clear_func) {
        var mh$ = g_array_set_clear_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_set_clear_func", array, clear_func);
            }
            mh$.invokeExact(array, clear_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new()
     * }
     */
    public static FunctionDescriptor g_ptr_array_new$descriptor() {
        return g_ptr_array_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new()
     * }
     */
    public static MethodHandle g_ptr_array_new$handle() {
        return g_ptr_array_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new()
     * }
     */
    public static MemorySegment g_ptr_array_new() {
        var mh$ = g_ptr_array_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_new_with_free_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_new_with_free_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_with_free_func(GDestroyNotify element_free_func)
     * }
     */
    public static FunctionDescriptor g_ptr_array_new_with_free_func$descriptor() {
        return g_ptr_array_new_with_free_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_with_free_func(GDestroyNotify element_free_func)
     * }
     */
    public static MethodHandle g_ptr_array_new_with_free_func$handle() {
        return g_ptr_array_new_with_free_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_with_free_func(GDestroyNotify element_free_func)
     * }
     */
    public static MemorySegment g_ptr_array_new_with_free_func(MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_with_free_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_new_with_free_func", element_free_func);
            }
            return (MemorySegment)mh$.invokeExact(element_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_new_take {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_new_take"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_take(gpointer *data, gsize len, GDestroyNotify element_free_func)
     * }
     */
    public static FunctionDescriptor g_ptr_array_new_take$descriptor() {
        return g_ptr_array_new_take.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_take(gpointer *data, gsize len, GDestroyNotify element_free_func)
     * }
     */
    public static MethodHandle g_ptr_array_new_take$handle() {
        return g_ptr_array_new_take.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_take(gpointer *data, gsize len, GDestroyNotify element_free_func)
     * }
     */
    public static MemorySegment g_ptr_array_new_take(MemorySegment data, long len, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_take.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_new_take", data, len, element_free_func);
            }
            return (MemorySegment)mh$.invokeExact(data, len, element_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_new_from_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_new_from_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_from_array(gpointer *data, gsize len, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func)
     * }
     */
    public static FunctionDescriptor g_ptr_array_new_from_array$descriptor() {
        return g_ptr_array_new_from_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_from_array(gpointer *data, gsize len, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func)
     * }
     */
    public static MethodHandle g_ptr_array_new_from_array$handle() {
        return g_ptr_array_new_from_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_from_array(gpointer *data, gsize len, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func)
     * }
     */
    public static MemorySegment g_ptr_array_new_from_array(MemorySegment data, long len, MemorySegment copy_func, MemorySegment copy_func_user_data, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_from_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_new_from_array", data, len, copy_func, copy_func_user_data, element_free_func);
            }
            return (MemorySegment)mh$.invokeExact(data, len, copy_func, copy_func_user_data, element_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_steal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer *g_ptr_array_steal(GPtrArray *array, gsize *len)
     * }
     */
    public static FunctionDescriptor g_ptr_array_steal$descriptor() {
        return g_ptr_array_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer *g_ptr_array_steal(GPtrArray *array, gsize *len)
     * }
     */
    public static MethodHandle g_ptr_array_steal$handle() {
        return g_ptr_array_steal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer *g_ptr_array_steal(GPtrArray *array, gsize *len)
     * }
     */
    public static MemorySegment g_ptr_array_steal(MemorySegment array, MemorySegment len) {
        var mh$ = g_ptr_array_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_steal", array, len);
            }
            return (MemorySegment)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_copy(GPtrArray *array, GCopyFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_ptr_array_copy$descriptor() {
        return g_ptr_array_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_copy(GPtrArray *array, GCopyFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_ptr_array_copy$handle() {
        return g_ptr_array_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_copy(GPtrArray *array, GCopyFunc func, gpointer user_data)
     * }
     */
    public static MemorySegment g_ptr_array_copy(MemorySegment array, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_ptr_array_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_copy", array, func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(array, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_sized_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_sized_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_sized_new(guint reserved_size)
     * }
     */
    public static FunctionDescriptor g_ptr_array_sized_new$descriptor() {
        return g_ptr_array_sized_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_sized_new(guint reserved_size)
     * }
     */
    public static MethodHandle g_ptr_array_sized_new$handle() {
        return g_ptr_array_sized_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_sized_new(guint reserved_size)
     * }
     */
    public static MemorySegment g_ptr_array_sized_new(int reserved_size) {
        var mh$ = g_ptr_array_sized_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_sized_new", reserved_size);
            }
            return (MemorySegment)mh$.invokeExact(reserved_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_new_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_new_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_full(guint reserved_size, GDestroyNotify element_free_func)
     * }
     */
    public static FunctionDescriptor g_ptr_array_new_full$descriptor() {
        return g_ptr_array_new_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_full(guint reserved_size, GDestroyNotify element_free_func)
     * }
     */
    public static MethodHandle g_ptr_array_new_full$handle() {
        return g_ptr_array_new_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_full(guint reserved_size, GDestroyNotify element_free_func)
     * }
     */
    public static MemorySegment g_ptr_array_new_full(int reserved_size, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_new_full", reserved_size, element_free_func);
            }
            return (MemorySegment)mh$.invokeExact(reserved_size, element_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_new_null_terminated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_new_null_terminated"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_null_terminated(guint reserved_size, GDestroyNotify element_free_func, gboolean null_terminated)
     * }
     */
    public static FunctionDescriptor g_ptr_array_new_null_terminated$descriptor() {
        return g_ptr_array_new_null_terminated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_null_terminated(guint reserved_size, GDestroyNotify element_free_func, gboolean null_terminated)
     * }
     */
    public static MethodHandle g_ptr_array_new_null_terminated$handle() {
        return g_ptr_array_new_null_terminated.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_null_terminated(guint reserved_size, GDestroyNotify element_free_func, gboolean null_terminated)
     * }
     */
    public static MemorySegment g_ptr_array_new_null_terminated(int reserved_size, MemorySegment element_free_func, int null_terminated) {
        var mh$ = g_ptr_array_new_null_terminated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_new_null_terminated", reserved_size, element_free_func, null_terminated);
            }
            return (MemorySegment)mh$.invokeExact(reserved_size, element_free_func, null_terminated);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_new_take_null_terminated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_new_take_null_terminated"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_take_null_terminated(gpointer *data, GDestroyNotify element_free_func)
     * }
     */
    public static FunctionDescriptor g_ptr_array_new_take_null_terminated$descriptor() {
        return g_ptr_array_new_take_null_terminated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_take_null_terminated(gpointer *data, GDestroyNotify element_free_func)
     * }
     */
    public static MethodHandle g_ptr_array_new_take_null_terminated$handle() {
        return g_ptr_array_new_take_null_terminated.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_take_null_terminated(gpointer *data, GDestroyNotify element_free_func)
     * }
     */
    public static MemorySegment g_ptr_array_new_take_null_terminated(MemorySegment data, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_take_null_terminated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_new_take_null_terminated", data, element_free_func);
            }
            return (MemorySegment)mh$.invokeExact(data, element_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_new_from_null_terminated_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_new_from_null_terminated_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_from_null_terminated_array(gpointer *data, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func)
     * }
     */
    public static FunctionDescriptor g_ptr_array_new_from_null_terminated_array$descriptor() {
        return g_ptr_array_new_from_null_terminated_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_from_null_terminated_array(gpointer *data, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func)
     * }
     */
    public static MethodHandle g_ptr_array_new_from_null_terminated_array$handle() {
        return g_ptr_array_new_from_null_terminated_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_new_from_null_terminated_array(gpointer *data, GCopyFunc copy_func, gpointer copy_func_user_data, GDestroyNotify element_free_func)
     * }
     */
    public static MemorySegment g_ptr_array_new_from_null_terminated_array(MemorySegment data, MemorySegment copy_func, MemorySegment copy_func_user_data, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_new_from_null_terminated_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_new_from_null_terminated_array", data, copy_func, copy_func_user_data, element_free_func);
            }
            return (MemorySegment)mh$.invokeExact(data, copy_func, copy_func_user_data, element_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer *g_ptr_array_free(GPtrArray *array, gboolean free_seg)
     * }
     */
    public static FunctionDescriptor g_ptr_array_free$descriptor() {
        return g_ptr_array_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer *g_ptr_array_free(GPtrArray *array, gboolean free_seg)
     * }
     */
    public static MethodHandle g_ptr_array_free$handle() {
        return g_ptr_array_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer *g_ptr_array_free(GPtrArray *array, gboolean free_seg)
     * }
     */
    public static MemorySegment g_ptr_array_free(MemorySegment array, int free_seg) {
        var mh$ = g_ptr_array_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_free", array, free_seg);
            }
            return (MemorySegment)mh$.invokeExact(array, free_seg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_ref(GPtrArray *array)
     * }
     */
    public static FunctionDescriptor g_ptr_array_ref$descriptor() {
        return g_ptr_array_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_ref(GPtrArray *array)
     * }
     */
    public static MethodHandle g_ptr_array_ref$handle() {
        return g_ptr_array_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_ref(GPtrArray *array)
     * }
     */
    public static MemorySegment g_ptr_array_ref(MemorySegment array) {
        var mh$ = g_ptr_array_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_ref", array);
            }
            return (MemorySegment)mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_unref(GPtrArray *array)
     * }
     */
    public static FunctionDescriptor g_ptr_array_unref$descriptor() {
        return g_ptr_array_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_unref(GPtrArray *array)
     * }
     */
    public static MethodHandle g_ptr_array_unref$handle() {
        return g_ptr_array_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_unref(GPtrArray *array)
     * }
     */
    public static void g_ptr_array_unref(MemorySegment array) {
        var mh$ = g_ptr_array_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_unref", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_set_free_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_set_free_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_set_free_func(GPtrArray *array, GDestroyNotify element_free_func)
     * }
     */
    public static FunctionDescriptor g_ptr_array_set_free_func$descriptor() {
        return g_ptr_array_set_free_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_set_free_func(GPtrArray *array, GDestroyNotify element_free_func)
     * }
     */
    public static MethodHandle g_ptr_array_set_free_func$handle() {
        return g_ptr_array_set_free_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_set_free_func(GPtrArray *array, GDestroyNotify element_free_func)
     * }
     */
    public static void g_ptr_array_set_free_func(MemorySegment array, MemorySegment element_free_func) {
        var mh$ = g_ptr_array_set_free_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_set_free_func", array, element_free_func);
            }
            mh$.invokeExact(array, element_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_set_size(GPtrArray *array, gint length)
     * }
     */
    public static FunctionDescriptor g_ptr_array_set_size$descriptor() {
        return g_ptr_array_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_set_size(GPtrArray *array, gint length)
     * }
     */
    public static MethodHandle g_ptr_array_set_size$handle() {
        return g_ptr_array_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_set_size(GPtrArray *array, gint length)
     * }
     */
    public static void g_ptr_array_set_size(MemorySegment array, int length) {
        var mh$ = g_ptr_array_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_set_size", array, length);
            }
            mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_remove_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_remove_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_remove_index(GPtrArray *array, guint index_)
     * }
     */
    public static FunctionDescriptor g_ptr_array_remove_index$descriptor() {
        return g_ptr_array_remove_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_remove_index(GPtrArray *array, guint index_)
     * }
     */
    public static MethodHandle g_ptr_array_remove_index$handle() {
        return g_ptr_array_remove_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_remove_index(GPtrArray *array, guint index_)
     * }
     */
    public static MemorySegment g_ptr_array_remove_index(MemorySegment array, int index_) {
        var mh$ = g_ptr_array_remove_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_remove_index", array, index_);
            }
            return (MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_remove_index_fast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_remove_index_fast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_remove_index_fast(GPtrArray *array, guint index_)
     * }
     */
    public static FunctionDescriptor g_ptr_array_remove_index_fast$descriptor() {
        return g_ptr_array_remove_index_fast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_remove_index_fast(GPtrArray *array, guint index_)
     * }
     */
    public static MethodHandle g_ptr_array_remove_index_fast$handle() {
        return g_ptr_array_remove_index_fast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_remove_index_fast(GPtrArray *array, guint index_)
     * }
     */
    public static MemorySegment g_ptr_array_remove_index_fast(MemorySegment array, int index_) {
        var mh$ = g_ptr_array_remove_index_fast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_remove_index_fast", array, index_);
            }
            return (MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_steal_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_steal_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_steal_index(GPtrArray *array, guint index_)
     * }
     */
    public static FunctionDescriptor g_ptr_array_steal_index$descriptor() {
        return g_ptr_array_steal_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_steal_index(GPtrArray *array, guint index_)
     * }
     */
    public static MethodHandle g_ptr_array_steal_index$handle() {
        return g_ptr_array_steal_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_steal_index(GPtrArray *array, guint index_)
     * }
     */
    public static MemorySegment g_ptr_array_steal_index(MemorySegment array, int index_) {
        var mh$ = g_ptr_array_steal_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_steal_index", array, index_);
            }
            return (MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_steal_index_fast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_steal_index_fast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_steal_index_fast(GPtrArray *array, guint index_)
     * }
     */
    public static FunctionDescriptor g_ptr_array_steal_index_fast$descriptor() {
        return g_ptr_array_steal_index_fast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_steal_index_fast(GPtrArray *array, guint index_)
     * }
     */
    public static MethodHandle g_ptr_array_steal_index_fast$handle() {
        return g_ptr_array_steal_index_fast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_ptr_array_steal_index_fast(GPtrArray *array, guint index_)
     * }
     */
    public static MemorySegment g_ptr_array_steal_index_fast(MemorySegment array, int index_) {
        var mh$ = g_ptr_array_steal_index_fast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_steal_index_fast", array, index_);
            }
            return (MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_remove(GPtrArray *array, gpointer data)
     * }
     */
    public static FunctionDescriptor g_ptr_array_remove$descriptor() {
        return g_ptr_array_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_remove(GPtrArray *array, gpointer data)
     * }
     */
    public static MethodHandle g_ptr_array_remove$handle() {
        return g_ptr_array_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_remove(GPtrArray *array, gpointer data)
     * }
     */
    public static int g_ptr_array_remove(MemorySegment array, MemorySegment data) {
        var mh$ = g_ptr_array_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_remove", array, data);
            }
            return (int)mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_remove_fast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_remove_fast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_remove_fast(GPtrArray *array, gpointer data)
     * }
     */
    public static FunctionDescriptor g_ptr_array_remove_fast$descriptor() {
        return g_ptr_array_remove_fast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_remove_fast(GPtrArray *array, gpointer data)
     * }
     */
    public static MethodHandle g_ptr_array_remove_fast$handle() {
        return g_ptr_array_remove_fast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_remove_fast(GPtrArray *array, gpointer data)
     * }
     */
    public static int g_ptr_array_remove_fast(MemorySegment array, MemorySegment data) {
        var mh$ = g_ptr_array_remove_fast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_remove_fast", array, data);
            }
            return (int)mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_remove_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_remove_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_remove_range(GPtrArray *array, guint index_, guint length)
     * }
     */
    public static FunctionDescriptor g_ptr_array_remove_range$descriptor() {
        return g_ptr_array_remove_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_remove_range(GPtrArray *array, guint index_, guint length)
     * }
     */
    public static MethodHandle g_ptr_array_remove_range$handle() {
        return g_ptr_array_remove_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *g_ptr_array_remove_range(GPtrArray *array, guint index_, guint length)
     * }
     */
    public static MemorySegment g_ptr_array_remove_range(MemorySegment array, int index_, int length) {
        var mh$ = g_ptr_array_remove_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_remove_range", array, index_, length);
            }
            return (MemorySegment)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_add(GPtrArray *array, gpointer data)
     * }
     */
    public static FunctionDescriptor g_ptr_array_add$descriptor() {
        return g_ptr_array_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_add(GPtrArray *array, gpointer data)
     * }
     */
    public static MethodHandle g_ptr_array_add$handle() {
        return g_ptr_array_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_add(GPtrArray *array, gpointer data)
     * }
     */
    public static void g_ptr_array_add(MemorySegment array, MemorySegment data) {
        var mh$ = g_ptr_array_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_add", array, data);
            }
            mh$.invokeExact(array, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_extend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_extend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_extend(GPtrArray *array_to_extend, GPtrArray *array, GCopyFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_ptr_array_extend$descriptor() {
        return g_ptr_array_extend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_extend(GPtrArray *array_to_extend, GPtrArray *array, GCopyFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_ptr_array_extend$handle() {
        return g_ptr_array_extend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_extend(GPtrArray *array_to_extend, GPtrArray *array, GCopyFunc func, gpointer user_data)
     * }
     */
    public static void g_ptr_array_extend(MemorySegment array_to_extend, MemorySegment array, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_ptr_array_extend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_extend", array_to_extend, array, func, user_data);
            }
            mh$.invokeExact(array_to_extend, array, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_extend_and_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_extend_and_steal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_extend_and_steal(GPtrArray *array_to_extend, GPtrArray *array)
     * }
     */
    public static FunctionDescriptor g_ptr_array_extend_and_steal$descriptor() {
        return g_ptr_array_extend_and_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_extend_and_steal(GPtrArray *array_to_extend, GPtrArray *array)
     * }
     */
    public static MethodHandle g_ptr_array_extend_and_steal$handle() {
        return g_ptr_array_extend_and_steal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_extend_and_steal(GPtrArray *array_to_extend, GPtrArray *array)
     * }
     */
    public static void g_ptr_array_extend_and_steal(MemorySegment array_to_extend, MemorySegment array) {
        var mh$ = g_ptr_array_extend_and_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_extend_and_steal", array_to_extend, array);
            }
            mh$.invokeExact(array_to_extend, array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_insert(GPtrArray *array, gint index_, gpointer data)
     * }
     */
    public static FunctionDescriptor g_ptr_array_insert$descriptor() {
        return g_ptr_array_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_insert(GPtrArray *array, gint index_, gpointer data)
     * }
     */
    public static MethodHandle g_ptr_array_insert$handle() {
        return g_ptr_array_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_insert(GPtrArray *array, gint index_, gpointer data)
     * }
     */
    public static void g_ptr_array_insert(MemorySegment array, int index_, MemorySegment data) {
        var mh$ = g_ptr_array_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_insert", array, index_, data);
            }
            mh$.invokeExact(array, index_, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_sort(GPtrArray *array, GCompareFunc compare_func)
     * }
     */
    public static FunctionDescriptor g_ptr_array_sort$descriptor() {
        return g_ptr_array_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_sort(GPtrArray *array, GCompareFunc compare_func)
     * }
     */
    public static MethodHandle g_ptr_array_sort$handle() {
        return g_ptr_array_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_sort(GPtrArray *array, GCompareFunc compare_func)
     * }
     */
    public static void g_ptr_array_sort(MemorySegment array, MemorySegment compare_func) {
        var mh$ = g_ptr_array_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_sort", array, compare_func);
            }
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_sort_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_sort_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_sort_with_data(GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_ptr_array_sort_with_data$descriptor() {
        return g_ptr_array_sort_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_sort_with_data(GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_ptr_array_sort_with_data$handle() {
        return g_ptr_array_sort_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_sort_with_data(GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static void g_ptr_array_sort_with_data(MemorySegment array, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_ptr_array_sort_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_sort_with_data", array, compare_func, user_data);
            }
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_sort_values {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_sort_values"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_sort_values(GPtrArray *array, GCompareFunc compare_func)
     * }
     */
    public static FunctionDescriptor g_ptr_array_sort_values$descriptor() {
        return g_ptr_array_sort_values.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_sort_values(GPtrArray *array, GCompareFunc compare_func)
     * }
     */
    public static MethodHandle g_ptr_array_sort_values$handle() {
        return g_ptr_array_sort_values.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_sort_values(GPtrArray *array, GCompareFunc compare_func)
     * }
     */
    public static void g_ptr_array_sort_values(MemorySegment array, MemorySegment compare_func) {
        var mh$ = g_ptr_array_sort_values.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_sort_values", array, compare_func);
            }
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_sort_values_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_sort_values_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_sort_values_with_data(GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_ptr_array_sort_values_with_data$descriptor() {
        return g_ptr_array_sort_values_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_sort_values_with_data(GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_ptr_array_sort_values_with_data$handle() {
        return g_ptr_array_sort_values_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_sort_values_with_data(GPtrArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static void g_ptr_array_sort_values_with_data(MemorySegment array, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_ptr_array_sort_values_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_sort_values_with_data", array, compare_func, user_data);
            }
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ptr_array_foreach(GPtrArray *array, GFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_ptr_array_foreach$descriptor() {
        return g_ptr_array_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ptr_array_foreach(GPtrArray *array, GFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_ptr_array_foreach$handle() {
        return g_ptr_array_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ptr_array_foreach(GPtrArray *array, GFunc func, gpointer user_data)
     * }
     */
    public static void g_ptr_array_foreach(MemorySegment array, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_ptr_array_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_foreach", array, func, user_data);
            }
            mh$.invokeExact(array, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_find(GPtrArray *haystack, gconstpointer needle, guint *index_)
     * }
     */
    public static FunctionDescriptor g_ptr_array_find$descriptor() {
        return g_ptr_array_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_find(GPtrArray *haystack, gconstpointer needle, guint *index_)
     * }
     */
    public static MethodHandle g_ptr_array_find$handle() {
        return g_ptr_array_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_find(GPtrArray *haystack, gconstpointer needle, guint *index_)
     * }
     */
    public static int g_ptr_array_find(MemorySegment haystack, MemorySegment needle, MemorySegment index_) {
        var mh$ = g_ptr_array_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_find", haystack, needle, index_);
            }
            return (int)mh$.invokeExact(haystack, needle, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_find_with_equal_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_find_with_equal_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_find_with_equal_func(GPtrArray *haystack, gconstpointer needle, GEqualFunc equal_func, guint *index_)
     * }
     */
    public static FunctionDescriptor g_ptr_array_find_with_equal_func$descriptor() {
        return g_ptr_array_find_with_equal_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_find_with_equal_func(GPtrArray *haystack, gconstpointer needle, GEqualFunc equal_func, guint *index_)
     * }
     */
    public static MethodHandle g_ptr_array_find_with_equal_func$handle() {
        return g_ptr_array_find_with_equal_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_find_with_equal_func(GPtrArray *haystack, gconstpointer needle, GEqualFunc equal_func, guint *index_)
     * }
     */
    public static int g_ptr_array_find_with_equal_func(MemorySegment haystack, MemorySegment needle, MemorySegment equal_func, MemorySegment index_) {
        var mh$ = g_ptr_array_find_with_equal_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_find_with_equal_func", haystack, needle, equal_func, index_);
            }
            return (int)mh$.invokeExact(haystack, needle, equal_func, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_is_null_terminated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_is_null_terminated"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_is_null_terminated(GPtrArray *array)
     * }
     */
    public static FunctionDescriptor g_ptr_array_is_null_terminated$descriptor() {
        return g_ptr_array_is_null_terminated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_is_null_terminated(GPtrArray *array)
     * }
     */
    public static MethodHandle g_ptr_array_is_null_terminated$handle() {
        return g_ptr_array_is_null_terminated.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_ptr_array_is_null_terminated(GPtrArray *array)
     * }
     */
    public static int g_ptr_array_is_null_terminated(MemorySegment array) {
        var mh$ = g_ptr_array_is_null_terminated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_is_null_terminated", array);
            }
            return (int)mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_new()
     * }
     */
    public static FunctionDescriptor g_byte_array_new$descriptor() {
        return g_byte_array_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_new()
     * }
     */
    public static MethodHandle g_byte_array_new$handle() {
        return g_byte_array_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_new()
     * }
     */
    public static MemorySegment g_byte_array_new() {
        var mh$ = g_byte_array_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_new_take {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_new_take"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_new_take(guint8 *data, gsize len)
     * }
     */
    public static FunctionDescriptor g_byte_array_new_take$descriptor() {
        return g_byte_array_new_take.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_new_take(guint8 *data, gsize len)
     * }
     */
    public static MethodHandle g_byte_array_new_take$handle() {
        return g_byte_array_new_take.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_new_take(guint8 *data, gsize len)
     * }
     */
    public static MemorySegment g_byte_array_new_take(MemorySegment data, long len) {
        var mh$ = g_byte_array_new_take.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_new_take", data, len);
            }
            return (MemorySegment)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_steal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint8 *g_byte_array_steal(GByteArray *array, gsize *len)
     * }
     */
    public static FunctionDescriptor g_byte_array_steal$descriptor() {
        return g_byte_array_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint8 *g_byte_array_steal(GByteArray *array, gsize *len)
     * }
     */
    public static MethodHandle g_byte_array_steal$handle() {
        return g_byte_array_steal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint8 *g_byte_array_steal(GByteArray *array, gsize *len)
     * }
     */
    public static MemorySegment g_byte_array_steal(MemorySegment array, MemorySegment len) {
        var mh$ = g_byte_array_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_steal", array, len);
            }
            return (MemorySegment)mh$.invokeExact(array, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_sized_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_sized_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_sized_new(guint reserved_size)
     * }
     */
    public static FunctionDescriptor g_byte_array_sized_new$descriptor() {
        return g_byte_array_sized_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_sized_new(guint reserved_size)
     * }
     */
    public static MethodHandle g_byte_array_sized_new$handle() {
        return g_byte_array_sized_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_sized_new(guint reserved_size)
     * }
     */
    public static MemorySegment g_byte_array_sized_new(int reserved_size) {
        var mh$ = g_byte_array_sized_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_sized_new", reserved_size);
            }
            return (MemorySegment)mh$.invokeExact(reserved_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint8 *g_byte_array_free(GByteArray *array, gboolean free_segment)
     * }
     */
    public static FunctionDescriptor g_byte_array_free$descriptor() {
        return g_byte_array_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint8 *g_byte_array_free(GByteArray *array, gboolean free_segment)
     * }
     */
    public static MethodHandle g_byte_array_free$handle() {
        return g_byte_array_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint8 *g_byte_array_free(GByteArray *array, gboolean free_segment)
     * }
     */
    public static MemorySegment g_byte_array_free(MemorySegment array, int free_segment) {
        var mh$ = g_byte_array_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_free", array, free_segment);
            }
            return (MemorySegment)mh$.invokeExact(array, free_segment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_free_to_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_free_to_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_byte_array_free_to_bytes(GByteArray *array)
     * }
     */
    public static FunctionDescriptor g_byte_array_free_to_bytes$descriptor() {
        return g_byte_array_free_to_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_byte_array_free_to_bytes(GByteArray *array)
     * }
     */
    public static MethodHandle g_byte_array_free_to_bytes$handle() {
        return g_byte_array_free_to_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_byte_array_free_to_bytes(GByteArray *array)
     * }
     */
    public static MemorySegment g_byte_array_free_to_bytes(MemorySegment array) {
        var mh$ = g_byte_array_free_to_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_free_to_bytes", array);
            }
            return (MemorySegment)mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_ref(GByteArray *array)
     * }
     */
    public static FunctionDescriptor g_byte_array_ref$descriptor() {
        return g_byte_array_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_ref(GByteArray *array)
     * }
     */
    public static MethodHandle g_byte_array_ref$handle() {
        return g_byte_array_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_ref(GByteArray *array)
     * }
     */
    public static MemorySegment g_byte_array_ref(MemorySegment array) {
        var mh$ = g_byte_array_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_ref", array);
            }
            return (MemorySegment)mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_byte_array_unref(GByteArray *array)
     * }
     */
    public static FunctionDescriptor g_byte_array_unref$descriptor() {
        return g_byte_array_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_byte_array_unref(GByteArray *array)
     * }
     */
    public static MethodHandle g_byte_array_unref$handle() {
        return g_byte_array_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_byte_array_unref(GByteArray *array)
     * }
     */
    public static void g_byte_array_unref(MemorySegment array) {
        var mh$ = g_byte_array_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_unref", array);
            }
            mh$.invokeExact(array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_append(GByteArray *array, const guint8 *data, guint len)
     * }
     */
    public static FunctionDescriptor g_byte_array_append$descriptor() {
        return g_byte_array_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_append(GByteArray *array, const guint8 *data, guint len)
     * }
     */
    public static MethodHandle g_byte_array_append$handle() {
        return g_byte_array_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_append(GByteArray *array, const guint8 *data, guint len)
     * }
     */
    public static MemorySegment g_byte_array_append(MemorySegment array, MemorySegment data, int len) {
        var mh$ = g_byte_array_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_append", array, data, len);
            }
            return (MemorySegment)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_prepend(GByteArray *array, const guint8 *data, guint len)
     * }
     */
    public static FunctionDescriptor g_byte_array_prepend$descriptor() {
        return g_byte_array_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_prepend(GByteArray *array, const guint8 *data, guint len)
     * }
     */
    public static MethodHandle g_byte_array_prepend$handle() {
        return g_byte_array_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_prepend(GByteArray *array, const guint8 *data, guint len)
     * }
     */
    public static MemorySegment g_byte_array_prepend(MemorySegment array, MemorySegment data, int len) {
        var mh$ = g_byte_array_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_prepend", array, data, len);
            }
            return (MemorySegment)mh$.invokeExact(array, data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_set_size(GByteArray *array, guint length)
     * }
     */
    public static FunctionDescriptor g_byte_array_set_size$descriptor() {
        return g_byte_array_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_set_size(GByteArray *array, guint length)
     * }
     */
    public static MethodHandle g_byte_array_set_size$handle() {
        return g_byte_array_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_set_size(GByteArray *array, guint length)
     * }
     */
    public static MemorySegment g_byte_array_set_size(MemorySegment array, int length) {
        var mh$ = g_byte_array_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_set_size", array, length);
            }
            return (MemorySegment)mh$.invokeExact(array, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_remove_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_remove_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_remove_index(GByteArray *array, guint index_)
     * }
     */
    public static FunctionDescriptor g_byte_array_remove_index$descriptor() {
        return g_byte_array_remove_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_remove_index(GByteArray *array, guint index_)
     * }
     */
    public static MethodHandle g_byte_array_remove_index$handle() {
        return g_byte_array_remove_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_remove_index(GByteArray *array, guint index_)
     * }
     */
    public static MemorySegment g_byte_array_remove_index(MemorySegment array, int index_) {
        var mh$ = g_byte_array_remove_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_remove_index", array, index_);
            }
            return (MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_remove_index_fast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_remove_index_fast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_remove_index_fast(GByteArray *array, guint index_)
     * }
     */
    public static FunctionDescriptor g_byte_array_remove_index_fast$descriptor() {
        return g_byte_array_remove_index_fast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_remove_index_fast(GByteArray *array, guint index_)
     * }
     */
    public static MethodHandle g_byte_array_remove_index_fast$handle() {
        return g_byte_array_remove_index_fast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_remove_index_fast(GByteArray *array, guint index_)
     * }
     */
    public static MemorySegment g_byte_array_remove_index_fast(MemorySegment array, int index_) {
        var mh$ = g_byte_array_remove_index_fast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_remove_index_fast", array, index_);
            }
            return (MemorySegment)mh$.invokeExact(array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_remove_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_remove_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_remove_range(GByteArray *array, guint index_, guint length)
     * }
     */
    public static FunctionDescriptor g_byte_array_remove_range$descriptor() {
        return g_byte_array_remove_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_remove_range(GByteArray *array, guint index_, guint length)
     * }
     */
    public static MethodHandle g_byte_array_remove_range$handle() {
        return g_byte_array_remove_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_byte_array_remove_range(GByteArray *array, guint index_, guint length)
     * }
     */
    public static MemorySegment g_byte_array_remove_range(MemorySegment array, int index_, int length) {
        var mh$ = g_byte_array_remove_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_remove_range", array, index_, length);
            }
            return (MemorySegment)mh$.invokeExact(array, index_, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_byte_array_sort(GByteArray *array, GCompareFunc compare_func)
     * }
     */
    public static FunctionDescriptor g_byte_array_sort$descriptor() {
        return g_byte_array_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_byte_array_sort(GByteArray *array, GCompareFunc compare_func)
     * }
     */
    public static MethodHandle g_byte_array_sort$handle() {
        return g_byte_array_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_byte_array_sort(GByteArray *array, GCompareFunc compare_func)
     * }
     */
    public static void g_byte_array_sort(MemorySegment array, MemorySegment compare_func) {
        var mh$ = g_byte_array_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_sort", array, compare_func);
            }
            mh$.invokeExact(array, compare_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_sort_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_sort_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_byte_array_sort_with_data(GByteArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_byte_array_sort_with_data$descriptor() {
        return g_byte_array_sort_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_byte_array_sort_with_data(GByteArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_byte_array_sort_with_data$handle() {
        return g_byte_array_sort_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_byte_array_sort_with_data(GByteArray *array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static void g_byte_array_sort_with_data(MemorySegment array, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_byte_array_sort_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_sort_with_data", array, compare_func, user_data);
            }
            mh$.invokeExact(array, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_atomic_int_get(const volatile gint *atomic)
     * }
     */
    public static FunctionDescriptor g_atomic_int_get$descriptor() {
        return g_atomic_int_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_atomic_int_get(const volatile gint *atomic)
     * }
     */
    public static MethodHandle g_atomic_int_get$handle() {
        return g_atomic_int_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_atomic_int_get(const volatile gint *atomic)
     * }
     */
    public static int g_atomic_int_get(MemorySegment atomic) {
        var mh$ = g_atomic_int_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_get", atomic);
            }
            return (int)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_atomic_int_set(volatile gint *atomic, gint newval)
     * }
     */
    public static FunctionDescriptor g_atomic_int_set$descriptor() {
        return g_atomic_int_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_atomic_int_set(volatile gint *atomic, gint newval)
     * }
     */
    public static MethodHandle g_atomic_int_set$handle() {
        return g_atomic_int_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_atomic_int_set(volatile gint *atomic, gint newval)
     * }
     */
    public static void g_atomic_int_set(MemorySegment atomic, int newval) {
        var mh$ = g_atomic_int_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_set", atomic, newval);
            }
            mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_inc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_inc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_atomic_int_inc(volatile gint *atomic)
     * }
     */
    public static FunctionDescriptor g_atomic_int_inc$descriptor() {
        return g_atomic_int_inc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_atomic_int_inc(volatile gint *atomic)
     * }
     */
    public static MethodHandle g_atomic_int_inc$handle() {
        return g_atomic_int_inc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_atomic_int_inc(volatile gint *atomic)
     * }
     */
    public static void g_atomic_int_inc(MemorySegment atomic) {
        var mh$ = g_atomic_int_inc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_inc", atomic);
            }
            mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_dec_and_test {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_dec_and_test"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_int_dec_and_test(volatile gint *atomic)
     * }
     */
    public static FunctionDescriptor g_atomic_int_dec_and_test$descriptor() {
        return g_atomic_int_dec_and_test.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_int_dec_and_test(volatile gint *atomic)
     * }
     */
    public static MethodHandle g_atomic_int_dec_and_test$handle() {
        return g_atomic_int_dec_and_test.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_atomic_int_dec_and_test(volatile gint *atomic)
     * }
     */
    public static int g_atomic_int_dec_and_test(MemorySegment atomic) {
        var mh$ = g_atomic_int_dec_and_test.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_dec_and_test", atomic);
            }
            return (int)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_compare_and_exchange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_compare_and_exchange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_int_compare_and_exchange(volatile gint *atomic, gint oldval, gint newval)
     * }
     */
    public static FunctionDescriptor g_atomic_int_compare_and_exchange$descriptor() {
        return g_atomic_int_compare_and_exchange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_int_compare_and_exchange(volatile gint *atomic, gint oldval, gint newval)
     * }
     */
    public static MethodHandle g_atomic_int_compare_and_exchange$handle() {
        return g_atomic_int_compare_and_exchange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_atomic_int_compare_and_exchange(volatile gint *atomic, gint oldval, gint newval)
     * }
     */
    public static int g_atomic_int_compare_and_exchange(MemorySegment atomic, int oldval, int newval) {
        var mh$ = g_atomic_int_compare_and_exchange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_compare_and_exchange", atomic, oldval, newval);
            }
            return (int)mh$.invokeExact(atomic, oldval, newval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_compare_and_exchange_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_compare_and_exchange_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_int_compare_and_exchange_full(gint *atomic, gint oldval, gint newval, gint *preval)
     * }
     */
    public static FunctionDescriptor g_atomic_int_compare_and_exchange_full$descriptor() {
        return g_atomic_int_compare_and_exchange_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_int_compare_and_exchange_full(gint *atomic, gint oldval, gint newval, gint *preval)
     * }
     */
    public static MethodHandle g_atomic_int_compare_and_exchange_full$handle() {
        return g_atomic_int_compare_and_exchange_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_atomic_int_compare_and_exchange_full(gint *atomic, gint oldval, gint newval, gint *preval)
     * }
     */
    public static int g_atomic_int_compare_and_exchange_full(MemorySegment atomic, int oldval, int newval, MemorySegment preval) {
        var mh$ = g_atomic_int_compare_and_exchange_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_compare_and_exchange_full", atomic, oldval, newval, preval);
            }
            return (int)mh$.invokeExact(atomic, oldval, newval, preval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_exchange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_exchange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_atomic_int_exchange(gint *atomic, gint newval)
     * }
     */
    public static FunctionDescriptor g_atomic_int_exchange$descriptor() {
        return g_atomic_int_exchange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_atomic_int_exchange(gint *atomic, gint newval)
     * }
     */
    public static MethodHandle g_atomic_int_exchange$handle() {
        return g_atomic_int_exchange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_atomic_int_exchange(gint *atomic, gint newval)
     * }
     */
    public static int g_atomic_int_exchange(MemorySegment atomic, int newval) {
        var mh$ = g_atomic_int_exchange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_exchange", atomic, newval);
            }
            return (int)mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_atomic_int_add(volatile gint *atomic, gint val)
     * }
     */
    public static FunctionDescriptor g_atomic_int_add$descriptor() {
        return g_atomic_int_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_atomic_int_add(volatile gint *atomic, gint val)
     * }
     */
    public static MethodHandle g_atomic_int_add$handle() {
        return g_atomic_int_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_atomic_int_add(volatile gint *atomic, gint val)
     * }
     */
    public static int g_atomic_int_add(MemorySegment atomic, int val) {
        var mh$ = g_atomic_int_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_add", atomic, val);
            }
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_and {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_and"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_atomic_int_and(volatile guint *atomic, guint val)
     * }
     */
    public static FunctionDescriptor g_atomic_int_and$descriptor() {
        return g_atomic_int_and.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_atomic_int_and(volatile guint *atomic, guint val)
     * }
     */
    public static MethodHandle g_atomic_int_and$handle() {
        return g_atomic_int_and.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_atomic_int_and(volatile guint *atomic, guint val)
     * }
     */
    public static int g_atomic_int_and(MemorySegment atomic, int val) {
        var mh$ = g_atomic_int_and.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_and", atomic, val);
            }
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_or {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_or"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_atomic_int_or(volatile guint *atomic, guint val)
     * }
     */
    public static FunctionDescriptor g_atomic_int_or$descriptor() {
        return g_atomic_int_or.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_atomic_int_or(volatile guint *atomic, guint val)
     * }
     */
    public static MethodHandle g_atomic_int_or$handle() {
        return g_atomic_int_or.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_atomic_int_or(volatile guint *atomic, guint val)
     * }
     */
    public static int g_atomic_int_or(MemorySegment atomic, int val) {
        var mh$ = g_atomic_int_or.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_or", atomic, val);
            }
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_xor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_xor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_atomic_int_xor(volatile guint *atomic, guint val)
     * }
     */
    public static FunctionDescriptor g_atomic_int_xor$descriptor() {
        return g_atomic_int_xor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_atomic_int_xor(volatile guint *atomic, guint val)
     * }
     */
    public static MethodHandle g_atomic_int_xor$handle() {
        return g_atomic_int_xor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_atomic_int_xor(volatile guint *atomic, guint val)
     * }
     */
    public static int g_atomic_int_xor(MemorySegment atomic, int val) {
        var mh$ = g_atomic_int_xor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_xor", atomic, val);
            }
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_pointer_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_pointer_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_pointer_get(const volatile void *atomic)
     * }
     */
    public static FunctionDescriptor g_atomic_pointer_get$descriptor() {
        return g_atomic_pointer_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_pointer_get(const volatile void *atomic)
     * }
     */
    public static MethodHandle g_atomic_pointer_get$handle() {
        return g_atomic_pointer_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_atomic_pointer_get(const volatile void *atomic)
     * }
     */
    public static MemorySegment g_atomic_pointer_get(MemorySegment atomic) {
        var mh$ = g_atomic_pointer_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_pointer_get", atomic);
            }
            return (MemorySegment)mh$.invokeExact(atomic);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_pointer_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_pointer_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_atomic_pointer_set(volatile void *atomic, gpointer newval)
     * }
     */
    public static FunctionDescriptor g_atomic_pointer_set$descriptor() {
        return g_atomic_pointer_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_atomic_pointer_set(volatile void *atomic, gpointer newval)
     * }
     */
    public static MethodHandle g_atomic_pointer_set$handle() {
        return g_atomic_pointer_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_atomic_pointer_set(volatile void *atomic, gpointer newval)
     * }
     */
    public static void g_atomic_pointer_set(MemorySegment atomic, MemorySegment newval) {
        var mh$ = g_atomic_pointer_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_pointer_set", atomic, newval);
            }
            mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_pointer_compare_and_exchange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_pointer_compare_and_exchange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_pointer_compare_and_exchange(volatile void *atomic, gpointer oldval, gpointer newval)
     * }
     */
    public static FunctionDescriptor g_atomic_pointer_compare_and_exchange$descriptor() {
        return g_atomic_pointer_compare_and_exchange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_pointer_compare_and_exchange(volatile void *atomic, gpointer oldval, gpointer newval)
     * }
     */
    public static MethodHandle g_atomic_pointer_compare_and_exchange$handle() {
        return g_atomic_pointer_compare_and_exchange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_atomic_pointer_compare_and_exchange(volatile void *atomic, gpointer oldval, gpointer newval)
     * }
     */
    public static int g_atomic_pointer_compare_and_exchange(MemorySegment atomic, MemorySegment oldval, MemorySegment newval) {
        var mh$ = g_atomic_pointer_compare_and_exchange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_pointer_compare_and_exchange", atomic, oldval, newval);
            }
            return (int)mh$.invokeExact(atomic, oldval, newval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_pointer_compare_and_exchange_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_pointer_compare_and_exchange_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_pointer_compare_and_exchange_full(void *atomic, gpointer oldval, gpointer newval, void *preval)
     * }
     */
    public static FunctionDescriptor g_atomic_pointer_compare_and_exchange_full$descriptor() {
        return g_atomic_pointer_compare_and_exchange_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_pointer_compare_and_exchange_full(void *atomic, gpointer oldval, gpointer newval, void *preval)
     * }
     */
    public static MethodHandle g_atomic_pointer_compare_and_exchange_full$handle() {
        return g_atomic_pointer_compare_and_exchange_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_atomic_pointer_compare_and_exchange_full(void *atomic, gpointer oldval, gpointer newval, void *preval)
     * }
     */
    public static int g_atomic_pointer_compare_and_exchange_full(MemorySegment atomic, MemorySegment oldval, MemorySegment newval, MemorySegment preval) {
        var mh$ = g_atomic_pointer_compare_and_exchange_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_pointer_compare_and_exchange_full", atomic, oldval, newval, preval);
            }
            return (int)mh$.invokeExact(atomic, oldval, newval, preval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_pointer_exchange {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_pointer_exchange"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_pointer_exchange(void *atomic, gpointer newval)
     * }
     */
    public static FunctionDescriptor g_atomic_pointer_exchange$descriptor() {
        return g_atomic_pointer_exchange.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_pointer_exchange(void *atomic, gpointer newval)
     * }
     */
    public static MethodHandle g_atomic_pointer_exchange$handle() {
        return g_atomic_pointer_exchange.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_atomic_pointer_exchange(void *atomic, gpointer newval)
     * }
     */
    public static MemorySegment g_atomic_pointer_exchange(MemorySegment atomic, MemorySegment newval) {
        var mh$ = g_atomic_pointer_exchange.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_pointer_exchange", atomic, newval);
            }
            return (MemorySegment)mh$.invokeExact(atomic, newval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_pointer_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_pointer_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_atomic_pointer_add(volatile void *atomic, gssize val)
     * }
     */
    public static FunctionDescriptor g_atomic_pointer_add$descriptor() {
        return g_atomic_pointer_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_atomic_pointer_add(volatile void *atomic, gssize val)
     * }
     */
    public static MethodHandle g_atomic_pointer_add$handle() {
        return g_atomic_pointer_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_atomic_pointer_add(volatile void *atomic, gssize val)
     * }
     */
    public static long g_atomic_pointer_add(MemorySegment atomic, long val) {
        var mh$ = g_atomic_pointer_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_pointer_add", atomic, val);
            }
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_pointer_and {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_pointer_and"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_atomic_pointer_and(volatile void *atomic, gsize val)
     * }
     */
    public static FunctionDescriptor g_atomic_pointer_and$descriptor() {
        return g_atomic_pointer_and.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_atomic_pointer_and(volatile void *atomic, gsize val)
     * }
     */
    public static MethodHandle g_atomic_pointer_and$handle() {
        return g_atomic_pointer_and.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_atomic_pointer_and(volatile void *atomic, gsize val)
     * }
     */
    public static long g_atomic_pointer_and(MemorySegment atomic, long val) {
        var mh$ = g_atomic_pointer_and.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_pointer_and", atomic, val);
            }
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_pointer_or {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_pointer_or"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_atomic_pointer_or(volatile void *atomic, gsize val)
     * }
     */
    public static FunctionDescriptor g_atomic_pointer_or$descriptor() {
        return g_atomic_pointer_or.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_atomic_pointer_or(volatile void *atomic, gsize val)
     * }
     */
    public static MethodHandle g_atomic_pointer_or$handle() {
        return g_atomic_pointer_or.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_atomic_pointer_or(volatile void *atomic, gsize val)
     * }
     */
    public static long g_atomic_pointer_or(MemorySegment atomic, long val) {
        var mh$ = g_atomic_pointer_or.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_pointer_or", atomic, val);
            }
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_pointer_xor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_pointer_xor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_atomic_pointer_xor(volatile void *atomic, gsize val)
     * }
     */
    public static FunctionDescriptor g_atomic_pointer_xor$descriptor() {
        return g_atomic_pointer_xor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_atomic_pointer_xor(volatile void *atomic, gsize val)
     * }
     */
    public static MethodHandle g_atomic_pointer_xor$handle() {
        return g_atomic_pointer_xor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_atomic_pointer_xor(volatile void *atomic, gsize val)
     * }
     */
    public static long g_atomic_pointer_xor(MemorySegment atomic, long val) {
        var mh$ = g_atomic_pointer_xor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_pointer_xor", atomic, val);
            }
            return (long)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_int_exchange_and_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_int_exchange_and_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_atomic_int_exchange_and_add(volatile gint *atomic, gint val)
     * }
     */
    public static FunctionDescriptor g_atomic_int_exchange_and_add$descriptor() {
        return g_atomic_int_exchange_and_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_atomic_int_exchange_and_add(volatile gint *atomic, gint val)
     * }
     */
    public static MethodHandle g_atomic_int_exchange_and_add$handle() {
        return g_atomic_int_exchange_and_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_atomic_int_exchange_and_add(volatile gint *atomic, gint val)
     * }
     */
    public static int g_atomic_int_exchange_and_add(MemorySegment atomic, int val) {
        var mh$ = g_atomic_int_exchange_and_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_int_exchange_and_add", atomic, val);
            }
            return (int)mh$.invokeExact(atomic, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef guint32 GQuark
     * }
     */
    public static final OfInt GQuark = app_indicator_h.C_INT;

    private static class g_quark_try_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_quark_try_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_quark_try_string(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_quark_try_string$descriptor() {
        return g_quark_try_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_quark_try_string(const gchar *string)
     * }
     */
    public static MethodHandle g_quark_try_string$handle() {
        return g_quark_try_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_quark_try_string(const gchar *string)
     * }
     */
    public static int g_quark_try_string(MemorySegment string) {
        var mh$ = g_quark_try_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_quark_try_string", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_quark_from_static_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_quark_from_static_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_quark_from_static_string(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_quark_from_static_string$descriptor() {
        return g_quark_from_static_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_quark_from_static_string(const gchar *string)
     * }
     */
    public static MethodHandle g_quark_from_static_string$handle() {
        return g_quark_from_static_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_quark_from_static_string(const gchar *string)
     * }
     */
    public static int g_quark_from_static_string(MemorySegment string) {
        var mh$ = g_quark_from_static_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_quark_from_static_string", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_quark_from_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_quark_from_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_quark_from_string(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_quark_from_string$descriptor() {
        return g_quark_from_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_quark_from_string(const gchar *string)
     * }
     */
    public static MethodHandle g_quark_from_string$handle() {
        return g_quark_from_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_quark_from_string(const gchar *string)
     * }
     */
    public static int g_quark_from_string(MemorySegment string) {
        var mh$ = g_quark_from_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_quark_from_string", string);
            }
            return (int)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_quark_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_quark_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_quark_to_string(GQuark quark)
     * }
     */
    public static FunctionDescriptor g_quark_to_string$descriptor() {
        return g_quark_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_quark_to_string(GQuark quark)
     * }
     */
    public static MethodHandle g_quark_to_string$handle() {
        return g_quark_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_quark_to_string(GQuark quark)
     * }
     */
    public static MemorySegment g_quark_to_string(int quark) {
        var mh$ = g_quark_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_quark_to_string", quark);
            }
            return (MemorySegment)mh$.invokeExact(quark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_intern_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_intern_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_intern_string(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_intern_string$descriptor() {
        return g_intern_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_intern_string(const gchar *string)
     * }
     */
    public static MethodHandle g_intern_string$handle() {
        return g_intern_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_intern_string(const gchar *string)
     * }
     */
    public static MemorySegment g_intern_string(MemorySegment string) {
        var mh$ = g_intern_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_intern_string", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_intern_static_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_intern_static_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_intern_static_string(const gchar *string)
     * }
     */
    public static FunctionDescriptor g_intern_static_string$descriptor() {
        return g_intern_static_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_intern_static_string(const gchar *string)
     * }
     */
    public static MethodHandle g_intern_static_string$handle() {
        return g_intern_static_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_intern_static_string(const gchar *string)
     * }
     */
    public static MemorySegment g_intern_static_string(MemorySegment string) {
        var mh$ = g_intern_static_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_intern_static_string", string);
            }
            return (MemorySegment)mh$.invokeExact(string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_error_domain_register_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_error_domain_register_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_error_domain_register_static(const char *error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear)
     * }
     */
    public static FunctionDescriptor g_error_domain_register_static$descriptor() {
        return g_error_domain_register_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_error_domain_register_static(const char *error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear)
     * }
     */
    public static MethodHandle g_error_domain_register_static$handle() {
        return g_error_domain_register_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_error_domain_register_static(const char *error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear)
     * }
     */
    public static int g_error_domain_register_static(MemorySegment error_type_name, long error_type_private_size, MemorySegment error_type_init, MemorySegment error_type_copy, MemorySegment error_type_clear) {
        var mh$ = g_error_domain_register_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_error_domain_register_static", error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
            }
            return (int)mh$.invokeExact(error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_error_domain_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_error_domain_register"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_error_domain_register(const char *error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear)
     * }
     */
    public static FunctionDescriptor g_error_domain_register$descriptor() {
        return g_error_domain_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_error_domain_register(const char *error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear)
     * }
     */
    public static MethodHandle g_error_domain_register$handle() {
        return g_error_domain_register.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_error_domain_register(const char *error_type_name, gsize error_type_private_size, GErrorInitFunc error_type_init, GErrorCopyFunc error_type_copy, GErrorClearFunc error_type_clear)
     * }
     */
    public static int g_error_domain_register(MemorySegment error_type_name, long error_type_private_size, MemorySegment error_type_init, MemorySegment error_type_copy, MemorySegment error_type_clear) {
        var mh$ = g_error_domain_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_error_domain_register", error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
            }
            return (int)mh$.invokeExact(error_type_name, error_type_private_size, error_type_init, error_type_copy, error_type_clear);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GError *g_error_new(GQuark domain, gint code, const gchar *format, ...)
     * }
     */
    public static class g_error_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_error_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_error_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GError *g_error_new(GQuark domain, gint code, const gchar *format, ...)
         * }
         */
        public static g_error_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_error_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int domain, int code, MemorySegment format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_error_new", domain, code, format, x3);
                }
                return (MemorySegment)spreader.invokeExact(domain, code, format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_error_new_literal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_error_new_literal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GError *g_error_new_literal(GQuark domain, gint code, const gchar *message)
     * }
     */
    public static FunctionDescriptor g_error_new_literal$descriptor() {
        return g_error_new_literal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GError *g_error_new_literal(GQuark domain, gint code, const gchar *message)
     * }
     */
    public static MethodHandle g_error_new_literal$handle() {
        return g_error_new_literal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GError *g_error_new_literal(GQuark domain, gint code, const gchar *message)
     * }
     */
    public static MemorySegment g_error_new_literal(int domain, int code, MemorySegment message) {
        var mh$ = g_error_new_literal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_error_new_literal", domain, code, message);
            }
            return (MemorySegment)mh$.invokeExact(domain, code, message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_error_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_error_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_error_free(GError *error)
     * }
     */
    public static FunctionDescriptor g_error_free$descriptor() {
        return g_error_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_error_free(GError *error)
     * }
     */
    public static MethodHandle g_error_free$handle() {
        return g_error_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_error_free(GError *error)
     * }
     */
    public static void g_error_free(MemorySegment error) {
        var mh$ = g_error_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_error_free", error);
            }
            mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_error_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_error_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GError *g_error_copy(const GError *error)
     * }
     */
    public static FunctionDescriptor g_error_copy$descriptor() {
        return g_error_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GError *g_error_copy(const GError *error)
     * }
     */
    public static MethodHandle g_error_copy$handle() {
        return g_error_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GError *g_error_copy(const GError *error)
     * }
     */
    public static MemorySegment g_error_copy(MemorySegment error) {
        var mh$ = g_error_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_error_copy", error);
            }
            return (MemorySegment)mh$.invokeExact(error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_error_matches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_error_matches"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_error_matches(const GError *error, GQuark domain, gint code)
     * }
     */
    public static FunctionDescriptor g_error_matches$descriptor() {
        return g_error_matches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_error_matches(const GError *error, GQuark domain, gint code)
     * }
     */
    public static MethodHandle g_error_matches$handle() {
        return g_error_matches.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_error_matches(const GError *error, GQuark domain, gint code)
     * }
     */
    public static int g_error_matches(MemorySegment error, int domain, int code) {
        var mh$ = g_error_matches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_error_matches", error, domain, code);
            }
            return (int)mh$.invokeExact(error, domain, code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_set_error(GError **err, GQuark domain, gint code, const gchar *format, ...)
     * }
     */
    public static class g_set_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_set_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_set_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_set_error(GError **err, GQuark domain, gint code, const gchar *format, ...)
         * }
         */
        public static g_set_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_set_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment err, int domain, int code, MemorySegment format, Object... x4) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_set_error", err, domain, code, format, x4);
                }
                spreader.invokeExact(err, domain, code, format, x4);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_set_error_literal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_set_error_literal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_set_error_literal(GError **err, GQuark domain, gint code, const gchar *message)
     * }
     */
    public static FunctionDescriptor g_set_error_literal$descriptor() {
        return g_set_error_literal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_set_error_literal(GError **err, GQuark domain, gint code, const gchar *message)
     * }
     */
    public static MethodHandle g_set_error_literal$handle() {
        return g_set_error_literal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_set_error_literal(GError **err, GQuark domain, gint code, const gchar *message)
     * }
     */
    public static void g_set_error_literal(MemorySegment err, int domain, int code, MemorySegment message) {
        var mh$ = g_set_error_literal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_set_error_literal", err, domain, code, message);
            }
            mh$.invokeExact(err, domain, code, message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_propagate_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_propagate_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_propagate_error(GError **dest, GError *src)
     * }
     */
    public static FunctionDescriptor g_propagate_error$descriptor() {
        return g_propagate_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_propagate_error(GError **dest, GError *src)
     * }
     */
    public static MethodHandle g_propagate_error$handle() {
        return g_propagate_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_propagate_error(GError **dest, GError *src)
     * }
     */
    public static void g_propagate_error(MemorySegment dest, MemorySegment src) {
        var mh$ = g_propagate_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_propagate_error", dest, src);
            }
            mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_clear_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_clear_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_clear_error(GError **err)
     * }
     */
    public static FunctionDescriptor g_clear_error$descriptor() {
        return g_clear_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_clear_error(GError **err)
     * }
     */
    public static MethodHandle g_clear_error$handle() {
        return g_clear_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_clear_error(GError **err)
     * }
     */
    public static void g_clear_error(MemorySegment err) {
        var mh$ = g_clear_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_clear_error", err);
            }
            mh$.invokeExact(err);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_prefix_error(GError **err, const gchar *format, ...)
     * }
     */
    public static class g_prefix_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_prefix_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_prefix_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_prefix_error(GError **err, const gchar *format, ...)
         * }
         */
        public static g_prefix_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_prefix_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment err, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_prefix_error", err, format, x2);
                }
                spreader.invokeExact(err, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_prefix_error_literal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_prefix_error_literal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_prefix_error_literal(GError **err, const gchar *prefix)
     * }
     */
    public static FunctionDescriptor g_prefix_error_literal$descriptor() {
        return g_prefix_error_literal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_prefix_error_literal(GError **err, const gchar *prefix)
     * }
     */
    public static MethodHandle g_prefix_error_literal$handle() {
        return g_prefix_error_literal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_prefix_error_literal(GError **err, const gchar *prefix)
     * }
     */
    public static void g_prefix_error_literal(MemorySegment err, MemorySegment prefix) {
        var mh$ = g_prefix_error_literal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_prefix_error_literal", err, prefix);
            }
            mh$.invokeExact(err, prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_propagate_prefixed_error(GError **dest, GError *src, const gchar *format, ...)
     * }
     */
    public static class g_propagate_prefixed_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_propagate_prefixed_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_propagate_prefixed_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_propagate_prefixed_error(GError **dest, GError *src, const gchar *format, ...)
         * }
         */
        public static g_propagate_prefixed_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_propagate_prefixed_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment dest, MemorySegment src, MemorySegment format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_propagate_prefixed_error", dest, src, format, x3);
                }
                spreader.invokeExact(dest, src, format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_get_user_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_user_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_name()
     * }
     */
    public static FunctionDescriptor g_get_user_name$descriptor() {
        return g_get_user_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_name()
     * }
     */
    public static MethodHandle g_get_user_name$handle() {
        return g_get_user_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_user_name()
     * }
     */
    public static MemorySegment g_get_user_name() {
        var mh$ = g_get_user_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_user_name");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_real_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_real_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_real_name()
     * }
     */
    public static FunctionDescriptor g_get_real_name$descriptor() {
        return g_get_real_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_real_name()
     * }
     */
    public static MethodHandle g_get_real_name$handle() {
        return g_get_real_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_real_name()
     * }
     */
    public static MemorySegment g_get_real_name() {
        var mh$ = g_get_real_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_real_name");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_home_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_home_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_home_dir()
     * }
     */
    public static FunctionDescriptor g_get_home_dir$descriptor() {
        return g_get_home_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_home_dir()
     * }
     */
    public static MethodHandle g_get_home_dir$handle() {
        return g_get_home_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_home_dir()
     * }
     */
    public static MemorySegment g_get_home_dir() {
        var mh$ = g_get_home_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_home_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_tmp_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_tmp_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_tmp_dir()
     * }
     */
    public static FunctionDescriptor g_get_tmp_dir$descriptor() {
        return g_get_tmp_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_tmp_dir()
     * }
     */
    public static MethodHandle g_get_tmp_dir$handle() {
        return g_get_tmp_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_tmp_dir()
     * }
     */
    public static MemorySegment g_get_tmp_dir() {
        var mh$ = g_get_tmp_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_tmp_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_host_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_host_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_host_name()
     * }
     */
    public static FunctionDescriptor g_get_host_name$descriptor() {
        return g_get_host_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_host_name()
     * }
     */
    public static MethodHandle g_get_host_name$handle() {
        return g_get_host_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_host_name()
     * }
     */
    public static MemorySegment g_get_host_name() {
        var mh$ = g_get_host_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_host_name");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_prgname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_prgname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_prgname()
     * }
     */
    public static FunctionDescriptor g_get_prgname$descriptor() {
        return g_get_prgname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_prgname()
     * }
     */
    public static MethodHandle g_get_prgname$handle() {
        return g_get_prgname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_prgname()
     * }
     */
    public static MemorySegment g_get_prgname() {
        var mh$ = g_get_prgname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_prgname");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_set_prgname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_set_prgname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_set_prgname(const gchar *prgname)
     * }
     */
    public static FunctionDescriptor g_set_prgname$descriptor() {
        return g_set_prgname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_set_prgname(const gchar *prgname)
     * }
     */
    public static MethodHandle g_set_prgname$handle() {
        return g_set_prgname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_set_prgname(const gchar *prgname)
     * }
     */
    public static void g_set_prgname(MemorySegment prgname) {
        var mh$ = g_set_prgname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_set_prgname", prgname);
            }
            mh$.invokeExact(prgname);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_application_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_application_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_application_name()
     * }
     */
    public static FunctionDescriptor g_get_application_name$descriptor() {
        return g_get_application_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_application_name()
     * }
     */
    public static MethodHandle g_get_application_name$handle() {
        return g_get_application_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_application_name()
     * }
     */
    public static MemorySegment g_get_application_name() {
        var mh$ = g_get_application_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_application_name");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_set_application_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_set_application_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_set_application_name(const gchar *application_name)
     * }
     */
    public static FunctionDescriptor g_set_application_name$descriptor() {
        return g_set_application_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_set_application_name(const gchar *application_name)
     * }
     */
    public static MethodHandle g_set_application_name$handle() {
        return g_set_application_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_set_application_name(const gchar *application_name)
     * }
     */
    public static void g_set_application_name(MemorySegment application_name) {
        var mh$ = g_set_application_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_set_application_name", application_name);
            }
            mh$.invokeExact(application_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_os_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_os_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_get_os_info(const gchar *key_name)
     * }
     */
    public static FunctionDescriptor g_get_os_info$descriptor() {
        return g_get_os_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_get_os_info(const gchar *key_name)
     * }
     */
    public static MethodHandle g_get_os_info$handle() {
        return g_get_os_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_get_os_info(const gchar *key_name)
     * }
     */
    public static MemorySegment g_get_os_info(MemorySegment key_name) {
        var mh$ = g_get_os_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_os_info", key_name);
            }
            return (MemorySegment)mh$.invokeExact(key_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_reload_user_special_dirs_cache {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_reload_user_special_dirs_cache"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_reload_user_special_dirs_cache()
     * }
     */
    public static FunctionDescriptor g_reload_user_special_dirs_cache$descriptor() {
        return g_reload_user_special_dirs_cache.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_reload_user_special_dirs_cache()
     * }
     */
    public static MethodHandle g_reload_user_special_dirs_cache$handle() {
        return g_reload_user_special_dirs_cache.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_reload_user_special_dirs_cache()
     * }
     */
    public static void g_reload_user_special_dirs_cache() {
        var mh$ = g_reload_user_special_dirs_cache.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_reload_user_special_dirs_cache");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_user_data_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_user_data_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_data_dir()
     * }
     */
    public static FunctionDescriptor g_get_user_data_dir$descriptor() {
        return g_get_user_data_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_data_dir()
     * }
     */
    public static MethodHandle g_get_user_data_dir$handle() {
        return g_get_user_data_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_user_data_dir()
     * }
     */
    public static MemorySegment g_get_user_data_dir() {
        var mh$ = g_get_user_data_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_user_data_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_user_config_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_user_config_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_config_dir()
     * }
     */
    public static FunctionDescriptor g_get_user_config_dir$descriptor() {
        return g_get_user_config_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_config_dir()
     * }
     */
    public static MethodHandle g_get_user_config_dir$handle() {
        return g_get_user_config_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_user_config_dir()
     * }
     */
    public static MemorySegment g_get_user_config_dir() {
        var mh$ = g_get_user_config_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_user_config_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_user_cache_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_user_cache_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_cache_dir()
     * }
     */
    public static FunctionDescriptor g_get_user_cache_dir$descriptor() {
        return g_get_user_cache_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_cache_dir()
     * }
     */
    public static MethodHandle g_get_user_cache_dir$handle() {
        return g_get_user_cache_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_user_cache_dir()
     * }
     */
    public static MemorySegment g_get_user_cache_dir() {
        var mh$ = g_get_user_cache_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_user_cache_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_user_state_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_user_state_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_state_dir()
     * }
     */
    public static FunctionDescriptor g_get_user_state_dir$descriptor() {
        return g_get_user_state_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_state_dir()
     * }
     */
    public static MethodHandle g_get_user_state_dir$handle() {
        return g_get_user_state_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_user_state_dir()
     * }
     */
    public static MemorySegment g_get_user_state_dir() {
        var mh$ = g_get_user_state_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_user_state_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_system_data_dirs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_system_data_dirs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *g_get_system_data_dirs()
     * }
     */
    public static FunctionDescriptor g_get_system_data_dirs$descriptor() {
        return g_get_system_data_dirs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *g_get_system_data_dirs()
     * }
     */
    public static MethodHandle g_get_system_data_dirs$handle() {
        return g_get_system_data_dirs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *g_get_system_data_dirs()
     * }
     */
    public static MemorySegment g_get_system_data_dirs() {
        var mh$ = g_get_system_data_dirs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_system_data_dirs");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_system_config_dirs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_system_config_dirs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *g_get_system_config_dirs()
     * }
     */
    public static FunctionDescriptor g_get_system_config_dirs$descriptor() {
        return g_get_system_config_dirs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *g_get_system_config_dirs()
     * }
     */
    public static MethodHandle g_get_system_config_dirs$handle() {
        return g_get_system_config_dirs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *g_get_system_config_dirs()
     * }
     */
    public static MemorySegment g_get_system_config_dirs() {
        var mh$ = g_get_system_config_dirs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_system_config_dirs");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_user_runtime_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_user_runtime_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_runtime_dir()
     * }
     */
    public static FunctionDescriptor g_get_user_runtime_dir$descriptor() {
        return g_get_user_runtime_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_runtime_dir()
     * }
     */
    public static MethodHandle g_get_user_runtime_dir$handle() {
        return g_get_user_runtime_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_user_runtime_dir()
     * }
     */
    public static MemorySegment g_get_user_runtime_dir() {
        var mh$ = g_get_user_runtime_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_user_runtime_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_USER_DIRECTORY_DESKTOP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_USER_DIRECTORY_DESKTOP = 0
     * }
     */
    public static int G_USER_DIRECTORY_DESKTOP() {
        return G_USER_DIRECTORY_DESKTOP;
    }
    private static final int G_USER_DIRECTORY_DOCUMENTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_USER_DIRECTORY_DOCUMENTS = 1
     * }
     */
    public static int G_USER_DIRECTORY_DOCUMENTS() {
        return G_USER_DIRECTORY_DOCUMENTS;
    }
    private static final int G_USER_DIRECTORY_DOWNLOAD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_USER_DIRECTORY_DOWNLOAD = 2
     * }
     */
    public static int G_USER_DIRECTORY_DOWNLOAD() {
        return G_USER_DIRECTORY_DOWNLOAD;
    }
    private static final int G_USER_DIRECTORY_MUSIC = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_USER_DIRECTORY_MUSIC = 3
     * }
     */
    public static int G_USER_DIRECTORY_MUSIC() {
        return G_USER_DIRECTORY_MUSIC;
    }
    private static final int G_USER_DIRECTORY_PICTURES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_USER_DIRECTORY_PICTURES = 4
     * }
     */
    public static int G_USER_DIRECTORY_PICTURES() {
        return G_USER_DIRECTORY_PICTURES;
    }
    private static final int G_USER_DIRECTORY_PUBLIC_SHARE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_USER_DIRECTORY_PUBLIC_SHARE = 5
     * }
     */
    public static int G_USER_DIRECTORY_PUBLIC_SHARE() {
        return G_USER_DIRECTORY_PUBLIC_SHARE;
    }
    private static final int G_USER_DIRECTORY_TEMPLATES = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_USER_DIRECTORY_TEMPLATES = 6
     * }
     */
    public static int G_USER_DIRECTORY_TEMPLATES() {
        return G_USER_DIRECTORY_TEMPLATES;
    }
    private static final int G_USER_DIRECTORY_VIDEOS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_USER_DIRECTORY_VIDEOS = 7
     * }
     */
    public static int G_USER_DIRECTORY_VIDEOS() {
        return G_USER_DIRECTORY_VIDEOS;
    }
    private static final int G_USER_N_DIRECTORIES = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_USER_N_DIRECTORIES = 8
     * }
     */
    public static int G_USER_N_DIRECTORIES() {
        return G_USER_N_DIRECTORIES;
    }

    private static class g_get_user_special_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_user_special_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_special_dir(GUserDirectory directory)
     * }
     */
    public static FunctionDescriptor g_get_user_special_dir$descriptor() {
        return g_get_user_special_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_get_user_special_dir(GUserDirectory directory)
     * }
     */
    public static MethodHandle g_get_user_special_dir$handle() {
        return g_get_user_special_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_get_user_special_dir(GUserDirectory directory)
     * }
     */
    public static MemorySegment g_get_user_special_dir(int directory) {
        var mh$ = g_get_user_special_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_user_special_dir", directory);
            }
            return (MemorySegment)mh$.invokeExact(directory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_parse_debug_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_parse_debug_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_parse_debug_string(const gchar *string, const GDebugKey *keys, guint nkeys)
     * }
     */
    public static FunctionDescriptor g_parse_debug_string$descriptor() {
        return g_parse_debug_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_parse_debug_string(const gchar *string, const GDebugKey *keys, guint nkeys)
     * }
     */
    public static MethodHandle g_parse_debug_string$handle() {
        return g_parse_debug_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_parse_debug_string(const gchar *string, const GDebugKey *keys, guint nkeys)
     * }
     */
    public static int g_parse_debug_string(MemorySegment string, MemorySegment keys, int nkeys) {
        var mh$ = g_parse_debug_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_parse_debug_string", string, keys, nkeys);
            }
            return (int)mh$.invokeExact(string, keys, nkeys);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gint g_snprintf(gchar *string, gulong n, const gchar *format, ...)
     * }
     */
    public static class g_snprintf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_snprintf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_snprintf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gint g_snprintf(gchar *string, gulong n, const gchar *format, ...)
         * }
         */
        public static g_snprintf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_snprintf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment string, long n, MemorySegment format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_snprintf", string, n, format, x3);
                }
                return (int)spreader.invokeExact(string, n, format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_nullify_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_nullify_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_nullify_pointer(gpointer *nullify_location)
     * }
     */
    public static FunctionDescriptor g_nullify_pointer$descriptor() {
        return g_nullify_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_nullify_pointer(gpointer *nullify_location)
     * }
     */
    public static MethodHandle g_nullify_pointer$handle() {
        return g_nullify_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_nullify_pointer(gpointer *nullify_location)
     * }
     */
    public static void g_nullify_pointer(MemorySegment nullify_location) {
        var mh$ = g_nullify_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_nullify_pointer", nullify_location);
            }
            mh$.invokeExact(nullify_location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_FORMAT_SIZE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FORMAT_SIZE_DEFAULT = 0
     * }
     */
    public static int G_FORMAT_SIZE_DEFAULT() {
        return G_FORMAT_SIZE_DEFAULT;
    }
    private static final int G_FORMAT_SIZE_LONG_FORMAT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FORMAT_SIZE_LONG_FORMAT = 1
     * }
     */
    public static int G_FORMAT_SIZE_LONG_FORMAT() {
        return G_FORMAT_SIZE_LONG_FORMAT;
    }
    private static final int G_FORMAT_SIZE_IEC_UNITS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FORMAT_SIZE_IEC_UNITS = 2
     * }
     */
    public static int G_FORMAT_SIZE_IEC_UNITS() {
        return G_FORMAT_SIZE_IEC_UNITS;
    }
    private static final int G_FORMAT_SIZE_BITS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FORMAT_SIZE_BITS = 4
     * }
     */
    public static int G_FORMAT_SIZE_BITS() {
        return G_FORMAT_SIZE_BITS;
    }
    private static final int G_FORMAT_SIZE_ONLY_VALUE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FORMAT_SIZE_ONLY_VALUE = 8
     * }
     */
    public static int G_FORMAT_SIZE_ONLY_VALUE() {
        return G_FORMAT_SIZE_ONLY_VALUE;
    }
    private static final int G_FORMAT_SIZE_ONLY_UNIT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FORMAT_SIZE_ONLY_UNIT = 16
     * }
     */
    public static int G_FORMAT_SIZE_ONLY_UNIT() {
        return G_FORMAT_SIZE_ONLY_UNIT;
    }

    private static class g_format_size_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_format_size_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_format_size_full(guint64 size, GFormatSizeFlags flags)
     * }
     */
    public static FunctionDescriptor g_format_size_full$descriptor() {
        return g_format_size_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_format_size_full(guint64 size, GFormatSizeFlags flags)
     * }
     */
    public static MethodHandle g_format_size_full$handle() {
        return g_format_size_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_format_size_full(guint64 size, GFormatSizeFlags flags)
     * }
     */
    public static MemorySegment g_format_size_full(long size, int flags) {
        var mh$ = g_format_size_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_format_size_full", size, flags);
            }
            return (MemorySegment)mh$.invokeExact(size, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_format_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_format_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_format_size(guint64 size)
     * }
     */
    public static FunctionDescriptor g_format_size$descriptor() {
        return g_format_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_format_size(guint64 size)
     * }
     */
    public static MethodHandle g_format_size$handle() {
        return g_format_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_format_size(guint64 size)
     * }
     */
    public static MemorySegment g_format_size(long size) {
        var mh$ = g_format_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_format_size", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_format_size_for_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_format_size_for_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_format_size_for_display(goffset size)
     * }
     */
    public static FunctionDescriptor g_format_size_for_display$descriptor() {
        return g_format_size_for_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_format_size_for_display(goffset size)
     * }
     */
    public static MethodHandle g_format_size_for_display$handle() {
        return g_format_size_for_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_format_size_for_display(goffset size)
     * }
     */
    public static MemorySegment g_format_size_for_display(long size) {
        var mh$ = g_format_size_for_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_format_size_for_display", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atexit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_atexit(GVoidFunc func)
     * }
     */
    public static FunctionDescriptor g_atexit$descriptor() {
        return g_atexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_atexit(GVoidFunc func)
     * }
     */
    public static MethodHandle g_atexit$handle() {
        return g_atexit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_atexit(GVoidFunc func)
     * }
     */
    public static void g_atexit(MemorySegment func) {
        var mh$ = g_atexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atexit", func);
            }
            mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_find_program_in_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_find_program_in_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_find_program_in_path(const gchar *program)
     * }
     */
    public static FunctionDescriptor g_find_program_in_path$descriptor() {
        return g_find_program_in_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_find_program_in_path(const gchar *program)
     * }
     */
    public static MethodHandle g_find_program_in_path$handle() {
        return g_find_program_in_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_find_program_in_path(const gchar *program)
     * }
     */
    public static MemorySegment g_find_program_in_path(MemorySegment program) {
        var mh$ = g_find_program_in_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_find_program_in_path", program);
            }
            return (MemorySegment)mh$.invokeExact(program);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bit_nth_lsf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bit_nth_lsf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint (g_bit_nth_lsf)(gulong mask, gint nth_bit)
     * }
     */
    public static FunctionDescriptor g_bit_nth_lsf$descriptor() {
        return g_bit_nth_lsf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint (g_bit_nth_lsf)(gulong mask, gint nth_bit)
     * }
     */
    public static MethodHandle g_bit_nth_lsf$handle() {
        return g_bit_nth_lsf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint (g_bit_nth_lsf)(gulong mask, gint nth_bit)
     * }
     */
    public static int g_bit_nth_lsf(long mask, int nth_bit) {
        var mh$ = g_bit_nth_lsf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bit_nth_lsf", mask, nth_bit);
            }
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bit_nth_msf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bit_nth_msf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint (g_bit_nth_msf)(gulong mask, gint nth_bit)
     * }
     */
    public static FunctionDescriptor g_bit_nth_msf$descriptor() {
        return g_bit_nth_msf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint (g_bit_nth_msf)(gulong mask, gint nth_bit)
     * }
     */
    public static MethodHandle g_bit_nth_msf$handle() {
        return g_bit_nth_msf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint (g_bit_nth_msf)(gulong mask, gint nth_bit)
     * }
     */
    public static int g_bit_nth_msf(long mask, int nth_bit) {
        var mh$ = g_bit_nth_msf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bit_nth_msf", mask, nth_bit);
            }
            return (int)mh$.invokeExact(mask, nth_bit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bit_storage {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bit_storage"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint (g_bit_storage)(gulong number)
     * }
     */
    public static FunctionDescriptor g_bit_storage$descriptor() {
        return g_bit_storage.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint (g_bit_storage)(gulong number)
     * }
     */
    public static MethodHandle g_bit_storage$handle() {
        return g_bit_storage.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint (g_bit_storage)(gulong number)
     * }
     */
    public static int g_bit_storage(long number) {
        var mh$ = g_bit_storage.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bit_storage", number);
            }
            return (int)mh$.invokeExact(number);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef float _Float32
     * }
     */
    public static final OfFloat _Float32 = app_indicator_h.C_FLOAT;
    /**
     * {@snippet lang=c :
     * typedef double _Float64
     * }
     */
    public static final OfDouble _Float64 = app_indicator_h.C_DOUBLE;
    /**
     * {@snippet lang=c :
     * typedef double _Float32x
     * }
     */
    public static final OfDouble _Float32x = app_indicator_h.C_DOUBLE;

    private static class __ctype_get_mb_cur_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__ctype_get_mb_cur_max"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t __ctype_get_mb_cur_max()
     * }
     */
    public static FunctionDescriptor __ctype_get_mb_cur_max$descriptor() {
        return __ctype_get_mb_cur_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t __ctype_get_mb_cur_max()
     * }
     */
    public static MethodHandle __ctype_get_mb_cur_max$handle() {
        return __ctype_get_mb_cur_max.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern size_t __ctype_get_mb_cur_max()
     * }
     */
    public static long __ctype_get_mb_cur_max() {
        var mh$ = __ctype_get_mb_cur_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__ctype_get_mb_cur_max");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atof"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double atof(const char *__nptr)
     * }
     */
    public static FunctionDescriptor atof$descriptor() {
        return atof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double atof(const char *__nptr)
     * }
     */
    public static MethodHandle atof$handle() {
        return atof.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double atof(const char *__nptr)
     * }
     */
    public static double atof(MemorySegment __nptr) {
        var mh$ = atof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atof", __nptr);
            }
            return (double)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atoi {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atoi"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int atoi(const char *__nptr)
     * }
     */
    public static FunctionDescriptor atoi$descriptor() {
        return atoi.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int atoi(const char *__nptr)
     * }
     */
    public static MethodHandle atoi$handle() {
        return atoi.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int atoi(const char *__nptr)
     * }
     */
    public static int atoi(MemorySegment __nptr) {
        var mh$ = atoi.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atoi", __nptr);
            }
            return (int)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long atol(const char *__nptr)
     * }
     */
    public static FunctionDescriptor atol$descriptor() {
        return atol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long atol(const char *__nptr)
     * }
     */
    public static MethodHandle atol$handle() {
        return atol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long atol(const char *__nptr)
     * }
     */
    public static long atol(MemorySegment __nptr) {
        var mh$ = atol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atol", __nptr);
            }
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atoll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long atoll(const char *__nptr)
     * }
     */
    public static FunctionDescriptor atoll$descriptor() {
        return atoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long atoll(const char *__nptr)
     * }
     */
    public static MethodHandle atoll$handle() {
        return atoll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long long atoll(const char *__nptr)
     * }
     */
    public static long atoll(MemorySegment __nptr) {
        var mh$ = atoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atoll", __nptr);
            }
            return (long)mh$.invokeExact(__nptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtod {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strtod"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double strtod(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static FunctionDescriptor strtod$descriptor() {
        return strtod.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double strtod(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static MethodHandle strtod$handle() {
        return strtod.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double strtod(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static double strtod(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtod.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtod", __nptr, __endptr);
            }
            return (double)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strtof"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern float strtof(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static FunctionDescriptor strtof$descriptor() {
        return strtof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern float strtof(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static MethodHandle strtof$handle() {
        return strtof.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern float strtof(const char *restrict __nptr, char **restrict __endptr)
     * }
     */
    public static float strtof(MemorySegment __nptr, MemorySegment __endptr) {
        var mh$ = strtof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtof", __nptr, __endptr);
            }
            return (float)mh$.invokeExact(__nptr, __endptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strtol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long strtol(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtol$descriptor() {
        return strtol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long strtol(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtol$handle() {
        return strtol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long strtol(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtol(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtol", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strtoul"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long strtoul(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtoul$descriptor() {
        return strtoul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long strtoul(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtoul$handle() {
        return strtoul.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long strtoul(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtoul(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoul", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strtoq"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long strtoq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtoq$descriptor() {
        return strtoq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long strtoq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtoq$handle() {
        return strtoq.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long long strtoq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtoq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoq", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtouq {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strtouq"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long long strtouq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtouq$descriptor() {
        return strtouq.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long long strtouq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtouq$handle() {
        return strtouq.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long long strtouq(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtouq(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtouq.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtouq", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strtoll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long strtoll(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtoll$descriptor() {
        return strtoll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long strtoll(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtoll$handle() {
        return strtoll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long long strtoll(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtoll(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoll", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class strtoull {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("strtoull"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long long strtoull(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static FunctionDescriptor strtoull$descriptor() {
        return strtoull.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long long strtoull(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static MethodHandle strtoull$handle() {
        return strtoull.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long long strtoull(const char *restrict __nptr, char **restrict __endptr, int __base)
     * }
     */
    public static long strtoull(MemorySegment __nptr, MemorySegment __endptr, int __base) {
        var mh$ = strtoull.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("strtoull", __nptr, __endptr, __base);
            }
            return (long)mh$.invokeExact(__nptr, __endptr, __base);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class l64a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("l64a"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *l64a(long __n)
     * }
     */
    public static FunctionDescriptor l64a$descriptor() {
        return l64a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *l64a(long __n)
     * }
     */
    public static MethodHandle l64a$handle() {
        return l64a.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *l64a(long __n)
     * }
     */
    public static MemorySegment l64a(long __n) {
        var mh$ = l64a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("l64a", __n);
            }
            return (MemorySegment)mh$.invokeExact(__n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class a64l {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("a64l"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long a64l(const char *__s)
     * }
     */
    public static FunctionDescriptor a64l$descriptor() {
        return a64l.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long a64l(const char *__s)
     * }
     */
    public static MethodHandle a64l$handle() {
        return a64l.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long a64l(const char *__s)
     * }
     */
    public static long a64l(MemorySegment __s) {
        var mh$ = a64l.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("a64l", __s);
            }
            return (long)mh$.invokeExact(__s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __u_char u_char
     * }
     */
    public static final OfByte u_char = app_indicator_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __u_short u_short
     * }
     */
    public static final OfShort u_short = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u_int u_int
     * }
     */
    public static final OfInt u_int = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u_long u_long
     * }
     */
    public static final OfLong u_long = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __quad_t quad_t
     * }
     */
    public static final OfLong quad_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u_quad_t u_quad_t
     * }
     */
    public static final OfLong u_quad_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __loff_t loff_t
     * }
     */
    public static final OfLong loff_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __ino_t ino_t
     * }
     */
    public static final OfLong ino_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __dev_t dev_t
     * }
     */
    public static final OfLong dev_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __gid_t gid_t
     * }
     */
    public static final OfInt gid_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __mode_t mode_t
     * }
     */
    public static final OfInt mode_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __nlink_t nlink_t
     * }
     */
    public static final OfInt nlink_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uid_t uid_t
     * }
     */
    public static final OfInt uid_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __off_t off_t
     * }
     */
    public static final OfLong off_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __id_t id_t
     * }
     */
    public static final OfInt id_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __ssize_t ssize_t
     * }
     */
    public static final OfLong ssize_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __daddr_t daddr_t
     * }
     */
    public static final OfInt daddr_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __caddr_t caddr_t
     * }
     */
    public static final AddressLayout caddr_t = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __key_t key_t
     * }
     */
    public static final OfInt key_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long ulong
     * }
     */
    public static final OfLong ulong = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned short ushort
     * }
     */
    public static final OfShort ushort = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int uint
     * }
     */
    public static final OfInt uint = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int8_t int8_t
     * }
     */
    public static final OfByte int8_t = app_indicator_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __int16_t int16_t
     * }
     */
    public static final OfShort int16_t = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __int32_t int32_t
     * }
     */
    public static final OfInt int32_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __int64_t int64_t
     * }
     */
    public static final OfLong int64_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __uint8_t u_int8_t
     * }
     */
    public static final OfByte u_int8_t = app_indicator_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef __uint16_t u_int16_t
     * }
     */
    public static final OfShort u_int16_t = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __uint32_t u_int32_t
     * }
     */
    public static final OfInt u_int32_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __uint64_t u_int64_t
     * }
     */
    public static final OfLong u_int64_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int register_t
     * }
     */
    public static final OfLong register_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __suseconds_t suseconds_t
     * }
     */
    public static final OfLong suseconds_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long __fd_mask
     * }
     */
    public static final OfLong __fd_mask = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fd_mask fd_mask
     * }
     */
    public static final OfLong fd_mask = app_indicator_h.C_LONG;

    private static class select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("select"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static FunctionDescriptor select$descriptor() {
        return select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static MethodHandle select$handle() {
        return select.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int select(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, struct timeval *restrict __timeout)
     * }
     */
    public static int select(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout) {
        var mh$ = select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("select", __nfds, __readfds, __writefds, __exceptfds, __timeout);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pselect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pselect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static FunctionDescriptor pselect$descriptor() {
        return pselect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static MethodHandle pselect$handle() {
        return pselect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pselect(int __nfds, fd_set *restrict __readfds, fd_set *restrict __writefds, fd_set *restrict __exceptfds, const struct timespec *restrict __timeout, const __sigset_t *restrict __sigmask)
     * }
     */
    public static int pselect(int __nfds, MemorySegment __readfds, MemorySegment __writefds, MemorySegment __exceptfds, MemorySegment __timeout, MemorySegment __sigmask) {
        var mh$ = pselect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pselect", __nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
            }
            return (int)mh$.invokeExact(__nfds, __readfds, __writefds, __exceptfds, __timeout, __sigmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __blksize_t blksize_t
     * }
     */
    public static final OfInt blksize_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __blkcnt_t blkcnt_t
     * }
     */
    public static final OfLong blkcnt_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsblkcnt_t fsblkcnt_t
     * }
     */
    public static final OfLong fsblkcnt_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __fsfilcnt_t fsfilcnt_t
     * }
     */
    public static final OfLong fsfilcnt_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __tss_t
     * }
     */
    public static final OfInt __tss_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __thrd_t
     * }
     */
    public static final OfLong __thrd_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long pthread_t
     * }
     */
    public static final OfLong pthread_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int pthread_key_t
     * }
     */
    public static final OfInt pthread_key_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int pthread_once_t
     * }
     */
    public static final OfInt pthread_once_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef volatile int pthread_spinlock_t
     * }
     */
    public static final OfInt pthread_spinlock_t = app_indicator_h.C_INT;

    private static class random {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("random"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long random()
     * }
     */
    public static FunctionDescriptor random$descriptor() {
        return random.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long random()
     * }
     */
    public static MethodHandle random$handle() {
        return random.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long random()
     * }
     */
    public static long random() {
        var mh$ = random.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("random");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srandom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("srandom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void srandom(unsigned int __seed)
     * }
     */
    public static FunctionDescriptor srandom$descriptor() {
        return srandom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void srandom(unsigned int __seed)
     * }
     */
    public static MethodHandle srandom$handle() {
        return srandom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void srandom(unsigned int __seed)
     * }
     */
    public static void srandom(int __seed) {
        var mh$ = srandom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srandom", __seed);
            }
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class initstate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("initstate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen)
     * }
     */
    public static FunctionDescriptor initstate$descriptor() {
        return initstate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen)
     * }
     */
    public static MethodHandle initstate$handle() {
        return initstate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *initstate(unsigned int __seed, char *__statebuf, size_t __statelen)
     * }
     */
    public static MemorySegment initstate(int __seed, MemorySegment __statebuf, long __statelen) {
        var mh$ = initstate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("initstate", __seed, __statebuf, __statelen);
            }
            return (MemorySegment)mh$.invokeExact(__seed, __statebuf, __statelen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setstate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setstate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *setstate(char *__statebuf)
     * }
     */
    public static FunctionDescriptor setstate$descriptor() {
        return setstate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *setstate(char *__statebuf)
     * }
     */
    public static MethodHandle setstate$handle() {
        return setstate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *setstate(char *__statebuf)
     * }
     */
    public static MemorySegment setstate(MemorySegment __statebuf) {
        var mh$ = setstate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setstate", __statebuf);
            }
            return (MemorySegment)mh$.invokeExact(__statebuf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class random_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("random_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int random_r(struct random_data *restrict __buf, int32_t *restrict __result)
     * }
     */
    public static FunctionDescriptor random_r$descriptor() {
        return random_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int random_r(struct random_data *restrict __buf, int32_t *restrict __result)
     * }
     */
    public static MethodHandle random_r$handle() {
        return random_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int random_r(struct random_data *restrict __buf, int32_t *restrict __result)
     * }
     */
    public static int random_r(MemorySegment __buf, MemorySegment __result) {
        var mh$ = random_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("random_r", __buf, __result);
            }
            return (int)mh$.invokeExact(__buf, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srandom_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("srandom_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int srandom_r(unsigned int __seed, struct random_data *__buf)
     * }
     */
    public static FunctionDescriptor srandom_r$descriptor() {
        return srandom_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int srandom_r(unsigned int __seed, struct random_data *__buf)
     * }
     */
    public static MethodHandle srandom_r$handle() {
        return srandom_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int srandom_r(unsigned int __seed, struct random_data *__buf)
     * }
     */
    public static int srandom_r(int __seed, MemorySegment __buf) {
        var mh$ = srandom_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srandom_r", __seed, __buf);
            }
            return (int)mh$.invokeExact(__seed, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class initstate_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("initstate_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int initstate_r(unsigned int __seed, char *restrict __statebuf, size_t __statelen, struct random_data *restrict __buf)
     * }
     */
    public static FunctionDescriptor initstate_r$descriptor() {
        return initstate_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int initstate_r(unsigned int __seed, char *restrict __statebuf, size_t __statelen, struct random_data *restrict __buf)
     * }
     */
    public static MethodHandle initstate_r$handle() {
        return initstate_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int initstate_r(unsigned int __seed, char *restrict __statebuf, size_t __statelen, struct random_data *restrict __buf)
     * }
     */
    public static int initstate_r(int __seed, MemorySegment __statebuf, long __statelen, MemorySegment __buf) {
        var mh$ = initstate_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("initstate_r", __seed, __statebuf, __statelen, __buf);
            }
            return (int)mh$.invokeExact(__seed, __statebuf, __statelen, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setstate_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setstate_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setstate_r(char *restrict __statebuf, struct random_data *restrict __buf)
     * }
     */
    public static FunctionDescriptor setstate_r$descriptor() {
        return setstate_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setstate_r(char *restrict __statebuf, struct random_data *restrict __buf)
     * }
     */
    public static MethodHandle setstate_r$handle() {
        return setstate_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setstate_r(char *restrict __statebuf, struct random_data *restrict __buf)
     * }
     */
    public static int setstate_r(MemorySegment __statebuf, MemorySegment __buf) {
        var mh$ = setstate_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setstate_r", __statebuf, __buf);
            }
            return (int)mh$.invokeExact(__statebuf, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("rand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rand()
     * }
     */
    public static FunctionDescriptor rand$descriptor() {
        return rand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rand()
     * }
     */
    public static MethodHandle rand$handle() {
        return rand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int rand()
     * }
     */
    public static int rand() {
        var mh$ = rand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rand");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("srand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void srand(unsigned int __seed)
     * }
     */
    public static FunctionDescriptor srand$descriptor() {
        return srand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void srand(unsigned int __seed)
     * }
     */
    public static MethodHandle srand$handle() {
        return srand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void srand(unsigned int __seed)
     * }
     */
    public static void srand(int __seed) {
        var mh$ = srand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srand", __seed);
            }
            mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rand_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("rand_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rand_r(unsigned int *__seed)
     * }
     */
    public static FunctionDescriptor rand_r$descriptor() {
        return rand_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rand_r(unsigned int *__seed)
     * }
     */
    public static MethodHandle rand_r$handle() {
        return rand_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int rand_r(unsigned int *__seed)
     * }
     */
    public static int rand_r(MemorySegment __seed) {
        var mh$ = rand_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rand_r", __seed);
            }
            return (int)mh$.invokeExact(__seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class drand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("drand48"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double drand48()
     * }
     */
    public static FunctionDescriptor drand48$descriptor() {
        return drand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double drand48()
     * }
     */
    public static MethodHandle drand48$handle() {
        return drand48.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double drand48()
     * }
     */
    public static double drand48() {
        var mh$ = drand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("drand48");
            }
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("erand48"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double erand48(unsigned short __xsubi[3])
     * }
     */
    public static FunctionDescriptor erand48$descriptor() {
        return erand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double erand48(unsigned short __xsubi[3])
     * }
     */
    public static MethodHandle erand48$handle() {
        return erand48.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double erand48(unsigned short __xsubi[3])
     * }
     */
    public static double erand48(MemorySegment __xsubi) {
        var mh$ = erand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erand48", __xsubi);
            }
            return (double)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lrand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("lrand48"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long lrand48()
     * }
     */
    public static FunctionDescriptor lrand48$descriptor() {
        return lrand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long lrand48()
     * }
     */
    public static MethodHandle lrand48$handle() {
        return lrand48.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long lrand48()
     * }
     */
    public static long lrand48() {
        var mh$ = lrand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lrand48");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nrand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("nrand48"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long nrand48(unsigned short __xsubi[3])
     * }
     */
    public static FunctionDescriptor nrand48$descriptor() {
        return nrand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long nrand48(unsigned short __xsubi[3])
     * }
     */
    public static MethodHandle nrand48$handle() {
        return nrand48.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long nrand48(unsigned short __xsubi[3])
     * }
     */
    public static long nrand48(MemorySegment __xsubi) {
        var mh$ = nrand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nrand48", __xsubi);
            }
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mrand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("mrand48"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long mrand48()
     * }
     */
    public static FunctionDescriptor mrand48$descriptor() {
        return mrand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long mrand48()
     * }
     */
    public static MethodHandle mrand48$handle() {
        return mrand48.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long mrand48()
     * }
     */
    public static long mrand48() {
        var mh$ = mrand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mrand48");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class jrand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("jrand48"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long jrand48(unsigned short __xsubi[3])
     * }
     */
    public static FunctionDescriptor jrand48$descriptor() {
        return jrand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long jrand48(unsigned short __xsubi[3])
     * }
     */
    public static MethodHandle jrand48$handle() {
        return jrand48.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long jrand48(unsigned short __xsubi[3])
     * }
     */
    public static long jrand48(MemorySegment __xsubi) {
        var mh$ = jrand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("jrand48", __xsubi);
            }
            return (long)mh$.invokeExact(__xsubi);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srand48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("srand48"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void srand48(long __seedval)
     * }
     */
    public static FunctionDescriptor srand48$descriptor() {
        return srand48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void srand48(long __seedval)
     * }
     */
    public static MethodHandle srand48$handle() {
        return srand48.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void srand48(long __seedval)
     * }
     */
    public static void srand48(long __seedval) {
        var mh$ = srand48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srand48", __seedval);
            }
            mh$.invokeExact(__seedval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class seed48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("seed48"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned short *seed48(unsigned short __seed16v[3])
     * }
     */
    public static FunctionDescriptor seed48$descriptor() {
        return seed48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned short *seed48(unsigned short __seed16v[3])
     * }
     */
    public static MethodHandle seed48$handle() {
        return seed48.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned short *seed48(unsigned short __seed16v[3])
     * }
     */
    public static MemorySegment seed48(MemorySegment __seed16v) {
        var mh$ = seed48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("seed48", __seed16v);
            }
            return (MemorySegment)mh$.invokeExact(__seed16v);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lcong48 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("lcong48"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void lcong48(unsigned short __param[7])
     * }
     */
    public static FunctionDescriptor lcong48$descriptor() {
        return lcong48.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void lcong48(unsigned short __param[7])
     * }
     */
    public static MethodHandle lcong48$handle() {
        return lcong48.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void lcong48(unsigned short __param[7])
     * }
     */
    public static void lcong48(MemorySegment __param) {
        var mh$ = lcong48.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lcong48", __param);
            }
            mh$.invokeExact(__param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class drand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("drand48_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int drand48_r(struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static FunctionDescriptor drand48_r$descriptor() {
        return drand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int drand48_r(struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static MethodHandle drand48_r$handle() {
        return drand48_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int drand48_r(struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static int drand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = drand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("drand48_r", __buffer, __result);
            }
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class erand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("erand48_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int erand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static FunctionDescriptor erand48_r$descriptor() {
        return erand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int erand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static MethodHandle erand48_r$handle() {
        return erand48_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int erand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, double *restrict __result)
     * }
     */
    public static int erand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = erand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("erand48_r", __xsubi, __buffer, __result);
            }
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lrand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("lrand48_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static FunctionDescriptor lrand48_r$descriptor() {
        return lrand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MethodHandle lrand48_r$handle() {
        return lrand48_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int lrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static int lrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = lrand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lrand48_r", __buffer, __result);
            }
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class nrand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("nrand48_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int nrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static FunctionDescriptor nrand48_r$descriptor() {
        return nrand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int nrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MethodHandle nrand48_r$handle() {
        return nrand48_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int nrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static int nrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = nrand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("nrand48_r", __xsubi, __buffer, __result);
            }
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mrand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("mrand48_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static FunctionDescriptor mrand48_r$descriptor() {
        return mrand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MethodHandle mrand48_r$handle() {
        return mrand48_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int mrand48_r(struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static int mrand48_r(MemorySegment __buffer, MemorySegment __result) {
        var mh$ = mrand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mrand48_r", __buffer, __result);
            }
            return (int)mh$.invokeExact(__buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class jrand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("jrand48_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int jrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static FunctionDescriptor jrand48_r$descriptor() {
        return jrand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int jrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static MethodHandle jrand48_r$handle() {
        return jrand48_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int jrand48_r(unsigned short __xsubi[3], struct drand48_data *restrict __buffer, long *restrict __result)
     * }
     */
    public static int jrand48_r(MemorySegment __xsubi, MemorySegment __buffer, MemorySegment __result) {
        var mh$ = jrand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("jrand48_r", __xsubi, __buffer, __result);
            }
            return (int)mh$.invokeExact(__xsubi, __buffer, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class srand48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("srand48_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int srand48_r(long __seedval, struct drand48_data *__buffer)
     * }
     */
    public static FunctionDescriptor srand48_r$descriptor() {
        return srand48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int srand48_r(long __seedval, struct drand48_data *__buffer)
     * }
     */
    public static MethodHandle srand48_r$handle() {
        return srand48_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int srand48_r(long __seedval, struct drand48_data *__buffer)
     * }
     */
    public static int srand48_r(long __seedval, MemorySegment __buffer) {
        var mh$ = srand48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("srand48_r", __seedval, __buffer);
            }
            return (int)mh$.invokeExact(__seedval, __buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class seed48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("seed48_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int seed48_r(unsigned short __seed16v[3], struct drand48_data *__buffer)
     * }
     */
    public static FunctionDescriptor seed48_r$descriptor() {
        return seed48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int seed48_r(unsigned short __seed16v[3], struct drand48_data *__buffer)
     * }
     */
    public static MethodHandle seed48_r$handle() {
        return seed48_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int seed48_r(unsigned short __seed16v[3], struct drand48_data *__buffer)
     * }
     */
    public static int seed48_r(MemorySegment __seed16v, MemorySegment __buffer) {
        var mh$ = seed48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("seed48_r", __seed16v, __buffer);
            }
            return (int)mh$.invokeExact(__seed16v, __buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lcong48_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("lcong48_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lcong48_r(unsigned short __param[7], struct drand48_data *__buffer)
     * }
     */
    public static FunctionDescriptor lcong48_r$descriptor() {
        return lcong48_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lcong48_r(unsigned short __param[7], struct drand48_data *__buffer)
     * }
     */
    public static MethodHandle lcong48_r$handle() {
        return lcong48_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int lcong48_r(unsigned short __param[7], struct drand48_data *__buffer)
     * }
     */
    public static int lcong48_r(MemorySegment __param, MemorySegment __buffer) {
        var mh$ = lcong48_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lcong48_r", __param, __buffer);
            }
            return (int)mh$.invokeExact(__param, __buffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("malloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *malloc(size_t __size)
     * }
     */
    public static FunctionDescriptor malloc$descriptor() {
        return malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *malloc(size_t __size)
     * }
     */
    public static MethodHandle malloc$handle() {
        return malloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *malloc(size_t __size)
     * }
     */
    public static MemorySegment malloc(long __size) {
        var mh$ = malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("malloc", __size);
            }
            return (MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class calloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("calloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *calloc(size_t __nmemb, size_t __size)
     * }
     */
    public static FunctionDescriptor calloc$descriptor() {
        return calloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *calloc(size_t __nmemb, size_t __size)
     * }
     */
    public static MethodHandle calloc$handle() {
        return calloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *calloc(size_t __nmemb, size_t __size)
     * }
     */
    public static MemorySegment calloc(long __nmemb, long __size) {
        var mh$ = calloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("calloc", __nmemb, __size);
            }
            return (MemorySegment)mh$.invokeExact(__nmemb, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("realloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *realloc(void *__ptr, size_t __size)
     * }
     */
    public static FunctionDescriptor realloc$descriptor() {
        return realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *realloc(void *__ptr, size_t __size)
     * }
     */
    public static MethodHandle realloc$handle() {
        return realloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *realloc(void *__ptr, size_t __size)
     * }
     */
    public static MemorySegment realloc(MemorySegment __ptr, long __size) {
        var mh$ = realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("realloc", __ptr, __size);
            }
            return (MemorySegment)mh$.invokeExact(__ptr, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void free(void *__ptr)
     * }
     */
    public static FunctionDescriptor free$descriptor() {
        return free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void free(void *__ptr)
     * }
     */
    public static MethodHandle free$handle() {
        return free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void free(void *__ptr)
     * }
     */
    public static void free(MemorySegment __ptr) {
        var mh$ = free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("free", __ptr);
            }
            mh$.invokeExact(__ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class reallocarray {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("reallocarray"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
     * }
     */
    public static FunctionDescriptor reallocarray$descriptor() {
        return reallocarray.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
     * }
     */
    public static MethodHandle reallocarray$handle() {
        return reallocarray.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *reallocarray(void *__ptr, size_t __nmemb, size_t __size)
     * }
     */
    public static MemorySegment reallocarray(MemorySegment __ptr, long __nmemb, long __size) {
        var mh$ = reallocarray.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("reallocarray", __ptr, __nmemb, __size);
            }
            return (MemorySegment)mh$.invokeExact(__ptr, __nmemb, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class alloca {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("alloca"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *alloca(size_t __size)
     * }
     */
    public static FunctionDescriptor alloca$descriptor() {
        return alloca.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *alloca(size_t __size)
     * }
     */
    public static MethodHandle alloca$handle() {
        return alloca.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *alloca(size_t __size)
     * }
     */
    public static MemorySegment alloca(long __size) {
        var mh$ = alloca.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("alloca", __size);
            }
            return (MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class valloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("valloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *valloc(size_t __size)
     * }
     */
    public static FunctionDescriptor valloc$descriptor() {
        return valloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *valloc(size_t __size)
     * }
     */
    public static MethodHandle valloc$handle() {
        return valloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *valloc(size_t __size)
     * }
     */
    public static MemorySegment valloc(long __size) {
        var mh$ = valloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("valloc", __size);
            }
            return (MemorySegment)mh$.invokeExact(__size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class posix_memalign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("posix_memalign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
     * }
     */
    public static FunctionDescriptor posix_memalign$descriptor() {
        return posix_memalign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
     * }
     */
    public static MethodHandle posix_memalign$handle() {
        return posix_memalign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int posix_memalign(void **__memptr, size_t __alignment, size_t __size)
     * }
     */
    public static int posix_memalign(MemorySegment __memptr, long __alignment, long __size) {
        var mh$ = posix_memalign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("posix_memalign", __memptr, __alignment, __size);
            }
            return (int)mh$.invokeExact(__memptr, __alignment, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class aligned_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("aligned_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *aligned_alloc(size_t __alignment, size_t __size)
     * }
     */
    public static FunctionDescriptor aligned_alloc$descriptor() {
        return aligned_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *aligned_alloc(size_t __alignment, size_t __size)
     * }
     */
    public static MethodHandle aligned_alloc$handle() {
        return aligned_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *aligned_alloc(size_t __alignment, size_t __size)
     * }
     */
    public static MemorySegment aligned_alloc(long __alignment, long __size) {
        var mh$ = aligned_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("aligned_alloc", __alignment, __size);
            }
            return (MemorySegment)mh$.invokeExact(__alignment, __size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class abort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("abort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void abort()
     * }
     */
    public static FunctionDescriptor abort$descriptor() {
        return abort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void abort()
     * }
     */
    public static MethodHandle abort$handle() {
        return abort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void abort()
     * }
     */
    public static void abort() {
        var mh$ = abort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("abort");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atexit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atexit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int atexit(void (*__func)(void))
     * }
     */
    public static FunctionDescriptor atexit$descriptor() {
        return atexit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int atexit(void (*__func)(void))
     * }
     */
    public static MethodHandle atexit$handle() {
        return atexit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int atexit(void (*__func)(void))
     * }
     */
    public static int atexit(MemorySegment __func) {
        var mh$ = atexit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atexit", __func);
            }
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class at_quick_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("at_quick_exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int at_quick_exit(void (*__func)(void))
     * }
     */
    public static FunctionDescriptor at_quick_exit$descriptor() {
        return at_quick_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int at_quick_exit(void (*__func)(void))
     * }
     */
    public static MethodHandle at_quick_exit$handle() {
        return at_quick_exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int at_quick_exit(void (*__func)(void))
     * }
     */
    public static int at_quick_exit(MemorySegment __func) {
        var mh$ = at_quick_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("at_quick_exit", __func);
            }
            return (int)mh$.invokeExact(__func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class on_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("on_exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int on_exit(void (*__func)(int, void *), void *__arg)
     * }
     */
    public static FunctionDescriptor on_exit$descriptor() {
        return on_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int on_exit(void (*__func)(int, void *), void *__arg)
     * }
     */
    public static MethodHandle on_exit$handle() {
        return on_exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int on_exit(void (*__func)(int, void *), void *__arg)
     * }
     */
    public static int on_exit(MemorySegment __func, MemorySegment __arg) {
        var mh$ = on_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("on_exit", __func, __arg);
            }
            return (int)mh$.invokeExact(__func, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void exit(int __status)
     * }
     */
    public static FunctionDescriptor exit$descriptor() {
        return exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void exit(int __status)
     * }
     */
    public static MethodHandle exit$handle() {
        return exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void exit(int __status)
     * }
     */
    public static void exit(int __status) {
        var mh$ = exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("exit", __status);
            }
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class quick_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("quick_exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void quick_exit(int __status)
     * }
     */
    public static FunctionDescriptor quick_exit$descriptor() {
        return quick_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void quick_exit(int __status)
     * }
     */
    public static MethodHandle quick_exit$handle() {
        return quick_exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void quick_exit(int __status)
     * }
     */
    public static void quick_exit(int __status) {
        var mh$ = quick_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("quick_exit", __status);
            }
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _Exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_Exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void _Exit(int __status)
     * }
     */
    public static FunctionDescriptor _Exit$descriptor() {
        return _Exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void _Exit(int __status)
     * }
     */
    public static MethodHandle _Exit$handle() {
        return _Exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void _Exit(int __status)
     * }
     */
    public static void _Exit(int __status) {
        var mh$ = _Exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_Exit", __status);
            }
            mh$.invokeExact(__status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *getenv(const char *__name)
     * }
     */
    public static FunctionDescriptor getenv$descriptor() {
        return getenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *getenv(const char *__name)
     * }
     */
    public static MethodHandle getenv$handle() {
        return getenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *getenv(const char *__name)
     * }
     */
    public static MemorySegment getenv(MemorySegment __name) {
        var mh$ = getenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getenv", __name);
            }
            return (MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class putenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("putenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int putenv(char *__string)
     * }
     */
    public static FunctionDescriptor putenv$descriptor() {
        return putenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int putenv(char *__string)
     * }
     */
    public static MethodHandle putenv$handle() {
        return putenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int putenv(char *__string)
     * }
     */
    public static int putenv(MemorySegment __string) {
        var mh$ = putenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("putenv", __string);
            }
            return (int)mh$.invokeExact(__string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setenv(const char *__name, const char *__value, int __replace)
     * }
     */
    public static FunctionDescriptor setenv$descriptor() {
        return setenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setenv(const char *__name, const char *__value, int __replace)
     * }
     */
    public static MethodHandle setenv$handle() {
        return setenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setenv(const char *__name, const char *__value, int __replace)
     * }
     */
    public static int setenv(MemorySegment __name, MemorySegment __value, int __replace) {
        var mh$ = setenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setenv", __name, __value, __replace);
            }
            return (int)mh$.invokeExact(__name, __value, __replace);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class unsetenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("unsetenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int unsetenv(const char *__name)
     * }
     */
    public static FunctionDescriptor unsetenv$descriptor() {
        return unsetenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int unsetenv(const char *__name)
     * }
     */
    public static MethodHandle unsetenv$handle() {
        return unsetenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int unsetenv(const char *__name)
     * }
     */
    public static int unsetenv(MemorySegment __name) {
        var mh$ = unsetenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("unsetenv", __name);
            }
            return (int)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class clearenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("clearenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int clearenv()
     * }
     */
    public static FunctionDescriptor clearenv$descriptor() {
        return clearenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int clearenv()
     * }
     */
    public static MethodHandle clearenv$handle() {
        return clearenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int clearenv()
     * }
     */
    public static int clearenv() {
        var mh$ = clearenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("clearenv");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mktemp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("mktemp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *mktemp(char *__template)
     * }
     */
    public static FunctionDescriptor mktemp$descriptor() {
        return mktemp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *mktemp(char *__template)
     * }
     */
    public static MethodHandle mktemp$handle() {
        return mktemp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *mktemp(char *__template)
     * }
     */
    public static MemorySegment mktemp(MemorySegment __template) {
        var mh$ = mktemp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mktemp", __template);
            }
            return (MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkstemp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("mkstemp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mkstemp(char *__template)
     * }
     */
    public static FunctionDescriptor mkstemp$descriptor() {
        return mkstemp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mkstemp(char *__template)
     * }
     */
    public static MethodHandle mkstemp$handle() {
        return mkstemp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int mkstemp(char *__template)
     * }
     */
    public static int mkstemp(MemorySegment __template) {
        var mh$ = mkstemp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkstemp", __template);
            }
            return (int)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkstemps {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("mkstemps"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mkstemps(char *__template, int __suffixlen)
     * }
     */
    public static FunctionDescriptor mkstemps$descriptor() {
        return mkstemps.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mkstemps(char *__template, int __suffixlen)
     * }
     */
    public static MethodHandle mkstemps$handle() {
        return mkstemps.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int mkstemps(char *__template, int __suffixlen)
     * }
     */
    public static int mkstemps(MemorySegment __template, int __suffixlen) {
        var mh$ = mkstemps.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkstemps", __template, __suffixlen);
            }
            return (int)mh$.invokeExact(__template, __suffixlen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mkdtemp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("mkdtemp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *mkdtemp(char *__template)
     * }
     */
    public static FunctionDescriptor mkdtemp$descriptor() {
        return mkdtemp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *mkdtemp(char *__template)
     * }
     */
    public static MethodHandle mkdtemp$handle() {
        return mkdtemp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *mkdtemp(char *__template)
     * }
     */
    public static MemorySegment mkdtemp(MemorySegment __template) {
        var mh$ = mkdtemp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mkdtemp", __template);
            }
            return (MemorySegment)mh$.invokeExact(__template);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class system {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("system"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int system(const char *__command)
     * }
     */
    public static FunctionDescriptor system$descriptor() {
        return system.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int system(const char *__command)
     * }
     */
    public static MethodHandle system$handle() {
        return system.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int system(const char *__command)
     * }
     */
    public static int system(MemorySegment __command) {
        var mh$ = system.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("system", __command);
            }
            return (int)mh$.invokeExact(__command);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class realpath {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("realpath"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *realpath(const char *restrict __name, char *restrict __resolved)
     * }
     */
    public static FunctionDescriptor realpath$descriptor() {
        return realpath.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *realpath(const char *restrict __name, char *restrict __resolved)
     * }
     */
    public static MethodHandle realpath$handle() {
        return realpath.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *realpath(const char *restrict __name, char *restrict __resolved)
     * }
     */
    public static MemorySegment realpath(MemorySegment __name, MemorySegment __resolved) {
        var mh$ = realpath.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("realpath", __name, __resolved);
            }
            return (MemorySegment)mh$.invokeExact(__name, __resolved);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class bsearch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("bsearch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static FunctionDescriptor bsearch$descriptor() {
        return bsearch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static MethodHandle bsearch$handle() {
        return bsearch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *bsearch(const void *__key, const void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static MemorySegment bsearch(MemorySegment __key, MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = bsearch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("bsearch", __key, __base, __nmemb, __size, __compar);
            }
            return (MemorySegment)mh$.invokeExact(__key, __base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class qsort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("qsort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static FunctionDescriptor qsort$descriptor() {
        return qsort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static MethodHandle qsort$handle() {
        return qsort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void qsort(void *__base, size_t __nmemb, size_t __size, __compar_fn_t __compar)
     * }
     */
    public static void qsort(MemorySegment __base, long __nmemb, long __size, MemorySegment __compar) {
        var mh$ = qsort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("qsort", __base, __nmemb, __size, __compar);
            }
            mh$.invokeExact(__base, __nmemb, __size, __compar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class abs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("abs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int abs(int __x)
     * }
     */
    public static FunctionDescriptor abs$descriptor() {
        return abs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int abs(int __x)
     * }
     */
    public static MethodHandle abs$handle() {
        return abs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int abs(int __x)
     * }
     */
    public static int abs(int __x) {
        var mh$ = abs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("abs", __x);
            }
            return (int)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class labs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("labs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long labs(long __x)
     * }
     */
    public static FunctionDescriptor labs$descriptor() {
        return labs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long labs(long __x)
     * }
     */
    public static MethodHandle labs$handle() {
        return labs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long labs(long __x)
     * }
     */
    public static long labs(long __x) {
        var mh$ = labs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("labs", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class llabs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG_LONG,
            app_indicator_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("llabs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long long llabs(long long __x)
     * }
     */
    public static FunctionDescriptor llabs$descriptor() {
        return llabs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long long llabs(long long __x)
     * }
     */
    public static MethodHandle llabs$handle() {
        return llabs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long long llabs(long long __x)
     * }
     */
    public static long llabs(long __x) {
        var mh$ = llabs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("llabs", __x);
            }
            return (long)mh$.invokeExact(__x);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class div {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            div_t.layout(),
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("div"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern div_t div(int __numer, int __denom)
     * }
     */
    public static FunctionDescriptor div$descriptor() {
        return div.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern div_t div(int __numer, int __denom)
     * }
     */
    public static MethodHandle div$handle() {
        return div.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern div_t div(int __numer, int __denom)
     * }
     */
    public static MemorySegment div(SegmentAllocator allocator, int __numer, int __denom) {
        var mh$ = div.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("div", allocator, __numer, __denom);
            }
            return (MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ldiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            ldiv_t.layout(),
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ldiv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern ldiv_t ldiv(long __numer, long __denom)
     * }
     */
    public static FunctionDescriptor ldiv$descriptor() {
        return ldiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern ldiv_t ldiv(long __numer, long __denom)
     * }
     */
    public static MethodHandle ldiv$handle() {
        return ldiv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern ldiv_t ldiv(long __numer, long __denom)
     * }
     */
    public static MemorySegment ldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = ldiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ldiv", allocator, __numer, __denom);
            }
            return (MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lldiv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            lldiv_t.layout(),
            app_indicator_h.C_LONG_LONG,
            app_indicator_h.C_LONG_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("lldiv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern lldiv_t lldiv(long long __numer, long long __denom)
     * }
     */
    public static FunctionDescriptor lldiv$descriptor() {
        return lldiv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern lldiv_t lldiv(long long __numer, long long __denom)
     * }
     */
    public static MethodHandle lldiv$handle() {
        return lldiv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern lldiv_t lldiv(long long __numer, long long __denom)
     * }
     */
    public static MemorySegment lldiv(SegmentAllocator allocator, long __numer, long __denom) {
        var mh$ = lldiv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lldiv", allocator, __numer, __denom);
            }
            return (MemorySegment)mh$.invokeExact(allocator, __numer, __denom);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ecvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ecvt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *ecvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static FunctionDescriptor ecvt$descriptor() {
        return ecvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *ecvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static MethodHandle ecvt$handle() {
        return ecvt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *ecvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static MemorySegment ecvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = ecvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ecvt", __value, __ndigit, __decpt, __sign);
            }
            return (MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fcvt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *fcvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static FunctionDescriptor fcvt$descriptor() {
        return fcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *fcvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static MethodHandle fcvt$handle() {
        return fcvt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *fcvt(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign)
     * }
     */
    public static MemorySegment fcvt(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign) {
        var mh$ = fcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fcvt", __value, __ndigit, __decpt, __sign);
            }
            return (MemorySegment)mh$.invokeExact(__value, __ndigit, __decpt, __sign);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gcvt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gcvt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *gcvt(double __value, int __ndigit, char *__buf)
     * }
     */
    public static FunctionDescriptor gcvt$descriptor() {
        return gcvt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *gcvt(double __value, int __ndigit, char *__buf)
     * }
     */
    public static MethodHandle gcvt$handle() {
        return gcvt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *gcvt(double __value, int __ndigit, char *__buf)
     * }
     */
    public static MemorySegment gcvt(double __value, int __ndigit, MemorySegment __buf) {
        var mh$ = gcvt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gcvt", __value, __ndigit, __buf);
            }
            return (MemorySegment)mh$.invokeExact(__value, __ndigit, __buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ecvt_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ecvt_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int ecvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static FunctionDescriptor ecvt_r$descriptor() {
        return ecvt_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int ecvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static MethodHandle ecvt_r$handle() {
        return ecvt_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int ecvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static int ecvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = ecvt_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ecvt_r", __value, __ndigit, __decpt, __sign, __buf, __len);
            }
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fcvt_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fcvt_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int fcvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static FunctionDescriptor fcvt_r$descriptor() {
        return fcvt_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int fcvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static MethodHandle fcvt_r$handle() {
        return fcvt_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int fcvt_r(double __value, int __ndigit, int *restrict __decpt, int *restrict __sign, char *restrict __buf, size_t __len)
     * }
     */
    public static int fcvt_r(double __value, int __ndigit, MemorySegment __decpt, MemorySegment __sign, MemorySegment __buf, long __len) {
        var mh$ = fcvt_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fcvt_r", __value, __ndigit, __decpt, __sign, __buf, __len);
            }
            return (int)mh$.invokeExact(__value, __ndigit, __decpt, __sign, __buf, __len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mblen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("mblen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mblen(const char *__s, size_t __n)
     * }
     */
    public static FunctionDescriptor mblen$descriptor() {
        return mblen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mblen(const char *__s, size_t __n)
     * }
     */
    public static MethodHandle mblen$handle() {
        return mblen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int mblen(const char *__s, size_t __n)
     * }
     */
    public static int mblen(MemorySegment __s, long __n) {
        var mh$ = mblen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mblen", __s, __n);
            }
            return (int)mh$.invokeExact(__s, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbtowc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("mbtowc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int mbtowc(wchar_t *restrict __pwc, const char *restrict __s, size_t __n)
     * }
     */
    public static FunctionDescriptor mbtowc$descriptor() {
        return mbtowc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int mbtowc(wchar_t *restrict __pwc, const char *restrict __s, size_t __n)
     * }
     */
    public static MethodHandle mbtowc$handle() {
        return mbtowc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int mbtowc(wchar_t *restrict __pwc, const char *restrict __s, size_t __n)
     * }
     */
    public static int mbtowc(MemorySegment __pwc, MemorySegment __s, long __n) {
        var mh$ = mbtowc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbtowc", __pwc, __s, __n);
            }
            return (int)mh$.invokeExact(__pwc, __s, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wctomb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("wctomb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int wctomb(char *__s, wchar_t __wchar)
     * }
     */
    public static FunctionDescriptor wctomb$descriptor() {
        return wctomb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int wctomb(char *__s, wchar_t __wchar)
     * }
     */
    public static MethodHandle wctomb$handle() {
        return wctomb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int wctomb(char *__s, wchar_t __wchar)
     * }
     */
    public static int wctomb(MemorySegment __s, int __wchar) {
        var mh$ = wctomb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wctomb", __s, __wchar);
            }
            return (int)mh$.invokeExact(__s, __wchar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class mbstowcs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("mbstowcs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t mbstowcs(wchar_t *restrict __pwcs, const char *restrict __s, size_t __n)
     * }
     */
    public static FunctionDescriptor mbstowcs$descriptor() {
        return mbstowcs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t mbstowcs(wchar_t *restrict __pwcs, const char *restrict __s, size_t __n)
     * }
     */
    public static MethodHandle mbstowcs$handle() {
        return mbstowcs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern size_t mbstowcs(wchar_t *restrict __pwcs, const char *restrict __s, size_t __n)
     * }
     */
    public static long mbstowcs(MemorySegment __pwcs, MemorySegment __s, long __n) {
        var mh$ = mbstowcs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("mbstowcs", __pwcs, __s, __n);
            }
            return (long)mh$.invokeExact(__pwcs, __s, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class wcstombs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("wcstombs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern size_t wcstombs(char *restrict __s, const wchar_t *restrict __pwcs, size_t __n)
     * }
     */
    public static FunctionDescriptor wcstombs$descriptor() {
        return wcstombs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern size_t wcstombs(char *restrict __s, const wchar_t *restrict __pwcs, size_t __n)
     * }
     */
    public static MethodHandle wcstombs$handle() {
        return wcstombs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern size_t wcstombs(char *restrict __s, const wchar_t *restrict __pwcs, size_t __n)
     * }
     */
    public static long wcstombs(MemorySegment __s, MemorySegment __pwcs, long __n) {
        var mh$ = wcstombs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("wcstombs", __s, __pwcs, __n);
            }
            return (long)mh$.invokeExact(__s, __pwcs, __n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rpmatch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("rpmatch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int rpmatch(const char *__response)
     * }
     */
    public static FunctionDescriptor rpmatch$descriptor() {
        return rpmatch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int rpmatch(const char *__response)
     * }
     */
    public static MethodHandle rpmatch$handle() {
        return rpmatch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int rpmatch(const char *__response)
     * }
     */
    public static int rpmatch(MemorySegment __response) {
        var mh$ = rpmatch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rpmatch", __response);
            }
            return (int)mh$.invokeExact(__response);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getsubopt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getsubopt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getsubopt(char **restrict __optionp, char *const *restrict __tokens, char **restrict __valuep)
     * }
     */
    public static FunctionDescriptor getsubopt$descriptor() {
        return getsubopt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getsubopt(char **restrict __optionp, char *const *restrict __tokens, char **restrict __valuep)
     * }
     */
    public static MethodHandle getsubopt$handle() {
        return getsubopt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getsubopt(char **restrict __optionp, char *const *restrict __tokens, char **restrict __valuep)
     * }
     */
    public static int getsubopt(MemorySegment __optionp, MemorySegment __tokens, MemorySegment __valuep) {
        var mh$ = getsubopt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getsubopt", __optionp, __tokens, __valuep);
            }
            return (int)mh$.invokeExact(__optionp, __tokens, __valuep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getloadavg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getloadavg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getloadavg(double __loadavg[], int __nelem)
     * }
     */
    public static FunctionDescriptor getloadavg$descriptor() {
        return getloadavg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getloadavg(double __loadavg[], int __nelem)
     * }
     */
    public static MethodHandle getloadavg$handle() {
        return getloadavg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getloadavg(double __loadavg[], int __nelem)
     * }
     */
    public static int getloadavg(MemorySegment __loadavg, int __nelem) {
        var mh$ = getloadavg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getloadavg", __loadavg, __nelem);
            }
            return (int)mh$.invokeExact(__loadavg, __nelem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_thread_error_quark()
     * }
     */
    public static FunctionDescriptor g_thread_error_quark$descriptor() {
        return g_thread_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_thread_error_quark()
     * }
     */
    public static MethodHandle g_thread_error_quark$handle() {
        return g_thread_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_thread_error_quark()
     * }
     */
    public static int g_thread_error_quark() {
        var mh$ = g_thread_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_THREAD_ERROR_AGAIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_THREAD_ERROR_AGAIN = 0
     * }
     */
    public static int G_THREAD_ERROR_AGAIN() {
        return G_THREAD_ERROR_AGAIN;
    }
    private static final int G_ONCE_STATUS_NOTCALLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ONCE_STATUS_NOTCALLED = 0
     * }
     */
    public static int G_ONCE_STATUS_NOTCALLED() {
        return G_ONCE_STATUS_NOTCALLED;
    }
    private static final int G_ONCE_STATUS_PROGRESS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ONCE_STATUS_PROGRESS = 1
     * }
     */
    public static int G_ONCE_STATUS_PROGRESS() {
        return G_ONCE_STATUS_PROGRESS;
    }
    private static final int G_ONCE_STATUS_READY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ONCE_STATUS_READY = 2
     * }
     */
    public static int G_ONCE_STATUS_READY() {
        return G_ONCE_STATUS_READY;
    }

    private static class g_thread_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GThread *g_thread_ref(GThread *thread)
     * }
     */
    public static FunctionDescriptor g_thread_ref$descriptor() {
        return g_thread_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GThread *g_thread_ref(GThread *thread)
     * }
     */
    public static MethodHandle g_thread_ref$handle() {
        return g_thread_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GThread *g_thread_ref(GThread *thread)
     * }
     */
    public static MemorySegment g_thread_ref(MemorySegment thread) {
        var mh$ = g_thread_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_ref", thread);
            }
            return (MemorySegment)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_unref(GThread *thread)
     * }
     */
    public static FunctionDescriptor g_thread_unref$descriptor() {
        return g_thread_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_unref(GThread *thread)
     * }
     */
    public static MethodHandle g_thread_unref$handle() {
        return g_thread_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_unref(GThread *thread)
     * }
     */
    public static void g_thread_unref(MemorySegment thread) {
        var mh$ = g_thread_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_unref", thread);
            }
            mh$.invokeExact(thread);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GThread *g_thread_new(const gchar *name, GThreadFunc func, gpointer data)
     * }
     */
    public static FunctionDescriptor g_thread_new$descriptor() {
        return g_thread_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GThread *g_thread_new(const gchar *name, GThreadFunc func, gpointer data)
     * }
     */
    public static MethodHandle g_thread_new$handle() {
        return g_thread_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GThread *g_thread_new(const gchar *name, GThreadFunc func, gpointer data)
     * }
     */
    public static MemorySegment g_thread_new(MemorySegment name, MemorySegment func, MemorySegment data) {
        var mh$ = g_thread_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_new", name, func, data);
            }
            return (MemorySegment)mh$.invokeExact(name, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_try_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_try_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GThread *g_thread_try_new(const gchar *name, GThreadFunc func, gpointer data, GError **error)
     * }
     */
    public static FunctionDescriptor g_thread_try_new$descriptor() {
        return g_thread_try_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GThread *g_thread_try_new(const gchar *name, GThreadFunc func, gpointer data, GError **error)
     * }
     */
    public static MethodHandle g_thread_try_new$handle() {
        return g_thread_try_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GThread *g_thread_try_new(const gchar *name, GThreadFunc func, gpointer data, GError **error)
     * }
     */
    public static MemorySegment g_thread_try_new(MemorySegment name, MemorySegment func, MemorySegment data, MemorySegment error) {
        var mh$ = g_thread_try_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_try_new", name, func, data, error);
            }
            return (MemorySegment)mh$.invokeExact(name, func, data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_self {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_self"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GThread *g_thread_self()
     * }
     */
    public static FunctionDescriptor g_thread_self$descriptor() {
        return g_thread_self.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GThread *g_thread_self()
     * }
     */
    public static MethodHandle g_thread_self$handle() {
        return g_thread_self.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GThread *g_thread_self()
     * }
     */
    public static MemorySegment g_thread_self() {
        var mh$ = g_thread_self.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_self");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_exit(gpointer retval)
     * }
     */
    public static FunctionDescriptor g_thread_exit$descriptor() {
        return g_thread_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_exit(gpointer retval)
     * }
     */
    public static MethodHandle g_thread_exit$handle() {
        return g_thread_exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_exit(gpointer retval)
     * }
     */
    public static void g_thread_exit(MemorySegment retval) {
        var mh$ = g_thread_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_exit", retval);
            }
            mh$.invokeExact(retval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_join {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_join"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_thread_join(GThread *thread)
     * }
     */
    public static FunctionDescriptor g_thread_join$descriptor() {
        return g_thread_join.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_thread_join(GThread *thread)
     * }
     */
    public static MethodHandle g_thread_join$handle() {
        return g_thread_join.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_thread_join(GThread *thread)
     * }
     */
    public static MemorySegment g_thread_join(MemorySegment thread) {
        var mh$ = g_thread_join.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_join", thread);
            }
            return (MemorySegment)mh$.invokeExact(thread);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_yield {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_yield"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_yield()
     * }
     */
    public static FunctionDescriptor g_thread_yield$descriptor() {
        return g_thread_yield.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_yield()
     * }
     */
    public static MethodHandle g_thread_yield$handle() {
        return g_thread_yield.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_yield()
     * }
     */
    public static void g_thread_yield() {
        var mh$ = g_thread_yield.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_yield");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mutex_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mutex_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mutex_init(GMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_mutex_init$descriptor() {
        return g_mutex_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mutex_init(GMutex *mutex)
     * }
     */
    public static MethodHandle g_mutex_init$handle() {
        return g_mutex_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mutex_init(GMutex *mutex)
     * }
     */
    public static void g_mutex_init(MemorySegment mutex) {
        var mh$ = g_mutex_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mutex_init", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mutex_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mutex_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mutex_clear(GMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_mutex_clear$descriptor() {
        return g_mutex_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mutex_clear(GMutex *mutex)
     * }
     */
    public static MethodHandle g_mutex_clear$handle() {
        return g_mutex_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mutex_clear(GMutex *mutex)
     * }
     */
    public static void g_mutex_clear(MemorySegment mutex) {
        var mh$ = g_mutex_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mutex_clear", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mutex_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mutex_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mutex_lock(GMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_mutex_lock$descriptor() {
        return g_mutex_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mutex_lock(GMutex *mutex)
     * }
     */
    public static MethodHandle g_mutex_lock$handle() {
        return g_mutex_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mutex_lock(GMutex *mutex)
     * }
     */
    public static void g_mutex_lock(MemorySegment mutex) {
        var mh$ = g_mutex_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mutex_lock", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mutex_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mutex_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mutex_trylock(GMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_mutex_trylock$descriptor() {
        return g_mutex_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mutex_trylock(GMutex *mutex)
     * }
     */
    public static MethodHandle g_mutex_trylock$handle() {
        return g_mutex_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mutex_trylock(GMutex *mutex)
     * }
     */
    public static int g_mutex_trylock(MemorySegment mutex) {
        var mh$ = g_mutex_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mutex_trylock", mutex);
            }
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mutex_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mutex_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mutex_unlock(GMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_mutex_unlock$descriptor() {
        return g_mutex_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mutex_unlock(GMutex *mutex)
     * }
     */
    public static MethodHandle g_mutex_unlock$handle() {
        return g_mutex_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mutex_unlock(GMutex *mutex)
     * }
     */
    public static void g_mutex_unlock(MemorySegment mutex) {
        var mh$ = g_mutex_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mutex_unlock", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rw_lock_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rw_lock_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rw_lock_init(GRWLock *rw_lock)
     * }
     */
    public static FunctionDescriptor g_rw_lock_init$descriptor() {
        return g_rw_lock_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rw_lock_init(GRWLock *rw_lock)
     * }
     */
    public static MethodHandle g_rw_lock_init$handle() {
        return g_rw_lock_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rw_lock_init(GRWLock *rw_lock)
     * }
     */
    public static void g_rw_lock_init(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rw_lock_init", rw_lock);
            }
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rw_lock_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rw_lock_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rw_lock_clear(GRWLock *rw_lock)
     * }
     */
    public static FunctionDescriptor g_rw_lock_clear$descriptor() {
        return g_rw_lock_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rw_lock_clear(GRWLock *rw_lock)
     * }
     */
    public static MethodHandle g_rw_lock_clear$handle() {
        return g_rw_lock_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rw_lock_clear(GRWLock *rw_lock)
     * }
     */
    public static void g_rw_lock_clear(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rw_lock_clear", rw_lock);
            }
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rw_lock_writer_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rw_lock_writer_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rw_lock_writer_lock(GRWLock *rw_lock)
     * }
     */
    public static FunctionDescriptor g_rw_lock_writer_lock$descriptor() {
        return g_rw_lock_writer_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rw_lock_writer_lock(GRWLock *rw_lock)
     * }
     */
    public static MethodHandle g_rw_lock_writer_lock$handle() {
        return g_rw_lock_writer_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rw_lock_writer_lock(GRWLock *rw_lock)
     * }
     */
    public static void g_rw_lock_writer_lock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_writer_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rw_lock_writer_lock", rw_lock);
            }
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rw_lock_writer_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rw_lock_writer_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_rw_lock_writer_trylock(GRWLock *rw_lock)
     * }
     */
    public static FunctionDescriptor g_rw_lock_writer_trylock$descriptor() {
        return g_rw_lock_writer_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_rw_lock_writer_trylock(GRWLock *rw_lock)
     * }
     */
    public static MethodHandle g_rw_lock_writer_trylock$handle() {
        return g_rw_lock_writer_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_rw_lock_writer_trylock(GRWLock *rw_lock)
     * }
     */
    public static int g_rw_lock_writer_trylock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_writer_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rw_lock_writer_trylock", rw_lock);
            }
            return (int)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rw_lock_writer_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rw_lock_writer_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rw_lock_writer_unlock(GRWLock *rw_lock)
     * }
     */
    public static FunctionDescriptor g_rw_lock_writer_unlock$descriptor() {
        return g_rw_lock_writer_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rw_lock_writer_unlock(GRWLock *rw_lock)
     * }
     */
    public static MethodHandle g_rw_lock_writer_unlock$handle() {
        return g_rw_lock_writer_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rw_lock_writer_unlock(GRWLock *rw_lock)
     * }
     */
    public static void g_rw_lock_writer_unlock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_writer_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rw_lock_writer_unlock", rw_lock);
            }
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rw_lock_reader_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rw_lock_reader_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rw_lock_reader_lock(GRWLock *rw_lock)
     * }
     */
    public static FunctionDescriptor g_rw_lock_reader_lock$descriptor() {
        return g_rw_lock_reader_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rw_lock_reader_lock(GRWLock *rw_lock)
     * }
     */
    public static MethodHandle g_rw_lock_reader_lock$handle() {
        return g_rw_lock_reader_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rw_lock_reader_lock(GRWLock *rw_lock)
     * }
     */
    public static void g_rw_lock_reader_lock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_reader_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rw_lock_reader_lock", rw_lock);
            }
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rw_lock_reader_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rw_lock_reader_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_rw_lock_reader_trylock(GRWLock *rw_lock)
     * }
     */
    public static FunctionDescriptor g_rw_lock_reader_trylock$descriptor() {
        return g_rw_lock_reader_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_rw_lock_reader_trylock(GRWLock *rw_lock)
     * }
     */
    public static MethodHandle g_rw_lock_reader_trylock$handle() {
        return g_rw_lock_reader_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_rw_lock_reader_trylock(GRWLock *rw_lock)
     * }
     */
    public static int g_rw_lock_reader_trylock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_reader_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rw_lock_reader_trylock", rw_lock);
            }
            return (int)mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rw_lock_reader_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rw_lock_reader_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rw_lock_reader_unlock(GRWLock *rw_lock)
     * }
     */
    public static FunctionDescriptor g_rw_lock_reader_unlock$descriptor() {
        return g_rw_lock_reader_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rw_lock_reader_unlock(GRWLock *rw_lock)
     * }
     */
    public static MethodHandle g_rw_lock_reader_unlock$handle() {
        return g_rw_lock_reader_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rw_lock_reader_unlock(GRWLock *rw_lock)
     * }
     */
    public static void g_rw_lock_reader_unlock(MemorySegment rw_lock) {
        var mh$ = g_rw_lock_reader_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rw_lock_reader_unlock", rw_lock);
            }
            mh$.invokeExact(rw_lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rec_mutex_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rec_mutex_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rec_mutex_init(GRecMutex *rec_mutex)
     * }
     */
    public static FunctionDescriptor g_rec_mutex_init$descriptor() {
        return g_rec_mutex_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rec_mutex_init(GRecMutex *rec_mutex)
     * }
     */
    public static MethodHandle g_rec_mutex_init$handle() {
        return g_rec_mutex_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rec_mutex_init(GRecMutex *rec_mutex)
     * }
     */
    public static void g_rec_mutex_init(MemorySegment rec_mutex) {
        var mh$ = g_rec_mutex_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rec_mutex_init", rec_mutex);
            }
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rec_mutex_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rec_mutex_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rec_mutex_clear(GRecMutex *rec_mutex)
     * }
     */
    public static FunctionDescriptor g_rec_mutex_clear$descriptor() {
        return g_rec_mutex_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rec_mutex_clear(GRecMutex *rec_mutex)
     * }
     */
    public static MethodHandle g_rec_mutex_clear$handle() {
        return g_rec_mutex_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rec_mutex_clear(GRecMutex *rec_mutex)
     * }
     */
    public static void g_rec_mutex_clear(MemorySegment rec_mutex) {
        var mh$ = g_rec_mutex_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rec_mutex_clear", rec_mutex);
            }
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rec_mutex_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rec_mutex_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rec_mutex_lock(GRecMutex *rec_mutex)
     * }
     */
    public static FunctionDescriptor g_rec_mutex_lock$descriptor() {
        return g_rec_mutex_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rec_mutex_lock(GRecMutex *rec_mutex)
     * }
     */
    public static MethodHandle g_rec_mutex_lock$handle() {
        return g_rec_mutex_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rec_mutex_lock(GRecMutex *rec_mutex)
     * }
     */
    public static void g_rec_mutex_lock(MemorySegment rec_mutex) {
        var mh$ = g_rec_mutex_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rec_mutex_lock", rec_mutex);
            }
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rec_mutex_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rec_mutex_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_rec_mutex_trylock(GRecMutex *rec_mutex)
     * }
     */
    public static FunctionDescriptor g_rec_mutex_trylock$descriptor() {
        return g_rec_mutex_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_rec_mutex_trylock(GRecMutex *rec_mutex)
     * }
     */
    public static MethodHandle g_rec_mutex_trylock$handle() {
        return g_rec_mutex_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_rec_mutex_trylock(GRecMutex *rec_mutex)
     * }
     */
    public static int g_rec_mutex_trylock(MemorySegment rec_mutex) {
        var mh$ = g_rec_mutex_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rec_mutex_trylock", rec_mutex);
            }
            return (int)mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rec_mutex_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rec_mutex_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rec_mutex_unlock(GRecMutex *rec_mutex)
     * }
     */
    public static FunctionDescriptor g_rec_mutex_unlock$descriptor() {
        return g_rec_mutex_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rec_mutex_unlock(GRecMutex *rec_mutex)
     * }
     */
    public static MethodHandle g_rec_mutex_unlock$handle() {
        return g_rec_mutex_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rec_mutex_unlock(GRecMutex *rec_mutex)
     * }
     */
    public static void g_rec_mutex_unlock(MemorySegment rec_mutex) {
        var mh$ = g_rec_mutex_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rec_mutex_unlock", rec_mutex);
            }
            mh$.invokeExact(rec_mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cond_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cond_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cond_init(GCond *cond)
     * }
     */
    public static FunctionDescriptor g_cond_init$descriptor() {
        return g_cond_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cond_init(GCond *cond)
     * }
     */
    public static MethodHandle g_cond_init$handle() {
        return g_cond_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cond_init(GCond *cond)
     * }
     */
    public static void g_cond_init(MemorySegment cond) {
        var mh$ = g_cond_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cond_init", cond);
            }
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cond_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cond_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cond_clear(GCond *cond)
     * }
     */
    public static FunctionDescriptor g_cond_clear$descriptor() {
        return g_cond_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cond_clear(GCond *cond)
     * }
     */
    public static MethodHandle g_cond_clear$handle() {
        return g_cond_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cond_clear(GCond *cond)
     * }
     */
    public static void g_cond_clear(MemorySegment cond) {
        var mh$ = g_cond_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cond_clear", cond);
            }
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cond_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cond_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cond_wait(GCond *cond, GMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_cond_wait$descriptor() {
        return g_cond_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cond_wait(GCond *cond, GMutex *mutex)
     * }
     */
    public static MethodHandle g_cond_wait$handle() {
        return g_cond_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cond_wait(GCond *cond, GMutex *mutex)
     * }
     */
    public static void g_cond_wait(MemorySegment cond, MemorySegment mutex) {
        var mh$ = g_cond_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cond_wait", cond, mutex);
            }
            mh$.invokeExact(cond, mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cond_signal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cond_signal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cond_signal(GCond *cond)
     * }
     */
    public static FunctionDescriptor g_cond_signal$descriptor() {
        return g_cond_signal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cond_signal(GCond *cond)
     * }
     */
    public static MethodHandle g_cond_signal$handle() {
        return g_cond_signal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cond_signal(GCond *cond)
     * }
     */
    public static void g_cond_signal(MemorySegment cond) {
        var mh$ = g_cond_signal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cond_signal", cond);
            }
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cond_broadcast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cond_broadcast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cond_broadcast(GCond *cond)
     * }
     */
    public static FunctionDescriptor g_cond_broadcast$descriptor() {
        return g_cond_broadcast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cond_broadcast(GCond *cond)
     * }
     */
    public static MethodHandle g_cond_broadcast$handle() {
        return g_cond_broadcast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cond_broadcast(GCond *cond)
     * }
     */
    public static void g_cond_broadcast(MemorySegment cond) {
        var mh$ = g_cond_broadcast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cond_broadcast", cond);
            }
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cond_wait_until {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cond_wait_until"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_cond_wait_until(GCond *cond, GMutex *mutex, gint64 end_time)
     * }
     */
    public static FunctionDescriptor g_cond_wait_until$descriptor() {
        return g_cond_wait_until.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_cond_wait_until(GCond *cond, GMutex *mutex, gint64 end_time)
     * }
     */
    public static MethodHandle g_cond_wait_until$handle() {
        return g_cond_wait_until.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_cond_wait_until(GCond *cond, GMutex *mutex, gint64 end_time)
     * }
     */
    public static int g_cond_wait_until(MemorySegment cond, MemorySegment mutex, long end_time) {
        var mh$ = g_cond_wait_until.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cond_wait_until", cond, mutex, end_time);
            }
            return (int)mh$.invokeExact(cond, mutex, end_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_private_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_private_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_private_get(GPrivate *key)
     * }
     */
    public static FunctionDescriptor g_private_get$descriptor() {
        return g_private_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_private_get(GPrivate *key)
     * }
     */
    public static MethodHandle g_private_get$handle() {
        return g_private_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_private_get(GPrivate *key)
     * }
     */
    public static MemorySegment g_private_get(MemorySegment key) {
        var mh$ = g_private_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_private_get", key);
            }
            return (MemorySegment)mh$.invokeExact(key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_private_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_private_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_private_set(GPrivate *key, gpointer value)
     * }
     */
    public static FunctionDescriptor g_private_set$descriptor() {
        return g_private_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_private_set(GPrivate *key, gpointer value)
     * }
     */
    public static MethodHandle g_private_set$handle() {
        return g_private_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_private_set(GPrivate *key, gpointer value)
     * }
     */
    public static void g_private_set(MemorySegment key, MemorySegment value) {
        var mh$ = g_private_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_private_set", key, value);
            }
            mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_private_replace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_private_replace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_private_replace(GPrivate *key, gpointer value)
     * }
     */
    public static FunctionDescriptor g_private_replace$descriptor() {
        return g_private_replace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_private_replace(GPrivate *key, gpointer value)
     * }
     */
    public static MethodHandle g_private_replace$handle() {
        return g_private_replace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_private_replace(GPrivate *key, gpointer value)
     * }
     */
    public static void g_private_replace(MemorySegment key, MemorySegment value) {
        var mh$ = g_private_replace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_private_replace", key, value);
            }
            mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_once_impl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_once_impl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_once_impl(GOnce *once, GThreadFunc func, gpointer arg)
     * }
     */
    public static FunctionDescriptor g_once_impl$descriptor() {
        return g_once_impl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_once_impl(GOnce *once, GThreadFunc func, gpointer arg)
     * }
     */
    public static MethodHandle g_once_impl$handle() {
        return g_once_impl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_once_impl(GOnce *once, GThreadFunc func, gpointer arg)
     * }
     */
    public static MemorySegment g_once_impl(MemorySegment once, MemorySegment func, MemorySegment arg) {
        var mh$ = g_once_impl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_once_impl", once, func, arg);
            }
            return (MemorySegment)mh$.invokeExact(once, func, arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_once_init_enter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_once_init_enter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_once_init_enter(volatile void *location)
     * }
     */
    public static FunctionDescriptor g_once_init_enter$descriptor() {
        return g_once_init_enter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_once_init_enter(volatile void *location)
     * }
     */
    public static MethodHandle g_once_init_enter$handle() {
        return g_once_init_enter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_once_init_enter(volatile void *location)
     * }
     */
    public static int g_once_init_enter(MemorySegment location) {
        var mh$ = g_once_init_enter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_once_init_enter", location);
            }
            return (int)mh$.invokeExact(location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_once_init_leave {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_once_init_leave"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_once_init_leave(volatile void *location, gsize result)
     * }
     */
    public static FunctionDescriptor g_once_init_leave$descriptor() {
        return g_once_init_leave.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_once_init_leave(volatile void *location, gsize result)
     * }
     */
    public static MethodHandle g_once_init_leave$handle() {
        return g_once_init_leave.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_once_init_leave(volatile void *location, gsize result)
     * }
     */
    public static void g_once_init_leave(MemorySegment location, long result) {
        var mh$ = g_once_init_leave.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_once_init_leave", location, result);
            }
            mh$.invokeExact(location, result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_num_processors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_num_processors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_get_num_processors()
     * }
     */
    public static FunctionDescriptor g_get_num_processors$descriptor() {
        return g_get_num_processors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_get_num_processors()
     * }
     */
    public static MethodHandle g_get_num_processors$handle() {
        return g_get_num_processors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_get_num_processors()
     * }
     */
    public static int g_get_num_processors() {
        var mh$ = g_get_num_processors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_num_processors");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAsyncQueue *g_async_queue_new()
     * }
     */
    public static FunctionDescriptor g_async_queue_new$descriptor() {
        return g_async_queue_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAsyncQueue *g_async_queue_new()
     * }
     */
    public static MethodHandle g_async_queue_new$handle() {
        return g_async_queue_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAsyncQueue *g_async_queue_new()
     * }
     */
    public static MemorySegment g_async_queue_new() {
        var mh$ = g_async_queue_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_new_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_new_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAsyncQueue *g_async_queue_new_full(GDestroyNotify item_free_func)
     * }
     */
    public static FunctionDescriptor g_async_queue_new_full$descriptor() {
        return g_async_queue_new_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAsyncQueue *g_async_queue_new_full(GDestroyNotify item_free_func)
     * }
     */
    public static MethodHandle g_async_queue_new_full$handle() {
        return g_async_queue_new_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAsyncQueue *g_async_queue_new_full(GDestroyNotify item_free_func)
     * }
     */
    public static MemorySegment g_async_queue_new_full(MemorySegment item_free_func) {
        var mh$ = g_async_queue_new_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_new_full", item_free_func);
            }
            return (MemorySegment)mh$.invokeExact(item_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_lock(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_lock$descriptor() {
        return g_async_queue_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_lock(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_lock$handle() {
        return g_async_queue_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_lock(GAsyncQueue *queue)
     * }
     */
    public static void g_async_queue_lock(MemorySegment queue) {
        var mh$ = g_async_queue_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_lock", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_unlock(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_unlock$descriptor() {
        return g_async_queue_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_unlock(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_unlock$handle() {
        return g_async_queue_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_unlock(GAsyncQueue *queue)
     * }
     */
    public static void g_async_queue_unlock(MemorySegment queue) {
        var mh$ = g_async_queue_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_unlock", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAsyncQueue *g_async_queue_ref(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_ref$descriptor() {
        return g_async_queue_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAsyncQueue *g_async_queue_ref(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_ref$handle() {
        return g_async_queue_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAsyncQueue *g_async_queue_ref(GAsyncQueue *queue)
     * }
     */
    public static MemorySegment g_async_queue_ref(MemorySegment queue) {
        var mh$ = g_async_queue_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_ref", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_unref(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_unref$descriptor() {
        return g_async_queue_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_unref(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_unref$handle() {
        return g_async_queue_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_unref(GAsyncQueue *queue)
     * }
     */
    public static void g_async_queue_unref(MemorySegment queue) {
        var mh$ = g_async_queue_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_unref", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_ref_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_ref_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_ref_unlocked(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_ref_unlocked$descriptor() {
        return g_async_queue_ref_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_ref_unlocked(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_ref_unlocked$handle() {
        return g_async_queue_ref_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_ref_unlocked(GAsyncQueue *queue)
     * }
     */
    public static void g_async_queue_ref_unlocked(MemorySegment queue) {
        var mh$ = g_async_queue_ref_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_ref_unlocked", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_unref_and_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_unref_and_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_unref_and_unlock(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_unref_and_unlock$descriptor() {
        return g_async_queue_unref_and_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_unref_and_unlock(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_unref_and_unlock$handle() {
        return g_async_queue_unref_and_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_unref_and_unlock(GAsyncQueue *queue)
     * }
     */
    public static void g_async_queue_unref_and_unlock(MemorySegment queue) {
        var mh$ = g_async_queue_unref_and_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_unref_and_unlock", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_push {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_push"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_push(GAsyncQueue *queue, gpointer data)
     * }
     */
    public static FunctionDescriptor g_async_queue_push$descriptor() {
        return g_async_queue_push.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_push(GAsyncQueue *queue, gpointer data)
     * }
     */
    public static MethodHandle g_async_queue_push$handle() {
        return g_async_queue_push.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_push(GAsyncQueue *queue, gpointer data)
     * }
     */
    public static void g_async_queue_push(MemorySegment queue, MemorySegment data) {
        var mh$ = g_async_queue_push.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_push", queue, data);
            }
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_push_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_push_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_push_unlocked(GAsyncQueue *queue, gpointer data)
     * }
     */
    public static FunctionDescriptor g_async_queue_push_unlocked$descriptor() {
        return g_async_queue_push_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_push_unlocked(GAsyncQueue *queue, gpointer data)
     * }
     */
    public static MethodHandle g_async_queue_push_unlocked$handle() {
        return g_async_queue_push_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_push_unlocked(GAsyncQueue *queue, gpointer data)
     * }
     */
    public static void g_async_queue_push_unlocked(MemorySegment queue, MemorySegment data) {
        var mh$ = g_async_queue_push_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_push_unlocked", queue, data);
            }
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_push_sorted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_push_sorted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_push_sorted(GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_async_queue_push_sorted$descriptor() {
        return g_async_queue_push_sorted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_push_sorted(GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_async_queue_push_sorted$handle() {
        return g_async_queue_push_sorted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_push_sorted(GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static void g_async_queue_push_sorted(MemorySegment queue, MemorySegment data, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_async_queue_push_sorted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_push_sorted", queue, data, func, user_data);
            }
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_push_sorted_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_push_sorted_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_push_sorted_unlocked(GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_async_queue_push_sorted_unlocked$descriptor() {
        return g_async_queue_push_sorted_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_push_sorted_unlocked(GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_async_queue_push_sorted_unlocked$handle() {
        return g_async_queue_push_sorted_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_push_sorted_unlocked(GAsyncQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static void g_async_queue_push_sorted_unlocked(MemorySegment queue, MemorySegment data, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_async_queue_push_sorted_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_push_sorted_unlocked", queue, data, func, user_data);
            }
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_pop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_pop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_pop(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_pop$descriptor() {
        return g_async_queue_pop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_pop(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_pop$handle() {
        return g_async_queue_pop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_async_queue_pop(GAsyncQueue *queue)
     * }
     */
    public static MemorySegment g_async_queue_pop(MemorySegment queue) {
        var mh$ = g_async_queue_pop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_pop", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_pop_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_pop_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_pop_unlocked(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_pop_unlocked$descriptor() {
        return g_async_queue_pop_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_pop_unlocked(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_pop_unlocked$handle() {
        return g_async_queue_pop_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_async_queue_pop_unlocked(GAsyncQueue *queue)
     * }
     */
    public static MemorySegment g_async_queue_pop_unlocked(MemorySegment queue) {
        var mh$ = g_async_queue_pop_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_pop_unlocked", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_try_pop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_try_pop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_try_pop(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_try_pop$descriptor() {
        return g_async_queue_try_pop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_try_pop(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_try_pop$handle() {
        return g_async_queue_try_pop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_async_queue_try_pop(GAsyncQueue *queue)
     * }
     */
    public static MemorySegment g_async_queue_try_pop(MemorySegment queue) {
        var mh$ = g_async_queue_try_pop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_try_pop", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_try_pop_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_try_pop_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_try_pop_unlocked(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_try_pop_unlocked$descriptor() {
        return g_async_queue_try_pop_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_try_pop_unlocked(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_try_pop_unlocked$handle() {
        return g_async_queue_try_pop_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_async_queue_try_pop_unlocked(GAsyncQueue *queue)
     * }
     */
    public static MemorySegment g_async_queue_try_pop_unlocked(MemorySegment queue) {
        var mh$ = g_async_queue_try_pop_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_try_pop_unlocked", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_timeout_pop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_timeout_pop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timeout_pop(GAsyncQueue *queue, guint64 timeout)
     * }
     */
    public static FunctionDescriptor g_async_queue_timeout_pop$descriptor() {
        return g_async_queue_timeout_pop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timeout_pop(GAsyncQueue *queue, guint64 timeout)
     * }
     */
    public static MethodHandle g_async_queue_timeout_pop$handle() {
        return g_async_queue_timeout_pop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timeout_pop(GAsyncQueue *queue, guint64 timeout)
     * }
     */
    public static MemorySegment g_async_queue_timeout_pop(MemorySegment queue, long timeout) {
        var mh$ = g_async_queue_timeout_pop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_timeout_pop", queue, timeout);
            }
            return (MemorySegment)mh$.invokeExact(queue, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_timeout_pop_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_timeout_pop_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue *queue, guint64 timeout)
     * }
     */
    public static FunctionDescriptor g_async_queue_timeout_pop_unlocked$descriptor() {
        return g_async_queue_timeout_pop_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue *queue, guint64 timeout)
     * }
     */
    public static MethodHandle g_async_queue_timeout_pop_unlocked$handle() {
        return g_async_queue_timeout_pop_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timeout_pop_unlocked(GAsyncQueue *queue, guint64 timeout)
     * }
     */
    public static MemorySegment g_async_queue_timeout_pop_unlocked(MemorySegment queue, long timeout) {
        var mh$ = g_async_queue_timeout_pop_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_timeout_pop_unlocked", queue, timeout);
            }
            return (MemorySegment)mh$.invokeExact(queue, timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_async_queue_length(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_length$descriptor() {
        return g_async_queue_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_async_queue_length(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_length$handle() {
        return g_async_queue_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_async_queue_length(GAsyncQueue *queue)
     * }
     */
    public static int g_async_queue_length(MemorySegment queue) {
        var mh$ = g_async_queue_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_length", queue);
            }
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_length_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_length_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_async_queue_length_unlocked(GAsyncQueue *queue)
     * }
     */
    public static FunctionDescriptor g_async_queue_length_unlocked$descriptor() {
        return g_async_queue_length_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_async_queue_length_unlocked(GAsyncQueue *queue)
     * }
     */
    public static MethodHandle g_async_queue_length_unlocked$handle() {
        return g_async_queue_length_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_async_queue_length_unlocked(GAsyncQueue *queue)
     * }
     */
    public static int g_async_queue_length_unlocked(MemorySegment queue) {
        var mh$ = g_async_queue_length_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_length_unlocked", queue);
            }
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_sort(GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_async_queue_sort$descriptor() {
        return g_async_queue_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_sort(GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_async_queue_sort$handle() {
        return g_async_queue_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_sort(GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static void g_async_queue_sort(MemorySegment queue, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_async_queue_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_sort", queue, func, user_data);
            }
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_sort_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_sort_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_sort_unlocked(GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_async_queue_sort_unlocked$descriptor() {
        return g_async_queue_sort_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_sort_unlocked(GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_async_queue_sort_unlocked$handle() {
        return g_async_queue_sort_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_sort_unlocked(GAsyncQueue *queue, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static void g_async_queue_sort_unlocked(MemorySegment queue, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_async_queue_sort_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_sort_unlocked", queue, func, user_data);
            }
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_async_queue_remove(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static FunctionDescriptor g_async_queue_remove$descriptor() {
        return g_async_queue_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_async_queue_remove(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static MethodHandle g_async_queue_remove$handle() {
        return g_async_queue_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_async_queue_remove(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static int g_async_queue_remove(MemorySegment queue, MemorySegment item) {
        var mh$ = g_async_queue_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_remove", queue, item);
            }
            return (int)mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_remove_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_remove_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_async_queue_remove_unlocked(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static FunctionDescriptor g_async_queue_remove_unlocked$descriptor() {
        return g_async_queue_remove_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_async_queue_remove_unlocked(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static MethodHandle g_async_queue_remove_unlocked$handle() {
        return g_async_queue_remove_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_async_queue_remove_unlocked(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static int g_async_queue_remove_unlocked(MemorySegment queue, MemorySegment item) {
        var mh$ = g_async_queue_remove_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_remove_unlocked", queue, item);
            }
            return (int)mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_push_front {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_push_front"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_push_front(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static FunctionDescriptor g_async_queue_push_front$descriptor() {
        return g_async_queue_push_front.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_push_front(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static MethodHandle g_async_queue_push_front$handle() {
        return g_async_queue_push_front.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_push_front(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static void g_async_queue_push_front(MemorySegment queue, MemorySegment item) {
        var mh$ = g_async_queue_push_front.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_push_front", queue, item);
            }
            mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_push_front_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_push_front_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_async_queue_push_front_unlocked(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static FunctionDescriptor g_async_queue_push_front_unlocked$descriptor() {
        return g_async_queue_push_front_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_async_queue_push_front_unlocked(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static MethodHandle g_async_queue_push_front_unlocked$handle() {
        return g_async_queue_push_front_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_async_queue_push_front_unlocked(GAsyncQueue *queue, gpointer item)
     * }
     */
    public static void g_async_queue_push_front_unlocked(MemorySegment queue, MemorySegment item) {
        var mh$ = g_async_queue_push_front_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_push_front_unlocked", queue, item);
            }
            mh$.invokeExact(queue, item);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_timed_pop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_timed_pop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timed_pop(GAsyncQueue *queue, GTimeVal *end_time)
     * }
     */
    public static FunctionDescriptor g_async_queue_timed_pop$descriptor() {
        return g_async_queue_timed_pop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timed_pop(GAsyncQueue *queue, GTimeVal *end_time)
     * }
     */
    public static MethodHandle g_async_queue_timed_pop$handle() {
        return g_async_queue_timed_pop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timed_pop(GAsyncQueue *queue, GTimeVal *end_time)
     * }
     */
    public static MemorySegment g_async_queue_timed_pop(MemorySegment queue, MemorySegment end_time) {
        var mh$ = g_async_queue_timed_pop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_timed_pop", queue, end_time);
            }
            return (MemorySegment)mh$.invokeExact(queue, end_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_async_queue_timed_pop_unlocked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_async_queue_timed_pop_unlocked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timed_pop_unlocked(GAsyncQueue *queue, GTimeVal *end_time)
     * }
     */
    public static FunctionDescriptor g_async_queue_timed_pop_unlocked$descriptor() {
        return g_async_queue_timed_pop_unlocked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timed_pop_unlocked(GAsyncQueue *queue, GTimeVal *end_time)
     * }
     */
    public static MethodHandle g_async_queue_timed_pop_unlocked$handle() {
        return g_async_queue_timed_pop_unlocked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_async_queue_timed_pop_unlocked(GAsyncQueue *queue, GTimeVal *end_time)
     * }
     */
    public static MemorySegment g_async_queue_timed_pop_unlocked(MemorySegment queue, MemorySegment end_time) {
        var mh$ = g_async_queue_timed_pop_unlocked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_async_queue_timed_pop_unlocked", queue, end_time);
            }
            return (MemorySegment)mh$.invokeExact(queue, end_time);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __sig_atomic_t sig_atomic_t
     * }
     */
    public static final OfInt sig_atomic_t = app_indicator_h.C_INT;
    private static final int SI_ASYNCNL = (int)-60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_ASYNCNL = -60
     * }
     */
    public static int SI_ASYNCNL() {
        return SI_ASYNCNL;
    }
    private static final int SI_DETHREAD = (int)-7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_DETHREAD = -7
     * }
     */
    public static int SI_DETHREAD() {
        return SI_DETHREAD;
    }
    private static final int SI_TKILL = (int)-6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_TKILL = -6
     * }
     */
    public static int SI_TKILL() {
        return SI_TKILL;
    }
    private static final int SI_SIGIO = (int)-5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_SIGIO = -5
     * }
     */
    public static int SI_SIGIO() {
        return SI_SIGIO;
    }
    private static final int SI_ASYNCIO = (int)-4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_ASYNCIO = -4
     * }
     */
    public static int SI_ASYNCIO() {
        return SI_ASYNCIO;
    }
    private static final int SI_MESGQ = (int)-3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_MESGQ = -3
     * }
     */
    public static int SI_MESGQ() {
        return SI_MESGQ;
    }
    private static final int SI_TIMER = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_TIMER = -2
     * }
     */
    public static int SI_TIMER() {
        return SI_TIMER;
    }
    private static final int SI_QUEUE = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_QUEUE = -1
     * }
     */
    public static int SI_QUEUE() {
        return SI_QUEUE;
    }
    private static final int SI_USER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_USER = 0
     * }
     */
    public static int SI_USER() {
        return SI_USER;
    }
    private static final int SI_KERNEL = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SI_KERNEL = 128
     * }
     */
    public static int SI_KERNEL() {
        return SI_KERNEL;
    }
    private static final int ILL_ILLOPC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_ILLOPC = 1
     * }
     */
    public static int ILL_ILLOPC() {
        return ILL_ILLOPC;
    }
    private static final int ILL_ILLOPN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_ILLOPN = 2
     * }
     */
    public static int ILL_ILLOPN() {
        return ILL_ILLOPN;
    }
    private static final int ILL_ILLADR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_ILLADR = 3
     * }
     */
    public static int ILL_ILLADR() {
        return ILL_ILLADR;
    }
    private static final int ILL_ILLTRP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_ILLTRP = 4
     * }
     */
    public static int ILL_ILLTRP() {
        return ILL_ILLTRP;
    }
    private static final int ILL_PRVOPC = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_PRVOPC = 5
     * }
     */
    public static int ILL_PRVOPC() {
        return ILL_PRVOPC;
    }
    private static final int ILL_PRVREG = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_PRVREG = 6
     * }
     */
    public static int ILL_PRVREG() {
        return ILL_PRVREG;
    }
    private static final int ILL_COPROC = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_COPROC = 7
     * }
     */
    public static int ILL_COPROC() {
        return ILL_COPROC;
    }
    private static final int ILL_BADSTK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_BADSTK = 8
     * }
     */
    public static int ILL_BADSTK() {
        return ILL_BADSTK;
    }
    private static final int ILL_BADIADDR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ILL_BADIADDR = 9
     * }
     */
    public static int ILL_BADIADDR() {
        return ILL_BADIADDR;
    }
    private static final int FPE_INTDIV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_INTDIV = 1
     * }
     */
    public static int FPE_INTDIV() {
        return FPE_INTDIV;
    }
    private static final int FPE_INTOVF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_INTOVF = 2
     * }
     */
    public static int FPE_INTOVF() {
        return FPE_INTOVF;
    }
    private static final int FPE_FLTDIV = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_FLTDIV = 3
     * }
     */
    public static int FPE_FLTDIV() {
        return FPE_FLTDIV;
    }
    private static final int FPE_FLTOVF = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_FLTOVF = 4
     * }
     */
    public static int FPE_FLTOVF() {
        return FPE_FLTOVF;
    }
    private static final int FPE_FLTUND = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_FLTUND = 5
     * }
     */
    public static int FPE_FLTUND() {
        return FPE_FLTUND;
    }
    private static final int FPE_FLTRES = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_FLTRES = 6
     * }
     */
    public static int FPE_FLTRES() {
        return FPE_FLTRES;
    }
    private static final int FPE_FLTINV = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_FLTINV = 7
     * }
     */
    public static int FPE_FLTINV() {
        return FPE_FLTINV;
    }
    private static final int FPE_FLTSUB = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_FLTSUB = 8
     * }
     */
    public static int FPE_FLTSUB() {
        return FPE_FLTSUB;
    }
    private static final int FPE_FLTUNK = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_FLTUNK = 14
     * }
     */
    public static int FPE_FLTUNK() {
        return FPE_FLTUNK;
    }
    private static final int FPE_CONDTRAP = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.FPE_CONDTRAP = 15
     * }
     */
    public static int FPE_CONDTRAP() {
        return FPE_CONDTRAP;
    }
    private static final int SEGV_MAPERR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SEGV_MAPERR = 1
     * }
     */
    public static int SEGV_MAPERR() {
        return SEGV_MAPERR;
    }
    private static final int SEGV_ACCERR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SEGV_ACCERR = 2
     * }
     */
    public static int SEGV_ACCERR() {
        return SEGV_ACCERR;
    }
    private static final int SEGV_BNDERR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SEGV_BNDERR = 3
     * }
     */
    public static int SEGV_BNDERR() {
        return SEGV_BNDERR;
    }
    private static final int SEGV_PKUERR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SEGV_PKUERR = 4
     * }
     */
    public static int SEGV_PKUERR() {
        return SEGV_PKUERR;
    }
    private static final int SEGV_ACCADI = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SEGV_ACCADI = 5
     * }
     */
    public static int SEGV_ACCADI() {
        return SEGV_ACCADI;
    }
    private static final int SEGV_ADIDERR = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SEGV_ADIDERR = 6
     * }
     */
    public static int SEGV_ADIDERR() {
        return SEGV_ADIDERR;
    }
    private static final int SEGV_ADIPERR = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SEGV_ADIPERR = 7
     * }
     */
    public static int SEGV_ADIPERR() {
        return SEGV_ADIPERR;
    }
    private static final int SEGV_MTEAERR = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SEGV_MTEAERR = 8
     * }
     */
    public static int SEGV_MTEAERR() {
        return SEGV_MTEAERR;
    }
    private static final int SEGV_MTESERR = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SEGV_MTESERR = 9
     * }
     */
    public static int SEGV_MTESERR() {
        return SEGV_MTESERR;
    }
    private static final int BUS_ADRALN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BUS_ADRALN = 1
     * }
     */
    public static int BUS_ADRALN() {
        return BUS_ADRALN;
    }
    private static final int BUS_ADRERR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BUS_ADRERR = 2
     * }
     */
    public static int BUS_ADRERR() {
        return BUS_ADRERR;
    }
    private static final int BUS_OBJERR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BUS_OBJERR = 3
     * }
     */
    public static int BUS_OBJERR() {
        return BUS_OBJERR;
    }
    private static final int BUS_MCEERR_AR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BUS_MCEERR_AR = 4
     * }
     */
    public static int BUS_MCEERR_AR() {
        return BUS_MCEERR_AR;
    }
    private static final int BUS_MCEERR_AO = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.BUS_MCEERR_AO = 5
     * }
     */
    public static int BUS_MCEERR_AO() {
        return BUS_MCEERR_AO;
    }
    private static final int CLD_EXITED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLD_EXITED = 1
     * }
     */
    public static int CLD_EXITED() {
        return CLD_EXITED;
    }
    private static final int CLD_KILLED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLD_KILLED = 2
     * }
     */
    public static int CLD_KILLED() {
        return CLD_KILLED;
    }
    private static final int CLD_DUMPED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLD_DUMPED = 3
     * }
     */
    public static int CLD_DUMPED() {
        return CLD_DUMPED;
    }
    private static final int CLD_TRAPPED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLD_TRAPPED = 4
     * }
     */
    public static int CLD_TRAPPED() {
        return CLD_TRAPPED;
    }
    private static final int CLD_STOPPED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLD_STOPPED = 5
     * }
     */
    public static int CLD_STOPPED() {
        return CLD_STOPPED;
    }
    private static final int CLD_CONTINUED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CLD_CONTINUED = 6
     * }
     */
    public static int CLD_CONTINUED() {
        return CLD_CONTINUED;
    }
    private static final int POLL_IN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.POLL_IN = 1
     * }
     */
    public static int POLL_IN() {
        return POLL_IN;
    }
    private static final int POLL_OUT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.POLL_OUT = 2
     * }
     */
    public static int POLL_OUT() {
        return POLL_OUT;
    }
    private static final int POLL_MSG = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.POLL_MSG = 3
     * }
     */
    public static int POLL_MSG() {
        return POLL_MSG;
    }
    private static final int POLL_ERR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.POLL_ERR = 4
     * }
     */
    public static int POLL_ERR() {
        return POLL_ERR;
    }
    private static final int POLL_PRI = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.POLL_PRI = 5
     * }
     */
    public static int POLL_PRI() {
        return POLL_PRI;
    }
    private static final int POLL_HUP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.POLL_HUP = 6
     * }
     */
    public static int POLL_HUP() {
        return POLL_HUP;
    }
    private static final int SIGEV_SIGNAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SIGEV_SIGNAL = 0
     * }
     */
    public static int SIGEV_SIGNAL() {
        return SIGEV_SIGNAL;
    }
    private static final int SIGEV_NONE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SIGEV_NONE = 1
     * }
     */
    public static int SIGEV_NONE() {
        return SIGEV_NONE;
    }
    private static final int SIGEV_THREAD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SIGEV_THREAD = 2
     * }
     */
    public static int SIGEV_THREAD() {
        return SIGEV_THREAD;
    }
    private static final int SIGEV_THREAD_ID = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SIGEV_THREAD_ID = 4
     * }
     */
    public static int SIGEV_THREAD_ID() {
        return SIGEV_THREAD_ID;
    }

    private static class __sysv_signal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__sysv_signal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __sighandler_t __sysv_signal(int __sig, __sighandler_t __handler)
     * }
     */
    public static FunctionDescriptor __sysv_signal$descriptor() {
        return __sysv_signal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __sighandler_t __sysv_signal(int __sig, __sighandler_t __handler)
     * }
     */
    public static MethodHandle __sysv_signal$handle() {
        return __sysv_signal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __sighandler_t __sysv_signal(int __sig, __sighandler_t __handler)
     * }
     */
    public static MemorySegment __sysv_signal(int __sig, MemorySegment __handler) {
        var mh$ = __sysv_signal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sysv_signal", __sig, __handler);
            }
            return (MemorySegment)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class signal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("signal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __sighandler_t signal(int __sig, __sighandler_t __handler)
     * }
     */
    public static FunctionDescriptor signal$descriptor() {
        return signal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __sighandler_t signal(int __sig, __sighandler_t __handler)
     * }
     */
    public static MethodHandle signal$handle() {
        return signal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __sighandler_t signal(int __sig, __sighandler_t __handler)
     * }
     */
    public static MemorySegment signal(int __sig, MemorySegment __handler) {
        var mh$ = signal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("signal", __sig, __handler);
            }
            return (MemorySegment)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class kill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("kill"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int kill(__pid_t __pid, int __sig)
     * }
     */
    public static FunctionDescriptor kill$descriptor() {
        return kill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int kill(__pid_t __pid, int __sig)
     * }
     */
    public static MethodHandle kill$handle() {
        return kill.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int kill(__pid_t __pid, int __sig)
     * }
     */
    public static int kill(int __pid, int __sig) {
        var mh$ = kill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("kill", __pid, __sig);
            }
            return (int)mh$.invokeExact(__pid, __sig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class killpg {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("killpg"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int killpg(__pid_t __pgrp, int __sig)
     * }
     */
    public static FunctionDescriptor killpg$descriptor() {
        return killpg.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int killpg(__pid_t __pgrp, int __sig)
     * }
     */
    public static MethodHandle killpg$handle() {
        return killpg.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int killpg(__pid_t __pgrp, int __sig)
     * }
     */
    public static int killpg(int __pgrp, int __sig) {
        var mh$ = killpg.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("killpg", __pgrp, __sig);
            }
            return (int)mh$.invokeExact(__pgrp, __sig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class raise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("raise"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int raise(int __sig)
     * }
     */
    public static FunctionDescriptor raise$descriptor() {
        return raise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int raise(int __sig)
     * }
     */
    public static MethodHandle raise$handle() {
        return raise.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int raise(int __sig)
     * }
     */
    public static int raise(int __sig) {
        var mh$ = raise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("raise", __sig);
            }
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class ssignal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("ssignal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __sighandler_t ssignal(int __sig, __sighandler_t __handler)
     * }
     */
    public static FunctionDescriptor ssignal$descriptor() {
        return ssignal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __sighandler_t ssignal(int __sig, __sighandler_t __handler)
     * }
     */
    public static MethodHandle ssignal$handle() {
        return ssignal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __sighandler_t ssignal(int __sig, __sighandler_t __handler)
     * }
     */
    public static MemorySegment ssignal(int __sig, MemorySegment __handler) {
        var mh$ = ssignal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("ssignal", __sig, __handler);
            }
            return (MemorySegment)mh$.invokeExact(__sig, __handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gsignal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gsignal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gsignal(int __sig)
     * }
     */
    public static FunctionDescriptor gsignal$descriptor() {
        return gsignal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gsignal(int __sig)
     * }
     */
    public static MethodHandle gsignal$handle() {
        return gsignal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gsignal(int __sig)
     * }
     */
    public static int gsignal(int __sig) {
        var mh$ = gsignal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gsignal", __sig);
            }
            return (int)mh$.invokeExact(__sig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class psignal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("psignal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void psignal(int __sig, const char *__s)
     * }
     */
    public static FunctionDescriptor psignal$descriptor() {
        return psignal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void psignal(int __sig, const char *__s)
     * }
     */
    public static MethodHandle psignal$handle() {
        return psignal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void psignal(int __sig, const char *__s)
     * }
     */
    public static void psignal(int __sig, MemorySegment __s) {
        var mh$ = psignal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("psignal", __sig, __s);
            }
            mh$.invokeExact(__sig, __s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class psiginfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("psiginfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void psiginfo(const siginfo_t *__pinfo, const char *__s)
     * }
     */
    public static FunctionDescriptor psiginfo$descriptor() {
        return psiginfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void psiginfo(const siginfo_t *__pinfo, const char *__s)
     * }
     */
    public static MethodHandle psiginfo$handle() {
        return psiginfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void psiginfo(const siginfo_t *__pinfo, const char *__s)
     * }
     */
    public static void psiginfo(MemorySegment __pinfo, MemorySegment __s) {
        var mh$ = psiginfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("psiginfo", __pinfo, __s);
            }
            mh$.invokeExact(__pinfo, __s);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigblock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigblock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigblock(int __mask)
     * }
     */
    public static FunctionDescriptor sigblock$descriptor() {
        return sigblock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigblock(int __mask)
     * }
     */
    public static MethodHandle sigblock$handle() {
        return sigblock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigblock(int __mask)
     * }
     */
    public static int sigblock(int __mask) {
        var mh$ = sigblock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigblock", __mask);
            }
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigsetmask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigsetmask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigsetmask(int __mask)
     * }
     */
    public static FunctionDescriptor sigsetmask$descriptor() {
        return sigsetmask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigsetmask(int __mask)
     * }
     */
    public static MethodHandle sigsetmask$handle() {
        return sigsetmask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigsetmask(int __mask)
     * }
     */
    public static int sigsetmask(int __mask) {
        var mh$ = sigsetmask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigsetmask", __mask);
            }
            return (int)mh$.invokeExact(__mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class siggetmask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("siggetmask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int siggetmask()
     * }
     */
    public static FunctionDescriptor siggetmask$descriptor() {
        return siggetmask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int siggetmask()
     * }
     */
    public static MethodHandle siggetmask$handle() {
        return siggetmask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int siggetmask()
     * }
     */
    public static int siggetmask() {
        var mh$ = siggetmask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("siggetmask");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigemptyset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigemptyset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigemptyset(sigset_t *__set)
     * }
     */
    public static FunctionDescriptor sigemptyset$descriptor() {
        return sigemptyset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigemptyset(sigset_t *__set)
     * }
     */
    public static MethodHandle sigemptyset$handle() {
        return sigemptyset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigemptyset(sigset_t *__set)
     * }
     */
    public static int sigemptyset(MemorySegment __set) {
        var mh$ = sigemptyset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigemptyset", __set);
            }
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigfillset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigfillset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigfillset(sigset_t *__set)
     * }
     */
    public static FunctionDescriptor sigfillset$descriptor() {
        return sigfillset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigfillset(sigset_t *__set)
     * }
     */
    public static MethodHandle sigfillset$handle() {
        return sigfillset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigfillset(sigset_t *__set)
     * }
     */
    public static int sigfillset(MemorySegment __set) {
        var mh$ = sigfillset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigfillset", __set);
            }
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigaddset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigaddset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigaddset(sigset_t *__set, int __signo)
     * }
     */
    public static FunctionDescriptor sigaddset$descriptor() {
        return sigaddset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigaddset(sigset_t *__set, int __signo)
     * }
     */
    public static MethodHandle sigaddset$handle() {
        return sigaddset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigaddset(sigset_t *__set, int __signo)
     * }
     */
    public static int sigaddset(MemorySegment __set, int __signo) {
        var mh$ = sigaddset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigaddset", __set, __signo);
            }
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigdelset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigdelset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigdelset(sigset_t *__set, int __signo)
     * }
     */
    public static FunctionDescriptor sigdelset$descriptor() {
        return sigdelset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigdelset(sigset_t *__set, int __signo)
     * }
     */
    public static MethodHandle sigdelset$handle() {
        return sigdelset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigdelset(sigset_t *__set, int __signo)
     * }
     */
    public static int sigdelset(MemorySegment __set, int __signo) {
        var mh$ = sigdelset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigdelset", __set, __signo);
            }
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigismember {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigismember"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigismember(const sigset_t *__set, int __signo)
     * }
     */
    public static FunctionDescriptor sigismember$descriptor() {
        return sigismember.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigismember(const sigset_t *__set, int __signo)
     * }
     */
    public static MethodHandle sigismember$handle() {
        return sigismember.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigismember(const sigset_t *__set, int __signo)
     * }
     */
    public static int sigismember(MemorySegment __set, int __signo) {
        var mh$ = sigismember.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigismember", __set, __signo);
            }
            return (int)mh$.invokeExact(__set, __signo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigprocmask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigprocmask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigprocmask(int __how, const sigset_t *restrict __set, sigset_t *restrict __oset)
     * }
     */
    public static FunctionDescriptor sigprocmask$descriptor() {
        return sigprocmask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigprocmask(int __how, const sigset_t *restrict __set, sigset_t *restrict __oset)
     * }
     */
    public static MethodHandle sigprocmask$handle() {
        return sigprocmask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigprocmask(int __how, const sigset_t *restrict __set, sigset_t *restrict __oset)
     * }
     */
    public static int sigprocmask(int __how, MemorySegment __set, MemorySegment __oset) {
        var mh$ = sigprocmask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigprocmask", __how, __set, __oset);
            }
            return (int)mh$.invokeExact(__how, __set, __oset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigsuspend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigsuspend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigsuspend(const sigset_t *__set)
     * }
     */
    public static FunctionDescriptor sigsuspend$descriptor() {
        return sigsuspend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigsuspend(const sigset_t *__set)
     * }
     */
    public static MethodHandle sigsuspend$handle() {
        return sigsuspend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigsuspend(const sigset_t *__set)
     * }
     */
    public static int sigsuspend(MemorySegment __set) {
        var mh$ = sigsuspend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigsuspend", __set);
            }
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigaction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigaction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigaction(int __sig, const struct sigaction *restrict __act, struct sigaction *restrict __oact)
     * }
     */
    public static FunctionDescriptor sigaction$descriptor() {
        return sigaction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigaction(int __sig, const struct sigaction *restrict __act, struct sigaction *restrict __oact)
     * }
     */
    public static MethodHandle sigaction$handle() {
        return sigaction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigaction(int __sig, const struct sigaction *restrict __act, struct sigaction *restrict __oact)
     * }
     */
    public static int sigaction(int __sig, MemorySegment __act, MemorySegment __oact) {
        var mh$ = sigaction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigaction", __sig, __act, __oact);
            }
            return (int)mh$.invokeExact(__sig, __act, __oact);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigpending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigpending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigpending(sigset_t *__set)
     * }
     */
    public static FunctionDescriptor sigpending$descriptor() {
        return sigpending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigpending(sigset_t *__set)
     * }
     */
    public static MethodHandle sigpending$handle() {
        return sigpending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigpending(sigset_t *__set)
     * }
     */
    public static int sigpending(MemorySegment __set) {
        var mh$ = sigpending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigpending", __set);
            }
            return (int)mh$.invokeExact(__set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigwait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigwait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigwait(const sigset_t *restrict __set, int *restrict __sig)
     * }
     */
    public static FunctionDescriptor sigwait$descriptor() {
        return sigwait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigwait(const sigset_t *restrict __set, int *restrict __sig)
     * }
     */
    public static MethodHandle sigwait$handle() {
        return sigwait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigwait(const sigset_t *restrict __set, int *restrict __sig)
     * }
     */
    public static int sigwait(MemorySegment __set, MemorySegment __sig) {
        var mh$ = sigwait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigwait", __set, __sig);
            }
            return (int)mh$.invokeExact(__set, __sig);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigwaitinfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigwaitinfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigwaitinfo(const sigset_t *restrict __set, siginfo_t *restrict __info)
     * }
     */
    public static FunctionDescriptor sigwaitinfo$descriptor() {
        return sigwaitinfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigwaitinfo(const sigset_t *restrict __set, siginfo_t *restrict __info)
     * }
     */
    public static MethodHandle sigwaitinfo$handle() {
        return sigwaitinfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigwaitinfo(const sigset_t *restrict __set, siginfo_t *restrict __info)
     * }
     */
    public static int sigwaitinfo(MemorySegment __set, MemorySegment __info) {
        var mh$ = sigwaitinfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigwaitinfo", __set, __info);
            }
            return (int)mh$.invokeExact(__set, __info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigtimedwait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigtimedwait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigtimedwait(const sigset_t *restrict __set, siginfo_t *restrict __info, const struct timespec *restrict __timeout)
     * }
     */
    public static FunctionDescriptor sigtimedwait$descriptor() {
        return sigtimedwait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigtimedwait(const sigset_t *restrict __set, siginfo_t *restrict __info, const struct timespec *restrict __timeout)
     * }
     */
    public static MethodHandle sigtimedwait$handle() {
        return sigtimedwait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigtimedwait(const sigset_t *restrict __set, siginfo_t *restrict __info, const struct timespec *restrict __timeout)
     * }
     */
    public static int sigtimedwait(MemorySegment __set, MemorySegment __info, MemorySegment __timeout) {
        var mh$ = sigtimedwait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigtimedwait", __set, __info, __timeout);
            }
            return (int)mh$.invokeExact(__set, __info, __timeout);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigqueue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            sigval.layout()
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigqueue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigqueue(__pid_t __pid, int __sig, const union sigval __val)
     * }
     */
    public static FunctionDescriptor sigqueue$descriptor() {
        return sigqueue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigqueue(__pid_t __pid, int __sig, const union sigval __val)
     * }
     */
    public static MethodHandle sigqueue$handle() {
        return sigqueue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigqueue(__pid_t __pid, int __sig, const union sigval __val)
     * }
     */
    public static int sigqueue(int __pid, int __sig, MemorySegment __val) {
        var mh$ = sigqueue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigqueue", __pid, __sig, __val);
            }
            return (int)mh$.invokeExact(__pid, __sig, __val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef signed char __s8
     * }
     */
    public static final OfByte __s8 = app_indicator_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef unsigned char __u8
     * }
     */
    public static final OfByte __u8 = app_indicator_h.C_CHAR;
    /**
     * {@snippet lang=c :
     * typedef short __s16
     * }
     */
    public static final OfShort __s16 = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __u16
     * }
     */
    public static final OfShort __u16 = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef int __s32
     * }
     */
    public static final OfInt __s32 = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __u32
     * }
     */
    public static final OfInt __u32 = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef long long __s64
     * }
     */
    public static final OfLong __s64 = app_indicator_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long long __u64
     * }
     */
    public static final OfLong __u64 = app_indicator_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_key_t
     * }
     */
    public static final OfInt __kernel_key_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_mqd_t
     * }
     */
    public static final OfInt __kernel_mqd_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_old_uid_t
     * }
     */
    public static final OfShort __kernel_old_uid_t = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_old_gid_t
     * }
     */
    public static final OfShort __kernel_old_gid_t = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef long __kernel_long_t
     * }
     */
    public static final OfLong __kernel_long_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned long __kernel_ulong_t
     * }
     */
    public static final OfLong __kernel_ulong_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_ulong_t __kernel_ino_t
     * }
     */
    public static final OfLong __kernel_ino_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_mode_t
     * }
     */
    public static final OfInt __kernel_mode_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_pid_t
     * }
     */
    public static final OfInt __kernel_pid_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_ipc_pid_t
     * }
     */
    public static final OfInt __kernel_ipc_pid_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_uid_t
     * }
     */
    public static final OfInt __kernel_uid_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_gid_t
     * }
     */
    public static final OfInt __kernel_gid_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_suseconds_t
     * }
     */
    public static final OfLong __kernel_suseconds_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_daddr_t
     * }
     */
    public static final OfInt __kernel_daddr_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_uid32_t
     * }
     */
    public static final OfInt __kernel_uid32_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_gid32_t
     * }
     */
    public static final OfInt __kernel_gid32_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __kernel_old_dev_t
     * }
     */
    public static final OfInt __kernel_old_dev_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __kernel_ulong_t __kernel_size_t
     * }
     */
    public static final OfLong __kernel_size_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_ssize_t
     * }
     */
    public static final OfLong __kernel_ssize_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_ptrdiff_t
     * }
     */
    public static final OfLong __kernel_ptrdiff_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_off_t
     * }
     */
    public static final OfLong __kernel_off_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long __kernel_loff_t
     * }
     */
    public static final OfLong __kernel_loff_t = app_indicator_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_old_time_t
     * }
     */
    public static final OfLong __kernel_old_time_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_time_t
     * }
     */
    public static final OfLong __kernel_time_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef long long __kernel_time64_t
     * }
     */
    public static final OfLong __kernel_time64_t = app_indicator_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __kernel_long_t __kernel_clock_t
     * }
     */
    public static final OfLong __kernel_clock_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_timer_t
     * }
     */
    public static final OfInt __kernel_timer_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef int __kernel_clockid_t
     * }
     */
    public static final OfInt __kernel_clockid_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef char *__kernel_caddr_t
     * }
     */
    public static final AddressLayout __kernel_caddr_t = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_uid16_t
     * }
     */
    public static final OfShort __kernel_uid16_t = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef unsigned short __kernel_gid16_t
     * }
     */
    public static final OfShort __kernel_gid16_t = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u16 __le16
     * }
     */
    public static final OfShort __le16 = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u16 __be16
     * }
     */
    public static final OfShort __be16 = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u32 __le32
     * }
     */
    public static final OfInt __le32 = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u32 __be32
     * }
     */
    public static final OfInt __be32 = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef __u64 __le64
     * }
     */
    public static final OfLong __le64 = app_indicator_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u64 __be64
     * }
     */
    public static final OfLong __be64 = app_indicator_h.C_LONG_LONG;
    /**
     * {@snippet lang=c :
     * typedef __u16 __sum16
     * }
     */
    public static final OfShort __sum16 = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef __u32 __wsum
     * }
     */
    public static final OfInt __wsum = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __poll_t
     * }
     */
    public static final OfInt __poll_t = app_indicator_h.C_INT;

    private static class sigreturn {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigreturn"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigreturn(struct sigcontext *__scp)
     * }
     */
    public static FunctionDescriptor sigreturn$descriptor() {
        return sigreturn.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigreturn(struct sigcontext *__scp)
     * }
     */
    public static MethodHandle sigreturn$handle() {
        return sigreturn.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigreturn(struct sigcontext *__scp)
     * }
     */
    public static int sigreturn(MemorySegment __scp) {
        var mh$ = sigreturn.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigreturn", __scp);
            }
            return (int)mh$.invokeExact(__scp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gettimeofday {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gettimeofday"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gettimeofday(struct timeval *restrict __tv, void *restrict __tz)
     * }
     */
    public static FunctionDescriptor gettimeofday$descriptor() {
        return gettimeofday.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gettimeofday(struct timeval *restrict __tv, void *restrict __tz)
     * }
     */
    public static MethodHandle gettimeofday$handle() {
        return gettimeofday.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gettimeofday(struct timeval *restrict __tv, void *restrict __tz)
     * }
     */
    public static int gettimeofday(MemorySegment __tv, MemorySegment __tz) {
        var mh$ = gettimeofday.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gettimeofday", __tv, __tz);
            }
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class settimeofday {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("settimeofday"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int settimeofday(const struct timeval *__tv, const struct timezone *__tz)
     * }
     */
    public static FunctionDescriptor settimeofday$descriptor() {
        return settimeofday.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int settimeofday(const struct timeval *__tv, const struct timezone *__tz)
     * }
     */
    public static MethodHandle settimeofday$handle() {
        return settimeofday.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int settimeofday(const struct timeval *__tv, const struct timezone *__tz)
     * }
     */
    public static int settimeofday(MemorySegment __tv, MemorySegment __tz) {
        var mh$ = settimeofday.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("settimeofday", __tv, __tz);
            }
            return (int)mh$.invokeExact(__tv, __tz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class adjtime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("adjtime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int adjtime(const struct timeval *__delta, struct timeval *__olddelta)
     * }
     */
    public static FunctionDescriptor adjtime$descriptor() {
        return adjtime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int adjtime(const struct timeval *__delta, struct timeval *__olddelta)
     * }
     */
    public static MethodHandle adjtime$handle() {
        return adjtime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int adjtime(const struct timeval *__delta, struct timeval *__olddelta)
     * }
     */
    public static int adjtime(MemorySegment __delta, MemorySegment __olddelta) {
        var mh$ = adjtime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("adjtime", __delta, __olddelta);
            }
            return (int)mh$.invokeExact(__delta, __olddelta);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ITIMER_REAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum __itimer_which.ITIMER_REAL = 0
     * }
     */
    public static int ITIMER_REAL() {
        return ITIMER_REAL;
    }
    private static final int ITIMER_VIRTUAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum __itimer_which.ITIMER_VIRTUAL = 1
     * }
     */
    public static int ITIMER_VIRTUAL() {
        return ITIMER_VIRTUAL;
    }
    private static final int ITIMER_PROF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum __itimer_which.ITIMER_PROF = 2
     * }
     */
    public static int ITIMER_PROF() {
        return ITIMER_PROF;
    }
    /**
     * {@snippet lang=c :
     * typedef int __itimer_which_t
     * }
     */
    public static final OfInt __itimer_which_t = app_indicator_h.C_INT;

    private static class getitimer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getitimer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int getitimer(__itimer_which_t __which, struct itimerval *__value)
     * }
     */
    public static FunctionDescriptor getitimer$descriptor() {
        return getitimer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int getitimer(__itimer_which_t __which, struct itimerval *__value)
     * }
     */
    public static MethodHandle getitimer$handle() {
        return getitimer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int getitimer(__itimer_which_t __which, struct itimerval *__value)
     * }
     */
    public static int getitimer(int __which, MemorySegment __value) {
        var mh$ = getitimer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getitimer", __which, __value);
            }
            return (int)mh$.invokeExact(__which, __value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class setitimer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("setitimer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int setitimer(__itimer_which_t __which, const struct itimerval *restrict __new, struct itimerval *restrict __old)
     * }
     */
    public static FunctionDescriptor setitimer$descriptor() {
        return setitimer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int setitimer(__itimer_which_t __which, const struct itimerval *restrict __new, struct itimerval *restrict __old)
     * }
     */
    public static MethodHandle setitimer$handle() {
        return setitimer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int setitimer(__itimer_which_t __which, const struct itimerval *restrict __new, struct itimerval *restrict __old)
     * }
     */
    public static int setitimer(int __which, MemorySegment __new, MemorySegment __old) {
        var mh$ = setitimer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("setitimer", __which, __new, __old);
            }
            return (int)mh$.invokeExact(__which, __new, __old);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class utimes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("utimes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int utimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static FunctionDescriptor utimes$descriptor() {
        return utimes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int utimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static MethodHandle utimes$handle() {
        return utimes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int utimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static int utimes(MemorySegment __file, MemorySegment __tvp) {
        var mh$ = utimes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("utimes", __file, __tvp);
            }
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class lutimes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("lutimes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int lutimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static FunctionDescriptor lutimes$descriptor() {
        return lutimes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int lutimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static MethodHandle lutimes$handle() {
        return lutimes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int lutimes(const char *__file, const struct timeval __tvp[2])
     * }
     */
    public static int lutimes(MemorySegment __file, MemorySegment __tvp) {
        var mh$ = lutimes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("lutimes", __file, __tvp);
            }
            return (int)mh$.invokeExact(__file, __tvp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class futimes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("futimes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int futimes(int __fd, const struct timeval __tvp[2])
     * }
     */
    public static FunctionDescriptor futimes$descriptor() {
        return futimes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int futimes(int __fd, const struct timeval __tvp[2])
     * }
     */
    public static MethodHandle futimes$handle() {
        return futimes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int futimes(int __fd, const struct timeval __tvp[2])
     * }
     */
    public static int futimes(int __fd, MemorySegment __tvp) {
        var mh$ = futimes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("futimes", __fd, __tvp);
            }
            return (int)mh$.invokeExact(__fd, __tvp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef __uint64_t elf_greg_t
     * }
     */
    public static final OfLong elf_greg_t = app_indicator_h.C_LONG;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __pr_uid_t
     * }
     */
    public static final OfInt __pr_uid_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef unsigned int __pr_gid_t
     * }
     */
    public static final OfInt __pr_gid_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef void *psaddr_t
     * }
     */
    public static final AddressLayout psaddr_t = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef __pid_t lwpid_t
     * }
     */
    public static final OfInt lwpid_t = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef elf_greg_t greg_t
     * }
     */
    public static final OfLong greg_t = app_indicator_h.C_LONG;

    private static class siginterrupt {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("siginterrupt"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int siginterrupt(int __sig, int __interrupt)
     * }
     */
    public static FunctionDescriptor siginterrupt$descriptor() {
        return siginterrupt.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int siginterrupt(int __sig, int __interrupt)
     * }
     */
    public static MethodHandle siginterrupt$handle() {
        return siginterrupt.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int siginterrupt(int __sig, int __interrupt)
     * }
     */
    public static int siginterrupt(int __sig, int __interrupt) {
        var mh$ = siginterrupt.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("siginterrupt", __sig, __interrupt);
            }
            return (int)mh$.invokeExact(__sig, __interrupt);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int SS_ONSTACK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SS_ONSTACK = 1
     * }
     */
    public static int SS_ONSTACK() {
        return SS_ONSTACK;
    }
    private static final int SS_DISABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.SS_DISABLE = 2
     * }
     */
    public static int SS_DISABLE() {
        return SS_DISABLE;
    }

    private static class sigaltstack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigaltstack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigaltstack(const stack_t *restrict __ss, stack_t *restrict __oss)
     * }
     */
    public static FunctionDescriptor sigaltstack$descriptor() {
        return sigaltstack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigaltstack(const stack_t *restrict __ss, stack_t *restrict __oss)
     * }
     */
    public static MethodHandle sigaltstack$handle() {
        return sigaltstack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigaltstack(const stack_t *restrict __ss, stack_t *restrict __oss)
     * }
     */
    public static int sigaltstack(MemorySegment __ss, MemorySegment __oss) {
        var mh$ = sigaltstack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigaltstack", __ss, __oss);
            }
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sigstack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sigstack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sigstack(struct sigstack *__ss, struct sigstack *__oss)
     * }
     */
    public static FunctionDescriptor sigstack$descriptor() {
        return sigstack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sigstack(struct sigstack *__ss, struct sigstack *__oss)
     * }
     */
    public static MethodHandle sigstack$handle() {
        return sigstack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sigstack(struct sigstack *__ss, struct sigstack *__oss)
     * }
     */
    public static int sigstack(MemorySegment __ss, MemorySegment __oss) {
        var mh$ = sigstack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sigstack", __ss, __oss);
            }
            return (int)mh$.invokeExact(__ss, __oss);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_sigmask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_sigmask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_sigmask(int __how, const __sigset_t *restrict __newmask, __sigset_t *restrict __oldmask)
     * }
     */
    public static FunctionDescriptor pthread_sigmask$descriptor() {
        return pthread_sigmask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_sigmask(int __how, const __sigset_t *restrict __newmask, __sigset_t *restrict __oldmask)
     * }
     */
    public static MethodHandle pthread_sigmask$handle() {
        return pthread_sigmask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_sigmask(int __how, const __sigset_t *restrict __newmask, __sigset_t *restrict __oldmask)
     * }
     */
    public static int pthread_sigmask(int __how, MemorySegment __newmask, MemorySegment __oldmask) {
        var mh$ = pthread_sigmask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_sigmask", __how, __newmask, __oldmask);
            }
            return (int)mh$.invokeExact(__how, __newmask, __oldmask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_kill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_kill"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_kill(pthread_t __threadid, int __signo)
     * }
     */
    public static FunctionDescriptor pthread_kill$descriptor() {
        return pthread_kill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_kill(pthread_t __threadid, int __signo)
     * }
     */
    public static MethodHandle pthread_kill$handle() {
        return pthread_kill.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_kill(pthread_t __threadid, int __signo)
     * }
     */
    public static int pthread_kill(long __threadid, int __signo) {
        var mh$ = pthread_kill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_kill", __threadid, __signo);
            }
            return (int)mh$.invokeExact(__threadid, __signo);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __libc_current_sigrtmin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__libc_current_sigrtmin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __libc_current_sigrtmin()
     * }
     */
    public static FunctionDescriptor __libc_current_sigrtmin$descriptor() {
        return __libc_current_sigrtmin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __libc_current_sigrtmin()
     * }
     */
    public static MethodHandle __libc_current_sigrtmin$handle() {
        return __libc_current_sigrtmin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int __libc_current_sigrtmin()
     * }
     */
    public static int __libc_current_sigrtmin() {
        var mh$ = __libc_current_sigrtmin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__libc_current_sigrtmin");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __libc_current_sigrtmax {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__libc_current_sigrtmax"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __libc_current_sigrtmax()
     * }
     */
    public static FunctionDescriptor __libc_current_sigrtmax$descriptor() {
        return __libc_current_sigrtmax.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __libc_current_sigrtmax()
     * }
     */
    public static MethodHandle __libc_current_sigrtmax$handle() {
        return __libc_current_sigrtmax.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int __libc_current_sigrtmax()
     * }
     */
    public static int __libc_current_sigrtmax() {
        var mh$ = __libc_current_sigrtmax.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__libc_current_sigrtmax");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_on_error_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_on_error_query"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_on_error_query(const gchar *prg_name)
     * }
     */
    public static FunctionDescriptor g_on_error_query$descriptor() {
        return g_on_error_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_on_error_query(const gchar *prg_name)
     * }
     */
    public static MethodHandle g_on_error_query$handle() {
        return g_on_error_query.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_on_error_query(const gchar *prg_name)
     * }
     */
    public static void g_on_error_query(MemorySegment prg_name) {
        var mh$ = g_on_error_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_on_error_query", prg_name);
            }
            mh$.invokeExact(prg_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_on_error_stack_trace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_on_error_stack_trace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_on_error_stack_trace(const gchar *prg_name)
     * }
     */
    public static FunctionDescriptor g_on_error_stack_trace$descriptor() {
        return g_on_error_stack_trace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_on_error_stack_trace(const gchar *prg_name)
     * }
     */
    public static MethodHandle g_on_error_stack_trace$handle() {
        return g_on_error_stack_trace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_on_error_stack_trace(const gchar *prg_name)
     * }
     */
    public static void g_on_error_stack_trace(MemorySegment prg_name) {
        var mh$ = g_on_error_stack_trace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_on_error_stack_trace", prg_name);
            }
            mh$.invokeExact(prg_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_base64_encode_step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_base64_encode_step"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_base64_encode_step(const guchar *in, gsize len, gboolean break_lines, gchar *out, gint *state, gint *save)
     * }
     */
    public static FunctionDescriptor g_base64_encode_step$descriptor() {
        return g_base64_encode_step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_base64_encode_step(const guchar *in, gsize len, gboolean break_lines, gchar *out, gint *state, gint *save)
     * }
     */
    public static MethodHandle g_base64_encode_step$handle() {
        return g_base64_encode_step.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_base64_encode_step(const guchar *in, gsize len, gboolean break_lines, gchar *out, gint *state, gint *save)
     * }
     */
    public static long g_base64_encode_step(MemorySegment in, long len, int break_lines, MemorySegment out, MemorySegment state, MemorySegment save) {
        var mh$ = g_base64_encode_step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_base64_encode_step", in, len, break_lines, out, state, save);
            }
            return (long)mh$.invokeExact(in, len, break_lines, out, state, save);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_base64_encode_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_base64_encode_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_base64_encode_close(gboolean break_lines, gchar *out, gint *state, gint *save)
     * }
     */
    public static FunctionDescriptor g_base64_encode_close$descriptor() {
        return g_base64_encode_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_base64_encode_close(gboolean break_lines, gchar *out, gint *state, gint *save)
     * }
     */
    public static MethodHandle g_base64_encode_close$handle() {
        return g_base64_encode_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_base64_encode_close(gboolean break_lines, gchar *out, gint *state, gint *save)
     * }
     */
    public static long g_base64_encode_close(int break_lines, MemorySegment out, MemorySegment state, MemorySegment save) {
        var mh$ = g_base64_encode_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_base64_encode_close", break_lines, out, state, save);
            }
            return (long)mh$.invokeExact(break_lines, out, state, save);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_base64_encode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_base64_encode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_base64_encode(const guchar *data, gsize len)
     * }
     */
    public static FunctionDescriptor g_base64_encode$descriptor() {
        return g_base64_encode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_base64_encode(const guchar *data, gsize len)
     * }
     */
    public static MethodHandle g_base64_encode$handle() {
        return g_base64_encode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_base64_encode(const guchar *data, gsize len)
     * }
     */
    public static MemorySegment g_base64_encode(MemorySegment data, long len) {
        var mh$ = g_base64_encode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_base64_encode", data, len);
            }
            return (MemorySegment)mh$.invokeExact(data, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_base64_decode_step {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_base64_decode_step"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_base64_decode_step(const gchar *in, gsize len, guchar *out, gint *state, guint *save)
     * }
     */
    public static FunctionDescriptor g_base64_decode_step$descriptor() {
        return g_base64_decode_step.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_base64_decode_step(const gchar *in, gsize len, guchar *out, gint *state, guint *save)
     * }
     */
    public static MethodHandle g_base64_decode_step$handle() {
        return g_base64_decode_step.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_base64_decode_step(const gchar *in, gsize len, guchar *out, gint *state, guint *save)
     * }
     */
    public static long g_base64_decode_step(MemorySegment in, long len, MemorySegment out, MemorySegment state, MemorySegment save) {
        var mh$ = g_base64_decode_step.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_base64_decode_step", in, len, out, state, save);
            }
            return (long)mh$.invokeExact(in, len, out, state, save);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_base64_decode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_base64_decode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guchar *g_base64_decode(const gchar *text, gsize *out_len)
     * }
     */
    public static FunctionDescriptor g_base64_decode$descriptor() {
        return g_base64_decode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guchar *g_base64_decode(const gchar *text, gsize *out_len)
     * }
     */
    public static MethodHandle g_base64_decode$handle() {
        return g_base64_decode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guchar *g_base64_decode(const gchar *text, gsize *out_len)
     * }
     */
    public static MemorySegment g_base64_decode(MemorySegment text, MemorySegment out_len) {
        var mh$ = g_base64_decode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_base64_decode", text, out_len);
            }
            return (MemorySegment)mh$.invokeExact(text, out_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_base64_decode_inplace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_base64_decode_inplace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guchar *g_base64_decode_inplace(gchar *text, gsize *out_len)
     * }
     */
    public static FunctionDescriptor g_base64_decode_inplace$descriptor() {
        return g_base64_decode_inplace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guchar *g_base64_decode_inplace(gchar *text, gsize *out_len)
     * }
     */
    public static MethodHandle g_base64_decode_inplace$handle() {
        return g_base64_decode_inplace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guchar *g_base64_decode_inplace(gchar *text, gsize *out_len)
     * }
     */
    public static MemorySegment g_base64_decode_inplace(MemorySegment text, MemorySegment out_len) {
        var mh$ = g_base64_decode_inplace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_base64_decode_inplace", text, out_len);
            }
            return (MemorySegment)mh$.invokeExact(text, out_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bit_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bit_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bit_lock(volatile gint *address, gint lock_bit)
     * }
     */
    public static FunctionDescriptor g_bit_lock$descriptor() {
        return g_bit_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bit_lock(volatile gint *address, gint lock_bit)
     * }
     */
    public static MethodHandle g_bit_lock$handle() {
        return g_bit_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bit_lock(volatile gint *address, gint lock_bit)
     * }
     */
    public static void g_bit_lock(MemorySegment address, int lock_bit) {
        var mh$ = g_bit_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bit_lock", address, lock_bit);
            }
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bit_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bit_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bit_trylock(volatile gint *address, gint lock_bit)
     * }
     */
    public static FunctionDescriptor g_bit_trylock$descriptor() {
        return g_bit_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bit_trylock(volatile gint *address, gint lock_bit)
     * }
     */
    public static MethodHandle g_bit_trylock$handle() {
        return g_bit_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bit_trylock(volatile gint *address, gint lock_bit)
     * }
     */
    public static int g_bit_trylock(MemorySegment address, int lock_bit) {
        var mh$ = g_bit_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bit_trylock", address, lock_bit);
            }
            return (int)mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bit_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bit_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bit_unlock(volatile gint *address, gint lock_bit)
     * }
     */
    public static FunctionDescriptor g_bit_unlock$descriptor() {
        return g_bit_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bit_unlock(volatile gint *address, gint lock_bit)
     * }
     */
    public static MethodHandle g_bit_unlock$handle() {
        return g_bit_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bit_unlock(volatile gint *address, gint lock_bit)
     * }
     */
    public static void g_bit_unlock(MemorySegment address, int lock_bit) {
        var mh$ = g_bit_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bit_unlock", address, lock_bit);
            }
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pointer_bit_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pointer_bit_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_pointer_bit_lock(volatile void *address, gint lock_bit)
     * }
     */
    public static FunctionDescriptor g_pointer_bit_lock$descriptor() {
        return g_pointer_bit_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_pointer_bit_lock(volatile void *address, gint lock_bit)
     * }
     */
    public static MethodHandle g_pointer_bit_lock$handle() {
        return g_pointer_bit_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_pointer_bit_lock(volatile void *address, gint lock_bit)
     * }
     */
    public static void g_pointer_bit_lock(MemorySegment address, int lock_bit) {
        var mh$ = g_pointer_bit_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pointer_bit_lock", address, lock_bit);
            }
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pointer_bit_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pointer_bit_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pointer_bit_trylock(volatile void *address, gint lock_bit)
     * }
     */
    public static FunctionDescriptor g_pointer_bit_trylock$descriptor() {
        return g_pointer_bit_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pointer_bit_trylock(volatile void *address, gint lock_bit)
     * }
     */
    public static MethodHandle g_pointer_bit_trylock$handle() {
        return g_pointer_bit_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pointer_bit_trylock(volatile void *address, gint lock_bit)
     * }
     */
    public static int g_pointer_bit_trylock(MemorySegment address, int lock_bit) {
        var mh$ = g_pointer_bit_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pointer_bit_trylock", address, lock_bit);
            }
            return (int)mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pointer_bit_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pointer_bit_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_pointer_bit_unlock(volatile void *address, gint lock_bit)
     * }
     */
    public static FunctionDescriptor g_pointer_bit_unlock$descriptor() {
        return g_pointer_bit_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_pointer_bit_unlock(volatile void *address, gint lock_bit)
     * }
     */
    public static MethodHandle g_pointer_bit_unlock$handle() {
        return g_pointer_bit_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_pointer_bit_unlock(volatile void *address, gint lock_bit)
     * }
     */
    public static void g_pointer_bit_unlock(MemorySegment address, int lock_bit) {
        var mh$ = g_pointer_bit_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pointer_bit_unlock", address, lock_bit);
            }
            mh$.invokeExact(address, lock_bit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_TIME_TYPE_STANDARD = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TIME_TYPE_STANDARD = 0
     * }
     */
    public static int G_TIME_TYPE_STANDARD() {
        return G_TIME_TYPE_STANDARD;
    }
    private static final int G_TIME_TYPE_DAYLIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TIME_TYPE_DAYLIGHT = 1
     * }
     */
    public static int G_TIME_TYPE_DAYLIGHT() {
        return G_TIME_TYPE_DAYLIGHT;
    }
    private static final int G_TIME_TYPE_UNIVERSAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TIME_TYPE_UNIVERSAL = 2
     * }
     */
    public static int G_TIME_TYPE_UNIVERSAL() {
        return G_TIME_TYPE_UNIVERSAL;
    }

    private static class g_time_zone_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new(const gchar *identifier)
     * }
     */
    public static FunctionDescriptor g_time_zone_new$descriptor() {
        return g_time_zone_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new(const gchar *identifier)
     * }
     */
    public static MethodHandle g_time_zone_new$handle() {
        return g_time_zone_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new(const gchar *identifier)
     * }
     */
    public static MemorySegment g_time_zone_new(MemorySegment identifier) {
        var mh$ = g_time_zone_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_new", identifier);
            }
            return (MemorySegment)mh$.invokeExact(identifier);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_new_identifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_new_identifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_identifier(const gchar *identifier)
     * }
     */
    public static FunctionDescriptor g_time_zone_new_identifier$descriptor() {
        return g_time_zone_new_identifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_identifier(const gchar *identifier)
     * }
     */
    public static MethodHandle g_time_zone_new_identifier$handle() {
        return g_time_zone_new_identifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_identifier(const gchar *identifier)
     * }
     */
    public static MemorySegment g_time_zone_new_identifier(MemorySegment identifier) {
        var mh$ = g_time_zone_new_identifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_new_identifier", identifier);
            }
            return (MemorySegment)mh$.invokeExact(identifier);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_new_utc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_new_utc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_utc()
     * }
     */
    public static FunctionDescriptor g_time_zone_new_utc$descriptor() {
        return g_time_zone_new_utc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_utc()
     * }
     */
    public static MethodHandle g_time_zone_new_utc$handle() {
        return g_time_zone_new_utc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_utc()
     * }
     */
    public static MemorySegment g_time_zone_new_utc() {
        var mh$ = g_time_zone_new_utc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_new_utc");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_new_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_new_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_local()
     * }
     */
    public static FunctionDescriptor g_time_zone_new_local$descriptor() {
        return g_time_zone_new_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_local()
     * }
     */
    public static MethodHandle g_time_zone_new_local$handle() {
        return g_time_zone_new_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_local()
     * }
     */
    public static MemorySegment g_time_zone_new_local() {
        var mh$ = g_time_zone_new_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_new_local");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_new_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_new_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_offset(gint32 seconds)
     * }
     */
    public static FunctionDescriptor g_time_zone_new_offset$descriptor() {
        return g_time_zone_new_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_offset(gint32 seconds)
     * }
     */
    public static MethodHandle g_time_zone_new_offset$handle() {
        return g_time_zone_new_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_new_offset(gint32 seconds)
     * }
     */
    public static MemorySegment g_time_zone_new_offset(int seconds) {
        var mh$ = g_time_zone_new_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_new_offset", seconds);
            }
            return (MemorySegment)mh$.invokeExact(seconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_ref(GTimeZone *tz)
     * }
     */
    public static FunctionDescriptor g_time_zone_ref$descriptor() {
        return g_time_zone_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_ref(GTimeZone *tz)
     * }
     */
    public static MethodHandle g_time_zone_ref$handle() {
        return g_time_zone_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTimeZone *g_time_zone_ref(GTimeZone *tz)
     * }
     */
    public static MemorySegment g_time_zone_ref(MemorySegment tz) {
        var mh$ = g_time_zone_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_ref", tz);
            }
            return (MemorySegment)mh$.invokeExact(tz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_time_zone_unref(GTimeZone *tz)
     * }
     */
    public static FunctionDescriptor g_time_zone_unref$descriptor() {
        return g_time_zone_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_time_zone_unref(GTimeZone *tz)
     * }
     */
    public static MethodHandle g_time_zone_unref$handle() {
        return g_time_zone_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_time_zone_unref(GTimeZone *tz)
     * }
     */
    public static void g_time_zone_unref(MemorySegment tz) {
        var mh$ = g_time_zone_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_unref", tz);
            }
            mh$.invokeExact(tz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_find_interval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_find_interval"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_time_zone_find_interval(GTimeZone *tz, GTimeType type, gint64 time_)
     * }
     */
    public static FunctionDescriptor g_time_zone_find_interval$descriptor() {
        return g_time_zone_find_interval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_time_zone_find_interval(GTimeZone *tz, GTimeType type, gint64 time_)
     * }
     */
    public static MethodHandle g_time_zone_find_interval$handle() {
        return g_time_zone_find_interval.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_time_zone_find_interval(GTimeZone *tz, GTimeType type, gint64 time_)
     * }
     */
    public static int g_time_zone_find_interval(MemorySegment tz, int type, long time_) {
        var mh$ = g_time_zone_find_interval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_find_interval", tz, type, time_);
            }
            return (int)mh$.invokeExact(tz, type, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_adjust_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_adjust_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_time_zone_adjust_time(GTimeZone *tz, GTimeType type, gint64 *time_)
     * }
     */
    public static FunctionDescriptor g_time_zone_adjust_time$descriptor() {
        return g_time_zone_adjust_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_time_zone_adjust_time(GTimeZone *tz, GTimeType type, gint64 *time_)
     * }
     */
    public static MethodHandle g_time_zone_adjust_time$handle() {
        return g_time_zone_adjust_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_time_zone_adjust_time(GTimeZone *tz, GTimeType type, gint64 *time_)
     * }
     */
    public static int g_time_zone_adjust_time(MemorySegment tz, int type, MemorySegment time_) {
        var mh$ = g_time_zone_adjust_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_adjust_time", tz, type, time_);
            }
            return (int)mh$.invokeExact(tz, type, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_get_abbreviation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_get_abbreviation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_time_zone_get_abbreviation(GTimeZone *tz, gint interval)
     * }
     */
    public static FunctionDescriptor g_time_zone_get_abbreviation$descriptor() {
        return g_time_zone_get_abbreviation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_time_zone_get_abbreviation(GTimeZone *tz, gint interval)
     * }
     */
    public static MethodHandle g_time_zone_get_abbreviation$handle() {
        return g_time_zone_get_abbreviation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_time_zone_get_abbreviation(GTimeZone *tz, gint interval)
     * }
     */
    public static MemorySegment g_time_zone_get_abbreviation(MemorySegment tz, int interval) {
        var mh$ = g_time_zone_get_abbreviation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_get_abbreviation", tz, interval);
            }
            return (MemorySegment)mh$.invokeExact(tz, interval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_get_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_get_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint32 g_time_zone_get_offset(GTimeZone *tz, gint interval)
     * }
     */
    public static FunctionDescriptor g_time_zone_get_offset$descriptor() {
        return g_time_zone_get_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint32 g_time_zone_get_offset(GTimeZone *tz, gint interval)
     * }
     */
    public static MethodHandle g_time_zone_get_offset$handle() {
        return g_time_zone_get_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint32 g_time_zone_get_offset(GTimeZone *tz, gint interval)
     * }
     */
    public static int g_time_zone_get_offset(MemorySegment tz, int interval) {
        var mh$ = g_time_zone_get_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_get_offset", tz, interval);
            }
            return (int)mh$.invokeExact(tz, interval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_is_dst {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_is_dst"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_time_zone_is_dst(GTimeZone *tz, gint interval)
     * }
     */
    public static FunctionDescriptor g_time_zone_is_dst$descriptor() {
        return g_time_zone_is_dst.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_time_zone_is_dst(GTimeZone *tz, gint interval)
     * }
     */
    public static MethodHandle g_time_zone_is_dst$handle() {
        return g_time_zone_is_dst.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_time_zone_is_dst(GTimeZone *tz, gint interval)
     * }
     */
    public static int g_time_zone_is_dst(MemorySegment tz, int interval) {
        var mh$ = g_time_zone_is_dst.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_is_dst", tz, interval);
            }
            return (int)mh$.invokeExact(tz, interval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_get_identifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_get_identifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_time_zone_get_identifier(GTimeZone *tz)
     * }
     */
    public static FunctionDescriptor g_time_zone_get_identifier$descriptor() {
        return g_time_zone_get_identifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_time_zone_get_identifier(GTimeZone *tz)
     * }
     */
    public static MethodHandle g_time_zone_get_identifier$handle() {
        return g_time_zone_get_identifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_time_zone_get_identifier(GTimeZone *tz)
     * }
     */
    public static MemorySegment g_time_zone_get_identifier(MemorySegment tz) {
        var mh$ = g_time_zone_get_identifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_get_identifier", tz);
            }
            return (MemorySegment)mh$.invokeExact(tz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef gint64 GTimeSpan
     * }
     */
    public static final OfLong GTimeSpan = app_indicator_h.C_LONG;

    private static class g_date_time_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_time_unref(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_unref$descriptor() {
        return g_date_time_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_time_unref(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_unref$handle() {
        return g_date_time_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_time_unref(GDateTime *datetime)
     * }
     */
    public static void g_date_time_unref(MemorySegment datetime) {
        var mh$ = g_date_time_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_unref", datetime);
            }
            mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_ref(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_ref$descriptor() {
        return g_date_time_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_ref(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_ref$handle() {
        return g_date_time_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_ref(GDateTime *datetime)
     * }
     */
    public static MemorySegment g_date_time_ref(MemorySegment datetime) {
        var mh$ = g_date_time_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_ref", datetime);
            }
            return (MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new_now {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new_now"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_now(GTimeZone *tz)
     * }
     */
    public static FunctionDescriptor g_date_time_new_now$descriptor() {
        return g_date_time_new_now.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_now(GTimeZone *tz)
     * }
     */
    public static MethodHandle g_date_time_new_now$handle() {
        return g_date_time_new_now.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_now(GTimeZone *tz)
     * }
     */
    public static MemorySegment g_date_time_new_now(MemorySegment tz) {
        var mh$ = g_date_time_new_now.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new_now", tz);
            }
            return (MemorySegment)mh$.invokeExact(tz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new_now_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new_now_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_now_local()
     * }
     */
    public static FunctionDescriptor g_date_time_new_now_local$descriptor() {
        return g_date_time_new_now_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_now_local()
     * }
     */
    public static MethodHandle g_date_time_new_now_local$handle() {
        return g_date_time_new_now_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_now_local()
     * }
     */
    public static MemorySegment g_date_time_new_now_local() {
        var mh$ = g_date_time_new_now_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new_now_local");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new_now_utc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new_now_utc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_now_utc()
     * }
     */
    public static FunctionDescriptor g_date_time_new_now_utc$descriptor() {
        return g_date_time_new_now_utc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_now_utc()
     * }
     */
    public static MethodHandle g_date_time_new_now_utc$handle() {
        return g_date_time_new_now_utc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_now_utc()
     * }
     */
    public static MemorySegment g_date_time_new_now_utc() {
        var mh$ = g_date_time_new_now_utc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new_now_utc");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new_from_unix_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new_from_unix_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_unix_local(gint64 t)
     * }
     */
    public static FunctionDescriptor g_date_time_new_from_unix_local$descriptor() {
        return g_date_time_new_from_unix_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_unix_local(gint64 t)
     * }
     */
    public static MethodHandle g_date_time_new_from_unix_local$handle() {
        return g_date_time_new_from_unix_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_unix_local(gint64 t)
     * }
     */
    public static MemorySegment g_date_time_new_from_unix_local(long t) {
        var mh$ = g_date_time_new_from_unix_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new_from_unix_local", t);
            }
            return (MemorySegment)mh$.invokeExact(t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new_from_unix_utc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new_from_unix_utc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_unix_utc(gint64 t)
     * }
     */
    public static FunctionDescriptor g_date_time_new_from_unix_utc$descriptor() {
        return g_date_time_new_from_unix_utc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_unix_utc(gint64 t)
     * }
     */
    public static MethodHandle g_date_time_new_from_unix_utc$handle() {
        return g_date_time_new_from_unix_utc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_unix_utc(gint64 t)
     * }
     */
    public static MemorySegment g_date_time_new_from_unix_utc(long t) {
        var mh$ = g_date_time_new_from_unix_utc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new_from_unix_utc", t);
            }
            return (MemorySegment)mh$.invokeExact(t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new_from_timeval_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new_from_timeval_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_timeval_local(const GTimeVal *tv)
     * }
     */
    public static FunctionDescriptor g_date_time_new_from_timeval_local$descriptor() {
        return g_date_time_new_from_timeval_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_timeval_local(const GTimeVal *tv)
     * }
     */
    public static MethodHandle g_date_time_new_from_timeval_local$handle() {
        return g_date_time_new_from_timeval_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_timeval_local(const GTimeVal *tv)
     * }
     */
    public static MemorySegment g_date_time_new_from_timeval_local(MemorySegment tv) {
        var mh$ = g_date_time_new_from_timeval_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new_from_timeval_local", tv);
            }
            return (MemorySegment)mh$.invokeExact(tv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new_from_timeval_utc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new_from_timeval_utc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_timeval_utc(const GTimeVal *tv)
     * }
     */
    public static FunctionDescriptor g_date_time_new_from_timeval_utc$descriptor() {
        return g_date_time_new_from_timeval_utc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_timeval_utc(const GTimeVal *tv)
     * }
     */
    public static MethodHandle g_date_time_new_from_timeval_utc$handle() {
        return g_date_time_new_from_timeval_utc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_timeval_utc(const GTimeVal *tv)
     * }
     */
    public static MemorySegment g_date_time_new_from_timeval_utc(MemorySegment tv) {
        var mh$ = g_date_time_new_from_timeval_utc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new_from_timeval_utc", tv);
            }
            return (MemorySegment)mh$.invokeExact(tv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new_from_iso8601 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new_from_iso8601"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_iso8601(const gchar *text, GTimeZone *default_tz)
     * }
     */
    public static FunctionDescriptor g_date_time_new_from_iso8601$descriptor() {
        return g_date_time_new_from_iso8601.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_iso8601(const gchar *text, GTimeZone *default_tz)
     * }
     */
    public static MethodHandle g_date_time_new_from_iso8601$handle() {
        return g_date_time_new_from_iso8601.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_from_iso8601(const gchar *text, GTimeZone *default_tz)
     * }
     */
    public static MemorySegment g_date_time_new_from_iso8601(MemorySegment text, MemorySegment default_tz) {
        var mh$ = g_date_time_new_from_iso8601.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new_from_iso8601", text, default_tz);
            }
            return (MemorySegment)mh$.invokeExact(text, default_tz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new(GTimeZone *tz, gint year, gint month, gint day, gint hour, gint minute, gdouble seconds)
     * }
     */
    public static FunctionDescriptor g_date_time_new$descriptor() {
        return g_date_time_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new(GTimeZone *tz, gint year, gint month, gint day, gint hour, gint minute, gdouble seconds)
     * }
     */
    public static MethodHandle g_date_time_new$handle() {
        return g_date_time_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new(GTimeZone *tz, gint year, gint month, gint day, gint hour, gint minute, gdouble seconds)
     * }
     */
    public static MemorySegment g_date_time_new(MemorySegment tz, int year, int month, int day, int hour, int minute, double seconds) {
        var mh$ = g_date_time_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new", tz, year, month, day, hour, minute, seconds);
            }
            return (MemorySegment)mh$.invokeExact(tz, year, month, day, hour, minute, seconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_local(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds)
     * }
     */
    public static FunctionDescriptor g_date_time_new_local$descriptor() {
        return g_date_time_new_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_local(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds)
     * }
     */
    public static MethodHandle g_date_time_new_local$handle() {
        return g_date_time_new_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_local(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds)
     * }
     */
    public static MemorySegment g_date_time_new_local(int year, int month, int day, int hour, int minute, double seconds) {
        var mh$ = g_date_time_new_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new_local", year, month, day, hour, minute, seconds);
            }
            return (MemorySegment)mh$.invokeExact(year, month, day, hour, minute, seconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_new_utc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_new_utc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_utc(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds)
     * }
     */
    public static FunctionDescriptor g_date_time_new_utc$descriptor() {
        return g_date_time_new_utc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_utc(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds)
     * }
     */
    public static MethodHandle g_date_time_new_utc$handle() {
        return g_date_time_new_utc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_new_utc(gint year, gint month, gint day, gint hour, gint minute, gdouble seconds)
     * }
     */
    public static MemorySegment g_date_time_new_utc(int year, int month, int day, int hour, int minute, double seconds) {
        var mh$ = g_date_time_new_utc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_new_utc", year, month, day, hour, minute, seconds);
            }
            return (MemorySegment)mh$.invokeExact(year, month, day, hour, minute, seconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add(GDateTime *datetime, GTimeSpan timespan)
     * }
     */
    public static FunctionDescriptor g_date_time_add$descriptor() {
        return g_date_time_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add(GDateTime *datetime, GTimeSpan timespan)
     * }
     */
    public static MethodHandle g_date_time_add$handle() {
        return g_date_time_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add(GDateTime *datetime, GTimeSpan timespan)
     * }
     */
    public static MemorySegment g_date_time_add(MemorySegment datetime, long timespan) {
        var mh$ = g_date_time_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_add", datetime, timespan);
            }
            return (MemorySegment)mh$.invokeExact(datetime, timespan);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_add_years {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_add_years"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_years(GDateTime *datetime, gint years)
     * }
     */
    public static FunctionDescriptor g_date_time_add_years$descriptor() {
        return g_date_time_add_years.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_years(GDateTime *datetime, gint years)
     * }
     */
    public static MethodHandle g_date_time_add_years$handle() {
        return g_date_time_add_years.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_years(GDateTime *datetime, gint years)
     * }
     */
    public static MemorySegment g_date_time_add_years(MemorySegment datetime, int years) {
        var mh$ = g_date_time_add_years.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_add_years", datetime, years);
            }
            return (MemorySegment)mh$.invokeExact(datetime, years);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_add_months {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_add_months"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_months(GDateTime *datetime, gint months)
     * }
     */
    public static FunctionDescriptor g_date_time_add_months$descriptor() {
        return g_date_time_add_months.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_months(GDateTime *datetime, gint months)
     * }
     */
    public static MethodHandle g_date_time_add_months$handle() {
        return g_date_time_add_months.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_months(GDateTime *datetime, gint months)
     * }
     */
    public static MemorySegment g_date_time_add_months(MemorySegment datetime, int months) {
        var mh$ = g_date_time_add_months.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_add_months", datetime, months);
            }
            return (MemorySegment)mh$.invokeExact(datetime, months);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_add_weeks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_add_weeks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_weeks(GDateTime *datetime, gint weeks)
     * }
     */
    public static FunctionDescriptor g_date_time_add_weeks$descriptor() {
        return g_date_time_add_weeks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_weeks(GDateTime *datetime, gint weeks)
     * }
     */
    public static MethodHandle g_date_time_add_weeks$handle() {
        return g_date_time_add_weeks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_weeks(GDateTime *datetime, gint weeks)
     * }
     */
    public static MemorySegment g_date_time_add_weeks(MemorySegment datetime, int weeks) {
        var mh$ = g_date_time_add_weeks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_add_weeks", datetime, weeks);
            }
            return (MemorySegment)mh$.invokeExact(datetime, weeks);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_add_days {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_add_days"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_days(GDateTime *datetime, gint days)
     * }
     */
    public static FunctionDescriptor g_date_time_add_days$descriptor() {
        return g_date_time_add_days.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_days(GDateTime *datetime, gint days)
     * }
     */
    public static MethodHandle g_date_time_add_days$handle() {
        return g_date_time_add_days.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_days(GDateTime *datetime, gint days)
     * }
     */
    public static MemorySegment g_date_time_add_days(MemorySegment datetime, int days) {
        var mh$ = g_date_time_add_days.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_add_days", datetime, days);
            }
            return (MemorySegment)mh$.invokeExact(datetime, days);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_add_hours {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_add_hours"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_hours(GDateTime *datetime, gint hours)
     * }
     */
    public static FunctionDescriptor g_date_time_add_hours$descriptor() {
        return g_date_time_add_hours.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_hours(GDateTime *datetime, gint hours)
     * }
     */
    public static MethodHandle g_date_time_add_hours$handle() {
        return g_date_time_add_hours.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_hours(GDateTime *datetime, gint hours)
     * }
     */
    public static MemorySegment g_date_time_add_hours(MemorySegment datetime, int hours) {
        var mh$ = g_date_time_add_hours.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_add_hours", datetime, hours);
            }
            return (MemorySegment)mh$.invokeExact(datetime, hours);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_add_minutes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_add_minutes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_minutes(GDateTime *datetime, gint minutes)
     * }
     */
    public static FunctionDescriptor g_date_time_add_minutes$descriptor() {
        return g_date_time_add_minutes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_minutes(GDateTime *datetime, gint minutes)
     * }
     */
    public static MethodHandle g_date_time_add_minutes$handle() {
        return g_date_time_add_minutes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_minutes(GDateTime *datetime, gint minutes)
     * }
     */
    public static MemorySegment g_date_time_add_minutes(MemorySegment datetime, int minutes) {
        var mh$ = g_date_time_add_minutes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_add_minutes", datetime, minutes);
            }
            return (MemorySegment)mh$.invokeExact(datetime, minutes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_add_seconds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_add_seconds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_seconds(GDateTime *datetime, gdouble seconds)
     * }
     */
    public static FunctionDescriptor g_date_time_add_seconds$descriptor() {
        return g_date_time_add_seconds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_seconds(GDateTime *datetime, gdouble seconds)
     * }
     */
    public static MethodHandle g_date_time_add_seconds$handle() {
        return g_date_time_add_seconds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_seconds(GDateTime *datetime, gdouble seconds)
     * }
     */
    public static MemorySegment g_date_time_add_seconds(MemorySegment datetime, double seconds) {
        var mh$ = g_date_time_add_seconds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_add_seconds", datetime, seconds);
            }
            return (MemorySegment)mh$.invokeExact(datetime, seconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_add_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_add_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_full(GDateTime *datetime, gint years, gint months, gint days, gint hours, gint minutes, gdouble seconds)
     * }
     */
    public static FunctionDescriptor g_date_time_add_full$descriptor() {
        return g_date_time_add_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_full(GDateTime *datetime, gint years, gint months, gint days, gint hours, gint minutes, gdouble seconds)
     * }
     */
    public static MethodHandle g_date_time_add_full$handle() {
        return g_date_time_add_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_add_full(GDateTime *datetime, gint years, gint months, gint days, gint hours, gint minutes, gdouble seconds)
     * }
     */
    public static MemorySegment g_date_time_add_full(MemorySegment datetime, int years, int months, int days, int hours, int minutes, double seconds) {
        var mh$ = g_date_time_add_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_add_full", datetime, years, months, days, hours, minutes, seconds);
            }
            return (MemorySegment)mh$.invokeExact(datetime, years, months, days, hours, minutes, seconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_compare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_compare(gconstpointer dt1, gconstpointer dt2)
     * }
     */
    public static FunctionDescriptor g_date_time_compare$descriptor() {
        return g_date_time_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_compare(gconstpointer dt1, gconstpointer dt2)
     * }
     */
    public static MethodHandle g_date_time_compare$handle() {
        return g_date_time_compare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_compare(gconstpointer dt1, gconstpointer dt2)
     * }
     */
    public static int g_date_time_compare(MemorySegment dt1, MemorySegment dt2) {
        var mh$ = g_date_time_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_compare", dt1, dt2);
            }
            return (int)mh$.invokeExact(dt1, dt2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_difference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_difference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTimeSpan g_date_time_difference(GDateTime *end, GDateTime *begin)
     * }
     */
    public static FunctionDescriptor g_date_time_difference$descriptor() {
        return g_date_time_difference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTimeSpan g_date_time_difference(GDateTime *end, GDateTime *begin)
     * }
     */
    public static MethodHandle g_date_time_difference$handle() {
        return g_date_time_difference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTimeSpan g_date_time_difference(GDateTime *end, GDateTime *begin)
     * }
     */
    public static long g_date_time_difference(MemorySegment end, MemorySegment begin) {
        var mh$ = g_date_time_difference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_difference", end, begin);
            }
            return (long)mh$.invokeExact(end, begin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_date_time_hash(gconstpointer datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_hash$descriptor() {
        return g_date_time_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_date_time_hash(gconstpointer datetime)
     * }
     */
    public static MethodHandle g_date_time_hash$handle() {
        return g_date_time_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_date_time_hash(gconstpointer datetime)
     * }
     */
    public static int g_date_time_hash(MemorySegment datetime) {
        var mh$ = g_date_time_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_hash", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_time_equal(gconstpointer dt1, gconstpointer dt2)
     * }
     */
    public static FunctionDescriptor g_date_time_equal$descriptor() {
        return g_date_time_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_time_equal(gconstpointer dt1, gconstpointer dt2)
     * }
     */
    public static MethodHandle g_date_time_equal$handle() {
        return g_date_time_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_time_equal(gconstpointer dt1, gconstpointer dt2)
     * }
     */
    public static int g_date_time_equal(MemorySegment dt1, MemorySegment dt2) {
        var mh$ = g_date_time_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_equal", dt1, dt2);
            }
            return (int)mh$.invokeExact(dt1, dt2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_ymd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_ymd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_time_get_ymd(GDateTime *datetime, gint *year, gint *month, gint *day)
     * }
     */
    public static FunctionDescriptor g_date_time_get_ymd$descriptor() {
        return g_date_time_get_ymd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_time_get_ymd(GDateTime *datetime, gint *year, gint *month, gint *day)
     * }
     */
    public static MethodHandle g_date_time_get_ymd$handle() {
        return g_date_time_get_ymd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_time_get_ymd(GDateTime *datetime, gint *year, gint *month, gint *day)
     * }
     */
    public static void g_date_time_get_ymd(MemorySegment datetime, MemorySegment year, MemorySegment month, MemorySegment day) {
        var mh$ = g_date_time_get_ymd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_ymd", datetime, year, month, day);
            }
            mh$.invokeExact(datetime, year, month, day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_year(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_year$descriptor() {
        return g_date_time_get_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_year(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_year$handle() {
        return g_date_time_get_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_year(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_year(MemorySegment datetime) {
        var mh$ = g_date_time_get_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_year", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_month {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_month"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_month(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_month$descriptor() {
        return g_date_time_get_month.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_month(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_month$handle() {
        return g_date_time_get_month.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_month(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_month(MemorySegment datetime) {
        var mh$ = g_date_time_get_month.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_month", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_day_of_month {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_day_of_month"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_day_of_month(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_day_of_month$descriptor() {
        return g_date_time_get_day_of_month.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_day_of_month(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_day_of_month$handle() {
        return g_date_time_get_day_of_month.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_day_of_month(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_day_of_month(MemorySegment datetime) {
        var mh$ = g_date_time_get_day_of_month.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_day_of_month", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_week_numbering_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_week_numbering_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_week_numbering_year(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_week_numbering_year$descriptor() {
        return g_date_time_get_week_numbering_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_week_numbering_year(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_week_numbering_year$handle() {
        return g_date_time_get_week_numbering_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_week_numbering_year(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_week_numbering_year(MemorySegment datetime) {
        var mh$ = g_date_time_get_week_numbering_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_week_numbering_year", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_week_of_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_week_of_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_week_of_year(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_week_of_year$descriptor() {
        return g_date_time_get_week_of_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_week_of_year(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_week_of_year$handle() {
        return g_date_time_get_week_of_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_week_of_year(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_week_of_year(MemorySegment datetime) {
        var mh$ = g_date_time_get_week_of_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_week_of_year", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_day_of_week {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_day_of_week"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_day_of_week(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_day_of_week$descriptor() {
        return g_date_time_get_day_of_week.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_day_of_week(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_day_of_week$handle() {
        return g_date_time_get_day_of_week.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_day_of_week(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_day_of_week(MemorySegment datetime) {
        var mh$ = g_date_time_get_day_of_week.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_day_of_week", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_day_of_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_day_of_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_day_of_year(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_day_of_year$descriptor() {
        return g_date_time_get_day_of_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_day_of_year(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_day_of_year$handle() {
        return g_date_time_get_day_of_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_day_of_year(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_day_of_year(MemorySegment datetime) {
        var mh$ = g_date_time_get_day_of_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_day_of_year", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_hour {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_hour"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_hour(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_hour$descriptor() {
        return g_date_time_get_hour.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_hour(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_hour$handle() {
        return g_date_time_get_hour.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_hour(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_hour(MemorySegment datetime) {
        var mh$ = g_date_time_get_hour.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_hour", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_minute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_minute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_minute(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_minute$descriptor() {
        return g_date_time_get_minute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_minute(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_minute$handle() {
        return g_date_time_get_minute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_minute(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_minute(MemorySegment datetime) {
        var mh$ = g_date_time_get_minute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_minute", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_second {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_second"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_second(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_second$descriptor() {
        return g_date_time_get_second.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_second(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_second$handle() {
        return g_date_time_get_second.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_second(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_second(MemorySegment datetime) {
        var mh$ = g_date_time_get_second.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_second", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_microsecond {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_microsecond"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_microsecond(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_microsecond$descriptor() {
        return g_date_time_get_microsecond.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_time_get_microsecond(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_microsecond$handle() {
        return g_date_time_get_microsecond.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_time_get_microsecond(GDateTime *datetime)
     * }
     */
    public static int g_date_time_get_microsecond(MemorySegment datetime) {
        var mh$ = g_date_time_get_microsecond.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_microsecond", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_seconds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_seconds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_date_time_get_seconds(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_seconds$descriptor() {
        return g_date_time_get_seconds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_date_time_get_seconds(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_seconds$handle() {
        return g_date_time_get_seconds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_date_time_get_seconds(GDateTime *datetime)
     * }
     */
    public static double g_date_time_get_seconds(MemorySegment datetime) {
        var mh$ = g_date_time_get_seconds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_seconds", datetime);
            }
            return (double)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_to_unix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_to_unix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_date_time_to_unix(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_to_unix$descriptor() {
        return g_date_time_to_unix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_date_time_to_unix(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_to_unix$handle() {
        return g_date_time_to_unix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_date_time_to_unix(GDateTime *datetime)
     * }
     */
    public static long g_date_time_to_unix(MemorySegment datetime) {
        var mh$ = g_date_time_to_unix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_to_unix", datetime);
            }
            return (long)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_to_timeval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_to_timeval"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_time_to_timeval(GDateTime *datetime, GTimeVal *tv)
     * }
     */
    public static FunctionDescriptor g_date_time_to_timeval$descriptor() {
        return g_date_time_to_timeval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_time_to_timeval(GDateTime *datetime, GTimeVal *tv)
     * }
     */
    public static MethodHandle g_date_time_to_timeval$handle() {
        return g_date_time_to_timeval.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_time_to_timeval(GDateTime *datetime, GTimeVal *tv)
     * }
     */
    public static int g_date_time_to_timeval(MemorySegment datetime, MemorySegment tv) {
        var mh$ = g_date_time_to_timeval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_to_timeval", datetime, tv);
            }
            return (int)mh$.invokeExact(datetime, tv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_utc_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_utc_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTimeSpan g_date_time_get_utc_offset(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_utc_offset$descriptor() {
        return g_date_time_get_utc_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTimeSpan g_date_time_get_utc_offset(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_utc_offset$handle() {
        return g_date_time_get_utc_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTimeSpan g_date_time_get_utc_offset(GDateTime *datetime)
     * }
     */
    public static long g_date_time_get_utc_offset(MemorySegment datetime) {
        var mh$ = g_date_time_get_utc_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_utc_offset", datetime);
            }
            return (long)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_timezone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_timezone"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTimeZone *g_date_time_get_timezone(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_timezone$descriptor() {
        return g_date_time_get_timezone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTimeZone *g_date_time_get_timezone(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_timezone$handle() {
        return g_date_time_get_timezone.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTimeZone *g_date_time_get_timezone(GDateTime *datetime)
     * }
     */
    public static MemorySegment g_date_time_get_timezone(MemorySegment datetime) {
        var mh$ = g_date_time_get_timezone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_timezone", datetime);
            }
            return (MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_timezone_abbreviation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_timezone_abbreviation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_date_time_get_timezone_abbreviation(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_get_timezone_abbreviation$descriptor() {
        return g_date_time_get_timezone_abbreviation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_date_time_get_timezone_abbreviation(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_get_timezone_abbreviation$handle() {
        return g_date_time_get_timezone_abbreviation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_date_time_get_timezone_abbreviation(GDateTime *datetime)
     * }
     */
    public static MemorySegment g_date_time_get_timezone_abbreviation(MemorySegment datetime) {
        var mh$ = g_date_time_get_timezone_abbreviation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_timezone_abbreviation", datetime);
            }
            return (MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_is_daylight_savings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_is_daylight_savings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_time_is_daylight_savings(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_is_daylight_savings$descriptor() {
        return g_date_time_is_daylight_savings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_time_is_daylight_savings(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_is_daylight_savings$handle() {
        return g_date_time_is_daylight_savings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_time_is_daylight_savings(GDateTime *datetime)
     * }
     */
    public static int g_date_time_is_daylight_savings(MemorySegment datetime) {
        var mh$ = g_date_time_is_daylight_savings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_is_daylight_savings", datetime);
            }
            return (int)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_to_timezone {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_to_timezone"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_to_timezone(GDateTime *datetime, GTimeZone *tz)
     * }
     */
    public static FunctionDescriptor g_date_time_to_timezone$descriptor() {
        return g_date_time_to_timezone.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_to_timezone(GDateTime *datetime, GTimeZone *tz)
     * }
     */
    public static MethodHandle g_date_time_to_timezone$handle() {
        return g_date_time_to_timezone.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_to_timezone(GDateTime *datetime, GTimeZone *tz)
     * }
     */
    public static MemorySegment g_date_time_to_timezone(MemorySegment datetime, MemorySegment tz) {
        var mh$ = g_date_time_to_timezone.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_to_timezone", datetime, tz);
            }
            return (MemorySegment)mh$.invokeExact(datetime, tz);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_to_local {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_to_local"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_to_local(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_to_local$descriptor() {
        return g_date_time_to_local.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_to_local(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_to_local$handle() {
        return g_date_time_to_local.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_to_local(GDateTime *datetime)
     * }
     */
    public static MemorySegment g_date_time_to_local(MemorySegment datetime) {
        var mh$ = g_date_time_to_local.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_to_local", datetime);
            }
            return (MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_to_utc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_to_utc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_to_utc(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_to_utc$descriptor() {
        return g_date_time_to_utc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_to_utc(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_to_utc$handle() {
        return g_date_time_to_utc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_date_time_to_utc(GDateTime *datetime)
     * }
     */
    public static MemorySegment g_date_time_to_utc(MemorySegment datetime) {
        var mh$ = g_date_time_to_utc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_to_utc", datetime);
            }
            return (MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_date_time_format(GDateTime *datetime, const gchar *format)
     * }
     */
    public static FunctionDescriptor g_date_time_format$descriptor() {
        return g_date_time_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_date_time_format(GDateTime *datetime, const gchar *format)
     * }
     */
    public static MethodHandle g_date_time_format$handle() {
        return g_date_time_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_date_time_format(GDateTime *datetime, const gchar *format)
     * }
     */
    public static MemorySegment g_date_time_format(MemorySegment datetime, MemorySegment format) {
        var mh$ = g_date_time_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_format", datetime, format);
            }
            return (MemorySegment)mh$.invokeExact(datetime, format);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_format_iso8601 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_format_iso8601"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_date_time_format_iso8601(GDateTime *datetime)
     * }
     */
    public static FunctionDescriptor g_date_time_format_iso8601$descriptor() {
        return g_date_time_format_iso8601.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_date_time_format_iso8601(GDateTime *datetime)
     * }
     */
    public static MethodHandle g_date_time_format_iso8601$handle() {
        return g_date_time_format_iso8601.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_date_time_format_iso8601(GDateTime *datetime)
     * }
     */
    public static MemorySegment g_date_time_format_iso8601(MemorySegment datetime) {
        var mh$ = g_date_time_format_iso8601.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_format_iso8601", datetime);
            }
            return (MemorySegment)mh$.invokeExact(datetime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_BOOKMARK_FILE_ERROR_INVALID_URI = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BOOKMARK_FILE_ERROR_INVALID_URI = 0
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_INVALID_URI() {
        return G_BOOKMARK_FILE_ERROR_INVALID_URI;
    }
    private static final int G_BOOKMARK_FILE_ERROR_INVALID_VALUE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BOOKMARK_FILE_ERROR_INVALID_VALUE = 1
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_INVALID_VALUE() {
        return G_BOOKMARK_FILE_ERROR_INVALID_VALUE;
    }
    private static final int G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED = 2
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED() {
        return G_BOOKMARK_FILE_ERROR_APP_NOT_REGISTERED;
    }
    private static final int G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND = 3
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND() {
        return G_BOOKMARK_FILE_ERROR_URI_NOT_FOUND;
    }
    private static final int G_BOOKMARK_FILE_ERROR_READ = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BOOKMARK_FILE_ERROR_READ = 4
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_READ() {
        return G_BOOKMARK_FILE_ERROR_READ;
    }
    private static final int G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING = 5
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING() {
        return G_BOOKMARK_FILE_ERROR_UNKNOWN_ENCODING;
    }
    private static final int G_BOOKMARK_FILE_ERROR_WRITE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BOOKMARK_FILE_ERROR_WRITE = 6
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_WRITE() {
        return G_BOOKMARK_FILE_ERROR_WRITE;
    }
    private static final int G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND = 7
     * }
     */
    public static int G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND() {
        return G_BOOKMARK_FILE_ERROR_FILE_NOT_FOUND;
    }

    private static class g_bookmark_file_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_bookmark_file_error_quark()
     * }
     */
    public static FunctionDescriptor g_bookmark_file_error_quark$descriptor() {
        return g_bookmark_file_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_bookmark_file_error_quark()
     * }
     */
    public static MethodHandle g_bookmark_file_error_quark$handle() {
        return g_bookmark_file_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_bookmark_file_error_quark()
     * }
     */
    public static int g_bookmark_file_error_quark() {
        var mh$ = g_bookmark_file_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBookmarkFile *g_bookmark_file_new()
     * }
     */
    public static FunctionDescriptor g_bookmark_file_new$descriptor() {
        return g_bookmark_file_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBookmarkFile *g_bookmark_file_new()
     * }
     */
    public static MethodHandle g_bookmark_file_new$handle() {
        return g_bookmark_file_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBookmarkFile *g_bookmark_file_new()
     * }
     */
    public static MemorySegment g_bookmark_file_new() {
        var mh$ = g_bookmark_file_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_free(GBookmarkFile *bookmark)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_free$descriptor() {
        return g_bookmark_file_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_free(GBookmarkFile *bookmark)
     * }
     */
    public static MethodHandle g_bookmark_file_free$handle() {
        return g_bookmark_file_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_free(GBookmarkFile *bookmark)
     * }
     */
    public static void g_bookmark_file_free(MemorySegment bookmark) {
        var mh$ = g_bookmark_file_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_free", bookmark);
            }
            mh$.invokeExact(bookmark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBookmarkFile *g_bookmark_file_copy(GBookmarkFile *bookmark)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_copy$descriptor() {
        return g_bookmark_file_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBookmarkFile *g_bookmark_file_copy(GBookmarkFile *bookmark)
     * }
     */
    public static MethodHandle g_bookmark_file_copy$handle() {
        return g_bookmark_file_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBookmarkFile *g_bookmark_file_copy(GBookmarkFile *bookmark)
     * }
     */
    public static MemorySegment g_bookmark_file_copy(MemorySegment bookmark) {
        var mh$ = g_bookmark_file_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_copy", bookmark);
            }
            return (MemorySegment)mh$.invokeExact(bookmark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_load_from_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_load_from_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_load_from_file(GBookmarkFile *bookmark, const gchar *filename, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_load_from_file$descriptor() {
        return g_bookmark_file_load_from_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_load_from_file(GBookmarkFile *bookmark, const gchar *filename, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_load_from_file$handle() {
        return g_bookmark_file_load_from_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_load_from_file(GBookmarkFile *bookmark, const gchar *filename, GError **error)
     * }
     */
    public static int g_bookmark_file_load_from_file(MemorySegment bookmark, MemorySegment filename, MemorySegment error) {
        var mh$ = g_bookmark_file_load_from_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_load_from_file", bookmark, filename, error);
            }
            return (int)mh$.invokeExact(bookmark, filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_load_from_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_load_from_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_load_from_data(GBookmarkFile *bookmark, const gchar *data, gsize length, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_load_from_data$descriptor() {
        return g_bookmark_file_load_from_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_load_from_data(GBookmarkFile *bookmark, const gchar *data, gsize length, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_load_from_data$handle() {
        return g_bookmark_file_load_from_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_load_from_data(GBookmarkFile *bookmark, const gchar *data, gsize length, GError **error)
     * }
     */
    public static int g_bookmark_file_load_from_data(MemorySegment bookmark, MemorySegment data, long length, MemorySegment error) {
        var mh$ = g_bookmark_file_load_from_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_load_from_data", bookmark, data, length, error);
            }
            return (int)mh$.invokeExact(bookmark, data, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_load_from_data_dirs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_load_from_data_dirs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_load_from_data_dirs(GBookmarkFile *bookmark, const gchar *file, gchar **full_path, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_load_from_data_dirs$descriptor() {
        return g_bookmark_file_load_from_data_dirs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_load_from_data_dirs(GBookmarkFile *bookmark, const gchar *file, gchar **full_path, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_load_from_data_dirs$handle() {
        return g_bookmark_file_load_from_data_dirs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_load_from_data_dirs(GBookmarkFile *bookmark, const gchar *file, gchar **full_path, GError **error)
     * }
     */
    public static int g_bookmark_file_load_from_data_dirs(MemorySegment bookmark, MemorySegment file, MemorySegment full_path, MemorySegment error) {
        var mh$ = g_bookmark_file_load_from_data_dirs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_load_from_data_dirs", bookmark, file, full_path, error);
            }
            return (int)mh$.invokeExact(bookmark, file, full_path, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_to_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_to_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_to_data(GBookmarkFile *bookmark, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_to_data$descriptor() {
        return g_bookmark_file_to_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_to_data(GBookmarkFile *bookmark, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_to_data$handle() {
        return g_bookmark_file_to_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_to_data(GBookmarkFile *bookmark, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_bookmark_file_to_data(MemorySegment bookmark, MemorySegment length, MemorySegment error) {
        var mh$ = g_bookmark_file_to_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_to_data", bookmark, length, error);
            }
            return (MemorySegment)mh$.invokeExact(bookmark, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_to_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_to_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_to_file(GBookmarkFile *bookmark, const gchar *filename, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_to_file$descriptor() {
        return g_bookmark_file_to_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_to_file(GBookmarkFile *bookmark, const gchar *filename, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_to_file$handle() {
        return g_bookmark_file_to_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_to_file(GBookmarkFile *bookmark, const gchar *filename, GError **error)
     * }
     */
    public static int g_bookmark_file_to_file(MemorySegment bookmark, MemorySegment filename, MemorySegment error) {
        var mh$ = g_bookmark_file_to_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_to_file", bookmark, filename, error);
            }
            return (int)mh$.invokeExact(bookmark, filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_title(GBookmarkFile *bookmark, const gchar *uri, const gchar *title)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_title$descriptor() {
        return g_bookmark_file_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_title(GBookmarkFile *bookmark, const gchar *uri, const gchar *title)
     * }
     */
    public static MethodHandle g_bookmark_file_set_title$handle() {
        return g_bookmark_file_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_title(GBookmarkFile *bookmark, const gchar *uri, const gchar *title)
     * }
     */
    public static void g_bookmark_file_set_title(MemorySegment bookmark, MemorySegment uri, MemorySegment title) {
        var mh$ = g_bookmark_file_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_title", bookmark, uri, title);
            }
            mh$.invokeExact(bookmark, uri, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_get_title(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_title$descriptor() {
        return g_bookmark_file_get_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_get_title(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_title$handle() {
        return g_bookmark_file_get_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_get_title(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MemorySegment g_bookmark_file_get_title(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_title", bookmark, uri, error);
            }
            return (MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_description(GBookmarkFile *bookmark, const gchar *uri, const gchar *description)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_description$descriptor() {
        return g_bookmark_file_set_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_description(GBookmarkFile *bookmark, const gchar *uri, const gchar *description)
     * }
     */
    public static MethodHandle g_bookmark_file_set_description$handle() {
        return g_bookmark_file_set_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_description(GBookmarkFile *bookmark, const gchar *uri, const gchar *description)
     * }
     */
    public static void g_bookmark_file_set_description(MemorySegment bookmark, MemorySegment uri, MemorySegment description) {
        var mh$ = g_bookmark_file_set_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_description", bookmark, uri, description);
            }
            mh$.invokeExact(bookmark, uri, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_get_description(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_description$descriptor() {
        return g_bookmark_file_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_get_description(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_description$handle() {
        return g_bookmark_file_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_get_description(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MemorySegment g_bookmark_file_get_description(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_description", bookmark, uri, error);
            }
            return (MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_mime_type(GBookmarkFile *bookmark, const gchar *uri, const gchar *mime_type)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_mime_type$descriptor() {
        return g_bookmark_file_set_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_mime_type(GBookmarkFile *bookmark, const gchar *uri, const gchar *mime_type)
     * }
     */
    public static MethodHandle g_bookmark_file_set_mime_type$handle() {
        return g_bookmark_file_set_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_mime_type(GBookmarkFile *bookmark, const gchar *uri, const gchar *mime_type)
     * }
     */
    public static void g_bookmark_file_set_mime_type(MemorySegment bookmark, MemorySegment uri, MemorySegment mime_type) {
        var mh$ = g_bookmark_file_set_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_mime_type", bookmark, uri, mime_type);
            }
            mh$.invokeExact(bookmark, uri, mime_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_get_mime_type(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_mime_type$descriptor() {
        return g_bookmark_file_get_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_get_mime_type(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_mime_type$handle() {
        return g_bookmark_file_get_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_bookmark_file_get_mime_type(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MemorySegment g_bookmark_file_get_mime_type(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_mime_type", bookmark, uri, error);
            }
            return (MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_groups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_groups"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_groups(GBookmarkFile *bookmark, const gchar *uri, const gchar **groups, gsize length)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_groups$descriptor() {
        return g_bookmark_file_set_groups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_groups(GBookmarkFile *bookmark, const gchar *uri, const gchar **groups, gsize length)
     * }
     */
    public static MethodHandle g_bookmark_file_set_groups$handle() {
        return g_bookmark_file_set_groups.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_groups(GBookmarkFile *bookmark, const gchar *uri, const gchar **groups, gsize length)
     * }
     */
    public static void g_bookmark_file_set_groups(MemorySegment bookmark, MemorySegment uri, MemorySegment groups, long length) {
        var mh$ = g_bookmark_file_set_groups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_groups", bookmark, uri, groups, length);
            }
            mh$.invokeExact(bookmark, uri, groups, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_add_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_add_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_add_group(GBookmarkFile *bookmark, const gchar *uri, const gchar *group)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_add_group$descriptor() {
        return g_bookmark_file_add_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_add_group(GBookmarkFile *bookmark, const gchar *uri, const gchar *group)
     * }
     */
    public static MethodHandle g_bookmark_file_add_group$handle() {
        return g_bookmark_file_add_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_add_group(GBookmarkFile *bookmark, const gchar *uri, const gchar *group)
     * }
     */
    public static void g_bookmark_file_add_group(MemorySegment bookmark, MemorySegment uri, MemorySegment group) {
        var mh$ = g_bookmark_file_add_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_add_group", bookmark, uri, group);
            }
            mh$.invokeExact(bookmark, uri, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_has_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_has_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_has_group(GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_has_group$descriptor() {
        return g_bookmark_file_has_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_has_group(GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_has_group$handle() {
        return g_bookmark_file_has_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_has_group(GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error)
     * }
     */
    public static int g_bookmark_file_has_group(MemorySegment bookmark, MemorySegment uri, MemorySegment group, MemorySegment error) {
        var mh$ = g_bookmark_file_has_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_has_group", bookmark, uri, group, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, group, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_groups {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_groups"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_bookmark_file_get_groups(GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_groups$descriptor() {
        return g_bookmark_file_get_groups.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_bookmark_file_get_groups(GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_groups$handle() {
        return g_bookmark_file_get_groups.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_bookmark_file_get_groups(GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_bookmark_file_get_groups(MemorySegment bookmark, MemorySegment uri, MemorySegment length, MemorySegment error) {
        var mh$ = g_bookmark_file_get_groups.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_groups", bookmark, uri, length, error);
            }
            return (MemorySegment)mh$.invokeExact(bookmark, uri, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_add_application {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_add_application"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_add_application(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_add_application$descriptor() {
        return g_bookmark_file_add_application.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_add_application(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec)
     * }
     */
    public static MethodHandle g_bookmark_file_add_application$handle() {
        return g_bookmark_file_add_application.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_add_application(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec)
     * }
     */
    public static void g_bookmark_file_add_application(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment exec) {
        var mh$ = g_bookmark_file_add_application.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_add_application", bookmark, uri, name, exec);
            }
            mh$.invokeExact(bookmark, uri, name, exec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_has_application {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_has_application"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_has_application(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_has_application$descriptor() {
        return g_bookmark_file_has_application.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_has_application(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_has_application$handle() {
        return g_bookmark_file_has_application.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_has_application(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error)
     * }
     */
    public static int g_bookmark_file_has_application(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment error) {
        var mh$ = g_bookmark_file_has_application.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_has_application", bookmark, uri, name, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_applications {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_applications"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_bookmark_file_get_applications(GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_applications$descriptor() {
        return g_bookmark_file_get_applications.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_bookmark_file_get_applications(GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_applications$handle() {
        return g_bookmark_file_get_applications.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_bookmark_file_get_applications(GBookmarkFile *bookmark, const gchar *uri, gsize *length, GError **error)
     * }
     */
    public static MemorySegment g_bookmark_file_get_applications(MemorySegment bookmark, MemorySegment uri, MemorySegment length, MemorySegment error) {
        var mh$ = g_bookmark_file_get_applications.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_applications", bookmark, uri, length, error);
            }
            return (MemorySegment)mh$.invokeExact(bookmark, uri, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_app_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_app_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_set_app_info(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec, gint count, time_t stamp, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_app_info$descriptor() {
        return g_bookmark_file_set_app_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_set_app_info(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec, gint count, time_t stamp, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_set_app_info$handle() {
        return g_bookmark_file_set_app_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_set_app_info(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, const gchar *exec, gint count, time_t stamp, GError **error)
     * }
     */
    public static int g_bookmark_file_set_app_info(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment exec, int count, long stamp, MemorySegment error) {
        var mh$ = g_bookmark_file_set_app_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_app_info", bookmark, uri, name, exec, count, stamp, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_application_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_application_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_set_application_info(GBookmarkFile *bookmark, const char *uri, const char *name, const char *exec, int count, GDateTime *stamp, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_application_info$descriptor() {
        return g_bookmark_file_set_application_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_set_application_info(GBookmarkFile *bookmark, const char *uri, const char *name, const char *exec, int count, GDateTime *stamp, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_set_application_info$handle() {
        return g_bookmark_file_set_application_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_set_application_info(GBookmarkFile *bookmark, const char *uri, const char *name, const char *exec, int count, GDateTime *stamp, GError **error)
     * }
     */
    public static int g_bookmark_file_set_application_info(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment exec, int count, MemorySegment stamp, MemorySegment error) {
        var mh$ = g_bookmark_file_set_application_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_application_info", bookmark, uri, name, exec, count, stamp, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_app_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_app_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_app_info(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, gchar **exec, guint *count, time_t *stamp, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_app_info$descriptor() {
        return g_bookmark_file_get_app_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_app_info(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, gchar **exec, guint *count, time_t *stamp, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_app_info$handle() {
        return g_bookmark_file_get_app_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_app_info(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, gchar **exec, guint *count, time_t *stamp, GError **error)
     * }
     */
    public static int g_bookmark_file_get_app_info(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment exec, MemorySegment count, MemorySegment stamp, MemorySegment error) {
        var mh$ = g_bookmark_file_get_app_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_app_info", bookmark, uri, name, exec, count, stamp, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_application_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_application_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_application_info(GBookmarkFile *bookmark, const char *uri, const char *name, char **exec, unsigned int *count, GDateTime **stamp, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_application_info$descriptor() {
        return g_bookmark_file_get_application_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_application_info(GBookmarkFile *bookmark, const char *uri, const char *name, char **exec, unsigned int *count, GDateTime **stamp, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_application_info$handle() {
        return g_bookmark_file_get_application_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_application_info(GBookmarkFile *bookmark, const char *uri, const char *name, char **exec, unsigned int *count, GDateTime **stamp, GError **error)
     * }
     */
    public static int g_bookmark_file_get_application_info(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment exec, MemorySegment count, MemorySegment stamp, MemorySegment error) {
        var mh$ = g_bookmark_file_get_application_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_application_info", bookmark, uri, name, exec, count, stamp, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, name, exec, count, stamp, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_is_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_is_private"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_is_private(GBookmarkFile *bookmark, const gchar *uri, gboolean is_private)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_is_private$descriptor() {
        return g_bookmark_file_set_is_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_is_private(GBookmarkFile *bookmark, const gchar *uri, gboolean is_private)
     * }
     */
    public static MethodHandle g_bookmark_file_set_is_private$handle() {
        return g_bookmark_file_set_is_private.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_is_private(GBookmarkFile *bookmark, const gchar *uri, gboolean is_private)
     * }
     */
    public static void g_bookmark_file_set_is_private(MemorySegment bookmark, MemorySegment uri, int is_private) {
        var mh$ = g_bookmark_file_set_is_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_is_private", bookmark, uri, is_private);
            }
            mh$.invokeExact(bookmark, uri, is_private);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_is_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_is_private"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_is_private(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_is_private$descriptor() {
        return g_bookmark_file_get_is_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_is_private(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_is_private$handle() {
        return g_bookmark_file_get_is_private.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_is_private(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static int g_bookmark_file_get_is_private(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_is_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_is_private", bookmark, uri, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_icon(GBookmarkFile *bookmark, const gchar *uri, const gchar *href, const gchar *mime_type)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_icon$descriptor() {
        return g_bookmark_file_set_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_icon(GBookmarkFile *bookmark, const gchar *uri, const gchar *href, const gchar *mime_type)
     * }
     */
    public static MethodHandle g_bookmark_file_set_icon$handle() {
        return g_bookmark_file_set_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_icon(GBookmarkFile *bookmark, const gchar *uri, const gchar *href, const gchar *mime_type)
     * }
     */
    public static void g_bookmark_file_set_icon(MemorySegment bookmark, MemorySegment uri, MemorySegment href, MemorySegment mime_type) {
        var mh$ = g_bookmark_file_set_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_icon", bookmark, uri, href, mime_type);
            }
            mh$.invokeExact(bookmark, uri, href, mime_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_icon {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_icon"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_icon(GBookmarkFile *bookmark, const gchar *uri, gchar **href, gchar **mime_type, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_icon$descriptor() {
        return g_bookmark_file_get_icon.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_icon(GBookmarkFile *bookmark, const gchar *uri, gchar **href, gchar **mime_type, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_icon$handle() {
        return g_bookmark_file_get_icon.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_get_icon(GBookmarkFile *bookmark, const gchar *uri, gchar **href, gchar **mime_type, GError **error)
     * }
     */
    public static int g_bookmark_file_get_icon(MemorySegment bookmark, MemorySegment uri, MemorySegment href, MemorySegment mime_type, MemorySegment error) {
        var mh$ = g_bookmark_file_get_icon.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_icon", bookmark, uri, href, mime_type, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, href, mime_type, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_added {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_added"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_added(GBookmarkFile *bookmark, const gchar *uri, time_t added)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_added$descriptor() {
        return g_bookmark_file_set_added.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_added(GBookmarkFile *bookmark, const gchar *uri, time_t added)
     * }
     */
    public static MethodHandle g_bookmark_file_set_added$handle() {
        return g_bookmark_file_set_added.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_added(GBookmarkFile *bookmark, const gchar *uri, time_t added)
     * }
     */
    public static void g_bookmark_file_set_added(MemorySegment bookmark, MemorySegment uri, long added) {
        var mh$ = g_bookmark_file_set_added.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_added", bookmark, uri, added);
            }
            mh$.invokeExact(bookmark, uri, added);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_added_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_added_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_added_date_time(GBookmarkFile *bookmark, const char *uri, GDateTime *added)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_added_date_time$descriptor() {
        return g_bookmark_file_set_added_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_added_date_time(GBookmarkFile *bookmark, const char *uri, GDateTime *added)
     * }
     */
    public static MethodHandle g_bookmark_file_set_added_date_time$handle() {
        return g_bookmark_file_set_added_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_added_date_time(GBookmarkFile *bookmark, const char *uri, GDateTime *added)
     * }
     */
    public static void g_bookmark_file_set_added_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment added) {
        var mh$ = g_bookmark_file_set_added_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_added_date_time", bookmark, uri, added);
            }
            mh$.invokeExact(bookmark, uri, added);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_added {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_added"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern time_t g_bookmark_file_get_added(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_added$descriptor() {
        return g_bookmark_file_get_added.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern time_t g_bookmark_file_get_added(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_added$handle() {
        return g_bookmark_file_get_added.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern time_t g_bookmark_file_get_added(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static long g_bookmark_file_get_added(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_added.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_added", bookmark, uri, error);
            }
            return (long)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_added_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_added_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_bookmark_file_get_added_date_time(GBookmarkFile *bookmark, const char *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_added_date_time$descriptor() {
        return g_bookmark_file_get_added_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_bookmark_file_get_added_date_time(GBookmarkFile *bookmark, const char *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_added_date_time$handle() {
        return g_bookmark_file_get_added_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_bookmark_file_get_added_date_time(GBookmarkFile *bookmark, const char *uri, GError **error)
     * }
     */
    public static MemorySegment g_bookmark_file_get_added_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_added_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_added_date_time", bookmark, uri, error);
            }
            return (MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_modified {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_modified"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_modified(GBookmarkFile *bookmark, const gchar *uri, time_t modified)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_modified$descriptor() {
        return g_bookmark_file_set_modified.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_modified(GBookmarkFile *bookmark, const gchar *uri, time_t modified)
     * }
     */
    public static MethodHandle g_bookmark_file_set_modified$handle() {
        return g_bookmark_file_set_modified.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_modified(GBookmarkFile *bookmark, const gchar *uri, time_t modified)
     * }
     */
    public static void g_bookmark_file_set_modified(MemorySegment bookmark, MemorySegment uri, long modified) {
        var mh$ = g_bookmark_file_set_modified.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_modified", bookmark, uri, modified);
            }
            mh$.invokeExact(bookmark, uri, modified);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_modified_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_modified_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_modified_date_time(GBookmarkFile *bookmark, const char *uri, GDateTime *modified)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_modified_date_time$descriptor() {
        return g_bookmark_file_set_modified_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_modified_date_time(GBookmarkFile *bookmark, const char *uri, GDateTime *modified)
     * }
     */
    public static MethodHandle g_bookmark_file_set_modified_date_time$handle() {
        return g_bookmark_file_set_modified_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_modified_date_time(GBookmarkFile *bookmark, const char *uri, GDateTime *modified)
     * }
     */
    public static void g_bookmark_file_set_modified_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment modified) {
        var mh$ = g_bookmark_file_set_modified_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_modified_date_time", bookmark, uri, modified);
            }
            mh$.invokeExact(bookmark, uri, modified);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_modified {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_modified"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern time_t g_bookmark_file_get_modified(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_modified$descriptor() {
        return g_bookmark_file_get_modified.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern time_t g_bookmark_file_get_modified(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_modified$handle() {
        return g_bookmark_file_get_modified.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern time_t g_bookmark_file_get_modified(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static long g_bookmark_file_get_modified(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_modified.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_modified", bookmark, uri, error);
            }
            return (long)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_modified_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_modified_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_bookmark_file_get_modified_date_time(GBookmarkFile *bookmark, const char *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_modified_date_time$descriptor() {
        return g_bookmark_file_get_modified_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_bookmark_file_get_modified_date_time(GBookmarkFile *bookmark, const char *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_modified_date_time$handle() {
        return g_bookmark_file_get_modified_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_bookmark_file_get_modified_date_time(GBookmarkFile *bookmark, const char *uri, GError **error)
     * }
     */
    public static MemorySegment g_bookmark_file_get_modified_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_modified_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_modified_date_time", bookmark, uri, error);
            }
            return (MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_visited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_visited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_visited(GBookmarkFile *bookmark, const gchar *uri, time_t visited)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_visited$descriptor() {
        return g_bookmark_file_set_visited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_visited(GBookmarkFile *bookmark, const gchar *uri, time_t visited)
     * }
     */
    public static MethodHandle g_bookmark_file_set_visited$handle() {
        return g_bookmark_file_set_visited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_visited(GBookmarkFile *bookmark, const gchar *uri, time_t visited)
     * }
     */
    public static void g_bookmark_file_set_visited(MemorySegment bookmark, MemorySegment uri, long visited) {
        var mh$ = g_bookmark_file_set_visited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_visited", bookmark, uri, visited);
            }
            mh$.invokeExact(bookmark, uri, visited);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_set_visited_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_set_visited_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_visited_date_time(GBookmarkFile *bookmark, const char *uri, GDateTime *visited)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_set_visited_date_time$descriptor() {
        return g_bookmark_file_set_visited_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_visited_date_time(GBookmarkFile *bookmark, const char *uri, GDateTime *visited)
     * }
     */
    public static MethodHandle g_bookmark_file_set_visited_date_time$handle() {
        return g_bookmark_file_set_visited_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bookmark_file_set_visited_date_time(GBookmarkFile *bookmark, const char *uri, GDateTime *visited)
     * }
     */
    public static void g_bookmark_file_set_visited_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment visited) {
        var mh$ = g_bookmark_file_set_visited_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_set_visited_date_time", bookmark, uri, visited);
            }
            mh$.invokeExact(bookmark, uri, visited);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_visited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_visited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern time_t g_bookmark_file_get_visited(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_visited$descriptor() {
        return g_bookmark_file_get_visited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern time_t g_bookmark_file_get_visited(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_visited$handle() {
        return g_bookmark_file_get_visited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern time_t g_bookmark_file_get_visited(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static long g_bookmark_file_get_visited(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_visited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_visited", bookmark, uri, error);
            }
            return (long)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_visited_date_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_visited_date_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateTime *g_bookmark_file_get_visited_date_time(GBookmarkFile *bookmark, const char *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_visited_date_time$descriptor() {
        return g_bookmark_file_get_visited_date_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateTime *g_bookmark_file_get_visited_date_time(GBookmarkFile *bookmark, const char *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_get_visited_date_time$handle() {
        return g_bookmark_file_get_visited_date_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateTime *g_bookmark_file_get_visited_date_time(GBookmarkFile *bookmark, const char *uri, GError **error)
     * }
     */
    public static MemorySegment g_bookmark_file_get_visited_date_time(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_get_visited_date_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_visited_date_time", bookmark, uri, error);
            }
            return (MemorySegment)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_has_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_has_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_has_item(GBookmarkFile *bookmark, const gchar *uri)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_has_item$descriptor() {
        return g_bookmark_file_has_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_has_item(GBookmarkFile *bookmark, const gchar *uri)
     * }
     */
    public static MethodHandle g_bookmark_file_has_item$handle() {
        return g_bookmark_file_has_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_has_item(GBookmarkFile *bookmark, const gchar *uri)
     * }
     */
    public static int g_bookmark_file_has_item(MemorySegment bookmark, MemorySegment uri) {
        var mh$ = g_bookmark_file_has_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_has_item", bookmark, uri);
            }
            return (int)mh$.invokeExact(bookmark, uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_bookmark_file_get_size(GBookmarkFile *bookmark)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_size$descriptor() {
        return g_bookmark_file_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_bookmark_file_get_size(GBookmarkFile *bookmark)
     * }
     */
    public static MethodHandle g_bookmark_file_get_size$handle() {
        return g_bookmark_file_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_bookmark_file_get_size(GBookmarkFile *bookmark)
     * }
     */
    public static int g_bookmark_file_get_size(MemorySegment bookmark) {
        var mh$ = g_bookmark_file_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_size", bookmark);
            }
            return (int)mh$.invokeExact(bookmark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_bookmark_file_get_uris(GBookmarkFile *bookmark, gsize *length)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_uris$descriptor() {
        return g_bookmark_file_get_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_bookmark_file_get_uris(GBookmarkFile *bookmark, gsize *length)
     * }
     */
    public static MethodHandle g_bookmark_file_get_uris$handle() {
        return g_bookmark_file_get_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_bookmark_file_get_uris(GBookmarkFile *bookmark, gsize *length)
     * }
     */
    public static MemorySegment g_bookmark_file_get_uris(MemorySegment bookmark, MemorySegment length) {
        var mh$ = g_bookmark_file_get_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_uris", bookmark, length);
            }
            return (MemorySegment)mh$.invokeExact(bookmark, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_remove_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_remove_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_remove_group(GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_remove_group$descriptor() {
        return g_bookmark_file_remove_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_remove_group(GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_remove_group$handle() {
        return g_bookmark_file_remove_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_remove_group(GBookmarkFile *bookmark, const gchar *uri, const gchar *group, GError **error)
     * }
     */
    public static int g_bookmark_file_remove_group(MemorySegment bookmark, MemorySegment uri, MemorySegment group, MemorySegment error) {
        var mh$ = g_bookmark_file_remove_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_remove_group", bookmark, uri, group, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, group, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_remove_application {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_remove_application"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_remove_application(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_remove_application$descriptor() {
        return g_bookmark_file_remove_application.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_remove_application(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_remove_application$handle() {
        return g_bookmark_file_remove_application.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_remove_application(GBookmarkFile *bookmark, const gchar *uri, const gchar *name, GError **error)
     * }
     */
    public static int g_bookmark_file_remove_application(MemorySegment bookmark, MemorySegment uri, MemorySegment name, MemorySegment error) {
        var mh$ = g_bookmark_file_remove_application.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_remove_application", bookmark, uri, name, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, name, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_remove_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_remove_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_remove_item(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_remove_item$descriptor() {
        return g_bookmark_file_remove_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_remove_item(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_remove_item$handle() {
        return g_bookmark_file_remove_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_remove_item(GBookmarkFile *bookmark, const gchar *uri, GError **error)
     * }
     */
    public static int g_bookmark_file_remove_item(MemorySegment bookmark, MemorySegment uri, MemorySegment error) {
        var mh$ = g_bookmark_file_remove_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_remove_item", bookmark, uri, error);
            }
            return (int)mh$.invokeExact(bookmark, uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_move_item {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_move_item"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_move_item(GBookmarkFile *bookmark, const gchar *old_uri, const gchar *new_uri, GError **error)
     * }
     */
    public static FunctionDescriptor g_bookmark_file_move_item$descriptor() {
        return g_bookmark_file_move_item.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_move_item(GBookmarkFile *bookmark, const gchar *old_uri, const gchar *new_uri, GError **error)
     * }
     */
    public static MethodHandle g_bookmark_file_move_item$handle() {
        return g_bookmark_file_move_item.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bookmark_file_move_item(GBookmarkFile *bookmark, const gchar *old_uri, const gchar *new_uri, GError **error)
     * }
     */
    public static int g_bookmark_file_move_item(MemorySegment bookmark, MemorySegment old_uri, MemorySegment new_uri, MemorySegment error) {
        var mh$ = g_bookmark_file_move_item.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_move_item", bookmark, old_uri, new_uri, error);
            }
            return (int)mh$.invokeExact(bookmark, old_uri, new_uri, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new(gconstpointer data, gsize size)
     * }
     */
    public static FunctionDescriptor g_bytes_new$descriptor() {
        return g_bytes_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new(gconstpointer data, gsize size)
     * }
     */
    public static MethodHandle g_bytes_new$handle() {
        return g_bytes_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new(gconstpointer data, gsize size)
     * }
     */
    public static MemorySegment g_bytes_new(MemorySegment data, long size) {
        var mh$ = g_bytes_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_new", data, size);
            }
            return (MemorySegment)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_new_take {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_new_take"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_take(gpointer data, gsize size)
     * }
     */
    public static FunctionDescriptor g_bytes_new_take$descriptor() {
        return g_bytes_new_take.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_take(gpointer data, gsize size)
     * }
     */
    public static MethodHandle g_bytes_new_take$handle() {
        return g_bytes_new_take.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_take(gpointer data, gsize size)
     * }
     */
    public static MemorySegment g_bytes_new_take(MemorySegment data, long size) {
        var mh$ = g_bytes_new_take.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_new_take", data, size);
            }
            return (MemorySegment)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_new_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_new_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_static(gconstpointer data, gsize size)
     * }
     */
    public static FunctionDescriptor g_bytes_new_static$descriptor() {
        return g_bytes_new_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_static(gconstpointer data, gsize size)
     * }
     */
    public static MethodHandle g_bytes_new_static$handle() {
        return g_bytes_new_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_static(gconstpointer data, gsize size)
     * }
     */
    public static MemorySegment g_bytes_new_static(MemorySegment data, long size) {
        var mh$ = g_bytes_new_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_new_static", data, size);
            }
            return (MemorySegment)mh$.invokeExact(data, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_new_with_free_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_new_with_free_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_with_free_func(gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_bytes_new_with_free_func$descriptor() {
        return g_bytes_new_with_free_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_with_free_func(gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_bytes_new_with_free_func$handle() {
        return g_bytes_new_with_free_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_with_free_func(gconstpointer data, gsize size, GDestroyNotify free_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_bytes_new_with_free_func(MemorySegment data, long size, MemorySegment free_func, MemorySegment user_data) {
        var mh$ = g_bytes_new_with_free_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_new_with_free_func", data, size, free_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(data, size, free_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_new_from_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_new_from_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_from_bytes(GBytes *bytes, gsize offset, gsize length)
     * }
     */
    public static FunctionDescriptor g_bytes_new_from_bytes$descriptor() {
        return g_bytes_new_from_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_from_bytes(GBytes *bytes, gsize offset, gsize length)
     * }
     */
    public static MethodHandle g_bytes_new_from_bytes$handle() {
        return g_bytes_new_from_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_bytes_new_from_bytes(GBytes *bytes, gsize offset, gsize length)
     * }
     */
    public static MemorySegment g_bytes_new_from_bytes(MemorySegment bytes, long offset, long length) {
        var mh$ = g_bytes_new_from_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_new_from_bytes", bytes, offset, length);
            }
            return (MemorySegment)mh$.invokeExact(bytes, offset, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gconstpointer g_bytes_get_data(GBytes *bytes, gsize *size)
     * }
     */
    public static FunctionDescriptor g_bytes_get_data$descriptor() {
        return g_bytes_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gconstpointer g_bytes_get_data(GBytes *bytes, gsize *size)
     * }
     */
    public static MethodHandle g_bytes_get_data$handle() {
        return g_bytes_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gconstpointer g_bytes_get_data(GBytes *bytes, gsize *size)
     * }
     */
    public static MemorySegment g_bytes_get_data(MemorySegment bytes, MemorySegment size) {
        var mh$ = g_bytes_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_get_data", bytes, size);
            }
            return (MemorySegment)mh$.invokeExact(bytes, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_bytes_get_size(GBytes *bytes)
     * }
     */
    public static FunctionDescriptor g_bytes_get_size$descriptor() {
        return g_bytes_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_bytes_get_size(GBytes *bytes)
     * }
     */
    public static MethodHandle g_bytes_get_size$handle() {
        return g_bytes_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_bytes_get_size(GBytes *bytes)
     * }
     */
    public static long g_bytes_get_size(MemorySegment bytes) {
        var mh$ = g_bytes_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_get_size", bytes);
            }
            return (long)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_ref(GBytes *bytes)
     * }
     */
    public static FunctionDescriptor g_bytes_ref$descriptor() {
        return g_bytes_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_bytes_ref(GBytes *bytes)
     * }
     */
    public static MethodHandle g_bytes_ref$handle() {
        return g_bytes_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_bytes_ref(GBytes *bytes)
     * }
     */
    public static MemorySegment g_bytes_ref(MemorySegment bytes) {
        var mh$ = g_bytes_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_ref", bytes);
            }
            return (MemorySegment)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_bytes_unref(GBytes *bytes)
     * }
     */
    public static FunctionDescriptor g_bytes_unref$descriptor() {
        return g_bytes_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_bytes_unref(GBytes *bytes)
     * }
     */
    public static MethodHandle g_bytes_unref$handle() {
        return g_bytes_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_bytes_unref(GBytes *bytes)
     * }
     */
    public static void g_bytes_unref(MemorySegment bytes) {
        var mh$ = g_bytes_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_unref", bytes);
            }
            mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_unref_to_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_unref_to_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_bytes_unref_to_data(GBytes *bytes, gsize *size)
     * }
     */
    public static FunctionDescriptor g_bytes_unref_to_data$descriptor() {
        return g_bytes_unref_to_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_bytes_unref_to_data(GBytes *bytes, gsize *size)
     * }
     */
    public static MethodHandle g_bytes_unref_to_data$handle() {
        return g_bytes_unref_to_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_bytes_unref_to_data(GBytes *bytes, gsize *size)
     * }
     */
    public static MemorySegment g_bytes_unref_to_data(MemorySegment bytes, MemorySegment size) {
        var mh$ = g_bytes_unref_to_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_unref_to_data", bytes, size);
            }
            return (MemorySegment)mh$.invokeExact(bytes, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_unref_to_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_unref_to_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GByteArray *g_bytes_unref_to_array(GBytes *bytes)
     * }
     */
    public static FunctionDescriptor g_bytes_unref_to_array$descriptor() {
        return g_bytes_unref_to_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GByteArray *g_bytes_unref_to_array(GBytes *bytes)
     * }
     */
    public static MethodHandle g_bytes_unref_to_array$handle() {
        return g_bytes_unref_to_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GByteArray *g_bytes_unref_to_array(GBytes *bytes)
     * }
     */
    public static MemorySegment g_bytes_unref_to_array(MemorySegment bytes) {
        var mh$ = g_bytes_unref_to_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_unref_to_array", bytes);
            }
            return (MemorySegment)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_bytes_hash(gconstpointer bytes)
     * }
     */
    public static FunctionDescriptor g_bytes_hash$descriptor() {
        return g_bytes_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_bytes_hash(gconstpointer bytes)
     * }
     */
    public static MethodHandle g_bytes_hash$handle() {
        return g_bytes_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_bytes_hash(gconstpointer bytes)
     * }
     */
    public static int g_bytes_hash(MemorySegment bytes) {
        var mh$ = g_bytes_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_hash", bytes);
            }
            return (int)mh$.invokeExact(bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_bytes_equal(gconstpointer bytes1, gconstpointer bytes2)
     * }
     */
    public static FunctionDescriptor g_bytes_equal$descriptor() {
        return g_bytes_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_bytes_equal(gconstpointer bytes1, gconstpointer bytes2)
     * }
     */
    public static MethodHandle g_bytes_equal$handle() {
        return g_bytes_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_bytes_equal(gconstpointer bytes1, gconstpointer bytes2)
     * }
     */
    public static int g_bytes_equal(MemorySegment bytes1, MemorySegment bytes2) {
        var mh$ = g_bytes_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_equal", bytes1, bytes2);
            }
            return (int)mh$.invokeExact(bytes1, bytes2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_compare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_bytes_compare(gconstpointer bytes1, gconstpointer bytes2)
     * }
     */
    public static FunctionDescriptor g_bytes_compare$descriptor() {
        return g_bytes_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_bytes_compare(gconstpointer bytes1, gconstpointer bytes2)
     * }
     */
    public static MethodHandle g_bytes_compare$handle() {
        return g_bytes_compare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_bytes_compare(gconstpointer bytes1, gconstpointer bytes2)
     * }
     */
    public static int g_bytes_compare(MemorySegment bytes1, MemorySegment bytes2) {
        var mh$ = g_bytes_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_compare", bytes1, bytes2);
            }
            return (int)mh$.invokeExact(bytes1, bytes2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_get_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_get_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gconstpointer g_bytes_get_region(GBytes *bytes, gsize element_size, gsize offset, gsize n_elements)
     * }
     */
    public static FunctionDescriptor g_bytes_get_region$descriptor() {
        return g_bytes_get_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gconstpointer g_bytes_get_region(GBytes *bytes, gsize element_size, gsize offset, gsize n_elements)
     * }
     */
    public static MethodHandle g_bytes_get_region$handle() {
        return g_bytes_get_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gconstpointer g_bytes_get_region(GBytes *bytes, gsize element_size, gsize offset, gsize n_elements)
     * }
     */
    public static MemorySegment g_bytes_get_region(MemorySegment bytes, long element_size, long offset, long n_elements) {
        var mh$ = g_bytes_get_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_get_region", bytes, element_size, offset, n_elements);
            }
            return (MemorySegment)mh$.invokeExact(bytes, element_size, offset, n_elements);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_charset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_charset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_get_charset(const char **charset)
     * }
     */
    public static FunctionDescriptor g_get_charset$descriptor() {
        return g_get_charset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_get_charset(const char **charset)
     * }
     */
    public static MethodHandle g_get_charset$handle() {
        return g_get_charset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_get_charset(const char **charset)
     * }
     */
    public static int g_get_charset(MemorySegment charset) {
        var mh$ = g_get_charset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_charset", charset);
            }
            return (int)mh$.invokeExact(charset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_codeset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_codeset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_get_codeset()
     * }
     */
    public static FunctionDescriptor g_get_codeset$descriptor() {
        return g_get_codeset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_get_codeset()
     * }
     */
    public static MethodHandle g_get_codeset$handle() {
        return g_get_codeset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_get_codeset()
     * }
     */
    public static MemorySegment g_get_codeset() {
        var mh$ = g_get_codeset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_codeset");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_console_charset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_console_charset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_get_console_charset(const char **charset)
     * }
     */
    public static FunctionDescriptor g_get_console_charset$descriptor() {
        return g_get_console_charset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_get_console_charset(const char **charset)
     * }
     */
    public static MethodHandle g_get_console_charset$handle() {
        return g_get_console_charset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_get_console_charset(const char **charset)
     * }
     */
    public static int g_get_console_charset(MemorySegment charset) {
        var mh$ = g_get_console_charset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_console_charset", charset);
            }
            return (int)mh$.invokeExact(charset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_language_names {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_language_names"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *g_get_language_names()
     * }
     */
    public static FunctionDescriptor g_get_language_names$descriptor() {
        return g_get_language_names.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *g_get_language_names()
     * }
     */
    public static MethodHandle g_get_language_names$handle() {
        return g_get_language_names.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *g_get_language_names()
     * }
     */
    public static MemorySegment g_get_language_names() {
        var mh$ = g_get_language_names.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_language_names");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_language_names_with_category {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_language_names_with_category"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *const *g_get_language_names_with_category(const gchar *category_name)
     * }
     */
    public static FunctionDescriptor g_get_language_names_with_category$descriptor() {
        return g_get_language_names_with_category.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *const *g_get_language_names_with_category(const gchar *category_name)
     * }
     */
    public static MethodHandle g_get_language_names_with_category$handle() {
        return g_get_language_names_with_category.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *const *g_get_language_names_with_category(const gchar *category_name)
     * }
     */
    public static MemorySegment g_get_language_names_with_category(MemorySegment category_name) {
        var mh$ = g_get_language_names_with_category.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_language_names_with_category", category_name);
            }
            return (MemorySegment)mh$.invokeExact(category_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_locale_variants {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_locale_variants"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_get_locale_variants(const gchar *locale)
     * }
     */
    public static FunctionDescriptor g_get_locale_variants$descriptor() {
        return g_get_locale_variants.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_get_locale_variants(const gchar *locale)
     * }
     */
    public static MethodHandle g_get_locale_variants$handle() {
        return g_get_locale_variants.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_get_locale_variants(const gchar *locale)
     * }
     */
    public static MemorySegment g_get_locale_variants(MemorySegment locale) {
        var mh$ = g_get_locale_variants.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_locale_variants", locale);
            }
            return (MemorySegment)mh$.invokeExact(locale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_CHECKSUM_MD5 = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CHECKSUM_MD5 = 0
     * }
     */
    public static int G_CHECKSUM_MD5() {
        return G_CHECKSUM_MD5;
    }
    private static final int G_CHECKSUM_SHA1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CHECKSUM_SHA1 = 1
     * }
     */
    public static int G_CHECKSUM_SHA1() {
        return G_CHECKSUM_SHA1;
    }
    private static final int G_CHECKSUM_SHA256 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CHECKSUM_SHA256 = 2
     * }
     */
    public static int G_CHECKSUM_SHA256() {
        return G_CHECKSUM_SHA256;
    }
    private static final int G_CHECKSUM_SHA512 = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CHECKSUM_SHA512 = 3
     * }
     */
    public static int G_CHECKSUM_SHA512() {
        return G_CHECKSUM_SHA512;
    }
    private static final int G_CHECKSUM_SHA384 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CHECKSUM_SHA384 = 4
     * }
     */
    public static int G_CHECKSUM_SHA384() {
        return G_CHECKSUM_SHA384;
    }

    private static class g_checksum_type_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_checksum_type_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gssize g_checksum_type_get_length(GChecksumType checksum_type)
     * }
     */
    public static FunctionDescriptor g_checksum_type_get_length$descriptor() {
        return g_checksum_type_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gssize g_checksum_type_get_length(GChecksumType checksum_type)
     * }
     */
    public static MethodHandle g_checksum_type_get_length$handle() {
        return g_checksum_type_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gssize g_checksum_type_get_length(GChecksumType checksum_type)
     * }
     */
    public static long g_checksum_type_get_length(int checksum_type) {
        var mh$ = g_checksum_type_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_checksum_type_get_length", checksum_type);
            }
            return (long)mh$.invokeExact(checksum_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_checksum_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_checksum_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GChecksum *g_checksum_new(GChecksumType checksum_type)
     * }
     */
    public static FunctionDescriptor g_checksum_new$descriptor() {
        return g_checksum_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GChecksum *g_checksum_new(GChecksumType checksum_type)
     * }
     */
    public static MethodHandle g_checksum_new$handle() {
        return g_checksum_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GChecksum *g_checksum_new(GChecksumType checksum_type)
     * }
     */
    public static MemorySegment g_checksum_new(int checksum_type) {
        var mh$ = g_checksum_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_checksum_new", checksum_type);
            }
            return (MemorySegment)mh$.invokeExact(checksum_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_checksum_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_checksum_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_checksum_reset(GChecksum *checksum)
     * }
     */
    public static FunctionDescriptor g_checksum_reset$descriptor() {
        return g_checksum_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_checksum_reset(GChecksum *checksum)
     * }
     */
    public static MethodHandle g_checksum_reset$handle() {
        return g_checksum_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_checksum_reset(GChecksum *checksum)
     * }
     */
    public static void g_checksum_reset(MemorySegment checksum) {
        var mh$ = g_checksum_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_checksum_reset", checksum);
            }
            mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_checksum_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_checksum_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GChecksum *g_checksum_copy(const GChecksum *checksum)
     * }
     */
    public static FunctionDescriptor g_checksum_copy$descriptor() {
        return g_checksum_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GChecksum *g_checksum_copy(const GChecksum *checksum)
     * }
     */
    public static MethodHandle g_checksum_copy$handle() {
        return g_checksum_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GChecksum *g_checksum_copy(const GChecksum *checksum)
     * }
     */
    public static MemorySegment g_checksum_copy(MemorySegment checksum) {
        var mh$ = g_checksum_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_checksum_copy", checksum);
            }
            return (MemorySegment)mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_checksum_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_checksum_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_checksum_free(GChecksum *checksum)
     * }
     */
    public static FunctionDescriptor g_checksum_free$descriptor() {
        return g_checksum_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_checksum_free(GChecksum *checksum)
     * }
     */
    public static MethodHandle g_checksum_free$handle() {
        return g_checksum_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_checksum_free(GChecksum *checksum)
     * }
     */
    public static void g_checksum_free(MemorySegment checksum) {
        var mh$ = g_checksum_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_checksum_free", checksum);
            }
            mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_checksum_update {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_checksum_update"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_checksum_update(GChecksum *checksum, const guchar *data, gssize length)
     * }
     */
    public static FunctionDescriptor g_checksum_update$descriptor() {
        return g_checksum_update.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_checksum_update(GChecksum *checksum, const guchar *data, gssize length)
     * }
     */
    public static MethodHandle g_checksum_update$handle() {
        return g_checksum_update.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_checksum_update(GChecksum *checksum, const guchar *data, gssize length)
     * }
     */
    public static void g_checksum_update(MemorySegment checksum, MemorySegment data, long length) {
        var mh$ = g_checksum_update.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_checksum_update", checksum, data, length);
            }
            mh$.invokeExact(checksum, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_checksum_get_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_checksum_get_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_checksum_get_string(GChecksum *checksum)
     * }
     */
    public static FunctionDescriptor g_checksum_get_string$descriptor() {
        return g_checksum_get_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_checksum_get_string(GChecksum *checksum)
     * }
     */
    public static MethodHandle g_checksum_get_string$handle() {
        return g_checksum_get_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_checksum_get_string(GChecksum *checksum)
     * }
     */
    public static MemorySegment g_checksum_get_string(MemorySegment checksum) {
        var mh$ = g_checksum_get_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_checksum_get_string", checksum);
            }
            return (MemorySegment)mh$.invokeExact(checksum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_checksum_get_digest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_checksum_get_digest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_checksum_get_digest(GChecksum *checksum, guint8 *buffer, gsize *digest_len)
     * }
     */
    public static FunctionDescriptor g_checksum_get_digest$descriptor() {
        return g_checksum_get_digest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_checksum_get_digest(GChecksum *checksum, guint8 *buffer, gsize *digest_len)
     * }
     */
    public static MethodHandle g_checksum_get_digest$handle() {
        return g_checksum_get_digest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_checksum_get_digest(GChecksum *checksum, guint8 *buffer, gsize *digest_len)
     * }
     */
    public static void g_checksum_get_digest(MemorySegment checksum, MemorySegment buffer, MemorySegment digest_len) {
        var mh$ = g_checksum_get_digest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_checksum_get_digest", checksum, buffer, digest_len);
            }
            mh$.invokeExact(checksum, buffer, digest_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_compute_checksum_for_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_compute_checksum_for_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_compute_checksum_for_data(GChecksumType checksum_type, const guchar *data, gsize length)
     * }
     */
    public static FunctionDescriptor g_compute_checksum_for_data$descriptor() {
        return g_compute_checksum_for_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_compute_checksum_for_data(GChecksumType checksum_type, const guchar *data, gsize length)
     * }
     */
    public static MethodHandle g_compute_checksum_for_data$handle() {
        return g_compute_checksum_for_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_compute_checksum_for_data(GChecksumType checksum_type, const guchar *data, gsize length)
     * }
     */
    public static MemorySegment g_compute_checksum_for_data(int checksum_type, MemorySegment data, long length) {
        var mh$ = g_compute_checksum_for_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_compute_checksum_for_data", checksum_type, data, length);
            }
            return (MemorySegment)mh$.invokeExact(checksum_type, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_compute_checksum_for_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_compute_checksum_for_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_compute_checksum_for_string(GChecksumType checksum_type, const gchar *str, gssize length)
     * }
     */
    public static FunctionDescriptor g_compute_checksum_for_string$descriptor() {
        return g_compute_checksum_for_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_compute_checksum_for_string(GChecksumType checksum_type, const gchar *str, gssize length)
     * }
     */
    public static MethodHandle g_compute_checksum_for_string$handle() {
        return g_compute_checksum_for_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_compute_checksum_for_string(GChecksumType checksum_type, const gchar *str, gssize length)
     * }
     */
    public static MemorySegment g_compute_checksum_for_string(int checksum_type, MemorySegment str, long length) {
        var mh$ = g_compute_checksum_for_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_compute_checksum_for_string", checksum_type, str, length);
            }
            return (MemorySegment)mh$.invokeExact(checksum_type, str, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_compute_checksum_for_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_compute_checksum_for_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_compute_checksum_for_bytes(GChecksumType checksum_type, GBytes *data)
     * }
     */
    public static FunctionDescriptor g_compute_checksum_for_bytes$descriptor() {
        return g_compute_checksum_for_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_compute_checksum_for_bytes(GChecksumType checksum_type, GBytes *data)
     * }
     */
    public static MethodHandle g_compute_checksum_for_bytes$handle() {
        return g_compute_checksum_for_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_compute_checksum_for_bytes(GChecksumType checksum_type, GBytes *data)
     * }
     */
    public static MemorySegment g_compute_checksum_for_bytes(int checksum_type, MemorySegment data) {
        var mh$ = g_compute_checksum_for_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_compute_checksum_for_bytes", checksum_type, data);
            }
            return (MemorySegment)mh$.invokeExact(checksum_type, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_CONVERT_ERROR_NO_CONVERSION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERT_ERROR_NO_CONVERSION = 0
     * }
     */
    public static int G_CONVERT_ERROR_NO_CONVERSION() {
        return G_CONVERT_ERROR_NO_CONVERSION;
    }
    private static final int G_CONVERT_ERROR_ILLEGAL_SEQUENCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERT_ERROR_ILLEGAL_SEQUENCE = 1
     * }
     */
    public static int G_CONVERT_ERROR_ILLEGAL_SEQUENCE() {
        return G_CONVERT_ERROR_ILLEGAL_SEQUENCE;
    }
    private static final int G_CONVERT_ERROR_FAILED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERT_ERROR_FAILED = 2
     * }
     */
    public static int G_CONVERT_ERROR_FAILED() {
        return G_CONVERT_ERROR_FAILED;
    }
    private static final int G_CONVERT_ERROR_PARTIAL_INPUT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERT_ERROR_PARTIAL_INPUT = 3
     * }
     */
    public static int G_CONVERT_ERROR_PARTIAL_INPUT() {
        return G_CONVERT_ERROR_PARTIAL_INPUT;
    }
    private static final int G_CONVERT_ERROR_BAD_URI = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERT_ERROR_BAD_URI = 4
     * }
     */
    public static int G_CONVERT_ERROR_BAD_URI() {
        return G_CONVERT_ERROR_BAD_URI;
    }
    private static final int G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERT_ERROR_NOT_ABSOLUTE_PATH = 5
     * }
     */
    public static int G_CONVERT_ERROR_NOT_ABSOLUTE_PATH() {
        return G_CONVERT_ERROR_NOT_ABSOLUTE_PATH;
    }
    private static final int G_CONVERT_ERROR_NO_MEMORY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERT_ERROR_NO_MEMORY = 6
     * }
     */
    public static int G_CONVERT_ERROR_NO_MEMORY() {
        return G_CONVERT_ERROR_NO_MEMORY;
    }
    private static final int G_CONVERT_ERROR_EMBEDDED_NUL = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERT_ERROR_EMBEDDED_NUL = 7
     * }
     */
    public static int G_CONVERT_ERROR_EMBEDDED_NUL() {
        return G_CONVERT_ERROR_EMBEDDED_NUL;
    }

    private static class g_convert_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_convert_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_convert_error_quark()
     * }
     */
    public static FunctionDescriptor g_convert_error_quark$descriptor() {
        return g_convert_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_convert_error_quark()
     * }
     */
    public static MethodHandle g_convert_error_quark$handle() {
        return g_convert_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_convert_error_quark()
     * }
     */
    public static int g_convert_error_quark() {
        var mh$ = g_convert_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_convert_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _GIConv *GIConv
     * }
     */
    public static final AddressLayout GIConv = app_indicator_h.C_POINTER;

    private static class g_iconv_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_iconv_open"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIConv g_iconv_open(const gchar *to_codeset, const gchar *from_codeset)
     * }
     */
    public static FunctionDescriptor g_iconv_open$descriptor() {
        return g_iconv_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIConv g_iconv_open(const gchar *to_codeset, const gchar *from_codeset)
     * }
     */
    public static MethodHandle g_iconv_open$handle() {
        return g_iconv_open.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIConv g_iconv_open(const gchar *to_codeset, const gchar *from_codeset)
     * }
     */
    public static MemorySegment g_iconv_open(MemorySegment to_codeset, MemorySegment from_codeset) {
        var mh$ = g_iconv_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_iconv_open", to_codeset, from_codeset);
            }
            return (MemorySegment)mh$.invokeExact(to_codeset, from_codeset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_iconv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_iconv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_iconv(GIConv converter, gchar **inbuf, gsize *inbytes_left, gchar **outbuf, gsize *outbytes_left)
     * }
     */
    public static FunctionDescriptor g_iconv$descriptor() {
        return g_iconv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_iconv(GIConv converter, gchar **inbuf, gsize *inbytes_left, gchar **outbuf, gsize *outbytes_left)
     * }
     */
    public static MethodHandle g_iconv$handle() {
        return g_iconv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_iconv(GIConv converter, gchar **inbuf, gsize *inbytes_left, gchar **outbuf, gsize *outbytes_left)
     * }
     */
    public static long g_iconv(MemorySegment converter, MemorySegment inbuf, MemorySegment inbytes_left, MemorySegment outbuf, MemorySegment outbytes_left) {
        var mh$ = g_iconv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_iconv", converter, inbuf, inbytes_left, outbuf, outbytes_left);
            }
            return (long)mh$.invokeExact(converter, inbuf, inbytes_left, outbuf, outbytes_left);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_iconv_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_iconv_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_iconv_close(GIConv converter)
     * }
     */
    public static FunctionDescriptor g_iconv_close$descriptor() {
        return g_iconv_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_iconv_close(GIConv converter)
     * }
     */
    public static MethodHandle g_iconv_close$handle() {
        return g_iconv_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_iconv_close(GIConv converter)
     * }
     */
    public static int g_iconv_close(MemorySegment converter) {
        var mh$ = g_iconv_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_iconv_close", converter);
            }
            return (int)mh$.invokeExact(converter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_convert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_convert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_convert(const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_convert$descriptor() {
        return g_convert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_convert(const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_convert$handle() {
        return g_convert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_convert(const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MemorySegment g_convert(MemorySegment str, long len, MemorySegment to_codeset, MemorySegment from_codeset, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_convert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_convert", str, len, to_codeset, from_codeset, bytes_read, bytes_written, error);
            }
            return (MemorySegment)mh$.invokeExact(str, len, to_codeset, from_codeset, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_convert_with_iconv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_convert_with_iconv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_convert_with_iconv(const gchar *str, gssize len, GIConv converter, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_convert_with_iconv$descriptor() {
        return g_convert_with_iconv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_convert_with_iconv(const gchar *str, gssize len, GIConv converter, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_convert_with_iconv$handle() {
        return g_convert_with_iconv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_convert_with_iconv(const gchar *str, gssize len, GIConv converter, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MemorySegment g_convert_with_iconv(MemorySegment str, long len, MemorySegment converter, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_convert_with_iconv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_convert_with_iconv", str, len, converter, bytes_read, bytes_written, error);
            }
            return (MemorySegment)mh$.invokeExact(str, len, converter, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_convert_with_fallback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_convert_with_fallback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_convert_with_fallback(const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, const gchar *fallback, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_convert_with_fallback$descriptor() {
        return g_convert_with_fallback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_convert_with_fallback(const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, const gchar *fallback, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_convert_with_fallback$handle() {
        return g_convert_with_fallback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_convert_with_fallback(const gchar *str, gssize len, const gchar *to_codeset, const gchar *from_codeset, const gchar *fallback, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MemorySegment g_convert_with_fallback(MemorySegment str, long len, MemorySegment to_codeset, MemorySegment from_codeset, MemorySegment fallback, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_convert_with_fallback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_convert_with_fallback", str, len, to_codeset, from_codeset, fallback, bytes_read, bytes_written, error);
            }
            return (MemorySegment)mh$.invokeExact(str, len, to_codeset, from_codeset, fallback, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_locale_to_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_locale_to_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_locale_to_utf8(const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_locale_to_utf8$descriptor() {
        return g_locale_to_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_locale_to_utf8(const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_locale_to_utf8$handle() {
        return g_locale_to_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_locale_to_utf8(const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MemorySegment g_locale_to_utf8(MemorySegment opsysstring, long len, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_locale_to_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_locale_to_utf8", opsysstring, len, bytes_read, bytes_written, error);
            }
            return (MemorySegment)mh$.invokeExact(opsysstring, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_locale_from_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_locale_from_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_locale_from_utf8(const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_locale_from_utf8$descriptor() {
        return g_locale_from_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_locale_from_utf8(const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_locale_from_utf8$handle() {
        return g_locale_from_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_locale_from_utf8(const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MemorySegment g_locale_from_utf8(MemorySegment utf8string, long len, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_locale_from_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_locale_from_utf8", utf8string, len, bytes_read, bytes_written, error);
            }
            return (MemorySegment)mh$.invokeExact(utf8string, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_to_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_to_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_filename_to_utf8(const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_filename_to_utf8$descriptor() {
        return g_filename_to_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_filename_to_utf8(const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_filename_to_utf8$handle() {
        return g_filename_to_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_filename_to_utf8(const gchar *opsysstring, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MemorySegment g_filename_to_utf8(MemorySegment opsysstring, long len, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_filename_to_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_to_utf8", opsysstring, len, bytes_read, bytes_written, error);
            }
            return (MemorySegment)mh$.invokeExact(opsysstring, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_from_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_from_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_filename_from_utf8(const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static FunctionDescriptor g_filename_from_utf8$descriptor() {
        return g_filename_from_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_filename_from_utf8(const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MethodHandle g_filename_from_utf8$handle() {
        return g_filename_from_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_filename_from_utf8(const gchar *utf8string, gssize len, gsize *bytes_read, gsize *bytes_written, GError **error)
     * }
     */
    public static MemorySegment g_filename_from_utf8(MemorySegment utf8string, long len, MemorySegment bytes_read, MemorySegment bytes_written, MemorySegment error) {
        var mh$ = g_filename_from_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_from_utf8", utf8string, len, bytes_read, bytes_written, error);
            }
            return (MemorySegment)mh$.invokeExact(utf8string, len, bytes_read, bytes_written, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_from_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_from_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_filename_from_uri(const gchar *uri, gchar **hostname, GError **error)
     * }
     */
    public static FunctionDescriptor g_filename_from_uri$descriptor() {
        return g_filename_from_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_filename_from_uri(const gchar *uri, gchar **hostname, GError **error)
     * }
     */
    public static MethodHandle g_filename_from_uri$handle() {
        return g_filename_from_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_filename_from_uri(const gchar *uri, gchar **hostname, GError **error)
     * }
     */
    public static MemorySegment g_filename_from_uri(MemorySegment uri, MemorySegment hostname, MemorySegment error) {
        var mh$ = g_filename_from_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_from_uri", uri, hostname, error);
            }
            return (MemorySegment)mh$.invokeExact(uri, hostname, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_to_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_to_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_filename_to_uri(const gchar *filename, const gchar *hostname, GError **error)
     * }
     */
    public static FunctionDescriptor g_filename_to_uri$descriptor() {
        return g_filename_to_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_filename_to_uri(const gchar *filename, const gchar *hostname, GError **error)
     * }
     */
    public static MethodHandle g_filename_to_uri$handle() {
        return g_filename_to_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_filename_to_uri(const gchar *filename, const gchar *hostname, GError **error)
     * }
     */
    public static MemorySegment g_filename_to_uri(MemorySegment filename, MemorySegment hostname, MemorySegment error) {
        var mh$ = g_filename_to_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_to_uri", filename, hostname, error);
            }
            return (MemorySegment)mh$.invokeExact(filename, hostname, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_display_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_display_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_filename_display_name(const gchar *filename)
     * }
     */
    public static FunctionDescriptor g_filename_display_name$descriptor() {
        return g_filename_display_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_filename_display_name(const gchar *filename)
     * }
     */
    public static MethodHandle g_filename_display_name$handle() {
        return g_filename_display_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_filename_display_name(const gchar *filename)
     * }
     */
    public static MemorySegment g_filename_display_name(MemorySegment filename) {
        var mh$ = g_filename_display_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_display_name", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_filename_charsets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_filename_charsets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_get_filename_charsets(const gchar ***filename_charsets)
     * }
     */
    public static FunctionDescriptor g_get_filename_charsets$descriptor() {
        return g_get_filename_charsets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_get_filename_charsets(const gchar ***filename_charsets)
     * }
     */
    public static MethodHandle g_get_filename_charsets$handle() {
        return g_get_filename_charsets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_get_filename_charsets(const gchar ***filename_charsets)
     * }
     */
    public static int g_get_filename_charsets(MemorySegment filename_charsets) {
        var mh$ = g_get_filename_charsets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_filename_charsets", filename_charsets);
            }
            return (int)mh$.invokeExact(filename_charsets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_filename_display_basename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_filename_display_basename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_filename_display_basename(const gchar *filename)
     * }
     */
    public static FunctionDescriptor g_filename_display_basename$descriptor() {
        return g_filename_display_basename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_filename_display_basename(const gchar *filename)
     * }
     */
    public static MethodHandle g_filename_display_basename$handle() {
        return g_filename_display_basename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_filename_display_basename(const gchar *filename)
     * }
     */
    public static MemorySegment g_filename_display_basename(MemorySegment filename) {
        var mh$ = g_filename_display_basename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_filename_display_basename", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_list_extract_uris {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_list_extract_uris"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_uri_list_extract_uris(const gchar *uri_list)
     * }
     */
    public static FunctionDescriptor g_uri_list_extract_uris$descriptor() {
        return g_uri_list_extract_uris.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_uri_list_extract_uris(const gchar *uri_list)
     * }
     */
    public static MethodHandle g_uri_list_extract_uris$handle() {
        return g_uri_list_extract_uris.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_uri_list_extract_uris(const gchar *uri_list)
     * }
     */
    public static MemorySegment g_uri_list_extract_uris(MemorySegment uri_list) {
        var mh$ = g_uri_list_extract_uris.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_list_extract_uris", uri_list);
            }
            return (MemorySegment)mh$.invokeExact(uri_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_datalist_init(GData **datalist)
     * }
     */
    public static FunctionDescriptor g_datalist_init$descriptor() {
        return g_datalist_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_datalist_init(GData **datalist)
     * }
     */
    public static MethodHandle g_datalist_init$handle() {
        return g_datalist_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_datalist_init(GData **datalist)
     * }
     */
    public static void g_datalist_init(MemorySegment datalist) {
        var mh$ = g_datalist_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_init", datalist);
            }
            mh$.invokeExact(datalist);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_datalist_clear(GData **datalist)
     * }
     */
    public static FunctionDescriptor g_datalist_clear$descriptor() {
        return g_datalist_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_datalist_clear(GData **datalist)
     * }
     */
    public static MethodHandle g_datalist_clear$handle() {
        return g_datalist_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_datalist_clear(GData **datalist)
     * }
     */
    public static void g_datalist_clear(MemorySegment datalist) {
        var mh$ = g_datalist_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_clear", datalist);
            }
            mh$.invokeExact(datalist);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_id_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_id_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_datalist_id_get_data(GData **datalist, GQuark key_id)
     * }
     */
    public static FunctionDescriptor g_datalist_id_get_data$descriptor() {
        return g_datalist_id_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_datalist_id_get_data(GData **datalist, GQuark key_id)
     * }
     */
    public static MethodHandle g_datalist_id_get_data$handle() {
        return g_datalist_id_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_datalist_id_get_data(GData **datalist, GQuark key_id)
     * }
     */
    public static MemorySegment g_datalist_id_get_data(MemorySegment datalist, int key_id) {
        var mh$ = g_datalist_id_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_id_get_data", datalist, key_id);
            }
            return (MemorySegment)mh$.invokeExact(datalist, key_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_id_set_data_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_id_set_data_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_datalist_id_set_data_full(GData **datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func)
     * }
     */
    public static FunctionDescriptor g_datalist_id_set_data_full$descriptor() {
        return g_datalist_id_set_data_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_datalist_id_set_data_full(GData **datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func)
     * }
     */
    public static MethodHandle g_datalist_id_set_data_full$handle() {
        return g_datalist_id_set_data_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_datalist_id_set_data_full(GData **datalist, GQuark key_id, gpointer data, GDestroyNotify destroy_func)
     * }
     */
    public static void g_datalist_id_set_data_full(MemorySegment datalist, int key_id, MemorySegment data, MemorySegment destroy_func) {
        var mh$ = g_datalist_id_set_data_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_id_set_data_full", datalist, key_id, data, destroy_func);
            }
            mh$.invokeExact(datalist, key_id, data, destroy_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_id_remove_multiple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_id_remove_multiple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_datalist_id_remove_multiple(GData **datalist, GQuark *keys, gsize n_keys)
     * }
     */
    public static FunctionDescriptor g_datalist_id_remove_multiple$descriptor() {
        return g_datalist_id_remove_multiple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_datalist_id_remove_multiple(GData **datalist, GQuark *keys, gsize n_keys)
     * }
     */
    public static MethodHandle g_datalist_id_remove_multiple$handle() {
        return g_datalist_id_remove_multiple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_datalist_id_remove_multiple(GData **datalist, GQuark *keys, gsize n_keys)
     * }
     */
    public static void g_datalist_id_remove_multiple(MemorySegment datalist, MemorySegment keys, long n_keys) {
        var mh$ = g_datalist_id_remove_multiple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_id_remove_multiple", datalist, keys, n_keys);
            }
            mh$.invokeExact(datalist, keys, n_keys);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_id_dup_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_id_dup_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_datalist_id_dup_data(GData **datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_datalist_id_dup_data$descriptor() {
        return g_datalist_id_dup_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_datalist_id_dup_data(GData **datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_datalist_id_dup_data$handle() {
        return g_datalist_id_dup_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_datalist_id_dup_data(GData **datalist, GQuark key_id, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_datalist_id_dup_data(MemorySegment datalist, int key_id, MemorySegment dup_func, MemorySegment user_data) {
        var mh$ = g_datalist_id_dup_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_id_dup_data", datalist, key_id, dup_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(datalist, key_id, dup_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_id_replace_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_id_replace_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_datalist_id_replace_data(GData **datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static FunctionDescriptor g_datalist_id_replace_data$descriptor() {
        return g_datalist_id_replace_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_datalist_id_replace_data(GData **datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static MethodHandle g_datalist_id_replace_data$handle() {
        return g_datalist_id_replace_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_datalist_id_replace_data(GData **datalist, GQuark key_id, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static int g_datalist_id_replace_data(MemorySegment datalist, int key_id, MemorySegment oldval, MemorySegment newval, MemorySegment destroy, MemorySegment old_destroy) {
        var mh$ = g_datalist_id_replace_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_id_replace_data", datalist, key_id, oldval, newval, destroy, old_destroy);
            }
            return (int)mh$.invokeExact(datalist, key_id, oldval, newval, destroy, old_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_id_remove_no_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_id_remove_no_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_datalist_id_remove_no_notify(GData **datalist, GQuark key_id)
     * }
     */
    public static FunctionDescriptor g_datalist_id_remove_no_notify$descriptor() {
        return g_datalist_id_remove_no_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_datalist_id_remove_no_notify(GData **datalist, GQuark key_id)
     * }
     */
    public static MethodHandle g_datalist_id_remove_no_notify$handle() {
        return g_datalist_id_remove_no_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_datalist_id_remove_no_notify(GData **datalist, GQuark key_id)
     * }
     */
    public static MemorySegment g_datalist_id_remove_no_notify(MemorySegment datalist, int key_id) {
        var mh$ = g_datalist_id_remove_no_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_id_remove_no_notify", datalist, key_id);
            }
            return (MemorySegment)mh$.invokeExact(datalist, key_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_datalist_foreach(GData **datalist, GDataForeachFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_datalist_foreach$descriptor() {
        return g_datalist_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_datalist_foreach(GData **datalist, GDataForeachFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_datalist_foreach$handle() {
        return g_datalist_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_datalist_foreach(GData **datalist, GDataForeachFunc func, gpointer user_data)
     * }
     */
    public static void g_datalist_foreach(MemorySegment datalist, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_datalist_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_foreach", datalist, func, user_data);
            }
            mh$.invokeExact(datalist, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_datalist_set_flags(GData **datalist, guint flags)
     * }
     */
    public static FunctionDescriptor g_datalist_set_flags$descriptor() {
        return g_datalist_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_datalist_set_flags(GData **datalist, guint flags)
     * }
     */
    public static MethodHandle g_datalist_set_flags$handle() {
        return g_datalist_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_datalist_set_flags(GData **datalist, guint flags)
     * }
     */
    public static void g_datalist_set_flags(MemorySegment datalist, int flags) {
        var mh$ = g_datalist_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_set_flags", datalist, flags);
            }
            mh$.invokeExact(datalist, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_unset_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_unset_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_datalist_unset_flags(GData **datalist, guint flags)
     * }
     */
    public static FunctionDescriptor g_datalist_unset_flags$descriptor() {
        return g_datalist_unset_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_datalist_unset_flags(GData **datalist, guint flags)
     * }
     */
    public static MethodHandle g_datalist_unset_flags$handle() {
        return g_datalist_unset_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_datalist_unset_flags(GData **datalist, guint flags)
     * }
     */
    public static void g_datalist_unset_flags(MemorySegment datalist, int flags) {
        var mh$ = g_datalist_unset_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_unset_flags", datalist, flags);
            }
            mh$.invokeExact(datalist, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_datalist_get_flags(GData **datalist)
     * }
     */
    public static FunctionDescriptor g_datalist_get_flags$descriptor() {
        return g_datalist_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_datalist_get_flags(GData **datalist)
     * }
     */
    public static MethodHandle g_datalist_get_flags$handle() {
        return g_datalist_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_datalist_get_flags(GData **datalist)
     * }
     */
    public static int g_datalist_get_flags(MemorySegment datalist) {
        var mh$ = g_datalist_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_get_flags", datalist);
            }
            return (int)mh$.invokeExact(datalist);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dataset_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dataset_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dataset_destroy(gconstpointer dataset_location)
     * }
     */
    public static FunctionDescriptor g_dataset_destroy$descriptor() {
        return g_dataset_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dataset_destroy(gconstpointer dataset_location)
     * }
     */
    public static MethodHandle g_dataset_destroy$handle() {
        return g_dataset_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dataset_destroy(gconstpointer dataset_location)
     * }
     */
    public static void g_dataset_destroy(MemorySegment dataset_location) {
        var mh$ = g_dataset_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dataset_destroy", dataset_location);
            }
            mh$.invokeExact(dataset_location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dataset_id_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dataset_id_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_dataset_id_get_data(gconstpointer dataset_location, GQuark key_id)
     * }
     */
    public static FunctionDescriptor g_dataset_id_get_data$descriptor() {
        return g_dataset_id_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_dataset_id_get_data(gconstpointer dataset_location, GQuark key_id)
     * }
     */
    public static MethodHandle g_dataset_id_get_data$handle() {
        return g_dataset_id_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_dataset_id_get_data(gconstpointer dataset_location, GQuark key_id)
     * }
     */
    public static MemorySegment g_dataset_id_get_data(MemorySegment dataset_location, int key_id) {
        var mh$ = g_dataset_id_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dataset_id_get_data", dataset_location, key_id);
            }
            return (MemorySegment)mh$.invokeExact(dataset_location, key_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_datalist_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_datalist_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_datalist_get_data(GData **datalist, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_datalist_get_data$descriptor() {
        return g_datalist_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_datalist_get_data(GData **datalist, const gchar *key)
     * }
     */
    public static MethodHandle g_datalist_get_data$handle() {
        return g_datalist_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_datalist_get_data(GData **datalist, const gchar *key)
     * }
     */
    public static MemorySegment g_datalist_get_data(MemorySegment datalist, MemorySegment key) {
        var mh$ = g_datalist_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_datalist_get_data", datalist, key);
            }
            return (MemorySegment)mh$.invokeExact(datalist, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dataset_id_set_data_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dataset_id_set_data_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dataset_id_set_data_full(gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func)
     * }
     */
    public static FunctionDescriptor g_dataset_id_set_data_full$descriptor() {
        return g_dataset_id_set_data_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dataset_id_set_data_full(gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func)
     * }
     */
    public static MethodHandle g_dataset_id_set_data_full$handle() {
        return g_dataset_id_set_data_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dataset_id_set_data_full(gconstpointer dataset_location, GQuark key_id, gpointer data, GDestroyNotify destroy_func)
     * }
     */
    public static void g_dataset_id_set_data_full(MemorySegment dataset_location, int key_id, MemorySegment data, MemorySegment destroy_func) {
        var mh$ = g_dataset_id_set_data_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dataset_id_set_data_full", dataset_location, key_id, data, destroy_func);
            }
            mh$.invokeExact(dataset_location, key_id, data, destroy_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dataset_id_remove_no_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dataset_id_remove_no_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_dataset_id_remove_no_notify(gconstpointer dataset_location, GQuark key_id)
     * }
     */
    public static FunctionDescriptor g_dataset_id_remove_no_notify$descriptor() {
        return g_dataset_id_remove_no_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_dataset_id_remove_no_notify(gconstpointer dataset_location, GQuark key_id)
     * }
     */
    public static MethodHandle g_dataset_id_remove_no_notify$handle() {
        return g_dataset_id_remove_no_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_dataset_id_remove_no_notify(gconstpointer dataset_location, GQuark key_id)
     * }
     */
    public static MemorySegment g_dataset_id_remove_no_notify(MemorySegment dataset_location, int key_id) {
        var mh$ = g_dataset_id_remove_no_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dataset_id_remove_no_notify", dataset_location, key_id);
            }
            return (MemorySegment)mh$.invokeExact(dataset_location, key_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dataset_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dataset_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dataset_foreach(gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_dataset_foreach$descriptor() {
        return g_dataset_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dataset_foreach(gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_dataset_foreach$handle() {
        return g_dataset_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dataset_foreach(gconstpointer dataset_location, GDataForeachFunc func, gpointer user_data)
     * }
     */
    public static void g_dataset_foreach(MemorySegment dataset_location, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_dataset_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dataset_foreach", dataset_location, func, user_data);
            }
            mh$.invokeExact(dataset_location, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef gint32 GTime
     * }
     */
    public static final OfInt GTime = app_indicator_h.C_INT;
    /**
     * {@snippet lang=c :
     * typedef guint16 GDateYear
     * }
     */
    public static final OfShort GDateYear = app_indicator_h.C_SHORT;
    /**
     * {@snippet lang=c :
     * typedef guint8 GDateDay
     * }
     */
    public static final OfByte GDateDay = app_indicator_h.C_CHAR;
    private static final int G_DATE_DAY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_DAY = 0
     * }
     */
    public static int G_DATE_DAY() {
        return G_DATE_DAY;
    }
    private static final int G_DATE_MONTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_MONTH = 1
     * }
     */
    public static int G_DATE_MONTH() {
        return G_DATE_MONTH;
    }
    private static final int G_DATE_YEAR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_YEAR = 2
     * }
     */
    public static int G_DATE_YEAR() {
        return G_DATE_YEAR;
    }
    private static final int G_DATE_BAD_WEEKDAY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_BAD_WEEKDAY = 0
     * }
     */
    public static int G_DATE_BAD_WEEKDAY() {
        return G_DATE_BAD_WEEKDAY;
    }
    private static final int G_DATE_MONDAY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_MONDAY = 1
     * }
     */
    public static int G_DATE_MONDAY() {
        return G_DATE_MONDAY;
    }
    private static final int G_DATE_TUESDAY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_TUESDAY = 2
     * }
     */
    public static int G_DATE_TUESDAY() {
        return G_DATE_TUESDAY;
    }
    private static final int G_DATE_WEDNESDAY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_WEDNESDAY = 3
     * }
     */
    public static int G_DATE_WEDNESDAY() {
        return G_DATE_WEDNESDAY;
    }
    private static final int G_DATE_THURSDAY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_THURSDAY = 4
     * }
     */
    public static int G_DATE_THURSDAY() {
        return G_DATE_THURSDAY;
    }
    private static final int G_DATE_FRIDAY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_FRIDAY = 5
     * }
     */
    public static int G_DATE_FRIDAY() {
        return G_DATE_FRIDAY;
    }
    private static final int G_DATE_SATURDAY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_SATURDAY = 6
     * }
     */
    public static int G_DATE_SATURDAY() {
        return G_DATE_SATURDAY;
    }
    private static final int G_DATE_SUNDAY = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_SUNDAY = 7
     * }
     */
    public static int G_DATE_SUNDAY() {
        return G_DATE_SUNDAY;
    }
    private static final int G_DATE_BAD_MONTH = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_BAD_MONTH = 0
     * }
     */
    public static int G_DATE_BAD_MONTH() {
        return G_DATE_BAD_MONTH;
    }
    private static final int G_DATE_JANUARY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_JANUARY = 1
     * }
     */
    public static int G_DATE_JANUARY() {
        return G_DATE_JANUARY;
    }
    private static final int G_DATE_FEBRUARY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_FEBRUARY = 2
     * }
     */
    public static int G_DATE_FEBRUARY() {
        return G_DATE_FEBRUARY;
    }
    private static final int G_DATE_MARCH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_MARCH = 3
     * }
     */
    public static int G_DATE_MARCH() {
        return G_DATE_MARCH;
    }
    private static final int G_DATE_APRIL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_APRIL = 4
     * }
     */
    public static int G_DATE_APRIL() {
        return G_DATE_APRIL;
    }
    private static final int G_DATE_MAY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_MAY = 5
     * }
     */
    public static int G_DATE_MAY() {
        return G_DATE_MAY;
    }
    private static final int G_DATE_JUNE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_JUNE = 6
     * }
     */
    public static int G_DATE_JUNE() {
        return G_DATE_JUNE;
    }
    private static final int G_DATE_JULY = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_JULY = 7
     * }
     */
    public static int G_DATE_JULY() {
        return G_DATE_JULY;
    }
    private static final int G_DATE_AUGUST = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_AUGUST = 8
     * }
     */
    public static int G_DATE_AUGUST() {
        return G_DATE_AUGUST;
    }
    private static final int G_DATE_SEPTEMBER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_SEPTEMBER = 9
     * }
     */
    public static int G_DATE_SEPTEMBER() {
        return G_DATE_SEPTEMBER;
    }
    private static final int G_DATE_OCTOBER = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_OCTOBER = 10
     * }
     */
    public static int G_DATE_OCTOBER() {
        return G_DATE_OCTOBER;
    }
    private static final int G_DATE_NOVEMBER = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_NOVEMBER = 11
     * }
     */
    public static int G_DATE_NOVEMBER() {
        return G_DATE_NOVEMBER;
    }
    private static final int G_DATE_DECEMBER = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATE_DECEMBER = 12
     * }
     */
    public static int G_DATE_DECEMBER() {
        return G_DATE_DECEMBER;
    }

    private static class g_date_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDate *g_date_new()
     * }
     */
    public static FunctionDescriptor g_date_new$descriptor() {
        return g_date_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDate *g_date_new()
     * }
     */
    public static MethodHandle g_date_new$handle() {
        return g_date_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDate *g_date_new()
     * }
     */
    public static MemorySegment g_date_new() {
        var mh$ = g_date_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_new_dmy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_new_dmy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDate *g_date_new_dmy(GDateDay day, GDateMonth month, GDateYear year)
     * }
     */
    public static FunctionDescriptor g_date_new_dmy$descriptor() {
        return g_date_new_dmy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDate *g_date_new_dmy(GDateDay day, GDateMonth month, GDateYear year)
     * }
     */
    public static MethodHandle g_date_new_dmy$handle() {
        return g_date_new_dmy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDate *g_date_new_dmy(GDateDay day, GDateMonth month, GDateYear year)
     * }
     */
    public static MemorySegment g_date_new_dmy(byte day, int month, short year) {
        var mh$ = g_date_new_dmy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_new_dmy", day, month, year);
            }
            return (MemorySegment)mh$.invokeExact(day, month, year);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_new_julian {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_new_julian"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDate *g_date_new_julian(guint32 julian_day)
     * }
     */
    public static FunctionDescriptor g_date_new_julian$descriptor() {
        return g_date_new_julian.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDate *g_date_new_julian(guint32 julian_day)
     * }
     */
    public static MethodHandle g_date_new_julian$handle() {
        return g_date_new_julian.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDate *g_date_new_julian(guint32 julian_day)
     * }
     */
    public static MemorySegment g_date_new_julian(int julian_day) {
        var mh$ = g_date_new_julian.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_new_julian", julian_day);
            }
            return (MemorySegment)mh$.invokeExact(julian_day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_free(GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_free$descriptor() {
        return g_date_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_free(GDate *date)
     * }
     */
    public static MethodHandle g_date_free$handle() {
        return g_date_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_free(GDate *date)
     * }
     */
    public static void g_date_free(MemorySegment date) {
        var mh$ = g_date_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_free", date);
            }
            mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDate *g_date_copy(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_copy$descriptor() {
        return g_date_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDate *g_date_copy(const GDate *date)
     * }
     */
    public static MethodHandle g_date_copy$handle() {
        return g_date_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDate *g_date_copy(const GDate *date)
     * }
     */
    public static MemorySegment g_date_copy(MemorySegment date) {
        var mh$ = g_date_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_copy", date);
            }
            return (MemorySegment)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_valid$descriptor() {
        return g_date_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid(const GDate *date)
     * }
     */
    public static MethodHandle g_date_valid$handle() {
        return g_date_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_valid(const GDate *date)
     * }
     */
    public static int g_date_valid(MemorySegment date) {
        var mh$ = g_date_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_valid", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_valid_day {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_valid_day"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_day(GDateDay day)
     * }
     */
    public static FunctionDescriptor g_date_valid_day$descriptor() {
        return g_date_valid_day.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_day(GDateDay day)
     * }
     */
    public static MethodHandle g_date_valid_day$handle() {
        return g_date_valid_day.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_valid_day(GDateDay day)
     * }
     */
    public static int g_date_valid_day(byte day) {
        var mh$ = g_date_valid_day.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_valid_day", day);
            }
            return (int)mh$.invokeExact(day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_valid_month {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_valid_month"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_month(GDateMonth month)
     * }
     */
    public static FunctionDescriptor g_date_valid_month$descriptor() {
        return g_date_valid_month.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_month(GDateMonth month)
     * }
     */
    public static MethodHandle g_date_valid_month$handle() {
        return g_date_valid_month.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_valid_month(GDateMonth month)
     * }
     */
    public static int g_date_valid_month(int month) {
        var mh$ = g_date_valid_month.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_valid_month", month);
            }
            return (int)mh$.invokeExact(month);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_valid_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_valid_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_year(GDateYear year)
     * }
     */
    public static FunctionDescriptor g_date_valid_year$descriptor() {
        return g_date_valid_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_year(GDateYear year)
     * }
     */
    public static MethodHandle g_date_valid_year$handle() {
        return g_date_valid_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_valid_year(GDateYear year)
     * }
     */
    public static int g_date_valid_year(short year) {
        var mh$ = g_date_valid_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_valid_year", year);
            }
            return (int)mh$.invokeExact(year);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_valid_weekday {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_valid_weekday"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_weekday(GDateWeekday weekday)
     * }
     */
    public static FunctionDescriptor g_date_valid_weekday$descriptor() {
        return g_date_valid_weekday.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_weekday(GDateWeekday weekday)
     * }
     */
    public static MethodHandle g_date_valid_weekday$handle() {
        return g_date_valid_weekday.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_valid_weekday(GDateWeekday weekday)
     * }
     */
    public static int g_date_valid_weekday(int weekday) {
        var mh$ = g_date_valid_weekday.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_valid_weekday", weekday);
            }
            return (int)mh$.invokeExact(weekday);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_valid_julian {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_valid_julian"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_julian(guint32 julian_date)
     * }
     */
    public static FunctionDescriptor g_date_valid_julian$descriptor() {
        return g_date_valid_julian.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_julian(guint32 julian_date)
     * }
     */
    public static MethodHandle g_date_valid_julian$handle() {
        return g_date_valid_julian.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_valid_julian(guint32 julian_date)
     * }
     */
    public static int g_date_valid_julian(int julian_date) {
        var mh$ = g_date_valid_julian.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_valid_julian", julian_date);
            }
            return (int)mh$.invokeExact(julian_date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_valid_dmy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_valid_dmy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_dmy(GDateDay day, GDateMonth month, GDateYear year)
     * }
     */
    public static FunctionDescriptor g_date_valid_dmy$descriptor() {
        return g_date_valid_dmy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_valid_dmy(GDateDay day, GDateMonth month, GDateYear year)
     * }
     */
    public static MethodHandle g_date_valid_dmy$handle() {
        return g_date_valid_dmy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_valid_dmy(GDateDay day, GDateMonth month, GDateYear year)
     * }
     */
    public static int g_date_valid_dmy(byte day, int month, short year) {
        var mh$ = g_date_valid_dmy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_valid_dmy", day, month, year);
            }
            return (int)mh$.invokeExact(day, month, year);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_weekday {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_weekday"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateWeekday g_date_get_weekday(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_get_weekday$descriptor() {
        return g_date_get_weekday.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateWeekday g_date_get_weekday(const GDate *date)
     * }
     */
    public static MethodHandle g_date_get_weekday$handle() {
        return g_date_get_weekday.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateWeekday g_date_get_weekday(const GDate *date)
     * }
     */
    public static int g_date_get_weekday(MemorySegment date) {
        var mh$ = g_date_get_weekday.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_weekday", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_month {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_month"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateMonth g_date_get_month(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_get_month$descriptor() {
        return g_date_get_month.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateMonth g_date_get_month(const GDate *date)
     * }
     */
    public static MethodHandle g_date_get_month$handle() {
        return g_date_get_month.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateMonth g_date_get_month(const GDate *date)
     * }
     */
    public static int g_date_get_month(MemorySegment date) {
        var mh$ = g_date_get_month.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_month", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_SHORT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateYear g_date_get_year(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_get_year$descriptor() {
        return g_date_get_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateYear g_date_get_year(const GDate *date)
     * }
     */
    public static MethodHandle g_date_get_year$handle() {
        return g_date_get_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateYear g_date_get_year(const GDate *date)
     * }
     */
    public static short g_date_get_year(MemorySegment date) {
        var mh$ = g_date_get_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_year", date);
            }
            return (short)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_day {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_day"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDateDay g_date_get_day(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_get_day$descriptor() {
        return g_date_get_day.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDateDay g_date_get_day(const GDate *date)
     * }
     */
    public static MethodHandle g_date_get_day$handle() {
        return g_date_get_day.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDateDay g_date_get_day(const GDate *date)
     * }
     */
    public static byte g_date_get_day(MemorySegment date) {
        var mh$ = g_date_get_day.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_day", date);
            }
            return (byte)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_julian {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_julian"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_date_get_julian(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_get_julian$descriptor() {
        return g_date_get_julian.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_date_get_julian(const GDate *date)
     * }
     */
    public static MethodHandle g_date_get_julian$handle() {
        return g_date_get_julian.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_date_get_julian(const GDate *date)
     * }
     */
    public static int g_date_get_julian(MemorySegment date) {
        var mh$ = g_date_get_julian.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_julian", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_day_of_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_day_of_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_date_get_day_of_year(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_get_day_of_year$descriptor() {
        return g_date_get_day_of_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_date_get_day_of_year(const GDate *date)
     * }
     */
    public static MethodHandle g_date_get_day_of_year$handle() {
        return g_date_get_day_of_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_date_get_day_of_year(const GDate *date)
     * }
     */
    public static int g_date_get_day_of_year(MemorySegment date) {
        var mh$ = g_date_get_day_of_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_day_of_year", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_monday_week_of_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_monday_week_of_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_date_get_monday_week_of_year(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_get_monday_week_of_year$descriptor() {
        return g_date_get_monday_week_of_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_date_get_monday_week_of_year(const GDate *date)
     * }
     */
    public static MethodHandle g_date_get_monday_week_of_year$handle() {
        return g_date_get_monday_week_of_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_date_get_monday_week_of_year(const GDate *date)
     * }
     */
    public static int g_date_get_monday_week_of_year(MemorySegment date) {
        var mh$ = g_date_get_monday_week_of_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_monday_week_of_year", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_sunday_week_of_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_sunday_week_of_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_date_get_sunday_week_of_year(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_get_sunday_week_of_year$descriptor() {
        return g_date_get_sunday_week_of_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_date_get_sunday_week_of_year(const GDate *date)
     * }
     */
    public static MethodHandle g_date_get_sunday_week_of_year$handle() {
        return g_date_get_sunday_week_of_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_date_get_sunday_week_of_year(const GDate *date)
     * }
     */
    public static int g_date_get_sunday_week_of_year(MemorySegment date) {
        var mh$ = g_date_get_sunday_week_of_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_sunday_week_of_year", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_iso8601_week_of_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_iso8601_week_of_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_date_get_iso8601_week_of_year(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_get_iso8601_week_of_year$descriptor() {
        return g_date_get_iso8601_week_of_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_date_get_iso8601_week_of_year(const GDate *date)
     * }
     */
    public static MethodHandle g_date_get_iso8601_week_of_year$handle() {
        return g_date_get_iso8601_week_of_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_date_get_iso8601_week_of_year(const GDate *date)
     * }
     */
    public static int g_date_get_iso8601_week_of_year(MemorySegment date) {
        var mh$ = g_date_get_iso8601_week_of_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_iso8601_week_of_year", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_clear(GDate *date, guint n_dates)
     * }
     */
    public static FunctionDescriptor g_date_clear$descriptor() {
        return g_date_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_clear(GDate *date, guint n_dates)
     * }
     */
    public static MethodHandle g_date_clear$handle() {
        return g_date_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_clear(GDate *date, guint n_dates)
     * }
     */
    public static void g_date_clear(MemorySegment date, int n_dates) {
        var mh$ = g_date_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_clear", date, n_dates);
            }
            mh$.invokeExact(date, n_dates);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_set_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_set_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_set_parse(GDate *date, const gchar *str)
     * }
     */
    public static FunctionDescriptor g_date_set_parse$descriptor() {
        return g_date_set_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_set_parse(GDate *date, const gchar *str)
     * }
     */
    public static MethodHandle g_date_set_parse$handle() {
        return g_date_set_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_set_parse(GDate *date, const gchar *str)
     * }
     */
    public static void g_date_set_parse(MemorySegment date, MemorySegment str) {
        var mh$ = g_date_set_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_set_parse", date, str);
            }
            mh$.invokeExact(date, str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_set_time_t {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_set_time_t"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_set_time_t(GDate *date, time_t timet)
     * }
     */
    public static FunctionDescriptor g_date_set_time_t$descriptor() {
        return g_date_set_time_t.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_set_time_t(GDate *date, time_t timet)
     * }
     */
    public static MethodHandle g_date_set_time_t$handle() {
        return g_date_set_time_t.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_set_time_t(GDate *date, time_t timet)
     * }
     */
    public static void g_date_set_time_t(MemorySegment date, long timet) {
        var mh$ = g_date_set_time_t.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_set_time_t", date, timet);
            }
            mh$.invokeExact(date, timet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_set_time_val {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_set_time_val"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_set_time_val(GDate *date, GTimeVal *timeval)
     * }
     */
    public static FunctionDescriptor g_date_set_time_val$descriptor() {
        return g_date_set_time_val.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_set_time_val(GDate *date, GTimeVal *timeval)
     * }
     */
    public static MethodHandle g_date_set_time_val$handle() {
        return g_date_set_time_val.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_set_time_val(GDate *date, GTimeVal *timeval)
     * }
     */
    public static void g_date_set_time_val(MemorySegment date, MemorySegment timeval) {
        var mh$ = g_date_set_time_val.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_set_time_val", date, timeval);
            }
            mh$.invokeExact(date, timeval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_set_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_set_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_set_time(GDate *date, GTime time_)
     * }
     */
    public static FunctionDescriptor g_date_set_time$descriptor() {
        return g_date_set_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_set_time(GDate *date, GTime time_)
     * }
     */
    public static MethodHandle g_date_set_time$handle() {
        return g_date_set_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_set_time(GDate *date, GTime time_)
     * }
     */
    public static void g_date_set_time(MemorySegment date, int time_) {
        var mh$ = g_date_set_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_set_time", date, time_);
            }
            mh$.invokeExact(date, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_set_month {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_set_month"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_set_month(GDate *date, GDateMonth month)
     * }
     */
    public static FunctionDescriptor g_date_set_month$descriptor() {
        return g_date_set_month.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_set_month(GDate *date, GDateMonth month)
     * }
     */
    public static MethodHandle g_date_set_month$handle() {
        return g_date_set_month.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_set_month(GDate *date, GDateMonth month)
     * }
     */
    public static void g_date_set_month(MemorySegment date, int month) {
        var mh$ = g_date_set_month.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_set_month", date, month);
            }
            mh$.invokeExact(date, month);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_set_day {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_set_day"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_set_day(GDate *date, GDateDay day)
     * }
     */
    public static FunctionDescriptor g_date_set_day$descriptor() {
        return g_date_set_day.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_set_day(GDate *date, GDateDay day)
     * }
     */
    public static MethodHandle g_date_set_day$handle() {
        return g_date_set_day.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_set_day(GDate *date, GDateDay day)
     * }
     */
    public static void g_date_set_day(MemorySegment date, byte day) {
        var mh$ = g_date_set_day.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_set_day", date, day);
            }
            mh$.invokeExact(date, day);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_set_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_set_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_set_year(GDate *date, GDateYear year)
     * }
     */
    public static FunctionDescriptor g_date_set_year$descriptor() {
        return g_date_set_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_set_year(GDate *date, GDateYear year)
     * }
     */
    public static MethodHandle g_date_set_year$handle() {
        return g_date_set_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_set_year(GDate *date, GDateYear year)
     * }
     */
    public static void g_date_set_year(MemorySegment date, short year) {
        var mh$ = g_date_set_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_set_year", date, year);
            }
            mh$.invokeExact(date, year);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_set_dmy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_set_dmy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_set_dmy(GDate *date, GDateDay day, GDateMonth month, GDateYear y)
     * }
     */
    public static FunctionDescriptor g_date_set_dmy$descriptor() {
        return g_date_set_dmy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_set_dmy(GDate *date, GDateDay day, GDateMonth month, GDateYear y)
     * }
     */
    public static MethodHandle g_date_set_dmy$handle() {
        return g_date_set_dmy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_set_dmy(GDate *date, GDateDay day, GDateMonth month, GDateYear y)
     * }
     */
    public static void g_date_set_dmy(MemorySegment date, byte day, int month, short y) {
        var mh$ = g_date_set_dmy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_set_dmy", date, day, month, y);
            }
            mh$.invokeExact(date, day, month, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_set_julian {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_set_julian"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_set_julian(GDate *date, guint32 julian_date)
     * }
     */
    public static FunctionDescriptor g_date_set_julian$descriptor() {
        return g_date_set_julian.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_set_julian(GDate *date, guint32 julian_date)
     * }
     */
    public static MethodHandle g_date_set_julian$handle() {
        return g_date_set_julian.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_set_julian(GDate *date, guint32 julian_date)
     * }
     */
    public static void g_date_set_julian(MemorySegment date, int julian_date) {
        var mh$ = g_date_set_julian.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_set_julian", date, julian_date);
            }
            mh$.invokeExact(date, julian_date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_is_first_of_month {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_is_first_of_month"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_is_first_of_month(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_is_first_of_month$descriptor() {
        return g_date_is_first_of_month.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_is_first_of_month(const GDate *date)
     * }
     */
    public static MethodHandle g_date_is_first_of_month$handle() {
        return g_date_is_first_of_month.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_is_first_of_month(const GDate *date)
     * }
     */
    public static int g_date_is_first_of_month(MemorySegment date) {
        var mh$ = g_date_is_first_of_month.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_is_first_of_month", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_is_last_of_month {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_is_last_of_month"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_is_last_of_month(const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_is_last_of_month$descriptor() {
        return g_date_is_last_of_month.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_is_last_of_month(const GDate *date)
     * }
     */
    public static MethodHandle g_date_is_last_of_month$handle() {
        return g_date_is_last_of_month.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_is_last_of_month(const GDate *date)
     * }
     */
    public static int g_date_is_last_of_month(MemorySegment date) {
        var mh$ = g_date_is_last_of_month.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_is_last_of_month", date);
            }
            return (int)mh$.invokeExact(date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_add_days {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_add_days"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_add_days(GDate *date, guint n_days)
     * }
     */
    public static FunctionDescriptor g_date_add_days$descriptor() {
        return g_date_add_days.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_add_days(GDate *date, guint n_days)
     * }
     */
    public static MethodHandle g_date_add_days$handle() {
        return g_date_add_days.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_add_days(GDate *date, guint n_days)
     * }
     */
    public static void g_date_add_days(MemorySegment date, int n_days) {
        var mh$ = g_date_add_days.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_add_days", date, n_days);
            }
            mh$.invokeExact(date, n_days);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_subtract_days {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_subtract_days"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_subtract_days(GDate *date, guint n_days)
     * }
     */
    public static FunctionDescriptor g_date_subtract_days$descriptor() {
        return g_date_subtract_days.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_subtract_days(GDate *date, guint n_days)
     * }
     */
    public static MethodHandle g_date_subtract_days$handle() {
        return g_date_subtract_days.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_subtract_days(GDate *date, guint n_days)
     * }
     */
    public static void g_date_subtract_days(MemorySegment date, int n_days) {
        var mh$ = g_date_subtract_days.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_subtract_days", date, n_days);
            }
            mh$.invokeExact(date, n_days);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_add_months {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_add_months"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_add_months(GDate *date, guint n_months)
     * }
     */
    public static FunctionDescriptor g_date_add_months$descriptor() {
        return g_date_add_months.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_add_months(GDate *date, guint n_months)
     * }
     */
    public static MethodHandle g_date_add_months$handle() {
        return g_date_add_months.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_add_months(GDate *date, guint n_months)
     * }
     */
    public static void g_date_add_months(MemorySegment date, int n_months) {
        var mh$ = g_date_add_months.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_add_months", date, n_months);
            }
            mh$.invokeExact(date, n_months);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_subtract_months {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_subtract_months"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_subtract_months(GDate *date, guint n_months)
     * }
     */
    public static FunctionDescriptor g_date_subtract_months$descriptor() {
        return g_date_subtract_months.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_subtract_months(GDate *date, guint n_months)
     * }
     */
    public static MethodHandle g_date_subtract_months$handle() {
        return g_date_subtract_months.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_subtract_months(GDate *date, guint n_months)
     * }
     */
    public static void g_date_subtract_months(MemorySegment date, int n_months) {
        var mh$ = g_date_subtract_months.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_subtract_months", date, n_months);
            }
            mh$.invokeExact(date, n_months);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_add_years {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_add_years"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_add_years(GDate *date, guint n_years)
     * }
     */
    public static FunctionDescriptor g_date_add_years$descriptor() {
        return g_date_add_years.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_add_years(GDate *date, guint n_years)
     * }
     */
    public static MethodHandle g_date_add_years$handle() {
        return g_date_add_years.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_add_years(GDate *date, guint n_years)
     * }
     */
    public static void g_date_add_years(MemorySegment date, int n_years) {
        var mh$ = g_date_add_years.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_add_years", date, n_years);
            }
            mh$.invokeExact(date, n_years);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_subtract_years {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_subtract_years"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_subtract_years(GDate *date, guint n_years)
     * }
     */
    public static FunctionDescriptor g_date_subtract_years$descriptor() {
        return g_date_subtract_years.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_subtract_years(GDate *date, guint n_years)
     * }
     */
    public static MethodHandle g_date_subtract_years$handle() {
        return g_date_subtract_years.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_subtract_years(GDate *date, guint n_years)
     * }
     */
    public static void g_date_subtract_years(MemorySegment date, int n_years) {
        var mh$ = g_date_subtract_years.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_subtract_years", date, n_years);
            }
            mh$.invokeExact(date, n_years);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_is_leap_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_is_leap_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_date_is_leap_year(GDateYear year)
     * }
     */
    public static FunctionDescriptor g_date_is_leap_year$descriptor() {
        return g_date_is_leap_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_date_is_leap_year(GDateYear year)
     * }
     */
    public static MethodHandle g_date_is_leap_year$handle() {
        return g_date_is_leap_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_date_is_leap_year(GDateYear year)
     * }
     */
    public static int g_date_is_leap_year(short year) {
        var mh$ = g_date_is_leap_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_is_leap_year", year);
            }
            return (int)mh$.invokeExact(year);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_days_in_month {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_days_in_month"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint8 g_date_get_days_in_month(GDateMonth month, GDateYear year)
     * }
     */
    public static FunctionDescriptor g_date_get_days_in_month$descriptor() {
        return g_date_get_days_in_month.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint8 g_date_get_days_in_month(GDateMonth month, GDateYear year)
     * }
     */
    public static MethodHandle g_date_get_days_in_month$handle() {
        return g_date_get_days_in_month.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint8 g_date_get_days_in_month(GDateMonth month, GDateYear year)
     * }
     */
    public static byte g_date_get_days_in_month(int month, short year) {
        var mh$ = g_date_get_days_in_month.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_days_in_month", month, year);
            }
            return (byte)mh$.invokeExact(month, year);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_monday_weeks_in_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_monday_weeks_in_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint8 g_date_get_monday_weeks_in_year(GDateYear year)
     * }
     */
    public static FunctionDescriptor g_date_get_monday_weeks_in_year$descriptor() {
        return g_date_get_monday_weeks_in_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint8 g_date_get_monday_weeks_in_year(GDateYear year)
     * }
     */
    public static MethodHandle g_date_get_monday_weeks_in_year$handle() {
        return g_date_get_monday_weeks_in_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint8 g_date_get_monday_weeks_in_year(GDateYear year)
     * }
     */
    public static byte g_date_get_monday_weeks_in_year(short year) {
        var mh$ = g_date_get_monday_weeks_in_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_monday_weeks_in_year", year);
            }
            return (byte)mh$.invokeExact(year);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_sunday_weeks_in_year {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_SHORT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_sunday_weeks_in_year"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint8 g_date_get_sunday_weeks_in_year(GDateYear year)
     * }
     */
    public static FunctionDescriptor g_date_get_sunday_weeks_in_year$descriptor() {
        return g_date_get_sunday_weeks_in_year.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint8 g_date_get_sunday_weeks_in_year(GDateYear year)
     * }
     */
    public static MethodHandle g_date_get_sunday_weeks_in_year$handle() {
        return g_date_get_sunday_weeks_in_year.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint8 g_date_get_sunday_weeks_in_year(GDateYear year)
     * }
     */
    public static byte g_date_get_sunday_weeks_in_year(short year) {
        var mh$ = g_date_get_sunday_weeks_in_year.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_sunday_weeks_in_year", year);
            }
            return (byte)mh$.invokeExact(year);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_days_between {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_days_between"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_days_between(const GDate *date1, const GDate *date2)
     * }
     */
    public static FunctionDescriptor g_date_days_between$descriptor() {
        return g_date_days_between.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_days_between(const GDate *date1, const GDate *date2)
     * }
     */
    public static MethodHandle g_date_days_between$handle() {
        return g_date_days_between.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_days_between(const GDate *date1, const GDate *date2)
     * }
     */
    public static int g_date_days_between(MemorySegment date1, MemorySegment date2) {
        var mh$ = g_date_days_between.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_days_between", date1, date2);
            }
            return (int)mh$.invokeExact(date1, date2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_compare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_date_compare(const GDate *lhs, const GDate *rhs)
     * }
     */
    public static FunctionDescriptor g_date_compare$descriptor() {
        return g_date_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_date_compare(const GDate *lhs, const GDate *rhs)
     * }
     */
    public static MethodHandle g_date_compare$handle() {
        return g_date_compare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_date_compare(const GDate *lhs, const GDate *rhs)
     * }
     */
    public static int g_date_compare(MemorySegment lhs, MemorySegment rhs) {
        var mh$ = g_date_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_compare", lhs, rhs);
            }
            return (int)mh$.invokeExact(lhs, rhs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_to_struct_tm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_to_struct_tm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_to_struct_tm(const GDate *date, struct tm *tm)
     * }
     */
    public static FunctionDescriptor g_date_to_struct_tm$descriptor() {
        return g_date_to_struct_tm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_to_struct_tm(const GDate *date, struct tm *tm)
     * }
     */
    public static MethodHandle g_date_to_struct_tm$handle() {
        return g_date_to_struct_tm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_to_struct_tm(const GDate *date, struct tm *tm)
     * }
     */
    public static void g_date_to_struct_tm(MemorySegment date, MemorySegment tm) {
        var mh$ = g_date_to_struct_tm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_to_struct_tm", date, tm);
            }
            mh$.invokeExact(date, tm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_clamp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_clamp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_clamp(GDate *date, const GDate *min_date, const GDate *max_date)
     * }
     */
    public static FunctionDescriptor g_date_clamp$descriptor() {
        return g_date_clamp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_clamp(GDate *date, const GDate *min_date, const GDate *max_date)
     * }
     */
    public static MethodHandle g_date_clamp$handle() {
        return g_date_clamp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_clamp(GDate *date, const GDate *min_date, const GDate *max_date)
     * }
     */
    public static void g_date_clamp(MemorySegment date, MemorySegment min_date, MemorySegment max_date) {
        var mh$ = g_date_clamp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_clamp", date, min_date, max_date);
            }
            mh$.invokeExact(date, min_date, max_date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_date_order(GDate *date1, GDate *date2)
     * }
     */
    public static FunctionDescriptor g_date_order$descriptor() {
        return g_date_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_date_order(GDate *date1, GDate *date2)
     * }
     */
    public static MethodHandle g_date_order$handle() {
        return g_date_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_date_order(GDate *date1, GDate *date2)
     * }
     */
    public static void g_date_order(MemorySegment date1, MemorySegment date2) {
        var mh$ = g_date_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_order", date1, date2);
            }
            mh$.invokeExact(date1, date2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_strftime {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_strftime"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_date_strftime(gchar *s, gsize slen, const gchar *format, const GDate *date)
     * }
     */
    public static FunctionDescriptor g_date_strftime$descriptor() {
        return g_date_strftime.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_date_strftime(gchar *s, gsize slen, const gchar *format, const GDate *date)
     * }
     */
    public static MethodHandle g_date_strftime$handle() {
        return g_date_strftime.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_date_strftime(gchar *s, gsize slen, const gchar *format, const GDate *date)
     * }
     */
    public static long g_date_strftime(MemorySegment s, long slen, MemorySegment format, MemorySegment date) {
        var mh$ = g_date_strftime.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_strftime", s, slen, format, date);
            }
            return (long)mh$.invokeExact(s, slen, format, date);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int DT_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DT_UNKNOWN = 0
     * }
     */
    public static int DT_UNKNOWN() {
        return DT_UNKNOWN;
    }
    private static final int DT_FIFO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DT_FIFO = 1
     * }
     */
    public static int DT_FIFO() {
        return DT_FIFO;
    }
    private static final int DT_CHR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DT_CHR = 2
     * }
     */
    public static int DT_CHR() {
        return DT_CHR;
    }
    private static final int DT_DIR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DT_DIR = 4
     * }
     */
    public static int DT_DIR() {
        return DT_DIR;
    }
    private static final int DT_BLK = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DT_BLK = 6
     * }
     */
    public static int DT_BLK() {
        return DT_BLK;
    }
    private static final int DT_REG = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DT_REG = 8
     * }
     */
    public static int DT_REG() {
        return DT_REG;
    }
    private static final int DT_LNK = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DT_LNK = 10
     * }
     */
    public static int DT_LNK() {
        return DT_LNK;
    }
    private static final int DT_SOCK = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DT_SOCK = 12
     * }
     */
    public static int DT_SOCK() {
        return DT_SOCK;
    }
    private static final int DT_WHT = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.DT_WHT = 14
     * }
     */
    public static int DT_WHT() {
        return DT_WHT;
    }

    private static class opendir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("opendir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DIR *opendir(const char *__name)
     * }
     */
    public static FunctionDescriptor opendir$descriptor() {
        return opendir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DIR *opendir(const char *__name)
     * }
     */
    public static MethodHandle opendir$handle() {
        return opendir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern DIR *opendir(const char *__name)
     * }
     */
    public static MemorySegment opendir(MemorySegment __name) {
        var mh$ = opendir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("opendir", __name);
            }
            return (MemorySegment)mh$.invokeExact(__name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class fdopendir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("fdopendir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern DIR *fdopendir(int __fd)
     * }
     */
    public static FunctionDescriptor fdopendir$descriptor() {
        return fdopendir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern DIR *fdopendir(int __fd)
     * }
     */
    public static MethodHandle fdopendir$handle() {
        return fdopendir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern DIR *fdopendir(int __fd)
     * }
     */
    public static MemorySegment fdopendir(int __fd) {
        var mh$ = fdopendir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("fdopendir", __fd);
            }
            return (MemorySegment)mh$.invokeExact(__fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class closedir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("closedir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int closedir(DIR *__dirp)
     * }
     */
    public static FunctionDescriptor closedir$descriptor() {
        return closedir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int closedir(DIR *__dirp)
     * }
     */
    public static MethodHandle closedir$handle() {
        return closedir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int closedir(DIR *__dirp)
     * }
     */
    public static int closedir(MemorySegment __dirp) {
        var mh$ = closedir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("closedir", __dirp);
            }
            return (int)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class readdir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("readdir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern struct dirent *readdir(DIR *__dirp)
     * }
     */
    public static FunctionDescriptor readdir$descriptor() {
        return readdir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern struct dirent *readdir(DIR *__dirp)
     * }
     */
    public static MethodHandle readdir$handle() {
        return readdir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern struct dirent *readdir(DIR *__dirp)
     * }
     */
    public static MemorySegment readdir(MemorySegment __dirp) {
        var mh$ = readdir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("readdir", __dirp);
            }
            return (MemorySegment)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class readdir_r {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("readdir_r"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int readdir_r(DIR *restrict __dirp, struct dirent *restrict __entry, struct dirent **restrict __result)
     * }
     */
    public static FunctionDescriptor readdir_r$descriptor() {
        return readdir_r.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int readdir_r(DIR *restrict __dirp, struct dirent *restrict __entry, struct dirent **restrict __result)
     * }
     */
    public static MethodHandle readdir_r$handle() {
        return readdir_r.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int readdir_r(DIR *restrict __dirp, struct dirent *restrict __entry, struct dirent **restrict __result)
     * }
     */
    public static int readdir_r(MemorySegment __dirp, MemorySegment __entry, MemorySegment __result) {
        var mh$ = readdir_r.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("readdir_r", __dirp, __entry, __result);
            }
            return (int)mh$.invokeExact(__dirp, __entry, __result);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class rewinddir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("rewinddir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void rewinddir(DIR *__dirp)
     * }
     */
    public static FunctionDescriptor rewinddir$descriptor() {
        return rewinddir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void rewinddir(DIR *__dirp)
     * }
     */
    public static MethodHandle rewinddir$handle() {
        return rewinddir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void rewinddir(DIR *__dirp)
     * }
     */
    public static void rewinddir(MemorySegment __dirp) {
        var mh$ = rewinddir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("rewinddir", __dirp);
            }
            mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class seekdir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("seekdir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void seekdir(DIR *__dirp, long __pos)
     * }
     */
    public static FunctionDescriptor seekdir$descriptor() {
        return seekdir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void seekdir(DIR *__dirp, long __pos)
     * }
     */
    public static MethodHandle seekdir$handle() {
        return seekdir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void seekdir(DIR *__dirp, long __pos)
     * }
     */
    public static void seekdir(MemorySegment __dirp, long __pos) {
        var mh$ = seekdir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("seekdir", __dirp, __pos);
            }
            mh$.invokeExact(__dirp, __pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class telldir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("telldir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern long telldir(DIR *__dirp)
     * }
     */
    public static FunctionDescriptor telldir$descriptor() {
        return telldir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern long telldir(DIR *__dirp)
     * }
     */
    public static MethodHandle telldir$handle() {
        return telldir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern long telldir(DIR *__dirp)
     * }
     */
    public static long telldir(MemorySegment __dirp) {
        var mh$ = telldir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("telldir", __dirp);
            }
            return (long)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class dirfd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("dirfd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int dirfd(DIR *__dirp)
     * }
     */
    public static FunctionDescriptor dirfd$descriptor() {
        return dirfd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int dirfd(DIR *__dirp)
     * }
     */
    public static MethodHandle dirfd$handle() {
        return dirfd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int dirfd(DIR *__dirp)
     * }
     */
    public static int dirfd(MemorySegment __dirp) {
        var mh$ = dirfd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("dirfd", __dirp);
            }
            return (int)mh$.invokeExact(__dirp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class scandir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("scandir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int scandir(const char *restrict __dir, struct dirent ***restrict __namelist, int (*__selector)(const struct dirent *), int (*__cmp)(const struct dirent **, const struct dirent **))
     * }
     */
    public static FunctionDescriptor scandir$descriptor() {
        return scandir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int scandir(const char *restrict __dir, struct dirent ***restrict __namelist, int (*__selector)(const struct dirent *), int (*__cmp)(const struct dirent **, const struct dirent **))
     * }
     */
    public static MethodHandle scandir$handle() {
        return scandir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int scandir(const char *restrict __dir, struct dirent ***restrict __namelist, int (*__selector)(const struct dirent *), int (*__cmp)(const struct dirent **, const struct dirent **))
     * }
     */
    public static int scandir(MemorySegment __dir, MemorySegment __namelist, MemorySegment __selector, MemorySegment __cmp) {
        var mh$ = scandir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("scandir", __dir, __namelist, __selector, __cmp);
            }
            return (int)mh$.invokeExact(__dir, __namelist, __selector, __cmp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class alphasort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("alphasort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int alphasort(const struct dirent **__e1, const struct dirent **__e2)
     * }
     */
    public static FunctionDescriptor alphasort$descriptor() {
        return alphasort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int alphasort(const struct dirent **__e1, const struct dirent **__e2)
     * }
     */
    public static MethodHandle alphasort$handle() {
        return alphasort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int alphasort(const struct dirent **__e1, const struct dirent **__e2)
     * }
     */
    public static int alphasort(MemorySegment __e1, MemorySegment __e2) {
        var mh$ = alphasort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("alphasort", __e1, __e2);
            }
            return (int)mh$.invokeExact(__e1, __e2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class getdirentries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("getdirentries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern __ssize_t getdirentries(int __fd, char *restrict __buf, size_t __nbytes, __off_t *restrict __basep)
     * }
     */
    public static FunctionDescriptor getdirentries$descriptor() {
        return getdirentries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern __ssize_t getdirentries(int __fd, char *restrict __buf, size_t __nbytes, __off_t *restrict __basep)
     * }
     */
    public static MethodHandle getdirentries$handle() {
        return getdirentries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern __ssize_t getdirentries(int __fd, char *restrict __buf, size_t __nbytes, __off_t *restrict __basep)
     * }
     */
    public static long getdirentries(int __fd, MemorySegment __buf, long __nbytes, MemorySegment __basep) {
        var mh$ = getdirentries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("getdirentries", __fd, __buf, __nbytes, __basep);
            }
            return (long)mh$.invokeExact(__fd, __buf, __nbytes, __basep);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dir_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dir_open"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GDir *g_dir_open(const gchar *path, guint flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_dir_open$descriptor() {
        return g_dir_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GDir *g_dir_open(const gchar *path, guint flags, GError **error)
     * }
     */
    public static MethodHandle g_dir_open$handle() {
        return g_dir_open.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GDir *g_dir_open(const gchar *path, guint flags, GError **error)
     * }
     */
    public static MemorySegment g_dir_open(MemorySegment path, int flags, MemorySegment error) {
        var mh$ = g_dir_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dir_open", path, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(path, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dir_read_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dir_read_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dir_read_name(GDir *dir)
     * }
     */
    public static FunctionDescriptor g_dir_read_name$descriptor() {
        return g_dir_read_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dir_read_name(GDir *dir)
     * }
     */
    public static MethodHandle g_dir_read_name$handle() {
        return g_dir_read_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dir_read_name(GDir *dir)
     * }
     */
    public static MemorySegment g_dir_read_name(MemorySegment dir) {
        var mh$ = g_dir_read_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dir_read_name", dir);
            }
            return (MemorySegment)mh$.invokeExact(dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dir_rewind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dir_rewind"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dir_rewind(GDir *dir)
     * }
     */
    public static FunctionDescriptor g_dir_rewind$descriptor() {
        return g_dir_rewind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dir_rewind(GDir *dir)
     * }
     */
    public static MethodHandle g_dir_rewind$handle() {
        return g_dir_rewind.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dir_rewind(GDir *dir)
     * }
     */
    public static void g_dir_rewind(MemorySegment dir) {
        var mh$ = g_dir_rewind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dir_rewind", dir);
            }
            mh$.invokeExact(dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dir_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dir_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_dir_close(GDir *dir)
     * }
     */
    public static FunctionDescriptor g_dir_close$descriptor() {
        return g_dir_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_dir_close(GDir *dir)
     * }
     */
    public static MethodHandle g_dir_close$handle() {
        return g_dir_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_dir_close(GDir *dir)
     * }
     */
    public static void g_dir_close(MemorySegment dir) {
        var mh$ = g_dir_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dir_close", dir);
            }
            mh$.invokeExact(dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_getenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_getenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_getenv(const gchar *variable)
     * }
     */
    public static FunctionDescriptor g_getenv$descriptor() {
        return g_getenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_getenv(const gchar *variable)
     * }
     */
    public static MethodHandle g_getenv$handle() {
        return g_getenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_getenv(const gchar *variable)
     * }
     */
    public static MemorySegment g_getenv(MemorySegment variable) {
        var mh$ = g_getenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_getenv", variable);
            }
            return (MemorySegment)mh$.invokeExact(variable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_setenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_setenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_setenv(const gchar *variable, const gchar *value, gboolean overwrite)
     * }
     */
    public static FunctionDescriptor g_setenv$descriptor() {
        return g_setenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_setenv(const gchar *variable, const gchar *value, gboolean overwrite)
     * }
     */
    public static MethodHandle g_setenv$handle() {
        return g_setenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_setenv(const gchar *variable, const gchar *value, gboolean overwrite)
     * }
     */
    public static int g_setenv(MemorySegment variable, MemorySegment value, int overwrite) {
        var mh$ = g_setenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_setenv", variable, value, overwrite);
            }
            return (int)mh$.invokeExact(variable, value, overwrite);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unsetenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unsetenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_unsetenv(const gchar *variable)
     * }
     */
    public static FunctionDescriptor g_unsetenv$descriptor() {
        return g_unsetenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_unsetenv(const gchar *variable)
     * }
     */
    public static MethodHandle g_unsetenv$handle() {
        return g_unsetenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_unsetenv(const gchar *variable)
     * }
     */
    public static void g_unsetenv(MemorySegment variable) {
        var mh$ = g_unsetenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unsetenv", variable);
            }
            mh$.invokeExact(variable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_listenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_listenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_listenv()
     * }
     */
    public static FunctionDescriptor g_listenv$descriptor() {
        return g_listenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_listenv()
     * }
     */
    public static MethodHandle g_listenv$handle() {
        return g_listenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_listenv()
     * }
     */
    public static MemorySegment g_listenv() {
        var mh$ = g_listenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_listenv");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_environ {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_environ"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_get_environ()
     * }
     */
    public static FunctionDescriptor g_get_environ$descriptor() {
        return g_get_environ.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_get_environ()
     * }
     */
    public static MethodHandle g_get_environ$handle() {
        return g_get_environ.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_get_environ()
     * }
     */
    public static MemorySegment g_get_environ() {
        var mh$ = g_get_environ.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_environ");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_environ_getenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_environ_getenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_environ_getenv(gchar **envp, const gchar *variable)
     * }
     */
    public static FunctionDescriptor g_environ_getenv$descriptor() {
        return g_environ_getenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_environ_getenv(gchar **envp, const gchar *variable)
     * }
     */
    public static MethodHandle g_environ_getenv$handle() {
        return g_environ_getenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_environ_getenv(gchar **envp, const gchar *variable)
     * }
     */
    public static MemorySegment g_environ_getenv(MemorySegment envp, MemorySegment variable) {
        var mh$ = g_environ_getenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_environ_getenv", envp, variable);
            }
            return (MemorySegment)mh$.invokeExact(envp, variable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_environ_setenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_environ_setenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_environ_setenv(gchar **envp, const gchar *variable, const gchar *value, gboolean overwrite)
     * }
     */
    public static FunctionDescriptor g_environ_setenv$descriptor() {
        return g_environ_setenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_environ_setenv(gchar **envp, const gchar *variable, const gchar *value, gboolean overwrite)
     * }
     */
    public static MethodHandle g_environ_setenv$handle() {
        return g_environ_setenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_environ_setenv(gchar **envp, const gchar *variable, const gchar *value, gboolean overwrite)
     * }
     */
    public static MemorySegment g_environ_setenv(MemorySegment envp, MemorySegment variable, MemorySegment value, int overwrite) {
        var mh$ = g_environ_setenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_environ_setenv", envp, variable, value, overwrite);
            }
            return (MemorySegment)mh$.invokeExact(envp, variable, value, overwrite);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_environ_unsetenv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_environ_unsetenv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_environ_unsetenv(gchar **envp, const gchar *variable)
     * }
     */
    public static FunctionDescriptor g_environ_unsetenv$descriptor() {
        return g_environ_unsetenv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_environ_unsetenv(gchar **envp, const gchar *variable)
     * }
     */
    public static MethodHandle g_environ_unsetenv$handle() {
        return g_environ_unsetenv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_environ_unsetenv(gchar **envp, const gchar *variable)
     * }
     */
    public static MemorySegment g_environ_unsetenv(MemorySegment envp, MemorySegment variable) {
        var mh$ = g_environ_unsetenv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_environ_unsetenv", envp, variable);
            }
            return (MemorySegment)mh$.invokeExact(envp, variable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_FILE_ERROR_EXIST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_EXIST = 0
     * }
     */
    public static int G_FILE_ERROR_EXIST() {
        return G_FILE_ERROR_EXIST;
    }
    private static final int G_FILE_ERROR_ISDIR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_ISDIR = 1
     * }
     */
    public static int G_FILE_ERROR_ISDIR() {
        return G_FILE_ERROR_ISDIR;
    }
    private static final int G_FILE_ERROR_ACCES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_ACCES = 2
     * }
     */
    public static int G_FILE_ERROR_ACCES() {
        return G_FILE_ERROR_ACCES;
    }
    private static final int G_FILE_ERROR_NAMETOOLONG = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_NAMETOOLONG = 3
     * }
     */
    public static int G_FILE_ERROR_NAMETOOLONG() {
        return G_FILE_ERROR_NAMETOOLONG;
    }
    private static final int G_FILE_ERROR_NOENT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_NOENT = 4
     * }
     */
    public static int G_FILE_ERROR_NOENT() {
        return G_FILE_ERROR_NOENT;
    }
    private static final int G_FILE_ERROR_NOTDIR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_NOTDIR = 5
     * }
     */
    public static int G_FILE_ERROR_NOTDIR() {
        return G_FILE_ERROR_NOTDIR;
    }
    private static final int G_FILE_ERROR_NXIO = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_NXIO = 6
     * }
     */
    public static int G_FILE_ERROR_NXIO() {
        return G_FILE_ERROR_NXIO;
    }
    private static final int G_FILE_ERROR_NODEV = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_NODEV = 7
     * }
     */
    public static int G_FILE_ERROR_NODEV() {
        return G_FILE_ERROR_NODEV;
    }
    private static final int G_FILE_ERROR_ROFS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_ROFS = 8
     * }
     */
    public static int G_FILE_ERROR_ROFS() {
        return G_FILE_ERROR_ROFS;
    }
    private static final int G_FILE_ERROR_TXTBSY = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_TXTBSY = 9
     * }
     */
    public static int G_FILE_ERROR_TXTBSY() {
        return G_FILE_ERROR_TXTBSY;
    }
    private static final int G_FILE_ERROR_FAULT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_FAULT = 10
     * }
     */
    public static int G_FILE_ERROR_FAULT() {
        return G_FILE_ERROR_FAULT;
    }
    private static final int G_FILE_ERROR_LOOP = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_LOOP = 11
     * }
     */
    public static int G_FILE_ERROR_LOOP() {
        return G_FILE_ERROR_LOOP;
    }
    private static final int G_FILE_ERROR_NOSPC = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_NOSPC = 12
     * }
     */
    public static int G_FILE_ERROR_NOSPC() {
        return G_FILE_ERROR_NOSPC;
    }
    private static final int G_FILE_ERROR_NOMEM = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_NOMEM = 13
     * }
     */
    public static int G_FILE_ERROR_NOMEM() {
        return G_FILE_ERROR_NOMEM;
    }
    private static final int G_FILE_ERROR_MFILE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_MFILE = 14
     * }
     */
    public static int G_FILE_ERROR_MFILE() {
        return G_FILE_ERROR_MFILE;
    }
    private static final int G_FILE_ERROR_NFILE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_NFILE = 15
     * }
     */
    public static int G_FILE_ERROR_NFILE() {
        return G_FILE_ERROR_NFILE;
    }
    private static final int G_FILE_ERROR_BADF = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_BADF = 16
     * }
     */
    public static int G_FILE_ERROR_BADF() {
        return G_FILE_ERROR_BADF;
    }
    private static final int G_FILE_ERROR_INVAL = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_INVAL = 17
     * }
     */
    public static int G_FILE_ERROR_INVAL() {
        return G_FILE_ERROR_INVAL;
    }
    private static final int G_FILE_ERROR_PIPE = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_PIPE = 18
     * }
     */
    public static int G_FILE_ERROR_PIPE() {
        return G_FILE_ERROR_PIPE;
    }
    private static final int G_FILE_ERROR_AGAIN = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_AGAIN = 19
     * }
     */
    public static int G_FILE_ERROR_AGAIN() {
        return G_FILE_ERROR_AGAIN;
    }
    private static final int G_FILE_ERROR_INTR = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_INTR = 20
     * }
     */
    public static int G_FILE_ERROR_INTR() {
        return G_FILE_ERROR_INTR;
    }
    private static final int G_FILE_ERROR_IO = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_IO = 21
     * }
     */
    public static int G_FILE_ERROR_IO() {
        return G_FILE_ERROR_IO;
    }
    private static final int G_FILE_ERROR_PERM = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_PERM = 22
     * }
     */
    public static int G_FILE_ERROR_PERM() {
        return G_FILE_ERROR_PERM;
    }
    private static final int G_FILE_ERROR_NOSYS = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_NOSYS = 23
     * }
     */
    public static int G_FILE_ERROR_NOSYS() {
        return G_FILE_ERROR_NOSYS;
    }
    private static final int G_FILE_ERROR_FAILED = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ERROR_FAILED = 24
     * }
     */
    public static int G_FILE_ERROR_FAILED() {
        return G_FILE_ERROR_FAILED;
    }
    private static final int G_FILE_TEST_IS_REGULAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TEST_IS_REGULAR = 1
     * }
     */
    public static int G_FILE_TEST_IS_REGULAR() {
        return G_FILE_TEST_IS_REGULAR;
    }
    private static final int G_FILE_TEST_IS_SYMLINK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TEST_IS_SYMLINK = 2
     * }
     */
    public static int G_FILE_TEST_IS_SYMLINK() {
        return G_FILE_TEST_IS_SYMLINK;
    }
    private static final int G_FILE_TEST_IS_DIR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TEST_IS_DIR = 4
     * }
     */
    public static int G_FILE_TEST_IS_DIR() {
        return G_FILE_TEST_IS_DIR;
    }
    private static final int G_FILE_TEST_IS_EXECUTABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TEST_IS_EXECUTABLE = 8
     * }
     */
    public static int G_FILE_TEST_IS_EXECUTABLE() {
        return G_FILE_TEST_IS_EXECUTABLE;
    }
    private static final int G_FILE_TEST_EXISTS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TEST_EXISTS = 16
     * }
     */
    public static int G_FILE_TEST_EXISTS() {
        return G_FILE_TEST_EXISTS;
    }
    private static final int G_FILE_SET_CONTENTS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_SET_CONTENTS_NONE = 0
     * }
     */
    public static int G_FILE_SET_CONTENTS_NONE() {
        return G_FILE_SET_CONTENTS_NONE;
    }
    private static final int G_FILE_SET_CONTENTS_CONSISTENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_SET_CONTENTS_CONSISTENT = 1
     * }
     */
    public static int G_FILE_SET_CONTENTS_CONSISTENT() {
        return G_FILE_SET_CONTENTS_CONSISTENT;
    }
    private static final int G_FILE_SET_CONTENTS_DURABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_SET_CONTENTS_DURABLE = 2
     * }
     */
    public static int G_FILE_SET_CONTENTS_DURABLE() {
        return G_FILE_SET_CONTENTS_DURABLE;
    }
    private static final int G_FILE_SET_CONTENTS_ONLY_EXISTING = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_SET_CONTENTS_ONLY_EXISTING = 4
     * }
     */
    public static int G_FILE_SET_CONTENTS_ONLY_EXISTING() {
        return G_FILE_SET_CONTENTS_ONLY_EXISTING;
    }

    private static class g_file_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_file_error_quark()
     * }
     */
    public static FunctionDescriptor g_file_error_quark$descriptor() {
        return g_file_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_file_error_quark()
     * }
     */
    public static MethodHandle g_file_error_quark$handle() {
        return g_file_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_file_error_quark()
     * }
     */
    public static int g_file_error_quark() {
        var mh$ = g_file_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_error_from_errno {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_error_from_errno"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFileError g_file_error_from_errno(gint err_no)
     * }
     */
    public static FunctionDescriptor g_file_error_from_errno$descriptor() {
        return g_file_error_from_errno.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFileError g_file_error_from_errno(gint err_no)
     * }
     */
    public static MethodHandle g_file_error_from_errno$handle() {
        return g_file_error_from_errno.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFileError g_file_error_from_errno(gint err_no)
     * }
     */
    public static int g_file_error_from_errno(int err_no) {
        var mh$ = g_file_error_from_errno.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_error_from_errno", err_no);
            }
            return (int)mh$.invokeExact(err_no);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_test {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_test"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_test(const gchar *filename, GFileTest test)
     * }
     */
    public static FunctionDescriptor g_file_test$descriptor() {
        return g_file_test.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_test(const gchar *filename, GFileTest test)
     * }
     */
    public static MethodHandle g_file_test$handle() {
        return g_file_test.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_test(const gchar *filename, GFileTest test)
     * }
     */
    public static int g_file_test(MemorySegment filename, int test) {
        var mh$ = g_file_test.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_test", filename, test);
            }
            return (int)mh$.invokeExact(filename, test);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_get_contents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_get_contents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_get_contents(const gchar *filename, gchar **contents, gsize *length, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_get_contents$descriptor() {
        return g_file_get_contents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_get_contents(const gchar *filename, gchar **contents, gsize *length, GError **error)
     * }
     */
    public static MethodHandle g_file_get_contents$handle() {
        return g_file_get_contents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_get_contents(const gchar *filename, gchar **contents, gsize *length, GError **error)
     * }
     */
    public static int g_file_get_contents(MemorySegment filename, MemorySegment contents, MemorySegment length, MemorySegment error) {
        var mh$ = g_file_get_contents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_get_contents", filename, contents, length, error);
            }
            return (int)mh$.invokeExact(filename, contents, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_contents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_contents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_contents(const gchar *filename, const gchar *contents, gssize length, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_contents$descriptor() {
        return g_file_set_contents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_contents(const gchar *filename, const gchar *contents, gssize length, GError **error)
     * }
     */
    public static MethodHandle g_file_set_contents$handle() {
        return g_file_set_contents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_contents(const gchar *filename, const gchar *contents, gssize length, GError **error)
     * }
     */
    public static int g_file_set_contents(MemorySegment filename, MemorySegment contents, long length, MemorySegment error) {
        var mh$ = g_file_set_contents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_contents", filename, contents, length, error);
            }
            return (int)mh$.invokeExact(filename, contents, length, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_set_contents_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_set_contents_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_contents_full(const gchar *filename, const gchar *contents, gssize length, GFileSetContentsFlags flags, int mode, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_set_contents_full$descriptor() {
        return g_file_set_contents_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_file_set_contents_full(const gchar *filename, const gchar *contents, gssize length, GFileSetContentsFlags flags, int mode, GError **error)
     * }
     */
    public static MethodHandle g_file_set_contents_full$handle() {
        return g_file_set_contents_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_file_set_contents_full(const gchar *filename, const gchar *contents, gssize length, GFileSetContentsFlags flags, int mode, GError **error)
     * }
     */
    public static int g_file_set_contents_full(MemorySegment filename, MemorySegment contents, long length, int flags, int mode, MemorySegment error) {
        var mh$ = g_file_set_contents_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_set_contents_full", filename, contents, length, flags, mode, error);
            }
            return (int)mh$.invokeExact(filename, contents, length, flags, mode, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_read_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_read_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_file_read_link(const gchar *filename, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_read_link$descriptor() {
        return g_file_read_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_file_read_link(const gchar *filename, GError **error)
     * }
     */
    public static MethodHandle g_file_read_link$handle() {
        return g_file_read_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_file_read_link(const gchar *filename, GError **error)
     * }
     */
    public static MemorySegment g_file_read_link(MemorySegment filename, MemorySegment error) {
        var mh$ = g_file_read_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_read_link", filename, error);
            }
            return (MemorySegment)mh$.invokeExact(filename, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mkdtemp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mkdtemp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_mkdtemp(gchar *tmpl)
     * }
     */
    public static FunctionDescriptor g_mkdtemp$descriptor() {
        return g_mkdtemp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_mkdtemp(gchar *tmpl)
     * }
     */
    public static MethodHandle g_mkdtemp$handle() {
        return g_mkdtemp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_mkdtemp(gchar *tmpl)
     * }
     */
    public static MemorySegment g_mkdtemp(MemorySegment tmpl) {
        var mh$ = g_mkdtemp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mkdtemp", tmpl);
            }
            return (MemorySegment)mh$.invokeExact(tmpl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mkdtemp_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mkdtemp_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_mkdtemp_full(gchar *tmpl, gint mode)
     * }
     */
    public static FunctionDescriptor g_mkdtemp_full$descriptor() {
        return g_mkdtemp_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_mkdtemp_full(gchar *tmpl, gint mode)
     * }
     */
    public static MethodHandle g_mkdtemp_full$handle() {
        return g_mkdtemp_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_mkdtemp_full(gchar *tmpl, gint mode)
     * }
     */
    public static MemorySegment g_mkdtemp_full(MemorySegment tmpl, int mode) {
        var mh$ = g_mkdtemp_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mkdtemp_full", tmpl, mode);
            }
            return (MemorySegment)mh$.invokeExact(tmpl, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mkstemp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mkstemp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_mkstemp(gchar *tmpl)
     * }
     */
    public static FunctionDescriptor g_mkstemp$descriptor() {
        return g_mkstemp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_mkstemp(gchar *tmpl)
     * }
     */
    public static MethodHandle g_mkstemp$handle() {
        return g_mkstemp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_mkstemp(gchar *tmpl)
     * }
     */
    public static int g_mkstemp(MemorySegment tmpl) {
        var mh$ = g_mkstemp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mkstemp", tmpl);
            }
            return (int)mh$.invokeExact(tmpl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mkstemp_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mkstemp_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_mkstemp_full(gchar *tmpl, gint flags, gint mode)
     * }
     */
    public static FunctionDescriptor g_mkstemp_full$descriptor() {
        return g_mkstemp_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_mkstemp_full(gchar *tmpl, gint flags, gint mode)
     * }
     */
    public static MethodHandle g_mkstemp_full$handle() {
        return g_mkstemp_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_mkstemp_full(gchar *tmpl, gint flags, gint mode)
     * }
     */
    public static int g_mkstemp_full(MemorySegment tmpl, int flags, int mode) {
        var mh$ = g_mkstemp_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mkstemp_full", tmpl, flags, mode);
            }
            return (int)mh$.invokeExact(tmpl, flags, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_file_open_tmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_file_open_tmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_file_open_tmp(const gchar *tmpl, gchar **name_used, GError **error)
     * }
     */
    public static FunctionDescriptor g_file_open_tmp$descriptor() {
        return g_file_open_tmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_file_open_tmp(const gchar *tmpl, gchar **name_used, GError **error)
     * }
     */
    public static MethodHandle g_file_open_tmp$handle() {
        return g_file_open_tmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_file_open_tmp(const gchar *tmpl, gchar **name_used, GError **error)
     * }
     */
    public static int g_file_open_tmp(MemorySegment tmpl, MemorySegment name_used, MemorySegment error) {
        var mh$ = g_file_open_tmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_file_open_tmp", tmpl, name_used, error);
            }
            return (int)mh$.invokeExact(tmpl, name_used, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dir_make_tmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dir_make_tmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_dir_make_tmp(const gchar *tmpl, GError **error)
     * }
     */
    public static FunctionDescriptor g_dir_make_tmp$descriptor() {
        return g_dir_make_tmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_dir_make_tmp(const gchar *tmpl, GError **error)
     * }
     */
    public static MethodHandle g_dir_make_tmp$handle() {
        return g_dir_make_tmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_dir_make_tmp(const gchar *tmpl, GError **error)
     * }
     */
    public static MemorySegment g_dir_make_tmp(MemorySegment tmpl, MemorySegment error) {
        var mh$ = g_dir_make_tmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dir_make_tmp", tmpl, error);
            }
            return (MemorySegment)mh$.invokeExact(tmpl, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gchar *g_build_path(const gchar *separator, const gchar *first_element, ...)
     * }
     */
    public static class g_build_path {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_build_path");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_build_path(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gchar *g_build_path(const gchar *separator, const gchar *first_element, ...)
         * }
         */
        public static g_build_path makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_build_path(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment separator, MemorySegment first_element, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_build_path", separator, first_element, x2);
                }
                return (MemorySegment)spreader.invokeExact(separator, first_element, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_build_pathv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_build_pathv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_build_pathv(const gchar *separator, gchar **args)
     * }
     */
    public static FunctionDescriptor g_build_pathv$descriptor() {
        return g_build_pathv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_build_pathv(const gchar *separator, gchar **args)
     * }
     */
    public static MethodHandle g_build_pathv$handle() {
        return g_build_pathv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_build_pathv(const gchar *separator, gchar **args)
     * }
     */
    public static MemorySegment g_build_pathv(MemorySegment separator, MemorySegment args) {
        var mh$ = g_build_pathv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_build_pathv", separator, args);
            }
            return (MemorySegment)mh$.invokeExact(separator, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gchar *g_build_filename(const gchar *first_element, ...)
     * }
     */
    public static class g_build_filename {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_build_filename");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_build_filename(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gchar *g_build_filename(const gchar *first_element, ...)
         * }
         */
        public static g_build_filename makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_build_filename(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment first_element, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_build_filename", first_element, x1);
                }
                return (MemorySegment)spreader.invokeExact(first_element, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_build_filenamev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_build_filenamev"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_build_filenamev(gchar **args)
     * }
     */
    public static FunctionDescriptor g_build_filenamev$descriptor() {
        return g_build_filenamev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_build_filenamev(gchar **args)
     * }
     */
    public static MethodHandle g_build_filenamev$handle() {
        return g_build_filenamev.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_build_filenamev(gchar **args)
     * }
     */
    public static MemorySegment g_build_filenamev(MemorySegment args) {
        var mh$ = g_build_filenamev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_build_filenamev", args);
            }
            return (MemorySegment)mh$.invokeExact(args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_build_filename_valist {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_build_filename_valist"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_build_filename_valist(const gchar *first_element, va_list *args)
     * }
     */
    public static FunctionDescriptor g_build_filename_valist$descriptor() {
        return g_build_filename_valist.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_build_filename_valist(const gchar *first_element, va_list *args)
     * }
     */
    public static MethodHandle g_build_filename_valist$handle() {
        return g_build_filename_valist.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_build_filename_valist(const gchar *first_element, va_list *args)
     * }
     */
    public static MemorySegment g_build_filename_valist(MemorySegment first_element, MemorySegment args) {
        var mh$ = g_build_filename_valist.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_build_filename_valist", first_element, args);
            }
            return (MemorySegment)mh$.invokeExact(first_element, args);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mkdir_with_parents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mkdir_with_parents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_mkdir_with_parents(const gchar *pathname, gint mode)
     * }
     */
    public static FunctionDescriptor g_mkdir_with_parents$descriptor() {
        return g_mkdir_with_parents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_mkdir_with_parents(const gchar *pathname, gint mode)
     * }
     */
    public static MethodHandle g_mkdir_with_parents$handle() {
        return g_mkdir_with_parents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_mkdir_with_parents(const gchar *pathname, gint mode)
     * }
     */
    public static int g_mkdir_with_parents(MemorySegment pathname, int mode) {
        var mh$ = g_mkdir_with_parents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mkdir_with_parents", pathname, mode);
            }
            return (int)mh$.invokeExact(pathname, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_is_absolute {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_is_absolute"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_path_is_absolute(const gchar *file_name)
     * }
     */
    public static FunctionDescriptor g_path_is_absolute$descriptor() {
        return g_path_is_absolute.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_path_is_absolute(const gchar *file_name)
     * }
     */
    public static MethodHandle g_path_is_absolute$handle() {
        return g_path_is_absolute.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_path_is_absolute(const gchar *file_name)
     * }
     */
    public static int g_path_is_absolute(MemorySegment file_name) {
        var mh$ = g_path_is_absolute.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_is_absolute", file_name);
            }
            return (int)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_skip_root {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_skip_root"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_path_skip_root(const gchar *file_name)
     * }
     */
    public static FunctionDescriptor g_path_skip_root$descriptor() {
        return g_path_skip_root.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_path_skip_root(const gchar *file_name)
     * }
     */
    public static MethodHandle g_path_skip_root$handle() {
        return g_path_skip_root.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_path_skip_root(const gchar *file_name)
     * }
     */
    public static MemorySegment g_path_skip_root(MemorySegment file_name) {
        var mh$ = g_path_skip_root.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_skip_root", file_name);
            }
            return (MemorySegment)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_basename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_basename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_basename(const gchar *file_name)
     * }
     */
    public static FunctionDescriptor g_basename$descriptor() {
        return g_basename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_basename(const gchar *file_name)
     * }
     */
    public static MethodHandle g_basename$handle() {
        return g_basename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_basename(const gchar *file_name)
     * }
     */
    public static MemorySegment g_basename(MemorySegment file_name) {
        var mh$ = g_basename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_basename", file_name);
            }
            return (MemorySegment)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_get_current_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_get_current_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_get_current_dir()
     * }
     */
    public static FunctionDescriptor g_get_current_dir$descriptor() {
        return g_get_current_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_get_current_dir()
     * }
     */
    public static MethodHandle g_get_current_dir$handle() {
        return g_get_current_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_get_current_dir()
     * }
     */
    public static MemorySegment g_get_current_dir() {
        var mh$ = g_get_current_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_get_current_dir");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_get_basename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_get_basename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_path_get_basename(const gchar *file_name)
     * }
     */
    public static FunctionDescriptor g_path_get_basename$descriptor() {
        return g_path_get_basename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_path_get_basename(const gchar *file_name)
     * }
     */
    public static MethodHandle g_path_get_basename$handle() {
        return g_path_get_basename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_path_get_basename(const gchar *file_name)
     * }
     */
    public static MemorySegment g_path_get_basename(MemorySegment file_name) {
        var mh$ = g_path_get_basename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_get_basename", file_name);
            }
            return (MemorySegment)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_get_dirname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_get_dirname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_path_get_dirname(const gchar *file_name)
     * }
     */
    public static FunctionDescriptor g_path_get_dirname$descriptor() {
        return g_path_get_dirname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_path_get_dirname(const gchar *file_name)
     * }
     */
    public static MethodHandle g_path_get_dirname$handle() {
        return g_path_get_dirname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_path_get_dirname(const gchar *file_name)
     * }
     */
    public static MemorySegment g_path_get_dirname(MemorySegment file_name) {
        var mh$ = g_path_get_dirname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_get_dirname", file_name);
            }
            return (MemorySegment)mh$.invokeExact(file_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_canonicalize_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_canonicalize_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_canonicalize_filename(const gchar *filename, const gchar *relative_to)
     * }
     */
    public static FunctionDescriptor g_canonicalize_filename$descriptor() {
        return g_canonicalize_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_canonicalize_filename(const gchar *filename, const gchar *relative_to)
     * }
     */
    public static MethodHandle g_canonicalize_filename$handle() {
        return g_canonicalize_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_canonicalize_filename(const gchar *filename, const gchar *relative_to)
     * }
     */
    public static MemorySegment g_canonicalize_filename(MemorySegment filename, MemorySegment relative_to) {
        var mh$ = g_canonicalize_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_canonicalize_filename", filename, relative_to);
            }
            return (MemorySegment)mh$.invokeExact(filename, relative_to);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strip_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strip_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_strip_context(const gchar *msgid, const gchar *msgval)
     * }
     */
    public static FunctionDescriptor g_strip_context$descriptor() {
        return g_strip_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_strip_context(const gchar *msgid, const gchar *msgval)
     * }
     */
    public static MethodHandle g_strip_context$handle() {
        return g_strip_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_strip_context(const gchar *msgid, const gchar *msgval)
     * }
     */
    public static MemorySegment g_strip_context(MemorySegment msgid, MemorySegment msgval) {
        var mh$ = g_strip_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strip_context", msgid, msgval);
            }
            return (MemorySegment)mh$.invokeExact(msgid, msgval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dgettext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dgettext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dgettext(const gchar *domain, const gchar *msgid)
     * }
     */
    public static FunctionDescriptor g_dgettext$descriptor() {
        return g_dgettext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dgettext(const gchar *domain, const gchar *msgid)
     * }
     */
    public static MethodHandle g_dgettext$handle() {
        return g_dgettext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dgettext(const gchar *domain, const gchar *msgid)
     * }
     */
    public static MemorySegment g_dgettext(MemorySegment domain, MemorySegment msgid) {
        var mh$ = g_dgettext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dgettext", domain, msgid);
            }
            return (MemorySegment)mh$.invokeExact(domain, msgid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dcgettext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dcgettext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dcgettext(const gchar *domain, const gchar *msgid, gint category)
     * }
     */
    public static FunctionDescriptor g_dcgettext$descriptor() {
        return g_dcgettext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dcgettext(const gchar *domain, const gchar *msgid, gint category)
     * }
     */
    public static MethodHandle g_dcgettext$handle() {
        return g_dcgettext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dcgettext(const gchar *domain, const gchar *msgid, gint category)
     * }
     */
    public static MemorySegment g_dcgettext(MemorySegment domain, MemorySegment msgid, int category) {
        var mh$ = g_dcgettext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dcgettext", domain, msgid, category);
            }
            return (MemorySegment)mh$.invokeExact(domain, msgid, category);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dngettext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dngettext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dngettext(const gchar *domain, const gchar *msgid, const gchar *msgid_plural, gulong n)
     * }
     */
    public static FunctionDescriptor g_dngettext$descriptor() {
        return g_dngettext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dngettext(const gchar *domain, const gchar *msgid, const gchar *msgid_plural, gulong n)
     * }
     */
    public static MethodHandle g_dngettext$handle() {
        return g_dngettext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dngettext(const gchar *domain, const gchar *msgid, const gchar *msgid_plural, gulong n)
     * }
     */
    public static MemorySegment g_dngettext(MemorySegment domain, MemorySegment msgid, MemorySegment msgid_plural, long n) {
        var mh$ = g_dngettext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dngettext", domain, msgid, msgid_plural, n);
            }
            return (MemorySegment)mh$.invokeExact(domain, msgid, msgid_plural, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dpgettext {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dpgettext"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dpgettext(const gchar *domain, const gchar *msgctxtid, gsize msgidoffset)
     * }
     */
    public static FunctionDescriptor g_dpgettext$descriptor() {
        return g_dpgettext.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dpgettext(const gchar *domain, const gchar *msgctxtid, gsize msgidoffset)
     * }
     */
    public static MethodHandle g_dpgettext$handle() {
        return g_dpgettext.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dpgettext(const gchar *domain, const gchar *msgctxtid, gsize msgidoffset)
     * }
     */
    public static MemorySegment g_dpgettext(MemorySegment domain, MemorySegment msgctxtid, long msgidoffset) {
        var mh$ = g_dpgettext.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dpgettext", domain, msgctxtid, msgidoffset);
            }
            return (MemorySegment)mh$.invokeExact(domain, msgctxtid, msgidoffset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_dpgettext2 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_dpgettext2"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_dpgettext2(const gchar *domain, const gchar *context, const gchar *msgid)
     * }
     */
    public static FunctionDescriptor g_dpgettext2$descriptor() {
        return g_dpgettext2.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_dpgettext2(const gchar *domain, const gchar *context, const gchar *msgid)
     * }
     */
    public static MethodHandle g_dpgettext2$handle() {
        return g_dpgettext2.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_dpgettext2(const gchar *domain, const gchar *context, const gchar *msgid)
     * }
     */
    public static MemorySegment g_dpgettext2(MemorySegment domain, MemorySegment context, MemorySegment msgid) {
        var mh$ = g_dpgettext2.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_dpgettext2", domain, context, msgid);
            }
            return (MemorySegment)mh$.invokeExact(domain, context, msgid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void (g_free)(gpointer mem)
     * }
     */
    public static FunctionDescriptor g_free$descriptor() {
        return g_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void (g_free)(gpointer mem)
     * }
     */
    public static MethodHandle g_free$handle() {
        return g_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void (g_free)(gpointer mem)
     * }
     */
    public static void g_free(MemorySegment mem) {
        var mh$ = g_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_free", mem);
            }
            mh$.invokeExact(mem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_free_sized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_free_sized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_free_sized(gpointer mem, size_t size)
     * }
     */
    public static FunctionDescriptor g_free_sized$descriptor() {
        return g_free_sized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_free_sized(gpointer mem, size_t size)
     * }
     */
    public static MethodHandle g_free_sized$handle() {
        return g_free_sized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_free_sized(gpointer mem, size_t size)
     * }
     */
    public static void g_free_sized(MemorySegment mem, long size) {
        var mh$ = g_free_sized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_free_sized", mem, size);
            }
            mh$.invokeExact(mem, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_clear_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_clear_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_clear_pointer(gpointer *pp, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_clear_pointer$descriptor() {
        return g_clear_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_clear_pointer(gpointer *pp, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_clear_pointer$handle() {
        return g_clear_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_clear_pointer(gpointer *pp, GDestroyNotify destroy)
     * }
     */
    public static void g_clear_pointer(MemorySegment pp, MemorySegment destroy) {
        var mh$ = g_clear_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_clear_pointer", pp, destroy);
            }
            mh$.invokeExact(pp, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_malloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_malloc(gsize n_bytes)
     * }
     */
    public static FunctionDescriptor g_malloc$descriptor() {
        return g_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_malloc(gsize n_bytes)
     * }
     */
    public static MethodHandle g_malloc$handle() {
        return g_malloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_malloc(gsize n_bytes)
     * }
     */
    public static MemorySegment g_malloc(long n_bytes) {
        var mh$ = g_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_malloc", n_bytes);
            }
            return (MemorySegment)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_malloc0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_malloc0"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_malloc0(gsize n_bytes)
     * }
     */
    public static FunctionDescriptor g_malloc0$descriptor() {
        return g_malloc0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_malloc0(gsize n_bytes)
     * }
     */
    public static MethodHandle g_malloc0$handle() {
        return g_malloc0.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_malloc0(gsize n_bytes)
     * }
     */
    public static MemorySegment g_malloc0(long n_bytes) {
        var mh$ = g_malloc0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_malloc0", n_bytes);
            }
            return (MemorySegment)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_realloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_realloc(gpointer mem, gsize n_bytes)
     * }
     */
    public static FunctionDescriptor g_realloc$descriptor() {
        return g_realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_realloc(gpointer mem, gsize n_bytes)
     * }
     */
    public static MethodHandle g_realloc$handle() {
        return g_realloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_realloc(gpointer mem, gsize n_bytes)
     * }
     */
    public static MemorySegment g_realloc(MemorySegment mem, long n_bytes) {
        var mh$ = g_realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_realloc", mem, n_bytes);
            }
            return (MemorySegment)mh$.invokeExact(mem, n_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_try_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_try_malloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_try_malloc(gsize n_bytes)
     * }
     */
    public static FunctionDescriptor g_try_malloc$descriptor() {
        return g_try_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_try_malloc(gsize n_bytes)
     * }
     */
    public static MethodHandle g_try_malloc$handle() {
        return g_try_malloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_try_malloc(gsize n_bytes)
     * }
     */
    public static MemorySegment g_try_malloc(long n_bytes) {
        var mh$ = g_try_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_try_malloc", n_bytes);
            }
            return (MemorySegment)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_try_malloc0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_try_malloc0"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_try_malloc0(gsize n_bytes)
     * }
     */
    public static FunctionDescriptor g_try_malloc0$descriptor() {
        return g_try_malloc0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_try_malloc0(gsize n_bytes)
     * }
     */
    public static MethodHandle g_try_malloc0$handle() {
        return g_try_malloc0.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_try_malloc0(gsize n_bytes)
     * }
     */
    public static MemorySegment g_try_malloc0(long n_bytes) {
        var mh$ = g_try_malloc0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_try_malloc0", n_bytes);
            }
            return (MemorySegment)mh$.invokeExact(n_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_try_realloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_try_realloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_try_realloc(gpointer mem, gsize n_bytes)
     * }
     */
    public static FunctionDescriptor g_try_realloc$descriptor() {
        return g_try_realloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_try_realloc(gpointer mem, gsize n_bytes)
     * }
     */
    public static MethodHandle g_try_realloc$handle() {
        return g_try_realloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_try_realloc(gpointer mem, gsize n_bytes)
     * }
     */
    public static MemorySegment g_try_realloc(MemorySegment mem, long n_bytes) {
        var mh$ = g_try_realloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_try_realloc", mem, n_bytes);
            }
            return (MemorySegment)mh$.invokeExact(mem, n_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_malloc_n {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_malloc_n"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_malloc_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static FunctionDescriptor g_malloc_n$descriptor() {
        return g_malloc_n.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_malloc_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MethodHandle g_malloc_n$handle() {
        return g_malloc_n.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_malloc_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MemorySegment g_malloc_n(long n_blocks, long n_block_bytes) {
        var mh$ = g_malloc_n.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_malloc_n", n_blocks, n_block_bytes);
            }
            return (MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_malloc0_n {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_malloc0_n"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_malloc0_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static FunctionDescriptor g_malloc0_n$descriptor() {
        return g_malloc0_n.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_malloc0_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MethodHandle g_malloc0_n$handle() {
        return g_malloc0_n.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_malloc0_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MemorySegment g_malloc0_n(long n_blocks, long n_block_bytes) {
        var mh$ = g_malloc0_n.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_malloc0_n", n_blocks, n_block_bytes);
            }
            return (MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_realloc_n {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_realloc_n"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static FunctionDescriptor g_realloc_n$descriptor() {
        return g_realloc_n.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MethodHandle g_realloc_n$handle() {
        return g_realloc_n.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MemorySegment g_realloc_n(MemorySegment mem, long n_blocks, long n_block_bytes) {
        var mh$ = g_realloc_n.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_realloc_n", mem, n_blocks, n_block_bytes);
            }
            return (MemorySegment)mh$.invokeExact(mem, n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_try_malloc_n {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_try_malloc_n"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_try_malloc_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static FunctionDescriptor g_try_malloc_n$descriptor() {
        return g_try_malloc_n.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_try_malloc_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MethodHandle g_try_malloc_n$handle() {
        return g_try_malloc_n.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_try_malloc_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MemorySegment g_try_malloc_n(long n_blocks, long n_block_bytes) {
        var mh$ = g_try_malloc_n.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_try_malloc_n", n_blocks, n_block_bytes);
            }
            return (MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_try_malloc0_n {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_try_malloc0_n"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_try_malloc0_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static FunctionDescriptor g_try_malloc0_n$descriptor() {
        return g_try_malloc0_n.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_try_malloc0_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MethodHandle g_try_malloc0_n$handle() {
        return g_try_malloc0_n.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_try_malloc0_n(gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MemorySegment g_try_malloc0_n(long n_blocks, long n_block_bytes) {
        var mh$ = g_try_malloc0_n.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_try_malloc0_n", n_blocks, n_block_bytes);
            }
            return (MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_try_realloc_n {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_try_realloc_n"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_try_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static FunctionDescriptor g_try_realloc_n$descriptor() {
        return g_try_realloc_n.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_try_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MethodHandle g_try_realloc_n$handle() {
        return g_try_realloc_n.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_try_realloc_n(gpointer mem, gsize n_blocks, gsize n_block_bytes)
     * }
     */
    public static MemorySegment g_try_realloc_n(MemorySegment mem, long n_blocks, long n_block_bytes) {
        var mh$ = g_try_realloc_n.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_try_realloc_n", mem, n_blocks, n_block_bytes);
            }
            return (MemorySegment)mh$.invokeExact(mem, n_blocks, n_block_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_aligned_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_aligned_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_aligned_alloc(gsize n_blocks, gsize n_block_bytes, gsize alignment)
     * }
     */
    public static FunctionDescriptor g_aligned_alloc$descriptor() {
        return g_aligned_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_aligned_alloc(gsize n_blocks, gsize n_block_bytes, gsize alignment)
     * }
     */
    public static MethodHandle g_aligned_alloc$handle() {
        return g_aligned_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_aligned_alloc(gsize n_blocks, gsize n_block_bytes, gsize alignment)
     * }
     */
    public static MemorySegment g_aligned_alloc(long n_blocks, long n_block_bytes, long alignment) {
        var mh$ = g_aligned_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_aligned_alloc", n_blocks, n_block_bytes, alignment);
            }
            return (MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes, alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_aligned_alloc0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_aligned_alloc0"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_aligned_alloc0(gsize n_blocks, gsize n_block_bytes, gsize alignment)
     * }
     */
    public static FunctionDescriptor g_aligned_alloc0$descriptor() {
        return g_aligned_alloc0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_aligned_alloc0(gsize n_blocks, gsize n_block_bytes, gsize alignment)
     * }
     */
    public static MethodHandle g_aligned_alloc0$handle() {
        return g_aligned_alloc0.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_aligned_alloc0(gsize n_blocks, gsize n_block_bytes, gsize alignment)
     * }
     */
    public static MemorySegment g_aligned_alloc0(long n_blocks, long n_block_bytes, long alignment) {
        var mh$ = g_aligned_alloc0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_aligned_alloc0", n_blocks, n_block_bytes, alignment);
            }
            return (MemorySegment)mh$.invokeExact(n_blocks, n_block_bytes, alignment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_aligned_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_aligned_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_aligned_free(gpointer mem)
     * }
     */
    public static FunctionDescriptor g_aligned_free$descriptor() {
        return g_aligned_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_aligned_free(gpointer mem)
     * }
     */
    public static MethodHandle g_aligned_free$handle() {
        return g_aligned_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_aligned_free(gpointer mem)
     * }
     */
    public static void g_aligned_free(MemorySegment mem) {
        var mh$ = g_aligned_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_aligned_free", mem);
            }
            mh$.invokeExact(mem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_aligned_free_sized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_aligned_free_sized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_aligned_free_sized(gpointer mem, size_t alignment, size_t size)
     * }
     */
    public static FunctionDescriptor g_aligned_free_sized$descriptor() {
        return g_aligned_free_sized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_aligned_free_sized(gpointer mem, size_t alignment, size_t size)
     * }
     */
    public static MethodHandle g_aligned_free_sized$handle() {
        return g_aligned_free_sized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_aligned_free_sized(gpointer mem, size_t alignment, size_t size)
     * }
     */
    public static void g_aligned_free_sized(MemorySegment mem, long alignment, long size) {
        var mh$ = g_aligned_free_sized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_aligned_free_sized", mem, alignment, size);
            }
            mh$.invokeExact(mem, alignment, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_set_vtable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_set_vtable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mem_set_vtable(GMemVTable *vtable)
     * }
     */
    public static FunctionDescriptor g_mem_set_vtable$descriptor() {
        return g_mem_set_vtable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mem_set_vtable(GMemVTable *vtable)
     * }
     */
    public static MethodHandle g_mem_set_vtable$handle() {
        return g_mem_set_vtable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mem_set_vtable(GMemVTable *vtable)
     * }
     */
    public static void g_mem_set_vtable(MemorySegment vtable) {
        var mh$ = g_mem_set_vtable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_set_vtable", vtable);
            }
            mh$.invokeExact(vtable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_is_system_malloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_is_system_malloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_mem_is_system_malloc()
     * }
     */
    public static FunctionDescriptor g_mem_is_system_malloc$descriptor() {
        return g_mem_is_system_malloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_mem_is_system_malloc()
     * }
     */
    public static MethodHandle g_mem_is_system_malloc$handle() {
        return g_mem_is_system_malloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_mem_is_system_malloc()
     * }
     */
    public static int g_mem_is_system_malloc() {
        var mh$ = g_mem_is_system_malloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_is_system_malloc");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_gc_friendly$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_mem_gc_friendly").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern gboolean g_mem_gc_friendly
     * }
     */
    public static OfInt g_mem_gc_friendly$layout() {
        return g_mem_gc_friendly$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern gboolean g_mem_gc_friendly
     * }
     */
    public static MemorySegment g_mem_gc_friendly$segment() {
        return g_mem_gc_friendly$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern gboolean g_mem_gc_friendly
     * }
     */
    public static int g_mem_gc_friendly() {
        return g_mem_gc_friendly$constants.SEGMENT.get(g_mem_gc_friendly$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern gboolean g_mem_gc_friendly
     * }
     */
    public static void g_mem_gc_friendly(int varValue) {
        g_mem_gc_friendly$constants.SEGMENT.set(g_mem_gc_friendly$constants.LAYOUT, 0L, varValue);
    }

    private static class glib_mem_profiler_table$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("glib_mem_profiler_table").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern GMemVTable *glib_mem_profiler_table
     * }
     */
    public static AddressLayout glib_mem_profiler_table$layout() {
        return glib_mem_profiler_table$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern GMemVTable *glib_mem_profiler_table
     * }
     */
    public static MemorySegment glib_mem_profiler_table$segment() {
        return glib_mem_profiler_table$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern GMemVTable *glib_mem_profiler_table
     * }
     */
    public static MemorySegment glib_mem_profiler_table() {
        return glib_mem_profiler_table$constants.SEGMENT.get(glib_mem_profiler_table$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern GMemVTable *glib_mem_profiler_table
     * }
     */
    public static void glib_mem_profiler_table(MemorySegment varValue) {
        glib_mem_profiler_table$constants.SEGMENT.set(glib_mem_profiler_table$constants.LAYOUT, 0L, varValue);
    }
}

