// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_15 extends app_indicator_h_16 {

    app_indicator_h_15() {
        // Should not be called directly
    }

    private static class pthread_condattr_getclock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_condattr_getclock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_condattr_getclock(const pthread_condattr_t *restrict __attr, __clockid_t *restrict __clock_id)
     * }
     */
    public static FunctionDescriptor pthread_condattr_getclock$descriptor() {
        return pthread_condattr_getclock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_condattr_getclock(const pthread_condattr_t *restrict __attr, __clockid_t *restrict __clock_id)
     * }
     */
    public static MethodHandle pthread_condattr_getclock$handle() {
        return pthread_condattr_getclock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_condattr_getclock(const pthread_condattr_t *restrict __attr, __clockid_t *restrict __clock_id)
     * }
     */
    public static int pthread_condattr_getclock(MemorySegment __attr, MemorySegment __clock_id) {
        var mh$ = pthread_condattr_getclock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_condattr_getclock", __attr, __clock_id);
            }
            return (int)mh$.invokeExact(__attr, __clock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_condattr_setclock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_condattr_setclock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_condattr_setclock(pthread_condattr_t *__attr, __clockid_t __clock_id)
     * }
     */
    public static FunctionDescriptor pthread_condattr_setclock$descriptor() {
        return pthread_condattr_setclock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_condattr_setclock(pthread_condattr_t *__attr, __clockid_t __clock_id)
     * }
     */
    public static MethodHandle pthread_condattr_setclock$handle() {
        return pthread_condattr_setclock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_condattr_setclock(pthread_condattr_t *__attr, __clockid_t __clock_id)
     * }
     */
    public static int pthread_condattr_setclock(MemorySegment __attr, int __clock_id) {
        var mh$ = pthread_condattr_setclock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_condattr_setclock", __attr, __clock_id);
            }
            return (int)mh$.invokeExact(__attr, __clock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_spin_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_spin_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_spin_init(pthread_spinlock_t *__lock, int __pshared)
     * }
     */
    public static FunctionDescriptor pthread_spin_init$descriptor() {
        return pthread_spin_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_spin_init(pthread_spinlock_t *__lock, int __pshared)
     * }
     */
    public static MethodHandle pthread_spin_init$handle() {
        return pthread_spin_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_spin_init(pthread_spinlock_t *__lock, int __pshared)
     * }
     */
    public static int pthread_spin_init(MemorySegment __lock, int __pshared) {
        var mh$ = pthread_spin_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_spin_init", __lock, __pshared);
            }
            return (int)mh$.invokeExact(__lock, __pshared);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_spin_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_spin_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_spin_destroy(pthread_spinlock_t *__lock)
     * }
     */
    public static FunctionDescriptor pthread_spin_destroy$descriptor() {
        return pthread_spin_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_spin_destroy(pthread_spinlock_t *__lock)
     * }
     */
    public static MethodHandle pthread_spin_destroy$handle() {
        return pthread_spin_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_spin_destroy(pthread_spinlock_t *__lock)
     * }
     */
    public static int pthread_spin_destroy(MemorySegment __lock) {
        var mh$ = pthread_spin_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_spin_destroy", __lock);
            }
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_spin_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_spin_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_spin_lock(pthread_spinlock_t *__lock)
     * }
     */
    public static FunctionDescriptor pthread_spin_lock$descriptor() {
        return pthread_spin_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_spin_lock(pthread_spinlock_t *__lock)
     * }
     */
    public static MethodHandle pthread_spin_lock$handle() {
        return pthread_spin_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_spin_lock(pthread_spinlock_t *__lock)
     * }
     */
    public static int pthread_spin_lock(MemorySegment __lock) {
        var mh$ = pthread_spin_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_spin_lock", __lock);
            }
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_spin_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_spin_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_spin_trylock(pthread_spinlock_t *__lock)
     * }
     */
    public static FunctionDescriptor pthread_spin_trylock$descriptor() {
        return pthread_spin_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_spin_trylock(pthread_spinlock_t *__lock)
     * }
     */
    public static MethodHandle pthread_spin_trylock$handle() {
        return pthread_spin_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_spin_trylock(pthread_spinlock_t *__lock)
     * }
     */
    public static int pthread_spin_trylock(MemorySegment __lock) {
        var mh$ = pthread_spin_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_spin_trylock", __lock);
            }
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_spin_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_spin_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_spin_unlock(pthread_spinlock_t *__lock)
     * }
     */
    public static FunctionDescriptor pthread_spin_unlock$descriptor() {
        return pthread_spin_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_spin_unlock(pthread_spinlock_t *__lock)
     * }
     */
    public static MethodHandle pthread_spin_unlock$handle() {
        return pthread_spin_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_spin_unlock(pthread_spinlock_t *__lock)
     * }
     */
    public static int pthread_spin_unlock(MemorySegment __lock) {
        var mh$ = pthread_spin_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_spin_unlock", __lock);
            }
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_barrier_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_barrier_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_barrier_init(pthread_barrier_t *restrict __barrier, const pthread_barrierattr_t *restrict __attr, unsigned int __count)
     * }
     */
    public static FunctionDescriptor pthread_barrier_init$descriptor() {
        return pthread_barrier_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_barrier_init(pthread_barrier_t *restrict __barrier, const pthread_barrierattr_t *restrict __attr, unsigned int __count)
     * }
     */
    public static MethodHandle pthread_barrier_init$handle() {
        return pthread_barrier_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_barrier_init(pthread_barrier_t *restrict __barrier, const pthread_barrierattr_t *restrict __attr, unsigned int __count)
     * }
     */
    public static int pthread_barrier_init(MemorySegment __barrier, MemorySegment __attr, int __count) {
        var mh$ = pthread_barrier_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_barrier_init", __barrier, __attr, __count);
            }
            return (int)mh$.invokeExact(__barrier, __attr, __count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_barrier_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_barrier_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_barrier_destroy(pthread_barrier_t *__barrier)
     * }
     */
    public static FunctionDescriptor pthread_barrier_destroy$descriptor() {
        return pthread_barrier_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_barrier_destroy(pthread_barrier_t *__barrier)
     * }
     */
    public static MethodHandle pthread_barrier_destroy$handle() {
        return pthread_barrier_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_barrier_destroy(pthread_barrier_t *__barrier)
     * }
     */
    public static int pthread_barrier_destroy(MemorySegment __barrier) {
        var mh$ = pthread_barrier_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_barrier_destroy", __barrier);
            }
            return (int)mh$.invokeExact(__barrier);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_barrier_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_barrier_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_barrier_wait(pthread_barrier_t *__barrier)
     * }
     */
    public static FunctionDescriptor pthread_barrier_wait$descriptor() {
        return pthread_barrier_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_barrier_wait(pthread_barrier_t *__barrier)
     * }
     */
    public static MethodHandle pthread_barrier_wait$handle() {
        return pthread_barrier_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_barrier_wait(pthread_barrier_t *__barrier)
     * }
     */
    public static int pthread_barrier_wait(MemorySegment __barrier) {
        var mh$ = pthread_barrier_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_barrier_wait", __barrier);
            }
            return (int)mh$.invokeExact(__barrier);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_barrierattr_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_barrierattr_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_barrierattr_init(pthread_barrierattr_t *__attr)
     * }
     */
    public static FunctionDescriptor pthread_barrierattr_init$descriptor() {
        return pthread_barrierattr_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_barrierattr_init(pthread_barrierattr_t *__attr)
     * }
     */
    public static MethodHandle pthread_barrierattr_init$handle() {
        return pthread_barrierattr_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_barrierattr_init(pthread_barrierattr_t *__attr)
     * }
     */
    public static int pthread_barrierattr_init(MemorySegment __attr) {
        var mh$ = pthread_barrierattr_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_barrierattr_init", __attr);
            }
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_barrierattr_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_barrierattr_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_barrierattr_destroy(pthread_barrierattr_t *__attr)
     * }
     */
    public static FunctionDescriptor pthread_barrierattr_destroy$descriptor() {
        return pthread_barrierattr_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_barrierattr_destroy(pthread_barrierattr_t *__attr)
     * }
     */
    public static MethodHandle pthread_barrierattr_destroy$handle() {
        return pthread_barrierattr_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_barrierattr_destroy(pthread_barrierattr_t *__attr)
     * }
     */
    public static int pthread_barrierattr_destroy(MemorySegment __attr) {
        var mh$ = pthread_barrierattr_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_barrierattr_destroy", __attr);
            }
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_barrierattr_getpshared {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_barrierattr_getpshared"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static FunctionDescriptor pthread_barrierattr_getpshared$descriptor() {
        return pthread_barrierattr_getpshared.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static MethodHandle pthread_barrierattr_getpshared$handle() {
        return pthread_barrierattr_getpshared.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_barrierattr_getpshared(const pthread_barrierattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static int pthread_barrierattr_getpshared(MemorySegment __attr, MemorySegment __pshared) {
        var mh$ = pthread_barrierattr_getpshared.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_barrierattr_getpshared", __attr, __pshared);
            }
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_barrierattr_setpshared {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_barrierattr_setpshared"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_barrierattr_setpshared(pthread_barrierattr_t *__attr, int __pshared)
     * }
     */
    public static FunctionDescriptor pthread_barrierattr_setpshared$descriptor() {
        return pthread_barrierattr_setpshared.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_barrierattr_setpshared(pthread_barrierattr_t *__attr, int __pshared)
     * }
     */
    public static MethodHandle pthread_barrierattr_setpshared$handle() {
        return pthread_barrierattr_setpshared.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_barrierattr_setpshared(pthread_barrierattr_t *__attr, int __pshared)
     * }
     */
    public static int pthread_barrierattr_setpshared(MemorySegment __attr, int __pshared) {
        var mh$ = pthread_barrierattr_setpshared.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_barrierattr_setpshared", __attr, __pshared);
            }
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_key_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_key_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_key_create(pthread_key_t *__key, void (*__destr_function)(void *))
     * }
     */
    public static FunctionDescriptor pthread_key_create$descriptor() {
        return pthread_key_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_key_create(pthread_key_t *__key, void (*__destr_function)(void *))
     * }
     */
    public static MethodHandle pthread_key_create$handle() {
        return pthread_key_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_key_create(pthread_key_t *__key, void (*__destr_function)(void *))
     * }
     */
    public static int pthread_key_create(MemorySegment __key, MemorySegment __destr_function) {
        var mh$ = pthread_key_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_key_create", __key, __destr_function);
            }
            return (int)mh$.invokeExact(__key, __destr_function);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_key_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_key_delete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_key_delete(pthread_key_t __key)
     * }
     */
    public static FunctionDescriptor pthread_key_delete$descriptor() {
        return pthread_key_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_key_delete(pthread_key_t __key)
     * }
     */
    public static MethodHandle pthread_key_delete$handle() {
        return pthread_key_delete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_key_delete(pthread_key_t __key)
     * }
     */
    public static int pthread_key_delete(int __key) {
        var mh$ = pthread_key_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_key_delete", __key);
            }
            return (int)mh$.invokeExact(__key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_getspecific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_getspecific"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *pthread_getspecific(pthread_key_t __key)
     * }
     */
    public static FunctionDescriptor pthread_getspecific$descriptor() {
        return pthread_getspecific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *pthread_getspecific(pthread_key_t __key)
     * }
     */
    public static MethodHandle pthread_getspecific$handle() {
        return pthread_getspecific.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *pthread_getspecific(pthread_key_t __key)
     * }
     */
    public static MemorySegment pthread_getspecific(int __key) {
        var mh$ = pthread_getspecific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_getspecific", __key);
            }
            return (MemorySegment)mh$.invokeExact(__key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_setspecific {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_setspecific"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_setspecific(pthread_key_t __key, const void *__pointer)
     * }
     */
    public static FunctionDescriptor pthread_setspecific$descriptor() {
        return pthread_setspecific.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_setspecific(pthread_key_t __key, const void *__pointer)
     * }
     */
    public static MethodHandle pthread_setspecific$handle() {
        return pthread_setspecific.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_setspecific(pthread_key_t __key, const void *__pointer)
     * }
     */
    public static int pthread_setspecific(int __key, MemorySegment __pointer) {
        var mh$ = pthread_setspecific.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_setspecific", __key, __pointer);
            }
            return (int)mh$.invokeExact(__key, __pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_getcpuclockid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_getcpuclockid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t *__clock_id)
     * }
     */
    public static FunctionDescriptor pthread_getcpuclockid$descriptor() {
        return pthread_getcpuclockid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t *__clock_id)
     * }
     */
    public static MethodHandle pthread_getcpuclockid$handle() {
        return pthread_getcpuclockid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_getcpuclockid(pthread_t __thread_id, __clockid_t *__clock_id)
     * }
     */
    public static int pthread_getcpuclockid(long __thread_id, MemorySegment __clock_id) {
        var mh$ = pthread_getcpuclockid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_getcpuclockid", __thread_id, __clock_id);
            }
            return (int)mh$.invokeExact(__thread_id, __clock_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_atfork {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_atfork"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_atfork(void (*__prepare)(void), void (*__parent)(void), void (*__child)(void))
     * }
     */
    public static FunctionDescriptor pthread_atfork$descriptor() {
        return pthread_atfork.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_atfork(void (*__prepare)(void), void (*__parent)(void), void (*__child)(void))
     * }
     */
    public static MethodHandle pthread_atfork$handle() {
        return pthread_atfork.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_atfork(void (*__prepare)(void), void (*__parent)(void), void (*__child)(void))
     * }
     */
    public static int pthread_atfork(MemorySegment __prepare, MemorySegment __parent, MemorySegment __child) {
        var mh$ = pthread_atfork.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_atfork", __prepare, __parent, __child);
            }
            return (int)mh$.invokeExact(__prepare, __parent, __child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_mutex_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_mutex_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_mutex_init(GStaticMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_static_mutex_init$descriptor() {
        return g_static_mutex_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_mutex_init(GStaticMutex *mutex)
     * }
     */
    public static MethodHandle g_static_mutex_init$handle() {
        return g_static_mutex_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_mutex_init(GStaticMutex *mutex)
     * }
     */
    public static void g_static_mutex_init(MemorySegment mutex) {
        var mh$ = g_static_mutex_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_mutex_init", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_mutex_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_mutex_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_mutex_free(GStaticMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_static_mutex_free$descriptor() {
        return g_static_mutex_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_mutex_free(GStaticMutex *mutex)
     * }
     */
    public static MethodHandle g_static_mutex_free$handle() {
        return g_static_mutex_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_mutex_free(GStaticMutex *mutex)
     * }
     */
    public static void g_static_mutex_free(MemorySegment mutex) {
        var mh$ = g_static_mutex_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_mutex_free", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_mutex_get_mutex_impl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_mutex_get_mutex_impl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMutex *g_static_mutex_get_mutex_impl(GStaticMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_static_mutex_get_mutex_impl$descriptor() {
        return g_static_mutex_get_mutex_impl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMutex *g_static_mutex_get_mutex_impl(GStaticMutex *mutex)
     * }
     */
    public static MethodHandle g_static_mutex_get_mutex_impl$handle() {
        return g_static_mutex_get_mutex_impl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMutex *g_static_mutex_get_mutex_impl(GStaticMutex *mutex)
     * }
     */
    public static MemorySegment g_static_mutex_get_mutex_impl(MemorySegment mutex) {
        var mh$ = g_static_mutex_get_mutex_impl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_mutex_get_mutex_impl", mutex);
            }
            return (MemorySegment)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rec_mutex_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rec_mutex_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_init(GStaticRecMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_static_rec_mutex_init$descriptor() {
        return g_static_rec_mutex_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_init(GStaticRecMutex *mutex)
     * }
     */
    public static MethodHandle g_static_rec_mutex_init$handle() {
        return g_static_rec_mutex_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_init(GStaticRecMutex *mutex)
     * }
     */
    public static void g_static_rec_mutex_init(MemorySegment mutex) {
        var mh$ = g_static_rec_mutex_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rec_mutex_init", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rec_mutex_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rec_mutex_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_lock(GStaticRecMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_static_rec_mutex_lock$descriptor() {
        return g_static_rec_mutex_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_lock(GStaticRecMutex *mutex)
     * }
     */
    public static MethodHandle g_static_rec_mutex_lock$handle() {
        return g_static_rec_mutex_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_lock(GStaticRecMutex *mutex)
     * }
     */
    public static void g_static_rec_mutex_lock(MemorySegment mutex) {
        var mh$ = g_static_rec_mutex_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rec_mutex_lock", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rec_mutex_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rec_mutex_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_static_rec_mutex_trylock(GStaticRecMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_static_rec_mutex_trylock$descriptor() {
        return g_static_rec_mutex_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_static_rec_mutex_trylock(GStaticRecMutex *mutex)
     * }
     */
    public static MethodHandle g_static_rec_mutex_trylock$handle() {
        return g_static_rec_mutex_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_static_rec_mutex_trylock(GStaticRecMutex *mutex)
     * }
     */
    public static int g_static_rec_mutex_trylock(MemorySegment mutex) {
        var mh$ = g_static_rec_mutex_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rec_mutex_trylock", mutex);
            }
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rec_mutex_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rec_mutex_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_unlock(GStaticRecMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_static_rec_mutex_unlock$descriptor() {
        return g_static_rec_mutex_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_unlock(GStaticRecMutex *mutex)
     * }
     */
    public static MethodHandle g_static_rec_mutex_unlock$handle() {
        return g_static_rec_mutex_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_unlock(GStaticRecMutex *mutex)
     * }
     */
    public static void g_static_rec_mutex_unlock(MemorySegment mutex) {
        var mh$ = g_static_rec_mutex_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rec_mutex_unlock", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rec_mutex_lock_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rec_mutex_lock_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_lock_full(GStaticRecMutex *mutex, guint depth)
     * }
     */
    public static FunctionDescriptor g_static_rec_mutex_lock_full$descriptor() {
        return g_static_rec_mutex_lock_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_lock_full(GStaticRecMutex *mutex, guint depth)
     * }
     */
    public static MethodHandle g_static_rec_mutex_lock_full$handle() {
        return g_static_rec_mutex_lock_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_lock_full(GStaticRecMutex *mutex, guint depth)
     * }
     */
    public static void g_static_rec_mutex_lock_full(MemorySegment mutex, int depth) {
        var mh$ = g_static_rec_mutex_lock_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rec_mutex_lock_full", mutex, depth);
            }
            mh$.invokeExact(mutex, depth);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rec_mutex_unlock_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rec_mutex_unlock_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_static_rec_mutex_unlock_full(GStaticRecMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_static_rec_mutex_unlock_full$descriptor() {
        return g_static_rec_mutex_unlock_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_static_rec_mutex_unlock_full(GStaticRecMutex *mutex)
     * }
     */
    public static MethodHandle g_static_rec_mutex_unlock_full$handle() {
        return g_static_rec_mutex_unlock_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_static_rec_mutex_unlock_full(GStaticRecMutex *mutex)
     * }
     */
    public static int g_static_rec_mutex_unlock_full(MemorySegment mutex) {
        var mh$ = g_static_rec_mutex_unlock_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rec_mutex_unlock_full", mutex);
            }
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rec_mutex_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rec_mutex_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_free(GStaticRecMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_static_rec_mutex_free$descriptor() {
        return g_static_rec_mutex_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_free(GStaticRecMutex *mutex)
     * }
     */
    public static MethodHandle g_static_rec_mutex_free$handle() {
        return g_static_rec_mutex_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rec_mutex_free(GStaticRecMutex *mutex)
     * }
     */
    public static void g_static_rec_mutex_free(MemorySegment mutex) {
        var mh$ = g_static_rec_mutex_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rec_mutex_free", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rw_lock_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rw_lock_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_init(GStaticRWLock *lock)
     * }
     */
    public static FunctionDescriptor g_static_rw_lock_init$descriptor() {
        return g_static_rw_lock_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_init(GStaticRWLock *lock)
     * }
     */
    public static MethodHandle g_static_rw_lock_init$handle() {
        return g_static_rw_lock_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rw_lock_init(GStaticRWLock *lock)
     * }
     */
    public static void g_static_rw_lock_init(MemorySegment lock) {
        var mh$ = g_static_rw_lock_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rw_lock_init", lock);
            }
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rw_lock_reader_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rw_lock_reader_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_reader_lock(GStaticRWLock *lock)
     * }
     */
    public static FunctionDescriptor g_static_rw_lock_reader_lock$descriptor() {
        return g_static_rw_lock_reader_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_reader_lock(GStaticRWLock *lock)
     * }
     */
    public static MethodHandle g_static_rw_lock_reader_lock$handle() {
        return g_static_rw_lock_reader_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rw_lock_reader_lock(GStaticRWLock *lock)
     * }
     */
    public static void g_static_rw_lock_reader_lock(MemorySegment lock) {
        var mh$ = g_static_rw_lock_reader_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rw_lock_reader_lock", lock);
            }
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rw_lock_reader_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rw_lock_reader_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_static_rw_lock_reader_trylock(GStaticRWLock *lock)
     * }
     */
    public static FunctionDescriptor g_static_rw_lock_reader_trylock$descriptor() {
        return g_static_rw_lock_reader_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_static_rw_lock_reader_trylock(GStaticRWLock *lock)
     * }
     */
    public static MethodHandle g_static_rw_lock_reader_trylock$handle() {
        return g_static_rw_lock_reader_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_static_rw_lock_reader_trylock(GStaticRWLock *lock)
     * }
     */
    public static int g_static_rw_lock_reader_trylock(MemorySegment lock) {
        var mh$ = g_static_rw_lock_reader_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rw_lock_reader_trylock", lock);
            }
            return (int)mh$.invokeExact(lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rw_lock_reader_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rw_lock_reader_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_reader_unlock(GStaticRWLock *lock)
     * }
     */
    public static FunctionDescriptor g_static_rw_lock_reader_unlock$descriptor() {
        return g_static_rw_lock_reader_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_reader_unlock(GStaticRWLock *lock)
     * }
     */
    public static MethodHandle g_static_rw_lock_reader_unlock$handle() {
        return g_static_rw_lock_reader_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rw_lock_reader_unlock(GStaticRWLock *lock)
     * }
     */
    public static void g_static_rw_lock_reader_unlock(MemorySegment lock) {
        var mh$ = g_static_rw_lock_reader_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rw_lock_reader_unlock", lock);
            }
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rw_lock_writer_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rw_lock_writer_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_writer_lock(GStaticRWLock *lock)
     * }
     */
    public static FunctionDescriptor g_static_rw_lock_writer_lock$descriptor() {
        return g_static_rw_lock_writer_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_writer_lock(GStaticRWLock *lock)
     * }
     */
    public static MethodHandle g_static_rw_lock_writer_lock$handle() {
        return g_static_rw_lock_writer_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rw_lock_writer_lock(GStaticRWLock *lock)
     * }
     */
    public static void g_static_rw_lock_writer_lock(MemorySegment lock) {
        var mh$ = g_static_rw_lock_writer_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rw_lock_writer_lock", lock);
            }
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rw_lock_writer_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rw_lock_writer_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_static_rw_lock_writer_trylock(GStaticRWLock *lock)
     * }
     */
    public static FunctionDescriptor g_static_rw_lock_writer_trylock$descriptor() {
        return g_static_rw_lock_writer_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_static_rw_lock_writer_trylock(GStaticRWLock *lock)
     * }
     */
    public static MethodHandle g_static_rw_lock_writer_trylock$handle() {
        return g_static_rw_lock_writer_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_static_rw_lock_writer_trylock(GStaticRWLock *lock)
     * }
     */
    public static int g_static_rw_lock_writer_trylock(MemorySegment lock) {
        var mh$ = g_static_rw_lock_writer_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rw_lock_writer_trylock", lock);
            }
            return (int)mh$.invokeExact(lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rw_lock_writer_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rw_lock_writer_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_writer_unlock(GStaticRWLock *lock)
     * }
     */
    public static FunctionDescriptor g_static_rw_lock_writer_unlock$descriptor() {
        return g_static_rw_lock_writer_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_writer_unlock(GStaticRWLock *lock)
     * }
     */
    public static MethodHandle g_static_rw_lock_writer_unlock$handle() {
        return g_static_rw_lock_writer_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rw_lock_writer_unlock(GStaticRWLock *lock)
     * }
     */
    public static void g_static_rw_lock_writer_unlock(MemorySegment lock) {
        var mh$ = g_static_rw_lock_writer_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rw_lock_writer_unlock", lock);
            }
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_rw_lock_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_rw_lock_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_free(GStaticRWLock *lock)
     * }
     */
    public static FunctionDescriptor g_static_rw_lock_free$descriptor() {
        return g_static_rw_lock_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_rw_lock_free(GStaticRWLock *lock)
     * }
     */
    public static MethodHandle g_static_rw_lock_free$handle() {
        return g_static_rw_lock_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_rw_lock_free(GStaticRWLock *lock)
     * }
     */
    public static void g_static_rw_lock_free(MemorySegment lock) {
        var mh$ = g_static_rw_lock_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_rw_lock_free", lock);
            }
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_private_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_private_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPrivate *g_private_new(GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_private_new$descriptor() {
        return g_private_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPrivate *g_private_new(GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_private_new$handle() {
        return g_private_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPrivate *g_private_new(GDestroyNotify notify)
     * }
     */
    public static MemorySegment g_private_new(MemorySegment notify) {
        var mh$ = g_private_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_private_new", notify);
            }
            return (MemorySegment)mh$.invokeExact(notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_private_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_private_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_private_init(GStaticPrivate *private_key)
     * }
     */
    public static FunctionDescriptor g_static_private_init$descriptor() {
        return g_static_private_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_private_init(GStaticPrivate *private_key)
     * }
     */
    public static MethodHandle g_static_private_init$handle() {
        return g_static_private_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_private_init(GStaticPrivate *private_key)
     * }
     */
    public static void g_static_private_init(MemorySegment private_key) {
        var mh$ = g_static_private_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_private_init", private_key);
            }
            mh$.invokeExact(private_key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_private_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_private_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_static_private_get(GStaticPrivate *private_key)
     * }
     */
    public static FunctionDescriptor g_static_private_get$descriptor() {
        return g_static_private_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_static_private_get(GStaticPrivate *private_key)
     * }
     */
    public static MethodHandle g_static_private_get$handle() {
        return g_static_private_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_static_private_get(GStaticPrivate *private_key)
     * }
     */
    public static MemorySegment g_static_private_get(MemorySegment private_key) {
        var mh$ = g_static_private_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_private_get", private_key);
            }
            return (MemorySegment)mh$.invokeExact(private_key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_private_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_private_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_private_set(GStaticPrivate *private_key, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_static_private_set$descriptor() {
        return g_static_private_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_private_set(GStaticPrivate *private_key, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_static_private_set$handle() {
        return g_static_private_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_private_set(GStaticPrivate *private_key, gpointer data, GDestroyNotify notify)
     * }
     */
    public static void g_static_private_set(MemorySegment private_key, MemorySegment data, MemorySegment notify) {
        var mh$ = g_static_private_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_private_set", private_key, data, notify);
            }
            mh$.invokeExact(private_key, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_static_private_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_static_private_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_static_private_free(GStaticPrivate *private_key)
     * }
     */
    public static FunctionDescriptor g_static_private_free$descriptor() {
        return g_static_private_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_static_private_free(GStaticPrivate *private_key)
     * }
     */
    public static MethodHandle g_static_private_free$handle() {
        return g_static_private_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_static_private_free(GStaticPrivate *private_key)
     * }
     */
    public static void g_static_private_free(MemorySegment private_key) {
        var mh$ = g_static_private_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_static_private_free", private_key);
            }
            mh$.invokeExact(private_key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_once_init_enter_impl {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_once_init_enter_impl"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_once_init_enter_impl(volatile gsize *location)
     * }
     */
    public static FunctionDescriptor g_once_init_enter_impl$descriptor() {
        return g_once_init_enter_impl.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_once_init_enter_impl(volatile gsize *location)
     * }
     */
    public static MethodHandle g_once_init_enter_impl$handle() {
        return g_once_init_enter_impl.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_once_init_enter_impl(volatile gsize *location)
     * }
     */
    public static int g_once_init_enter_impl(MemorySegment location) {
        var mh$ = g_once_init_enter_impl.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_once_init_enter_impl", location);
            }
            return (int)mh$.invokeExact(location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_init(gpointer vtable)
     * }
     */
    public static FunctionDescriptor g_thread_init$descriptor() {
        return g_thread_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_init(gpointer vtable)
     * }
     */
    public static MethodHandle g_thread_init$handle() {
        return g_thread_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_init(gpointer vtable)
     * }
     */
    public static void g_thread_init(MemorySegment vtable) {
        var mh$ = g_thread_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_init", vtable);
            }
            mh$.invokeExact(vtable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_init_with_errorcheck_mutexes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_init_with_errorcheck_mutexes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_init_with_errorcheck_mutexes(gpointer vtable)
     * }
     */
    public static FunctionDescriptor g_thread_init_with_errorcheck_mutexes$descriptor() {
        return g_thread_init_with_errorcheck_mutexes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_init_with_errorcheck_mutexes(gpointer vtable)
     * }
     */
    public static MethodHandle g_thread_init_with_errorcheck_mutexes$handle() {
        return g_thread_init_with_errorcheck_mutexes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_init_with_errorcheck_mutexes(gpointer vtable)
     * }
     */
    public static void g_thread_init_with_errorcheck_mutexes(MemorySegment vtable) {
        var mh$ = g_thread_init_with_errorcheck_mutexes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_init_with_errorcheck_mutexes", vtable);
            }
            mh$.invokeExact(vtable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_get_initialized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_get_initialized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_thread_get_initialized()
     * }
     */
    public static FunctionDescriptor g_thread_get_initialized$descriptor() {
        return g_thread_get_initialized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_thread_get_initialized()
     * }
     */
    public static MethodHandle g_thread_get_initialized$handle() {
        return g_thread_get_initialized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_thread_get_initialized()
     * }
     */
    public static int g_thread_get_initialized() {
        var mh$ = g_thread_get_initialized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_get_initialized");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_threads_got_initialized$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_threads_got_initialized").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern gboolean g_threads_got_initialized
     * }
     */
    public static OfInt g_threads_got_initialized$layout() {
        return g_threads_got_initialized$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern gboolean g_threads_got_initialized
     * }
     */
    public static MemorySegment g_threads_got_initialized$segment() {
        return g_threads_got_initialized$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern gboolean g_threads_got_initialized
     * }
     */
    public static int g_threads_got_initialized() {
        return g_threads_got_initialized$constants.SEGMENT.get(g_threads_got_initialized$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern gboolean g_threads_got_initialized
     * }
     */
    public static void g_threads_got_initialized(int varValue) {
        g_threads_got_initialized$constants.SEGMENT.set(g_threads_got_initialized$constants.LAYOUT, 0L, varValue);
    }

    private static class g_mutex_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mutex_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMutex *g_mutex_new()
     * }
     */
    public static FunctionDescriptor g_mutex_new$descriptor() {
        return g_mutex_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMutex *g_mutex_new()
     * }
     */
    public static MethodHandle g_mutex_new$handle() {
        return g_mutex_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMutex *g_mutex_new()
     * }
     */
    public static MemorySegment g_mutex_new() {
        var mh$ = g_mutex_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mutex_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mutex_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mutex_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mutex_free(GMutex *mutex)
     * }
     */
    public static FunctionDescriptor g_mutex_free$descriptor() {
        return g_mutex_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mutex_free(GMutex *mutex)
     * }
     */
    public static MethodHandle g_mutex_free$handle() {
        return g_mutex_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mutex_free(GMutex *mutex)
     * }
     */
    public static void g_mutex_free(MemorySegment mutex) {
        var mh$ = g_mutex_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mutex_free", mutex);
            }
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cond_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cond_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCond *g_cond_new()
     * }
     */
    public static FunctionDescriptor g_cond_new$descriptor() {
        return g_cond_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCond *g_cond_new()
     * }
     */
    public static MethodHandle g_cond_new$handle() {
        return g_cond_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCond *g_cond_new()
     * }
     */
    public static MemorySegment g_cond_new() {
        var mh$ = g_cond_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cond_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cond_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cond_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cond_free(GCond *cond)
     * }
     */
    public static FunctionDescriptor g_cond_free$descriptor() {
        return g_cond_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cond_free(GCond *cond)
     * }
     */
    public static MethodHandle g_cond_free$handle() {
        return g_cond_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cond_free(GCond *cond)
     * }
     */
    public static void g_cond_free(MemorySegment cond) {
        var mh$ = g_cond_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cond_free", cond);
            }
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cond_timed_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cond_timed_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_cond_timed_wait(GCond *cond, GMutex *mutex, GTimeVal *timeval)
     * }
     */
    public static FunctionDescriptor g_cond_timed_wait$descriptor() {
        return g_cond_timed_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_cond_timed_wait(GCond *cond, GMutex *mutex, GTimeVal *timeval)
     * }
     */
    public static MethodHandle g_cond_timed_wait$handle() {
        return g_cond_timed_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_cond_timed_wait(GCond *cond, GMutex *mutex, GTimeVal *timeval)
     * }
     */
    public static int g_cond_timed_wait(MemorySegment cond, MemorySegment mutex, MemorySegment timeval) {
        var mh$ = g_cond_timed_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cond_timed_wait", cond, mutex, timeval);
            }
            return (int)mh$.invokeExact(cond, mutex, timeval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GAsyncQueue *GAsyncQueue_autoptr
     * }
     */
    public static final AddressLayout GAsyncQueue_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GAsyncQueue_listautoptr
     * }
     */
    public static final AddressLayout GAsyncQueue_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GAsyncQueue_slistautoptr
     * }
     */
    public static final AddressLayout GAsyncQueue_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GAsyncQueue_queueautoptr
     * }
     */
    public static final AddressLayout GAsyncQueue_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GBookmarkFile *GBookmarkFile_autoptr
     * }
     */
    public static final AddressLayout GBookmarkFile_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GBookmarkFile_listautoptr
     * }
     */
    public static final AddressLayout GBookmarkFile_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GBookmarkFile_slistautoptr
     * }
     */
    public static final AddressLayout GBookmarkFile_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GBookmarkFile_queueautoptr
     * }
     */
    public static final AddressLayout GBookmarkFile_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GBytes *GBytes_autoptr
     * }
     */
    public static final AddressLayout GBytes_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GBytes_listautoptr
     * }
     */
    public static final AddressLayout GBytes_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GBytes_slistautoptr
     * }
     */
    public static final AddressLayout GBytes_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GBytes_queueautoptr
     * }
     */
    public static final AddressLayout GBytes_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GChecksum *GChecksum_autoptr
     * }
     */
    public static final AddressLayout GChecksum_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GChecksum_listautoptr
     * }
     */
    public static final AddressLayout GChecksum_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GChecksum_slistautoptr
     * }
     */
    public static final AddressLayout GChecksum_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GChecksum_queueautoptr
     * }
     */
    public static final AddressLayout GChecksum_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDateTime *GDateTime_autoptr
     * }
     */
    public static final AddressLayout GDateTime_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDateTime_listautoptr
     * }
     */
    public static final AddressLayout GDateTime_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDateTime_slistautoptr
     * }
     */
    public static final AddressLayout GDateTime_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDateTime_queueautoptr
     * }
     */
    public static final AddressLayout GDateTime_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDate *GDate_autoptr
     * }
     */
    public static final AddressLayout GDate_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDate_listautoptr
     * }
     */
    public static final AddressLayout GDate_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDate_slistautoptr
     * }
     */
    public static final AddressLayout GDate_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDate_queueautoptr
     * }
     */
    public static final AddressLayout GDate_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GDir *GDir_autoptr
     * }
     */
    public static final AddressLayout GDir_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GDir_listautoptr
     * }
     */
    public static final AddressLayout GDir_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GDir_slistautoptr
     * }
     */
    public static final AddressLayout GDir_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GDir_queueautoptr
     * }
     */
    public static final AddressLayout GDir_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GError *GError_autoptr
     * }
     */
    public static final AddressLayout GError_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GError_listautoptr
     * }
     */
    public static final AddressLayout GError_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GError_slistautoptr
     * }
     */
    public static final AddressLayout GError_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GError_queueautoptr
     * }
     */
    public static final AddressLayout GError_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GHashTable *GHashTable_autoptr
     * }
     */
    public static final AddressLayout GHashTable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GHashTable_listautoptr
     * }
     */
    public static final AddressLayout GHashTable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GHashTable_slistautoptr
     * }
     */
    public static final AddressLayout GHashTable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GHashTable_queueautoptr
     * }
     */
    public static final AddressLayout GHashTable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GHmac *GHmac_autoptr
     * }
     */
    public static final AddressLayout GHmac_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GHmac_listautoptr
     * }
     */
    public static final AddressLayout GHmac_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GHmac_slistautoptr
     * }
     */
    public static final AddressLayout GHmac_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GHmac_queueautoptr
     * }
     */
    public static final AddressLayout GHmac_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GIOChannel *GIOChannel_autoptr
     * }
     */
    public static final AddressLayout GIOChannel_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GIOChannel_listautoptr
     * }
     */
    public static final AddressLayout GIOChannel_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GIOChannel_slistautoptr
     * }
     */
    public static final AddressLayout GIOChannel_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GIOChannel_queueautoptr
     * }
     */
    public static final AddressLayout GIOChannel_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GKeyFile *GKeyFile_autoptr
     * }
     */
    public static final AddressLayout GKeyFile_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GKeyFile_listautoptr
     * }
     */
    public static final AddressLayout GKeyFile_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GKeyFile_slistautoptr
     * }
     */
    public static final AddressLayout GKeyFile_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GKeyFile_queueautoptr
     * }
     */
    public static final AddressLayout GKeyFile_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GList_autoptr
     * }
     */
    public static final AddressLayout GList_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GList_listautoptr
     * }
     */
    public static final AddressLayout GList_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GList_slistautoptr
     * }
     */
    public static final AddressLayout GList_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GList_queueautoptr
     * }
     */
    public static final AddressLayout GList_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GArray *GArray_autoptr
     * }
     */
    public static final AddressLayout GArray_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GArray_listautoptr
     * }
     */
    public static final AddressLayout GArray_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GArray_slistautoptr
     * }
     */
    public static final AddressLayout GArray_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GArray_queueautoptr
     * }
     */
    public static final AddressLayout GArray_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GPtrArray *GPtrArray_autoptr
     * }
     */
    public static final AddressLayout GPtrArray_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GPtrArray_listautoptr
     * }
     */
    public static final AddressLayout GPtrArray_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GPtrArray_slistautoptr
     * }
     */
    public static final AddressLayout GPtrArray_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GPtrArray_queueautoptr
     * }
     */
    public static final AddressLayout GPtrArray_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GByteArray *GByteArray_autoptr
     * }
     */
    public static final AddressLayout GByteArray_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GByteArray_listautoptr
     * }
     */
    public static final AddressLayout GByteArray_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GByteArray_slistautoptr
     * }
     */
    public static final AddressLayout GByteArray_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GByteArray_queueautoptr
     * }
     */
    public static final AddressLayout GByteArray_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMainContext *GMainContext_autoptr
     * }
     */
    public static final AddressLayout GMainContext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMainContext_listautoptr
     * }
     */
    public static final AddressLayout GMainContext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMainContext_slistautoptr
     * }
     */
    public static final AddressLayout GMainContext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMainContext_queueautoptr
     * }
     */
    public static final AddressLayout GMainContext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMainContextPusher *GMainContextPusher_autoptr
     * }
     */
    public static final AddressLayout GMainContextPusher_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMainContextPusher_listautoptr
     * }
     */
    public static final AddressLayout GMainContextPusher_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMainContextPusher_slistautoptr
     * }
     */
    public static final AddressLayout GMainContextPusher_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMainContextPusher_queueautoptr
     * }
     */
    public static final AddressLayout GMainContextPusher_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMainLoop *GMainLoop_autoptr
     * }
     */
    public static final AddressLayout GMainLoop_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMainLoop_listautoptr
     * }
     */
    public static final AddressLayout GMainLoop_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMainLoop_slistautoptr
     * }
     */
    public static final AddressLayout GMainLoop_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMainLoop_queueautoptr
     * }
     */
    public static final AddressLayout GMainLoop_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSource *GSource_autoptr
     * }
     */
    public static final AddressLayout GSource_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSource_listautoptr
     * }
     */
    public static final AddressLayout GSource_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSource_slistautoptr
     * }
     */
    public static final AddressLayout GSource_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSource_queueautoptr
     * }
     */
    public static final AddressLayout GSource_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMappedFile *GMappedFile_autoptr
     * }
     */
    public static final AddressLayout GMappedFile_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMappedFile_listautoptr
     * }
     */
    public static final AddressLayout GMappedFile_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMappedFile_slistautoptr
     * }
     */
    public static final AddressLayout GMappedFile_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMappedFile_queueautoptr
     * }
     */
    public static final AddressLayout GMappedFile_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMarkupParseContext *GMarkupParseContext_autoptr
     * }
     */
    public static final AddressLayout GMarkupParseContext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMarkupParseContext_listautoptr
     * }
     */
    public static final AddressLayout GMarkupParseContext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMarkupParseContext_slistautoptr
     * }
     */
    public static final AddressLayout GMarkupParseContext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMarkupParseContext_queueautoptr
     * }
     */
    public static final AddressLayout GMarkupParseContext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GNode *GNode_autoptr
     * }
     */
    public static final AddressLayout GNode_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GNode_listautoptr
     * }
     */
    public static final AddressLayout GNode_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GNode_slistautoptr
     * }
     */
    public static final AddressLayout GNode_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GNode_queueautoptr
     * }
     */
    public static final AddressLayout GNode_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GOptionContext *GOptionContext_autoptr
     * }
     */
    public static final AddressLayout GOptionContext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GOptionContext_listautoptr
     * }
     */
    public static final AddressLayout GOptionContext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GOptionContext_slistautoptr
     * }
     */
    public static final AddressLayout GOptionContext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GOptionContext_queueautoptr
     * }
     */
    public static final AddressLayout GOptionContext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GOptionGroup *GOptionGroup_autoptr
     * }
     */
    public static final AddressLayout GOptionGroup_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GOptionGroup_listautoptr
     * }
     */
    public static final AddressLayout GOptionGroup_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GOptionGroup_slistautoptr
     * }
     */
    public static final AddressLayout GOptionGroup_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GOptionGroup_queueautoptr
     * }
     */
    public static final AddressLayout GOptionGroup_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GPatternSpec *GPatternSpec_autoptr
     * }
     */
    public static final AddressLayout GPatternSpec_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GPatternSpec_listautoptr
     * }
     */
    public static final AddressLayout GPatternSpec_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GPatternSpec_slistautoptr
     * }
     */
    public static final AddressLayout GPatternSpec_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GPatternSpec_queueautoptr
     * }
     */
    public static final AddressLayout GPatternSpec_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GQueue_autoptr
     * }
     */
    public static final AddressLayout GQueue_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GQueue_listautoptr
     * }
     */
    public static final AddressLayout GQueue_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GQueue_slistautoptr
     * }
     */
    public static final AddressLayout GQueue_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GQueue_queueautoptr
     * }
     */
    public static final AddressLayout GQueue_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GRand *GRand_autoptr
     * }
     */
    public static final AddressLayout GRand_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GRand_listautoptr
     * }
     */
    public static final AddressLayout GRand_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GRand_slistautoptr
     * }
     */
    public static final AddressLayout GRand_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GRand_queueautoptr
     * }
     */
    public static final AddressLayout GRand_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GRegex *GRegex_autoptr
     * }
     */
    public static final AddressLayout GRegex_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GRegex_listautoptr
     * }
     */
    public static final AddressLayout GRegex_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GRegex_slistautoptr
     * }
     */
    public static final AddressLayout GRegex_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GRegex_queueautoptr
     * }
     */
    public static final AddressLayout GRegex_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMatchInfo *GMatchInfo_autoptr
     * }
     */
    public static final AddressLayout GMatchInfo_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMatchInfo_listautoptr
     * }
     */
    public static final AddressLayout GMatchInfo_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMatchInfo_slistautoptr
     * }
     */
    public static final AddressLayout GMatchInfo_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMatchInfo_queueautoptr
     * }
     */
    public static final AddressLayout GMatchInfo_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GScanner *GScanner_autoptr
     * }
     */
    public static final AddressLayout GScanner_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GScanner_listautoptr
     * }
     */
    public static final AddressLayout GScanner_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GScanner_slistautoptr
     * }
     */
    public static final AddressLayout GScanner_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GScanner_queueautoptr
     * }
     */
    public static final AddressLayout GScanner_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSequence *GSequence_autoptr
     * }
     */
    public static final AddressLayout GSequence_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSequence_listautoptr
     * }
     */
    public static final AddressLayout GSequence_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSequence_slistautoptr
     * }
     */
    public static final AddressLayout GSequence_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSequence_queueautoptr
     * }
     */
    public static final AddressLayout GSequence_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSList_autoptr
     * }
     */
    public static final AddressLayout GSList_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GSList_listautoptr
     * }
     */
    public static final AddressLayout GSList_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GSList_slistautoptr
     * }
     */
    public static final AddressLayout GSList_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GSList_queueautoptr
     * }
     */
    public static final AddressLayout GSList_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GString *GString_autoptr
     * }
     */
    public static final AddressLayout GString_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GString_listautoptr
     * }
     */
    public static final AddressLayout GString_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GString_slistautoptr
     * }
     */
    public static final AddressLayout GString_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GString_queueautoptr
     * }
     */
    public static final AddressLayout GString_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GStringChunk *GStringChunk_autoptr
     * }
     */
    public static final AddressLayout GStringChunk_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GStringChunk_listautoptr
     * }
     */
    public static final AddressLayout GStringChunk_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GStringChunk_slistautoptr
     * }
     */
    public static final AddressLayout GStringChunk_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GStringChunk_queueautoptr
     * }
     */
    public static final AddressLayout GStringChunk_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GStrvBuilder *GStrvBuilder_autoptr
     * }
     */
    public static final AddressLayout GStrvBuilder_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GStrvBuilder_listautoptr
     * }
     */
    public static final AddressLayout GStrvBuilder_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GStrvBuilder_slistautoptr
     * }
     */
    public static final AddressLayout GStrvBuilder_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GStrvBuilder_queueautoptr
     * }
     */
    public static final AddressLayout GStrvBuilder_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GThread *GThread_autoptr
     * }
     */
    public static final AddressLayout GThread_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GThread_listautoptr
     * }
     */
    public static final AddressLayout GThread_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GThread_slistautoptr
     * }
     */
    public static final AddressLayout GThread_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GThread_queueautoptr
     * }
     */
    public static final AddressLayout GThread_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GMutexLocker *GMutexLocker_autoptr
     * }
     */
    public static final AddressLayout GMutexLocker_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GMutexLocker_listautoptr
     * }
     */
    public static final AddressLayout GMutexLocker_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GMutexLocker_slistautoptr
     * }
     */
    public static final AddressLayout GMutexLocker_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GMutexLocker_queueautoptr
     * }
     */
    public static final AddressLayout GMutexLocker_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GRecMutexLocker *GRecMutexLocker_autoptr
     * }
     */
    public static final AddressLayout GRecMutexLocker_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GRecMutexLocker_listautoptr
     * }
     */
    public static final AddressLayout GRecMutexLocker_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GRecMutexLocker_slistautoptr
     * }
     */
    public static final AddressLayout GRecMutexLocker_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GRecMutexLocker_queueautoptr
     * }
     */
    public static final AddressLayout GRecMutexLocker_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GRWLockWriterLocker *GRWLockWriterLocker_autoptr
     * }
     */
    public static final AddressLayout GRWLockWriterLocker_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GRWLockWriterLocker_listautoptr
     * }
     */
    public static final AddressLayout GRWLockWriterLocker_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GRWLockWriterLocker_slistautoptr
     * }
     */
    public static final AddressLayout GRWLockWriterLocker_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GRWLockWriterLocker_queueautoptr
     * }
     */
    public static final AddressLayout GRWLockWriterLocker_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GRWLockReaderLocker *GRWLockReaderLocker_autoptr
     * }
     */
    public static final AddressLayout GRWLockReaderLocker_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GRWLockReaderLocker_listautoptr
     * }
     */
    public static final AddressLayout GRWLockReaderLocker_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GRWLockReaderLocker_slistautoptr
     * }
     */
    public static final AddressLayout GRWLockReaderLocker_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GRWLockReaderLocker_queueautoptr
     * }
     */
    public static final AddressLayout GRWLockReaderLocker_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTimer *GTimer_autoptr
     * }
     */
    public static final AddressLayout GTimer_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTimer_listautoptr
     * }
     */
    public static final AddressLayout GTimer_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTimer_slistautoptr
     * }
     */
    public static final AddressLayout GTimer_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTimer_queueautoptr
     * }
     */
    public static final AddressLayout GTimer_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTimeZone *GTimeZone_autoptr
     * }
     */
    public static final AddressLayout GTimeZone_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTimeZone_listautoptr
     * }
     */
    public static final AddressLayout GTimeZone_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTimeZone_slistautoptr
     * }
     */
    public static final AddressLayout GTimeZone_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTimeZone_queueautoptr
     * }
     */
    public static final AddressLayout GTimeZone_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTree *GTree_autoptr
     * }
     */
    public static final AddressLayout GTree_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTree_listautoptr
     * }
     */
    public static final AddressLayout GTree_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTree_slistautoptr
     * }
     */
    public static final AddressLayout GTree_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTree_queueautoptr
     * }
     */
    public static final AddressLayout GTree_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GVariant *GVariant_autoptr
     * }
     */
    public static final AddressLayout GVariant_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GVariant_listautoptr
     * }
     */
    public static final AddressLayout GVariant_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GVariant_slistautoptr
     * }
     */
    public static final AddressLayout GVariant_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GVariant_queueautoptr
     * }
     */
    public static final AddressLayout GVariant_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GVariantBuilder *GVariantBuilder_autoptr
     * }
     */
    public static final AddressLayout GVariantBuilder_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GVariantBuilder_listautoptr
     * }
     */
    public static final AddressLayout GVariantBuilder_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GVariantBuilder_slistautoptr
     * }
     */
    public static final AddressLayout GVariantBuilder_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GVariantBuilder_queueautoptr
     * }
     */
    public static final AddressLayout GVariantBuilder_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GVariantIter *GVariantIter_autoptr
     * }
     */
    public static final AddressLayout GVariantIter_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GVariantIter_listautoptr
     * }
     */
    public static final AddressLayout GVariantIter_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GVariantIter_slistautoptr
     * }
     */
    public static final AddressLayout GVariantIter_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GVariantIter_queueautoptr
     * }
     */
    public static final AddressLayout GVariantIter_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GVariantDict *GVariantDict_autoptr
     * }
     */
    public static final AddressLayout GVariantDict_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GVariantDict_listautoptr
     * }
     */
    public static final AddressLayout GVariantDict_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GVariantDict_slistautoptr
     * }
     */
    public static final AddressLayout GVariantDict_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GVariantDict_queueautoptr
     * }
     */
    public static final AddressLayout GVariantDict_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GVariantType *GVariantType_autoptr
     * }
     */
    public static final AddressLayout GVariantType_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GVariantType_listautoptr
     * }
     */
    public static final AddressLayout GVariantType_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GVariantType_slistautoptr
     * }
     */
    public static final AddressLayout GVariantType_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GVariantType_queueautoptr
     * }
     */
    public static final AddressLayout GVariantType_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GRefString *GRefString_autoptr
     * }
     */
    public static final AddressLayout GRefString_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GRefString_listautoptr
     * }
     */
    public static final AddressLayout GRefString_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GRefString_slistautoptr
     * }
     */
    public static final AddressLayout GRefString_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GRefString_queueautoptr
     * }
     */
    public static final AddressLayout GRefString_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GUri *GUri_autoptr
     * }
     */
    public static final AddressLayout GUri_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GUri_listautoptr
     * }
     */
    public static final AddressLayout GUri_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GUri_slistautoptr
     * }
     */
    public static final AddressLayout GUri_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GUri_queueautoptr
     * }
     */
    public static final AddressLayout GUri_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GPathBuf *GPathBuf_autoptr
     * }
     */
    public static final AddressLayout GPathBuf_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GPathBuf_listautoptr
     * }
     */
    public static final AddressLayout GPathBuf_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GPathBuf_slistautoptr
     * }
     */
    public static final AddressLayout GPathBuf_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GPathBuf_queueautoptr
     * }
     */
    public static final AddressLayout GPathBuf_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef gsize GType
     * }
     */
    public static final OfLong GType = app_indicator_h.C_LONG;
    private static final int G_TYPE_DEBUG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_DEBUG_NONE = 0
     * }
     */
    public static int G_TYPE_DEBUG_NONE() {
        return G_TYPE_DEBUG_NONE;
    }
    private static final int G_TYPE_DEBUG_OBJECTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_DEBUG_OBJECTS = 1
     * }
     */
    public static int G_TYPE_DEBUG_OBJECTS() {
        return G_TYPE_DEBUG_OBJECTS;
    }
    private static final int G_TYPE_DEBUG_SIGNALS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_DEBUG_SIGNALS = 2
     * }
     */
    public static int G_TYPE_DEBUG_SIGNALS() {
        return G_TYPE_DEBUG_SIGNALS;
    }
    private static final int G_TYPE_DEBUG_INSTANCE_COUNT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_DEBUG_INSTANCE_COUNT = 4
     * }
     */
    public static int G_TYPE_DEBUG_INSTANCE_COUNT() {
        return G_TYPE_DEBUG_INSTANCE_COUNT;
    }
    private static final int G_TYPE_DEBUG_MASK = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_DEBUG_MASK = 7
     * }
     */
    public static int G_TYPE_DEBUG_MASK() {
        return G_TYPE_DEBUG_MASK;
    }

    private static class g_type_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_init()
     * }
     */
    public static FunctionDescriptor g_type_init$descriptor() {
        return g_type_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_init()
     * }
     */
    public static MethodHandle g_type_init$handle() {
        return g_type_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_init()
     * }
     */
    public static void g_type_init() {
        var mh$ = g_type_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_init");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_init_with_debug_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_init_with_debug_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_init_with_debug_flags(GTypeDebugFlags debug_flags)
     * }
     */
    public static FunctionDescriptor g_type_init_with_debug_flags$descriptor() {
        return g_type_init_with_debug_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_init_with_debug_flags(GTypeDebugFlags debug_flags)
     * }
     */
    public static MethodHandle g_type_init_with_debug_flags$handle() {
        return g_type_init_with_debug_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_init_with_debug_flags(GTypeDebugFlags debug_flags)
     * }
     */
    public static void g_type_init_with_debug_flags(int debug_flags) {
        var mh$ = g_type_init_with_debug_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_init_with_debug_flags", debug_flags);
            }
            mh$.invokeExact(debug_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name(GType type)
     * }
     */
    public static FunctionDescriptor g_type_name$descriptor() {
        return g_type_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name(GType type)
     * }
     */
    public static MethodHandle g_type_name$handle() {
        return g_type_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_type_name(GType type)
     * }
     */
    public static MemorySegment g_type_name(long type) {
        var mh$ = g_type_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_name", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_qname {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_qname"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_type_qname(GType type)
     * }
     */
    public static FunctionDescriptor g_type_qname$descriptor() {
        return g_type_qname.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_type_qname(GType type)
     * }
     */
    public static MethodHandle g_type_qname$handle() {
        return g_type_qname.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_type_qname(GType type)
     * }
     */
    public static int g_type_qname(long type) {
        var mh$ = g_type_qname.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_qname", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_from_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_from_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_from_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor g_type_from_name$descriptor() {
        return g_type_from_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_from_name(const gchar *name)
     * }
     */
    public static MethodHandle g_type_from_name$handle() {
        return g_type_from_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_from_name(const gchar *name)
     * }
     */
    public static long g_type_from_name(MemorySegment name) {
        var mh$ = g_type_from_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_from_name", name);
            }
            return (long)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_parent(GType type)
     * }
     */
    public static FunctionDescriptor g_type_parent$descriptor() {
        return g_type_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_parent(GType type)
     * }
     */
    public static MethodHandle g_type_parent$handle() {
        return g_type_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_parent(GType type)
     * }
     */
    public static long g_type_parent(long type) {
        var mh$ = g_type_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_parent", type);
            }
            return (long)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_depth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_depth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_type_depth(GType type)
     * }
     */
    public static FunctionDescriptor g_type_depth$descriptor() {
        return g_type_depth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_type_depth(GType type)
     * }
     */
    public static MethodHandle g_type_depth$handle() {
        return g_type_depth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_type_depth(GType type)
     * }
     */
    public static int g_type_depth(long type) {
        var mh$ = g_type_depth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_depth", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_next_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_next_base"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_next_base(GType leaf_type, GType root_type)
     * }
     */
    public static FunctionDescriptor g_type_next_base$descriptor() {
        return g_type_next_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_next_base(GType leaf_type, GType root_type)
     * }
     */
    public static MethodHandle g_type_next_base$handle() {
        return g_type_next_base.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_next_base(GType leaf_type, GType root_type)
     * }
     */
    public static long g_type_next_base(long leaf_type, long root_type) {
        var mh$ = g_type_next_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_next_base", leaf_type, root_type);
            }
            return (long)mh$.invokeExact(leaf_type, root_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_is_a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_is_a"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_is_a(GType type, GType is_a_type)
     * }
     */
    public static FunctionDescriptor g_type_is_a$descriptor() {
        return g_type_is_a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_is_a(GType type, GType is_a_type)
     * }
     */
    public static MethodHandle g_type_is_a$handle() {
        return g_type_is_a.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_type_is_a(GType type, GType is_a_type)
     * }
     */
    public static int g_type_is_a(long type, long is_a_type) {
        var mh$ = g_type_is_a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_is_a", type, is_a_type);
            }
            return (int)mh$.invokeExact(type, is_a_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_class_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_ref(GType type)
     * }
     */
    public static FunctionDescriptor g_type_class_ref$descriptor() {
        return g_type_class_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_ref(GType type)
     * }
     */
    public static MethodHandle g_type_class_ref$handle() {
        return g_type_class_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_class_ref(GType type)
     * }
     */
    public static MemorySegment g_type_class_ref(long type) {
        var mh$ = g_type_class_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_ref", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_class_peek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek(GType type)
     * }
     */
    public static FunctionDescriptor g_type_class_peek$descriptor() {
        return g_type_class_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek(GType type)
     * }
     */
    public static MethodHandle g_type_class_peek$handle() {
        return g_type_class_peek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek(GType type)
     * }
     */
    public static MemorySegment g_type_class_peek(long type) {
        var mh$ = g_type_class_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_peek", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_peek_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_class_peek_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_static(GType type)
     * }
     */
    public static FunctionDescriptor g_type_class_peek_static$descriptor() {
        return g_type_class_peek_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_static(GType type)
     * }
     */
    public static MethodHandle g_type_class_peek_static$handle() {
        return g_type_class_peek_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_static(GType type)
     * }
     */
    public static MemorySegment g_type_class_peek_static(long type) {
        var mh$ = g_type_class_peek_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_peek_static", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_class_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_class_unref(gpointer g_class)
     * }
     */
    public static FunctionDescriptor g_type_class_unref$descriptor() {
        return g_type_class_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_class_unref(gpointer g_class)
     * }
     */
    public static MethodHandle g_type_class_unref$handle() {
        return g_type_class_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_class_unref(gpointer g_class)
     * }
     */
    public static void g_type_class_unref(MemorySegment g_class) {
        var mh$ = g_type_class_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_unref", g_class);
            }
            mh$.invokeExact(g_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_peek_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_class_peek_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_parent(gpointer g_class)
     * }
     */
    public static FunctionDescriptor g_type_class_peek_parent$descriptor() {
        return g_type_class_peek_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_parent(gpointer g_class)
     * }
     */
    public static MethodHandle g_type_class_peek_parent$handle() {
        return g_type_class_peek_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_class_peek_parent(gpointer g_class)
     * }
     */
    public static MemorySegment g_type_class_peek_parent(MemorySegment g_class) {
        var mh$ = g_type_class_peek_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_peek_parent", g_class);
            }
            return (MemorySegment)mh$.invokeExact(g_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_interface_peek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek(gpointer instance_class, GType iface_type)
     * }
     */
    public static FunctionDescriptor g_type_interface_peek$descriptor() {
        return g_type_interface_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek(gpointer instance_class, GType iface_type)
     * }
     */
    public static MethodHandle g_type_interface_peek$handle() {
        return g_type_interface_peek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek(gpointer instance_class, GType iface_type)
     * }
     */
    public static MemorySegment g_type_interface_peek(MemorySegment instance_class, long iface_type) {
        var mh$ = g_type_interface_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_peek", instance_class, iface_type);
            }
            return (MemorySegment)mh$.invokeExact(instance_class, iface_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_peek_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_interface_peek_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek_parent(gpointer g_iface)
     * }
     */
    public static FunctionDescriptor g_type_interface_peek_parent$descriptor() {
        return g_type_interface_peek_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek_parent(gpointer g_iface)
     * }
     */
    public static MethodHandle g_type_interface_peek_parent$handle() {
        return g_type_interface_peek_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_interface_peek_parent(gpointer g_iface)
     * }
     */
    public static MemorySegment g_type_interface_peek_parent(MemorySegment g_iface) {
        var mh$ = g_type_interface_peek_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_peek_parent", g_iface);
            }
            return (MemorySegment)mh$.invokeExact(g_iface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_default_interface_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_default_interface_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_ref(GType g_type)
     * }
     */
    public static FunctionDescriptor g_type_default_interface_ref$descriptor() {
        return g_type_default_interface_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_ref(GType g_type)
     * }
     */
    public static MethodHandle g_type_default_interface_ref$handle() {
        return g_type_default_interface_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_ref(GType g_type)
     * }
     */
    public static MemorySegment g_type_default_interface_ref(long g_type) {
        var mh$ = g_type_default_interface_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_default_interface_ref", g_type);
            }
            return (MemorySegment)mh$.invokeExact(g_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_default_interface_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_default_interface_peek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_peek(GType g_type)
     * }
     */
    public static FunctionDescriptor g_type_default_interface_peek$descriptor() {
        return g_type_default_interface_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_peek(GType g_type)
     * }
     */
    public static MethodHandle g_type_default_interface_peek$handle() {
        return g_type_default_interface_peek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_default_interface_peek(GType g_type)
     * }
     */
    public static MemorySegment g_type_default_interface_peek(long g_type) {
        var mh$ = g_type_default_interface_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_default_interface_peek", g_type);
            }
            return (MemorySegment)mh$.invokeExact(g_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_default_interface_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_default_interface_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_default_interface_unref(gpointer g_iface)
     * }
     */
    public static FunctionDescriptor g_type_default_interface_unref$descriptor() {
        return g_type_default_interface_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_default_interface_unref(gpointer g_iface)
     * }
     */
    public static MethodHandle g_type_default_interface_unref$handle() {
        return g_type_default_interface_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_default_interface_unref(gpointer g_iface)
     * }
     */
    public static void g_type_default_interface_unref(MemorySegment g_iface) {
        var mh$ = g_type_default_interface_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_default_interface_unref", g_iface);
            }
            mh$.invokeExact(g_iface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType *g_type_children(GType type, guint *n_children)
     * }
     */
    public static FunctionDescriptor g_type_children$descriptor() {
        return g_type_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType *g_type_children(GType type, guint *n_children)
     * }
     */
    public static MethodHandle g_type_children$handle() {
        return g_type_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType *g_type_children(GType type, guint *n_children)
     * }
     */
    public static MemorySegment g_type_children(long type, MemorySegment n_children) {
        var mh$ = g_type_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_children", type, n_children);
            }
            return (MemorySegment)mh$.invokeExact(type, n_children);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interfaces {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_interfaces"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType *g_type_interfaces(GType type, guint *n_interfaces)
     * }
     */
    public static FunctionDescriptor g_type_interfaces$descriptor() {
        return g_type_interfaces.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType *g_type_interfaces(GType type, guint *n_interfaces)
     * }
     */
    public static MethodHandle g_type_interfaces$handle() {
        return g_type_interfaces.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType *g_type_interfaces(GType type, guint *n_interfaces)
     * }
     */
    public static MemorySegment g_type_interfaces(long type, MemorySegment n_interfaces) {
        var mh$ = g_type_interfaces.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interfaces", type, n_interfaces);
            }
            return (MemorySegment)mh$.invokeExact(type, n_interfaces);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_set_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_set_qdata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_set_qdata(GType type, GQuark quark, gpointer data)
     * }
     */
    public static FunctionDescriptor g_type_set_qdata$descriptor() {
        return g_type_set_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_set_qdata(GType type, GQuark quark, gpointer data)
     * }
     */
    public static MethodHandle g_type_set_qdata$handle() {
        return g_type_set_qdata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_set_qdata(GType type, GQuark quark, gpointer data)
     * }
     */
    public static void g_type_set_qdata(long type, int quark, MemorySegment data) {
        var mh$ = g_type_set_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_set_qdata", type, quark, data);
            }
            mh$.invokeExact(type, quark, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_get_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_get_qdata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_get_qdata(GType type, GQuark quark)
     * }
     */
    public static FunctionDescriptor g_type_get_qdata$descriptor() {
        return g_type_get_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_get_qdata(GType type, GQuark quark)
     * }
     */
    public static MethodHandle g_type_get_qdata$handle() {
        return g_type_get_qdata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_get_qdata(GType type, GQuark quark)
     * }
     */
    public static MemorySegment g_type_get_qdata(long type, int quark) {
        var mh$ = g_type_get_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_get_qdata", type, quark);
            }
            return (MemorySegment)mh$.invokeExact(type, quark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_query"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_query(GType type, GTypeQuery *query)
     * }
     */
    public static FunctionDescriptor g_type_query$descriptor() {
        return g_type_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_query(GType type, GTypeQuery *query)
     * }
     */
    public static MethodHandle g_type_query$handle() {
        return g_type_query.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_query(GType type, GTypeQuery *query)
     * }
     */
    public static void g_type_query(long type, MemorySegment query) {
        var mh$ = g_type_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_query", type, query);
            }
            mh$.invokeExact(type, query);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_get_instance_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_get_instance_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_type_get_instance_count(GType type)
     * }
     */
    public static FunctionDescriptor g_type_get_instance_count$descriptor() {
        return g_type_get_instance_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_type_get_instance_count(GType type)
     * }
     */
    public static MethodHandle g_type_get_instance_count$handle() {
        return g_type_get_instance_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_type_get_instance_count(GType type)
     * }
     */
    public static int g_type_get_instance_count(long type) {
        var mh$ = g_type_get_instance_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_get_instance_count", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_TYPE_FLAG_CLASSED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_CLASSED = 1
     * }
     */
    public static int G_TYPE_FLAG_CLASSED() {
        return G_TYPE_FLAG_CLASSED;
    }
    private static final int G_TYPE_FLAG_INSTANTIATABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_INSTANTIATABLE = 2
     * }
     */
    public static int G_TYPE_FLAG_INSTANTIATABLE() {
        return G_TYPE_FLAG_INSTANTIATABLE;
    }
    private static final int G_TYPE_FLAG_DERIVABLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_DERIVABLE = 4
     * }
     */
    public static int G_TYPE_FLAG_DERIVABLE() {
        return G_TYPE_FLAG_DERIVABLE;
    }
    private static final int G_TYPE_FLAG_DEEP_DERIVABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_DEEP_DERIVABLE = 8
     * }
     */
    public static int G_TYPE_FLAG_DEEP_DERIVABLE() {
        return G_TYPE_FLAG_DEEP_DERIVABLE;
    }
    private static final int G_TYPE_FLAG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_NONE = 0
     * }
     */
    public static int G_TYPE_FLAG_NONE() {
        return G_TYPE_FLAG_NONE;
    }
    private static final int G_TYPE_FLAG_ABSTRACT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_ABSTRACT = 16
     * }
     */
    public static int G_TYPE_FLAG_ABSTRACT() {
        return G_TYPE_FLAG_ABSTRACT;
    }
    private static final int G_TYPE_FLAG_VALUE_ABSTRACT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_VALUE_ABSTRACT = 32
     * }
     */
    public static int G_TYPE_FLAG_VALUE_ABSTRACT() {
        return G_TYPE_FLAG_VALUE_ABSTRACT;
    }
    private static final int G_TYPE_FLAG_FINAL = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_FINAL = 64
     * }
     */
    public static int G_TYPE_FLAG_FINAL() {
        return G_TYPE_FLAG_FINAL;
    }
    private static final int G_TYPE_FLAG_DEPRECATED = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TYPE_FLAG_DEPRECATED = 128
     * }
     */
    public static int G_TYPE_FLAG_DEPRECATED() {
        return G_TYPE_FLAG_DEPRECATED;
    }

    private static class g_type_register_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_register_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_register_static(GType parent_type, const gchar *type_name, const GTypeInfo *info, GTypeFlags flags)
     * }
     */
    public static FunctionDescriptor g_type_register_static$descriptor() {
        return g_type_register_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_register_static(GType parent_type, const gchar *type_name, const GTypeInfo *info, GTypeFlags flags)
     * }
     */
    public static MethodHandle g_type_register_static$handle() {
        return g_type_register_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_register_static(GType parent_type, const gchar *type_name, const GTypeInfo *info, GTypeFlags flags)
     * }
     */
    public static long g_type_register_static(long parent_type, MemorySegment type_name, MemorySegment info, int flags) {
        var mh$ = g_type_register_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_register_static", parent_type, type_name, info, flags);
            }
            return (long)mh$.invokeExact(parent_type, type_name, info, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_register_static_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_register_static_simple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_register_static_simple(GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags)
     * }
     */
    public static FunctionDescriptor g_type_register_static_simple$descriptor() {
        return g_type_register_static_simple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_register_static_simple(GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags)
     * }
     */
    public static MethodHandle g_type_register_static_simple$handle() {
        return g_type_register_static_simple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_register_static_simple(GType parent_type, const gchar *type_name, guint class_size, GClassInitFunc class_init, guint instance_size, GInstanceInitFunc instance_init, GTypeFlags flags)
     * }
     */
    public static long g_type_register_static_simple(long parent_type, MemorySegment type_name, int class_size, MemorySegment class_init, int instance_size, MemorySegment instance_init, int flags) {
        var mh$ = g_type_register_static_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_register_static_simple", parent_type, type_name, class_size, class_init, instance_size, instance_init, flags);
            }
            return (long)mh$.invokeExact(parent_type, type_name, class_size, class_init, instance_size, instance_init, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_register_dynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_register_dynamic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_register_dynamic(GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags)
     * }
     */
    public static FunctionDescriptor g_type_register_dynamic$descriptor() {
        return g_type_register_dynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_register_dynamic(GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags)
     * }
     */
    public static MethodHandle g_type_register_dynamic$handle() {
        return g_type_register_dynamic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_register_dynamic(GType parent_type, const gchar *type_name, GTypePlugin *plugin, GTypeFlags flags)
     * }
     */
    public static long g_type_register_dynamic(long parent_type, MemorySegment type_name, MemorySegment plugin, int flags) {
        var mh$ = g_type_register_dynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_register_dynamic", parent_type, type_name, plugin, flags);
            }
            return (long)mh$.invokeExact(parent_type, type_name, plugin, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_register_fundamental {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_register_fundamental"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_register_fundamental(GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags)
     * }
     */
    public static FunctionDescriptor g_type_register_fundamental$descriptor() {
        return g_type_register_fundamental.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_register_fundamental(GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags)
     * }
     */
    public static MethodHandle g_type_register_fundamental$handle() {
        return g_type_register_fundamental.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_register_fundamental(GType type_id, const gchar *type_name, const GTypeInfo *info, const GTypeFundamentalInfo *finfo, GTypeFlags flags)
     * }
     */
    public static long g_type_register_fundamental(long type_id, MemorySegment type_name, MemorySegment info, MemorySegment finfo, int flags) {
        var mh$ = g_type_register_fundamental.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_register_fundamental", type_id, type_name, info, finfo, flags);
            }
            return (long)mh$.invokeExact(type_id, type_name, info, finfo, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_interface_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_add_interface_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_static(GType instance_type, GType interface_type, const GInterfaceInfo *info)
     * }
     */
    public static FunctionDescriptor g_type_add_interface_static$descriptor() {
        return g_type_add_interface_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_static(GType instance_type, GType interface_type, const GInterfaceInfo *info)
     * }
     */
    public static MethodHandle g_type_add_interface_static$handle() {
        return g_type_add_interface_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_add_interface_static(GType instance_type, GType interface_type, const GInterfaceInfo *info)
     * }
     */
    public static void g_type_add_interface_static(long instance_type, long interface_type, MemorySegment info) {
        var mh$ = g_type_add_interface_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_interface_static", instance_type, interface_type, info);
            }
            mh$.invokeExact(instance_type, interface_type, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_interface_dynamic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_add_interface_dynamic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_dynamic(GType instance_type, GType interface_type, GTypePlugin *plugin)
     * }
     */
    public static FunctionDescriptor g_type_add_interface_dynamic$descriptor() {
        return g_type_add_interface_dynamic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_dynamic(GType instance_type, GType interface_type, GTypePlugin *plugin)
     * }
     */
    public static MethodHandle g_type_add_interface_dynamic$handle() {
        return g_type_add_interface_dynamic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_add_interface_dynamic(GType instance_type, GType interface_type, GTypePlugin *plugin)
     * }
     */
    public static void g_type_add_interface_dynamic(long instance_type, long interface_type, MemorySegment plugin) {
        var mh$ = g_type_add_interface_dynamic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_interface_dynamic", instance_type, interface_type, plugin);
            }
            mh$.invokeExact(instance_type, interface_type, plugin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_add_prerequisite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_interface_add_prerequisite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_interface_add_prerequisite(GType interface_type, GType prerequisite_type)
     * }
     */
    public static FunctionDescriptor g_type_interface_add_prerequisite$descriptor() {
        return g_type_interface_add_prerequisite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_interface_add_prerequisite(GType interface_type, GType prerequisite_type)
     * }
     */
    public static MethodHandle g_type_interface_add_prerequisite$handle() {
        return g_type_interface_add_prerequisite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_interface_add_prerequisite(GType interface_type, GType prerequisite_type)
     * }
     */
    public static void g_type_interface_add_prerequisite(long interface_type, long prerequisite_type) {
        var mh$ = g_type_interface_add_prerequisite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_add_prerequisite", interface_type, prerequisite_type);
            }
            mh$.invokeExact(interface_type, prerequisite_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_prerequisites {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_interface_prerequisites"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType *g_type_interface_prerequisites(GType interface_type, guint *n_prerequisites)
     * }
     */
    public static FunctionDescriptor g_type_interface_prerequisites$descriptor() {
        return g_type_interface_prerequisites.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType *g_type_interface_prerequisites(GType interface_type, guint *n_prerequisites)
     * }
     */
    public static MethodHandle g_type_interface_prerequisites$handle() {
        return g_type_interface_prerequisites.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType *g_type_interface_prerequisites(GType interface_type, guint *n_prerequisites)
     * }
     */
    public static MemorySegment g_type_interface_prerequisites(long interface_type, MemorySegment n_prerequisites) {
        var mh$ = g_type_interface_prerequisites.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_prerequisites", interface_type, n_prerequisites);
            }
            return (MemorySegment)mh$.invokeExact(interface_type, n_prerequisites);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_instantiatable_prerequisite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_interface_instantiatable_prerequisite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_interface_instantiatable_prerequisite(GType interface_type)
     * }
     */
    public static FunctionDescriptor g_type_interface_instantiatable_prerequisite$descriptor() {
        return g_type_interface_instantiatable_prerequisite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_interface_instantiatable_prerequisite(GType interface_type)
     * }
     */
    public static MethodHandle g_type_interface_instantiatable_prerequisite$handle() {
        return g_type_interface_instantiatable_prerequisite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_interface_instantiatable_prerequisite(GType interface_type)
     * }
     */
    public static long g_type_interface_instantiatable_prerequisite(long interface_type) {
        var mh$ = g_type_interface_instantiatable_prerequisite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_instantiatable_prerequisite", interface_type);
            }
            return (long)mh$.invokeExact(interface_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_add_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_class_add_private"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_class_add_private(gpointer g_class, gsize private_size)
     * }
     */
    public static FunctionDescriptor g_type_class_add_private$descriptor() {
        return g_type_class_add_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_class_add_private(gpointer g_class, gsize private_size)
     * }
     */
    public static MethodHandle g_type_class_add_private$handle() {
        return g_type_class_add_private.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_class_add_private(gpointer g_class, gsize private_size)
     * }
     */
    public static void g_type_class_add_private(MemorySegment g_class, long private_size) {
        var mh$ = g_type_class_add_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_add_private", g_class, private_size);
            }
            mh$.invokeExact(g_class, private_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_instance_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_add_instance_private"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_type_add_instance_private(GType class_type, gsize private_size)
     * }
     */
    public static FunctionDescriptor g_type_add_instance_private$descriptor() {
        return g_type_add_instance_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_type_add_instance_private(GType class_type, gsize private_size)
     * }
     */
    public static MethodHandle g_type_add_instance_private$handle() {
        return g_type_add_instance_private.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_type_add_instance_private(GType class_type, gsize private_size)
     * }
     */
    public static int g_type_add_instance_private(long class_type, long private_size) {
        var mh$ = g_type_add_instance_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_instance_private", class_type, private_size);
            }
            return (int)mh$.invokeExact(class_type, private_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_instance_get_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_instance_get_private"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_instance_get_private(GTypeInstance *instance, GType private_type)
     * }
     */
    public static FunctionDescriptor g_type_instance_get_private$descriptor() {
        return g_type_instance_get_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_instance_get_private(GTypeInstance *instance, GType private_type)
     * }
     */
    public static MethodHandle g_type_instance_get_private$handle() {
        return g_type_instance_get_private.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_instance_get_private(GTypeInstance *instance, GType private_type)
     * }
     */
    public static MemorySegment g_type_instance_get_private(MemorySegment instance, long private_type) {
        var mh$ = g_type_instance_get_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_instance_get_private", instance, private_type);
            }
            return (MemorySegment)mh$.invokeExact(instance, private_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_adjust_private_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_class_adjust_private_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_class_adjust_private_offset(gpointer g_class, gint *private_size_or_offset)
     * }
     */
    public static FunctionDescriptor g_type_class_adjust_private_offset$descriptor() {
        return g_type_class_adjust_private_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_class_adjust_private_offset(gpointer g_class, gint *private_size_or_offset)
     * }
     */
    public static MethodHandle g_type_class_adjust_private_offset$handle() {
        return g_type_class_adjust_private_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_class_adjust_private_offset(gpointer g_class, gint *private_size_or_offset)
     * }
     */
    public static void g_type_class_adjust_private_offset(MemorySegment g_class, MemorySegment private_size_or_offset) {
        var mh$ = g_type_class_adjust_private_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_adjust_private_offset", g_class, private_size_or_offset);
            }
            mh$.invokeExact(g_class, private_size_or_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_class_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_add_class_private"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_add_class_private(GType class_type, gsize private_size)
     * }
     */
    public static FunctionDescriptor g_type_add_class_private$descriptor() {
        return g_type_add_class_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_add_class_private(GType class_type, gsize private_size)
     * }
     */
    public static MethodHandle g_type_add_class_private$handle() {
        return g_type_add_class_private.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_add_class_private(GType class_type, gsize private_size)
     * }
     */
    public static void g_type_add_class_private(long class_type, long private_size) {
        var mh$ = g_type_add_class_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_class_private", class_type, private_size);
            }
            mh$.invokeExact(class_type, private_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_get_private {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_class_get_private"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_get_private(GTypeClass *klass, GType private_type)
     * }
     */
    public static FunctionDescriptor g_type_class_get_private$descriptor() {
        return g_type_class_get_private.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_type_class_get_private(GTypeClass *klass, GType private_type)
     * }
     */
    public static MethodHandle g_type_class_get_private$handle() {
        return g_type_class_get_private.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_type_class_get_private(GTypeClass *klass, GType private_type)
     * }
     */
    public static MemorySegment g_type_class_get_private(MemorySegment klass, long private_type) {
        var mh$ = g_type_class_get_private.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_get_private", klass, private_type);
            }
            return (MemorySegment)mh$.invokeExact(klass, private_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_get_instance_private_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_class_get_instance_private_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_type_class_get_instance_private_offset(gpointer g_class)
     * }
     */
    public static FunctionDescriptor g_type_class_get_instance_private_offset$descriptor() {
        return g_type_class_get_instance_private_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_type_class_get_instance_private_offset(gpointer g_class)
     * }
     */
    public static MethodHandle g_type_class_get_instance_private_offset$handle() {
        return g_type_class_get_instance_private_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_type_class_get_instance_private_offset(gpointer g_class)
     * }
     */
    public static int g_type_class_get_instance_private_offset(MemorySegment g_class) {
        var mh$ = g_type_class_get_instance_private_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_get_instance_private_offset", g_class);
            }
            return (int)mh$.invokeExact(g_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_ensure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_ensure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_ensure(GType type)
     * }
     */
    public static FunctionDescriptor g_type_ensure$descriptor() {
        return g_type_ensure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_ensure(GType type)
     * }
     */
    public static MethodHandle g_type_ensure$handle() {
        return g_type_ensure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_ensure(GType type)
     * }
     */
    public static void g_type_ensure(long type) {
        var mh$ = g_type_ensure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_ensure", type);
            }
            mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_get_type_registration_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_get_type_registration_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_type_get_type_registration_serial()
     * }
     */
    public static FunctionDescriptor g_type_get_type_registration_serial$descriptor() {
        return g_type_get_type_registration_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_type_get_type_registration_serial()
     * }
     */
    public static MethodHandle g_type_get_type_registration_serial$handle() {
        return g_type_get_type_registration_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_type_get_type_registration_serial()
     * }
     */
    public static int g_type_get_type_registration_serial() {
        var mh$ = g_type_get_type_registration_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_get_type_registration_serial");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_get_plugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_get_plugin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_get_plugin(GType type)
     * }
     */
    public static FunctionDescriptor g_type_get_plugin$descriptor() {
        return g_type_get_plugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_get_plugin(GType type)
     * }
     */
    public static MethodHandle g_type_get_plugin$handle() {
        return g_type_get_plugin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_get_plugin(GType type)
     * }
     */
    public static MemorySegment g_type_get_plugin(long type) {
        var mh$ = g_type_get_plugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_get_plugin", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_interface_get_plugin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_interface_get_plugin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_interface_get_plugin(GType instance_type, GType interface_type)
     * }
     */
    public static FunctionDescriptor g_type_interface_get_plugin$descriptor() {
        return g_type_interface_get_plugin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_interface_get_plugin(GType instance_type, GType interface_type)
     * }
     */
    public static MethodHandle g_type_interface_get_plugin$handle() {
        return g_type_interface_get_plugin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTypePlugin *g_type_interface_get_plugin(GType instance_type, GType interface_type)
     * }
     */
    public static MemorySegment g_type_interface_get_plugin(long instance_type, long interface_type) {
        var mh$ = g_type_interface_get_plugin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_interface_get_plugin", instance_type, interface_type);
            }
            return (MemorySegment)mh$.invokeExact(instance_type, interface_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_fundamental_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_fundamental_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_fundamental_next()
     * }
     */
    public static FunctionDescriptor g_type_fundamental_next$descriptor() {
        return g_type_fundamental_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_fundamental_next()
     * }
     */
    public static MethodHandle g_type_fundamental_next$handle() {
        return g_type_fundamental_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_fundamental_next()
     * }
     */
    public static long g_type_fundamental_next() {
        var mh$ = g_type_fundamental_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_fundamental_next");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_fundamental {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_fundamental"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_fundamental(GType type_id)
     * }
     */
    public static FunctionDescriptor g_type_fundamental$descriptor() {
        return g_type_fundamental.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_fundamental(GType type_id)
     * }
     */
    public static MethodHandle g_type_fundamental$handle() {
        return g_type_fundamental.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_fundamental(GType type_id)
     * }
     */
    public static long g_type_fundamental(long type_id) {
        var mh$ = g_type_fundamental.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_fundamental", type_id);
            }
            return (long)mh$.invokeExact(type_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_create_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_create_instance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_create_instance(GType type)
     * }
     */
    public static FunctionDescriptor g_type_create_instance$descriptor() {
        return g_type_create_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_create_instance(GType type)
     * }
     */
    public static MethodHandle g_type_create_instance$handle() {
        return g_type_create_instance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_create_instance(GType type)
     * }
     */
    public static MemorySegment g_type_create_instance(long type) {
        var mh$ = g_type_create_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_create_instance", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_free_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_free_instance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_free_instance(GTypeInstance *instance)
     * }
     */
    public static FunctionDescriptor g_type_free_instance$descriptor() {
        return g_type_free_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_free_instance(GTypeInstance *instance)
     * }
     */
    public static MethodHandle g_type_free_instance$handle() {
        return g_type_free_instance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_free_instance(GTypeInstance *instance)
     * }
     */
    public static void g_type_free_instance(MemorySegment instance) {
        var mh$ = g_type_free_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_free_instance", instance);
            }
            mh$.invokeExact(instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_class_cache_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_add_class_cache_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_add_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static FunctionDescriptor g_type_add_class_cache_func$descriptor() {
        return g_type_add_class_cache_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_add_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static MethodHandle g_type_add_class_cache_func$handle() {
        return g_type_add_class_cache_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_add_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static void g_type_add_class_cache_func(MemorySegment cache_data, MemorySegment cache_func) {
        var mh$ = g_type_add_class_cache_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_class_cache_func", cache_data, cache_func);
            }
            mh$.invokeExact(cache_data, cache_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_remove_class_cache_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_remove_class_cache_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_remove_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static FunctionDescriptor g_type_remove_class_cache_func$descriptor() {
        return g_type_remove_class_cache_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_remove_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static MethodHandle g_type_remove_class_cache_func$handle() {
        return g_type_remove_class_cache_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_remove_class_cache_func(gpointer cache_data, GTypeClassCacheFunc cache_func)
     * }
     */
    public static void g_type_remove_class_cache_func(MemorySegment cache_data, MemorySegment cache_func) {
        var mh$ = g_type_remove_class_cache_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_remove_class_cache_func", cache_data, cache_func);
            }
            mh$.invokeExact(cache_data, cache_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_class_unref_uncached {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_class_unref_uncached"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_class_unref_uncached(gpointer g_class)
     * }
     */
    public static FunctionDescriptor g_type_class_unref_uncached$descriptor() {
        return g_type_class_unref_uncached.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_class_unref_uncached(gpointer g_class)
     * }
     */
    public static MethodHandle g_type_class_unref_uncached$handle() {
        return g_type_class_unref_uncached.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_class_unref_uncached(gpointer g_class)
     * }
     */
    public static void g_type_class_unref_uncached(MemorySegment g_class) {
        var mh$ = g_type_class_unref_uncached.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_class_unref_uncached", g_class);
            }
            mh$.invokeExact(g_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_add_interface_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_add_interface_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static FunctionDescriptor g_type_add_interface_check$descriptor() {
        return g_type_add_interface_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_add_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static MethodHandle g_type_add_interface_check$handle() {
        return g_type_add_interface_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_add_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static void g_type_add_interface_check(MemorySegment check_data, MemorySegment check_func) {
        var mh$ = g_type_add_interface_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_add_interface_check", check_data, check_func);
            }
            mh$.invokeExact(check_data, check_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_remove_interface_check {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_remove_interface_check"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_remove_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static FunctionDescriptor g_type_remove_interface_check$descriptor() {
        return g_type_remove_interface_check.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_remove_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static MethodHandle g_type_remove_interface_check$handle() {
        return g_type_remove_interface_check.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_remove_interface_check(gpointer check_data, GTypeInterfaceCheckFunc check_func)
     * }
     */
    public static void g_type_remove_interface_check(MemorySegment check_data, MemorySegment check_func) {
        var mh$ = g_type_remove_interface_check.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_remove_interface_check", check_data, check_func);
            }
            mh$.invokeExact(check_data, check_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_value_table_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_value_table_peek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypeValueTable *g_type_value_table_peek(GType type)
     * }
     */
    public static FunctionDescriptor g_type_value_table_peek$descriptor() {
        return g_type_value_table_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypeValueTable *g_type_value_table_peek(GType type)
     * }
     */
    public static MethodHandle g_type_value_table_peek$handle() {
        return g_type_value_table_peek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTypeValueTable *g_type_value_table_peek(GType type)
     * }
     */
    public static MemorySegment g_type_value_table_peek(long type) {
        var mh$ = g_type_value_table_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_value_table_peek", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_check_instance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance(GTypeInstance *instance)
     * }
     */
    public static FunctionDescriptor g_type_check_instance$descriptor() {
        return g_type_check_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance(GTypeInstance *instance)
     * }
     */
    public static MethodHandle g_type_check_instance$handle() {
        return g_type_check_instance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance(GTypeInstance *instance)
     * }
     */
    public static int g_type_check_instance(MemorySegment instance) {
        var mh$ = g_type_check_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_instance", instance);
            }
            return (int)mh$.invokeExact(instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_instance_cast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_check_instance_cast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_check_instance_cast(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static FunctionDescriptor g_type_check_instance_cast$descriptor() {
        return g_type_check_instance_cast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_check_instance_cast(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static MethodHandle g_type_check_instance_cast$handle() {
        return g_type_check_instance_cast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTypeInstance *g_type_check_instance_cast(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static MemorySegment g_type_check_instance_cast(MemorySegment instance, long iface_type) {
        var mh$ = g_type_check_instance_cast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_instance_cast", instance, iface_type);
            }
            return (MemorySegment)mh$.invokeExact(instance, iface_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_instance_is_a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_check_instance_is_a"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_a(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static FunctionDescriptor g_type_check_instance_is_a$descriptor() {
        return g_type_check_instance_is_a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_a(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static MethodHandle g_type_check_instance_is_a$handle() {
        return g_type_check_instance_is_a.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_a(GTypeInstance *instance, GType iface_type)
     * }
     */
    public static int g_type_check_instance_is_a(MemorySegment instance, long iface_type) {
        var mh$ = g_type_check_instance_is_a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_instance_is_a", instance, iface_type);
            }
            return (int)mh$.invokeExact(instance, iface_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_instance_is_fundamentally_a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_check_instance_is_fundamentally_a"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_fundamentally_a(GTypeInstance *instance, GType fundamental_type)
     * }
     */
    public static FunctionDescriptor g_type_check_instance_is_fundamentally_a$descriptor() {
        return g_type_check_instance_is_fundamentally_a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_fundamentally_a(GTypeInstance *instance, GType fundamental_type)
     * }
     */
    public static MethodHandle g_type_check_instance_is_fundamentally_a$handle() {
        return g_type_check_instance_is_fundamentally_a.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_instance_is_fundamentally_a(GTypeInstance *instance, GType fundamental_type)
     * }
     */
    public static int g_type_check_instance_is_fundamentally_a(MemorySegment instance, long fundamental_type) {
        var mh$ = g_type_check_instance_is_fundamentally_a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_instance_is_fundamentally_a", instance, fundamental_type);
            }
            return (int)mh$.invokeExact(instance, fundamental_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_class_cast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_check_class_cast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTypeClass *g_type_check_class_cast(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static FunctionDescriptor g_type_check_class_cast$descriptor() {
        return g_type_check_class_cast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTypeClass *g_type_check_class_cast(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static MethodHandle g_type_check_class_cast$handle() {
        return g_type_check_class_cast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTypeClass *g_type_check_class_cast(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static MemorySegment g_type_check_class_cast(MemorySegment g_class, long is_a_type) {
        var mh$ = g_type_check_class_cast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_class_cast", g_class, is_a_type);
            }
            return (MemorySegment)mh$.invokeExact(g_class, is_a_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_class_is_a {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_check_class_is_a"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_class_is_a(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static FunctionDescriptor g_type_check_class_is_a$descriptor() {
        return g_type_check_class_is_a.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_class_is_a(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static MethodHandle g_type_check_class_is_a$handle() {
        return g_type_check_class_is_a.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_class_is_a(GTypeClass *g_class, GType is_a_type)
     * }
     */
    public static int g_type_check_class_is_a(MemorySegment g_class, long is_a_type) {
        var mh$ = g_type_check_class_is_a.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_class_is_a", g_class, is_a_type);
            }
            return (int)mh$.invokeExact(g_class, is_a_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_is_value_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_check_is_value_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_is_value_type(GType type)
     * }
     */
    public static FunctionDescriptor g_type_check_is_value_type$descriptor() {
        return g_type_check_is_value_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_is_value_type(GType type)
     * }
     */
    public static MethodHandle g_type_check_is_value_type$handle() {
        return g_type_check_is_value_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_is_value_type(GType type)
     * }
     */
    public static int g_type_check_is_value_type(long type) {
        var mh$ = g_type_check_is_value_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_is_value_type", type);
            }
            return (int)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_check_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_value(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_type_check_value$descriptor() {
        return g_type_check_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_value(const GValue *value)
     * }
     */
    public static MethodHandle g_type_check_value$handle() {
        return g_type_check_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_value(const GValue *value)
     * }
     */
    public static int g_type_check_value(MemorySegment value) {
        var mh$ = g_type_check_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_value", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_check_value_holds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_check_value_holds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_value_holds(const GValue *value, GType type)
     * }
     */
    public static FunctionDescriptor g_type_check_value_holds$descriptor() {
        return g_type_check_value_holds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_check_value_holds(const GValue *value, GType type)
     * }
     */
    public static MethodHandle g_type_check_value_holds$handle() {
        return g_type_check_value_holds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_type_check_value_holds(const GValue *value, GType type)
     * }
     */
    public static int g_type_check_value_holds(MemorySegment value, long type) {
        var mh$ = g_type_check_value_holds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_check_value_holds", value, type);
            }
            return (int)mh$.invokeExact(value, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_test_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_test_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_test_flags(GType type, guint flags)
     * }
     */
    public static FunctionDescriptor g_type_test_flags$descriptor() {
        return g_type_test_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_test_flags(GType type, guint flags)
     * }
     */
    public static MethodHandle g_type_test_flags$handle() {
        return g_type_test_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_type_test_flags(GType type, guint flags)
     * }
     */
    public static int g_type_test_flags(long type, int flags) {
        var mh$ = g_type_test_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_test_flags", type, flags);
            }
            return (int)mh$.invokeExact(type, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_name_from_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_name_from_instance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_instance(GTypeInstance *instance)
     * }
     */
    public static FunctionDescriptor g_type_name_from_instance$descriptor() {
        return g_type_name_from_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_instance(GTypeInstance *instance)
     * }
     */
    public static MethodHandle g_type_name_from_instance$handle() {
        return g_type_name_from_instance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_instance(GTypeInstance *instance)
     * }
     */
    public static MemorySegment g_type_name_from_instance(MemorySegment instance) {
        var mh$ = g_type_name_from_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_name_from_instance", instance);
            }
            return (MemorySegment)mh$.invokeExact(instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_name_from_class {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_name_from_class"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_class(GTypeClass *g_class)
     * }
     */
    public static FunctionDescriptor g_type_name_from_class$descriptor() {
        return g_type_name_from_class.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_class(GTypeClass *g_class)
     * }
     */
    public static MethodHandle g_type_name_from_class$handle() {
        return g_type_name_from_class.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_type_name_from_class(GTypeClass *g_class)
     * }
     */
    public static MemorySegment g_type_name_from_class(MemorySegment g_class) {
        var mh$ = g_type_name_from_class.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_name_from_class", g_class);
            }
            return (MemorySegment)mh$.invokeExact(g_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValue *g_value_init(GValue *value, GType g_type)
     * }
     */
    public static FunctionDescriptor g_value_init$descriptor() {
        return g_value_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValue *g_value_init(GValue *value, GType g_type)
     * }
     */
    public static MethodHandle g_value_init$handle() {
        return g_value_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValue *g_value_init(GValue *value, GType g_type)
     * }
     */
    public static MemorySegment g_value_init(MemorySegment value, long g_type) {
        var mh$ = g_value_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_init", value, g_type);
            }
            return (MemorySegment)mh$.invokeExact(value, g_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_copy(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static FunctionDescriptor g_value_copy$descriptor() {
        return g_value_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_copy(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static MethodHandle g_value_copy$handle() {
        return g_value_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_copy(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static void g_value_copy(MemorySegment src_value, MemorySegment dest_value) {
        var mh$ = g_value_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_copy", src_value, dest_value);
            }
            mh$.invokeExact(src_value, dest_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValue *g_value_reset(GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_reset$descriptor() {
        return g_value_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValue *g_value_reset(GValue *value)
     * }
     */
    public static MethodHandle g_value_reset$handle() {
        return g_value_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValue *g_value_reset(GValue *value)
     * }
     */
    public static MemorySegment g_value_reset(MemorySegment value) {
        var mh$ = g_value_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_reset", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_unset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_unset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_unset(GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_unset$descriptor() {
        return g_value_unset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_unset(GValue *value)
     * }
     */
    public static MethodHandle g_value_unset$handle() {
        return g_value_unset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_unset(GValue *value)
     * }
     */
    public static void g_value_unset(MemorySegment value) {
        var mh$ = g_value_unset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_unset", value);
            }
            mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_instance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_instance(GValue *value, gpointer instance)
     * }
     */
    public static FunctionDescriptor g_value_set_instance$descriptor() {
        return g_value_set_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_instance(GValue *value, gpointer instance)
     * }
     */
    public static MethodHandle g_value_set_instance$handle() {
        return g_value_set_instance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_instance(GValue *value, gpointer instance)
     * }
     */
    public static void g_value_set_instance(MemorySegment value, MemorySegment instance) {
        var mh$ = g_value_set_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_instance", value, instance);
            }
            mh$.invokeExact(value, instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_init_from_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_init_from_instance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_init_from_instance(GValue *value, gpointer instance)
     * }
     */
    public static FunctionDescriptor g_value_init_from_instance$descriptor() {
        return g_value_init_from_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_init_from_instance(GValue *value, gpointer instance)
     * }
     */
    public static MethodHandle g_value_init_from_instance$handle() {
        return g_value_init_from_instance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_init_from_instance(GValue *value, gpointer instance)
     * }
     */
    public static void g_value_init_from_instance(MemorySegment value, MemorySegment instance) {
        var mh$ = g_value_init_from_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_init_from_instance", value, instance);
            }
            mh$.invokeExact(value, instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_fits_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_fits_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_value_fits_pointer(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_fits_pointer$descriptor() {
        return g_value_fits_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_value_fits_pointer(const GValue *value)
     * }
     */
    public static MethodHandle g_value_fits_pointer$handle() {
        return g_value_fits_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_value_fits_pointer(const GValue *value)
     * }
     */
    public static int g_value_fits_pointer(MemorySegment value) {
        var mh$ = g_value_fits_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_fits_pointer", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_peek_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_peek_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_peek_pointer(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_peek_pointer$descriptor() {
        return g_value_peek_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_peek_pointer(const GValue *value)
     * }
     */
    public static MethodHandle g_value_peek_pointer$handle() {
        return g_value_peek_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_value_peek_pointer(const GValue *value)
     * }
     */
    public static MemorySegment g_value_peek_pointer(MemorySegment value) {
        var mh$ = g_value_peek_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_peek_pointer", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_type_compatible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_type_compatible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_value_type_compatible(GType src_type, GType dest_type)
     * }
     */
    public static FunctionDescriptor g_value_type_compatible$descriptor() {
        return g_value_type_compatible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_value_type_compatible(GType src_type, GType dest_type)
     * }
     */
    public static MethodHandle g_value_type_compatible$handle() {
        return g_value_type_compatible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_value_type_compatible(GType src_type, GType dest_type)
     * }
     */
    public static int g_value_type_compatible(long src_type, long dest_type) {
        var mh$ = g_value_type_compatible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_type_compatible", src_type, dest_type);
            }
            return (int)mh$.invokeExact(src_type, dest_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_type_transformable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_type_transformable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_value_type_transformable(GType src_type, GType dest_type)
     * }
     */
    public static FunctionDescriptor g_value_type_transformable$descriptor() {
        return g_value_type_transformable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_value_type_transformable(GType src_type, GType dest_type)
     * }
     */
    public static MethodHandle g_value_type_transformable$handle() {
        return g_value_type_transformable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_value_type_transformable(GType src_type, GType dest_type)
     * }
     */
    public static int g_value_type_transformable(long src_type, long dest_type) {
        var mh$ = g_value_type_transformable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_type_transformable", src_type, dest_type);
            }
            return (int)mh$.invokeExact(src_type, dest_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_transform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_transform"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_value_transform(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static FunctionDescriptor g_value_transform$descriptor() {
        return g_value_transform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_value_transform(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static MethodHandle g_value_transform$handle() {
        return g_value_transform.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_value_transform(const GValue *src_value, GValue *dest_value)
     * }
     */
    public static int g_value_transform(MemorySegment src_value, MemorySegment dest_value) {
        var mh$ = g_value_transform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_transform", src_value, dest_value);
            }
            return (int)mh$.invokeExact(src_value, dest_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_register_transform_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_register_transform_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_register_transform_func(GType src_type, GType dest_type, GValueTransform transform_func)
     * }
     */
    public static FunctionDescriptor g_value_register_transform_func$descriptor() {
        return g_value_register_transform_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_register_transform_func(GType src_type, GType dest_type, GValueTransform transform_func)
     * }
     */
    public static MethodHandle g_value_register_transform_func$handle() {
        return g_value_register_transform_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_register_transform_func(GType src_type, GType dest_type, GValueTransform transform_func)
     * }
     */
    public static void g_value_register_transform_func(long src_type, long dest_type, MemorySegment transform_func) {
        var mh$ = g_value_register_transform_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_register_transform_func", src_type, dest_type, transform_func);
            }
            mh$.invokeExact(src_type, dest_type, transform_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_PARAM_READABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_READABLE = 1
     * }
     */
    public static int G_PARAM_READABLE() {
        return G_PARAM_READABLE;
    }
    private static final int G_PARAM_WRITABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_WRITABLE = 2
     * }
     */
    public static int G_PARAM_WRITABLE() {
        return G_PARAM_WRITABLE;
    }
    private static final int G_PARAM_READWRITE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_READWRITE = 3
     * }
     */
    public static int G_PARAM_READWRITE() {
        return G_PARAM_READWRITE;
    }
    private static final int G_PARAM_CONSTRUCT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_CONSTRUCT = 4
     * }
     */
    public static int G_PARAM_CONSTRUCT() {
        return G_PARAM_CONSTRUCT;
    }
    private static final int G_PARAM_CONSTRUCT_ONLY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_CONSTRUCT_ONLY = 8
     * }
     */
    public static int G_PARAM_CONSTRUCT_ONLY() {
        return G_PARAM_CONSTRUCT_ONLY;
    }
    private static final int G_PARAM_LAX_VALIDATION = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_LAX_VALIDATION = 16
     * }
     */
    public static int G_PARAM_LAX_VALIDATION() {
        return G_PARAM_LAX_VALIDATION;
    }
    private static final int G_PARAM_STATIC_NAME = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_STATIC_NAME = 32
     * }
     */
    public static int G_PARAM_STATIC_NAME() {
        return G_PARAM_STATIC_NAME;
    }
    private static final int G_PARAM_PRIVATE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_PRIVATE = 32
     * }
     */
    public static int G_PARAM_PRIVATE() {
        return G_PARAM_PRIVATE;
    }
    private static final int G_PARAM_STATIC_NICK = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_STATIC_NICK = 64
     * }
     */
    public static int G_PARAM_STATIC_NICK() {
        return G_PARAM_STATIC_NICK;
    }
    private static final int G_PARAM_STATIC_BLURB = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_STATIC_BLURB = 128
     * }
     */
    public static int G_PARAM_STATIC_BLURB() {
        return G_PARAM_STATIC_BLURB;
    }
    private static final int G_PARAM_EXPLICIT_NOTIFY = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_EXPLICIT_NOTIFY = 1073741824
     * }
     */
    public static int G_PARAM_EXPLICIT_NOTIFY() {
        return G_PARAM_EXPLICIT_NOTIFY;
    }
    private static final int G_PARAM_DEPRECATED = (int)-2147483648L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PARAM_DEPRECATED = -2147483648
     * }
     */
    public static int G_PARAM_DEPRECATED() {
        return G_PARAM_DEPRECATED;
    }

    private static class g_param_spec_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_ref(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_ref$descriptor() {
        return g_param_spec_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_ref(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_ref$handle() {
        return g_param_spec_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_ref(GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_param_spec_ref(MemorySegment pspec) {
        var mh$ = g_param_spec_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_ref", pspec);
            }
            return (MemorySegment)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_param_spec_unref(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_unref$descriptor() {
        return g_param_spec_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_param_spec_unref(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_unref$handle() {
        return g_param_spec_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_param_spec_unref(GParamSpec *pspec)
     * }
     */
    public static void g_param_spec_unref(MemorySegment pspec) {
        var mh$ = g_param_spec_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_unref", pspec);
            }
            mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_sink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_sink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_param_spec_sink(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_sink$descriptor() {
        return g_param_spec_sink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_param_spec_sink(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_sink$handle() {
        return g_param_spec_sink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_param_spec_sink(GParamSpec *pspec)
     * }
     */
    public static void g_param_spec_sink(MemorySegment pspec) {
        var mh$ = g_param_spec_sink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_sink", pspec);
            }
            mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_ref_sink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_ref_sink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_ref_sink(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_ref_sink$descriptor() {
        return g_param_spec_ref_sink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_ref_sink(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_ref_sink$handle() {
        return g_param_spec_ref_sink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_ref_sink(GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_param_spec_ref_sink(MemorySegment pspec) {
        var mh$ = g_param_spec_ref_sink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_ref_sink", pspec);
            }
            return (MemorySegment)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_get_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_get_qdata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_param_spec_get_qdata(GParamSpec *pspec, GQuark quark)
     * }
     */
    public static FunctionDescriptor g_param_spec_get_qdata$descriptor() {
        return g_param_spec_get_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_param_spec_get_qdata(GParamSpec *pspec, GQuark quark)
     * }
     */
    public static MethodHandle g_param_spec_get_qdata$handle() {
        return g_param_spec_get_qdata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_param_spec_get_qdata(GParamSpec *pspec, GQuark quark)
     * }
     */
    public static MemorySegment g_param_spec_get_qdata(MemorySegment pspec, int quark) {
        var mh$ = g_param_spec_get_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_get_qdata", pspec, quark);
            }
            return (MemorySegment)mh$.invokeExact(pspec, quark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_set_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_set_qdata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_param_spec_set_qdata(GParamSpec *pspec, GQuark quark, gpointer data)
     * }
     */
    public static FunctionDescriptor g_param_spec_set_qdata$descriptor() {
        return g_param_spec_set_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_param_spec_set_qdata(GParamSpec *pspec, GQuark quark, gpointer data)
     * }
     */
    public static MethodHandle g_param_spec_set_qdata$handle() {
        return g_param_spec_set_qdata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_param_spec_set_qdata(GParamSpec *pspec, GQuark quark, gpointer data)
     * }
     */
    public static void g_param_spec_set_qdata(MemorySegment pspec, int quark, MemorySegment data) {
        var mh$ = g_param_spec_set_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_set_qdata", pspec, quark, data);
            }
            mh$.invokeExact(pspec, quark, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_set_qdata_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_set_qdata_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_param_spec_set_qdata_full(GParamSpec *pspec, GQuark quark, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_param_spec_set_qdata_full$descriptor() {
        return g_param_spec_set_qdata_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_param_spec_set_qdata_full(GParamSpec *pspec, GQuark quark, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_param_spec_set_qdata_full$handle() {
        return g_param_spec_set_qdata_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_param_spec_set_qdata_full(GParamSpec *pspec, GQuark quark, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void g_param_spec_set_qdata_full(MemorySegment pspec, int quark, MemorySegment data, MemorySegment destroy) {
        var mh$ = g_param_spec_set_qdata_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_set_qdata_full", pspec, quark, data, destroy);
            }
            mh$.invokeExact(pspec, quark, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_steal_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_steal_qdata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_param_spec_steal_qdata(GParamSpec *pspec, GQuark quark)
     * }
     */
    public static FunctionDescriptor g_param_spec_steal_qdata$descriptor() {
        return g_param_spec_steal_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_param_spec_steal_qdata(GParamSpec *pspec, GQuark quark)
     * }
     */
    public static MethodHandle g_param_spec_steal_qdata$handle() {
        return g_param_spec_steal_qdata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_param_spec_steal_qdata(GParamSpec *pspec, GQuark quark)
     * }
     */
    public static MemorySegment g_param_spec_steal_qdata(MemorySegment pspec, int quark) {
        var mh$ = g_param_spec_steal_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_steal_qdata", pspec, quark);
            }
            return (MemorySegment)mh$.invokeExact(pspec, quark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_get_redirect_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_get_redirect_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_get_redirect_target(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_get_redirect_target$descriptor() {
        return g_param_spec_get_redirect_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_get_redirect_target(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_get_redirect_target$handle() {
        return g_param_spec_get_redirect_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_get_redirect_target(GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_param_spec_get_redirect_target(MemorySegment pspec) {
        var mh$ = g_param_spec_get_redirect_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_get_redirect_target", pspec);
            }
            return (MemorySegment)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_value_set_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_value_set_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_param_value_set_default(GParamSpec *pspec, GValue *value)
     * }
     */
    public static FunctionDescriptor g_param_value_set_default$descriptor() {
        return g_param_value_set_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_param_value_set_default(GParamSpec *pspec, GValue *value)
     * }
     */
    public static MethodHandle g_param_value_set_default$handle() {
        return g_param_value_set_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_param_value_set_default(GParamSpec *pspec, GValue *value)
     * }
     */
    public static void g_param_value_set_default(MemorySegment pspec, MemorySegment value) {
        var mh$ = g_param_value_set_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_value_set_default", pspec, value);
            }
            mh$.invokeExact(pspec, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_value_defaults {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_value_defaults"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_param_value_defaults(GParamSpec *pspec, const GValue *value)
     * }
     */
    public static FunctionDescriptor g_param_value_defaults$descriptor() {
        return g_param_value_defaults.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_param_value_defaults(GParamSpec *pspec, const GValue *value)
     * }
     */
    public static MethodHandle g_param_value_defaults$handle() {
        return g_param_value_defaults.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_param_value_defaults(GParamSpec *pspec, const GValue *value)
     * }
     */
    public static int g_param_value_defaults(MemorySegment pspec, MemorySegment value) {
        var mh$ = g_param_value_defaults.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_value_defaults", pspec, value);
            }
            return (int)mh$.invokeExact(pspec, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_value_validate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_value_validate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_param_value_validate(GParamSpec *pspec, GValue *value)
     * }
     */
    public static FunctionDescriptor g_param_value_validate$descriptor() {
        return g_param_value_validate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_param_value_validate(GParamSpec *pspec, GValue *value)
     * }
     */
    public static MethodHandle g_param_value_validate$handle() {
        return g_param_value_validate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_param_value_validate(GParamSpec *pspec, GValue *value)
     * }
     */
    public static int g_param_value_validate(MemorySegment pspec, MemorySegment value) {
        var mh$ = g_param_value_validate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_value_validate", pspec, value);
            }
            return (int)mh$.invokeExact(pspec, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_value_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_value_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_param_value_is_valid(GParamSpec *pspec, const GValue *value)
     * }
     */
    public static FunctionDescriptor g_param_value_is_valid$descriptor() {
        return g_param_value_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_param_value_is_valid(GParamSpec *pspec, const GValue *value)
     * }
     */
    public static MethodHandle g_param_value_is_valid$handle() {
        return g_param_value_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_param_value_is_valid(GParamSpec *pspec, const GValue *value)
     * }
     */
    public static int g_param_value_is_valid(MemorySegment pspec, MemorySegment value) {
        var mh$ = g_param_value_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_value_is_valid", pspec, value);
            }
            return (int)mh$.invokeExact(pspec, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_value_convert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_value_convert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_param_value_convert(GParamSpec *pspec, const GValue *src_value, GValue *dest_value, gboolean strict_validation)
     * }
     */
    public static FunctionDescriptor g_param_value_convert$descriptor() {
        return g_param_value_convert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_param_value_convert(GParamSpec *pspec, const GValue *src_value, GValue *dest_value, gboolean strict_validation)
     * }
     */
    public static MethodHandle g_param_value_convert$handle() {
        return g_param_value_convert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_param_value_convert(GParamSpec *pspec, const GValue *src_value, GValue *dest_value, gboolean strict_validation)
     * }
     */
    public static int g_param_value_convert(MemorySegment pspec, MemorySegment src_value, MemorySegment dest_value, int strict_validation) {
        var mh$ = g_param_value_convert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_value_convert", pspec, src_value, dest_value, strict_validation);
            }
            return (int)mh$.invokeExact(pspec, src_value, dest_value, strict_validation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_values_cmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_values_cmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_param_values_cmp(GParamSpec *pspec, const GValue *value1, const GValue *value2)
     * }
     */
    public static FunctionDescriptor g_param_values_cmp$descriptor() {
        return g_param_values_cmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_param_values_cmp(GParamSpec *pspec, const GValue *value1, const GValue *value2)
     * }
     */
    public static MethodHandle g_param_values_cmp$handle() {
        return g_param_values_cmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_param_values_cmp(GParamSpec *pspec, const GValue *value1, const GValue *value2)
     * }
     */
    public static int g_param_values_cmp(MemorySegment pspec, MemorySegment value1, MemorySegment value2) {
        var mh$ = g_param_values_cmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_values_cmp", pspec, value1, value2);
            }
            return (int)mh$.invokeExact(pspec, value1, value2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_name(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_get_name$descriptor() {
        return g_param_spec_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_name(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_get_name$handle() {
        return g_param_spec_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_name(GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_param_spec_get_name(MemorySegment pspec) {
        var mh$ = g_param_spec_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_get_name", pspec);
            }
            return (MemorySegment)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_get_nick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_get_nick"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_nick(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_get_nick$descriptor() {
        return g_param_spec_get_nick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_nick(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_get_nick$handle() {
        return g_param_spec_get_nick.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_nick(GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_param_spec_get_nick(MemorySegment pspec) {
        var mh$ = g_param_spec_get_nick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_get_nick", pspec);
            }
            return (MemorySegment)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_get_blurb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_get_blurb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_blurb(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_get_blurb$descriptor() {
        return g_param_spec_get_blurb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_blurb(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_get_blurb$handle() {
        return g_param_spec_get_blurb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_param_spec_get_blurb(GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_param_spec_get_blurb(MemorySegment pspec) {
        var mh$ = g_param_spec_get_blurb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_get_blurb", pspec);
            }
            return (MemorySegment)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_param"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_param(GValue *value, GParamSpec *param)
     * }
     */
    public static FunctionDescriptor g_value_set_param$descriptor() {
        return g_value_set_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_param(GValue *value, GParamSpec *param)
     * }
     */
    public static MethodHandle g_value_set_param$handle() {
        return g_value_set_param.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_param(GValue *value, GParamSpec *param)
     * }
     */
    public static void g_value_set_param(MemorySegment value, MemorySegment param) {
        var mh$ = g_value_set_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_param", value, param);
            }
            mh$.invokeExact(value, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_param"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_value_get_param(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_param$descriptor() {
        return g_value_get_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_value_get_param(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_param$handle() {
        return g_value_get_param.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_value_get_param(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_param(MemorySegment value) {
        var mh$ = g_value_get_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_param", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_dup_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_dup_param"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_value_dup_param(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_dup_param$descriptor() {
        return g_value_dup_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_value_dup_param(const GValue *value)
     * }
     */
    public static MethodHandle g_value_dup_param$handle() {
        return g_value_dup_param.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_value_dup_param(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_param(MemorySegment value) {
        var mh$ = g_value_dup_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_dup_param", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_take_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_take_param"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_take_param(GValue *value, GParamSpec *param)
     * }
     */
    public static FunctionDescriptor g_value_take_param$descriptor() {
        return g_value_take_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_take_param(GValue *value, GParamSpec *param)
     * }
     */
    public static MethodHandle g_value_take_param$handle() {
        return g_value_take_param.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_take_param(GValue *value, GParamSpec *param)
     * }
     */
    public static void g_value_take_param(MemorySegment value, MemorySegment param) {
        var mh$ = g_value_take_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_take_param", value, param);
            }
            mh$.invokeExact(value, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_param_take_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_param_take_ownership"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_param_take_ownership(GValue *value, GParamSpec *param)
     * }
     */
    public static FunctionDescriptor g_value_set_param_take_ownership$descriptor() {
        return g_value_set_param_take_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_param_take_ownership(GValue *value, GParamSpec *param)
     * }
     */
    public static MethodHandle g_value_set_param_take_ownership$handle() {
        return g_value_set_param_take_ownership.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_param_take_ownership(GValue *value, GParamSpec *param)
     * }
     */
    public static void g_value_set_param_take_ownership(MemorySegment value, MemorySegment param) {
        var mh$ = g_value_set_param_take_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_param_take_ownership", value, param);
            }
            mh$.invokeExact(value, param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_get_default_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_get_default_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const GValue *g_param_spec_get_default_value(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_get_default_value$descriptor() {
        return g_param_spec_get_default_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const GValue *g_param_spec_get_default_value(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_get_default_value$handle() {
        return g_param_spec_get_default_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const GValue *g_param_spec_get_default_value(GParamSpec *pspec)
     * }
     */
    public static MemorySegment g_param_spec_get_default_value(MemorySegment pspec) {
        var mh$ = g_param_spec_get_default_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_get_default_value", pspec);
            }
            return (MemorySegment)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_get_name_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_get_name_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_param_spec_get_name_quark(GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_get_name_quark$descriptor() {
        return g_param_spec_get_name_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_param_spec_get_name_quark(GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_get_name_quark$handle() {
        return g_param_spec_get_name_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_param_spec_get_name_quark(GParamSpec *pspec)
     * }
     */
    public static int g_param_spec_get_name_quark(MemorySegment pspec) {
        var mh$ = g_param_spec_get_name_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_get_name_quark", pspec);
            }
            return (int)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_type_register_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_type_register_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_param_type_register_static(const gchar *name, const GParamSpecTypeInfo *pspec_info)
     * }
     */
    public static FunctionDescriptor g_param_type_register_static$descriptor() {
        return g_param_type_register_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_param_type_register_static(const gchar *name, const GParamSpecTypeInfo *pspec_info)
     * }
     */
    public static MethodHandle g_param_type_register_static$handle() {
        return g_param_type_register_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_param_type_register_static(const gchar *name, const GParamSpecTypeInfo *pspec_info)
     * }
     */
    public static long g_param_type_register_static(MemorySegment name, MemorySegment pspec_info) {
        var mh$ = g_param_type_register_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_type_register_static", name, pspec_info);
            }
            return (long)mh$.invokeExact(name, pspec_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_is_valid_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_is_valid_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_param_spec_is_valid_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor g_param_spec_is_valid_name$descriptor() {
        return g_param_spec_is_valid_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_param_spec_is_valid_name(const gchar *name)
     * }
     */
    public static MethodHandle g_param_spec_is_valid_name$handle() {
        return g_param_spec_is_valid_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_param_spec_is_valid_name(const gchar *name)
     * }
     */
    public static int g_param_spec_is_valid_name(MemorySegment name) {
        var mh$ = g_param_spec_is_valid_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_is_valid_name", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _g_param_type_register_static_constant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_g_param_type_register_static_constant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * GType _g_param_type_register_static_constant(const gchar *name, const GParamSpecTypeInfo *pspec_info, GType opt_type)
     * }
     */
    public static FunctionDescriptor _g_param_type_register_static_constant$descriptor() {
        return _g_param_type_register_static_constant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * GType _g_param_type_register_static_constant(const gchar *name, const GParamSpecTypeInfo *pspec_info, GType opt_type)
     * }
     */
    public static MethodHandle _g_param_type_register_static_constant$handle() {
        return _g_param_type_register_static_constant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * GType _g_param_type_register_static_constant(const gchar *name, const GParamSpecTypeInfo *pspec_info, GType opt_type)
     * }
     */
    public static long _g_param_type_register_static_constant(MemorySegment name, MemorySegment pspec_info, long opt_type) {
        var mh$ = _g_param_type_register_static_constant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_g_param_type_register_static_constant", name, pspec_info, opt_type);
            }
            return (long)mh$.invokeExact(name, pspec_info, opt_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_internal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_internal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_param_spec_internal(GType param_type, const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_internal$descriptor() {
        return g_param_spec_internal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_param_spec_internal(GType param_type, const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_internal$handle() {
        return g_param_spec_internal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_param_spec_internal(GType param_type, const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_internal(long param_type, MemorySegment name, MemorySegment nick, MemorySegment blurb, int flags) {
        var mh$ = g_param_spec_internal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_internal", param_type, name, nick, blurb, flags);
            }
            return (MemorySegment)mh$.invokeExact(param_type, name, nick, blurb, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_pool_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_pool_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpecPool *g_param_spec_pool_new(gboolean type_prefixing)
     * }
     */
    public static FunctionDescriptor g_param_spec_pool_new$descriptor() {
        return g_param_spec_pool_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpecPool *g_param_spec_pool_new(gboolean type_prefixing)
     * }
     */
    public static MethodHandle g_param_spec_pool_new$handle() {
        return g_param_spec_pool_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpecPool *g_param_spec_pool_new(gboolean type_prefixing)
     * }
     */
    public static MemorySegment g_param_spec_pool_new(int type_prefixing) {
        var mh$ = g_param_spec_pool_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_pool_new", type_prefixing);
            }
            return (MemorySegment)mh$.invokeExact(type_prefixing);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_pool_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_pool_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_param_spec_pool_insert(GParamSpecPool *pool, GParamSpec *pspec, GType owner_type)
     * }
     */
    public static FunctionDescriptor g_param_spec_pool_insert$descriptor() {
        return g_param_spec_pool_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_param_spec_pool_insert(GParamSpecPool *pool, GParamSpec *pspec, GType owner_type)
     * }
     */
    public static MethodHandle g_param_spec_pool_insert$handle() {
        return g_param_spec_pool_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_param_spec_pool_insert(GParamSpecPool *pool, GParamSpec *pspec, GType owner_type)
     * }
     */
    public static void g_param_spec_pool_insert(MemorySegment pool, MemorySegment pspec, long owner_type) {
        var mh$ = g_param_spec_pool_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_pool_insert", pool, pspec, owner_type);
            }
            mh$.invokeExact(pool, pspec, owner_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_pool_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_pool_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_param_spec_pool_remove(GParamSpecPool *pool, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_param_spec_pool_remove$descriptor() {
        return g_param_spec_pool_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_param_spec_pool_remove(GParamSpecPool *pool, GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_param_spec_pool_remove$handle() {
        return g_param_spec_pool_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_param_spec_pool_remove(GParamSpecPool *pool, GParamSpec *pspec)
     * }
     */
    public static void g_param_spec_pool_remove(MemorySegment pool, MemorySegment pspec) {
        var mh$ = g_param_spec_pool_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_pool_remove", pool, pspec);
            }
            mh$.invokeExact(pool, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_pool_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_pool_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_pool_lookup(GParamSpecPool *pool, const gchar *param_name, GType owner_type, gboolean walk_ancestors)
     * }
     */
    public static FunctionDescriptor g_param_spec_pool_lookup$descriptor() {
        return g_param_spec_pool_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_pool_lookup(GParamSpecPool *pool, const gchar *param_name, GType owner_type, gboolean walk_ancestors)
     * }
     */
    public static MethodHandle g_param_spec_pool_lookup$handle() {
        return g_param_spec_pool_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_pool_lookup(GParamSpecPool *pool, const gchar *param_name, GType owner_type, gboolean walk_ancestors)
     * }
     */
    public static MemorySegment g_param_spec_pool_lookup(MemorySegment pool, MemorySegment param_name, long owner_type, int walk_ancestors) {
        var mh$ = g_param_spec_pool_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_pool_lookup", pool, param_name, owner_type, walk_ancestors);
            }
            return (MemorySegment)mh$.invokeExact(pool, param_name, owner_type, walk_ancestors);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_pool_list_owned {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_pool_list_owned"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_param_spec_pool_list_owned(GParamSpecPool *pool, GType owner_type)
     * }
     */
    public static FunctionDescriptor g_param_spec_pool_list_owned$descriptor() {
        return g_param_spec_pool_list_owned.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_param_spec_pool_list_owned(GParamSpecPool *pool, GType owner_type)
     * }
     */
    public static MethodHandle g_param_spec_pool_list_owned$handle() {
        return g_param_spec_pool_list_owned.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_param_spec_pool_list_owned(GParamSpecPool *pool, GType owner_type)
     * }
     */
    public static MemorySegment g_param_spec_pool_list_owned(MemorySegment pool, long owner_type) {
        var mh$ = g_param_spec_pool_list_owned.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_pool_list_owned", pool, owner_type);
            }
            return (MemorySegment)mh$.invokeExact(pool, owner_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_pool_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_pool_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec **g_param_spec_pool_list(GParamSpecPool *pool, GType owner_type, guint *n_pspecs_p)
     * }
     */
    public static FunctionDescriptor g_param_spec_pool_list$descriptor() {
        return g_param_spec_pool_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec **g_param_spec_pool_list(GParamSpecPool *pool, GType owner_type, guint *n_pspecs_p)
     * }
     */
    public static MethodHandle g_param_spec_pool_list$handle() {
        return g_param_spec_pool_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec **g_param_spec_pool_list(GParamSpecPool *pool, GType owner_type, guint *n_pspecs_p)
     * }
     */
    public static MemorySegment g_param_spec_pool_list(MemorySegment pool, long owner_type, MemorySegment n_pspecs_p) {
        var mh$ = g_param_spec_pool_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_pool_list", pool, owner_type, n_pspecs_p);
            }
            return (MemorySegment)mh$.invokeExact(pool, owner_type, n_pspecs_p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new(GCallback callback_func, gpointer user_data, GClosureNotify destroy_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_new$descriptor() {
        return g_cclosure_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new(GCallback callback_func, gpointer user_data, GClosureNotify destroy_data)
     * }
     */
    public static MethodHandle g_cclosure_new$handle() {
        return g_cclosure_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new(GCallback callback_func, gpointer user_data, GClosureNotify destroy_data)
     * }
     */
    public static MemorySegment g_cclosure_new(MemorySegment callback_func, MemorySegment user_data, MemorySegment destroy_data) {
        var mh$ = g_cclosure_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_new", callback_func, user_data, destroy_data);
            }
            return (MemorySegment)mh$.invokeExact(callback_func, user_data, destroy_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_new_swap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_new_swap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new_swap(GCallback callback_func, gpointer user_data, GClosureNotify destroy_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_new_swap$descriptor() {
        return g_cclosure_new_swap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new_swap(GCallback callback_func, gpointer user_data, GClosureNotify destroy_data)
     * }
     */
    public static MethodHandle g_cclosure_new_swap$handle() {
        return g_cclosure_new_swap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new_swap(GCallback callback_func, gpointer user_data, GClosureNotify destroy_data)
     * }
     */
    public static MemorySegment g_cclosure_new_swap(MemorySegment callback_func, MemorySegment user_data, MemorySegment destroy_data) {
        var mh$ = g_cclosure_new_swap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_new_swap", callback_func, user_data, destroy_data);
            }
            return (MemorySegment)mh$.invokeExact(callback_func, user_data, destroy_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_type_cclosure_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_type_cclosure_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GClosure *g_signal_type_cclosure_new(GType itype, guint struct_offset)
     * }
     */
    public static FunctionDescriptor g_signal_type_cclosure_new$descriptor() {
        return g_signal_type_cclosure_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GClosure *g_signal_type_cclosure_new(GType itype, guint struct_offset)
     * }
     */
    public static MethodHandle g_signal_type_cclosure_new$handle() {
        return g_signal_type_cclosure_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GClosure *g_signal_type_cclosure_new(GType itype, guint struct_offset)
     * }
     */
    public static MemorySegment g_signal_type_cclosure_new(long itype, int struct_offset) {
        var mh$ = g_signal_type_cclosure_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_type_cclosure_new", itype, struct_offset);
            }
            return (MemorySegment)mh$.invokeExact(itype, struct_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GClosure *g_closure_ref(GClosure *closure)
     * }
     */
    public static FunctionDescriptor g_closure_ref$descriptor() {
        return g_closure_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GClosure *g_closure_ref(GClosure *closure)
     * }
     */
    public static MethodHandle g_closure_ref$handle() {
        return g_closure_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GClosure *g_closure_ref(GClosure *closure)
     * }
     */
    public static MemorySegment g_closure_ref(MemorySegment closure) {
        var mh$ = g_closure_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_ref", closure);
            }
            return (MemorySegment)mh$.invokeExact(closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_sink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_sink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_sink(GClosure *closure)
     * }
     */
    public static FunctionDescriptor g_closure_sink$descriptor() {
        return g_closure_sink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_sink(GClosure *closure)
     * }
     */
    public static MethodHandle g_closure_sink$handle() {
        return g_closure_sink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_sink(GClosure *closure)
     * }
     */
    public static void g_closure_sink(MemorySegment closure) {
        var mh$ = g_closure_sink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_sink", closure);
            }
            mh$.invokeExact(closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_unref(GClosure *closure)
     * }
     */
    public static FunctionDescriptor g_closure_unref$descriptor() {
        return g_closure_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_unref(GClosure *closure)
     * }
     */
    public static MethodHandle g_closure_unref$handle() {
        return g_closure_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_unref(GClosure *closure)
     * }
     */
    public static void g_closure_unref(MemorySegment closure) {
        var mh$ = g_closure_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_unref", closure);
            }
            mh$.invokeExact(closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_new_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_new_simple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GClosure *g_closure_new_simple(guint sizeof_closure, gpointer data)
     * }
     */
    public static FunctionDescriptor g_closure_new_simple$descriptor() {
        return g_closure_new_simple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GClosure *g_closure_new_simple(guint sizeof_closure, gpointer data)
     * }
     */
    public static MethodHandle g_closure_new_simple$handle() {
        return g_closure_new_simple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GClosure *g_closure_new_simple(guint sizeof_closure, gpointer data)
     * }
     */
    public static MemorySegment g_closure_new_simple(int sizeof_closure, MemorySegment data) {
        var mh$ = g_closure_new_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_new_simple", sizeof_closure, data);
            }
            return (MemorySegment)mh$.invokeExact(sizeof_closure, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_add_finalize_notifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_add_finalize_notifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_add_finalize_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static FunctionDescriptor g_closure_add_finalize_notifier$descriptor() {
        return g_closure_add_finalize_notifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_add_finalize_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static MethodHandle g_closure_add_finalize_notifier$handle() {
        return g_closure_add_finalize_notifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_add_finalize_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static void g_closure_add_finalize_notifier(MemorySegment closure, MemorySegment notify_data, MemorySegment notify_func) {
        var mh$ = g_closure_add_finalize_notifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_add_finalize_notifier", closure, notify_data, notify_func);
            }
            mh$.invokeExact(closure, notify_data, notify_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_remove_finalize_notifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_remove_finalize_notifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_remove_finalize_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static FunctionDescriptor g_closure_remove_finalize_notifier$descriptor() {
        return g_closure_remove_finalize_notifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_remove_finalize_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static MethodHandle g_closure_remove_finalize_notifier$handle() {
        return g_closure_remove_finalize_notifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_remove_finalize_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static void g_closure_remove_finalize_notifier(MemorySegment closure, MemorySegment notify_data, MemorySegment notify_func) {
        var mh$ = g_closure_remove_finalize_notifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_remove_finalize_notifier", closure, notify_data, notify_func);
            }
            mh$.invokeExact(closure, notify_data, notify_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_add_invalidate_notifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_add_invalidate_notifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_add_invalidate_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static FunctionDescriptor g_closure_add_invalidate_notifier$descriptor() {
        return g_closure_add_invalidate_notifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_add_invalidate_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static MethodHandle g_closure_add_invalidate_notifier$handle() {
        return g_closure_add_invalidate_notifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_add_invalidate_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static void g_closure_add_invalidate_notifier(MemorySegment closure, MemorySegment notify_data, MemorySegment notify_func) {
        var mh$ = g_closure_add_invalidate_notifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_add_invalidate_notifier", closure, notify_data, notify_func);
            }
            mh$.invokeExact(closure, notify_data, notify_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_remove_invalidate_notifier {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_remove_invalidate_notifier"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_remove_invalidate_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static FunctionDescriptor g_closure_remove_invalidate_notifier$descriptor() {
        return g_closure_remove_invalidate_notifier.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_remove_invalidate_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static MethodHandle g_closure_remove_invalidate_notifier$handle() {
        return g_closure_remove_invalidate_notifier.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_remove_invalidate_notifier(GClosure *closure, gpointer notify_data, GClosureNotify notify_func)
     * }
     */
    public static void g_closure_remove_invalidate_notifier(MemorySegment closure, MemorySegment notify_data, MemorySegment notify_func) {
        var mh$ = g_closure_remove_invalidate_notifier.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_remove_invalidate_notifier", closure, notify_data, notify_func);
            }
            mh$.invokeExact(closure, notify_data, notify_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_add_marshal_guards {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_add_marshal_guards"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_add_marshal_guards(GClosure *closure, gpointer pre_marshal_data, GClosureNotify pre_marshal_notify, gpointer post_marshal_data, GClosureNotify post_marshal_notify)
     * }
     */
    public static FunctionDescriptor g_closure_add_marshal_guards$descriptor() {
        return g_closure_add_marshal_guards.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_add_marshal_guards(GClosure *closure, gpointer pre_marshal_data, GClosureNotify pre_marshal_notify, gpointer post_marshal_data, GClosureNotify post_marshal_notify)
     * }
     */
    public static MethodHandle g_closure_add_marshal_guards$handle() {
        return g_closure_add_marshal_guards.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_add_marshal_guards(GClosure *closure, gpointer pre_marshal_data, GClosureNotify pre_marshal_notify, gpointer post_marshal_data, GClosureNotify post_marshal_notify)
     * }
     */
    public static void g_closure_add_marshal_guards(MemorySegment closure, MemorySegment pre_marshal_data, MemorySegment pre_marshal_notify, MemorySegment post_marshal_data, MemorySegment post_marshal_notify) {
        var mh$ = g_closure_add_marshal_guards.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_add_marshal_guards", closure, pre_marshal_data, pre_marshal_notify, post_marshal_data, post_marshal_notify);
            }
            mh$.invokeExact(closure, pre_marshal_data, pre_marshal_notify, post_marshal_data, post_marshal_notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_set_marshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_set_marshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_set_marshal(GClosure *closure, GClosureMarshal marshal)
     * }
     */
    public static FunctionDescriptor g_closure_set_marshal$descriptor() {
        return g_closure_set_marshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_set_marshal(GClosure *closure, GClosureMarshal marshal)
     * }
     */
    public static MethodHandle g_closure_set_marshal$handle() {
        return g_closure_set_marshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_set_marshal(GClosure *closure, GClosureMarshal marshal)
     * }
     */
    public static void g_closure_set_marshal(MemorySegment closure, MemorySegment marshal) {
        var mh$ = g_closure_set_marshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_set_marshal", closure, marshal);
            }
            mh$.invokeExact(closure, marshal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_set_meta_marshal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_set_meta_marshal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_set_meta_marshal(GClosure *closure, gpointer marshal_data, GClosureMarshal meta_marshal)
     * }
     */
    public static FunctionDescriptor g_closure_set_meta_marshal$descriptor() {
        return g_closure_set_meta_marshal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_set_meta_marshal(GClosure *closure, gpointer marshal_data, GClosureMarshal meta_marshal)
     * }
     */
    public static MethodHandle g_closure_set_meta_marshal$handle() {
        return g_closure_set_meta_marshal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_set_meta_marshal(GClosure *closure, gpointer marshal_data, GClosureMarshal meta_marshal)
     * }
     */
    public static void g_closure_set_meta_marshal(MemorySegment closure, MemorySegment marshal_data, MemorySegment meta_marshal) {
        var mh$ = g_closure_set_meta_marshal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_set_meta_marshal", closure, marshal_data, meta_marshal);
            }
            mh$.invokeExact(closure, marshal_data, meta_marshal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_invalidate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_invalidate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_invalidate(GClosure *closure)
     * }
     */
    public static FunctionDescriptor g_closure_invalidate$descriptor() {
        return g_closure_invalidate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_invalidate(GClosure *closure)
     * }
     */
    public static MethodHandle g_closure_invalidate$handle() {
        return g_closure_invalidate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_invalidate(GClosure *closure)
     * }
     */
    public static void g_closure_invalidate(MemorySegment closure) {
        var mh$ = g_closure_invalidate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_invalidate", closure);
            }
            mh$.invokeExact(closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_invoke {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_invoke"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_closure_invoke(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint)
     * }
     */
    public static FunctionDescriptor g_closure_invoke$descriptor() {
        return g_closure_invoke.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_closure_invoke(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint)
     * }
     */
    public static MethodHandle g_closure_invoke$handle() {
        return g_closure_invoke.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_closure_invoke(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint)
     * }
     */
    public static void g_closure_invoke(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint) {
        var mh$ = g_closure_invoke.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_invoke", closure, return_value, n_param_values, param_values, invocation_hint);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_generic {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_generic"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_generic(GClosure *closure, GValue *return_gvalue, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_generic$descriptor() {
        return g_cclosure_marshal_generic.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_generic(GClosure *closure, GValue *return_gvalue, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_generic$handle() {
        return g_cclosure_marshal_generic.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_generic(GClosure *closure, GValue *return_gvalue, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_generic(MemorySegment closure, MemorySegment return_gvalue, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_generic.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_generic", closure, return_gvalue, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_gvalue, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__VOID {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__VOID"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__VOID(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__VOID$descriptor() {
        return g_cclosure_marshal_VOID__VOID.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__VOID(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__VOID$handle() {
        return g_cclosure_marshal_VOID__VOID.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__VOID(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__VOID(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__VOID.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__VOID", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__BOOLEAN {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__BOOLEAN"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__BOOLEAN(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__BOOLEAN$descriptor() {
        return g_cclosure_marshal_VOID__BOOLEAN.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__BOOLEAN(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__BOOLEAN$handle() {
        return g_cclosure_marshal_VOID__BOOLEAN.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__BOOLEAN(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__BOOLEAN(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__BOOLEAN.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__BOOLEAN", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__CHAR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__CHAR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__CHAR(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__CHAR$descriptor() {
        return g_cclosure_marshal_VOID__CHAR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__CHAR(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__CHAR$handle() {
        return g_cclosure_marshal_VOID__CHAR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__CHAR(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__CHAR(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__CHAR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__CHAR", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__UCHAR {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__UCHAR"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__UCHAR(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__UCHAR$descriptor() {
        return g_cclosure_marshal_VOID__UCHAR.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__UCHAR(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__UCHAR$handle() {
        return g_cclosure_marshal_VOID__UCHAR.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__UCHAR(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__UCHAR(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__UCHAR.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__UCHAR", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__INT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__INT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__INT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__INT$descriptor() {
        return g_cclosure_marshal_VOID__INT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__INT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__INT$handle() {
        return g_cclosure_marshal_VOID__INT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__INT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__INT(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__INT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__INT", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__UINT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__UINT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__UINT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__UINT$descriptor() {
        return g_cclosure_marshal_VOID__UINT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__UINT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__UINT$handle() {
        return g_cclosure_marshal_VOID__UINT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__UINT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__UINT(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__UINT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__UINT", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__LONG {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__LONG"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__LONG(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__LONG$descriptor() {
        return g_cclosure_marshal_VOID__LONG.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__LONG(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__LONG$handle() {
        return g_cclosure_marshal_VOID__LONG.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__LONG(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__LONG(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__LONG.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__LONG", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__ULONG {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__ULONG"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__ULONG(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__ULONG$descriptor() {
        return g_cclosure_marshal_VOID__ULONG.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__ULONG(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__ULONG$handle() {
        return g_cclosure_marshal_VOID__ULONG.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__ULONG(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__ULONG(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__ULONG.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__ULONG", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__ENUM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__ENUM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__ENUM(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__ENUM$descriptor() {
        return g_cclosure_marshal_VOID__ENUM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__ENUM(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__ENUM$handle() {
        return g_cclosure_marshal_VOID__ENUM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__ENUM(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__ENUM(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__ENUM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__ENUM", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__FLAGS {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__FLAGS"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__FLAGS(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__FLAGS$descriptor() {
        return g_cclosure_marshal_VOID__FLAGS.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__FLAGS(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__FLAGS$handle() {
        return g_cclosure_marshal_VOID__FLAGS.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__FLAGS(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__FLAGS(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__FLAGS.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__FLAGS", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__FLOAT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__FLOAT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__FLOAT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__FLOAT$descriptor() {
        return g_cclosure_marshal_VOID__FLOAT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__FLOAT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__FLOAT$handle() {
        return g_cclosure_marshal_VOID__FLOAT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__FLOAT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__FLOAT(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__FLOAT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__FLOAT", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__DOUBLE {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__DOUBLE"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__DOUBLE(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__DOUBLE$descriptor() {
        return g_cclosure_marshal_VOID__DOUBLE.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__DOUBLE(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__DOUBLE$handle() {
        return g_cclosure_marshal_VOID__DOUBLE.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__DOUBLE(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__DOUBLE(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__DOUBLE.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__DOUBLE", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__STRING {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__STRING"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__STRING(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__STRING$descriptor() {
        return g_cclosure_marshal_VOID__STRING.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__STRING(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__STRING$handle() {
        return g_cclosure_marshal_VOID__STRING.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__STRING(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__STRING(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__STRING.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__STRING", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__PARAM {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__PARAM"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__PARAM(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__PARAM$descriptor() {
        return g_cclosure_marshal_VOID__PARAM.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__PARAM(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__PARAM$handle() {
        return g_cclosure_marshal_VOID__PARAM.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__PARAM(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__PARAM(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__PARAM.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__PARAM", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__BOXED {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__BOXED"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__BOXED(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__BOXED$descriptor() {
        return g_cclosure_marshal_VOID__BOXED.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__BOXED(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__BOXED$handle() {
        return g_cclosure_marshal_VOID__BOXED.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__BOXED(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__BOXED(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__BOXED.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__BOXED", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__POINTER {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__POINTER"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__POINTER(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__POINTER$descriptor() {
        return g_cclosure_marshal_VOID__POINTER.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__POINTER(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__POINTER$handle() {
        return g_cclosure_marshal_VOID__POINTER.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__POINTER(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__POINTER(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__POINTER.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__POINTER", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__OBJECT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__OBJECT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__OBJECT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__OBJECT$descriptor() {
        return g_cclosure_marshal_VOID__OBJECT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__OBJECT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__OBJECT$handle() {
        return g_cclosure_marshal_VOID__OBJECT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__OBJECT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__OBJECT(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__OBJECT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__OBJECT", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__VARIANT {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__VARIANT"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__VARIANT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__VARIANT$descriptor() {
        return g_cclosure_marshal_VOID__VARIANT.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__VARIANT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__VARIANT$handle() {
        return g_cclosure_marshal_VOID__VARIANT.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__VARIANT(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__VARIANT(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__VARIANT.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__VARIANT", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_VOID__UINT_POINTER {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_VOID__UINT_POINTER"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__UINT_POINTER(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_VOID__UINT_POINTER$descriptor() {
        return g_cclosure_marshal_VOID__UINT_POINTER.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__UINT_POINTER(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_VOID__UINT_POINTER$handle() {
        return g_cclosure_marshal_VOID__UINT_POINTER.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_VOID__UINT_POINTER(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_VOID__UINT_POINTER(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_VOID__UINT_POINTER.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_VOID__UINT_POINTER", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_BOOLEAN__FLAGS {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_BOOLEAN__FLAGS"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_BOOLEAN__FLAGS(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_BOOLEAN__FLAGS$descriptor() {
        return g_cclosure_marshal_BOOLEAN__FLAGS.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_BOOLEAN__FLAGS(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_BOOLEAN__FLAGS$handle() {
        return g_cclosure_marshal_BOOLEAN__FLAGS.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_BOOLEAN__FLAGS(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_BOOLEAN__FLAGS(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_BOOLEAN__FLAGS.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_BOOLEAN__FLAGS", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_STRING__OBJECT_POINTER {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_STRING__OBJECT_POINTER"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_STRING__OBJECT_POINTER(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_STRING__OBJECT_POINTER$descriptor() {
        return g_cclosure_marshal_STRING__OBJECT_POINTER.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_STRING__OBJECT_POINTER(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_STRING__OBJECT_POINTER$handle() {
        return g_cclosure_marshal_STRING__OBJECT_POINTER.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_STRING__OBJECT_POINTER(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_STRING__OBJECT_POINTER(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_STRING__OBJECT_POINTER.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_STRING__OBJECT_POINTER", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_marshal_BOOLEAN__BOXED_BOXED {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_marshal_BOOLEAN__BOXED_BOXED"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static FunctionDescriptor g_cclosure_marshal_BOOLEAN__BOXED_BOXED$descriptor() {
        return g_cclosure_marshal_BOOLEAN__BOXED_BOXED.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static MethodHandle g_cclosure_marshal_BOOLEAN__BOXED_BOXED$handle() {
        return g_cclosure_marshal_BOOLEAN__BOXED_BOXED.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(GClosure *closure, GValue *return_value, guint n_param_values, const GValue *param_values, gpointer invocation_hint, gpointer marshal_data)
     * }
     */
    public static void g_cclosure_marshal_BOOLEAN__BOXED_BOXED(MemorySegment closure, MemorySegment return_value, int n_param_values, MemorySegment param_values, MemorySegment invocation_hint, MemorySegment marshal_data) {
        var mh$ = g_cclosure_marshal_BOOLEAN__BOXED_BOXED.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_marshal_BOOLEAN__BOXED_BOXED", closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
            }
            mh$.invokeExact(closure, return_value, n_param_values, param_values, invocation_hint, marshal_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_SIGNAL_RUN_FIRST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_RUN_FIRST = 1
     * }
     */
    public static int G_SIGNAL_RUN_FIRST() {
        return G_SIGNAL_RUN_FIRST;
    }
    private static final int G_SIGNAL_RUN_LAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_RUN_LAST = 2
     * }
     */
    public static int G_SIGNAL_RUN_LAST() {
        return G_SIGNAL_RUN_LAST;
    }
    private static final int G_SIGNAL_RUN_CLEANUP = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_RUN_CLEANUP = 4
     * }
     */
    public static int G_SIGNAL_RUN_CLEANUP() {
        return G_SIGNAL_RUN_CLEANUP;
    }
    private static final int G_SIGNAL_NO_RECURSE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_NO_RECURSE = 8
     * }
     */
    public static int G_SIGNAL_NO_RECURSE() {
        return G_SIGNAL_NO_RECURSE;
    }
    private static final int G_SIGNAL_DETAILED = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_DETAILED = 16
     * }
     */
    public static int G_SIGNAL_DETAILED() {
        return G_SIGNAL_DETAILED;
    }
    private static final int G_SIGNAL_ACTION = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_ACTION = 32
     * }
     */
    public static int G_SIGNAL_ACTION() {
        return G_SIGNAL_ACTION;
    }
    private static final int G_SIGNAL_NO_HOOKS = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_NO_HOOKS = 64
     * }
     */
    public static int G_SIGNAL_NO_HOOKS() {
        return G_SIGNAL_NO_HOOKS;
    }
    private static final int G_SIGNAL_MUST_COLLECT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_MUST_COLLECT = 128
     * }
     */
    public static int G_SIGNAL_MUST_COLLECT() {
        return G_SIGNAL_MUST_COLLECT;
    }
    private static final int G_SIGNAL_DEPRECATED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_DEPRECATED = 256
     * }
     */
    public static int G_SIGNAL_DEPRECATED() {
        return G_SIGNAL_DEPRECATED;
    }
    private static final int G_SIGNAL_ACCUMULATOR_FIRST_RUN = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_ACCUMULATOR_FIRST_RUN = 131072
     * }
     */
    public static int G_SIGNAL_ACCUMULATOR_FIRST_RUN() {
        return G_SIGNAL_ACCUMULATOR_FIRST_RUN;
    }
    private static final int G_CONNECT_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONNECT_DEFAULT = 0
     * }
     */
    public static int G_CONNECT_DEFAULT() {
        return G_CONNECT_DEFAULT;
    }
    private static final int G_CONNECT_AFTER = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONNECT_AFTER = 1
     * }
     */
    public static int G_CONNECT_AFTER() {
        return G_CONNECT_AFTER;
    }
    private static final int G_CONNECT_SWAPPED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONNECT_SWAPPED = 2
     * }
     */
    public static int G_CONNECT_SWAPPED() {
        return G_CONNECT_SWAPPED;
    }
    private static final int G_SIGNAL_MATCH_ID = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_MATCH_ID = 1
     * }
     */
    public static int G_SIGNAL_MATCH_ID() {
        return G_SIGNAL_MATCH_ID;
    }
    private static final int G_SIGNAL_MATCH_DETAIL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_MATCH_DETAIL = 2
     * }
     */
    public static int G_SIGNAL_MATCH_DETAIL() {
        return G_SIGNAL_MATCH_DETAIL;
    }
    private static final int G_SIGNAL_MATCH_CLOSURE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_MATCH_CLOSURE = 4
     * }
     */
    public static int G_SIGNAL_MATCH_CLOSURE() {
        return G_SIGNAL_MATCH_CLOSURE;
    }
    private static final int G_SIGNAL_MATCH_FUNC = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_MATCH_FUNC = 8
     * }
     */
    public static int G_SIGNAL_MATCH_FUNC() {
        return G_SIGNAL_MATCH_FUNC;
    }
    private static final int G_SIGNAL_MATCH_DATA = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_MATCH_DATA = 16
     * }
     */
    public static int G_SIGNAL_MATCH_DATA() {
        return G_SIGNAL_MATCH_DATA;
    }
    private static final int G_SIGNAL_MATCH_UNBLOCKED = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SIGNAL_MATCH_UNBLOCKED = 32
     * }
     */
    public static int G_SIGNAL_MATCH_UNBLOCKED() {
        return G_SIGNAL_MATCH_UNBLOCKED;
    }

    private static class g_signal_newv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_newv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_signal_newv(const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, GType *param_types)
     * }
     */
    public static FunctionDescriptor g_signal_newv$descriptor() {
        return g_signal_newv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_signal_newv(const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, GType *param_types)
     * }
     */
    public static MethodHandle g_signal_newv$handle() {
        return g_signal_newv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_signal_newv(const gchar *signal_name, GType itype, GSignalFlags signal_flags, GClosure *class_closure, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, GType *param_types)
     * }
     */
    public static int g_signal_newv(MemorySegment signal_name, long itype, int signal_flags, MemorySegment class_closure, MemorySegment accumulator, MemorySegment accu_data, MemorySegment c_marshaller, long return_type, int n_params, MemorySegment param_types) {
        var mh$ = g_signal_newv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_newv", signal_name, itype, signal_flags, class_closure, accumulator, accu_data, c_marshaller, return_type, n_params, param_types);
            }
            return (int)mh$.invokeExact(signal_name, itype, signal_flags, class_closure, accumulator, accu_data, c_marshaller, return_type, n_params, param_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern guint g_signal_new(const gchar *signal_name, GType itype, GSignalFlags signal_flags, guint class_offset, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, ...)
     * }
     */
    public static class g_signal_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_signal_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_signal_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern guint g_signal_new(const gchar *signal_name, GType itype, GSignalFlags signal_flags, guint class_offset, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, ...)
         * }
         */
        public static g_signal_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_signal_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment signal_name, long itype, int signal_flags, int class_offset, MemorySegment accumulator, MemorySegment accu_data, MemorySegment c_marshaller, long return_type, int n_params, Object... x9) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_signal_new", signal_name, itype, signal_flags, class_offset, accumulator, accu_data, c_marshaller, return_type, n_params, x9);
                }
                return (int)spreader.invokeExact(signal_name, itype, signal_flags, class_offset, accumulator, accu_data, c_marshaller, return_type, n_params, x9);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern guint g_signal_new_class_handler(const gchar *signal_name, GType itype, GSignalFlags signal_flags, GCallback class_handler, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, ...)
     * }
     */
    public static class g_signal_new_class_handler {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_signal_new_class_handler");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_signal_new_class_handler(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern guint g_signal_new_class_handler(const gchar *signal_name, GType itype, GSignalFlags signal_flags, GCallback class_handler, GSignalAccumulator accumulator, gpointer accu_data, GSignalCMarshaller c_marshaller, GType return_type, guint n_params, ...)
         * }
         */
        public static g_signal_new_class_handler makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_signal_new_class_handler(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment signal_name, long itype, int signal_flags, MemorySegment class_handler, MemorySegment accumulator, MemorySegment accu_data, MemorySegment c_marshaller, long return_type, int n_params, Object... x9) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_signal_new_class_handler", signal_name, itype, signal_flags, class_handler, accumulator, accu_data, c_marshaller, return_type, n_params, x9);
                }
                return (int)spreader.invokeExact(signal_name, itype, signal_flags, class_handler, accumulator, accu_data, c_marshaller, return_type, n_params, x9);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_signal_set_va_marshaller {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_set_va_marshaller"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_set_va_marshaller(guint signal_id, GType instance_type, GSignalCVaMarshaller va_marshaller)
     * }
     */
    public static FunctionDescriptor g_signal_set_va_marshaller$descriptor() {
        return g_signal_set_va_marshaller.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_set_va_marshaller(guint signal_id, GType instance_type, GSignalCVaMarshaller va_marshaller)
     * }
     */
    public static MethodHandle g_signal_set_va_marshaller$handle() {
        return g_signal_set_va_marshaller.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_set_va_marshaller(guint signal_id, GType instance_type, GSignalCVaMarshaller va_marshaller)
     * }
     */
    public static void g_signal_set_va_marshaller(int signal_id, long instance_type, MemorySegment va_marshaller) {
        var mh$ = g_signal_set_va_marshaller.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_set_va_marshaller", signal_id, instance_type, va_marshaller);
            }
            mh$.invokeExact(signal_id, instance_type, va_marshaller);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_emitv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_emitv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_emitv(const GValue *instance_and_params, guint signal_id, GQuark detail, GValue *return_value)
     * }
     */
    public static FunctionDescriptor g_signal_emitv$descriptor() {
        return g_signal_emitv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_emitv(const GValue *instance_and_params, guint signal_id, GQuark detail, GValue *return_value)
     * }
     */
    public static MethodHandle g_signal_emitv$handle() {
        return g_signal_emitv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_emitv(const GValue *instance_and_params, guint signal_id, GQuark detail, GValue *return_value)
     * }
     */
    public static void g_signal_emitv(MemorySegment instance_and_params, int signal_id, int detail, MemorySegment return_value) {
        var mh$ = g_signal_emitv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_emitv", instance_and_params, signal_id, detail, return_value);
            }
            mh$.invokeExact(instance_and_params, signal_id, detail, return_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_signal_emit(gpointer instance, guint signal_id, GQuark detail, ...)
     * }
     */
    public static class g_signal_emit {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_signal_emit");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_signal_emit(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_signal_emit(gpointer instance, guint signal_id, GQuark detail, ...)
         * }
         */
        public static g_signal_emit makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_signal_emit(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment instance, int signal_id, int detail, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_signal_emit", instance, signal_id, detail, x3);
                }
                spreader.invokeExact(instance, signal_id, detail, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_signal_emit_by_name(gpointer instance, const gchar *detailed_signal, ...)
     * }
     */
    public static class g_signal_emit_by_name {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_signal_emit_by_name");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_signal_emit_by_name(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_signal_emit_by_name(gpointer instance, const gchar *detailed_signal, ...)
         * }
         */
        public static g_signal_emit_by_name makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_signal_emit_by_name(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment instance, MemorySegment detailed_signal, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_signal_emit_by_name", instance, detailed_signal, x2);
                }
                spreader.invokeExact(instance, detailed_signal, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_signal_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_signal_lookup(const gchar *name, GType itype)
     * }
     */
    public static FunctionDescriptor g_signal_lookup$descriptor() {
        return g_signal_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_signal_lookup(const gchar *name, GType itype)
     * }
     */
    public static MethodHandle g_signal_lookup$handle() {
        return g_signal_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_signal_lookup(const gchar *name, GType itype)
     * }
     */
    public static int g_signal_lookup(MemorySegment name, long itype) {
        var mh$ = g_signal_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_lookup", name, itype);
            }
            return (int)mh$.invokeExact(name, itype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_signal_name(guint signal_id)
     * }
     */
    public static FunctionDescriptor g_signal_name$descriptor() {
        return g_signal_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_signal_name(guint signal_id)
     * }
     */
    public static MethodHandle g_signal_name$handle() {
        return g_signal_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_signal_name(guint signal_id)
     * }
     */
    public static MemorySegment g_signal_name(int signal_id) {
        var mh$ = g_signal_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_name", signal_id);
            }
            return (MemorySegment)mh$.invokeExact(signal_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_query"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_query(guint signal_id, GSignalQuery *query)
     * }
     */
    public static FunctionDescriptor g_signal_query$descriptor() {
        return g_signal_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_query(guint signal_id, GSignalQuery *query)
     * }
     */
    public static MethodHandle g_signal_query$handle() {
        return g_signal_query.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_query(guint signal_id, GSignalQuery *query)
     * }
     */
    public static void g_signal_query(int signal_id, MemorySegment query) {
        var mh$ = g_signal_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_query", signal_id, query);
            }
            mh$.invokeExact(signal_id, query);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_list_ids {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_list_ids"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint *g_signal_list_ids(GType itype, guint *n_ids)
     * }
     */
    public static FunctionDescriptor g_signal_list_ids$descriptor() {
        return g_signal_list_ids.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint *g_signal_list_ids(GType itype, guint *n_ids)
     * }
     */
    public static MethodHandle g_signal_list_ids$handle() {
        return g_signal_list_ids.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint *g_signal_list_ids(GType itype, guint *n_ids)
     * }
     */
    public static MemorySegment g_signal_list_ids(long itype, MemorySegment n_ids) {
        var mh$ = g_signal_list_ids.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_list_ids", itype, n_ids);
            }
            return (MemorySegment)mh$.invokeExact(itype, n_ids);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_is_valid_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_is_valid_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_signal_is_valid_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor g_signal_is_valid_name$descriptor() {
        return g_signal_is_valid_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_signal_is_valid_name(const gchar *name)
     * }
     */
    public static MethodHandle g_signal_is_valid_name$handle() {
        return g_signal_is_valid_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_signal_is_valid_name(const gchar *name)
     * }
     */
    public static int g_signal_is_valid_name(MemorySegment name) {
        var mh$ = g_signal_is_valid_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_is_valid_name", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_parse_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_parse_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_signal_parse_name(const gchar *detailed_signal, GType itype, guint *signal_id_p, GQuark *detail_p, gboolean force_detail_quark)
     * }
     */
    public static FunctionDescriptor g_signal_parse_name$descriptor() {
        return g_signal_parse_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_signal_parse_name(const gchar *detailed_signal, GType itype, guint *signal_id_p, GQuark *detail_p, gboolean force_detail_quark)
     * }
     */
    public static MethodHandle g_signal_parse_name$handle() {
        return g_signal_parse_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_signal_parse_name(const gchar *detailed_signal, GType itype, guint *signal_id_p, GQuark *detail_p, gboolean force_detail_quark)
     * }
     */
    public static int g_signal_parse_name(MemorySegment detailed_signal, long itype, MemorySegment signal_id_p, MemorySegment detail_p, int force_detail_quark) {
        var mh$ = g_signal_parse_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_parse_name", detailed_signal, itype, signal_id_p, detail_p, force_detail_quark);
            }
            return (int)mh$.invokeExact(detailed_signal, itype, signal_id_p, detail_p, force_detail_quark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_get_invocation_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_get_invocation_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSignalInvocationHint *g_signal_get_invocation_hint(gpointer instance)
     * }
     */
    public static FunctionDescriptor g_signal_get_invocation_hint$descriptor() {
        return g_signal_get_invocation_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSignalInvocationHint *g_signal_get_invocation_hint(gpointer instance)
     * }
     */
    public static MethodHandle g_signal_get_invocation_hint$handle() {
        return g_signal_get_invocation_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSignalInvocationHint *g_signal_get_invocation_hint(gpointer instance)
     * }
     */
    public static MemorySegment g_signal_get_invocation_hint(MemorySegment instance) {
        var mh$ = g_signal_get_invocation_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_get_invocation_hint", instance);
            }
            return (MemorySegment)mh$.invokeExact(instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_stop_emission {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_stop_emission"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_stop_emission(gpointer instance, guint signal_id, GQuark detail)
     * }
     */
    public static FunctionDescriptor g_signal_stop_emission$descriptor() {
        return g_signal_stop_emission.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_stop_emission(gpointer instance, guint signal_id, GQuark detail)
     * }
     */
    public static MethodHandle g_signal_stop_emission$handle() {
        return g_signal_stop_emission.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_stop_emission(gpointer instance, guint signal_id, GQuark detail)
     * }
     */
    public static void g_signal_stop_emission(MemorySegment instance, int signal_id, int detail) {
        var mh$ = g_signal_stop_emission.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_stop_emission", instance, signal_id, detail);
            }
            mh$.invokeExact(instance, signal_id, detail);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_stop_emission_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_stop_emission_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_stop_emission_by_name(gpointer instance, const gchar *detailed_signal)
     * }
     */
    public static FunctionDescriptor g_signal_stop_emission_by_name$descriptor() {
        return g_signal_stop_emission_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_stop_emission_by_name(gpointer instance, const gchar *detailed_signal)
     * }
     */
    public static MethodHandle g_signal_stop_emission_by_name$handle() {
        return g_signal_stop_emission_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_stop_emission_by_name(gpointer instance, const gchar *detailed_signal)
     * }
     */
    public static void g_signal_stop_emission_by_name(MemorySegment instance, MemorySegment detailed_signal) {
        var mh$ = g_signal_stop_emission_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_stop_emission_by_name", instance, detailed_signal);
            }
            mh$.invokeExact(instance, detailed_signal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_add_emission_hook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_add_emission_hook"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gulong g_signal_add_emission_hook(guint signal_id, GQuark detail, GSignalEmissionHook hook_func, gpointer hook_data, GDestroyNotify data_destroy)
     * }
     */
    public static FunctionDescriptor g_signal_add_emission_hook$descriptor() {
        return g_signal_add_emission_hook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gulong g_signal_add_emission_hook(guint signal_id, GQuark detail, GSignalEmissionHook hook_func, gpointer hook_data, GDestroyNotify data_destroy)
     * }
     */
    public static MethodHandle g_signal_add_emission_hook$handle() {
        return g_signal_add_emission_hook.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gulong g_signal_add_emission_hook(guint signal_id, GQuark detail, GSignalEmissionHook hook_func, gpointer hook_data, GDestroyNotify data_destroy)
     * }
     */
    public static long g_signal_add_emission_hook(int signal_id, int detail, MemorySegment hook_func, MemorySegment hook_data, MemorySegment data_destroy) {
        var mh$ = g_signal_add_emission_hook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_add_emission_hook", signal_id, detail, hook_func, hook_data, data_destroy);
            }
            return (long)mh$.invokeExact(signal_id, detail, hook_func, hook_data, data_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_remove_emission_hook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_remove_emission_hook"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_remove_emission_hook(guint signal_id, gulong hook_id)
     * }
     */
    public static FunctionDescriptor g_signal_remove_emission_hook$descriptor() {
        return g_signal_remove_emission_hook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_remove_emission_hook(guint signal_id, gulong hook_id)
     * }
     */
    public static MethodHandle g_signal_remove_emission_hook$handle() {
        return g_signal_remove_emission_hook.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_remove_emission_hook(guint signal_id, gulong hook_id)
     * }
     */
    public static void g_signal_remove_emission_hook(int signal_id, long hook_id) {
        var mh$ = g_signal_remove_emission_hook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_remove_emission_hook", signal_id, hook_id);
            }
            mh$.invokeExact(signal_id, hook_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_has_handler_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_has_handler_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_signal_has_handler_pending(gpointer instance, guint signal_id, GQuark detail, gboolean may_be_blocked)
     * }
     */
    public static FunctionDescriptor g_signal_has_handler_pending$descriptor() {
        return g_signal_has_handler_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_signal_has_handler_pending(gpointer instance, guint signal_id, GQuark detail, gboolean may_be_blocked)
     * }
     */
    public static MethodHandle g_signal_has_handler_pending$handle() {
        return g_signal_has_handler_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_signal_has_handler_pending(gpointer instance, guint signal_id, GQuark detail, gboolean may_be_blocked)
     * }
     */
    public static int g_signal_has_handler_pending(MemorySegment instance, int signal_id, int detail, int may_be_blocked) {
        var mh$ = g_signal_has_handler_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_has_handler_pending", instance, signal_id, detail, may_be_blocked);
            }
            return (int)mh$.invokeExact(instance, signal_id, detail, may_be_blocked);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_connect_closure_by_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_connect_closure_by_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_closure_by_id(gpointer instance, guint signal_id, GQuark detail, GClosure *closure, gboolean after)
     * }
     */
    public static FunctionDescriptor g_signal_connect_closure_by_id$descriptor() {
        return g_signal_connect_closure_by_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_closure_by_id(gpointer instance, guint signal_id, GQuark detail, GClosure *closure, gboolean after)
     * }
     */
    public static MethodHandle g_signal_connect_closure_by_id$handle() {
        return g_signal_connect_closure_by_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gulong g_signal_connect_closure_by_id(gpointer instance, guint signal_id, GQuark detail, GClosure *closure, gboolean after)
     * }
     */
    public static long g_signal_connect_closure_by_id(MemorySegment instance, int signal_id, int detail, MemorySegment closure, int after) {
        var mh$ = g_signal_connect_closure_by_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_connect_closure_by_id", instance, signal_id, detail, closure, after);
            }
            return (long)mh$.invokeExact(instance, signal_id, detail, closure, after);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_connect_closure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_connect_closure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_closure(gpointer instance, const gchar *detailed_signal, GClosure *closure, gboolean after)
     * }
     */
    public static FunctionDescriptor g_signal_connect_closure$descriptor() {
        return g_signal_connect_closure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_closure(gpointer instance, const gchar *detailed_signal, GClosure *closure, gboolean after)
     * }
     */
    public static MethodHandle g_signal_connect_closure$handle() {
        return g_signal_connect_closure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gulong g_signal_connect_closure(gpointer instance, const gchar *detailed_signal, GClosure *closure, gboolean after)
     * }
     */
    public static long g_signal_connect_closure(MemorySegment instance, MemorySegment detailed_signal, MemorySegment closure, int after) {
        var mh$ = g_signal_connect_closure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_connect_closure", instance, detailed_signal, closure, after);
            }
            return (long)mh$.invokeExact(instance, detailed_signal, closure, after);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_connect_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_connect_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_data(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify destroy_data, GConnectFlags connect_flags)
     * }
     */
    public static FunctionDescriptor g_signal_connect_data$descriptor() {
        return g_signal_connect_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_data(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify destroy_data, GConnectFlags connect_flags)
     * }
     */
    public static MethodHandle g_signal_connect_data$handle() {
        return g_signal_connect_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gulong g_signal_connect_data(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify destroy_data, GConnectFlags connect_flags)
     * }
     */
    public static long g_signal_connect_data(MemorySegment instance, MemorySegment detailed_signal, MemorySegment c_handler, MemorySegment data, MemorySegment destroy_data, int connect_flags) {
        var mh$ = g_signal_connect_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_connect_data", instance, detailed_signal, c_handler, data, destroy_data, connect_flags);
            }
            return (long)mh$.invokeExact(instance, detailed_signal, c_handler, data, destroy_data, connect_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_handler_block {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_handler_block"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_handler_block(gpointer instance, gulong handler_id)
     * }
     */
    public static FunctionDescriptor g_signal_handler_block$descriptor() {
        return g_signal_handler_block.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_handler_block(gpointer instance, gulong handler_id)
     * }
     */
    public static MethodHandle g_signal_handler_block$handle() {
        return g_signal_handler_block.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_handler_block(gpointer instance, gulong handler_id)
     * }
     */
    public static void g_signal_handler_block(MemorySegment instance, long handler_id) {
        var mh$ = g_signal_handler_block.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_handler_block", instance, handler_id);
            }
            mh$.invokeExact(instance, handler_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_handler_unblock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_handler_unblock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_handler_unblock(gpointer instance, gulong handler_id)
     * }
     */
    public static FunctionDescriptor g_signal_handler_unblock$descriptor() {
        return g_signal_handler_unblock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_handler_unblock(gpointer instance, gulong handler_id)
     * }
     */
    public static MethodHandle g_signal_handler_unblock$handle() {
        return g_signal_handler_unblock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_handler_unblock(gpointer instance, gulong handler_id)
     * }
     */
    public static void g_signal_handler_unblock(MemorySegment instance, long handler_id) {
        var mh$ = g_signal_handler_unblock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_handler_unblock", instance, handler_id);
            }
            mh$.invokeExact(instance, handler_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_handler_disconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_handler_disconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_handler_disconnect(gpointer instance, gulong handler_id)
     * }
     */
    public static FunctionDescriptor g_signal_handler_disconnect$descriptor() {
        return g_signal_handler_disconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_handler_disconnect(gpointer instance, gulong handler_id)
     * }
     */
    public static MethodHandle g_signal_handler_disconnect$handle() {
        return g_signal_handler_disconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_handler_disconnect(gpointer instance, gulong handler_id)
     * }
     */
    public static void g_signal_handler_disconnect(MemorySegment instance, long handler_id) {
        var mh$ = g_signal_handler_disconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_handler_disconnect", instance, handler_id);
            }
            mh$.invokeExact(instance, handler_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_handler_is_connected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_handler_is_connected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_signal_handler_is_connected(gpointer instance, gulong handler_id)
     * }
     */
    public static FunctionDescriptor g_signal_handler_is_connected$descriptor() {
        return g_signal_handler_is_connected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_signal_handler_is_connected(gpointer instance, gulong handler_id)
     * }
     */
    public static MethodHandle g_signal_handler_is_connected$handle() {
        return g_signal_handler_is_connected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_signal_handler_is_connected(gpointer instance, gulong handler_id)
     * }
     */
    public static int g_signal_handler_is_connected(MemorySegment instance, long handler_id) {
        var mh$ = g_signal_handler_is_connected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_handler_is_connected", instance, handler_id);
            }
            return (int)mh$.invokeExact(instance, handler_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_handler_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_handler_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gulong g_signal_handler_find(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static FunctionDescriptor g_signal_handler_find$descriptor() {
        return g_signal_handler_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gulong g_signal_handler_find(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static MethodHandle g_signal_handler_find$handle() {
        return g_signal_handler_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gulong g_signal_handler_find(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static long g_signal_handler_find(MemorySegment instance, int mask, int signal_id, int detail, MemorySegment closure, MemorySegment func, MemorySegment data) {
        var mh$ = g_signal_handler_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_handler_find", instance, mask, signal_id, detail, closure, func, data);
            }
            return (long)mh$.invokeExact(instance, mask, signal_id, detail, closure, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_handlers_block_matched {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_handlers_block_matched"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_signal_handlers_block_matched(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static FunctionDescriptor g_signal_handlers_block_matched$descriptor() {
        return g_signal_handlers_block_matched.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_signal_handlers_block_matched(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static MethodHandle g_signal_handlers_block_matched$handle() {
        return g_signal_handlers_block_matched.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_signal_handlers_block_matched(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static int g_signal_handlers_block_matched(MemorySegment instance, int mask, int signal_id, int detail, MemorySegment closure, MemorySegment func, MemorySegment data) {
        var mh$ = g_signal_handlers_block_matched.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_handlers_block_matched", instance, mask, signal_id, detail, closure, func, data);
            }
            return (int)mh$.invokeExact(instance, mask, signal_id, detail, closure, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_handlers_unblock_matched {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_handlers_unblock_matched"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_signal_handlers_unblock_matched(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static FunctionDescriptor g_signal_handlers_unblock_matched$descriptor() {
        return g_signal_handlers_unblock_matched.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_signal_handlers_unblock_matched(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static MethodHandle g_signal_handlers_unblock_matched$handle() {
        return g_signal_handlers_unblock_matched.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_signal_handlers_unblock_matched(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static int g_signal_handlers_unblock_matched(MemorySegment instance, int mask, int signal_id, int detail, MemorySegment closure, MemorySegment func, MemorySegment data) {
        var mh$ = g_signal_handlers_unblock_matched.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_handlers_unblock_matched", instance, mask, signal_id, detail, closure, func, data);
            }
            return (int)mh$.invokeExact(instance, mask, signal_id, detail, closure, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_handlers_disconnect_matched {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_handlers_disconnect_matched"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_signal_handlers_disconnect_matched(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static FunctionDescriptor g_signal_handlers_disconnect_matched$descriptor() {
        return g_signal_handlers_disconnect_matched.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_signal_handlers_disconnect_matched(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static MethodHandle g_signal_handlers_disconnect_matched$handle() {
        return g_signal_handlers_disconnect_matched.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_signal_handlers_disconnect_matched(gpointer instance, GSignalMatchType mask, guint signal_id, GQuark detail, GClosure *closure, gpointer func, gpointer data)
     * }
     */
    public static int g_signal_handlers_disconnect_matched(MemorySegment instance, int mask, int signal_id, int detail, MemorySegment closure, MemorySegment func, MemorySegment data) {
        var mh$ = g_signal_handlers_disconnect_matched.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_handlers_disconnect_matched", instance, mask, signal_id, detail, closure, func, data);
            }
            return (int)mh$.invokeExact(instance, mask, signal_id, detail, closure, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_clear_signal_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_clear_signal_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_clear_signal_handler(gulong *handler_id_ptr, gpointer instance)
     * }
     */
    public static FunctionDescriptor g_clear_signal_handler$descriptor() {
        return g_clear_signal_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_clear_signal_handler(gulong *handler_id_ptr, gpointer instance)
     * }
     */
    public static MethodHandle g_clear_signal_handler$handle() {
        return g_clear_signal_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_clear_signal_handler(gulong *handler_id_ptr, gpointer instance)
     * }
     */
    public static void g_clear_signal_handler(MemorySegment handler_id_ptr, MemorySegment instance) {
        var mh$ = g_clear_signal_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_clear_signal_handler", handler_id_ptr, instance);
            }
            mh$.invokeExact(handler_id_ptr, instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_override_class_closure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_override_class_closure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_override_class_closure(guint signal_id, GType instance_type, GClosure *class_closure)
     * }
     */
    public static FunctionDescriptor g_signal_override_class_closure$descriptor() {
        return g_signal_override_class_closure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_override_class_closure(guint signal_id, GType instance_type, GClosure *class_closure)
     * }
     */
    public static MethodHandle g_signal_override_class_closure$handle() {
        return g_signal_override_class_closure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_override_class_closure(guint signal_id, GType instance_type, GClosure *class_closure)
     * }
     */
    public static void g_signal_override_class_closure(int signal_id, long instance_type, MemorySegment class_closure) {
        var mh$ = g_signal_override_class_closure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_override_class_closure", signal_id, instance_type, class_closure);
            }
            mh$.invokeExact(signal_id, instance_type, class_closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_override_class_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_override_class_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_override_class_handler(const gchar *signal_name, GType instance_type, GCallback class_handler)
     * }
     */
    public static FunctionDescriptor g_signal_override_class_handler$descriptor() {
        return g_signal_override_class_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_override_class_handler(const gchar *signal_name, GType instance_type, GCallback class_handler)
     * }
     */
    public static MethodHandle g_signal_override_class_handler$handle() {
        return g_signal_override_class_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_override_class_handler(const gchar *signal_name, GType instance_type, GCallback class_handler)
     * }
     */
    public static void g_signal_override_class_handler(MemorySegment signal_name, long instance_type, MemorySegment class_handler) {
        var mh$ = g_signal_override_class_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_override_class_handler", signal_name, instance_type, class_handler);
            }
            mh$.invokeExact(signal_name, instance_type, class_handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_chain_from_overridden {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_chain_from_overridden"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_chain_from_overridden(const GValue *instance_and_params, GValue *return_value)
     * }
     */
    public static FunctionDescriptor g_signal_chain_from_overridden$descriptor() {
        return g_signal_chain_from_overridden.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_chain_from_overridden(const GValue *instance_and_params, GValue *return_value)
     * }
     */
    public static MethodHandle g_signal_chain_from_overridden$handle() {
        return g_signal_chain_from_overridden.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_chain_from_overridden(const GValue *instance_and_params, GValue *return_value)
     * }
     */
    public static void g_signal_chain_from_overridden(MemorySegment instance_and_params, MemorySegment return_value) {
        var mh$ = g_signal_chain_from_overridden.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_chain_from_overridden", instance_and_params, return_value);
            }
            mh$.invokeExact(instance_and_params, return_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_signal_chain_from_overridden_handler(gpointer instance, ...)
     * }
     */
    public static class g_signal_chain_from_overridden_handler {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_signal_chain_from_overridden_handler");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_signal_chain_from_overridden_handler(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_signal_chain_from_overridden_handler(gpointer instance, ...)
         * }
         */
        public static g_signal_chain_from_overridden_handler makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_signal_chain_from_overridden_handler(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment instance, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_signal_chain_from_overridden_handler", instance, x1);
                }
                spreader.invokeExact(instance, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_signal_accumulator_true_handled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_accumulator_true_handled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_signal_accumulator_true_handled(GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy)
     * }
     */
    public static FunctionDescriptor g_signal_accumulator_true_handled$descriptor() {
        return g_signal_accumulator_true_handled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_signal_accumulator_true_handled(GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy)
     * }
     */
    public static MethodHandle g_signal_accumulator_true_handled$handle() {
        return g_signal_accumulator_true_handled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_signal_accumulator_true_handled(GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy)
     * }
     */
    public static int g_signal_accumulator_true_handled(MemorySegment ihint, MemorySegment return_accu, MemorySegment handler_return, MemorySegment dummy) {
        var mh$ = g_signal_accumulator_true_handled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_accumulator_true_handled", ihint, return_accu, handler_return, dummy);
            }
            return (int)mh$.invokeExact(ihint, return_accu, handler_return, dummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_accumulator_first_wins {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_accumulator_first_wins"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_signal_accumulator_first_wins(GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy)
     * }
     */
    public static FunctionDescriptor g_signal_accumulator_first_wins$descriptor() {
        return g_signal_accumulator_first_wins.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_signal_accumulator_first_wins(GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy)
     * }
     */
    public static MethodHandle g_signal_accumulator_first_wins$handle() {
        return g_signal_accumulator_first_wins.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_signal_accumulator_first_wins(GSignalInvocationHint *ihint, GValue *return_accu, const GValue *handler_return, gpointer dummy)
     * }
     */
    public static int g_signal_accumulator_first_wins(MemorySegment ihint, MemorySegment return_accu, MemorySegment handler_return, MemorySegment dummy) {
        var mh$ = g_signal_accumulator_first_wins.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_accumulator_first_wins", ihint, return_accu, handler_return, dummy);
            }
            return (int)mh$.invokeExact(ihint, return_accu, handler_return, dummy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_handlers_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_handlers_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_handlers_destroy(gpointer instance)
     * }
     */
    public static FunctionDescriptor g_signal_handlers_destroy$descriptor() {
        return g_signal_handlers_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_handlers_destroy(gpointer instance)
     * }
     */
    public static MethodHandle g_signal_handlers_destroy$handle() {
        return g_signal_handlers_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_handlers_destroy(gpointer instance)
     * }
     */
    public static void g_signal_handlers_destroy(MemorySegment instance) {
        var mh$ = g_signal_handlers_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_handlers_destroy", instance);
            }
            mh$.invokeExact(instance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _g_signals_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_g_signals_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _g_signals_destroy(GType itype)
     * }
     */
    public static FunctionDescriptor _g_signals_destroy$descriptor() {
        return _g_signals_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _g_signals_destroy(GType itype)
     * }
     */
    public static MethodHandle _g_signals_destroy$handle() {
        return _g_signals_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _g_signals_destroy(GType itype)
     * }
     */
    public static void _g_signals_destroy(long itype) {
        var mh$ = _g_signals_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_g_signals_destroy", itype);
            }
            mh$.invokeExact(itype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_date_get_type()
     * }
     */
    public static FunctionDescriptor g_date_get_type$descriptor() {
        return g_date_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_date_get_type()
     * }
     */
    public static MethodHandle g_date_get_type$handle() {
        return g_date_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_date_get_type()
     * }
     */
    public static long g_date_get_type() {
        var mh$ = g_date_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strv_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strv_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_strv_get_type()
     * }
     */
    public static FunctionDescriptor g_strv_get_type$descriptor() {
        return g_strv_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_strv_get_type()
     * }
     */
    public static MethodHandle g_strv_get_type$handle() {
        return g_strv_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_strv_get_type()
     * }
     */
    public static long g_strv_get_type() {
        var mh$ = g_strv_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strv_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_gstring_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_gstring_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_gstring_get_type()
     * }
     */
    public static FunctionDescriptor g_gstring_get_type$descriptor() {
        return g_gstring_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_gstring_get_type()
     * }
     */
    public static MethodHandle g_gstring_get_type$handle() {
        return g_gstring_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_gstring_get_type()
     * }
     */
    public static long g_gstring_get_type() {
        var mh$ = g_gstring_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_gstring_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_hash_table_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_hash_table_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_hash_table_get_type()
     * }
     */
    public static FunctionDescriptor g_hash_table_get_type$descriptor() {
        return g_hash_table_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_hash_table_get_type()
     * }
     */
    public static MethodHandle g_hash_table_get_type$handle() {
        return g_hash_table_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_hash_table_get_type()
     * }
     */
    public static long g_hash_table_get_type() {
        var mh$ = g_hash_table_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_hash_table_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_array_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_array_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_array_get_type()
     * }
     */
    public static FunctionDescriptor g_array_get_type$descriptor() {
        return g_array_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_array_get_type()
     * }
     */
    public static MethodHandle g_array_get_type$handle() {
        return g_array_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_array_get_type()
     * }
     */
    public static long g_array_get_type() {
        var mh$ = g_array_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_array_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_byte_array_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_byte_array_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_byte_array_get_type()
     * }
     */
    public static FunctionDescriptor g_byte_array_get_type$descriptor() {
        return g_byte_array_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_byte_array_get_type()
     * }
     */
    public static MethodHandle g_byte_array_get_type$handle() {
        return g_byte_array_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_byte_array_get_type()
     * }
     */
    public static long g_byte_array_get_type() {
        var mh$ = g_byte_array_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_byte_array_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ptr_array_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ptr_array_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_ptr_array_get_type()
     * }
     */
    public static FunctionDescriptor g_ptr_array_get_type$descriptor() {
        return g_ptr_array_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_ptr_array_get_type()
     * }
     */
    public static MethodHandle g_ptr_array_get_type$handle() {
        return g_ptr_array_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_ptr_array_get_type()
     * }
     */
    public static long g_ptr_array_get_type() {
        var mh$ = g_ptr_array_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ptr_array_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bytes_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bytes_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_bytes_get_type()
     * }
     */
    public static FunctionDescriptor g_bytes_get_type$descriptor() {
        return g_bytes_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_bytes_get_type()
     * }
     */
    public static MethodHandle g_bytes_get_type$handle() {
        return g_bytes_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_bytes_get_type()
     * }
     */
    public static long g_bytes_get_type() {
        var mh$ = g_bytes_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bytes_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_type_get_gtype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_type_get_gtype"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_variant_type_get_gtype()
     * }
     */
    public static FunctionDescriptor g_variant_type_get_gtype$descriptor() {
        return g_variant_type_get_gtype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_variant_type_get_gtype()
     * }
     */
    public static MethodHandle g_variant_type_get_gtype$handle() {
        return g_variant_type_get_gtype.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_variant_type_get_gtype()
     * }
     */
    public static long g_variant_type_get_gtype() {
        var mh$ = g_variant_type_get_gtype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_type_get_gtype");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_regex_get_type()
     * }
     */
    public static FunctionDescriptor g_regex_get_type$descriptor() {
        return g_regex_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_regex_get_type()
     * }
     */
    public static MethodHandle g_regex_get_type$handle() {
        return g_regex_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_regex_get_type()
     * }
     */
    public static long g_regex_get_type() {
        var mh$ = g_regex_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_match_info_get_type()
     * }
     */
    public static FunctionDescriptor g_match_info_get_type$descriptor() {
        return g_match_info_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_match_info_get_type()
     * }
     */
    public static MethodHandle g_match_info_get_type$handle() {
        return g_match_info_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_match_info_get_type()
     * }
     */
    public static long g_match_info_get_type() {
        var mh$ = g_match_info_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_error_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_error_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_error_get_type()
     * }
     */
    public static FunctionDescriptor g_error_get_type$descriptor() {
        return g_error_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_error_get_type()
     * }
     */
    public static MethodHandle g_error_get_type$handle() {
        return g_error_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_error_get_type()
     * }
     */
    public static long g_error_get_type() {
        var mh$ = g_error_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_error_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_date_time_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_date_time_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_date_time_get_type()
     * }
     */
    public static FunctionDescriptor g_date_time_get_type$descriptor() {
        return g_date_time_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_date_time_get_type()
     * }
     */
    public static MethodHandle g_date_time_get_type$handle() {
        return g_date_time_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_date_time_get_type()
     * }
     */
    public static long g_date_time_get_type() {
        var mh$ = g_date_time_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_date_time_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_zone_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_zone_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_time_zone_get_type()
     * }
     */
    public static FunctionDescriptor g_time_zone_get_type$descriptor() {
        return g_time_zone_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_time_zone_get_type()
     * }
     */
    public static MethodHandle g_time_zone_get_type$handle() {
        return g_time_zone_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_time_zone_get_type()
     * }
     */
    public static long g_time_zone_get_type() {
        var mh$ = g_time_zone_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_zone_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_channel_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_channel_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_io_channel_get_type()
     * }
     */
    public static FunctionDescriptor g_io_channel_get_type$descriptor() {
        return g_io_channel_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_io_channel_get_type()
     * }
     */
    public static MethodHandle g_io_channel_get_type$handle() {
        return g_io_channel_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_io_channel_get_type()
     * }
     */
    public static long g_io_channel_get_type() {
        var mh$ = g_io_channel_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_channel_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_io_condition_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_io_condition_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_io_condition_get_type()
     * }
     */
    public static FunctionDescriptor g_io_condition_get_type$descriptor() {
        return g_io_condition_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_io_condition_get_type()
     * }
     */
    public static MethodHandle g_io_condition_get_type$handle() {
        return g_io_condition_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_io_condition_get_type()
     * }
     */
    public static long g_io_condition_get_type() {
        var mh$ = g_io_condition_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_io_condition_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_builder_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_builder_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_variant_builder_get_type()
     * }
     */
    public static FunctionDescriptor g_variant_builder_get_type$descriptor() {
        return g_variant_builder_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_variant_builder_get_type()
     * }
     */
    public static MethodHandle g_variant_builder_get_type$handle() {
        return g_variant_builder_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_variant_builder_get_type()
     * }
     */
    public static long g_variant_builder_get_type() {
        var mh$ = g_variant_builder_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_builder_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dict_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_variant_dict_get_type()
     * }
     */
    public static FunctionDescriptor g_variant_dict_get_type$descriptor() {
        return g_variant_dict_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_variant_dict_get_type()
     * }
     */
    public static MethodHandle g_variant_dict_get_type$handle() {
        return g_variant_dict_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_variant_dict_get_type()
     * }
     */
    public static long g_variant_dict_get_type() {
        var mh$ = g_variant_dict_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_key_file_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_key_file_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_key_file_get_type()
     * }
     */
    public static FunctionDescriptor g_key_file_get_type$descriptor() {
        return g_key_file_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_key_file_get_type()
     * }
     */
    public static MethodHandle g_key_file_get_type$handle() {
        return g_key_file_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_key_file_get_type()
     * }
     */
    public static long g_key_file_get_type() {
        var mh$ = g_key_file_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_key_file_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_loop_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_loop_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_main_loop_get_type()
     * }
     */
    public static FunctionDescriptor g_main_loop_get_type$descriptor() {
        return g_main_loop_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_main_loop_get_type()
     * }
     */
    public static MethodHandle g_main_loop_get_type$handle() {
        return g_main_loop_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_main_loop_get_type()
     * }
     */
    public static long g_main_loop_get_type() {
        var mh$ = g_main_loop_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_loop_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_main_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_main_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_main_context_get_type()
     * }
     */
    public static FunctionDescriptor g_main_context_get_type$descriptor() {
        return g_main_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_main_context_get_type()
     * }
     */
    public static MethodHandle g_main_context_get_type$handle() {
        return g_main_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_main_context_get_type()
     * }
     */
    public static long g_main_context_get_type() {
        var mh$ = g_main_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_main_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_source_get_type()
     * }
     */
    public static FunctionDescriptor g_source_get_type$descriptor() {
        return g_source_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_source_get_type()
     * }
     */
    public static MethodHandle g_source_get_type$handle() {
        return g_source_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_source_get_type()
     * }
     */
    public static long g_source_get_type() {
        var mh$ = g_source_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pollfd_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pollfd_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_pollfd_get_type()
     * }
     */
    public static FunctionDescriptor g_pollfd_get_type$descriptor() {
        return g_pollfd_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_pollfd_get_type()
     * }
     */
    public static MethodHandle g_pollfd_get_type$handle() {
        return g_pollfd_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_pollfd_get_type()
     * }
     */
    public static long g_pollfd_get_type() {
        var mh$ = g_pollfd_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pollfd_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_thread_get_type()
     * }
     */
    public static FunctionDescriptor g_thread_get_type$descriptor() {
        return g_thread_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_thread_get_type()
     * }
     */
    public static MethodHandle g_thread_get_type$handle() {
        return g_thread_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_thread_get_type()
     * }
     */
    public static long g_thread_get_type() {
        var mh$ = g_thread_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_checksum_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_checksum_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_checksum_get_type()
     * }
     */
    public static FunctionDescriptor g_checksum_get_type$descriptor() {
        return g_checksum_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_checksum_get_type()
     * }
     */
    public static MethodHandle g_checksum_get_type$handle() {
        return g_checksum_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_checksum_get_type()
     * }
     */
    public static long g_checksum_get_type() {
        var mh$ = g_checksum_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_checksum_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_markup_parse_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_markup_parse_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_markup_parse_context_get_type()
     * }
     */
    public static FunctionDescriptor g_markup_parse_context_get_type$descriptor() {
        return g_markup_parse_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_markup_parse_context_get_type()
     * }
     */
    public static MethodHandle g_markup_parse_context_get_type$handle() {
        return g_markup_parse_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_markup_parse_context_get_type()
     * }
     */
    public static long g_markup_parse_context_get_type() {
        var mh$ = g_markup_parse_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_markup_parse_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mapped_file_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mapped_file_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_mapped_file_get_type()
     * }
     */
    public static FunctionDescriptor g_mapped_file_get_type$descriptor() {
        return g_mapped_file_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_mapped_file_get_type()
     * }
     */
    public static MethodHandle g_mapped_file_get_type$handle() {
        return g_mapped_file_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_mapped_file_get_type()
     * }
     */
    public static long g_mapped_file_get_type() {
        var mh$ = g_mapped_file_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mapped_file_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_option_group_get_type()
     * }
     */
    public static FunctionDescriptor g_option_group_get_type$descriptor() {
        return g_option_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_option_group_get_type()
     * }
     */
    public static MethodHandle g_option_group_get_type$handle() {
        return g_option_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_option_group_get_type()
     * }
     */
    public static long g_option_group_get_type() {
        var mh$ = g_option_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_uri_get_type()
     * }
     */
    public static FunctionDescriptor g_uri_get_type$descriptor() {
        return g_uri_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_uri_get_type()
     * }
     */
    public static MethodHandle g_uri_get_type$handle() {
        return g_uri_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_uri_get_type()
     * }
     */
    public static long g_uri_get_type() {
        var mh$ = g_uri_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_tree_get_type()
     * }
     */
    public static FunctionDescriptor g_tree_get_type$descriptor() {
        return g_tree_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_tree_get_type()
     * }
     */
    public static MethodHandle g_tree_get_type$handle() {
        return g_tree_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_tree_get_type()
     * }
     */
    public static long g_tree_get_type() {
        var mh$ = g_tree_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pattern_spec_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pattern_spec_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_pattern_spec_get_type()
     * }
     */
    public static FunctionDescriptor g_pattern_spec_get_type$descriptor() {
        return g_pattern_spec_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_pattern_spec_get_type()
     * }
     */
    public static MethodHandle g_pattern_spec_get_type$handle() {
        return g_pattern_spec_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_pattern_spec_get_type()
     * }
     */
    public static long g_pattern_spec_get_type() {
        var mh$ = g_pattern_spec_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pattern_spec_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_bookmark_file_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_bookmark_file_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_bookmark_file_get_type()
     * }
     */
    public static FunctionDescriptor g_bookmark_file_get_type$descriptor() {
        return g_bookmark_file_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_bookmark_file_get_type()
     * }
     */
    public static MethodHandle g_bookmark_file_get_type$handle() {
        return g_bookmark_file_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_bookmark_file_get_type()
     * }
     */
    public static long g_bookmark_file_get_type() {
        var mh$ = g_bookmark_file_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_bookmark_file_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_gtype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_gtype"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_variant_get_gtype()
     * }
     */
    public static FunctionDescriptor g_variant_get_gtype$descriptor() {
        return g_variant_get_gtype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_variant_get_gtype()
     * }
     */
    public static MethodHandle g_variant_get_gtype$handle() {
        return g_variant_get_gtype.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_variant_get_gtype()
     * }
     */
    public static long g_variant_get_gtype() {
        var mh$ = g_variant_get_gtype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_gtype");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_boxed_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_boxed_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_boxed_copy(GType boxed_type, gconstpointer src_boxed)
     * }
     */
    public static FunctionDescriptor g_boxed_copy$descriptor() {
        return g_boxed_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_boxed_copy(GType boxed_type, gconstpointer src_boxed)
     * }
     */
    public static MethodHandle g_boxed_copy$handle() {
        return g_boxed_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_boxed_copy(GType boxed_type, gconstpointer src_boxed)
     * }
     */
    public static MemorySegment g_boxed_copy(long boxed_type, MemorySegment src_boxed) {
        var mh$ = g_boxed_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_boxed_copy", boxed_type, src_boxed);
            }
            return (MemorySegment)mh$.invokeExact(boxed_type, src_boxed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_boxed_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_boxed_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_boxed_free(GType boxed_type, gpointer boxed)
     * }
     */
    public static FunctionDescriptor g_boxed_free$descriptor() {
        return g_boxed_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_boxed_free(GType boxed_type, gpointer boxed)
     * }
     */
    public static MethodHandle g_boxed_free$handle() {
        return g_boxed_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_boxed_free(GType boxed_type, gpointer boxed)
     * }
     */
    public static void g_boxed_free(long boxed_type, MemorySegment boxed) {
        var mh$ = g_boxed_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_boxed_free", boxed_type, boxed);
            }
            mh$.invokeExact(boxed_type, boxed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_boxed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static FunctionDescriptor g_value_set_boxed$descriptor() {
        return g_value_set_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MethodHandle g_value_set_boxed$handle() {
        return g_value_set_boxed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static void g_value_set_boxed(MemorySegment value, MemorySegment v_boxed) {
        var mh$ = g_value_set_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_boxed", value, v_boxed);
            }
            mh$.invokeExact(value, v_boxed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_static_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_static_boxed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_static_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static FunctionDescriptor g_value_set_static_boxed$descriptor() {
        return g_value_set_static_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_static_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MethodHandle g_value_set_static_boxed$handle() {
        return g_value_set_static_boxed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_static_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static void g_value_set_static_boxed(MemorySegment value, MemorySegment v_boxed) {
        var mh$ = g_value_set_static_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_static_boxed", value, v_boxed);
            }
            mh$.invokeExact(value, v_boxed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_take_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_take_boxed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_take_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static FunctionDescriptor g_value_take_boxed$descriptor() {
        return g_value_take_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_take_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MethodHandle g_value_take_boxed$handle() {
        return g_value_take_boxed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_take_boxed(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static void g_value_take_boxed(MemorySegment value, MemorySegment v_boxed) {
        var mh$ = g_value_take_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_take_boxed", value, v_boxed);
            }
            mh$.invokeExact(value, v_boxed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_boxed_take_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_boxed_take_ownership"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_boxed_take_ownership(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static FunctionDescriptor g_value_set_boxed_take_ownership$descriptor() {
        return g_value_set_boxed_take_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_boxed_take_ownership(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static MethodHandle g_value_set_boxed_take_ownership$handle() {
        return g_value_set_boxed_take_ownership.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_boxed_take_ownership(GValue *value, gconstpointer v_boxed)
     * }
     */
    public static void g_value_set_boxed_take_ownership(MemorySegment value, MemorySegment v_boxed) {
        var mh$ = g_value_set_boxed_take_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_boxed_take_ownership", value, v_boxed);
            }
            mh$.invokeExact(value, v_boxed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_boxed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_boxed(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_boxed$descriptor() {
        return g_value_get_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_boxed(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_boxed$handle() {
        return g_value_get_boxed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_value_get_boxed(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_boxed(MemorySegment value) {
        var mh$ = g_value_get_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_boxed", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_dup_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_dup_boxed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_dup_boxed(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_dup_boxed$descriptor() {
        return g_value_dup_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_dup_boxed(const GValue *value)
     * }
     */
    public static MethodHandle g_value_dup_boxed$handle() {
        return g_value_dup_boxed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_value_dup_boxed(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_boxed(MemorySegment value) {
        var mh$ = g_value_dup_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_dup_boxed", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_boxed_type_register_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_boxed_type_register_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_boxed_type_register_static(const gchar *name, GBoxedCopyFunc boxed_copy, GBoxedFreeFunc boxed_free)
     * }
     */
    public static FunctionDescriptor g_boxed_type_register_static$descriptor() {
        return g_boxed_type_register_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_boxed_type_register_static(const gchar *name, GBoxedCopyFunc boxed_copy, GBoxedFreeFunc boxed_free)
     * }
     */
    public static MethodHandle g_boxed_type_register_static$handle() {
        return g_boxed_type_register_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_boxed_type_register_static(const gchar *name, GBoxedCopyFunc boxed_copy, GBoxedFreeFunc boxed_free)
     * }
     */
    public static long g_boxed_type_register_static(MemorySegment name, MemorySegment boxed_copy, MemorySegment boxed_free) {
        var mh$ = g_boxed_type_register_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_boxed_type_register_static", name, boxed_copy, boxed_free);
            }
            return (long)mh$.invokeExact(name, boxed_copy, boxed_free);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_closure_get_type()
     * }
     */
    public static FunctionDescriptor g_closure_get_type$descriptor() {
        return g_closure_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_closure_get_type()
     * }
     */
    public static MethodHandle g_closure_get_type$handle() {
        return g_closure_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_closure_get_type()
     * }
     */
    public static long g_closure_get_type() {
        var mh$ = g_closure_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_value_get_type()
     * }
     */
    public static FunctionDescriptor g_value_get_type$descriptor() {
        return g_value_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_value_get_type()
     * }
     */
    public static MethodHandle g_value_get_type$handle() {
        return g_value_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_value_get_type()
     * }
     */
    public static long g_value_get_type() {
        var mh$ = g_value_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_initially_unowned_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_initially_unowned_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_initially_unowned_get_type()
     * }
     */
    public static FunctionDescriptor g_initially_unowned_get_type$descriptor() {
        return g_initially_unowned_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_initially_unowned_get_type()
     * }
     */
    public static MethodHandle g_initially_unowned_get_type$handle() {
        return g_initially_unowned_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_initially_unowned_get_type()
     * }
     */
    public static long g_initially_unowned_get_type() {
        var mh$ = g_initially_unowned_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_initially_unowned_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_class_install_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_class_install_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_class_install_property(GObjectClass *oclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_object_class_install_property$descriptor() {
        return g_object_class_install_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_class_install_property(GObjectClass *oclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_object_class_install_property$handle() {
        return g_object_class_install_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_class_install_property(GObjectClass *oclass, guint property_id, GParamSpec *pspec)
     * }
     */
    public static void g_object_class_install_property(MemorySegment oclass, int property_id, MemorySegment pspec) {
        var mh$ = g_object_class_install_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_class_install_property", oclass, property_id, pspec);
            }
            mh$.invokeExact(oclass, property_id, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_class_find_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_class_find_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_object_class_find_property(GObjectClass *oclass, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor g_object_class_find_property$descriptor() {
        return g_object_class_find_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_object_class_find_property(GObjectClass *oclass, const gchar *property_name)
     * }
     */
    public static MethodHandle g_object_class_find_property$handle() {
        return g_object_class_find_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_object_class_find_property(GObjectClass *oclass, const gchar *property_name)
     * }
     */
    public static MemorySegment g_object_class_find_property(MemorySegment oclass, MemorySegment property_name) {
        var mh$ = g_object_class_find_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_class_find_property", oclass, property_name);
            }
            return (MemorySegment)mh$.invokeExact(oclass, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_class_list_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_class_list_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec **g_object_class_list_properties(GObjectClass *oclass, guint *n_properties)
     * }
     */
    public static FunctionDescriptor g_object_class_list_properties$descriptor() {
        return g_object_class_list_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec **g_object_class_list_properties(GObjectClass *oclass, guint *n_properties)
     * }
     */
    public static MethodHandle g_object_class_list_properties$handle() {
        return g_object_class_list_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec **g_object_class_list_properties(GObjectClass *oclass, guint *n_properties)
     * }
     */
    public static MemorySegment g_object_class_list_properties(MemorySegment oclass, MemorySegment n_properties) {
        var mh$ = g_object_class_list_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_class_list_properties", oclass, n_properties);
            }
            return (MemorySegment)mh$.invokeExact(oclass, n_properties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_class_override_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_class_override_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_class_override_property(GObjectClass *oclass, guint property_id, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_object_class_override_property$descriptor() {
        return g_object_class_override_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_class_override_property(GObjectClass *oclass, guint property_id, const gchar *name)
     * }
     */
    public static MethodHandle g_object_class_override_property$handle() {
        return g_object_class_override_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_class_override_property(GObjectClass *oclass, guint property_id, const gchar *name)
     * }
     */
    public static void g_object_class_override_property(MemorySegment oclass, int property_id, MemorySegment name) {
        var mh$ = g_object_class_override_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_class_override_property", oclass, property_id, name);
            }
            mh$.invokeExact(oclass, property_id, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_class_install_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_class_install_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_class_install_properties(GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs)
     * }
     */
    public static FunctionDescriptor g_object_class_install_properties$descriptor() {
        return g_object_class_install_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_class_install_properties(GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs)
     * }
     */
    public static MethodHandle g_object_class_install_properties$handle() {
        return g_object_class_install_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_class_install_properties(GObjectClass *oclass, guint n_pspecs, GParamSpec **pspecs)
     * }
     */
    public static void g_object_class_install_properties(MemorySegment oclass, int n_pspecs, MemorySegment pspecs) {
        var mh$ = g_object_class_install_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_class_install_properties", oclass, n_pspecs, pspecs);
            }
            mh$.invokeExact(oclass, n_pspecs, pspecs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_interface_install_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_interface_install_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_interface_install_property(gpointer g_iface, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_object_interface_install_property$descriptor() {
        return g_object_interface_install_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_interface_install_property(gpointer g_iface, GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_object_interface_install_property$handle() {
        return g_object_interface_install_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_interface_install_property(gpointer g_iface, GParamSpec *pspec)
     * }
     */
    public static void g_object_interface_install_property(MemorySegment g_iface, MemorySegment pspec) {
        var mh$ = g_object_interface_install_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_interface_install_property", g_iface, pspec);
            }
            mh$.invokeExact(g_iface, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_interface_find_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_interface_find_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_object_interface_find_property(gpointer g_iface, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor g_object_interface_find_property$descriptor() {
        return g_object_interface_find_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_object_interface_find_property(gpointer g_iface, const gchar *property_name)
     * }
     */
    public static MethodHandle g_object_interface_find_property$handle() {
        return g_object_interface_find_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_object_interface_find_property(gpointer g_iface, const gchar *property_name)
     * }
     */
    public static MemorySegment g_object_interface_find_property(MemorySegment g_iface, MemorySegment property_name) {
        var mh$ = g_object_interface_find_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_interface_find_property", g_iface, property_name);
            }
            return (MemorySegment)mh$.invokeExact(g_iface, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_interface_list_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_interface_list_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec **g_object_interface_list_properties(gpointer g_iface, guint *n_properties_p)
     * }
     */
    public static FunctionDescriptor g_object_interface_list_properties$descriptor() {
        return g_object_interface_list_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec **g_object_interface_list_properties(gpointer g_iface, guint *n_properties_p)
     * }
     */
    public static MethodHandle g_object_interface_list_properties$handle() {
        return g_object_interface_list_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec **g_object_interface_list_properties(gpointer g_iface, guint *n_properties_p)
     * }
     */
    public static MemorySegment g_object_interface_list_properties(MemorySegment g_iface, MemorySegment n_properties_p) {
        var mh$ = g_object_interface_list_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_interface_list_properties", g_iface, n_properties_p);
            }
            return (MemorySegment)mh$.invokeExact(g_iface, n_properties_p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_object_get_type()
     * }
     */
    public static FunctionDescriptor g_object_get_type$descriptor() {
        return g_object_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_object_get_type()
     * }
     */
    public static MethodHandle g_object_get_type$handle() {
        return g_object_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_object_get_type()
     * }
     */
    public static long g_object_get_type() {
        var mh$ = g_object_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gpointer g_object_new(GType object_type, const gchar *first_property_name, ...)
     * }
     */
    public static class g_object_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_object_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_object_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gpointer g_object_new(GType object_type, const gchar *first_property_name, ...)
         * }
         */
        public static g_object_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_object_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(long object_type, MemorySegment first_property_name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_object_new", object_type, first_property_name, x2);
                }
                return (MemorySegment)spreader.invokeExact(object_type, first_property_name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_object_new_with_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_new_with_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_object_new_with_properties(GType object_type, guint n_properties, const char *names[], const GValue values[])
     * }
     */
    public static FunctionDescriptor g_object_new_with_properties$descriptor() {
        return g_object_new_with_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_object_new_with_properties(GType object_type, guint n_properties, const char *names[], const GValue values[])
     * }
     */
    public static MethodHandle g_object_new_with_properties$handle() {
        return g_object_new_with_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *g_object_new_with_properties(GType object_type, guint n_properties, const char *names[], const GValue values[])
     * }
     */
    public static MemorySegment g_object_new_with_properties(long object_type, int n_properties, MemorySegment names, MemorySegment values) {
        var mh$ = g_object_new_with_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_new_with_properties", object_type, n_properties, names, values);
            }
            return (MemorySegment)mh$.invokeExact(object_type, n_properties, names, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_newv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_newv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_newv(GType object_type, guint n_parameters, GParameter *parameters)
     * }
     */
    public static FunctionDescriptor g_object_newv$descriptor() {
        return g_object_newv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_newv(GType object_type, guint n_parameters, GParameter *parameters)
     * }
     */
    public static MethodHandle g_object_newv$handle() {
        return g_object_newv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_object_newv(GType object_type, guint n_parameters, GParameter *parameters)
     * }
     */
    public static MemorySegment g_object_newv(long object_type, int n_parameters, MemorySegment parameters) {
        var mh$ = g_object_newv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_newv", object_type, n_parameters, parameters);
            }
            return (MemorySegment)mh$.invokeExact(object_type, n_parameters, parameters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_object_set(gpointer object, const gchar *first_property_name, ...)
     * }
     */
    public static class g_object_set {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_object_set");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_object_set(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_object_set(gpointer object, const gchar *first_property_name, ...)
         * }
         */
        public static g_object_set makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_object_set(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment object, MemorySegment first_property_name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_object_set", object, first_property_name, x2);
                }
                spreader.invokeExact(object, first_property_name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_object_get(gpointer object, const gchar *first_property_name, ...)
     * }
     */
    public static class g_object_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_object_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_object_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_object_get(gpointer object, const gchar *first_property_name, ...)
         * }
         */
        public static g_object_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_object_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment object, MemorySegment first_property_name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_object_get", object, first_property_name, x2);
                }
                spreader.invokeExact(object, first_property_name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gpointer g_object_connect(gpointer object, const gchar *signal_spec, ...)
     * }
     */
    public static class g_object_connect {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_object_connect");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_object_connect(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gpointer g_object_connect(gpointer object, const gchar *signal_spec, ...)
         * }
         */
        public static g_object_connect makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_object_connect(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment object, MemorySegment signal_spec, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_object_connect", object, signal_spec, x2);
                }
                return (MemorySegment)spreader.invokeExact(object, signal_spec, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_object_disconnect(gpointer object, const gchar *signal_spec, ...)
     * }
     */
    public static class g_object_disconnect {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_object_disconnect");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_object_disconnect(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_object_disconnect(gpointer object, const gchar *signal_spec, ...)
         * }
         */
        public static g_object_disconnect makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_object_disconnect(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment object, MemorySegment signal_spec, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_object_disconnect", object, signal_spec, x2);
                }
                spreader.invokeExact(object, signal_spec, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_object_setv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_setv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_setv(GObject *object, guint n_properties, const gchar *names[], const GValue values[])
     * }
     */
    public static FunctionDescriptor g_object_setv$descriptor() {
        return g_object_setv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_setv(GObject *object, guint n_properties, const gchar *names[], const GValue values[])
     * }
     */
    public static MethodHandle g_object_setv$handle() {
        return g_object_setv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_setv(GObject *object, guint n_properties, const gchar *names[], const GValue values[])
     * }
     */
    public static void g_object_setv(MemorySegment object, int n_properties, MemorySegment names, MemorySegment values) {
        var mh$ = g_object_setv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_setv", object, n_properties, names, values);
            }
            mh$.invokeExact(object, n_properties, names, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_getv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_getv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_getv(GObject *object, guint n_properties, const gchar *names[], GValue values[])
     * }
     */
    public static FunctionDescriptor g_object_getv$descriptor() {
        return g_object_getv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_getv(GObject *object, guint n_properties, const gchar *names[], GValue values[])
     * }
     */
    public static MethodHandle g_object_getv$handle() {
        return g_object_getv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_getv(GObject *object, guint n_properties, const gchar *names[], GValue values[])
     * }
     */
    public static void g_object_getv(MemorySegment object, int n_properties, MemorySegment names, MemorySegment values) {
        var mh$ = g_object_getv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_getv", object, n_properties, names, values);
            }
            mh$.invokeExact(object, n_properties, names, values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_set_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_property(GObject *object, const gchar *property_name, const GValue *value)
     * }
     */
    public static FunctionDescriptor g_object_set_property$descriptor() {
        return g_object_set_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_property(GObject *object, const gchar *property_name, const GValue *value)
     * }
     */
    public static MethodHandle g_object_set_property$handle() {
        return g_object_set_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_set_property(GObject *object, const gchar *property_name, const GValue *value)
     * }
     */
    public static void g_object_set_property(MemorySegment object, MemorySegment property_name, MemorySegment value) {
        var mh$ = g_object_set_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_property", object, property_name, value);
            }
            mh$.invokeExact(object, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_get_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_get_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_get_property(GObject *object, const gchar *property_name, GValue *value)
     * }
     */
    public static FunctionDescriptor g_object_get_property$descriptor() {
        return g_object_get_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_get_property(GObject *object, const gchar *property_name, GValue *value)
     * }
     */
    public static MethodHandle g_object_get_property$handle() {
        return g_object_get_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_get_property(GObject *object, const gchar *property_name, GValue *value)
     * }
     */
    public static void g_object_get_property(MemorySegment object, MemorySegment property_name, MemorySegment value) {
        var mh$ = g_object_get_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_get_property", object, property_name, value);
            }
            mh$.invokeExact(object, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_freeze_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_freeze_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_freeze_notify(GObject *object)
     * }
     */
    public static FunctionDescriptor g_object_freeze_notify$descriptor() {
        return g_object_freeze_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_freeze_notify(GObject *object)
     * }
     */
    public static MethodHandle g_object_freeze_notify$handle() {
        return g_object_freeze_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_freeze_notify(GObject *object)
     * }
     */
    public static void g_object_freeze_notify(MemorySegment object) {
        var mh$ = g_object_freeze_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_freeze_notify", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_notify(GObject *object, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor g_object_notify$descriptor() {
        return g_object_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_notify(GObject *object, const gchar *property_name)
     * }
     */
    public static MethodHandle g_object_notify$handle() {
        return g_object_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_notify(GObject *object, const gchar *property_name)
     * }
     */
    public static void g_object_notify(MemorySegment object, MemorySegment property_name) {
        var mh$ = g_object_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_notify", object, property_name);
            }
            mh$.invokeExact(object, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_notify_by_pspec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_notify_by_pspec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_notify_by_pspec(GObject *object, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_object_notify_by_pspec$descriptor() {
        return g_object_notify_by_pspec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_notify_by_pspec(GObject *object, GParamSpec *pspec)
     * }
     */
    public static MethodHandle g_object_notify_by_pspec$handle() {
        return g_object_notify_by_pspec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_notify_by_pspec(GObject *object, GParamSpec *pspec)
     * }
     */
    public static void g_object_notify_by_pspec(MemorySegment object, MemorySegment pspec) {
        var mh$ = g_object_notify_by_pspec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_notify_by_pspec", object, pspec);
            }
            mh$.invokeExact(object, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_thaw_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_thaw_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_thaw_notify(GObject *object)
     * }
     */
    public static FunctionDescriptor g_object_thaw_notify$descriptor() {
        return g_object_thaw_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_thaw_notify(GObject *object)
     * }
     */
    public static MethodHandle g_object_thaw_notify$handle() {
        return g_object_thaw_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_thaw_notify(GObject *object)
     * }
     */
    public static void g_object_thaw_notify(MemorySegment object) {
        var mh$ = g_object_thaw_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_thaw_notify", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_is_floating {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_is_floating"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_object_is_floating(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_is_floating$descriptor() {
        return g_object_is_floating.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_object_is_floating(gpointer object)
     * }
     */
    public static MethodHandle g_object_is_floating$handle() {
        return g_object_is_floating.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_object_is_floating(gpointer object)
     * }
     */
    public static int g_object_is_floating(MemorySegment object) {
        var mh$ = g_object_is_floating.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_is_floating", object);
            }
            return (int)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_ref_sink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_ref_sink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_ref_sink(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_ref_sink$descriptor() {
        return g_object_ref_sink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_ref_sink(gpointer object)
     * }
     */
    public static MethodHandle g_object_ref_sink$handle() {
        return g_object_ref_sink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_object_ref_sink(gpointer object)
     * }
     */
    public static MemorySegment g_object_ref_sink(MemorySegment object) {
        var mh$ = g_object_ref_sink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_ref_sink", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_take_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_take_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_take_ref(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_take_ref$descriptor() {
        return g_object_take_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_take_ref(gpointer object)
     * }
     */
    public static MethodHandle g_object_take_ref$handle() {
        return g_object_take_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_object_take_ref(gpointer object)
     * }
     */
    public static MemorySegment g_object_take_ref(MemorySegment object) {
        var mh$ = g_object_take_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_take_ref", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_ref(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_ref$descriptor() {
        return g_object_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_ref(gpointer object)
     * }
     */
    public static MethodHandle g_object_ref$handle() {
        return g_object_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_object_ref(gpointer object)
     * }
     */
    public static MemorySegment g_object_ref(MemorySegment object) {
        var mh$ = g_object_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_ref", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static FunctionDescriptor g_object_unref$descriptor() {
        return g_object_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static MethodHandle g_object_unref$handle() {
        return g_object_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_unref(gpointer object)
     * }
     */
    public static void g_object_unref(MemorySegment object) {
        var mh$ = g_object_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_unref", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_weak_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_weak_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_weak_ref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_weak_ref$descriptor() {
        return g_object_weak_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_weak_ref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static MethodHandle g_object_weak_ref$handle() {
        return g_object_weak_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_weak_ref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static void g_object_weak_ref(MemorySegment object, MemorySegment notify, MemorySegment data) {
        var mh$ = g_object_weak_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_weak_ref", object, notify, data);
            }
            mh$.invokeExact(object, notify, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_weak_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_weak_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_weak_unref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_weak_unref$descriptor() {
        return g_object_weak_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_weak_unref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static MethodHandle g_object_weak_unref$handle() {
        return g_object_weak_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_weak_unref(GObject *object, GWeakNotify notify, gpointer data)
     * }
     */
    public static void g_object_weak_unref(MemorySegment object, MemorySegment notify, MemorySegment data) {
        var mh$ = g_object_weak_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_weak_unref", object, notify, data);
            }
            mh$.invokeExact(object, notify, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_add_weak_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_add_weak_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_add_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static FunctionDescriptor g_object_add_weak_pointer$descriptor() {
        return g_object_add_weak_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_add_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static MethodHandle g_object_add_weak_pointer$handle() {
        return g_object_add_weak_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_add_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static void g_object_add_weak_pointer(MemorySegment object, MemorySegment weak_pointer_location) {
        var mh$ = g_object_add_weak_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_add_weak_pointer", object, weak_pointer_location);
            }
            mh$.invokeExact(object, weak_pointer_location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_remove_weak_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_remove_weak_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_remove_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static FunctionDescriptor g_object_remove_weak_pointer$descriptor() {
        return g_object_remove_weak_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_remove_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static MethodHandle g_object_remove_weak_pointer$handle() {
        return g_object_remove_weak_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_remove_weak_pointer(GObject *object, gpointer *weak_pointer_location)
     * }
     */
    public static void g_object_remove_weak_pointer(MemorySegment object, MemorySegment weak_pointer_location) {
        var mh$ = g_object_remove_weak_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_remove_weak_pointer", object, weak_pointer_location);
            }
            mh$.invokeExact(object, weak_pointer_location);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_add_toggle_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_add_toggle_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_add_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_add_toggle_ref$descriptor() {
        return g_object_add_toggle_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_add_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static MethodHandle g_object_add_toggle_ref$handle() {
        return g_object_add_toggle_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_add_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static void g_object_add_toggle_ref(MemorySegment object, MemorySegment notify, MemorySegment data) {
        var mh$ = g_object_add_toggle_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_add_toggle_ref", object, notify, data);
            }
            mh$.invokeExact(object, notify, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_remove_toggle_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_remove_toggle_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_remove_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_remove_toggle_ref$descriptor() {
        return g_object_remove_toggle_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_remove_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static MethodHandle g_object_remove_toggle_ref$handle() {
        return g_object_remove_toggle_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_remove_toggle_ref(GObject *object, GToggleNotify notify, gpointer data)
     * }
     */
    public static void g_object_remove_toggle_ref(MemorySegment object, MemorySegment notify, MemorySegment data) {
        var mh$ = g_object_remove_toggle_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_remove_toggle_ref", object, notify, data);
            }
            mh$.invokeExact(object, notify, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_get_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_get_qdata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_get_qdata(GObject *object, GQuark quark)
     * }
     */
    public static FunctionDescriptor g_object_get_qdata$descriptor() {
        return g_object_get_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_get_qdata(GObject *object, GQuark quark)
     * }
     */
    public static MethodHandle g_object_get_qdata$handle() {
        return g_object_get_qdata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_object_get_qdata(GObject *object, GQuark quark)
     * }
     */
    public static MemorySegment g_object_get_qdata(MemorySegment object, int quark) {
        var mh$ = g_object_get_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_get_qdata", object, quark);
            }
            return (MemorySegment)mh$.invokeExact(object, quark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_set_qdata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_qdata(GObject *object, GQuark quark, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_set_qdata$descriptor() {
        return g_object_set_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_qdata(GObject *object, GQuark quark, gpointer data)
     * }
     */
    public static MethodHandle g_object_set_qdata$handle() {
        return g_object_set_qdata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_set_qdata(GObject *object, GQuark quark, gpointer data)
     * }
     */
    public static void g_object_set_qdata(MemorySegment object, int quark, MemorySegment data) {
        var mh$ = g_object_set_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_qdata", object, quark, data);
            }
            mh$.invokeExact(object, quark, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_qdata_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_set_qdata_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_qdata_full(GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_object_set_qdata_full$descriptor() {
        return g_object_set_qdata_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_qdata_full(GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_object_set_qdata_full$handle() {
        return g_object_set_qdata_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_set_qdata_full(GObject *object, GQuark quark, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void g_object_set_qdata_full(MemorySegment object, int quark, MemorySegment data, MemorySegment destroy) {
        var mh$ = g_object_set_qdata_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_qdata_full", object, quark, data, destroy);
            }
            mh$.invokeExact(object, quark, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_steal_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_steal_qdata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_steal_qdata(GObject *object, GQuark quark)
     * }
     */
    public static FunctionDescriptor g_object_steal_qdata$descriptor() {
        return g_object_steal_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_steal_qdata(GObject *object, GQuark quark)
     * }
     */
    public static MethodHandle g_object_steal_qdata$handle() {
        return g_object_steal_qdata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_object_steal_qdata(GObject *object, GQuark quark)
     * }
     */
    public static MemorySegment g_object_steal_qdata(MemorySegment object, int quark) {
        var mh$ = g_object_steal_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_steal_qdata", object, quark);
            }
            return (MemorySegment)mh$.invokeExact(object, quark);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_dup_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_dup_qdata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_dup_qdata(GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_object_dup_qdata$descriptor() {
        return g_object_dup_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_dup_qdata(GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_object_dup_qdata$handle() {
        return g_object_dup_qdata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_object_dup_qdata(GObject *object, GQuark quark, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_object_dup_qdata(MemorySegment object, int quark, MemorySegment dup_func, MemorySegment user_data) {
        var mh$ = g_object_dup_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_dup_qdata", object, quark, dup_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(object, quark, dup_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_replace_qdata {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_replace_qdata"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_object_replace_qdata(GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static FunctionDescriptor g_object_replace_qdata$descriptor() {
        return g_object_replace_qdata.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_object_replace_qdata(GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static MethodHandle g_object_replace_qdata$handle() {
        return g_object_replace_qdata.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_object_replace_qdata(GObject *object, GQuark quark, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static int g_object_replace_qdata(MemorySegment object, int quark, MemorySegment oldval, MemorySegment newval, MemorySegment destroy, MemorySegment old_destroy) {
        var mh$ = g_object_replace_qdata.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_replace_qdata", object, quark, oldval, newval, destroy, old_destroy);
            }
            return (int)mh$.invokeExact(object, quark, oldval, newval, destroy, old_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_get_data(GObject *object, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_object_get_data$descriptor() {
        return g_object_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_get_data(GObject *object, const gchar *key)
     * }
     */
    public static MethodHandle g_object_get_data$handle() {
        return g_object_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_object_get_data(GObject *object, const gchar *key)
     * }
     */
    public static MemorySegment g_object_get_data(MemorySegment object, MemorySegment key) {
        var mh$ = g_object_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_get_data", object, key);
            }
            return (MemorySegment)mh$.invokeExact(object, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_set_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_data(GObject *object, const gchar *key, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_set_data$descriptor() {
        return g_object_set_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_data(GObject *object, const gchar *key, gpointer data)
     * }
     */
    public static MethodHandle g_object_set_data$handle() {
        return g_object_set_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_set_data(GObject *object, const gchar *key, gpointer data)
     * }
     */
    public static void g_object_set_data(MemorySegment object, MemorySegment key, MemorySegment data) {
        var mh$ = g_object_set_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_data", object, key, data);
            }
            mh$.invokeExact(object, key, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_set_data_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_set_data_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_object_set_data_full$descriptor() {
        return g_object_set_data_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_object_set_data_full$handle() {
        return g_object_set_data_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_set_data_full(GObject *object, const gchar *key, gpointer data, GDestroyNotify destroy)
     * }
     */
    public static void g_object_set_data_full(MemorySegment object, MemorySegment key, MemorySegment data, MemorySegment destroy) {
        var mh$ = g_object_set_data_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_set_data_full", object, key, data, destroy);
            }
            mh$.invokeExact(object, key, data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_steal_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_steal_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_steal_data(GObject *object, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_object_steal_data$descriptor() {
        return g_object_steal_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_steal_data(GObject *object, const gchar *key)
     * }
     */
    public static MethodHandle g_object_steal_data$handle() {
        return g_object_steal_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_object_steal_data(GObject *object, const gchar *key)
     * }
     */
    public static MemorySegment g_object_steal_data(MemorySegment object, MemorySegment key) {
        var mh$ = g_object_steal_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_steal_data", object, key);
            }
            return (MemorySegment)mh$.invokeExact(object, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_dup_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_dup_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_object_dup_data(GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_object_dup_data$descriptor() {
        return g_object_dup_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_object_dup_data(GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_object_dup_data$handle() {
        return g_object_dup_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_object_dup_data(GObject *object, const gchar *key, GDuplicateFunc dup_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_object_dup_data(MemorySegment object, MemorySegment key, MemorySegment dup_func, MemorySegment user_data) {
        var mh$ = g_object_dup_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_dup_data", object, key, dup_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(object, key, dup_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_replace_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_replace_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_object_replace_data(GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static FunctionDescriptor g_object_replace_data$descriptor() {
        return g_object_replace_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_object_replace_data(GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static MethodHandle g_object_replace_data$handle() {
        return g_object_replace_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_object_replace_data(GObject *object, const gchar *key, gpointer oldval, gpointer newval, GDestroyNotify destroy, GDestroyNotify *old_destroy)
     * }
     */
    public static int g_object_replace_data(MemorySegment object, MemorySegment key, MemorySegment oldval, MemorySegment newval, MemorySegment destroy, MemorySegment old_destroy) {
        var mh$ = g_object_replace_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_replace_data", object, key, oldval, newval, destroy, old_destroy);
            }
            return (int)mh$.invokeExact(object, key, oldval, newval, destroy, old_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_watch_closure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_watch_closure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_watch_closure(GObject *object, GClosure *closure)
     * }
     */
    public static FunctionDescriptor g_object_watch_closure$descriptor() {
        return g_object_watch_closure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_watch_closure(GObject *object, GClosure *closure)
     * }
     */
    public static MethodHandle g_object_watch_closure$handle() {
        return g_object_watch_closure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_watch_closure(GObject *object, GClosure *closure)
     * }
     */
    public static void g_object_watch_closure(MemorySegment object, MemorySegment closure) {
        var mh$ = g_object_watch_closure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_watch_closure", object, closure);
            }
            mh$.invokeExact(object, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_new_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_new_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new_object(GCallback callback_func, GObject *object)
     * }
     */
    public static FunctionDescriptor g_cclosure_new_object$descriptor() {
        return g_cclosure_new_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new_object(GCallback callback_func, GObject *object)
     * }
     */
    public static MethodHandle g_cclosure_new_object$handle() {
        return g_cclosure_new_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new_object(GCallback callback_func, GObject *object)
     * }
     */
    public static MemorySegment g_cclosure_new_object(MemorySegment callback_func, MemorySegment object) {
        var mh$ = g_cclosure_new_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_new_object", callback_func, object);
            }
            return (MemorySegment)mh$.invokeExact(callback_func, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cclosure_new_object_swap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cclosure_new_object_swap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new_object_swap(GCallback callback_func, GObject *object)
     * }
     */
    public static FunctionDescriptor g_cclosure_new_object_swap$descriptor() {
        return g_cclosure_new_object_swap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new_object_swap(GCallback callback_func, GObject *object)
     * }
     */
    public static MethodHandle g_cclosure_new_object_swap$handle() {
        return g_cclosure_new_object_swap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GClosure *g_cclosure_new_object_swap(GCallback callback_func, GObject *object)
     * }
     */
    public static MemorySegment g_cclosure_new_object_swap(MemorySegment callback_func, MemorySegment object) {
        var mh$ = g_cclosure_new_object_swap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cclosure_new_object_swap", callback_func, object);
            }
            return (MemorySegment)mh$.invokeExact(callback_func, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_closure_new_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_closure_new_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GClosure *g_closure_new_object(guint sizeof_closure, GObject *object)
     * }
     */
    public static FunctionDescriptor g_closure_new_object$descriptor() {
        return g_closure_new_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GClosure *g_closure_new_object(guint sizeof_closure, GObject *object)
     * }
     */
    public static MethodHandle g_closure_new_object$handle() {
        return g_closure_new_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GClosure *g_closure_new_object(guint sizeof_closure, GObject *object)
     * }
     */
    public static MemorySegment g_closure_new_object(int sizeof_closure, MemorySegment object) {
        var mh$ = g_closure_new_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_closure_new_object", sizeof_closure, object);
            }
            return (MemorySegment)mh$.invokeExact(sizeof_closure, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_object(GValue *value, gpointer v_object)
     * }
     */
    public static FunctionDescriptor g_value_set_object$descriptor() {
        return g_value_set_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_object(GValue *value, gpointer v_object)
     * }
     */
    public static MethodHandle g_value_set_object$handle() {
        return g_value_set_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_object(GValue *value, gpointer v_object)
     * }
     */
    public static void g_value_set_object(MemorySegment value, MemorySegment v_object) {
        var mh$ = g_value_set_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_object", value, v_object);
            }
            mh$.invokeExact(value, v_object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_object(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_object$descriptor() {
        return g_value_get_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_object(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_object$handle() {
        return g_value_get_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_value_get_object(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_object(MemorySegment value) {
        var mh$ = g_value_get_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_object", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_dup_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_dup_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_dup_object(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_dup_object$descriptor() {
        return g_value_dup_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_dup_object(const GValue *value)
     * }
     */
    public static MethodHandle g_value_dup_object$handle() {
        return g_value_dup_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_value_dup_object(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_object(MemorySegment value) {
        var mh$ = g_value_dup_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_dup_object", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_connect_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_connect_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_object(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags)
     * }
     */
    public static FunctionDescriptor g_signal_connect_object$descriptor() {
        return g_signal_connect_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gulong g_signal_connect_object(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags)
     * }
     */
    public static MethodHandle g_signal_connect_object$handle() {
        return g_signal_connect_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gulong g_signal_connect_object(gpointer instance, const gchar *detailed_signal, GCallback c_handler, gpointer gobject, GConnectFlags connect_flags)
     * }
     */
    public static long g_signal_connect_object(MemorySegment instance, MemorySegment detailed_signal, MemorySegment c_handler, MemorySegment gobject, int connect_flags) {
        var mh$ = g_signal_connect_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_connect_object", instance, detailed_signal, c_handler, gobject, connect_flags);
            }
            return (long)mh$.invokeExact(instance, detailed_signal, c_handler, gobject, connect_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_force_floating {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_force_floating"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_force_floating(GObject *object)
     * }
     */
    public static FunctionDescriptor g_object_force_floating$descriptor() {
        return g_object_force_floating.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_force_floating(GObject *object)
     * }
     */
    public static MethodHandle g_object_force_floating$handle() {
        return g_object_force_floating.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_force_floating(GObject *object)
     * }
     */
    public static void g_object_force_floating(MemorySegment object) {
        var mh$ = g_object_force_floating.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_force_floating", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_run_dispose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_run_dispose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_object_run_dispose(GObject *object)
     * }
     */
    public static FunctionDescriptor g_object_run_dispose$descriptor() {
        return g_object_run_dispose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_object_run_dispose(GObject *object)
     * }
     */
    public static MethodHandle g_object_run_dispose$handle() {
        return g_object_run_dispose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_object_run_dispose(GObject *object)
     * }
     */
    public static void g_object_run_dispose(MemorySegment object) {
        var mh$ = g_object_run_dispose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_run_dispose", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_take_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_take_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_take_object(GValue *value, gpointer v_object)
     * }
     */
    public static FunctionDescriptor g_value_take_object$descriptor() {
        return g_value_take_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_take_object(GValue *value, gpointer v_object)
     * }
     */
    public static MethodHandle g_value_take_object$handle() {
        return g_value_take_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_take_object(GValue *value, gpointer v_object)
     * }
     */
    public static void g_value_take_object(MemorySegment value, MemorySegment v_object) {
        var mh$ = g_value_take_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_take_object", value, v_object);
            }
            mh$.invokeExact(value, v_object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_object_take_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_object_take_ownership"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_object_take_ownership(GValue *value, gpointer v_object)
     * }
     */
    public static FunctionDescriptor g_value_set_object_take_ownership$descriptor() {
        return g_value_set_object_take_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_object_take_ownership(GValue *value, gpointer v_object)
     * }
     */
    public static MethodHandle g_value_set_object_take_ownership$handle() {
        return g_value_set_object_take_ownership.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_object_take_ownership(GValue *value, gpointer v_object)
     * }
     */
    public static void g_value_set_object_take_ownership(MemorySegment value, MemorySegment v_object) {
        var mh$ = g_value_set_object_take_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_object_take_ownership", value, v_object);
            }
            mh$.invokeExact(value, v_object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_compat_control {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_compat_control"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_object_compat_control(gsize what, gpointer data)
     * }
     */
    public static FunctionDescriptor g_object_compat_control$descriptor() {
        return g_object_compat_control.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_object_compat_control(gsize what, gpointer data)
     * }
     */
    public static MethodHandle g_object_compat_control$handle() {
        return g_object_compat_control.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_object_compat_control(gsize what, gpointer data)
     * }
     */
    public static long g_object_compat_control(long what, MemorySegment data) {
        var mh$ = g_object_compat_control.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_compat_control", what, data);
            }
            return (long)mh$.invokeExact(what, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_clear_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_clear_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_clear_object(GObject **object_ptr)
     * }
     */
    public static FunctionDescriptor g_clear_object$descriptor() {
        return g_clear_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_clear_object(GObject **object_ptr)
     * }
     */
    public static MethodHandle g_clear_object$handle() {
        return g_clear_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_clear_object(GObject **object_ptr)
     * }
     */
    public static void g_clear_object(MemorySegment object_ptr) {
        var mh$ = g_clear_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_clear_object", object_ptr);
            }
            mh$.invokeExact(object_ptr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_weak_ref_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_weak_ref_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_weak_ref_init(GWeakRef *weak_ref, gpointer object)
     * }
     */
    public static FunctionDescriptor g_weak_ref_init$descriptor() {
        return g_weak_ref_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_weak_ref_init(GWeakRef *weak_ref, gpointer object)
     * }
     */
    public static MethodHandle g_weak_ref_init$handle() {
        return g_weak_ref_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_weak_ref_init(GWeakRef *weak_ref, gpointer object)
     * }
     */
    public static void g_weak_ref_init(MemorySegment weak_ref, MemorySegment object) {
        var mh$ = g_weak_ref_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_weak_ref_init", weak_ref, object);
            }
            mh$.invokeExact(weak_ref, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_weak_ref_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_weak_ref_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_weak_ref_clear(GWeakRef *weak_ref)
     * }
     */
    public static FunctionDescriptor g_weak_ref_clear$descriptor() {
        return g_weak_ref_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_weak_ref_clear(GWeakRef *weak_ref)
     * }
     */
    public static MethodHandle g_weak_ref_clear$handle() {
        return g_weak_ref_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_weak_ref_clear(GWeakRef *weak_ref)
     * }
     */
    public static void g_weak_ref_clear(MemorySegment weak_ref) {
        var mh$ = g_weak_ref_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_weak_ref_clear", weak_ref);
            }
            mh$.invokeExact(weak_ref);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_weak_ref_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_weak_ref_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_weak_ref_get(GWeakRef *weak_ref)
     * }
     */
    public static FunctionDescriptor g_weak_ref_get$descriptor() {
        return g_weak_ref_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_weak_ref_get(GWeakRef *weak_ref)
     * }
     */
    public static MethodHandle g_weak_ref_get$handle() {
        return g_weak_ref_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_weak_ref_get(GWeakRef *weak_ref)
     * }
     */
    public static MemorySegment g_weak_ref_get(MemorySegment weak_ref) {
        var mh$ = g_weak_ref_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_weak_ref_get", weak_ref);
            }
            return (MemorySegment)mh$.invokeExact(weak_ref);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_weak_ref_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_weak_ref_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_weak_ref_set(GWeakRef *weak_ref, gpointer object)
     * }
     */
    public static FunctionDescriptor g_weak_ref_set$descriptor() {
        return g_weak_ref_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_weak_ref_set(GWeakRef *weak_ref, gpointer object)
     * }
     */
    public static MethodHandle g_weak_ref_set$handle() {
        return g_weak_ref_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_weak_ref_set(GWeakRef *weak_ref, gpointer object)
     * }
     */
    public static void g_weak_ref_set(MemorySegment weak_ref, MemorySegment object) {
        var mh$ = g_weak_ref_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_weak_ref_set", weak_ref, object);
            }
            mh$.invokeExact(weak_ref, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_BINDING_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BINDING_DEFAULT = 0
     * }
     */
    public static int G_BINDING_DEFAULT() {
        return G_BINDING_DEFAULT;
    }
    private static final int G_BINDING_BIDIRECTIONAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BINDING_BIDIRECTIONAL = 1
     * }
     */
    public static int G_BINDING_BIDIRECTIONAL() {
        return G_BINDING_BIDIRECTIONAL;
    }
    private static final int G_BINDING_SYNC_CREATE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BINDING_SYNC_CREATE = 2
     * }
     */
    public static int G_BINDING_SYNC_CREATE() {
        return G_BINDING_SYNC_CREATE;
    }
    private static final int G_BINDING_INVERT_BOOLEAN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BINDING_INVERT_BOOLEAN = 4
     * }
     */
    public static int G_BINDING_INVERT_BOOLEAN() {
        return G_BINDING_INVERT_BOOLEAN;
    }

    private static class g_binding_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_binding_flags_get_type()
     * }
     */
    public static FunctionDescriptor g_binding_flags_get_type$descriptor() {
        return g_binding_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_binding_flags_get_type()
     * }
     */
    public static MethodHandle g_binding_flags_get_type$handle() {
        return g_binding_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_binding_flags_get_type()
     * }
     */
    public static long g_binding_flags_get_type() {
        var mh$ = g_binding_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_binding_get_type()
     * }
     */
    public static FunctionDescriptor g_binding_get_type$descriptor() {
        return g_binding_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_binding_get_type()
     * }
     */
    public static MethodHandle g_binding_get_type$handle() {
        return g_binding_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_binding_get_type()
     * }
     */
    public static long g_binding_get_type() {
        var mh$ = g_binding_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBindingFlags g_binding_get_flags(GBinding *binding)
     * }
     */
    public static FunctionDescriptor g_binding_get_flags$descriptor() {
        return g_binding_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBindingFlags g_binding_get_flags(GBinding *binding)
     * }
     */
    public static MethodHandle g_binding_get_flags$handle() {
        return g_binding_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBindingFlags g_binding_get_flags(GBinding *binding)
     * }
     */
    public static int g_binding_get_flags(MemorySegment binding) {
        var mh$ = g_binding_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_get_flags", binding);
            }
            return (int)mh$.invokeExact(binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_get_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_get_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_binding_get_source(GBinding *binding)
     * }
     */
    public static FunctionDescriptor g_binding_get_source$descriptor() {
        return g_binding_get_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_binding_get_source(GBinding *binding)
     * }
     */
    public static MethodHandle g_binding_get_source$handle() {
        return g_binding_get_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *g_binding_get_source(GBinding *binding)
     * }
     */
    public static MemorySegment g_binding_get_source(MemorySegment binding) {
        var mh$ = g_binding_get_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_get_source", binding);
            }
            return (MemorySegment)mh$.invokeExact(binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_dup_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_dup_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_binding_dup_source(GBinding *binding)
     * }
     */
    public static FunctionDescriptor g_binding_dup_source$descriptor() {
        return g_binding_dup_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_binding_dup_source(GBinding *binding)
     * }
     */
    public static MethodHandle g_binding_dup_source$handle() {
        return g_binding_dup_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *g_binding_dup_source(GBinding *binding)
     * }
     */
    public static MemorySegment g_binding_dup_source(MemorySegment binding) {
        var mh$ = g_binding_dup_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_dup_source", binding);
            }
            return (MemorySegment)mh$.invokeExact(binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_get_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_get_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_binding_get_target(GBinding *binding)
     * }
     */
    public static FunctionDescriptor g_binding_get_target$descriptor() {
        return g_binding_get_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_binding_get_target(GBinding *binding)
     * }
     */
    public static MethodHandle g_binding_get_target$handle() {
        return g_binding_get_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *g_binding_get_target(GBinding *binding)
     * }
     */
    public static MemorySegment g_binding_get_target(MemorySegment binding) {
        var mh$ = g_binding_get_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_get_target", binding);
            }
            return (MemorySegment)mh$.invokeExact(binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_dup_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_dup_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *g_binding_dup_target(GBinding *binding)
     * }
     */
    public static FunctionDescriptor g_binding_dup_target$descriptor() {
        return g_binding_dup_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *g_binding_dup_target(GBinding *binding)
     * }
     */
    public static MethodHandle g_binding_dup_target$handle() {
        return g_binding_dup_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *g_binding_dup_target(GBinding *binding)
     * }
     */
    public static MemorySegment g_binding_dup_target(MemorySegment binding) {
        var mh$ = g_binding_dup_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_dup_target", binding);
            }
            return (MemorySegment)mh$.invokeExact(binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_get_source_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_get_source_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_binding_get_source_property(GBinding *binding)
     * }
     */
    public static FunctionDescriptor g_binding_get_source_property$descriptor() {
        return g_binding_get_source_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_binding_get_source_property(GBinding *binding)
     * }
     */
    public static MethodHandle g_binding_get_source_property$handle() {
        return g_binding_get_source_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_binding_get_source_property(GBinding *binding)
     * }
     */
    public static MemorySegment g_binding_get_source_property(MemorySegment binding) {
        var mh$ = g_binding_get_source_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_get_source_property", binding);
            }
            return (MemorySegment)mh$.invokeExact(binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_get_target_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_get_target_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_binding_get_target_property(GBinding *binding)
     * }
     */
    public static FunctionDescriptor g_binding_get_target_property$descriptor() {
        return g_binding_get_target_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_binding_get_target_property(GBinding *binding)
     * }
     */
    public static MethodHandle g_binding_get_target_property$handle() {
        return g_binding_get_target_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_binding_get_target_property(GBinding *binding)
     * }
     */
    public static MemorySegment g_binding_get_target_property(MemorySegment binding) {
        var mh$ = g_binding_get_target_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_get_target_property", binding);
            }
            return (MemorySegment)mh$.invokeExact(binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_unbind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_unbind"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_binding_unbind(GBinding *binding)
     * }
     */
    public static FunctionDescriptor g_binding_unbind$descriptor() {
        return g_binding_unbind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_binding_unbind(GBinding *binding)
     * }
     */
    public static MethodHandle g_binding_unbind$handle() {
        return g_binding_unbind.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_binding_unbind(GBinding *binding)
     * }
     */
    public static void g_binding_unbind(MemorySegment binding) {
        var mh$ = g_binding_unbind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_unbind", binding);
            }
            mh$.invokeExact(binding);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_bind_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_bind_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags)
     * }
     */
    public static FunctionDescriptor g_object_bind_property$descriptor() {
        return g_object_bind_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags)
     * }
     */
    public static MethodHandle g_object_bind_property$handle() {
        return g_object_bind_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags)
     * }
     */
    public static MemorySegment g_object_bind_property(MemorySegment source, MemorySegment source_property, MemorySegment target, MemorySegment target_property, int flags) {
        var mh$ = g_object_bind_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_bind_property", source, source_property, target, target_property, flags);
            }
            return (MemorySegment)mh$.invokeExact(source, source_property, target, target_property, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_bind_property_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_bind_property_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_full(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor g_object_bind_property_full$descriptor() {
        return g_object_bind_property_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_full(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle g_object_bind_property_full$handle() {
        return g_object_bind_property_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_full(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static MemorySegment g_object_bind_property_full(MemorySegment source, MemorySegment source_property, MemorySegment target, MemorySegment target_property, int flags, MemorySegment transform_to, MemorySegment transform_from, MemorySegment user_data, MemorySegment notify) {
        var mh$ = g_object_bind_property_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_bind_property_full", source, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
            }
            return (MemorySegment)mh$.invokeExact(source, source_property, target, target_property, flags, transform_to, transform_from, user_data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_object_bind_property_with_closures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_object_bind_property_with_closures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_with_closures(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from)
     * }
     */
    public static FunctionDescriptor g_object_bind_property_with_closures$descriptor() {
        return g_object_bind_property_with_closures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_with_closures(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from)
     * }
     */
    public static MethodHandle g_object_bind_property_with_closures$handle() {
        return g_object_bind_property_with_closures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBinding *g_object_bind_property_with_closures(gpointer source, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from)
     * }
     */
    public static MemorySegment g_object_bind_property_with_closures(MemorySegment source, MemorySegment source_property, MemorySegment target, MemorySegment target_property, int flags, MemorySegment transform_to, MemorySegment transform_from) {
        var mh$ = g_object_bind_property_with_closures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_object_bind_property_with_closures", source, source_property, target, target_property, flags, transform_to, transform_from);
            }
            return (MemorySegment)mh$.invokeExact(source, source_property, target, target_property, flags, transform_to, transform_from);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_binding_group_get_type()
     * }
     */
    public static FunctionDescriptor g_binding_group_get_type$descriptor() {
        return g_binding_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_binding_group_get_type()
     * }
     */
    public static MethodHandle g_binding_group_get_type$handle() {
        return g_binding_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_binding_group_get_type()
     * }
     */
    public static long g_binding_group_get_type() {
        var mh$ = g_binding_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_group_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_group_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBindingGroup *g_binding_group_new()
     * }
     */
    public static FunctionDescriptor g_binding_group_new$descriptor() {
        return g_binding_group_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBindingGroup *g_binding_group_new()
     * }
     */
    public static MethodHandle g_binding_group_new$handle() {
        return g_binding_group_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBindingGroup *g_binding_group_new()
     * }
     */
    public static MemorySegment g_binding_group_new() {
        var mh$ = g_binding_group_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_group_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_group_dup_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_group_dup_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_binding_group_dup_source(GBindingGroup *self)
     * }
     */
    public static FunctionDescriptor g_binding_group_dup_source$descriptor() {
        return g_binding_group_dup_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_binding_group_dup_source(GBindingGroup *self)
     * }
     */
    public static MethodHandle g_binding_group_dup_source$handle() {
        return g_binding_group_dup_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_binding_group_dup_source(GBindingGroup *self)
     * }
     */
    public static MemorySegment g_binding_group_dup_source(MemorySegment self) {
        var mh$ = g_binding_group_dup_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_group_dup_source", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_group_set_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_group_set_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_binding_group_set_source(GBindingGroup *self, gpointer source)
     * }
     */
    public static FunctionDescriptor g_binding_group_set_source$descriptor() {
        return g_binding_group_set_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_binding_group_set_source(GBindingGroup *self, gpointer source)
     * }
     */
    public static MethodHandle g_binding_group_set_source$handle() {
        return g_binding_group_set_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_binding_group_set_source(GBindingGroup *self, gpointer source)
     * }
     */
    public static void g_binding_group_set_source(MemorySegment self, MemorySegment source) {
        var mh$ = g_binding_group_set_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_group_set_source", self, source);
            }
            mh$.invokeExact(self, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_group_bind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_group_bind"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_binding_group_bind(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags)
     * }
     */
    public static FunctionDescriptor g_binding_group_bind$descriptor() {
        return g_binding_group_bind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_binding_group_bind(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags)
     * }
     */
    public static MethodHandle g_binding_group_bind$handle() {
        return g_binding_group_bind.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_binding_group_bind(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags)
     * }
     */
    public static void g_binding_group_bind(MemorySegment self, MemorySegment source_property, MemorySegment target, MemorySegment target_property, int flags) {
        var mh$ = g_binding_group_bind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_group_bind", self, source_property, target, target_property, flags);
            }
            mh$.invokeExact(self, source_property, target, target_property, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_group_bind_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_group_bind_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_binding_group_bind_full(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify user_data_destroy)
     * }
     */
    public static FunctionDescriptor g_binding_group_bind_full$descriptor() {
        return g_binding_group_bind_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_binding_group_bind_full(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify user_data_destroy)
     * }
     */
    public static MethodHandle g_binding_group_bind_full$handle() {
        return g_binding_group_bind_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_binding_group_bind_full(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GBindingTransformFunc transform_to, GBindingTransformFunc transform_from, gpointer user_data, GDestroyNotify user_data_destroy)
     * }
     */
    public static void g_binding_group_bind_full(MemorySegment self, MemorySegment source_property, MemorySegment target, MemorySegment target_property, int flags, MemorySegment transform_to, MemorySegment transform_from, MemorySegment user_data, MemorySegment user_data_destroy) {
        var mh$ = g_binding_group_bind_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_group_bind_full", self, source_property, target, target_property, flags, transform_to, transform_from, user_data, user_data_destroy);
            }
            mh$.invokeExact(self, source_property, target, target_property, flags, transform_to, transform_from, user_data, user_data_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_binding_group_bind_with_closures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_binding_group_bind_with_closures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_binding_group_bind_with_closures(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from)
     * }
     */
    public static FunctionDescriptor g_binding_group_bind_with_closures$descriptor() {
        return g_binding_group_bind_with_closures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_binding_group_bind_with_closures(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from)
     * }
     */
    public static MethodHandle g_binding_group_bind_with_closures$handle() {
        return g_binding_group_bind_with_closures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_binding_group_bind_with_closures(GBindingGroup *self, const gchar *source_property, gpointer target, const gchar *target_property, GBindingFlags flags, GClosure *transform_to, GClosure *transform_from)
     * }
     */
    public static void g_binding_group_bind_with_closures(MemorySegment self, MemorySegment source_property, MemorySegment target, MemorySegment target_property, int flags, MemorySegment transform_to, MemorySegment transform_from) {
        var mh$ = g_binding_group_bind_with_closures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_binding_group_bind_with_closures", self, source_property, target, target_property, flags, transform_to, transform_from);
            }
            mh$.invokeExact(self, source_property, target, target_property, flags, transform_to, transform_from);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_enum_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_enum_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GEnumValue *g_enum_get_value(GEnumClass *enum_class, gint value)
     * }
     */
    public static FunctionDescriptor g_enum_get_value$descriptor() {
        return g_enum_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GEnumValue *g_enum_get_value(GEnumClass *enum_class, gint value)
     * }
     */
    public static MethodHandle g_enum_get_value$handle() {
        return g_enum_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GEnumValue *g_enum_get_value(GEnumClass *enum_class, gint value)
     * }
     */
    public static MemorySegment g_enum_get_value(MemorySegment enum_class, int value) {
        var mh$ = g_enum_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_enum_get_value", enum_class, value);
            }
            return (MemorySegment)mh$.invokeExact(enum_class, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_enum_get_value_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_enum_get_value_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GEnumValue *g_enum_get_value_by_name(GEnumClass *enum_class, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_enum_get_value_by_name$descriptor() {
        return g_enum_get_value_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GEnumValue *g_enum_get_value_by_name(GEnumClass *enum_class, const gchar *name)
     * }
     */
    public static MethodHandle g_enum_get_value_by_name$handle() {
        return g_enum_get_value_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GEnumValue *g_enum_get_value_by_name(GEnumClass *enum_class, const gchar *name)
     * }
     */
    public static MemorySegment g_enum_get_value_by_name(MemorySegment enum_class, MemorySegment name) {
        var mh$ = g_enum_get_value_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_enum_get_value_by_name", enum_class, name);
            }
            return (MemorySegment)mh$.invokeExact(enum_class, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_enum_get_value_by_nick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_enum_get_value_by_nick"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GEnumValue *g_enum_get_value_by_nick(GEnumClass *enum_class, const gchar *nick)
     * }
     */
    public static FunctionDescriptor g_enum_get_value_by_nick$descriptor() {
        return g_enum_get_value_by_nick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GEnumValue *g_enum_get_value_by_nick(GEnumClass *enum_class, const gchar *nick)
     * }
     */
    public static MethodHandle g_enum_get_value_by_nick$handle() {
        return g_enum_get_value_by_nick.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GEnumValue *g_enum_get_value_by_nick(GEnumClass *enum_class, const gchar *nick)
     * }
     */
    public static MemorySegment g_enum_get_value_by_nick(MemorySegment enum_class, MemorySegment nick) {
        var mh$ = g_enum_get_value_by_nick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_enum_get_value_by_nick", enum_class, nick);
            }
            return (MemorySegment)mh$.invokeExact(enum_class, nick);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_flags_get_first_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_flags_get_first_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFlagsValue *g_flags_get_first_value(GFlagsClass *flags_class, guint value)
     * }
     */
    public static FunctionDescriptor g_flags_get_first_value$descriptor() {
        return g_flags_get_first_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFlagsValue *g_flags_get_first_value(GFlagsClass *flags_class, guint value)
     * }
     */
    public static MethodHandle g_flags_get_first_value$handle() {
        return g_flags_get_first_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFlagsValue *g_flags_get_first_value(GFlagsClass *flags_class, guint value)
     * }
     */
    public static MemorySegment g_flags_get_first_value(MemorySegment flags_class, int value) {
        var mh$ = g_flags_get_first_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_flags_get_first_value", flags_class, value);
            }
            return (MemorySegment)mh$.invokeExact(flags_class, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_flags_get_value_by_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_flags_get_value_by_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFlagsValue *g_flags_get_value_by_name(GFlagsClass *flags_class, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_flags_get_value_by_name$descriptor() {
        return g_flags_get_value_by_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFlagsValue *g_flags_get_value_by_name(GFlagsClass *flags_class, const gchar *name)
     * }
     */
    public static MethodHandle g_flags_get_value_by_name$handle() {
        return g_flags_get_value_by_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFlagsValue *g_flags_get_value_by_name(GFlagsClass *flags_class, const gchar *name)
     * }
     */
    public static MemorySegment g_flags_get_value_by_name(MemorySegment flags_class, MemorySegment name) {
        var mh$ = g_flags_get_value_by_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_flags_get_value_by_name", flags_class, name);
            }
            return (MemorySegment)mh$.invokeExact(flags_class, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_flags_get_value_by_nick {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_flags_get_value_by_nick"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GFlagsValue *g_flags_get_value_by_nick(GFlagsClass *flags_class, const gchar *nick)
     * }
     */
    public static FunctionDescriptor g_flags_get_value_by_nick$descriptor() {
        return g_flags_get_value_by_nick.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GFlagsValue *g_flags_get_value_by_nick(GFlagsClass *flags_class, const gchar *nick)
     * }
     */
    public static MethodHandle g_flags_get_value_by_nick$handle() {
        return g_flags_get_value_by_nick.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GFlagsValue *g_flags_get_value_by_nick(GFlagsClass *flags_class, const gchar *nick)
     * }
     */
    public static MemorySegment g_flags_get_value_by_nick(MemorySegment flags_class, MemorySegment nick) {
        var mh$ = g_flags_get_value_by_nick.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_flags_get_value_by_nick", flags_class, nick);
            }
            return (MemorySegment)mh$.invokeExact(flags_class, nick);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_enum_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_enum_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_enum_to_string(GType g_enum_type, gint value)
     * }
     */
    public static FunctionDescriptor g_enum_to_string$descriptor() {
        return g_enum_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_enum_to_string(GType g_enum_type, gint value)
     * }
     */
    public static MethodHandle g_enum_to_string$handle() {
        return g_enum_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_enum_to_string(GType g_enum_type, gint value)
     * }
     */
    public static MemorySegment g_enum_to_string(long g_enum_type, int value) {
        var mh$ = g_enum_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_enum_to_string", g_enum_type, value);
            }
            return (MemorySegment)mh$.invokeExact(g_enum_type, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_flags_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_flags_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_flags_to_string(GType flags_type, guint value)
     * }
     */
    public static FunctionDescriptor g_flags_to_string$descriptor() {
        return g_flags_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_flags_to_string(GType flags_type, guint value)
     * }
     */
    public static MethodHandle g_flags_to_string$handle() {
        return g_flags_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_flags_to_string(GType flags_type, guint value)
     * }
     */
    public static MemorySegment g_flags_to_string(long flags_type, int value) {
        var mh$ = g_flags_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_flags_to_string", flags_type, value);
            }
            return (MemorySegment)mh$.invokeExact(flags_type, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_enum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_enum(GValue *value, gint v_enum)
     * }
     */
    public static FunctionDescriptor g_value_set_enum$descriptor() {
        return g_value_set_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_enum(GValue *value, gint v_enum)
     * }
     */
    public static MethodHandle g_value_set_enum$handle() {
        return g_value_set_enum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_enum(GValue *value, gint v_enum)
     * }
     */
    public static void g_value_set_enum(MemorySegment value, int v_enum) {
        var mh$ = g_value_set_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_enum", value, v_enum);
            }
            mh$.invokeExact(value, v_enum);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_enum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_value_get_enum(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_enum$descriptor() {
        return g_value_get_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_value_get_enum(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_enum$handle() {
        return g_value_get_enum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_value_get_enum(const GValue *value)
     * }
     */
    public static int g_value_get_enum(MemorySegment value) {
        var mh$ = g_value_get_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_enum", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_flags(GValue *value, guint v_flags)
     * }
     */
    public static FunctionDescriptor g_value_set_flags$descriptor() {
        return g_value_set_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_flags(GValue *value, guint v_flags)
     * }
     */
    public static MethodHandle g_value_set_flags$handle() {
        return g_value_set_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_flags(GValue *value, guint v_flags)
     * }
     */
    public static void g_value_set_flags(MemorySegment value, int v_flags) {
        var mh$ = g_value_set_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_flags", value, v_flags);
            }
            mh$.invokeExact(value, v_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_value_get_flags(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_flags$descriptor() {
        return g_value_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_value_get_flags(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_flags$handle() {
        return g_value_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_value_get_flags(const GValue *value)
     * }
     */
    public static int g_value_get_flags(MemorySegment value) {
        var mh$ = g_value_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_flags", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_enum_register_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_enum_register_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_enum_register_static(const gchar *name, const GEnumValue *const_static_values)
     * }
     */
    public static FunctionDescriptor g_enum_register_static$descriptor() {
        return g_enum_register_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_enum_register_static(const gchar *name, const GEnumValue *const_static_values)
     * }
     */
    public static MethodHandle g_enum_register_static$handle() {
        return g_enum_register_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_enum_register_static(const gchar *name, const GEnumValue *const_static_values)
     * }
     */
    public static long g_enum_register_static(MemorySegment name, MemorySegment const_static_values) {
        var mh$ = g_enum_register_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_enum_register_static", name, const_static_values);
            }
            return (long)mh$.invokeExact(name, const_static_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_flags_register_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_flags_register_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_flags_register_static(const gchar *name, const GFlagsValue *const_static_values)
     * }
     */
    public static FunctionDescriptor g_flags_register_static$descriptor() {
        return g_flags_register_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_flags_register_static(const gchar *name, const GFlagsValue *const_static_values)
     * }
     */
    public static MethodHandle g_flags_register_static$handle() {
        return g_flags_register_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_flags_register_static(const gchar *name, const GFlagsValue *const_static_values)
     * }
     */
    public static long g_flags_register_static(MemorySegment name, MemorySegment const_static_values) {
        var mh$ = g_flags_register_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_flags_register_static", name, const_static_values);
            }
            return (long)mh$.invokeExact(name, const_static_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_enum_complete_type_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_enum_complete_type_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_enum_complete_type_info(GType g_enum_type, GTypeInfo *info, const GEnumValue *const_values)
     * }
     */
    public static FunctionDescriptor g_enum_complete_type_info$descriptor() {
        return g_enum_complete_type_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_enum_complete_type_info(GType g_enum_type, GTypeInfo *info, const GEnumValue *const_values)
     * }
     */
    public static MethodHandle g_enum_complete_type_info$handle() {
        return g_enum_complete_type_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_enum_complete_type_info(GType g_enum_type, GTypeInfo *info, const GEnumValue *const_values)
     * }
     */
    public static void g_enum_complete_type_info(long g_enum_type, MemorySegment info, MemorySegment const_values) {
        var mh$ = g_enum_complete_type_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_enum_complete_type_info", g_enum_type, info, const_values);
            }
            mh$.invokeExact(g_enum_type, info, const_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_flags_complete_type_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_flags_complete_type_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_flags_complete_type_info(GType g_flags_type, GTypeInfo *info, const GFlagsValue *const_values)
     * }
     */
    public static FunctionDescriptor g_flags_complete_type_info$descriptor() {
        return g_flags_complete_type_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_flags_complete_type_info(GType g_flags_type, GTypeInfo *info, const GFlagsValue *const_values)
     * }
     */
    public static MethodHandle g_flags_complete_type_info$handle() {
        return g_flags_complete_type_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_flags_complete_type_info(GType g_flags_type, GTypeInfo *info, const GFlagsValue *const_values)
     * }
     */
    public static void g_flags_complete_type_info(long g_flags_type, MemorySegment info, MemorySegment const_values) {
        var mh$ = g_flags_complete_type_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_flags_complete_type_info", g_flags_type, info, const_values);
            }
            mh$.invokeExact(g_flags_type, info, const_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unicode_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unicode_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_unicode_type_get_type()
     * }
     */
    public static FunctionDescriptor g_unicode_type_get_type$descriptor() {
        return g_unicode_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_unicode_type_get_type()
     * }
     */
    public static MethodHandle g_unicode_type_get_type$handle() {
        return g_unicode_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_unicode_type_get_type()
     * }
     */
    public static long g_unicode_type_get_type() {
        var mh$ = g_unicode_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unicode_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unicode_break_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unicode_break_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_unicode_break_type_get_type()
     * }
     */
    public static FunctionDescriptor g_unicode_break_type_get_type$descriptor() {
        return g_unicode_break_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_unicode_break_type_get_type()
     * }
     */
    public static MethodHandle g_unicode_break_type_get_type$handle() {
        return g_unicode_break_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_unicode_break_type_get_type()
     * }
     */
    public static long g_unicode_break_type_get_type() {
        var mh$ = g_unicode_break_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unicode_break_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_unicode_script_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_unicode_script_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_unicode_script_get_type()
     * }
     */
    public static FunctionDescriptor g_unicode_script_get_type$descriptor() {
        return g_unicode_script_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_unicode_script_get_type()
     * }
     */
    public static MethodHandle g_unicode_script_get_type$handle() {
        return g_unicode_script_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_unicode_script_get_type()
     * }
     */
    public static long g_unicode_script_get_type() {
        var mh$ = g_unicode_script_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_unicode_script_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_normalize_mode_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_normalize_mode_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_normalize_mode_get_type()
     * }
     */
    public static FunctionDescriptor g_normalize_mode_get_type$descriptor() {
        return g_normalize_mode_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_normalize_mode_get_type()
     * }
     */
    public static MethodHandle g_normalize_mode_get_type$handle() {
        return g_normalize_mode_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_normalize_mode_get_type()
     * }
     */
    public static long g_normalize_mode_get_type() {
        var mh$ = g_normalize_mode_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_normalize_mode_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_char(const gchar *name, const gchar *nick, const gchar *blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_char$descriptor() {
        return g_param_spec_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_char(const gchar *name, const gchar *nick, const gchar *blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_char$handle() {
        return g_param_spec_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_char(const gchar *name, const gchar *nick, const gchar *blurb, gint8 minimum, gint8 maximum, gint8 default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_char(MemorySegment name, MemorySegment nick, MemorySegment blurb, byte minimum, byte maximum, byte default_value, int flags) {
        var mh$ = g_param_spec_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_char", name, nick, blurb, minimum, maximum, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, minimum, maximum, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_uchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_CHAR,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_uchar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_uchar(const gchar *name, const gchar *nick, const gchar *blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_uchar$descriptor() {
        return g_param_spec_uchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_uchar(const gchar *name, const gchar *nick, const gchar *blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_uchar$handle() {
        return g_param_spec_uchar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_uchar(const gchar *name, const gchar *nick, const gchar *blurb, guint8 minimum, guint8 maximum, guint8 default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_uchar(MemorySegment name, MemorySegment nick, MemorySegment blurb, byte minimum, byte maximum, byte default_value, int flags) {
        var mh$ = g_param_spec_uchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_uchar", name, nick, blurb, minimum, maximum, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, minimum, maximum, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_boolean(const gchar *name, const gchar *nick, const gchar *blurb, gboolean default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_boolean$descriptor() {
        return g_param_spec_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_boolean(const gchar *name, const gchar *nick, const gchar *blurb, gboolean default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_boolean$handle() {
        return g_param_spec_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_boolean(const gchar *name, const gchar *nick, const gchar *blurb, gboolean default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_boolean(MemorySegment name, MemorySegment nick, MemorySegment blurb, int default_value, int flags) {
        var mh$ = g_param_spec_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_boolean", name, nick, blurb, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_int(const gchar *name, const gchar *nick, const gchar *blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_int$descriptor() {
        return g_param_spec_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_int(const gchar *name, const gchar *nick, const gchar *blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_int$handle() {
        return g_param_spec_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_int(const gchar *name, const gchar *nick, const gchar *blurb, gint minimum, gint maximum, gint default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_int(MemorySegment name, MemorySegment nick, MemorySegment blurb, int minimum, int maximum, int default_value, int flags) {
        var mh$ = g_param_spec_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_int", name, nick, blurb, minimum, maximum, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, minimum, maximum, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_uint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_uint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_uint(const gchar *name, const gchar *nick, const gchar *blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_uint$descriptor() {
        return g_param_spec_uint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_uint(const gchar *name, const gchar *nick, const gchar *blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_uint$handle() {
        return g_param_spec_uint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_uint(const gchar *name, const gchar *nick, const gchar *blurb, guint minimum, guint maximum, guint default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_uint(MemorySegment name, MemorySegment nick, MemorySegment blurb, int minimum, int maximum, int default_value, int flags) {
        var mh$ = g_param_spec_uint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_uint", name, nick, blurb, minimum, maximum, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, minimum, maximum, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_long {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_long"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_long(const gchar *name, const gchar *nick, const gchar *blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_long$descriptor() {
        return g_param_spec_long.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_long(const gchar *name, const gchar *nick, const gchar *blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_long$handle() {
        return g_param_spec_long.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_long(const gchar *name, const gchar *nick, const gchar *blurb, glong minimum, glong maximum, glong default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_long(MemorySegment name, MemorySegment nick, MemorySegment blurb, long minimum, long maximum, long default_value, int flags) {
        var mh$ = g_param_spec_long.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_long", name, nick, blurb, minimum, maximum, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, minimum, maximum, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_ulong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_ulong"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_ulong(const gchar *name, const gchar *nick, const gchar *blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_ulong$descriptor() {
        return g_param_spec_ulong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_ulong(const gchar *name, const gchar *nick, const gchar *blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_ulong$handle() {
        return g_param_spec_ulong.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_ulong(const gchar *name, const gchar *nick, const gchar *blurb, gulong minimum, gulong maximum, gulong default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_ulong(MemorySegment name, MemorySegment nick, MemorySegment blurb, long minimum, long maximum, long default_value, int flags) {
        var mh$ = g_param_spec_ulong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_ulong", name, nick, blurb, minimum, maximum, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, minimum, maximum, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_int64(const gchar *name, const gchar *nick, const gchar *blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_int64$descriptor() {
        return g_param_spec_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_int64(const gchar *name, const gchar *nick, const gchar *blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_int64$handle() {
        return g_param_spec_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_int64(const gchar *name, const gchar *nick, const gchar *blurb, gint64 minimum, gint64 maximum, gint64 default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_int64(MemorySegment name, MemorySegment nick, MemorySegment blurb, long minimum, long maximum, long default_value, int flags) {
        var mh$ = g_param_spec_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_int64", name, nick, blurb, minimum, maximum, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, minimum, maximum, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_uint64(const gchar *name, const gchar *nick, const gchar *blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_uint64$descriptor() {
        return g_param_spec_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_uint64(const gchar *name, const gchar *nick, const gchar *blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_uint64$handle() {
        return g_param_spec_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_uint64(const gchar *name, const gchar *nick, const gchar *blurb, guint64 minimum, guint64 maximum, guint64 default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_uint64(MemorySegment name, MemorySegment nick, MemorySegment blurb, long minimum, long maximum, long default_value, int flags) {
        var mh$ = g_param_spec_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_uint64", name, nick, blurb, minimum, maximum, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, minimum, maximum, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_unichar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_unichar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_unichar(const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_unichar$descriptor() {
        return g_param_spec_unichar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_unichar(const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_unichar$handle() {
        return g_param_spec_unichar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_unichar(const gchar *name, const gchar *nick, const gchar *blurb, gunichar default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_unichar(MemorySegment name, MemorySegment nick, MemorySegment blurb, int default_value, int flags) {
        var mh$ = g_param_spec_unichar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_unichar", name, nick, blurb, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_enum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_enum(const gchar *name, const gchar *nick, const gchar *blurb, GType enum_type, gint default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_enum$descriptor() {
        return g_param_spec_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_enum(const gchar *name, const gchar *nick, const gchar *blurb, GType enum_type, gint default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_enum$handle() {
        return g_param_spec_enum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_enum(const gchar *name, const gchar *nick, const gchar *blurb, GType enum_type, gint default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_enum(MemorySegment name, MemorySegment nick, MemorySegment blurb, long enum_type, int default_value, int flags) {
        var mh$ = g_param_spec_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_enum", name, nick, blurb, enum_type, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, enum_type, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_flags(const gchar *name, const gchar *nick, const gchar *blurb, GType flags_type, guint default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_flags$descriptor() {
        return g_param_spec_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_flags(const gchar *name, const gchar *nick, const gchar *blurb, GType flags_type, guint default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_flags$handle() {
        return g_param_spec_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_flags(const gchar *name, const gchar *nick, const gchar *blurb, GType flags_type, guint default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_flags(MemorySegment name, MemorySegment nick, MemorySegment blurb, long flags_type, int default_value, int flags) {
        var mh$ = g_param_spec_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_flags", name, nick, blurb, flags_type, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, flags_type, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_float"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_float(const gchar *name, const gchar *nick, const gchar *blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_float$descriptor() {
        return g_param_spec_float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_float(const gchar *name, const gchar *nick, const gchar *blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_float$handle() {
        return g_param_spec_float.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_float(const gchar *name, const gchar *nick, const gchar *blurb, gfloat minimum, gfloat maximum, gfloat default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_float(MemorySegment name, MemorySegment nick, MemorySegment blurb, float minimum, float maximum, float default_value, int flags) {
        var mh$ = g_param_spec_float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_float", name, nick, blurb, minimum, maximum, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, minimum, maximum, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_double(const gchar *name, const gchar *nick, const gchar *blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_double$descriptor() {
        return g_param_spec_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_double(const gchar *name, const gchar *nick, const gchar *blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_double$handle() {
        return g_param_spec_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_double(const gchar *name, const gchar *nick, const gchar *blurb, gdouble minimum, gdouble maximum, gdouble default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_double(MemorySegment name, MemorySegment nick, MemorySegment blurb, double minimum, double maximum, double default_value, int flags) {
        var mh$ = g_param_spec_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_double", name, nick, blurb, minimum, maximum, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, minimum, maximum, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_string(const gchar *name, const gchar *nick, const gchar *blurb, const gchar *default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_string$descriptor() {
        return g_param_spec_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_string(const gchar *name, const gchar *nick, const gchar *blurb, const gchar *default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_string$handle() {
        return g_param_spec_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_string(const gchar *name, const gchar *nick, const gchar *blurb, const gchar *default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_string(MemorySegment name, MemorySegment nick, MemorySegment blurb, MemorySegment default_value, int flags) {
        var mh$ = g_param_spec_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_string", name, nick, blurb, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_param {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_param"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_param(const gchar *name, const gchar *nick, const gchar *blurb, GType param_type, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_param$descriptor() {
        return g_param_spec_param.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_param(const gchar *name, const gchar *nick, const gchar *blurb, GType param_type, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_param$handle() {
        return g_param_spec_param.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_param(const gchar *name, const gchar *nick, const gchar *blurb, GType param_type, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_param(MemorySegment name, MemorySegment nick, MemorySegment blurb, long param_type, int flags) {
        var mh$ = g_param_spec_param.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_param", name, nick, blurb, param_type, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, param_type, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_boxed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_boxed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_boxed(const gchar *name, const gchar *nick, const gchar *blurb, GType boxed_type, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_boxed$descriptor() {
        return g_param_spec_boxed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_boxed(const gchar *name, const gchar *nick, const gchar *blurb, GType boxed_type, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_boxed$handle() {
        return g_param_spec_boxed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_boxed(const gchar *name, const gchar *nick, const gchar *blurb, GType boxed_type, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_boxed(MemorySegment name, MemorySegment nick, MemorySegment blurb, long boxed_type, int flags) {
        var mh$ = g_param_spec_boxed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_boxed", name, nick, blurb, boxed_type, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, boxed_type, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_pointer(const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_pointer$descriptor() {
        return g_param_spec_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_pointer(const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_pointer$handle() {
        return g_param_spec_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_pointer(const gchar *name, const gchar *nick, const gchar *blurb, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_pointer(MemorySegment name, MemorySegment nick, MemorySegment blurb, int flags) {
        var mh$ = g_param_spec_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_pointer", name, nick, blurb, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_value_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_value_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_value_array(const gchar *name, const gchar *nick, const gchar *blurb, GParamSpec *element_spec, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_value_array$descriptor() {
        return g_param_spec_value_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_value_array(const gchar *name, const gchar *nick, const gchar *blurb, GParamSpec *element_spec, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_value_array$handle() {
        return g_param_spec_value_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_value_array(const gchar *name, const gchar *nick, const gchar *blurb, GParamSpec *element_spec, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_value_array(MemorySegment name, MemorySegment nick, MemorySegment blurb, MemorySegment element_spec, int flags) {
        var mh$ = g_param_spec_value_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_value_array", name, nick, blurb, element_spec, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, element_spec, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_object(const gchar *name, const gchar *nick, const gchar *blurb, GType object_type, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_object$descriptor() {
        return g_param_spec_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_object(const gchar *name, const gchar *nick, const gchar *blurb, GType object_type, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_object$handle() {
        return g_param_spec_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_object(const gchar *name, const gchar *nick, const gchar *blurb, GType object_type, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_object(MemorySegment name, MemorySegment nick, MemorySegment blurb, long object_type, int flags) {
        var mh$ = g_param_spec_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_object", name, nick, blurb, object_type, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, object_type, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_override {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_override"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_override(const gchar *name, GParamSpec *overridden)
     * }
     */
    public static FunctionDescriptor g_param_spec_override$descriptor() {
        return g_param_spec_override.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_override(const gchar *name, GParamSpec *overridden)
     * }
     */
    public static MethodHandle g_param_spec_override$handle() {
        return g_param_spec_override.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_override(const gchar *name, GParamSpec *overridden)
     * }
     */
    public static MemorySegment g_param_spec_override(MemorySegment name, MemorySegment overridden) {
        var mh$ = g_param_spec_override.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_override", name, overridden);
            }
            return (MemorySegment)mh$.invokeExact(name, overridden);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_gtype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_gtype"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_gtype(const gchar *name, const gchar *nick, const gchar *blurb, GType is_a_type, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_gtype$descriptor() {
        return g_param_spec_gtype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_gtype(const gchar *name, const gchar *nick, const gchar *blurb, GType is_a_type, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_gtype$handle() {
        return g_param_spec_gtype.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_gtype(const gchar *name, const gchar *nick, const gchar *blurb, GType is_a_type, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_gtype(MemorySegment name, MemorySegment nick, MemorySegment blurb, long is_a_type, int flags) {
        var mh$ = g_param_spec_gtype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_gtype", name, nick, blurb, is_a_type, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, is_a_type, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_param_spec_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_variant(const gchar *name, const gchar *nick, const gchar *blurb, const GVariantType *type, GVariant *default_value, GParamFlags flags)
     * }
     */
    public static FunctionDescriptor g_param_spec_variant$descriptor() {
        return g_param_spec_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_variant(const gchar *name, const gchar *nick, const gchar *blurb, const GVariantType *type, GVariant *default_value, GParamFlags flags)
     * }
     */
    public static MethodHandle g_param_spec_variant$handle() {
        return g_param_spec_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *g_param_spec_variant(const gchar *name, const gchar *nick, const gchar *blurb, const GVariantType *type, GVariant *default_value, GParamFlags flags)
     * }
     */
    public static MemorySegment g_param_spec_variant(MemorySegment name, MemorySegment nick, MemorySegment blurb, MemorySegment type, MemorySegment default_value, int flags) {
        var mh$ = g_param_spec_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_param_spec_variant", name, nick, blurb, type, default_value, flags);
            }
            return (MemorySegment)mh$.invokeExact(name, nick, blurb, type, default_value, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_param_spec_types$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_param_spec_types").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern GType *g_param_spec_types
     * }
     */
    public static AddressLayout g_param_spec_types$layout() {
        return g_param_spec_types$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern GType *g_param_spec_types
     * }
     */
    public static MemorySegment g_param_spec_types$segment() {
        return g_param_spec_types$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern GType *g_param_spec_types
     * }
     */
    public static MemorySegment g_param_spec_types() {
        return g_param_spec_types$constants.SEGMENT.get(g_param_spec_types$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern GType *g_param_spec_types
     * }
     */
    public static void g_param_spec_types(MemorySegment varValue) {
        g_param_spec_types$constants.SEGMENT.set(g_param_spec_types$constants.LAYOUT, 0L, varValue);
    }

    private static class g_signal_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_signal_group_get_type()
     * }
     */
    public static FunctionDescriptor g_signal_group_get_type$descriptor() {
        return g_signal_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_signal_group_get_type()
     * }
     */
    public static MethodHandle g_signal_group_get_type$handle() {
        return g_signal_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_signal_group_get_type()
     * }
     */
    public static long g_signal_group_get_type() {
        var mh$ = g_signal_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSignalGroup *g_signal_group_new(GType target_type)
     * }
     */
    public static FunctionDescriptor g_signal_group_new$descriptor() {
        return g_signal_group_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSignalGroup *g_signal_group_new(GType target_type)
     * }
     */
    public static MethodHandle g_signal_group_new$handle() {
        return g_signal_group_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSignalGroup *g_signal_group_new(GType target_type)
     * }
     */
    public static MemorySegment g_signal_group_new(long target_type) {
        var mh$ = g_signal_group_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_new", target_type);
            }
            return (MemorySegment)mh$.invokeExact(target_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_set_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_set_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_group_set_target(GSignalGroup *self, gpointer target)
     * }
     */
    public static FunctionDescriptor g_signal_group_set_target$descriptor() {
        return g_signal_group_set_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_group_set_target(GSignalGroup *self, gpointer target)
     * }
     */
    public static MethodHandle g_signal_group_set_target$handle() {
        return g_signal_group_set_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_group_set_target(GSignalGroup *self, gpointer target)
     * }
     */
    public static void g_signal_group_set_target(MemorySegment self, MemorySegment target) {
        var mh$ = g_signal_group_set_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_set_target", self, target);
            }
            mh$.invokeExact(self, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_dup_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_dup_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_signal_group_dup_target(GSignalGroup *self)
     * }
     */
    public static FunctionDescriptor g_signal_group_dup_target$descriptor() {
        return g_signal_group_dup_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_signal_group_dup_target(GSignalGroup *self)
     * }
     */
    public static MethodHandle g_signal_group_dup_target$handle() {
        return g_signal_group_dup_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_signal_group_dup_target(GSignalGroup *self)
     * }
     */
    public static MemorySegment g_signal_group_dup_target(MemorySegment self) {
        var mh$ = g_signal_group_dup_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_dup_target", self);
            }
            return (MemorySegment)mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_block {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_block"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_group_block(GSignalGroup *self)
     * }
     */
    public static FunctionDescriptor g_signal_group_block$descriptor() {
        return g_signal_group_block.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_group_block(GSignalGroup *self)
     * }
     */
    public static MethodHandle g_signal_group_block$handle() {
        return g_signal_group_block.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_group_block(GSignalGroup *self)
     * }
     */
    public static void g_signal_group_block(MemorySegment self) {
        var mh$ = g_signal_group_block.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_block", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_unblock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_unblock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_group_unblock(GSignalGroup *self)
     * }
     */
    public static FunctionDescriptor g_signal_group_unblock$descriptor() {
        return g_signal_group_unblock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_group_unblock(GSignalGroup *self)
     * }
     */
    public static MethodHandle g_signal_group_unblock$handle() {
        return g_signal_group_unblock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_group_unblock(GSignalGroup *self)
     * }
     */
    public static void g_signal_group_unblock(MemorySegment self) {
        var mh$ = g_signal_group_unblock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_unblock", self);
            }
            mh$.invokeExact(self);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_connect_closure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_connect_closure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect_closure(GSignalGroup *self, const gchar *detailed_signal, GClosure *closure, gboolean after)
     * }
     */
    public static FunctionDescriptor g_signal_group_connect_closure$descriptor() {
        return g_signal_group_connect_closure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect_closure(GSignalGroup *self, const gchar *detailed_signal, GClosure *closure, gboolean after)
     * }
     */
    public static MethodHandle g_signal_group_connect_closure$handle() {
        return g_signal_group_connect_closure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_group_connect_closure(GSignalGroup *self, const gchar *detailed_signal, GClosure *closure, gboolean after)
     * }
     */
    public static void g_signal_group_connect_closure(MemorySegment self, MemorySegment detailed_signal, MemorySegment closure, int after) {
        var mh$ = g_signal_group_connect_closure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_connect_closure", self, detailed_signal, closure, after);
            }
            mh$.invokeExact(self, detailed_signal, closure, after);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_connect_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_connect_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect_object(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer object, GConnectFlags flags)
     * }
     */
    public static FunctionDescriptor g_signal_group_connect_object$descriptor() {
        return g_signal_group_connect_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect_object(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer object, GConnectFlags flags)
     * }
     */
    public static MethodHandle g_signal_group_connect_object$handle() {
        return g_signal_group_connect_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_group_connect_object(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer object, GConnectFlags flags)
     * }
     */
    public static void g_signal_group_connect_object(MemorySegment self, MemorySegment detailed_signal, MemorySegment c_handler, MemorySegment object, int flags) {
        var mh$ = g_signal_group_connect_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_connect_object", self, detailed_signal, c_handler, object, flags);
            }
            mh$.invokeExact(self, detailed_signal, c_handler, object, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_connect_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_connect_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect_data(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify notify, GConnectFlags flags)
     * }
     */
    public static FunctionDescriptor g_signal_group_connect_data$descriptor() {
        return g_signal_group_connect_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect_data(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify notify, GConnectFlags flags)
     * }
     */
    public static MethodHandle g_signal_group_connect_data$handle() {
        return g_signal_group_connect_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_group_connect_data(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data, GClosureNotify notify, GConnectFlags flags)
     * }
     */
    public static void g_signal_group_connect_data(MemorySegment self, MemorySegment detailed_signal, MemorySegment c_handler, MemorySegment data, MemorySegment notify, int flags) {
        var mh$ = g_signal_group_connect_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_connect_data", self, detailed_signal, c_handler, data, notify, flags);
            }
            mh$.invokeExact(self, detailed_signal, c_handler, data, notify, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_connect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data)
     * }
     */
    public static FunctionDescriptor g_signal_group_connect$descriptor() {
        return g_signal_group_connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data)
     * }
     */
    public static MethodHandle g_signal_group_connect$handle() {
        return g_signal_group_connect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_group_connect(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data)
     * }
     */
    public static void g_signal_group_connect(MemorySegment self, MemorySegment detailed_signal, MemorySegment c_handler, MemorySegment data) {
        var mh$ = g_signal_group_connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_connect", self, detailed_signal, c_handler, data);
            }
            mh$.invokeExact(self, detailed_signal, c_handler, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_connect_after {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_connect_after"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect_after(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data)
     * }
     */
    public static FunctionDescriptor g_signal_group_connect_after$descriptor() {
        return g_signal_group_connect_after.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect_after(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data)
     * }
     */
    public static MethodHandle g_signal_group_connect_after$handle() {
        return g_signal_group_connect_after.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_group_connect_after(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data)
     * }
     */
    public static void g_signal_group_connect_after(MemorySegment self, MemorySegment detailed_signal, MemorySegment c_handler, MemorySegment data) {
        var mh$ = g_signal_group_connect_after.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_connect_after", self, detailed_signal, c_handler, data);
            }
            mh$.invokeExact(self, detailed_signal, c_handler, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_signal_group_connect_swapped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_signal_group_connect_swapped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect_swapped(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data)
     * }
     */
    public static FunctionDescriptor g_signal_group_connect_swapped$descriptor() {
        return g_signal_group_connect_swapped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_signal_group_connect_swapped(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data)
     * }
     */
    public static MethodHandle g_signal_group_connect_swapped$handle() {
        return g_signal_group_connect_swapped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_signal_group_connect_swapped(GSignalGroup *self, const gchar *detailed_signal, GCallback c_handler, gpointer data)
     * }
     */
    public static void g_signal_group_connect_swapped(MemorySegment self, MemorySegment detailed_signal, MemorySegment c_handler, MemorySegment data) {
        var mh$ = g_signal_group_connect_swapped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_signal_group_connect_swapped", self, detailed_signal, c_handler, data);
            }
            mh$.invokeExact(self, detailed_signal, c_handler, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_closure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_closure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_closure(GSource *source, GClosure *closure)
     * }
     */
    public static FunctionDescriptor g_source_set_closure$descriptor() {
        return g_source_set_closure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_closure(GSource *source, GClosure *closure)
     * }
     */
    public static MethodHandle g_source_set_closure$handle() {
        return g_source_set_closure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_closure(GSource *source, GClosure *closure)
     * }
     */
    public static void g_source_set_closure(MemorySegment source, MemorySegment closure) {
        var mh$ = g_source_set_closure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_closure", source, closure);
            }
            mh$.invokeExact(source, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_source_set_dummy_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_source_set_dummy_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_source_set_dummy_callback(GSource *source)
     * }
     */
    public static FunctionDescriptor g_source_set_dummy_callback$descriptor() {
        return g_source_set_dummy_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_source_set_dummy_callback(GSource *source)
     * }
     */
    public static MethodHandle g_source_set_dummy_callback$handle() {
        return g_source_set_dummy_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_source_set_dummy_callback(GSource *source)
     * }
     */
    public static void g_source_set_dummy_callback(MemorySegment source) {
        var mh$ = g_source_set_dummy_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_source_set_dummy_callback", source);
            }
            mh$.invokeExact(source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GTypeModule *GTypeModule_autoptr
     * }
     */
    public static final AddressLayout GTypeModule_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTypeModule_listautoptr
     * }
     */
    public static final AddressLayout GTypeModule_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTypeModule_slistautoptr
     * }
     */
    public static final AddressLayout GTypeModule_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTypeModule_queueautoptr
     * }
     */
    public static final AddressLayout GTypeModule_queueautoptr = app_indicator_h.C_POINTER;

    private static class g_type_module_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_module_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_module_get_type()
     * }
     */
    public static FunctionDescriptor g_type_module_get_type$descriptor() {
        return g_type_module_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_module_get_type()
     * }
     */
    public static MethodHandle g_type_module_get_type$handle() {
        return g_type_module_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_module_get_type()
     * }
     */
    public static long g_type_module_get_type() {
        var mh$ = g_type_module_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_use {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_module_use"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_type_module_use(GTypeModule *module)
     * }
     */
    public static FunctionDescriptor g_type_module_use$descriptor() {
        return g_type_module_use.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_type_module_use(GTypeModule *module)
     * }
     */
    public static MethodHandle g_type_module_use$handle() {
        return g_type_module_use.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_type_module_use(GTypeModule *module)
     * }
     */
    public static int g_type_module_use(MemorySegment module) {
        var mh$ = g_type_module_use.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_use", module);
            }
            return (int)mh$.invokeExact(module);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_unuse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_module_unuse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_module_unuse(GTypeModule *module)
     * }
     */
    public static FunctionDescriptor g_type_module_unuse$descriptor() {
        return g_type_module_unuse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_module_unuse(GTypeModule *module)
     * }
     */
    public static MethodHandle g_type_module_unuse$handle() {
        return g_type_module_unuse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_module_unuse(GTypeModule *module)
     * }
     */
    public static void g_type_module_unuse(MemorySegment module) {
        var mh$ = g_type_module_unuse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_unuse", module);
            }
            mh$.invokeExact(module);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_module_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_module_set_name(GTypeModule *module, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_type_module_set_name$descriptor() {
        return g_type_module_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_module_set_name(GTypeModule *module, const gchar *name)
     * }
     */
    public static MethodHandle g_type_module_set_name$handle() {
        return g_type_module_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_module_set_name(GTypeModule *module, const gchar *name)
     * }
     */
    public static void g_type_module_set_name(MemorySegment module, MemorySegment name) {
        var mh$ = g_type_module_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_set_name", module, name);
            }
            mh$.invokeExact(module, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_register_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_module_register_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_type(GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags)
     * }
     */
    public static FunctionDescriptor g_type_module_register_type$descriptor() {
        return g_type_module_register_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_type(GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags)
     * }
     */
    public static MethodHandle g_type_module_register_type$handle() {
        return g_type_module_register_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_module_register_type(GTypeModule *module, GType parent_type, const gchar *type_name, const GTypeInfo *type_info, GTypeFlags flags)
     * }
     */
    public static long g_type_module_register_type(MemorySegment module, long parent_type, MemorySegment type_name, MemorySegment type_info, int flags) {
        var mh$ = g_type_module_register_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_register_type", module, parent_type, type_name, type_info, flags);
            }
            return (long)mh$.invokeExact(module, parent_type, type_name, type_info, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_add_interface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_module_add_interface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_module_add_interface(GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info)
     * }
     */
    public static FunctionDescriptor g_type_module_add_interface$descriptor() {
        return g_type_module_add_interface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_module_add_interface(GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info)
     * }
     */
    public static MethodHandle g_type_module_add_interface$handle() {
        return g_type_module_add_interface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_module_add_interface(GTypeModule *module, GType instance_type, GType interface_type, const GInterfaceInfo *interface_info)
     * }
     */
    public static void g_type_module_add_interface(MemorySegment module, long instance_type, long interface_type, MemorySegment interface_info) {
        var mh$ = g_type_module_add_interface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_add_interface", module, instance_type, interface_type, interface_info);
            }
            mh$.invokeExact(module, instance_type, interface_type, interface_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_register_enum {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_module_register_enum"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_enum(GTypeModule *module, const gchar *name, const GEnumValue *const_static_values)
     * }
     */
    public static FunctionDescriptor g_type_module_register_enum$descriptor() {
        return g_type_module_register_enum.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_enum(GTypeModule *module, const gchar *name, const GEnumValue *const_static_values)
     * }
     */
    public static MethodHandle g_type_module_register_enum$handle() {
        return g_type_module_register_enum.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_module_register_enum(GTypeModule *module, const gchar *name, const GEnumValue *const_static_values)
     * }
     */
    public static long g_type_module_register_enum(MemorySegment module, MemorySegment name, MemorySegment const_static_values) {
        var mh$ = g_type_module_register_enum.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_register_enum", module, name, const_static_values);
            }
            return (long)mh$.invokeExact(module, name, const_static_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_module_register_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_module_register_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_flags(GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values)
     * }
     */
    public static FunctionDescriptor g_type_module_register_flags$descriptor() {
        return g_type_module_register_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_module_register_flags(GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values)
     * }
     */
    public static MethodHandle g_type_module_register_flags$handle() {
        return g_type_module_register_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_module_register_flags(GTypeModule *module, const gchar *name, const GFlagsValue *const_static_values)
     * }
     */
    public static long g_type_module_register_flags(MemorySegment module, MemorySegment name, MemorySegment const_static_values) {
        var mh$ = g_type_module_register_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_module_register_flags", module, name, const_static_values);
            }
            return (long)mh$.invokeExact(module, name, const_static_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_plugin_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_plugin_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_type_plugin_get_type()
     * }
     */
    public static FunctionDescriptor g_type_plugin_get_type$descriptor() {
        return g_type_plugin_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_type_plugin_get_type()
     * }
     */
    public static MethodHandle g_type_plugin_get_type$handle() {
        return g_type_plugin_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_type_plugin_get_type()
     * }
     */
    public static long g_type_plugin_get_type() {
        var mh$ = g_type_plugin_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_plugin_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_plugin_use {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_plugin_use"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_plugin_use(GTypePlugin *plugin)
     * }
     */
    public static FunctionDescriptor g_type_plugin_use$descriptor() {
        return g_type_plugin_use.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_plugin_use(GTypePlugin *plugin)
     * }
     */
    public static MethodHandle g_type_plugin_use$handle() {
        return g_type_plugin_use.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_plugin_use(GTypePlugin *plugin)
     * }
     */
    public static void g_type_plugin_use(MemorySegment plugin) {
        var mh$ = g_type_plugin_use.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_plugin_use", plugin);
            }
            mh$.invokeExact(plugin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_plugin_unuse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_plugin_unuse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_plugin_unuse(GTypePlugin *plugin)
     * }
     */
    public static FunctionDescriptor g_type_plugin_unuse$descriptor() {
        return g_type_plugin_unuse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_plugin_unuse(GTypePlugin *plugin)
     * }
     */
    public static MethodHandle g_type_plugin_unuse$handle() {
        return g_type_plugin_unuse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_plugin_unuse(GTypePlugin *plugin)
     * }
     */
    public static void g_type_plugin_unuse(MemorySegment plugin) {
        var mh$ = g_type_plugin_unuse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_plugin_unuse", plugin);
            }
            mh$.invokeExact(plugin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_plugin_complete_type_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_plugin_complete_type_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_type_info(GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table)
     * }
     */
    public static FunctionDescriptor g_type_plugin_complete_type_info$descriptor() {
        return g_type_plugin_complete_type_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_type_info(GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table)
     * }
     */
    public static MethodHandle g_type_plugin_complete_type_info$handle() {
        return g_type_plugin_complete_type_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_type_info(GTypePlugin *plugin, GType g_type, GTypeInfo *info, GTypeValueTable *value_table)
     * }
     */
    public static void g_type_plugin_complete_type_info(MemorySegment plugin, long g_type, MemorySegment info, MemorySegment value_table) {
        var mh$ = g_type_plugin_complete_type_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_plugin_complete_type_info", plugin, g_type, info, value_table);
            }
            mh$.invokeExact(plugin, g_type, info, value_table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_type_plugin_complete_interface_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_type_plugin_complete_interface_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_interface_info(GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info)
     * }
     */
    public static FunctionDescriptor g_type_plugin_complete_interface_info$descriptor() {
        return g_type_plugin_complete_interface_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_interface_info(GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info)
     * }
     */
    public static MethodHandle g_type_plugin_complete_interface_info$handle() {
        return g_type_plugin_complete_interface_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_type_plugin_complete_interface_info(GTypePlugin *plugin, GType instance_type, GType interface_type, GInterfaceInfo *info)
     * }
     */
    public static void g_type_plugin_complete_interface_info(MemorySegment plugin, long instance_type, long interface_type, MemorySegment info) {
        var mh$ = g_type_plugin_complete_interface_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_type_plugin_complete_interface_info", plugin, instance_type, interface_type, info);
            }
            mh$.invokeExact(plugin, instance_type, interface_type, info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_value_array_get_type()
     * }
     */
    public static FunctionDescriptor g_value_array_get_type$descriptor() {
        return g_value_array_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_value_array_get_type()
     * }
     */
    public static MethodHandle g_value_array_get_type$handle() {
        return g_value_array_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_value_array_get_type()
     * }
     */
    public static long g_value_array_get_type() {
        var mh$ = g_value_array_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_get_nth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_get_nth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValue *g_value_array_get_nth(GValueArray *value_array, guint index_)
     * }
     */
    public static FunctionDescriptor g_value_array_get_nth$descriptor() {
        return g_value_array_get_nth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValue *g_value_array_get_nth(GValueArray *value_array, guint index_)
     * }
     */
    public static MethodHandle g_value_array_get_nth$handle() {
        return g_value_array_get_nth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValue *g_value_array_get_nth(GValueArray *value_array, guint index_)
     * }
     */
    public static MemorySegment g_value_array_get_nth(MemorySegment value_array, int index_) {
        var mh$ = g_value_array_get_nth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_get_nth", value_array, index_);
            }
            return (MemorySegment)mh$.invokeExact(value_array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_new(guint n_prealloced)
     * }
     */
    public static FunctionDescriptor g_value_array_new$descriptor() {
        return g_value_array_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_new(guint n_prealloced)
     * }
     */
    public static MethodHandle g_value_array_new$handle() {
        return g_value_array_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_new(guint n_prealloced)
     * }
     */
    public static MemorySegment g_value_array_new(int n_prealloced) {
        var mh$ = g_value_array_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_new", n_prealloced);
            }
            return (MemorySegment)mh$.invokeExact(n_prealloced);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_array_free(GValueArray *value_array)
     * }
     */
    public static FunctionDescriptor g_value_array_free$descriptor() {
        return g_value_array_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_array_free(GValueArray *value_array)
     * }
     */
    public static MethodHandle g_value_array_free$handle() {
        return g_value_array_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_array_free(GValueArray *value_array)
     * }
     */
    public static void g_value_array_free(MemorySegment value_array) {
        var mh$ = g_value_array_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_free", value_array);
            }
            mh$.invokeExact(value_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_copy(const GValueArray *value_array)
     * }
     */
    public static FunctionDescriptor g_value_array_copy$descriptor() {
        return g_value_array_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_copy(const GValueArray *value_array)
     * }
     */
    public static MethodHandle g_value_array_copy$handle() {
        return g_value_array_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_copy(const GValueArray *value_array)
     * }
     */
    public static MemorySegment g_value_array_copy(MemorySegment value_array) {
        var mh$ = g_value_array_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_copy", value_array);
            }
            return (MemorySegment)mh$.invokeExact(value_array);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_prepend(GValueArray *value_array, const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_array_prepend$descriptor() {
        return g_value_array_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_prepend(GValueArray *value_array, const GValue *value)
     * }
     */
    public static MethodHandle g_value_array_prepend$handle() {
        return g_value_array_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_prepend(GValueArray *value_array, const GValue *value)
     * }
     */
    public static MemorySegment g_value_array_prepend(MemorySegment value_array, MemorySegment value) {
        var mh$ = g_value_array_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_prepend", value_array, value);
            }
            return (MemorySegment)mh$.invokeExact(value_array, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_append(GValueArray *value_array, const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_array_append$descriptor() {
        return g_value_array_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_append(GValueArray *value_array, const GValue *value)
     * }
     */
    public static MethodHandle g_value_array_append$handle() {
        return g_value_array_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_append(GValueArray *value_array, const GValue *value)
     * }
     */
    public static MemorySegment g_value_array_append(MemorySegment value_array, MemorySegment value) {
        var mh$ = g_value_array_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_append", value_array, value);
            }
            return (MemorySegment)mh$.invokeExact(value_array, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_insert(GValueArray *value_array, guint index_, const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_array_insert$descriptor() {
        return g_value_array_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_insert(GValueArray *value_array, guint index_, const GValue *value)
     * }
     */
    public static MethodHandle g_value_array_insert$handle() {
        return g_value_array_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_insert(GValueArray *value_array, guint index_, const GValue *value)
     * }
     */
    public static MemorySegment g_value_array_insert(MemorySegment value_array, int index_, MemorySegment value) {
        var mh$ = g_value_array_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_insert", value_array, index_, value);
            }
            return (MemorySegment)mh$.invokeExact(value_array, index_, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_remove(GValueArray *value_array, guint index_)
     * }
     */
    public static FunctionDescriptor g_value_array_remove$descriptor() {
        return g_value_array_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_remove(GValueArray *value_array, guint index_)
     * }
     */
    public static MethodHandle g_value_array_remove$handle() {
        return g_value_array_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_remove(GValueArray *value_array, guint index_)
     * }
     */
    public static MemorySegment g_value_array_remove(MemorySegment value_array, int index_) {
        var mh$ = g_value_array_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_remove", value_array, index_);
            }
            return (MemorySegment)mh$.invokeExact(value_array, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort(GValueArray *value_array, GCompareFunc compare_func)
     * }
     */
    public static FunctionDescriptor g_value_array_sort$descriptor() {
        return g_value_array_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort(GValueArray *value_array, GCompareFunc compare_func)
     * }
     */
    public static MethodHandle g_value_array_sort$handle() {
        return g_value_array_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort(GValueArray *value_array, GCompareFunc compare_func)
     * }
     */
    public static MemorySegment g_value_array_sort(MemorySegment value_array, MemorySegment compare_func) {
        var mh$ = g_value_array_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_sort", value_array, compare_func);
            }
            return (MemorySegment)mh$.invokeExact(value_array, compare_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_array_sort_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_array_sort_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort_with_data(GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_value_array_sort_with_data$descriptor() {
        return g_value_array_sort_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort_with_data(GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_value_array_sort_with_data$handle() {
        return g_value_array_sort_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GValueArray *g_value_array_sort_with_data(GValueArray *value_array, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_value_array_sort_with_data(MemorySegment value_array, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_value_array_sort_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_array_sort_with_data", value_array, compare_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(value_array, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_char(GValue *value, gchar v_char)
     * }
     */
    public static FunctionDescriptor g_value_set_char$descriptor() {
        return g_value_set_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_char(GValue *value, gchar v_char)
     * }
     */
    public static MethodHandle g_value_set_char$handle() {
        return g_value_set_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_char(GValue *value, gchar v_char)
     * }
     */
    public static void g_value_set_char(MemorySegment value, byte v_char) {
        var mh$ = g_value_set_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_char", value, v_char);
            }
            mh$.invokeExact(value, v_char);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_char {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_char"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar g_value_get_char(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_char$descriptor() {
        return g_value_get_char.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar g_value_get_char(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_char$handle() {
        return g_value_get_char.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar g_value_get_char(const GValue *value)
     * }
     */
    public static byte g_value_get_char(MemorySegment value) {
        var mh$ = g_value_get_char.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_char", value);
            }
            return (byte)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_schar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_schar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_schar(GValue *value, gint8 v_char)
     * }
     */
    public static FunctionDescriptor g_value_set_schar$descriptor() {
        return g_value_set_schar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_schar(GValue *value, gint8 v_char)
     * }
     */
    public static MethodHandle g_value_set_schar$handle() {
        return g_value_set_schar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_schar(GValue *value, gint8 v_char)
     * }
     */
    public static void g_value_set_schar(MemorySegment value, byte v_char) {
        var mh$ = g_value_set_schar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_schar", value, v_char);
            }
            mh$.invokeExact(value, v_char);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_schar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_schar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint8 g_value_get_schar(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_schar$descriptor() {
        return g_value_get_schar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint8 g_value_get_schar(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_schar$handle() {
        return g_value_get_schar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint8 g_value_get_schar(const GValue *value)
     * }
     */
    public static byte g_value_get_schar(MemorySegment value) {
        var mh$ = g_value_get_schar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_schar", value);
            }
            return (byte)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_uchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_uchar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_uchar(GValue *value, guchar v_uchar)
     * }
     */
    public static FunctionDescriptor g_value_set_uchar$descriptor() {
        return g_value_set_uchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_uchar(GValue *value, guchar v_uchar)
     * }
     */
    public static MethodHandle g_value_set_uchar$handle() {
        return g_value_set_uchar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_uchar(GValue *value, guchar v_uchar)
     * }
     */
    public static void g_value_set_uchar(MemorySegment value, byte v_uchar) {
        var mh$ = g_value_set_uchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_uchar", value, v_uchar);
            }
            mh$.invokeExact(value, v_uchar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_uchar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_CHAR,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_uchar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guchar g_value_get_uchar(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_uchar$descriptor() {
        return g_value_get_uchar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guchar g_value_get_uchar(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_uchar$handle() {
        return g_value_get_uchar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guchar g_value_get_uchar(const GValue *value)
     * }
     */
    public static byte g_value_get_uchar(MemorySegment value) {
        var mh$ = g_value_get_uchar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_uchar", value);
            }
            return (byte)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_boolean(GValue *value, gboolean v_boolean)
     * }
     */
    public static FunctionDescriptor g_value_set_boolean$descriptor() {
        return g_value_set_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_boolean(GValue *value, gboolean v_boolean)
     * }
     */
    public static MethodHandle g_value_set_boolean$handle() {
        return g_value_set_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_boolean(GValue *value, gboolean v_boolean)
     * }
     */
    public static void g_value_set_boolean(MemorySegment value, int v_boolean) {
        var mh$ = g_value_set_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_boolean", value, v_boolean);
            }
            mh$.invokeExact(value, v_boolean);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_boolean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_boolean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_value_get_boolean(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_boolean$descriptor() {
        return g_value_get_boolean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_value_get_boolean(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_boolean$handle() {
        return g_value_get_boolean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_value_get_boolean(const GValue *value)
     * }
     */
    public static int g_value_get_boolean(MemorySegment value) {
        var mh$ = g_value_get_boolean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_boolean", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_int(GValue *value, gint v_int)
     * }
     */
    public static FunctionDescriptor g_value_set_int$descriptor() {
        return g_value_set_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_int(GValue *value, gint v_int)
     * }
     */
    public static MethodHandle g_value_set_int$handle() {
        return g_value_set_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_int(GValue *value, gint v_int)
     * }
     */
    public static void g_value_set_int(MemorySegment value, int v_int) {
        var mh$ = g_value_set_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_int", value, v_int);
            }
            mh$.invokeExact(value, v_int);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_value_get_int(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_int$descriptor() {
        return g_value_get_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_value_get_int(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_int$handle() {
        return g_value_get_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_value_get_int(const GValue *value)
     * }
     */
    public static int g_value_get_int(MemorySegment value) {
        var mh$ = g_value_get_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_int", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_uint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_uint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_uint(GValue *value, guint v_uint)
     * }
     */
    public static FunctionDescriptor g_value_set_uint$descriptor() {
        return g_value_set_uint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_uint(GValue *value, guint v_uint)
     * }
     */
    public static MethodHandle g_value_set_uint$handle() {
        return g_value_set_uint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_uint(GValue *value, guint v_uint)
     * }
     */
    public static void g_value_set_uint(MemorySegment value, int v_uint) {
        var mh$ = g_value_set_uint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_uint", value, v_uint);
            }
            mh$.invokeExact(value, v_uint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_uint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_uint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_value_get_uint(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_uint$descriptor() {
        return g_value_get_uint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_value_get_uint(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_uint$handle() {
        return g_value_get_uint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_value_get_uint(const GValue *value)
     * }
     */
    public static int g_value_get_uint(MemorySegment value) {
        var mh$ = g_value_get_uint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_uint", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_long {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_long"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_long(GValue *value, glong v_long)
     * }
     */
    public static FunctionDescriptor g_value_set_long$descriptor() {
        return g_value_set_long.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_long(GValue *value, glong v_long)
     * }
     */
    public static MethodHandle g_value_set_long$handle() {
        return g_value_set_long.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_long(GValue *value, glong v_long)
     * }
     */
    public static void g_value_set_long(MemorySegment value, long v_long) {
        var mh$ = g_value_set_long.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_long", value, v_long);
            }
            mh$.invokeExact(value, v_long);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_long {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_long"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern glong g_value_get_long(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_long$descriptor() {
        return g_value_get_long.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern glong g_value_get_long(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_long$handle() {
        return g_value_get_long.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern glong g_value_get_long(const GValue *value)
     * }
     */
    public static long g_value_get_long(MemorySegment value) {
        var mh$ = g_value_get_long.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_long", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_ulong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_ulong"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_ulong(GValue *value, gulong v_ulong)
     * }
     */
    public static FunctionDescriptor g_value_set_ulong$descriptor() {
        return g_value_set_ulong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_ulong(GValue *value, gulong v_ulong)
     * }
     */
    public static MethodHandle g_value_set_ulong$handle() {
        return g_value_set_ulong.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_ulong(GValue *value, gulong v_ulong)
     * }
     */
    public static void g_value_set_ulong(MemorySegment value, long v_ulong) {
        var mh$ = g_value_set_ulong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_ulong", value, v_ulong);
            }
            mh$.invokeExact(value, v_ulong);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_ulong {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_ulong"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gulong g_value_get_ulong(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_ulong$descriptor() {
        return g_value_get_ulong.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gulong g_value_get_ulong(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_ulong$handle() {
        return g_value_get_ulong.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gulong g_value_get_ulong(const GValue *value)
     * }
     */
    public static long g_value_get_ulong(MemorySegment value) {
        var mh$ = g_value_get_ulong.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_ulong", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_int64(GValue *value, gint64 v_int64)
     * }
     */
    public static FunctionDescriptor g_value_set_int64$descriptor() {
        return g_value_set_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_int64(GValue *value, gint64 v_int64)
     * }
     */
    public static MethodHandle g_value_set_int64$handle() {
        return g_value_set_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_int64(GValue *value, gint64 v_int64)
     * }
     */
    public static void g_value_set_int64(MemorySegment value, long v_int64) {
        var mh$ = g_value_set_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_int64", value, v_int64);
            }
            mh$.invokeExact(value, v_int64);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_int64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_int64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_value_get_int64(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_int64$descriptor() {
        return g_value_get_int64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_value_get_int64(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_int64$handle() {
        return g_value_get_int64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_value_get_int64(const GValue *value)
     * }
     */
    public static long g_value_get_int64(MemorySegment value) {
        var mh$ = g_value_get_int64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_int64", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_uint64(GValue *value, guint64 v_uint64)
     * }
     */
    public static FunctionDescriptor g_value_set_uint64$descriptor() {
        return g_value_set_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_uint64(GValue *value, guint64 v_uint64)
     * }
     */
    public static MethodHandle g_value_set_uint64$handle() {
        return g_value_set_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_uint64(GValue *value, guint64 v_uint64)
     * }
     */
    public static void g_value_set_uint64(MemorySegment value, long v_uint64) {
        var mh$ = g_value_set_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_uint64", value, v_uint64);
            }
            mh$.invokeExact(value, v_uint64);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_uint64 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_uint64"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 g_value_get_uint64(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_uint64$descriptor() {
        return g_value_get_uint64.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 g_value_get_uint64(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_uint64$handle() {
        return g_value_get_uint64.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint64 g_value_get_uint64(const GValue *value)
     * }
     */
    public static long g_value_get_uint64(MemorySegment value) {
        var mh$ = g_value_get_uint64.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_uint64", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_FLOAT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_float"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_float(GValue *value, gfloat v_float)
     * }
     */
    public static FunctionDescriptor g_value_set_float$descriptor() {
        return g_value_set_float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_float(GValue *value, gfloat v_float)
     * }
     */
    public static MethodHandle g_value_set_float$handle() {
        return g_value_set_float.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_float(GValue *value, gfloat v_float)
     * }
     */
    public static void g_value_set_float(MemorySegment value, float v_float) {
        var mh$ = g_value_set_float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_float", value, v_float);
            }
            mh$.invokeExact(value, v_float);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_float {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_FLOAT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_float"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gfloat g_value_get_float(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_float$descriptor() {
        return g_value_get_float.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gfloat g_value_get_float(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_float$handle() {
        return g_value_get_float.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gfloat g_value_get_float(const GValue *value)
     * }
     */
    public static float g_value_get_float(MemorySegment value) {
        var mh$ = g_value_get_float.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_float", value);
            }
            return (float)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_double(GValue *value, gdouble v_double)
     * }
     */
    public static FunctionDescriptor g_value_set_double$descriptor() {
        return g_value_set_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_double(GValue *value, gdouble v_double)
     * }
     */
    public static MethodHandle g_value_set_double$handle() {
        return g_value_set_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_double(GValue *value, gdouble v_double)
     * }
     */
    public static void g_value_set_double(MemorySegment value, double v_double) {
        var mh$ = g_value_set_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_double", value, v_double);
            }
            mh$.invokeExact(value, v_double);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_value_get_double(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_double$descriptor() {
        return g_value_get_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_value_get_double(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_double$handle() {
        return g_value_get_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_value_get_double(const GValue *value)
     * }
     */
    public static double g_value_get_double(MemorySegment value) {
        var mh$ = g_value_get_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_double", value);
            }
            return (double)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_string(GValue *value, const gchar *v_string)
     * }
     */
    public static FunctionDescriptor g_value_set_string$descriptor() {
        return g_value_set_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_string(GValue *value, const gchar *v_string)
     * }
     */
    public static MethodHandle g_value_set_string$handle() {
        return g_value_set_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_string(GValue *value, const gchar *v_string)
     * }
     */
    public static void g_value_set_string(MemorySegment value, MemorySegment v_string) {
        var mh$ = g_value_set_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_string", value, v_string);
            }
            mh$.invokeExact(value, v_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_static_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_static_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_static_string(GValue *value, const gchar *v_string)
     * }
     */
    public static FunctionDescriptor g_value_set_static_string$descriptor() {
        return g_value_set_static_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_static_string(GValue *value, const gchar *v_string)
     * }
     */
    public static MethodHandle g_value_set_static_string$handle() {
        return g_value_set_static_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_static_string(GValue *value, const gchar *v_string)
     * }
     */
    public static void g_value_set_static_string(MemorySegment value, MemorySegment v_string) {
        var mh$ = g_value_set_static_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_static_string", value, v_string);
            }
            mh$.invokeExact(value, v_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_interned_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_interned_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_interned_string(GValue *value, const gchar *v_string)
     * }
     */
    public static FunctionDescriptor g_value_set_interned_string$descriptor() {
        return g_value_set_interned_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_interned_string(GValue *value, const gchar *v_string)
     * }
     */
    public static MethodHandle g_value_set_interned_string$handle() {
        return g_value_set_interned_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_interned_string(GValue *value, const gchar *v_string)
     * }
     */
    public static void g_value_set_interned_string(MemorySegment value, MemorySegment v_string) {
        var mh$ = g_value_set_interned_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_interned_string", value, v_string);
            }
            mh$.invokeExact(value, v_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_value_get_string(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_string$descriptor() {
        return g_value_get_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_value_get_string(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_string$handle() {
        return g_value_get_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_value_get_string(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_string(MemorySegment value) {
        var mh$ = g_value_get_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_string", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_dup_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_dup_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_value_dup_string(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_dup_string$descriptor() {
        return g_value_dup_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_value_dup_string(const GValue *value)
     * }
     */
    public static MethodHandle g_value_dup_string$handle() {
        return g_value_dup_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_value_dup_string(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_string(MemorySegment value) {
        var mh$ = g_value_dup_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_dup_string", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_pointer(GValue *value, gpointer v_pointer)
     * }
     */
    public static FunctionDescriptor g_value_set_pointer$descriptor() {
        return g_value_set_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_pointer(GValue *value, gpointer v_pointer)
     * }
     */
    public static MethodHandle g_value_set_pointer$handle() {
        return g_value_set_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_pointer(GValue *value, gpointer v_pointer)
     * }
     */
    public static void g_value_set_pointer(MemorySegment value, MemorySegment v_pointer) {
        var mh$ = g_value_set_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_pointer", value, v_pointer);
            }
            mh$.invokeExact(value, v_pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_pointer(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_pointer$descriptor() {
        return g_value_get_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_value_get_pointer(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_pointer$handle() {
        return g_value_get_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_value_get_pointer(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_pointer(MemorySegment value) {
        var mh$ = g_value_get_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_pointer", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_gtype_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_gtype_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_gtype_get_type()
     * }
     */
    public static FunctionDescriptor g_gtype_get_type$descriptor() {
        return g_gtype_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_gtype_get_type()
     * }
     */
    public static MethodHandle g_gtype_get_type$handle() {
        return g_gtype_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_gtype_get_type()
     * }
     */
    public static long g_gtype_get_type() {
        var mh$ = g_gtype_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_gtype_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_gtype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_gtype"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_gtype(GValue *value, GType v_gtype)
     * }
     */
    public static FunctionDescriptor g_value_set_gtype$descriptor() {
        return g_value_set_gtype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_gtype(GValue *value, GType v_gtype)
     * }
     */
    public static MethodHandle g_value_set_gtype$handle() {
        return g_value_set_gtype.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_gtype(GValue *value, GType v_gtype)
     * }
     */
    public static void g_value_set_gtype(MemorySegment value, long v_gtype) {
        var mh$ = g_value_set_gtype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_gtype", value, v_gtype);
            }
            mh$.invokeExact(value, v_gtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_gtype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_gtype"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_value_get_gtype(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_gtype$descriptor() {
        return g_value_get_gtype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_value_get_gtype(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_gtype$handle() {
        return g_value_get_gtype.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_value_get_gtype(const GValue *value)
     * }
     */
    public static long g_value_get_gtype(MemorySegment value) {
        var mh$ = g_value_get_gtype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_gtype", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_variant(GValue *value, GVariant *variant)
     * }
     */
    public static FunctionDescriptor g_value_set_variant$descriptor() {
        return g_value_set_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_variant(GValue *value, GVariant *variant)
     * }
     */
    public static MethodHandle g_value_set_variant$handle() {
        return g_value_set_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_variant(GValue *value, GVariant *variant)
     * }
     */
    public static void g_value_set_variant(MemorySegment value, MemorySegment variant) {
        var mh$ = g_value_set_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_variant", value, variant);
            }
            mh$.invokeExact(value, variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_take_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_take_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_take_variant(GValue *value, GVariant *variant)
     * }
     */
    public static FunctionDescriptor g_value_take_variant$descriptor() {
        return g_value_take_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_take_variant(GValue *value, GVariant *variant)
     * }
     */
    public static MethodHandle g_value_take_variant$handle() {
        return g_value_take_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_take_variant(GValue *value, GVariant *variant)
     * }
     */
    public static void g_value_take_variant(MemorySegment value, MemorySegment variant) {
        var mh$ = g_value_take_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_take_variant", value, variant);
            }
            mh$.invokeExact(value, variant);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_get_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_get_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_value_get_variant(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_get_variant$descriptor() {
        return g_value_get_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_value_get_variant(const GValue *value)
     * }
     */
    public static MethodHandle g_value_get_variant$handle() {
        return g_value_get_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_value_get_variant(const GValue *value)
     * }
     */
    public static MemorySegment g_value_get_variant(MemorySegment value) {
        var mh$ = g_value_get_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_get_variant", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_dup_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_dup_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_value_dup_variant(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_value_dup_variant$descriptor() {
        return g_value_dup_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_value_dup_variant(const GValue *value)
     * }
     */
    public static MethodHandle g_value_dup_variant$handle() {
        return g_value_dup_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_value_dup_variant(const GValue *value)
     * }
     */
    public static MemorySegment g_value_dup_variant(MemorySegment value) {
        var mh$ = g_value_dup_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_dup_variant", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pointer_type_register_static {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pointer_type_register_static"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType g_pointer_type_register_static(const gchar *name)
     * }
     */
    public static FunctionDescriptor g_pointer_type_register_static$descriptor() {
        return g_pointer_type_register_static.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType g_pointer_type_register_static(const gchar *name)
     * }
     */
    public static MethodHandle g_pointer_type_register_static$handle() {
        return g_pointer_type_register_static.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType g_pointer_type_register_static(const gchar *name)
     * }
     */
    public static long g_pointer_type_register_static(MemorySegment name) {
        var mh$ = g_pointer_type_register_static.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pointer_type_register_static", name);
            }
            return (long)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strdup_value_contents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strdup_value_contents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_strdup_value_contents(const GValue *value)
     * }
     */
    public static FunctionDescriptor g_strdup_value_contents$descriptor() {
        return g_strdup_value_contents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_strdup_value_contents(const GValue *value)
     * }
     */
    public static MethodHandle g_strdup_value_contents$handle() {
        return g_strdup_value_contents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_strdup_value_contents(const GValue *value)
     * }
     */
    public static MemorySegment g_strdup_value_contents(MemorySegment value) {
        var mh$ = g_strdup_value_contents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strdup_value_contents", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_take_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_take_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_take_string(GValue *value, gchar *v_string)
     * }
     */
    public static FunctionDescriptor g_value_take_string$descriptor() {
        return g_value_take_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_take_string(GValue *value, gchar *v_string)
     * }
     */
    public static MethodHandle g_value_take_string$handle() {
        return g_value_take_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_take_string(GValue *value, gchar *v_string)
     * }
     */
    public static void g_value_take_string(MemorySegment value, MemorySegment v_string) {
        var mh$ = g_value_take_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_take_string", value, v_string);
            }
            mh$.invokeExact(value, v_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_value_set_string_take_ownership {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_value_set_string_take_ownership"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_value_set_string_take_ownership(GValue *value, gchar *v_string)
     * }
     */
    public static FunctionDescriptor g_value_set_string_take_ownership$descriptor() {
        return g_value_set_string_take_ownership.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_value_set_string_take_ownership(GValue *value, gchar *v_string)
     * }
     */
    public static MethodHandle g_value_set_string_take_ownership$handle() {
        return g_value_set_string_take_ownership.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_value_set_string_take_ownership(GValue *value, gchar *v_string)
     * }
     */
    public static void g_value_set_string_take_ownership(MemorySegment value, MemorySegment v_string) {
        var mh$ = g_value_set_string_take_ownership.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_value_set_string_take_ownership", value, v_string);
            }
            mh$.invokeExact(value, v_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef gchar *gchararray
     * }
     */
    public static final AddressLayout gchararray = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GClosure *GClosure_autoptr
     * }
     */
    public static final AddressLayout GClosure_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GClosure_listautoptr
     * }
     */
    public static final AddressLayout GClosure_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GClosure_slistautoptr
     * }
     */
    public static final AddressLayout GClosure_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GClosure_queueautoptr
     * }
     */
    public static final AddressLayout GClosure_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GEnumClass *GEnumClass_autoptr
     * }
     */
    public static final AddressLayout GEnumClass_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GEnumClass_listautoptr
     * }
     */
    public static final AddressLayout GEnumClass_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GEnumClass_slistautoptr
     * }
     */
    public static final AddressLayout GEnumClass_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GEnumClass_queueautoptr
     * }
     */
    public static final AddressLayout GEnumClass_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GFlagsClass *GFlagsClass_autoptr
     * }
     */
    public static final AddressLayout GFlagsClass_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GFlagsClass_listautoptr
     * }
     */
    public static final AddressLayout GFlagsClass_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GFlagsClass_slistautoptr
     * }
     */
    public static final AddressLayout GFlagsClass_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GFlagsClass_queueautoptr
     * }
     */
    public static final AddressLayout GFlagsClass_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GObject *GObject_autoptr
     * }
     */
    public static final AddressLayout GObject_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GObject_listautoptr
     * }
     */
    public static final AddressLayout GObject_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GObject_slistautoptr
     * }
     */
    public static final AddressLayout GObject_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GObject_queueautoptr
     * }
     */
    public static final AddressLayout GObject_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GInitiallyUnowned *GInitiallyUnowned_autoptr
     * }
     */
    public static final AddressLayout GInitiallyUnowned_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GInitiallyUnowned_listautoptr
     * }
     */
    public static final AddressLayout GInitiallyUnowned_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GInitiallyUnowned_slistautoptr
     * }
     */
    public static final AddressLayout GInitiallyUnowned_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GInitiallyUnowned_queueautoptr
     * }
     */
    public static final AddressLayout GInitiallyUnowned_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GParamSpec *GParamSpec_autoptr
     * }
     */
    public static final AddressLayout GParamSpec_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GParamSpec_listautoptr
     * }
     */
    public static final AddressLayout GParamSpec_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GParamSpec_slistautoptr
     * }
     */
    public static final AddressLayout GParamSpec_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GParamSpec_queueautoptr
     * }
     */
    public static final AddressLayout GParamSpec_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GTypeClass *GTypeClass_autoptr
     * }
     */
    public static final AddressLayout GTypeClass_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GTypeClass_listautoptr
     * }
     */
    public static final AddressLayout GTypeClass_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GTypeClass_slistautoptr
     * }
     */
    public static final AddressLayout GTypeClass_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GTypeClass_queueautoptr
     * }
     */
    public static final AddressLayout GTypeClass_queueautoptr = app_indicator_h.C_POINTER;
    private static final int G_APP_INFO_CREATE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APP_INFO_CREATE_NONE = 0
     * }
     */
    public static int G_APP_INFO_CREATE_NONE() {
        return G_APP_INFO_CREATE_NONE;
    }
    private static final int G_APP_INFO_CREATE_NEEDS_TERMINAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APP_INFO_CREATE_NEEDS_TERMINAL = 1
     * }
     */
    public static int G_APP_INFO_CREATE_NEEDS_TERMINAL() {
        return G_APP_INFO_CREATE_NEEDS_TERMINAL;
    }
    private static final int G_APP_INFO_CREATE_SUPPORTS_URIS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APP_INFO_CREATE_SUPPORTS_URIS = 2
     * }
     */
    public static int G_APP_INFO_CREATE_SUPPORTS_URIS() {
        return G_APP_INFO_CREATE_SUPPORTS_URIS;
    }
    private static final int G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION = 4
     * }
     */
    public static int G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION() {
        return G_APP_INFO_CREATE_SUPPORTS_STARTUP_NOTIFICATION;
    }
    private static final int G_CONVERTER_NO_FLAGS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERTER_NO_FLAGS = 0
     * }
     */
    public static int G_CONVERTER_NO_FLAGS() {
        return G_CONVERTER_NO_FLAGS;
    }
    private static final int G_CONVERTER_INPUT_AT_END = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERTER_INPUT_AT_END = 1
     * }
     */
    public static int G_CONVERTER_INPUT_AT_END() {
        return G_CONVERTER_INPUT_AT_END;
    }
    private static final int G_CONVERTER_FLUSH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERTER_FLUSH = 2
     * }
     */
    public static int G_CONVERTER_FLUSH() {
        return G_CONVERTER_FLUSH;
    }
    private static final int G_CONVERTER_ERROR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERTER_ERROR = 0
     * }
     */
    public static int G_CONVERTER_ERROR() {
        return G_CONVERTER_ERROR;
    }
    private static final int G_CONVERTER_CONVERTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERTER_CONVERTED = 1
     * }
     */
    public static int G_CONVERTER_CONVERTED() {
        return G_CONVERTER_CONVERTED;
    }
    private static final int G_CONVERTER_FINISHED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERTER_FINISHED = 2
     * }
     */
    public static int G_CONVERTER_FINISHED() {
        return G_CONVERTER_FINISHED;
    }
    private static final int G_CONVERTER_FLUSHED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_CONVERTER_FLUSHED = 3
     * }
     */
    public static int G_CONVERTER_FLUSHED() {
        return G_CONVERTER_FLUSHED;
    }
    private static final int G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN = 0
     * }
     */
    public static int G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN() {
        return G_DATA_STREAM_BYTE_ORDER_BIG_ENDIAN;
    }
    private static final int G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN = 1
     * }
     */
    public static int G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN() {
        return G_DATA_STREAM_BYTE_ORDER_LITTLE_ENDIAN;
    }
    private static final int G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN = 2
     * }
     */
    public static int G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN() {
        return G_DATA_STREAM_BYTE_ORDER_HOST_ENDIAN;
    }
    private static final int G_DATA_STREAM_NEWLINE_TYPE_LF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATA_STREAM_NEWLINE_TYPE_LF = 0
     * }
     */
    public static int G_DATA_STREAM_NEWLINE_TYPE_LF() {
        return G_DATA_STREAM_NEWLINE_TYPE_LF;
    }
    private static final int G_DATA_STREAM_NEWLINE_TYPE_CR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATA_STREAM_NEWLINE_TYPE_CR = 1
     * }
     */
    public static int G_DATA_STREAM_NEWLINE_TYPE_CR() {
        return G_DATA_STREAM_NEWLINE_TYPE_CR;
    }
    private static final int G_DATA_STREAM_NEWLINE_TYPE_CR_LF = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATA_STREAM_NEWLINE_TYPE_CR_LF = 2
     * }
     */
    public static int G_DATA_STREAM_NEWLINE_TYPE_CR_LF() {
        return G_DATA_STREAM_NEWLINE_TYPE_CR_LF;
    }
    private static final int G_DATA_STREAM_NEWLINE_TYPE_ANY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DATA_STREAM_NEWLINE_TYPE_ANY = 3
     * }
     */
    public static int G_DATA_STREAM_NEWLINE_TYPE_ANY() {
        return G_DATA_STREAM_NEWLINE_TYPE_ANY;
    }
    private static final int G_FILE_ATTRIBUTE_TYPE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_TYPE_INVALID = 0
     * }
     */
    public static int G_FILE_ATTRIBUTE_TYPE_INVALID() {
        return G_FILE_ATTRIBUTE_TYPE_INVALID;
    }
    private static final int G_FILE_ATTRIBUTE_TYPE_STRING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_TYPE_STRING = 1
     * }
     */
    public static int G_FILE_ATTRIBUTE_TYPE_STRING() {
        return G_FILE_ATTRIBUTE_TYPE_STRING;
    }
    private static final int G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_TYPE_BYTE_STRING = 2
     * }
     */
    public static int G_FILE_ATTRIBUTE_TYPE_BYTE_STRING() {
        return G_FILE_ATTRIBUTE_TYPE_BYTE_STRING;
    }
    private static final int G_FILE_ATTRIBUTE_TYPE_BOOLEAN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_TYPE_BOOLEAN = 3
     * }
     */
    public static int G_FILE_ATTRIBUTE_TYPE_BOOLEAN() {
        return G_FILE_ATTRIBUTE_TYPE_BOOLEAN;
    }
    private static final int G_FILE_ATTRIBUTE_TYPE_UINT32 = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_TYPE_UINT32 = 4
     * }
     */
    public static int G_FILE_ATTRIBUTE_TYPE_UINT32() {
        return G_FILE_ATTRIBUTE_TYPE_UINT32;
    }
    private static final int G_FILE_ATTRIBUTE_TYPE_INT32 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_TYPE_INT32 = 5
     * }
     */
    public static int G_FILE_ATTRIBUTE_TYPE_INT32() {
        return G_FILE_ATTRIBUTE_TYPE_INT32;
    }
    private static final int G_FILE_ATTRIBUTE_TYPE_UINT64 = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_TYPE_UINT64 = 6
     * }
     */
    public static int G_FILE_ATTRIBUTE_TYPE_UINT64() {
        return G_FILE_ATTRIBUTE_TYPE_UINT64;
    }
    private static final int G_FILE_ATTRIBUTE_TYPE_INT64 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_TYPE_INT64 = 7
     * }
     */
    public static int G_FILE_ATTRIBUTE_TYPE_INT64() {
        return G_FILE_ATTRIBUTE_TYPE_INT64;
    }
    private static final int G_FILE_ATTRIBUTE_TYPE_OBJECT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_TYPE_OBJECT = 8
     * }
     */
    public static int G_FILE_ATTRIBUTE_TYPE_OBJECT() {
        return G_FILE_ATTRIBUTE_TYPE_OBJECT;
    }
    private static final int G_FILE_ATTRIBUTE_TYPE_STRINGV = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_TYPE_STRINGV = 9
     * }
     */
    public static int G_FILE_ATTRIBUTE_TYPE_STRINGV() {
        return G_FILE_ATTRIBUTE_TYPE_STRINGV;
    }
    private static final int G_FILE_ATTRIBUTE_INFO_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_INFO_NONE = 0
     * }
     */
    public static int G_FILE_ATTRIBUTE_INFO_NONE() {
        return G_FILE_ATTRIBUTE_INFO_NONE;
    }
    private static final int G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE = 1
     * }
     */
    public static int G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE() {
        return G_FILE_ATTRIBUTE_INFO_COPY_WITH_FILE;
    }
    private static final int G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED = 2
     * }
     */
    public static int G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED() {
        return G_FILE_ATTRIBUTE_INFO_COPY_WHEN_MOVED;
    }
    private static final int G_FILE_ATTRIBUTE_STATUS_UNSET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_STATUS_UNSET = 0
     * }
     */
    public static int G_FILE_ATTRIBUTE_STATUS_UNSET() {
        return G_FILE_ATTRIBUTE_STATUS_UNSET;
    }
    private static final int G_FILE_ATTRIBUTE_STATUS_SET = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_STATUS_SET = 1
     * }
     */
    public static int G_FILE_ATTRIBUTE_STATUS_SET() {
        return G_FILE_ATTRIBUTE_STATUS_SET;
    }
    private static final int G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING = 2
     * }
     */
    public static int G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING() {
        return G_FILE_ATTRIBUTE_STATUS_ERROR_SETTING;
    }
    private static final int G_FILE_QUERY_INFO_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_QUERY_INFO_NONE = 0
     * }
     */
    public static int G_FILE_QUERY_INFO_NONE() {
        return G_FILE_QUERY_INFO_NONE;
    }
    private static final int G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS = 1
     * }
     */
    public static int G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS() {
        return G_FILE_QUERY_INFO_NOFOLLOW_SYMLINKS;
    }
    private static final int G_FILE_CREATE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_CREATE_NONE = 0
     * }
     */
    public static int G_FILE_CREATE_NONE() {
        return G_FILE_CREATE_NONE;
    }
    private static final int G_FILE_CREATE_PRIVATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_CREATE_PRIVATE = 1
     * }
     */
    public static int G_FILE_CREATE_PRIVATE() {
        return G_FILE_CREATE_PRIVATE;
    }
    private static final int G_FILE_CREATE_REPLACE_DESTINATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_CREATE_REPLACE_DESTINATION = 2
     * }
     */
    public static int G_FILE_CREATE_REPLACE_DESTINATION() {
        return G_FILE_CREATE_REPLACE_DESTINATION;
    }
    private static final int G_FILE_MEASURE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MEASURE_NONE = 0
     * }
     */
    public static int G_FILE_MEASURE_NONE() {
        return G_FILE_MEASURE_NONE;
    }
    private static final int G_FILE_MEASURE_REPORT_ANY_ERROR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MEASURE_REPORT_ANY_ERROR = 2
     * }
     */
    public static int G_FILE_MEASURE_REPORT_ANY_ERROR() {
        return G_FILE_MEASURE_REPORT_ANY_ERROR;
    }
    private static final int G_FILE_MEASURE_APPARENT_SIZE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MEASURE_APPARENT_SIZE = 4
     * }
     */
    public static int G_FILE_MEASURE_APPARENT_SIZE() {
        return G_FILE_MEASURE_APPARENT_SIZE;
    }
    private static final int G_FILE_MEASURE_NO_XDEV = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MEASURE_NO_XDEV = 8
     * }
     */
    public static int G_FILE_MEASURE_NO_XDEV() {
        return G_FILE_MEASURE_NO_XDEV;
    }
    private static final int G_MOUNT_MOUNT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MOUNT_MOUNT_NONE = 0
     * }
     */
    public static int G_MOUNT_MOUNT_NONE() {
        return G_MOUNT_MOUNT_NONE;
    }
    private static final int G_MOUNT_UNMOUNT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MOUNT_UNMOUNT_NONE = 0
     * }
     */
    public static int G_MOUNT_UNMOUNT_NONE() {
        return G_MOUNT_UNMOUNT_NONE;
    }
    private static final int G_MOUNT_UNMOUNT_FORCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MOUNT_UNMOUNT_FORCE = 1
     * }
     */
    public static int G_MOUNT_UNMOUNT_FORCE() {
        return G_MOUNT_UNMOUNT_FORCE;
    }
    private static final int G_DRIVE_START_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DRIVE_START_NONE = 0
     * }
     */
    public static int G_DRIVE_START_NONE() {
        return G_DRIVE_START_NONE;
    }
    private static final int G_DRIVE_START_STOP_TYPE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DRIVE_START_STOP_TYPE_UNKNOWN = 0
     * }
     */
    public static int G_DRIVE_START_STOP_TYPE_UNKNOWN() {
        return G_DRIVE_START_STOP_TYPE_UNKNOWN;
    }
    private static final int G_DRIVE_START_STOP_TYPE_SHUTDOWN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DRIVE_START_STOP_TYPE_SHUTDOWN = 1
     * }
     */
    public static int G_DRIVE_START_STOP_TYPE_SHUTDOWN() {
        return G_DRIVE_START_STOP_TYPE_SHUTDOWN;
    }
    private static final int G_DRIVE_START_STOP_TYPE_NETWORK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DRIVE_START_STOP_TYPE_NETWORK = 2
     * }
     */
    public static int G_DRIVE_START_STOP_TYPE_NETWORK() {
        return G_DRIVE_START_STOP_TYPE_NETWORK;
    }
    private static final int G_DRIVE_START_STOP_TYPE_MULTIDISK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DRIVE_START_STOP_TYPE_MULTIDISK = 3
     * }
     */
    public static int G_DRIVE_START_STOP_TYPE_MULTIDISK() {
        return G_DRIVE_START_STOP_TYPE_MULTIDISK;
    }
    private static final int G_DRIVE_START_STOP_TYPE_PASSWORD = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DRIVE_START_STOP_TYPE_PASSWORD = 4
     * }
     */
    public static int G_DRIVE_START_STOP_TYPE_PASSWORD() {
        return G_DRIVE_START_STOP_TYPE_PASSWORD;
    }
    private static final int G_FILE_COPY_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_COPY_NONE = 0
     * }
     */
    public static int G_FILE_COPY_NONE() {
        return G_FILE_COPY_NONE;
    }
    private static final int G_FILE_COPY_OVERWRITE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_COPY_OVERWRITE = 1
     * }
     */
    public static int G_FILE_COPY_OVERWRITE() {
        return G_FILE_COPY_OVERWRITE;
    }
    private static final int G_FILE_COPY_BACKUP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_COPY_BACKUP = 2
     * }
     */
    public static int G_FILE_COPY_BACKUP() {
        return G_FILE_COPY_BACKUP;
    }
    private static final int G_FILE_COPY_NOFOLLOW_SYMLINKS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_COPY_NOFOLLOW_SYMLINKS = 4
     * }
     */
    public static int G_FILE_COPY_NOFOLLOW_SYMLINKS() {
        return G_FILE_COPY_NOFOLLOW_SYMLINKS;
    }
    private static final int G_FILE_COPY_ALL_METADATA = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_COPY_ALL_METADATA = 8
     * }
     */
    public static int G_FILE_COPY_ALL_METADATA() {
        return G_FILE_COPY_ALL_METADATA;
    }
    private static final int G_FILE_COPY_NO_FALLBACK_FOR_MOVE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_COPY_NO_FALLBACK_FOR_MOVE = 16
     * }
     */
    public static int G_FILE_COPY_NO_FALLBACK_FOR_MOVE() {
        return G_FILE_COPY_NO_FALLBACK_FOR_MOVE;
    }
    private static final int G_FILE_COPY_TARGET_DEFAULT_PERMS = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_COPY_TARGET_DEFAULT_PERMS = 32
     * }
     */
    public static int G_FILE_COPY_TARGET_DEFAULT_PERMS() {
        return G_FILE_COPY_TARGET_DEFAULT_PERMS;
    }
    private static final int G_FILE_MONITOR_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_NONE = 0
     * }
     */
    public static int G_FILE_MONITOR_NONE() {
        return G_FILE_MONITOR_NONE;
    }
    private static final int G_FILE_MONITOR_WATCH_MOUNTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_WATCH_MOUNTS = 1
     * }
     */
    public static int G_FILE_MONITOR_WATCH_MOUNTS() {
        return G_FILE_MONITOR_WATCH_MOUNTS;
    }
    private static final int G_FILE_MONITOR_SEND_MOVED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_SEND_MOVED = 2
     * }
     */
    public static int G_FILE_MONITOR_SEND_MOVED() {
        return G_FILE_MONITOR_SEND_MOVED;
    }
    private static final int G_FILE_MONITOR_WATCH_HARD_LINKS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_WATCH_HARD_LINKS = 4
     * }
     */
    public static int G_FILE_MONITOR_WATCH_HARD_LINKS() {
        return G_FILE_MONITOR_WATCH_HARD_LINKS;
    }
    private static final int G_FILE_MONITOR_WATCH_MOVES = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_WATCH_MOVES = 8
     * }
     */
    public static int G_FILE_MONITOR_WATCH_MOVES() {
        return G_FILE_MONITOR_WATCH_MOVES;
    }
    private static final int G_FILE_TYPE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TYPE_UNKNOWN = 0
     * }
     */
    public static int G_FILE_TYPE_UNKNOWN() {
        return G_FILE_TYPE_UNKNOWN;
    }
    private static final int G_FILE_TYPE_REGULAR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TYPE_REGULAR = 1
     * }
     */
    public static int G_FILE_TYPE_REGULAR() {
        return G_FILE_TYPE_REGULAR;
    }
    private static final int G_FILE_TYPE_DIRECTORY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TYPE_DIRECTORY = 2
     * }
     */
    public static int G_FILE_TYPE_DIRECTORY() {
        return G_FILE_TYPE_DIRECTORY;
    }
    private static final int G_FILE_TYPE_SYMBOLIC_LINK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TYPE_SYMBOLIC_LINK = 3
     * }
     */
    public static int G_FILE_TYPE_SYMBOLIC_LINK() {
        return G_FILE_TYPE_SYMBOLIC_LINK;
    }
    private static final int G_FILE_TYPE_SPECIAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TYPE_SPECIAL = 4
     * }
     */
    public static int G_FILE_TYPE_SPECIAL() {
        return G_FILE_TYPE_SPECIAL;
    }
    private static final int G_FILE_TYPE_SHORTCUT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TYPE_SHORTCUT = 5
     * }
     */
    public static int G_FILE_TYPE_SHORTCUT() {
        return G_FILE_TYPE_SHORTCUT;
    }
    private static final int G_FILE_TYPE_MOUNTABLE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_TYPE_MOUNTABLE = 6
     * }
     */
    public static int G_FILE_TYPE_MOUNTABLE() {
        return G_FILE_TYPE_MOUNTABLE;
    }
    private static final int G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS = 0
     * }
     */
    public static int G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS() {
        return G_FILESYSTEM_PREVIEW_TYPE_IF_ALWAYS;
    }
    private static final int G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL = 1
     * }
     */
    public static int G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL() {
        return G_FILESYSTEM_PREVIEW_TYPE_IF_LOCAL;
    }
    private static final int G_FILESYSTEM_PREVIEW_TYPE_NEVER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILESYSTEM_PREVIEW_TYPE_NEVER = 2
     * }
     */
    public static int G_FILESYSTEM_PREVIEW_TYPE_NEVER() {
        return G_FILESYSTEM_PREVIEW_TYPE_NEVER;
    }
    private static final int G_FILE_MONITOR_EVENT_CHANGED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_CHANGED = 0
     * }
     */
    public static int G_FILE_MONITOR_EVENT_CHANGED() {
        return G_FILE_MONITOR_EVENT_CHANGED;
    }
    private static final int G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT = 1
     * }
     */
    public static int G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT() {
        return G_FILE_MONITOR_EVENT_CHANGES_DONE_HINT;
    }
    private static final int G_FILE_MONITOR_EVENT_DELETED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_DELETED = 2
     * }
     */
    public static int G_FILE_MONITOR_EVENT_DELETED() {
        return G_FILE_MONITOR_EVENT_DELETED;
    }
    private static final int G_FILE_MONITOR_EVENT_CREATED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_CREATED = 3
     * }
     */
    public static int G_FILE_MONITOR_EVENT_CREATED() {
        return G_FILE_MONITOR_EVENT_CREATED;
    }
    private static final int G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED = 4
     * }
     */
    public static int G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED() {
        return G_FILE_MONITOR_EVENT_ATTRIBUTE_CHANGED;
    }
    private static final int G_FILE_MONITOR_EVENT_PRE_UNMOUNT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_PRE_UNMOUNT = 5
     * }
     */
    public static int G_FILE_MONITOR_EVENT_PRE_UNMOUNT() {
        return G_FILE_MONITOR_EVENT_PRE_UNMOUNT;
    }
    private static final int G_FILE_MONITOR_EVENT_UNMOUNTED = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_UNMOUNTED = 6
     * }
     */
    public static int G_FILE_MONITOR_EVENT_UNMOUNTED() {
        return G_FILE_MONITOR_EVENT_UNMOUNTED;
    }
    private static final int G_FILE_MONITOR_EVENT_MOVED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_MOVED = 7
     * }
     */
    public static int G_FILE_MONITOR_EVENT_MOVED() {
        return G_FILE_MONITOR_EVENT_MOVED;
    }
    private static final int G_FILE_MONITOR_EVENT_RENAMED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_RENAMED = 8
     * }
     */
    public static int G_FILE_MONITOR_EVENT_RENAMED() {
        return G_FILE_MONITOR_EVENT_RENAMED;
    }
    private static final int G_FILE_MONITOR_EVENT_MOVED_IN = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_MOVED_IN = 9
     * }
     */
    public static int G_FILE_MONITOR_EVENT_MOVED_IN() {
        return G_FILE_MONITOR_EVENT_MOVED_IN;
    }
    private static final int G_FILE_MONITOR_EVENT_MOVED_OUT = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_FILE_MONITOR_EVENT_MOVED_OUT = 10
     * }
     */
    public static int G_FILE_MONITOR_EVENT_MOVED_OUT() {
        return G_FILE_MONITOR_EVENT_MOVED_OUT;
    }
    private static final int G_IO_ERROR_FAILED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_FAILED = 0
     * }
     */
    public static int G_IO_ERROR_FAILED() {
        return G_IO_ERROR_FAILED;
    }
    private static final int G_IO_ERROR_NOT_FOUND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NOT_FOUND = 1
     * }
     */
    public static int G_IO_ERROR_NOT_FOUND() {
        return G_IO_ERROR_NOT_FOUND;
    }
    private static final int G_IO_ERROR_EXISTS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_EXISTS = 2
     * }
     */
    public static int G_IO_ERROR_EXISTS() {
        return G_IO_ERROR_EXISTS;
    }
    private static final int G_IO_ERROR_IS_DIRECTORY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_IS_DIRECTORY = 3
     * }
     */
    public static int G_IO_ERROR_IS_DIRECTORY() {
        return G_IO_ERROR_IS_DIRECTORY;
    }
    private static final int G_IO_ERROR_NOT_DIRECTORY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NOT_DIRECTORY = 4
     * }
     */
    public static int G_IO_ERROR_NOT_DIRECTORY() {
        return G_IO_ERROR_NOT_DIRECTORY;
    }
    private static final int G_IO_ERROR_NOT_EMPTY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NOT_EMPTY = 5
     * }
     */
    public static int G_IO_ERROR_NOT_EMPTY() {
        return G_IO_ERROR_NOT_EMPTY;
    }
    private static final int G_IO_ERROR_NOT_REGULAR_FILE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NOT_REGULAR_FILE = 6
     * }
     */
    public static int G_IO_ERROR_NOT_REGULAR_FILE() {
        return G_IO_ERROR_NOT_REGULAR_FILE;
    }
    private static final int G_IO_ERROR_NOT_SYMBOLIC_LINK = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NOT_SYMBOLIC_LINK = 7
     * }
     */
    public static int G_IO_ERROR_NOT_SYMBOLIC_LINK() {
        return G_IO_ERROR_NOT_SYMBOLIC_LINK;
    }
    private static final int G_IO_ERROR_NOT_MOUNTABLE_FILE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NOT_MOUNTABLE_FILE = 8
     * }
     */
    public static int G_IO_ERROR_NOT_MOUNTABLE_FILE() {
        return G_IO_ERROR_NOT_MOUNTABLE_FILE;
    }
    private static final int G_IO_ERROR_FILENAME_TOO_LONG = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_FILENAME_TOO_LONG = 9
     * }
     */
    public static int G_IO_ERROR_FILENAME_TOO_LONG() {
        return G_IO_ERROR_FILENAME_TOO_LONG;
    }
    private static final int G_IO_ERROR_INVALID_FILENAME = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_INVALID_FILENAME = 10
     * }
     */
    public static int G_IO_ERROR_INVALID_FILENAME() {
        return G_IO_ERROR_INVALID_FILENAME;
    }
    private static final int G_IO_ERROR_TOO_MANY_LINKS = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_TOO_MANY_LINKS = 11
     * }
     */
    public static int G_IO_ERROR_TOO_MANY_LINKS() {
        return G_IO_ERROR_TOO_MANY_LINKS;
    }
    private static final int G_IO_ERROR_NO_SPACE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NO_SPACE = 12
     * }
     */
    public static int G_IO_ERROR_NO_SPACE() {
        return G_IO_ERROR_NO_SPACE;
    }
    private static final int G_IO_ERROR_INVALID_ARGUMENT = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_INVALID_ARGUMENT = 13
     * }
     */
    public static int G_IO_ERROR_INVALID_ARGUMENT() {
        return G_IO_ERROR_INVALID_ARGUMENT;
    }
    private static final int G_IO_ERROR_PERMISSION_DENIED = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_PERMISSION_DENIED = 14
     * }
     */
    public static int G_IO_ERROR_PERMISSION_DENIED() {
        return G_IO_ERROR_PERMISSION_DENIED;
    }
    private static final int G_IO_ERROR_NOT_SUPPORTED = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NOT_SUPPORTED = 15
     * }
     */
    public static int G_IO_ERROR_NOT_SUPPORTED() {
        return G_IO_ERROR_NOT_SUPPORTED;
    }
    private static final int G_IO_ERROR_NOT_MOUNTED = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NOT_MOUNTED = 16
     * }
     */
    public static int G_IO_ERROR_NOT_MOUNTED() {
        return G_IO_ERROR_NOT_MOUNTED;
    }
    private static final int G_IO_ERROR_ALREADY_MOUNTED = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_ALREADY_MOUNTED = 17
     * }
     */
    public static int G_IO_ERROR_ALREADY_MOUNTED() {
        return G_IO_ERROR_ALREADY_MOUNTED;
    }
    private static final int G_IO_ERROR_CLOSED = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_CLOSED = 18
     * }
     */
    public static int G_IO_ERROR_CLOSED() {
        return G_IO_ERROR_CLOSED;
    }
    private static final int G_IO_ERROR_CANCELLED = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_CANCELLED = 19
     * }
     */
    public static int G_IO_ERROR_CANCELLED() {
        return G_IO_ERROR_CANCELLED;
    }
    private static final int G_IO_ERROR_PENDING = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_PENDING = 20
     * }
     */
    public static int G_IO_ERROR_PENDING() {
        return G_IO_ERROR_PENDING;
    }
    private static final int G_IO_ERROR_READ_ONLY = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_READ_ONLY = 21
     * }
     */
    public static int G_IO_ERROR_READ_ONLY() {
        return G_IO_ERROR_READ_ONLY;
    }
    private static final int G_IO_ERROR_CANT_CREATE_BACKUP = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_CANT_CREATE_BACKUP = 22
     * }
     */
    public static int G_IO_ERROR_CANT_CREATE_BACKUP() {
        return G_IO_ERROR_CANT_CREATE_BACKUP;
    }
    private static final int G_IO_ERROR_WRONG_ETAG = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_WRONG_ETAG = 23
     * }
     */
    public static int G_IO_ERROR_WRONG_ETAG() {
        return G_IO_ERROR_WRONG_ETAG;
    }
    private static final int G_IO_ERROR_TIMED_OUT = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_TIMED_OUT = 24
     * }
     */
    public static int G_IO_ERROR_TIMED_OUT() {
        return G_IO_ERROR_TIMED_OUT;
    }
    private static final int G_IO_ERROR_WOULD_RECURSE = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_WOULD_RECURSE = 25
     * }
     */
    public static int G_IO_ERROR_WOULD_RECURSE() {
        return G_IO_ERROR_WOULD_RECURSE;
    }
    private static final int G_IO_ERROR_BUSY = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_BUSY = 26
     * }
     */
    public static int G_IO_ERROR_BUSY() {
        return G_IO_ERROR_BUSY;
    }
    private static final int G_IO_ERROR_WOULD_BLOCK = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_WOULD_BLOCK = 27
     * }
     */
    public static int G_IO_ERROR_WOULD_BLOCK() {
        return G_IO_ERROR_WOULD_BLOCK;
    }
    private static final int G_IO_ERROR_HOST_NOT_FOUND = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_HOST_NOT_FOUND = 28
     * }
     */
    public static int G_IO_ERROR_HOST_NOT_FOUND() {
        return G_IO_ERROR_HOST_NOT_FOUND;
    }
    private static final int G_IO_ERROR_WOULD_MERGE = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_WOULD_MERGE = 29
     * }
     */
    public static int G_IO_ERROR_WOULD_MERGE() {
        return G_IO_ERROR_WOULD_MERGE;
    }
    private static final int G_IO_ERROR_FAILED_HANDLED = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_FAILED_HANDLED = 30
     * }
     */
    public static int G_IO_ERROR_FAILED_HANDLED() {
        return G_IO_ERROR_FAILED_HANDLED;
    }
    private static final int G_IO_ERROR_TOO_MANY_OPEN_FILES = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_TOO_MANY_OPEN_FILES = 31
     * }
     */
    public static int G_IO_ERROR_TOO_MANY_OPEN_FILES() {
        return G_IO_ERROR_TOO_MANY_OPEN_FILES;
    }
    private static final int G_IO_ERROR_NOT_INITIALIZED = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NOT_INITIALIZED = 32
     * }
     */
    public static int G_IO_ERROR_NOT_INITIALIZED() {
        return G_IO_ERROR_NOT_INITIALIZED;
    }
    private static final int G_IO_ERROR_ADDRESS_IN_USE = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_ADDRESS_IN_USE = 33
     * }
     */
    public static int G_IO_ERROR_ADDRESS_IN_USE() {
        return G_IO_ERROR_ADDRESS_IN_USE;
    }
    private static final int G_IO_ERROR_PARTIAL_INPUT = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_PARTIAL_INPUT = 34
     * }
     */
    public static int G_IO_ERROR_PARTIAL_INPUT() {
        return G_IO_ERROR_PARTIAL_INPUT;
    }
    private static final int G_IO_ERROR_INVALID_DATA = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_INVALID_DATA = 35
     * }
     */
    public static int G_IO_ERROR_INVALID_DATA() {
        return G_IO_ERROR_INVALID_DATA;
    }
    private static final int G_IO_ERROR_DBUS_ERROR = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_DBUS_ERROR = 36
     * }
     */
    public static int G_IO_ERROR_DBUS_ERROR() {
        return G_IO_ERROR_DBUS_ERROR;
    }
    private static final int G_IO_ERROR_HOST_UNREACHABLE = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_HOST_UNREACHABLE = 37
     * }
     */
    public static int G_IO_ERROR_HOST_UNREACHABLE() {
        return G_IO_ERROR_HOST_UNREACHABLE;
    }
    private static final int G_IO_ERROR_NETWORK_UNREACHABLE = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NETWORK_UNREACHABLE = 38
     * }
     */
    public static int G_IO_ERROR_NETWORK_UNREACHABLE() {
        return G_IO_ERROR_NETWORK_UNREACHABLE;
    }
    private static final int G_IO_ERROR_CONNECTION_REFUSED = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_CONNECTION_REFUSED = 39
     * }
     */
    public static int G_IO_ERROR_CONNECTION_REFUSED() {
        return G_IO_ERROR_CONNECTION_REFUSED;
    }
    private static final int G_IO_ERROR_PROXY_FAILED = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_PROXY_FAILED = 40
     * }
     */
    public static int G_IO_ERROR_PROXY_FAILED() {
        return G_IO_ERROR_PROXY_FAILED;
    }
    private static final int G_IO_ERROR_PROXY_AUTH_FAILED = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_PROXY_AUTH_FAILED = 41
     * }
     */
    public static int G_IO_ERROR_PROXY_AUTH_FAILED() {
        return G_IO_ERROR_PROXY_AUTH_FAILED;
    }
    private static final int G_IO_ERROR_PROXY_NEED_AUTH = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_PROXY_NEED_AUTH = 42
     * }
     */
    public static int G_IO_ERROR_PROXY_NEED_AUTH() {
        return G_IO_ERROR_PROXY_NEED_AUTH;
    }
    private static final int G_IO_ERROR_PROXY_NOT_ALLOWED = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_PROXY_NOT_ALLOWED = 43
     * }
     */
    public static int G_IO_ERROR_PROXY_NOT_ALLOWED() {
        return G_IO_ERROR_PROXY_NOT_ALLOWED;
    }
    private static final int G_IO_ERROR_BROKEN_PIPE = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_BROKEN_PIPE = 44
     * }
     */
    public static int G_IO_ERROR_BROKEN_PIPE() {
        return G_IO_ERROR_BROKEN_PIPE;
    }
    private static final int G_IO_ERROR_CONNECTION_CLOSED = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_CONNECTION_CLOSED = 44
     * }
     */
    public static int G_IO_ERROR_CONNECTION_CLOSED() {
        return G_IO_ERROR_CONNECTION_CLOSED;
    }
    private static final int G_IO_ERROR_NOT_CONNECTED = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NOT_CONNECTED = 45
     * }
     */
    public static int G_IO_ERROR_NOT_CONNECTED() {
        return G_IO_ERROR_NOT_CONNECTED;
    }
    private static final int G_IO_ERROR_MESSAGE_TOO_LARGE = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_MESSAGE_TOO_LARGE = 46
     * }
     */
    public static int G_IO_ERROR_MESSAGE_TOO_LARGE() {
        return G_IO_ERROR_MESSAGE_TOO_LARGE;
    }
    private static final int G_IO_ERROR_NO_SUCH_DEVICE = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_ERROR_NO_SUCH_DEVICE = 47
     * }
     */
    public static int G_IO_ERROR_NO_SUCH_DEVICE() {
        return G_IO_ERROR_NO_SUCH_DEVICE;
    }
    private static final int G_ASK_PASSWORD_NEED_PASSWORD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASK_PASSWORD_NEED_PASSWORD = 1
     * }
     */
    public static int G_ASK_PASSWORD_NEED_PASSWORD() {
        return G_ASK_PASSWORD_NEED_PASSWORD;
    }
    private static final int G_ASK_PASSWORD_NEED_USERNAME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASK_PASSWORD_NEED_USERNAME = 2
     * }
     */
    public static int G_ASK_PASSWORD_NEED_USERNAME() {
        return G_ASK_PASSWORD_NEED_USERNAME;
    }
    private static final int G_ASK_PASSWORD_NEED_DOMAIN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASK_PASSWORD_NEED_DOMAIN = 4
     * }
     */
    public static int G_ASK_PASSWORD_NEED_DOMAIN() {
        return G_ASK_PASSWORD_NEED_DOMAIN;
    }
    private static final int G_ASK_PASSWORD_SAVING_SUPPORTED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASK_PASSWORD_SAVING_SUPPORTED = 8
     * }
     */
    public static int G_ASK_PASSWORD_SAVING_SUPPORTED() {
        return G_ASK_PASSWORD_SAVING_SUPPORTED;
    }
    private static final int G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASK_PASSWORD_ANONYMOUS_SUPPORTED = 16
     * }
     */
    public static int G_ASK_PASSWORD_ANONYMOUS_SUPPORTED() {
        return G_ASK_PASSWORD_ANONYMOUS_SUPPORTED;
    }
    private static final int G_ASK_PASSWORD_TCRYPT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ASK_PASSWORD_TCRYPT = 32
     * }
     */
    public static int G_ASK_PASSWORD_TCRYPT() {
        return G_ASK_PASSWORD_TCRYPT;
    }
    private static final int G_PASSWORD_SAVE_NEVER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PASSWORD_SAVE_NEVER = 0
     * }
     */
    public static int G_PASSWORD_SAVE_NEVER() {
        return G_PASSWORD_SAVE_NEVER;
    }
    private static final int G_PASSWORD_SAVE_FOR_SESSION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PASSWORD_SAVE_FOR_SESSION = 1
     * }
     */
    public static int G_PASSWORD_SAVE_FOR_SESSION() {
        return G_PASSWORD_SAVE_FOR_SESSION;
    }
    private static final int G_PASSWORD_SAVE_PERMANENTLY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_PASSWORD_SAVE_PERMANENTLY = 2
     * }
     */
    public static int G_PASSWORD_SAVE_PERMANENTLY() {
        return G_PASSWORD_SAVE_PERMANENTLY;
    }
    private static final int G_MOUNT_OPERATION_HANDLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MOUNT_OPERATION_HANDLED = 0
     * }
     */
    public static int G_MOUNT_OPERATION_HANDLED() {
        return G_MOUNT_OPERATION_HANDLED;
    }
    private static final int G_MOUNT_OPERATION_ABORTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MOUNT_OPERATION_ABORTED = 1
     * }
     */
    public static int G_MOUNT_OPERATION_ABORTED() {
        return G_MOUNT_OPERATION_ABORTED;
    }
    private static final int G_MOUNT_OPERATION_UNHANDLED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_MOUNT_OPERATION_UNHANDLED = 2
     * }
     */
    public static int G_MOUNT_OPERATION_UNHANDLED() {
        return G_MOUNT_OPERATION_UNHANDLED;
    }
    private static final int G_OUTPUT_STREAM_SPLICE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OUTPUT_STREAM_SPLICE_NONE = 0
     * }
     */
    public static int G_OUTPUT_STREAM_SPLICE_NONE() {
        return G_OUTPUT_STREAM_SPLICE_NONE;
    }
    private static final int G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE = 1
     * }
     */
    public static int G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE() {
        return G_OUTPUT_STREAM_SPLICE_CLOSE_SOURCE;
    }
    private static final int G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET = 2
     * }
     */
    public static int G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET() {
        return G_OUTPUT_STREAM_SPLICE_CLOSE_TARGET;
    }
    private static final int G_IO_STREAM_SPLICE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_STREAM_SPLICE_NONE = 0
     * }
     */
    public static int G_IO_STREAM_SPLICE_NONE() {
        return G_IO_STREAM_SPLICE_NONE;
    }
    private static final int G_IO_STREAM_SPLICE_CLOSE_STREAM1 = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_STREAM_SPLICE_CLOSE_STREAM1 = 1
     * }
     */
    public static int G_IO_STREAM_SPLICE_CLOSE_STREAM1() {
        return G_IO_STREAM_SPLICE_CLOSE_STREAM1;
    }
    private static final int G_IO_STREAM_SPLICE_CLOSE_STREAM2 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_STREAM_SPLICE_CLOSE_STREAM2 = 2
     * }
     */
    public static int G_IO_STREAM_SPLICE_CLOSE_STREAM2() {
        return G_IO_STREAM_SPLICE_CLOSE_STREAM2;
    }
    private static final int G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_IO_STREAM_SPLICE_WAIT_FOR_BOTH = 4
     * }
     */
    public static int G_IO_STREAM_SPLICE_WAIT_FOR_BOTH() {
        return G_IO_STREAM_SPLICE_WAIT_FOR_BOTH;
    }
    private static final int G_EMBLEM_ORIGIN_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_EMBLEM_ORIGIN_UNKNOWN = 0
     * }
     */
    public static int G_EMBLEM_ORIGIN_UNKNOWN() {
        return G_EMBLEM_ORIGIN_UNKNOWN;
    }
    private static final int G_EMBLEM_ORIGIN_DEVICE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_EMBLEM_ORIGIN_DEVICE = 1
     * }
     */
    public static int G_EMBLEM_ORIGIN_DEVICE() {
        return G_EMBLEM_ORIGIN_DEVICE;
    }
    private static final int G_EMBLEM_ORIGIN_LIVEMETADATA = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_EMBLEM_ORIGIN_LIVEMETADATA = 2
     * }
     */
    public static int G_EMBLEM_ORIGIN_LIVEMETADATA() {
        return G_EMBLEM_ORIGIN_LIVEMETADATA;
    }
    private static final int G_EMBLEM_ORIGIN_TAG = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_EMBLEM_ORIGIN_TAG = 3
     * }
     */
    public static int G_EMBLEM_ORIGIN_TAG() {
        return G_EMBLEM_ORIGIN_TAG;
    }
    private static final int G_RESOLVER_ERROR_NOT_FOUND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_ERROR_NOT_FOUND = 0
     * }
     */
    public static int G_RESOLVER_ERROR_NOT_FOUND() {
        return G_RESOLVER_ERROR_NOT_FOUND;
    }
    private static final int G_RESOLVER_ERROR_TEMPORARY_FAILURE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_ERROR_TEMPORARY_FAILURE = 1
     * }
     */
    public static int G_RESOLVER_ERROR_TEMPORARY_FAILURE() {
        return G_RESOLVER_ERROR_TEMPORARY_FAILURE;
    }
    private static final int G_RESOLVER_ERROR_INTERNAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_ERROR_INTERNAL = 2
     * }
     */
    public static int G_RESOLVER_ERROR_INTERNAL() {
        return G_RESOLVER_ERROR_INTERNAL;
    }
    private static final int G_RESOLVER_RECORD_SRV = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_RECORD_SRV = 1
     * }
     */
    public static int G_RESOLVER_RECORD_SRV() {
        return G_RESOLVER_RECORD_SRV;
    }
    private static final int G_RESOLVER_RECORD_MX = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_RECORD_MX = 2
     * }
     */
    public static int G_RESOLVER_RECORD_MX() {
        return G_RESOLVER_RECORD_MX;
    }
    private static final int G_RESOLVER_RECORD_TXT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_RECORD_TXT = 3
     * }
     */
    public static int G_RESOLVER_RECORD_TXT() {
        return G_RESOLVER_RECORD_TXT;
    }
    private static final int G_RESOLVER_RECORD_SOA = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_RECORD_SOA = 4
     * }
     */
    public static int G_RESOLVER_RECORD_SOA() {
        return G_RESOLVER_RECORD_SOA;
    }
    private static final int G_RESOLVER_RECORD_NS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOLVER_RECORD_NS = 5
     * }
     */
    public static int G_RESOLVER_RECORD_NS() {
        return G_RESOLVER_RECORD_NS;
    }
    private static final int G_RESOURCE_ERROR_NOT_FOUND = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOURCE_ERROR_NOT_FOUND = 0
     * }
     */
    public static int G_RESOURCE_ERROR_NOT_FOUND() {
        return G_RESOURCE_ERROR_NOT_FOUND;
    }
    private static final int G_RESOURCE_ERROR_INTERNAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOURCE_ERROR_INTERNAL = 1
     * }
     */
    public static int G_RESOURCE_ERROR_INTERNAL() {
        return G_RESOURCE_ERROR_INTERNAL;
    }
    private static final int G_RESOURCE_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOURCE_FLAGS_NONE = 0
     * }
     */
    public static int G_RESOURCE_FLAGS_NONE() {
        return G_RESOURCE_FLAGS_NONE;
    }
    private static final int G_RESOURCE_FLAGS_COMPRESSED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOURCE_FLAGS_COMPRESSED = 1
     * }
     */
    public static int G_RESOURCE_FLAGS_COMPRESSED() {
        return G_RESOURCE_FLAGS_COMPRESSED;
    }
    private static final int G_RESOURCE_LOOKUP_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_RESOURCE_LOOKUP_FLAGS_NONE = 0
     * }
     */
    public static int G_RESOURCE_LOOKUP_FLAGS_NONE() {
        return G_RESOURCE_LOOKUP_FLAGS_NONE;
    }
    private static final int G_SOCKET_FAMILY_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_FAMILY_INVALID = 0
     * }
     */
    public static int G_SOCKET_FAMILY_INVALID() {
        return G_SOCKET_FAMILY_INVALID;
    }
    private static final int G_SOCKET_FAMILY_UNIX = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_FAMILY_UNIX = 1
     * }
     */
    public static int G_SOCKET_FAMILY_UNIX() {
        return G_SOCKET_FAMILY_UNIX;
    }
    private static final int G_SOCKET_FAMILY_IPV4 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_FAMILY_IPV4 = 2
     * }
     */
    public static int G_SOCKET_FAMILY_IPV4() {
        return G_SOCKET_FAMILY_IPV4;
    }
    private static final int G_SOCKET_FAMILY_IPV6 = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_FAMILY_IPV6 = 10
     * }
     */
    public static int G_SOCKET_FAMILY_IPV6() {
        return G_SOCKET_FAMILY_IPV6;
    }
    private static final int G_SOCKET_TYPE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_TYPE_INVALID = 0
     * }
     */
    public static int G_SOCKET_TYPE_INVALID() {
        return G_SOCKET_TYPE_INVALID;
    }
    private static final int G_SOCKET_TYPE_STREAM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_TYPE_STREAM = 1
     * }
     */
    public static int G_SOCKET_TYPE_STREAM() {
        return G_SOCKET_TYPE_STREAM;
    }
    private static final int G_SOCKET_TYPE_DATAGRAM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_TYPE_DATAGRAM = 2
     * }
     */
    public static int G_SOCKET_TYPE_DATAGRAM() {
        return G_SOCKET_TYPE_DATAGRAM;
    }
    private static final int G_SOCKET_TYPE_SEQPACKET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_TYPE_SEQPACKET = 3
     * }
     */
    public static int G_SOCKET_TYPE_SEQPACKET() {
        return G_SOCKET_TYPE_SEQPACKET;
    }
    private static final int G_SOCKET_MSG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_MSG_NONE = 0
     * }
     */
    public static int G_SOCKET_MSG_NONE() {
        return G_SOCKET_MSG_NONE;
    }
    private static final int G_SOCKET_MSG_OOB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_MSG_OOB = 1
     * }
     */
    public static int G_SOCKET_MSG_OOB() {
        return G_SOCKET_MSG_OOB;
    }
    private static final int G_SOCKET_MSG_PEEK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_MSG_PEEK = 2
     * }
     */
    public static int G_SOCKET_MSG_PEEK() {
        return G_SOCKET_MSG_PEEK;
    }
    private static final int G_SOCKET_MSG_DONTROUTE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_MSG_DONTROUTE = 4
     * }
     */
    public static int G_SOCKET_MSG_DONTROUTE() {
        return G_SOCKET_MSG_DONTROUTE;
    }
    private static final int G_SOCKET_PROTOCOL_UNKNOWN = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_PROTOCOL_UNKNOWN = -1
     * }
     */
    public static int G_SOCKET_PROTOCOL_UNKNOWN() {
        return G_SOCKET_PROTOCOL_UNKNOWN;
    }
    private static final int G_SOCKET_PROTOCOL_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_PROTOCOL_DEFAULT = 0
     * }
     */
    public static int G_SOCKET_PROTOCOL_DEFAULT() {
        return G_SOCKET_PROTOCOL_DEFAULT;
    }
    private static final int G_SOCKET_PROTOCOL_TCP = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_PROTOCOL_TCP = 6
     * }
     */
    public static int G_SOCKET_PROTOCOL_TCP() {
        return G_SOCKET_PROTOCOL_TCP;
    }
    private static final int G_SOCKET_PROTOCOL_UDP = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_PROTOCOL_UDP = 17
     * }
     */
    public static int G_SOCKET_PROTOCOL_UDP() {
        return G_SOCKET_PROTOCOL_UDP;
    }
    private static final int G_SOCKET_PROTOCOL_SCTP = (int)132L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SOCKET_PROTOCOL_SCTP = 132
     * }
     */
    public static int G_SOCKET_PROTOCOL_SCTP() {
        return G_SOCKET_PROTOCOL_SCTP;
    }
    private static final int G_ZLIB_COMPRESSOR_FORMAT_ZLIB = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ZLIB_COMPRESSOR_FORMAT_ZLIB = 0
     * }
     */
    public static int G_ZLIB_COMPRESSOR_FORMAT_ZLIB() {
        return G_ZLIB_COMPRESSOR_FORMAT_ZLIB;
    }
    private static final int G_ZLIB_COMPRESSOR_FORMAT_GZIP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ZLIB_COMPRESSOR_FORMAT_GZIP = 1
     * }
     */
    public static int G_ZLIB_COMPRESSOR_FORMAT_GZIP() {
        return G_ZLIB_COMPRESSOR_FORMAT_GZIP;
    }
    private static final int G_ZLIB_COMPRESSOR_FORMAT_RAW = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ZLIB_COMPRESSOR_FORMAT_RAW = 2
     * }
     */
    public static int G_ZLIB_COMPRESSOR_FORMAT_RAW() {
        return G_ZLIB_COMPRESSOR_FORMAT_RAW;
    }
    private static final int G_UNIX_SOCKET_ADDRESS_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNIX_SOCKET_ADDRESS_INVALID = 0
     * }
     */
    public static int G_UNIX_SOCKET_ADDRESS_INVALID() {
        return G_UNIX_SOCKET_ADDRESS_INVALID;
    }
    private static final int G_UNIX_SOCKET_ADDRESS_ANONYMOUS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNIX_SOCKET_ADDRESS_ANONYMOUS = 1
     * }
     */
    public static int G_UNIX_SOCKET_ADDRESS_ANONYMOUS() {
        return G_UNIX_SOCKET_ADDRESS_ANONYMOUS;
    }
    private static final int G_UNIX_SOCKET_ADDRESS_PATH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNIX_SOCKET_ADDRESS_PATH = 2
     * }
     */
    public static int G_UNIX_SOCKET_ADDRESS_PATH() {
        return G_UNIX_SOCKET_ADDRESS_PATH;
    }
    private static final int G_UNIX_SOCKET_ADDRESS_ABSTRACT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNIX_SOCKET_ADDRESS_ABSTRACT = 3
     * }
     */
    public static int G_UNIX_SOCKET_ADDRESS_ABSTRACT() {
        return G_UNIX_SOCKET_ADDRESS_ABSTRACT;
    }
    private static final int G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED = 4
     * }
     */
    public static int G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED() {
        return G_UNIX_SOCKET_ADDRESS_ABSTRACT_PADDED;
    }
    private static final int G_BUS_TYPE_STARTER = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BUS_TYPE_STARTER = -1
     * }
     */
    public static int G_BUS_TYPE_STARTER() {
        return G_BUS_TYPE_STARTER;
    }
    private static final int G_BUS_TYPE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BUS_TYPE_NONE = 0
     * }
     */
    public static int G_BUS_TYPE_NONE() {
        return G_BUS_TYPE_NONE;
    }
    private static final int G_BUS_TYPE_SYSTEM = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BUS_TYPE_SYSTEM = 1
     * }
     */
    public static int G_BUS_TYPE_SYSTEM() {
        return G_BUS_TYPE_SYSTEM;
    }
    private static final int G_BUS_TYPE_SESSION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BUS_TYPE_SESSION = 2
     * }
     */
    public static int G_BUS_TYPE_SESSION() {
        return G_BUS_TYPE_SESSION;
    }
    private static final int G_BUS_NAME_OWNER_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BUS_NAME_OWNER_FLAGS_NONE = 0
     * }
     */
    public static int G_BUS_NAME_OWNER_FLAGS_NONE() {
        return G_BUS_NAME_OWNER_FLAGS_NONE;
    }
    private static final int G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT = 1
     * }
     */
    public static int G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT() {
        return G_BUS_NAME_OWNER_FLAGS_ALLOW_REPLACEMENT;
    }
    private static final int G_BUS_NAME_OWNER_FLAGS_REPLACE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BUS_NAME_OWNER_FLAGS_REPLACE = 2
     * }
     */
    public static int G_BUS_NAME_OWNER_FLAGS_REPLACE() {
        return G_BUS_NAME_OWNER_FLAGS_REPLACE;
    }
    private static final int G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE = 4
     * }
     */
    public static int G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE() {
        return G_BUS_NAME_OWNER_FLAGS_DO_NOT_QUEUE;
    }
    private static final int G_BUS_NAME_WATCHER_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BUS_NAME_WATCHER_FLAGS_NONE = 0
     * }
     */
    public static int G_BUS_NAME_WATCHER_FLAGS_NONE() {
        return G_BUS_NAME_WATCHER_FLAGS_NONE;
    }
    private static final int G_BUS_NAME_WATCHER_FLAGS_AUTO_START = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_BUS_NAME_WATCHER_FLAGS_AUTO_START = 1
     * }
     */
    public static int G_BUS_NAME_WATCHER_FLAGS_AUTO_START() {
        return G_BUS_NAME_WATCHER_FLAGS_AUTO_START;
    }
    private static final int G_DBUS_PROXY_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_PROXY_FLAGS_NONE = 0
     * }
     */
    public static int G_DBUS_PROXY_FLAGS_NONE() {
        return G_DBUS_PROXY_FLAGS_NONE;
    }
    private static final int G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES = 1
     * }
     */
    public static int G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES() {
        return G_DBUS_PROXY_FLAGS_DO_NOT_LOAD_PROPERTIES;
    }
    private static final int G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS = 2
     * }
     */
    public static int G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS() {
        return G_DBUS_PROXY_FLAGS_DO_NOT_CONNECT_SIGNALS;
    }
    private static final int G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START = 4
     * }
     */
    public static int G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START() {
        return G_DBUS_PROXY_FLAGS_DO_NOT_AUTO_START;
    }
    private static final int G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES = 8
     * }
     */
    public static int G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES() {
        return G_DBUS_PROXY_FLAGS_GET_INVALIDATED_PROPERTIES;
    }
}

