// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_9 extends app_indicator_h_10 {

    app_indicator_h_9() {
        // Should not be called directly
    }
    private static final int CAIRO_LINE_JOIN_MITER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_line_join.CAIRO_LINE_JOIN_MITER = 0
     * }
     */
    public static int CAIRO_LINE_JOIN_MITER() {
        return CAIRO_LINE_JOIN_MITER;
    }
    private static final int CAIRO_LINE_JOIN_ROUND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_line_join.CAIRO_LINE_JOIN_ROUND = 1
     * }
     */
    public static int CAIRO_LINE_JOIN_ROUND() {
        return CAIRO_LINE_JOIN_ROUND;
    }
    private static final int CAIRO_LINE_JOIN_BEVEL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_line_join.CAIRO_LINE_JOIN_BEVEL = 2
     * }
     */
    public static int CAIRO_LINE_JOIN_BEVEL() {
        return CAIRO_LINE_JOIN_BEVEL;
    }

    private static class cairo_set_line_join {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_line_join"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_line_join(cairo_t *cr, cairo_line_join_t line_join)
     * }
     */
    public static FunctionDescriptor cairo_set_line_join$descriptor() {
        return cairo_set_line_join.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_line_join(cairo_t *cr, cairo_line_join_t line_join)
     * }
     */
    public static MethodHandle cairo_set_line_join$handle() {
        return cairo_set_line_join.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_line_join(cairo_t *cr, cairo_line_join_t line_join)
     * }
     */
    public static void cairo_set_line_join(MemorySegment cr, int line_join) {
        var mh$ = cairo_set_line_join.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_line_join", cr, line_join);
            }
            mh$.invokeExact(cr, line_join);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_dash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_dash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_dash(cairo_t *cr, const double *dashes, int num_dashes, double offset)
     * }
     */
    public static FunctionDescriptor cairo_set_dash$descriptor() {
        return cairo_set_dash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_dash(cairo_t *cr, const double *dashes, int num_dashes, double offset)
     * }
     */
    public static MethodHandle cairo_set_dash$handle() {
        return cairo_set_dash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_dash(cairo_t *cr, const double *dashes, int num_dashes, double offset)
     * }
     */
    public static void cairo_set_dash(MemorySegment cr, MemorySegment dashes, int num_dashes, double offset) {
        var mh$ = cairo_set_dash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_dash", cr, dashes, num_dashes, offset);
            }
            mh$.invokeExact(cr, dashes, num_dashes, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_miter_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_miter_limit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_miter_limit(cairo_t *cr, double limit)
     * }
     */
    public static FunctionDescriptor cairo_set_miter_limit$descriptor() {
        return cairo_set_miter_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_miter_limit(cairo_t *cr, double limit)
     * }
     */
    public static MethodHandle cairo_set_miter_limit$handle() {
        return cairo_set_miter_limit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_miter_limit(cairo_t *cr, double limit)
     * }
     */
    public static void cairo_set_miter_limit(MemorySegment cr, double limit) {
        var mh$ = cairo_set_miter_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_miter_limit", cr, limit);
            }
            mh$.invokeExact(cr, limit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_translate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_translate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_translate(cairo_t *cr, double tx, double ty)
     * }
     */
    public static FunctionDescriptor cairo_translate$descriptor() {
        return cairo_translate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_translate(cairo_t *cr, double tx, double ty)
     * }
     */
    public static MethodHandle cairo_translate$handle() {
        return cairo_translate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_translate(cairo_t *cr, double tx, double ty)
     * }
     */
    public static void cairo_translate(MemorySegment cr, double tx, double ty) {
        var mh$ = cairo_translate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_translate", cr, tx, ty);
            }
            mh$.invokeExact(cr, tx, ty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_scale(cairo_t *cr, double sx, double sy)
     * }
     */
    public static FunctionDescriptor cairo_scale$descriptor() {
        return cairo_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_scale(cairo_t *cr, double sx, double sy)
     * }
     */
    public static MethodHandle cairo_scale$handle() {
        return cairo_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_scale(cairo_t *cr, double sx, double sy)
     * }
     */
    public static void cairo_scale(MemorySegment cr, double sx, double sy) {
        var mh$ = cairo_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scale", cr, sx, sy);
            }
            mh$.invokeExact(cr, sx, sy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_rotate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_rotate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_rotate(cairo_t *cr, double angle)
     * }
     */
    public static FunctionDescriptor cairo_rotate$descriptor() {
        return cairo_rotate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_rotate(cairo_t *cr, double angle)
     * }
     */
    public static MethodHandle cairo_rotate$handle() {
        return cairo_rotate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_rotate(cairo_t *cr, double angle)
     * }
     */
    public static void cairo_rotate(MemorySegment cr, double angle) {
        var mh$ = cairo_rotate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_rotate", cr, angle);
            }
            mh$.invokeExact(cr, angle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_transform {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_transform"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_transform(cairo_t *cr, const cairo_matrix_t *matrix)
     * }
     */
    public static FunctionDescriptor cairo_transform$descriptor() {
        return cairo_transform.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_transform(cairo_t *cr, const cairo_matrix_t *matrix)
     * }
     */
    public static MethodHandle cairo_transform$handle() {
        return cairo_transform.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_transform(cairo_t *cr, const cairo_matrix_t *matrix)
     * }
     */
    public static void cairo_transform(MemorySegment cr, MemorySegment matrix) {
        var mh$ = cairo_transform.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_transform", cr, matrix);
            }
            mh$.invokeExact(cr, matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_matrix(cairo_t *cr, const cairo_matrix_t *matrix)
     * }
     */
    public static FunctionDescriptor cairo_set_matrix$descriptor() {
        return cairo_set_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_matrix(cairo_t *cr, const cairo_matrix_t *matrix)
     * }
     */
    public static MethodHandle cairo_set_matrix$handle() {
        return cairo_set_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_matrix(cairo_t *cr, const cairo_matrix_t *matrix)
     * }
     */
    public static void cairo_set_matrix(MemorySegment cr, MemorySegment matrix) {
        var mh$ = cairo_set_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_matrix", cr, matrix);
            }
            mh$.invokeExact(cr, matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_identity_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_identity_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_identity_matrix(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_identity_matrix$descriptor() {
        return cairo_identity_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_identity_matrix(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_identity_matrix$handle() {
        return cairo_identity_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_identity_matrix(cairo_t *cr)
     * }
     */
    public static void cairo_identity_matrix(MemorySegment cr) {
        var mh$ = cairo_identity_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_identity_matrix", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_to_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_to_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_user_to_device(cairo_t *cr, double *x, double *y)
     * }
     */
    public static FunctionDescriptor cairo_user_to_device$descriptor() {
        return cairo_user_to_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_user_to_device(cairo_t *cr, double *x, double *y)
     * }
     */
    public static MethodHandle cairo_user_to_device$handle() {
        return cairo_user_to_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_user_to_device(cairo_t *cr, double *x, double *y)
     * }
     */
    public static void cairo_user_to_device(MemorySegment cr, MemorySegment x, MemorySegment y) {
        var mh$ = cairo_user_to_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_to_device", cr, x, y);
            }
            mh$.invokeExact(cr, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_to_device_distance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_to_device_distance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_user_to_device_distance(cairo_t *cr, double *dx, double *dy)
     * }
     */
    public static FunctionDescriptor cairo_user_to_device_distance$descriptor() {
        return cairo_user_to_device_distance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_user_to_device_distance(cairo_t *cr, double *dx, double *dy)
     * }
     */
    public static MethodHandle cairo_user_to_device_distance$handle() {
        return cairo_user_to_device_distance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_user_to_device_distance(cairo_t *cr, double *dx, double *dy)
     * }
     */
    public static void cairo_user_to_device_distance(MemorySegment cr, MemorySegment dx, MemorySegment dy) {
        var mh$ = cairo_user_to_device_distance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_to_device_distance", cr, dx, dy);
            }
            mh$.invokeExact(cr, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_to_user {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_to_user"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_device_to_user(cairo_t *cr, double *x, double *y)
     * }
     */
    public static FunctionDescriptor cairo_device_to_user$descriptor() {
        return cairo_device_to_user.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_device_to_user(cairo_t *cr, double *x, double *y)
     * }
     */
    public static MethodHandle cairo_device_to_user$handle() {
        return cairo_device_to_user.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_device_to_user(cairo_t *cr, double *x, double *y)
     * }
     */
    public static void cairo_device_to_user(MemorySegment cr, MemorySegment x, MemorySegment y) {
        var mh$ = cairo_device_to_user.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_to_user", cr, x, y);
            }
            mh$.invokeExact(cr, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_to_user_distance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_to_user_distance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_device_to_user_distance(cairo_t *cr, double *dx, double *dy)
     * }
     */
    public static FunctionDescriptor cairo_device_to_user_distance$descriptor() {
        return cairo_device_to_user_distance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_device_to_user_distance(cairo_t *cr, double *dx, double *dy)
     * }
     */
    public static MethodHandle cairo_device_to_user_distance$handle() {
        return cairo_device_to_user_distance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_device_to_user_distance(cairo_t *cr, double *dx, double *dy)
     * }
     */
    public static void cairo_device_to_user_distance(MemorySegment cr, MemorySegment dx, MemorySegment dy) {
        var mh$ = cairo_device_to_user_distance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_to_user_distance", cr, dx, dy);
            }
            mh$.invokeExact(cr, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_new_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_new_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_new_path(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_new_path$descriptor() {
        return cairo_new_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_new_path(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_new_path$handle() {
        return cairo_new_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_new_path(cairo_t *cr)
     * }
     */
    public static void cairo_new_path(MemorySegment cr) {
        var mh$ = cairo_new_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_new_path", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_move_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_move_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_move_to(cairo_t *cr, double x, double y)
     * }
     */
    public static FunctionDescriptor cairo_move_to$descriptor() {
        return cairo_move_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_move_to(cairo_t *cr, double x, double y)
     * }
     */
    public static MethodHandle cairo_move_to$handle() {
        return cairo_move_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_move_to(cairo_t *cr, double x, double y)
     * }
     */
    public static void cairo_move_to(MemorySegment cr, double x, double y) {
        var mh$ = cairo_move_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_move_to", cr, x, y);
            }
            mh$.invokeExact(cr, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_new_sub_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_new_sub_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_new_sub_path(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_new_sub_path$descriptor() {
        return cairo_new_sub_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_new_sub_path(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_new_sub_path$handle() {
        return cairo_new_sub_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_new_sub_path(cairo_t *cr)
     * }
     */
    public static void cairo_new_sub_path(MemorySegment cr) {
        var mh$ = cairo_new_sub_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_new_sub_path", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_line_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_line_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_line_to(cairo_t *cr, double x, double y)
     * }
     */
    public static FunctionDescriptor cairo_line_to$descriptor() {
        return cairo_line_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_line_to(cairo_t *cr, double x, double y)
     * }
     */
    public static MethodHandle cairo_line_to$handle() {
        return cairo_line_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_line_to(cairo_t *cr, double x, double y)
     * }
     */
    public static void cairo_line_to(MemorySegment cr, double x, double y) {
        var mh$ = cairo_line_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_line_to", cr, x, y);
            }
            mh$.invokeExact(cr, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_curve_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_curve_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_curve_to(cairo_t *cr, double x1, double y1, double x2, double y2, double x3, double y3)
     * }
     */
    public static FunctionDescriptor cairo_curve_to$descriptor() {
        return cairo_curve_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_curve_to(cairo_t *cr, double x1, double y1, double x2, double y2, double x3, double y3)
     * }
     */
    public static MethodHandle cairo_curve_to$handle() {
        return cairo_curve_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_curve_to(cairo_t *cr, double x1, double y1, double x2, double y2, double x3, double y3)
     * }
     */
    public static void cairo_curve_to(MemorySegment cr, double x1, double y1, double x2, double y2, double x3, double y3) {
        var mh$ = cairo_curve_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_curve_to", cr, x1, y1, x2, y2, x3, y3);
            }
            mh$.invokeExact(cr, x1, y1, x2, y2, x3, y3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_arc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_arc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_arc(cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2)
     * }
     */
    public static FunctionDescriptor cairo_arc$descriptor() {
        return cairo_arc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_arc(cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2)
     * }
     */
    public static MethodHandle cairo_arc$handle() {
        return cairo_arc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_arc(cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2)
     * }
     */
    public static void cairo_arc(MemorySegment cr, double xc, double yc, double radius, double angle1, double angle2) {
        var mh$ = cairo_arc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_arc", cr, xc, yc, radius, angle1, angle2);
            }
            mh$.invokeExact(cr, xc, yc, radius, angle1, angle2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_arc_negative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_arc_negative"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_arc_negative(cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2)
     * }
     */
    public static FunctionDescriptor cairo_arc_negative$descriptor() {
        return cairo_arc_negative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_arc_negative(cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2)
     * }
     */
    public static MethodHandle cairo_arc_negative$handle() {
        return cairo_arc_negative.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_arc_negative(cairo_t *cr, double xc, double yc, double radius, double angle1, double angle2)
     * }
     */
    public static void cairo_arc_negative(MemorySegment cr, double xc, double yc, double radius, double angle1, double angle2) {
        var mh$ = cairo_arc_negative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_arc_negative", cr, xc, yc, radius, angle1, angle2);
            }
            mh$.invokeExact(cr, xc, yc, radius, angle1, angle2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_rel_move_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_rel_move_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_rel_move_to(cairo_t *cr, double dx, double dy)
     * }
     */
    public static FunctionDescriptor cairo_rel_move_to$descriptor() {
        return cairo_rel_move_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_rel_move_to(cairo_t *cr, double dx, double dy)
     * }
     */
    public static MethodHandle cairo_rel_move_to$handle() {
        return cairo_rel_move_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_rel_move_to(cairo_t *cr, double dx, double dy)
     * }
     */
    public static void cairo_rel_move_to(MemorySegment cr, double dx, double dy) {
        var mh$ = cairo_rel_move_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_rel_move_to", cr, dx, dy);
            }
            mh$.invokeExact(cr, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_rel_line_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_rel_line_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_rel_line_to(cairo_t *cr, double dx, double dy)
     * }
     */
    public static FunctionDescriptor cairo_rel_line_to$descriptor() {
        return cairo_rel_line_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_rel_line_to(cairo_t *cr, double dx, double dy)
     * }
     */
    public static MethodHandle cairo_rel_line_to$handle() {
        return cairo_rel_line_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_rel_line_to(cairo_t *cr, double dx, double dy)
     * }
     */
    public static void cairo_rel_line_to(MemorySegment cr, double dx, double dy) {
        var mh$ = cairo_rel_line_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_rel_line_to", cr, dx, dy);
            }
            mh$.invokeExact(cr, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_rel_curve_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_rel_curve_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_rel_curve_to(cairo_t *cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3)
     * }
     */
    public static FunctionDescriptor cairo_rel_curve_to$descriptor() {
        return cairo_rel_curve_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_rel_curve_to(cairo_t *cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3)
     * }
     */
    public static MethodHandle cairo_rel_curve_to$handle() {
        return cairo_rel_curve_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_rel_curve_to(cairo_t *cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3)
     * }
     */
    public static void cairo_rel_curve_to(MemorySegment cr, double dx1, double dy1, double dx2, double dy2, double dx3, double dy3) {
        var mh$ = cairo_rel_curve_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_rel_curve_to", cr, dx1, dy1, dx2, dy2, dx3, dy3);
            }
            mh$.invokeExact(cr, dx1, dy1, dx2, dy2, dx3, dy3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_rectangle(cairo_t *cr, double x, double y, double width, double height)
     * }
     */
    public static FunctionDescriptor cairo_rectangle$descriptor() {
        return cairo_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_rectangle(cairo_t *cr, double x, double y, double width, double height)
     * }
     */
    public static MethodHandle cairo_rectangle$handle() {
        return cairo_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_rectangle(cairo_t *cr, double x, double y, double width, double height)
     * }
     */
    public static void cairo_rectangle(MemorySegment cr, double x, double y, double width, double height) {
        var mh$ = cairo_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_rectangle", cr, x, y, width, height);
            }
            mh$.invokeExact(cr, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_close_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_close_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_close_path(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_close_path$descriptor() {
        return cairo_close_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_close_path(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_close_path$handle() {
        return cairo_close_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_close_path(cairo_t *cr)
     * }
     */
    public static void cairo_close_path(MemorySegment cr) {
        var mh$ = cairo_close_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_close_path", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_path_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_path_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_path_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static FunctionDescriptor cairo_path_extents$descriptor() {
        return cairo_path_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_path_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static MethodHandle cairo_path_extents$handle() {
        return cairo_path_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_path_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static void cairo_path_extents(MemorySegment cr, MemorySegment x1, MemorySegment y1, MemorySegment x2, MemorySegment y2) {
        var mh$ = cairo_path_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_path_extents", cr, x1, y1, x2, y2);
            }
            mh$.invokeExact(cr, x1, y1, x2, y2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_paint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_paint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_paint(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_paint$descriptor() {
        return cairo_paint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_paint(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_paint$handle() {
        return cairo_paint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_paint(cairo_t *cr)
     * }
     */
    public static void cairo_paint(MemorySegment cr) {
        var mh$ = cairo_paint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_paint", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_paint_with_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_paint_with_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_paint_with_alpha(cairo_t *cr, double alpha)
     * }
     */
    public static FunctionDescriptor cairo_paint_with_alpha$descriptor() {
        return cairo_paint_with_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_paint_with_alpha(cairo_t *cr, double alpha)
     * }
     */
    public static MethodHandle cairo_paint_with_alpha$handle() {
        return cairo_paint_with_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_paint_with_alpha(cairo_t *cr, double alpha)
     * }
     */
    public static void cairo_paint_with_alpha(MemorySegment cr, double alpha) {
        var mh$ = cairo_paint_with_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_paint_with_alpha", cr, alpha);
            }
            mh$.invokeExact(cr, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_mask(cairo_t *cr, cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_mask$descriptor() {
        return cairo_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_mask(cairo_t *cr, cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_mask$handle() {
        return cairo_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_mask(cairo_t *cr, cairo_pattern_t *pattern)
     * }
     */
    public static void cairo_mask(MemorySegment cr, MemorySegment pattern) {
        var mh$ = cairo_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mask", cr, pattern);
            }
            mh$.invokeExact(cr, pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mask_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mask_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_mask_surface(cairo_t *cr, cairo_surface_t *surface, double surface_x, double surface_y)
     * }
     */
    public static FunctionDescriptor cairo_mask_surface$descriptor() {
        return cairo_mask_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_mask_surface(cairo_t *cr, cairo_surface_t *surface, double surface_x, double surface_y)
     * }
     */
    public static MethodHandle cairo_mask_surface$handle() {
        return cairo_mask_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_mask_surface(cairo_t *cr, cairo_surface_t *surface, double surface_x, double surface_y)
     * }
     */
    public static void cairo_mask_surface(MemorySegment cr, MemorySegment surface, double surface_x, double surface_y) {
        var mh$ = cairo_mask_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mask_surface", cr, surface, surface_x, surface_y);
            }
            mh$.invokeExact(cr, surface, surface_x, surface_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_stroke {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_stroke"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_stroke(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_stroke$descriptor() {
        return cairo_stroke.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_stroke(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_stroke$handle() {
        return cairo_stroke.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_stroke(cairo_t *cr)
     * }
     */
    public static void cairo_stroke(MemorySegment cr) {
        var mh$ = cairo_stroke.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_stroke", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_stroke_preserve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_stroke_preserve"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_stroke_preserve(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_stroke_preserve$descriptor() {
        return cairo_stroke_preserve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_stroke_preserve(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_stroke_preserve$handle() {
        return cairo_stroke_preserve.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_stroke_preserve(cairo_t *cr)
     * }
     */
    public static void cairo_stroke_preserve(MemorySegment cr) {
        var mh$ = cairo_stroke_preserve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_stroke_preserve", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_fill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_fill"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_fill(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_fill$descriptor() {
        return cairo_fill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_fill(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_fill$handle() {
        return cairo_fill.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_fill(cairo_t *cr)
     * }
     */
    public static void cairo_fill(MemorySegment cr) {
        var mh$ = cairo_fill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_fill", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_fill_preserve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_fill_preserve"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_fill_preserve(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_fill_preserve$descriptor() {
        return cairo_fill_preserve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_fill_preserve(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_fill_preserve$handle() {
        return cairo_fill_preserve.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_fill_preserve(cairo_t *cr)
     * }
     */
    public static void cairo_fill_preserve(MemorySegment cr) {
        var mh$ = cairo_fill_preserve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_fill_preserve", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_copy_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_copy_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_copy_page(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_copy_page$descriptor() {
        return cairo_copy_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_copy_page(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_copy_page$handle() {
        return cairo_copy_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_copy_page(cairo_t *cr)
     * }
     */
    public static void cairo_copy_page(MemorySegment cr) {
        var mh$ = cairo_copy_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_copy_page", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_show_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_show_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_show_page(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_show_page$descriptor() {
        return cairo_show_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_show_page(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_show_page$handle() {
        return cairo_show_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_show_page(cairo_t *cr)
     * }
     */
    public static void cairo_show_page(MemorySegment cr) {
        var mh$ = cairo_show_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_show_page", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_in_stroke {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_in_stroke"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_in_stroke(cairo_t *cr, double x, double y)
     * }
     */
    public static FunctionDescriptor cairo_in_stroke$descriptor() {
        return cairo_in_stroke.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_in_stroke(cairo_t *cr, double x, double y)
     * }
     */
    public static MethodHandle cairo_in_stroke$handle() {
        return cairo_in_stroke.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_in_stroke(cairo_t *cr, double x, double y)
     * }
     */
    public static int cairo_in_stroke(MemorySegment cr, double x, double y) {
        var mh$ = cairo_in_stroke.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_in_stroke", cr, x, y);
            }
            return (int)mh$.invokeExact(cr, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_in_fill {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_in_fill"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_in_fill(cairo_t *cr, double x, double y)
     * }
     */
    public static FunctionDescriptor cairo_in_fill$descriptor() {
        return cairo_in_fill.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_in_fill(cairo_t *cr, double x, double y)
     * }
     */
    public static MethodHandle cairo_in_fill$handle() {
        return cairo_in_fill.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_in_fill(cairo_t *cr, double x, double y)
     * }
     */
    public static int cairo_in_fill(MemorySegment cr, double x, double y) {
        var mh$ = cairo_in_fill.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_in_fill", cr, x, y);
            }
            return (int)mh$.invokeExact(cr, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_in_clip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_in_clip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_in_clip(cairo_t *cr, double x, double y)
     * }
     */
    public static FunctionDescriptor cairo_in_clip$descriptor() {
        return cairo_in_clip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_in_clip(cairo_t *cr, double x, double y)
     * }
     */
    public static MethodHandle cairo_in_clip$handle() {
        return cairo_in_clip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_in_clip(cairo_t *cr, double x, double y)
     * }
     */
    public static int cairo_in_clip(MemorySegment cr, double x, double y) {
        var mh$ = cairo_in_clip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_in_clip", cr, x, y);
            }
            return (int)mh$.invokeExact(cr, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_stroke_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_stroke_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_stroke_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static FunctionDescriptor cairo_stroke_extents$descriptor() {
        return cairo_stroke_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_stroke_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static MethodHandle cairo_stroke_extents$handle() {
        return cairo_stroke_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_stroke_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static void cairo_stroke_extents(MemorySegment cr, MemorySegment x1, MemorySegment y1, MemorySegment x2, MemorySegment y2) {
        var mh$ = cairo_stroke_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_stroke_extents", cr, x1, y1, x2, y2);
            }
            mh$.invokeExact(cr, x1, y1, x2, y2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_fill_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_fill_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_fill_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static FunctionDescriptor cairo_fill_extents$descriptor() {
        return cairo_fill_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_fill_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static MethodHandle cairo_fill_extents$handle() {
        return cairo_fill_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_fill_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static void cairo_fill_extents(MemorySegment cr, MemorySegment x1, MemorySegment y1, MemorySegment x2, MemorySegment y2) {
        var mh$ = cairo_fill_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_fill_extents", cr, x1, y1, x2, y2);
            }
            mh$.invokeExact(cr, x1, y1, x2, y2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_reset_clip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_reset_clip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_reset_clip(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_reset_clip$descriptor() {
        return cairo_reset_clip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_reset_clip(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_reset_clip$handle() {
        return cairo_reset_clip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_reset_clip(cairo_t *cr)
     * }
     */
    public static void cairo_reset_clip(MemorySegment cr) {
        var mh$ = cairo_reset_clip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_reset_clip", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_clip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_clip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_clip(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_clip$descriptor() {
        return cairo_clip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_clip(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_clip$handle() {
        return cairo_clip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_clip(cairo_t *cr)
     * }
     */
    public static void cairo_clip(MemorySegment cr) {
        var mh$ = cairo_clip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_clip", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_clip_preserve {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_clip_preserve"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_clip_preserve(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_clip_preserve$descriptor() {
        return cairo_clip_preserve.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_clip_preserve(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_clip_preserve$handle() {
        return cairo_clip_preserve.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_clip_preserve(cairo_t *cr)
     * }
     */
    public static void cairo_clip_preserve(MemorySegment cr) {
        var mh$ = cairo_clip_preserve.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_clip_preserve", cr);
            }
            mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_clip_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_clip_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_clip_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static FunctionDescriptor cairo_clip_extents$descriptor() {
        return cairo_clip_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_clip_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static MethodHandle cairo_clip_extents$handle() {
        return cairo_clip_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_clip_extents(cairo_t *cr, double *x1, double *y1, double *x2, double *y2)
     * }
     */
    public static void cairo_clip_extents(MemorySegment cr, MemorySegment x1, MemorySegment y1, MemorySegment x2, MemorySegment y2) {
        var mh$ = cairo_clip_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_clip_extents", cr, x1, y1, x2, y2);
            }
            mh$.invokeExact(cr, x1, y1, x2, y2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_copy_clip_rectangle_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_copy_clip_rectangle_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_rectangle_list_t *cairo_copy_clip_rectangle_list(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_copy_clip_rectangle_list$descriptor() {
        return cairo_copy_clip_rectangle_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_rectangle_list_t *cairo_copy_clip_rectangle_list(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_copy_clip_rectangle_list$handle() {
        return cairo_copy_clip_rectangle_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_rectangle_list_t *cairo_copy_clip_rectangle_list(cairo_t *cr)
     * }
     */
    public static MemorySegment cairo_copy_clip_rectangle_list(MemorySegment cr) {
        var mh$ = cairo_copy_clip_rectangle_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_copy_clip_rectangle_list", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_rectangle_list_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_rectangle_list_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_rectangle_list_destroy(cairo_rectangle_list_t *rectangle_list)
     * }
     */
    public static FunctionDescriptor cairo_rectangle_list_destroy$descriptor() {
        return cairo_rectangle_list_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_rectangle_list_destroy(cairo_rectangle_list_t *rectangle_list)
     * }
     */
    public static MethodHandle cairo_rectangle_list_destroy$handle() {
        return cairo_rectangle_list_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_rectangle_list_destroy(cairo_rectangle_list_t *rectangle_list)
     * }
     */
    public static void cairo_rectangle_list_destroy(MemorySegment rectangle_list) {
        var mh$ = cairo_rectangle_list_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_rectangle_list_destroy", rectangle_list);
            }
            mh$.invokeExact(rectangle_list);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_tag_begin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_tag_begin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_tag_begin(cairo_t *cr, const char *tag_name, const char *attributes)
     * }
     */
    public static FunctionDescriptor cairo_tag_begin$descriptor() {
        return cairo_tag_begin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_tag_begin(cairo_t *cr, const char *tag_name, const char *attributes)
     * }
     */
    public static MethodHandle cairo_tag_begin$handle() {
        return cairo_tag_begin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_tag_begin(cairo_t *cr, const char *tag_name, const char *attributes)
     * }
     */
    public static void cairo_tag_begin(MemorySegment cr, MemorySegment tag_name, MemorySegment attributes) {
        var mh$ = cairo_tag_begin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_tag_begin", cr, tag_name, attributes);
            }
            mh$.invokeExact(cr, tag_name, attributes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_tag_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_tag_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_tag_end(cairo_t *cr, const char *tag_name)
     * }
     */
    public static FunctionDescriptor cairo_tag_end$descriptor() {
        return cairo_tag_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_tag_end(cairo_t *cr, const char *tag_name)
     * }
     */
    public static MethodHandle cairo_tag_end$handle() {
        return cairo_tag_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_tag_end(cairo_t *cr, const char *tag_name)
     * }
     */
    public static void cairo_tag_end(MemorySegment cr, MemorySegment tag_name) {
        var mh$ = cairo_tag_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_tag_end", cr, tag_name);
            }
            mh$.invokeExact(cr, tag_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_glyph_allocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_glyph_allocate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_glyph_t *cairo_glyph_allocate(int num_glyphs)
     * }
     */
    public static FunctionDescriptor cairo_glyph_allocate$descriptor() {
        return cairo_glyph_allocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_glyph_t *cairo_glyph_allocate(int num_glyphs)
     * }
     */
    public static MethodHandle cairo_glyph_allocate$handle() {
        return cairo_glyph_allocate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_glyph_t *cairo_glyph_allocate(int num_glyphs)
     * }
     */
    public static MemorySegment cairo_glyph_allocate(int num_glyphs) {
        var mh$ = cairo_glyph_allocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_glyph_allocate", num_glyphs);
            }
            return (MemorySegment)mh$.invokeExact(num_glyphs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_glyph_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_glyph_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_glyph_free(cairo_glyph_t *glyphs)
     * }
     */
    public static FunctionDescriptor cairo_glyph_free$descriptor() {
        return cairo_glyph_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_glyph_free(cairo_glyph_t *glyphs)
     * }
     */
    public static MethodHandle cairo_glyph_free$handle() {
        return cairo_glyph_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_glyph_free(cairo_glyph_t *glyphs)
     * }
     */
    public static void cairo_glyph_free(MemorySegment glyphs) {
        var mh$ = cairo_glyph_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_glyph_free", glyphs);
            }
            mh$.invokeExact(glyphs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_text_cluster_allocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_text_cluster_allocate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_text_cluster_t *cairo_text_cluster_allocate(int num_clusters)
     * }
     */
    public static FunctionDescriptor cairo_text_cluster_allocate$descriptor() {
        return cairo_text_cluster_allocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_text_cluster_t *cairo_text_cluster_allocate(int num_clusters)
     * }
     */
    public static MethodHandle cairo_text_cluster_allocate$handle() {
        return cairo_text_cluster_allocate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_text_cluster_t *cairo_text_cluster_allocate(int num_clusters)
     * }
     */
    public static MemorySegment cairo_text_cluster_allocate(int num_clusters) {
        var mh$ = cairo_text_cluster_allocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_text_cluster_allocate", num_clusters);
            }
            return (MemorySegment)mh$.invokeExact(num_clusters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_text_cluster_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_text_cluster_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_text_cluster_free(cairo_text_cluster_t *clusters)
     * }
     */
    public static FunctionDescriptor cairo_text_cluster_free$descriptor() {
        return cairo_text_cluster_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_text_cluster_free(cairo_text_cluster_t *clusters)
     * }
     */
    public static MethodHandle cairo_text_cluster_free$handle() {
        return cairo_text_cluster_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_text_cluster_free(cairo_text_cluster_t *clusters)
     * }
     */
    public static void cairo_text_cluster_free(MemorySegment clusters) {
        var mh$ = cairo_text_cluster_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_text_cluster_free", clusters);
            }
            mh$.invokeExact(clusters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_text_cluster_flags.CAIRO_TEXT_CLUSTER_FLAG_BACKWARD = 1
     * }
     */
    public static int CAIRO_TEXT_CLUSTER_FLAG_BACKWARD() {
        return CAIRO_TEXT_CLUSTER_FLAG_BACKWARD;
    }
    private static final int CAIRO_FONT_SLANT_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_slant.CAIRO_FONT_SLANT_NORMAL = 0
     * }
     */
    public static int CAIRO_FONT_SLANT_NORMAL() {
        return CAIRO_FONT_SLANT_NORMAL;
    }
    private static final int CAIRO_FONT_SLANT_ITALIC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_slant.CAIRO_FONT_SLANT_ITALIC = 1
     * }
     */
    public static int CAIRO_FONT_SLANT_ITALIC() {
        return CAIRO_FONT_SLANT_ITALIC;
    }
    private static final int CAIRO_FONT_SLANT_OBLIQUE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_slant.CAIRO_FONT_SLANT_OBLIQUE = 2
     * }
     */
    public static int CAIRO_FONT_SLANT_OBLIQUE() {
        return CAIRO_FONT_SLANT_OBLIQUE;
    }
    private static final int CAIRO_FONT_WEIGHT_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_weight.CAIRO_FONT_WEIGHT_NORMAL = 0
     * }
     */
    public static int CAIRO_FONT_WEIGHT_NORMAL() {
        return CAIRO_FONT_WEIGHT_NORMAL;
    }
    private static final int CAIRO_FONT_WEIGHT_BOLD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_weight.CAIRO_FONT_WEIGHT_BOLD = 1
     * }
     */
    public static int CAIRO_FONT_WEIGHT_BOLD() {
        return CAIRO_FONT_WEIGHT_BOLD;
    }
    private static final int CAIRO_SUBPIXEL_ORDER_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_subpixel_order.CAIRO_SUBPIXEL_ORDER_DEFAULT = 0
     * }
     */
    public static int CAIRO_SUBPIXEL_ORDER_DEFAULT() {
        return CAIRO_SUBPIXEL_ORDER_DEFAULT;
    }
    private static final int CAIRO_SUBPIXEL_ORDER_RGB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_subpixel_order.CAIRO_SUBPIXEL_ORDER_RGB = 1
     * }
     */
    public static int CAIRO_SUBPIXEL_ORDER_RGB() {
        return CAIRO_SUBPIXEL_ORDER_RGB;
    }
    private static final int CAIRO_SUBPIXEL_ORDER_BGR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_subpixel_order.CAIRO_SUBPIXEL_ORDER_BGR = 2
     * }
     */
    public static int CAIRO_SUBPIXEL_ORDER_BGR() {
        return CAIRO_SUBPIXEL_ORDER_BGR;
    }
    private static final int CAIRO_SUBPIXEL_ORDER_VRGB = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_subpixel_order.CAIRO_SUBPIXEL_ORDER_VRGB = 3
     * }
     */
    public static int CAIRO_SUBPIXEL_ORDER_VRGB() {
        return CAIRO_SUBPIXEL_ORDER_VRGB;
    }
    private static final int CAIRO_SUBPIXEL_ORDER_VBGR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_subpixel_order.CAIRO_SUBPIXEL_ORDER_VBGR = 4
     * }
     */
    public static int CAIRO_SUBPIXEL_ORDER_VBGR() {
        return CAIRO_SUBPIXEL_ORDER_VBGR;
    }
    private static final int CAIRO_HINT_STYLE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_hint_style.CAIRO_HINT_STYLE_DEFAULT = 0
     * }
     */
    public static int CAIRO_HINT_STYLE_DEFAULT() {
        return CAIRO_HINT_STYLE_DEFAULT;
    }
    private static final int CAIRO_HINT_STYLE_NONE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_hint_style.CAIRO_HINT_STYLE_NONE = 1
     * }
     */
    public static int CAIRO_HINT_STYLE_NONE() {
        return CAIRO_HINT_STYLE_NONE;
    }
    private static final int CAIRO_HINT_STYLE_SLIGHT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_hint_style.CAIRO_HINT_STYLE_SLIGHT = 2
     * }
     */
    public static int CAIRO_HINT_STYLE_SLIGHT() {
        return CAIRO_HINT_STYLE_SLIGHT;
    }
    private static final int CAIRO_HINT_STYLE_MEDIUM = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_hint_style.CAIRO_HINT_STYLE_MEDIUM = 3
     * }
     */
    public static int CAIRO_HINT_STYLE_MEDIUM() {
        return CAIRO_HINT_STYLE_MEDIUM;
    }
    private static final int CAIRO_HINT_STYLE_FULL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_hint_style.CAIRO_HINT_STYLE_FULL = 4
     * }
     */
    public static int CAIRO_HINT_STYLE_FULL() {
        return CAIRO_HINT_STYLE_FULL;
    }
    private static final int CAIRO_HINT_METRICS_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_hint_metrics.CAIRO_HINT_METRICS_DEFAULT = 0
     * }
     */
    public static int CAIRO_HINT_METRICS_DEFAULT() {
        return CAIRO_HINT_METRICS_DEFAULT;
    }
    private static final int CAIRO_HINT_METRICS_OFF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_hint_metrics.CAIRO_HINT_METRICS_OFF = 1
     * }
     */
    public static int CAIRO_HINT_METRICS_OFF() {
        return CAIRO_HINT_METRICS_OFF;
    }
    private static final int CAIRO_HINT_METRICS_ON = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_hint_metrics.CAIRO_HINT_METRICS_ON = 2
     * }
     */
    public static int CAIRO_HINT_METRICS_ON() {
        return CAIRO_HINT_METRICS_ON;
    }
    private static final int CAIRO_COLOR_MODE_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_color_mode.CAIRO_COLOR_MODE_DEFAULT = 0
     * }
     */
    public static int CAIRO_COLOR_MODE_DEFAULT() {
        return CAIRO_COLOR_MODE_DEFAULT;
    }
    private static final int CAIRO_COLOR_MODE_NO_COLOR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_color_mode.CAIRO_COLOR_MODE_NO_COLOR = 1
     * }
     */
    public static int CAIRO_COLOR_MODE_NO_COLOR() {
        return CAIRO_COLOR_MODE_NO_COLOR;
    }
    private static final int CAIRO_COLOR_MODE_COLOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_color_mode.CAIRO_COLOR_MODE_COLOR = 2
     * }
     */
    public static int CAIRO_COLOR_MODE_COLOR() {
        return CAIRO_COLOR_MODE_COLOR;
    }

    private static class cairo_font_options_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_options_t *cairo_font_options_create()
     * }
     */
    public static FunctionDescriptor cairo_font_options_create$descriptor() {
        return cairo_font_options_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_options_t *cairo_font_options_create()
     * }
     */
    public static MethodHandle cairo_font_options_create$handle() {
        return cairo_font_options_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_options_t *cairo_font_options_create()
     * }
     */
    public static MemorySegment cairo_font_options_create() {
        var mh$ = cairo_font_options_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_options_t *cairo_font_options_copy(const cairo_font_options_t *original)
     * }
     */
    public static FunctionDescriptor cairo_font_options_copy$descriptor() {
        return cairo_font_options_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_options_t *cairo_font_options_copy(const cairo_font_options_t *original)
     * }
     */
    public static MethodHandle cairo_font_options_copy$handle() {
        return cairo_font_options_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_options_t *cairo_font_options_copy(const cairo_font_options_t *original)
     * }
     */
    public static MemorySegment cairo_font_options_copy(MemorySegment original) {
        var mh$ = cairo_font_options_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_copy", original);
            }
            return (MemorySegment)mh$.invokeExact(original);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_options_destroy(cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_font_options_destroy$descriptor() {
        return cairo_font_options_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_options_destroy(cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_font_options_destroy$handle() {
        return cairo_font_options_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_options_destroy(cairo_font_options_t *options)
     * }
     */
    public static void cairo_font_options_destroy(MemorySegment options) {
        var mh$ = cairo_font_options_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_destroy", options);
            }
            mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_options_status(cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_font_options_status$descriptor() {
        return cairo_font_options_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_options_status(cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_font_options_status$handle() {
        return cairo_font_options_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_options_status(cairo_font_options_t *options)
     * }
     */
    public static int cairo_font_options_status(MemorySegment options) {
        var mh$ = cairo_font_options_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_status", options);
            }
            return (int)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_merge {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_merge"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_options_merge(cairo_font_options_t *options, const cairo_font_options_t *other)
     * }
     */
    public static FunctionDescriptor cairo_font_options_merge$descriptor() {
        return cairo_font_options_merge.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_options_merge(cairo_font_options_t *options, const cairo_font_options_t *other)
     * }
     */
    public static MethodHandle cairo_font_options_merge$handle() {
        return cairo_font_options_merge.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_options_merge(cairo_font_options_t *options, const cairo_font_options_t *other)
     * }
     */
    public static void cairo_font_options_merge(MemorySegment options, MemorySegment other) {
        var mh$ = cairo_font_options_merge.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_merge", options, other);
            }
            mh$.invokeExact(options, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_font_options_equal(const cairo_font_options_t *options, const cairo_font_options_t *other)
     * }
     */
    public static FunctionDescriptor cairo_font_options_equal$descriptor() {
        return cairo_font_options_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_font_options_equal(const cairo_font_options_t *options, const cairo_font_options_t *other)
     * }
     */
    public static MethodHandle cairo_font_options_equal$handle() {
        return cairo_font_options_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_font_options_equal(const cairo_font_options_t *options, const cairo_font_options_t *other)
     * }
     */
    public static int cairo_font_options_equal(MemorySegment options, MemorySegment other) {
        var mh$ = cairo_font_options_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_equal", options, other);
            }
            return (int)mh$.invokeExact(options, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned long cairo_font_options_hash(const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_font_options_hash$descriptor() {
        return cairo_font_options_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned long cairo_font_options_hash(const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_font_options_hash$handle() {
        return cairo_font_options_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned long cairo_font_options_hash(const cairo_font_options_t *options)
     * }
     */
    public static long cairo_font_options_hash(MemorySegment options) {
        var mh$ = cairo_font_options_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_hash", options);
            }
            return (long)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_set_antialias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_set_antialias"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_antialias(cairo_font_options_t *options, cairo_antialias_t antialias)
     * }
     */
    public static FunctionDescriptor cairo_font_options_set_antialias$descriptor() {
        return cairo_font_options_set_antialias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_antialias(cairo_font_options_t *options, cairo_antialias_t antialias)
     * }
     */
    public static MethodHandle cairo_font_options_set_antialias$handle() {
        return cairo_font_options_set_antialias.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_options_set_antialias(cairo_font_options_t *options, cairo_antialias_t antialias)
     * }
     */
    public static void cairo_font_options_set_antialias(MemorySegment options, int antialias) {
        var mh$ = cairo_font_options_set_antialias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_set_antialias", options, antialias);
            }
            mh$.invokeExact(options, antialias);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_get_antialias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_get_antialias"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_antialias_t cairo_font_options_get_antialias(const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_font_options_get_antialias$descriptor() {
        return cairo_font_options_get_antialias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_antialias_t cairo_font_options_get_antialias(const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_font_options_get_antialias$handle() {
        return cairo_font_options_get_antialias.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_antialias_t cairo_font_options_get_antialias(const cairo_font_options_t *options)
     * }
     */
    public static int cairo_font_options_get_antialias(MemorySegment options) {
        var mh$ = cairo_font_options_get_antialias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_get_antialias", options);
            }
            return (int)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_set_subpixel_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_set_subpixel_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_subpixel_order(cairo_font_options_t *options, cairo_subpixel_order_t subpixel_order)
     * }
     */
    public static FunctionDescriptor cairo_font_options_set_subpixel_order$descriptor() {
        return cairo_font_options_set_subpixel_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_subpixel_order(cairo_font_options_t *options, cairo_subpixel_order_t subpixel_order)
     * }
     */
    public static MethodHandle cairo_font_options_set_subpixel_order$handle() {
        return cairo_font_options_set_subpixel_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_options_set_subpixel_order(cairo_font_options_t *options, cairo_subpixel_order_t subpixel_order)
     * }
     */
    public static void cairo_font_options_set_subpixel_order(MemorySegment options, int subpixel_order) {
        var mh$ = cairo_font_options_set_subpixel_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_set_subpixel_order", options, subpixel_order);
            }
            mh$.invokeExact(options, subpixel_order);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_get_subpixel_order {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_get_subpixel_order"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_subpixel_order_t cairo_font_options_get_subpixel_order(const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_font_options_get_subpixel_order$descriptor() {
        return cairo_font_options_get_subpixel_order.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_subpixel_order_t cairo_font_options_get_subpixel_order(const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_font_options_get_subpixel_order$handle() {
        return cairo_font_options_get_subpixel_order.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_subpixel_order_t cairo_font_options_get_subpixel_order(const cairo_font_options_t *options)
     * }
     */
    public static int cairo_font_options_get_subpixel_order(MemorySegment options) {
        var mh$ = cairo_font_options_get_subpixel_order.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_get_subpixel_order", options);
            }
            return (int)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_set_hint_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_set_hint_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_hint_style(cairo_font_options_t *options, cairo_hint_style_t hint_style)
     * }
     */
    public static FunctionDescriptor cairo_font_options_set_hint_style$descriptor() {
        return cairo_font_options_set_hint_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_hint_style(cairo_font_options_t *options, cairo_hint_style_t hint_style)
     * }
     */
    public static MethodHandle cairo_font_options_set_hint_style$handle() {
        return cairo_font_options_set_hint_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_options_set_hint_style(cairo_font_options_t *options, cairo_hint_style_t hint_style)
     * }
     */
    public static void cairo_font_options_set_hint_style(MemorySegment options, int hint_style) {
        var mh$ = cairo_font_options_set_hint_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_set_hint_style", options, hint_style);
            }
            mh$.invokeExact(options, hint_style);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_get_hint_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_get_hint_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_hint_style_t cairo_font_options_get_hint_style(const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_font_options_get_hint_style$descriptor() {
        return cairo_font_options_get_hint_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_hint_style_t cairo_font_options_get_hint_style(const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_font_options_get_hint_style$handle() {
        return cairo_font_options_get_hint_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_hint_style_t cairo_font_options_get_hint_style(const cairo_font_options_t *options)
     * }
     */
    public static int cairo_font_options_get_hint_style(MemorySegment options) {
        var mh$ = cairo_font_options_get_hint_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_get_hint_style", options);
            }
            return (int)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_set_hint_metrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_set_hint_metrics"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_hint_metrics(cairo_font_options_t *options, cairo_hint_metrics_t hint_metrics)
     * }
     */
    public static FunctionDescriptor cairo_font_options_set_hint_metrics$descriptor() {
        return cairo_font_options_set_hint_metrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_hint_metrics(cairo_font_options_t *options, cairo_hint_metrics_t hint_metrics)
     * }
     */
    public static MethodHandle cairo_font_options_set_hint_metrics$handle() {
        return cairo_font_options_set_hint_metrics.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_options_set_hint_metrics(cairo_font_options_t *options, cairo_hint_metrics_t hint_metrics)
     * }
     */
    public static void cairo_font_options_set_hint_metrics(MemorySegment options, int hint_metrics) {
        var mh$ = cairo_font_options_set_hint_metrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_set_hint_metrics", options, hint_metrics);
            }
            mh$.invokeExact(options, hint_metrics);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_get_hint_metrics {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_get_hint_metrics"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_hint_metrics_t cairo_font_options_get_hint_metrics(const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_font_options_get_hint_metrics$descriptor() {
        return cairo_font_options_get_hint_metrics.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_hint_metrics_t cairo_font_options_get_hint_metrics(const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_font_options_get_hint_metrics$handle() {
        return cairo_font_options_get_hint_metrics.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_hint_metrics_t cairo_font_options_get_hint_metrics(const cairo_font_options_t *options)
     * }
     */
    public static int cairo_font_options_get_hint_metrics(MemorySegment options) {
        var mh$ = cairo_font_options_get_hint_metrics.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_get_hint_metrics", options);
            }
            return (int)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_get_variations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_get_variations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *cairo_font_options_get_variations(cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_font_options_get_variations$descriptor() {
        return cairo_font_options_get_variations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *cairo_font_options_get_variations(cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_font_options_get_variations$handle() {
        return cairo_font_options_get_variations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *cairo_font_options_get_variations(cairo_font_options_t *options)
     * }
     */
    public static MemorySegment cairo_font_options_get_variations(MemorySegment options) {
        var mh$ = cairo_font_options_get_variations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_get_variations", options);
            }
            return (MemorySegment)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_set_variations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_set_variations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_variations(cairo_font_options_t *options, const char *variations)
     * }
     */
    public static FunctionDescriptor cairo_font_options_set_variations$descriptor() {
        return cairo_font_options_set_variations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_variations(cairo_font_options_t *options, const char *variations)
     * }
     */
    public static MethodHandle cairo_font_options_set_variations$handle() {
        return cairo_font_options_set_variations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_options_set_variations(cairo_font_options_t *options, const char *variations)
     * }
     */
    public static void cairo_font_options_set_variations(MemorySegment options, MemorySegment variations) {
        var mh$ = cairo_font_options_set_variations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_set_variations", options, variations);
            }
            mh$.invokeExact(options, variations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_set_color_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_set_color_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_color_mode(cairo_font_options_t *options, cairo_color_mode_t color_mode)
     * }
     */
    public static FunctionDescriptor cairo_font_options_set_color_mode$descriptor() {
        return cairo_font_options_set_color_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_color_mode(cairo_font_options_t *options, cairo_color_mode_t color_mode)
     * }
     */
    public static MethodHandle cairo_font_options_set_color_mode$handle() {
        return cairo_font_options_set_color_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_options_set_color_mode(cairo_font_options_t *options, cairo_color_mode_t color_mode)
     * }
     */
    public static void cairo_font_options_set_color_mode(MemorySegment options, int color_mode) {
        var mh$ = cairo_font_options_set_color_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_set_color_mode", options, color_mode);
            }
            mh$.invokeExact(options, color_mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_get_color_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_get_color_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_color_mode_t cairo_font_options_get_color_mode(const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_font_options_get_color_mode$descriptor() {
        return cairo_font_options_get_color_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_color_mode_t cairo_font_options_get_color_mode(const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_font_options_get_color_mode$handle() {
        return cairo_font_options_get_color_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_color_mode_t cairo_font_options_get_color_mode(const cairo_font_options_t *options)
     * }
     */
    public static int cairo_font_options_get_color_mode(MemorySegment options) {
        var mh$ = cairo_font_options_get_color_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_get_color_mode", options);
            }
            return (int)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_get_color_palette {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_get_color_palette"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int cairo_font_options_get_color_palette(const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_font_options_get_color_palette$descriptor() {
        return cairo_font_options_get_color_palette.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int cairo_font_options_get_color_palette(const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_font_options_get_color_palette$handle() {
        return cairo_font_options_get_color_palette.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int cairo_font_options_get_color_palette(const cairo_font_options_t *options)
     * }
     */
    public static int cairo_font_options_get_color_palette(MemorySegment options) {
        var mh$ = cairo_font_options_get_color_palette.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_get_color_palette", options);
            }
            return (int)mh$.invokeExact(options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_set_color_palette {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_set_color_palette"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_color_palette(cairo_font_options_t *options, unsigned int palette_index)
     * }
     */
    public static FunctionDescriptor cairo_font_options_set_color_palette$descriptor() {
        return cairo_font_options_set_color_palette.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_color_palette(cairo_font_options_t *options, unsigned int palette_index)
     * }
     */
    public static MethodHandle cairo_font_options_set_color_palette$handle() {
        return cairo_font_options_set_color_palette.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_options_set_color_palette(cairo_font_options_t *options, unsigned int palette_index)
     * }
     */
    public static void cairo_font_options_set_color_palette(MemorySegment options, int palette_index) {
        var mh$ = cairo_font_options_set_color_palette.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_set_color_palette", options, palette_index);
            }
            mh$.invokeExact(options, palette_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_set_custom_palette_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_set_custom_palette_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_custom_palette_color(cairo_font_options_t *options, unsigned int index, double red, double green, double blue, double alpha)
     * }
     */
    public static FunctionDescriptor cairo_font_options_set_custom_palette_color$descriptor() {
        return cairo_font_options_set_custom_palette_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_options_set_custom_palette_color(cairo_font_options_t *options, unsigned int index, double red, double green, double blue, double alpha)
     * }
     */
    public static MethodHandle cairo_font_options_set_custom_palette_color$handle() {
        return cairo_font_options_set_custom_palette_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_options_set_custom_palette_color(cairo_font_options_t *options, unsigned int index, double red, double green, double blue, double alpha)
     * }
     */
    public static void cairo_font_options_set_custom_palette_color(MemorySegment options, int index, double red, double green, double blue, double alpha) {
        var mh$ = cairo_font_options_set_custom_palette_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_set_custom_palette_color", options, index, red, green, blue, alpha);
            }
            mh$.invokeExact(options, index, red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_options_get_custom_palette_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_options_get_custom_palette_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_options_get_custom_palette_color(cairo_font_options_t *options, unsigned int index, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static FunctionDescriptor cairo_font_options_get_custom_palette_color$descriptor() {
        return cairo_font_options_get_custom_palette_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_options_get_custom_palette_color(cairo_font_options_t *options, unsigned int index, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static MethodHandle cairo_font_options_get_custom_palette_color$handle() {
        return cairo_font_options_get_custom_palette_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_options_get_custom_palette_color(cairo_font_options_t *options, unsigned int index, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static int cairo_font_options_get_custom_palette_color(MemorySegment options, int index, MemorySegment red, MemorySegment green, MemorySegment blue, MemorySegment alpha) {
        var mh$ = cairo_font_options_get_custom_palette_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_options_get_custom_palette_color", options, index, red, green, blue, alpha);
            }
            return (int)mh$.invokeExact(options, index, red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_select_font_face {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_select_font_face"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_select_font_face(cairo_t *cr, const char *family, cairo_font_slant_t slant, cairo_font_weight_t weight)
     * }
     */
    public static FunctionDescriptor cairo_select_font_face$descriptor() {
        return cairo_select_font_face.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_select_font_face(cairo_t *cr, const char *family, cairo_font_slant_t slant, cairo_font_weight_t weight)
     * }
     */
    public static MethodHandle cairo_select_font_face$handle() {
        return cairo_select_font_face.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_select_font_face(cairo_t *cr, const char *family, cairo_font_slant_t slant, cairo_font_weight_t weight)
     * }
     */
    public static void cairo_select_font_face(MemorySegment cr, MemorySegment family, int slant, int weight) {
        var mh$ = cairo_select_font_face.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_select_font_face", cr, family, slant, weight);
            }
            mh$.invokeExact(cr, family, slant, weight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_font_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_font_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_font_size(cairo_t *cr, double size)
     * }
     */
    public static FunctionDescriptor cairo_set_font_size$descriptor() {
        return cairo_set_font_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_font_size(cairo_t *cr, double size)
     * }
     */
    public static MethodHandle cairo_set_font_size$handle() {
        return cairo_set_font_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_font_size(cairo_t *cr, double size)
     * }
     */
    public static void cairo_set_font_size(MemorySegment cr, double size) {
        var mh$ = cairo_set_font_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_font_size", cr, size);
            }
            mh$.invokeExact(cr, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_font_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_font_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_font_matrix(cairo_t *cr, const cairo_matrix_t *matrix)
     * }
     */
    public static FunctionDescriptor cairo_set_font_matrix$descriptor() {
        return cairo_set_font_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_font_matrix(cairo_t *cr, const cairo_matrix_t *matrix)
     * }
     */
    public static MethodHandle cairo_set_font_matrix$handle() {
        return cairo_set_font_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_font_matrix(cairo_t *cr, const cairo_matrix_t *matrix)
     * }
     */
    public static void cairo_set_font_matrix(MemorySegment cr, MemorySegment matrix) {
        var mh$ = cairo_set_font_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_font_matrix", cr, matrix);
            }
            mh$.invokeExact(cr, matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_font_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_font_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_get_font_matrix(cairo_t *cr, cairo_matrix_t *matrix)
     * }
     */
    public static FunctionDescriptor cairo_get_font_matrix$descriptor() {
        return cairo_get_font_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_get_font_matrix(cairo_t *cr, cairo_matrix_t *matrix)
     * }
     */
    public static MethodHandle cairo_get_font_matrix$handle() {
        return cairo_get_font_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_get_font_matrix(cairo_t *cr, cairo_matrix_t *matrix)
     * }
     */
    public static void cairo_get_font_matrix(MemorySegment cr, MemorySegment matrix) {
        var mh$ = cairo_get_font_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_font_matrix", cr, matrix);
            }
            mh$.invokeExact(cr, matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_font_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_font_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_font_options(cairo_t *cr, const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_set_font_options$descriptor() {
        return cairo_set_font_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_font_options(cairo_t *cr, const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_set_font_options$handle() {
        return cairo_set_font_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_font_options(cairo_t *cr, const cairo_font_options_t *options)
     * }
     */
    public static void cairo_set_font_options(MemorySegment cr, MemorySegment options) {
        var mh$ = cairo_set_font_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_font_options", cr, options);
            }
            mh$.invokeExact(cr, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_font_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_font_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_get_font_options(cairo_t *cr, cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_get_font_options$descriptor() {
        return cairo_get_font_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_get_font_options(cairo_t *cr, cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_get_font_options$handle() {
        return cairo_get_font_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_get_font_options(cairo_t *cr, cairo_font_options_t *options)
     * }
     */
    public static void cairo_get_font_options(MemorySegment cr, MemorySegment options) {
        var mh$ = cairo_get_font_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_font_options", cr, options);
            }
            mh$.invokeExact(cr, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_font_face {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_font_face"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_font_face(cairo_t *cr, cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_set_font_face$descriptor() {
        return cairo_set_font_face.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_font_face(cairo_t *cr, cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_set_font_face$handle() {
        return cairo_set_font_face.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_font_face(cairo_t *cr, cairo_font_face_t *font_face)
     * }
     */
    public static void cairo_set_font_face(MemorySegment cr, MemorySegment font_face) {
        var mh$ = cairo_set_font_face.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_font_face", cr, font_face);
            }
            mh$.invokeExact(cr, font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_font_face {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_font_face"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_get_font_face(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_font_face$descriptor() {
        return cairo_get_font_face.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_get_font_face(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_font_face$handle() {
        return cairo_get_font_face.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_get_font_face(cairo_t *cr)
     * }
     */
    public static MemorySegment cairo_get_font_face(MemorySegment cr) {
        var mh$ = cairo_get_font_face.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_font_face", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_set_scaled_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_set_scaled_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_set_scaled_font(cairo_t *cr, const cairo_scaled_font_t *scaled_font)
     * }
     */
    public static FunctionDescriptor cairo_set_scaled_font$descriptor() {
        return cairo_set_scaled_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_set_scaled_font(cairo_t *cr, const cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MethodHandle cairo_set_scaled_font$handle() {
        return cairo_set_scaled_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_set_scaled_font(cairo_t *cr, const cairo_scaled_font_t *scaled_font)
     * }
     */
    public static void cairo_set_scaled_font(MemorySegment cr, MemorySegment scaled_font) {
        var mh$ = cairo_set_scaled_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_set_scaled_font", cr, scaled_font);
            }
            mh$.invokeExact(cr, scaled_font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_scaled_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_scaled_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *cairo_get_scaled_font(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_scaled_font$descriptor() {
        return cairo_get_scaled_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *cairo_get_scaled_font(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_scaled_font$handle() {
        return cairo_get_scaled_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *cairo_get_scaled_font(cairo_t *cr)
     * }
     */
    public static MemorySegment cairo_get_scaled_font(MemorySegment cr) {
        var mh$ = cairo_get_scaled_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_scaled_font", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_show_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_show_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_show_text(cairo_t *cr, const char *utf8)
     * }
     */
    public static FunctionDescriptor cairo_show_text$descriptor() {
        return cairo_show_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_show_text(cairo_t *cr, const char *utf8)
     * }
     */
    public static MethodHandle cairo_show_text$handle() {
        return cairo_show_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_show_text(cairo_t *cr, const char *utf8)
     * }
     */
    public static void cairo_show_text(MemorySegment cr, MemorySegment utf8) {
        var mh$ = cairo_show_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_show_text", cr, utf8);
            }
            mh$.invokeExact(cr, utf8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_show_glyphs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_show_glyphs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_show_glyphs(cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs)
     * }
     */
    public static FunctionDescriptor cairo_show_glyphs$descriptor() {
        return cairo_show_glyphs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_show_glyphs(cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs)
     * }
     */
    public static MethodHandle cairo_show_glyphs$handle() {
        return cairo_show_glyphs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_show_glyphs(cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs)
     * }
     */
    public static void cairo_show_glyphs(MemorySegment cr, MemorySegment glyphs, int num_glyphs) {
        var mh$ = cairo_show_glyphs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_show_glyphs", cr, glyphs, num_glyphs);
            }
            mh$.invokeExact(cr, glyphs, num_glyphs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_show_text_glyphs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_show_text_glyphs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_show_text_glyphs(cairo_t *cr, const char *utf8, int utf8_len, const cairo_glyph_t *glyphs, int num_glyphs, const cairo_text_cluster_t *clusters, int num_clusters, cairo_text_cluster_flags_t cluster_flags)
     * }
     */
    public static FunctionDescriptor cairo_show_text_glyphs$descriptor() {
        return cairo_show_text_glyphs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_show_text_glyphs(cairo_t *cr, const char *utf8, int utf8_len, const cairo_glyph_t *glyphs, int num_glyphs, const cairo_text_cluster_t *clusters, int num_clusters, cairo_text_cluster_flags_t cluster_flags)
     * }
     */
    public static MethodHandle cairo_show_text_glyphs$handle() {
        return cairo_show_text_glyphs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_show_text_glyphs(cairo_t *cr, const char *utf8, int utf8_len, const cairo_glyph_t *glyphs, int num_glyphs, const cairo_text_cluster_t *clusters, int num_clusters, cairo_text_cluster_flags_t cluster_flags)
     * }
     */
    public static void cairo_show_text_glyphs(MemorySegment cr, MemorySegment utf8, int utf8_len, MemorySegment glyphs, int num_glyphs, MemorySegment clusters, int num_clusters, int cluster_flags) {
        var mh$ = cairo_show_text_glyphs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_show_text_glyphs", cr, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags);
            }
            mh$.invokeExact(cr, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_text_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_text_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_text_path(cairo_t *cr, const char *utf8)
     * }
     */
    public static FunctionDescriptor cairo_text_path$descriptor() {
        return cairo_text_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_text_path(cairo_t *cr, const char *utf8)
     * }
     */
    public static MethodHandle cairo_text_path$handle() {
        return cairo_text_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_text_path(cairo_t *cr, const char *utf8)
     * }
     */
    public static void cairo_text_path(MemorySegment cr, MemorySegment utf8) {
        var mh$ = cairo_text_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_text_path", cr, utf8);
            }
            mh$.invokeExact(cr, utf8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_glyph_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_glyph_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_glyph_path(cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs)
     * }
     */
    public static FunctionDescriptor cairo_glyph_path$descriptor() {
        return cairo_glyph_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_glyph_path(cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs)
     * }
     */
    public static MethodHandle cairo_glyph_path$handle() {
        return cairo_glyph_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_glyph_path(cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs)
     * }
     */
    public static void cairo_glyph_path(MemorySegment cr, MemorySegment glyphs, int num_glyphs) {
        var mh$ = cairo_glyph_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_glyph_path", cr, glyphs, num_glyphs);
            }
            mh$.invokeExact(cr, glyphs, num_glyphs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_text_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_text_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_text_extents(cairo_t *cr, const char *utf8, cairo_text_extents_t *extents)
     * }
     */
    public static FunctionDescriptor cairo_text_extents$descriptor() {
        return cairo_text_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_text_extents(cairo_t *cr, const char *utf8, cairo_text_extents_t *extents)
     * }
     */
    public static MethodHandle cairo_text_extents$handle() {
        return cairo_text_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_text_extents(cairo_t *cr, const char *utf8, cairo_text_extents_t *extents)
     * }
     */
    public static void cairo_text_extents(MemorySegment cr, MemorySegment utf8, MemorySegment extents) {
        var mh$ = cairo_text_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_text_extents", cr, utf8, extents);
            }
            mh$.invokeExact(cr, utf8, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_glyph_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_glyph_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_glyph_extents(cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs, cairo_text_extents_t *extents)
     * }
     */
    public static FunctionDescriptor cairo_glyph_extents$descriptor() {
        return cairo_glyph_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_glyph_extents(cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs, cairo_text_extents_t *extents)
     * }
     */
    public static MethodHandle cairo_glyph_extents$handle() {
        return cairo_glyph_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_glyph_extents(cairo_t *cr, const cairo_glyph_t *glyphs, int num_glyphs, cairo_text_extents_t *extents)
     * }
     */
    public static void cairo_glyph_extents(MemorySegment cr, MemorySegment glyphs, int num_glyphs, MemorySegment extents) {
        var mh$ = cairo_glyph_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_glyph_extents", cr, glyphs, num_glyphs, extents);
            }
            mh$.invokeExact(cr, glyphs, num_glyphs, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_extents(cairo_t *cr, cairo_font_extents_t *extents)
     * }
     */
    public static FunctionDescriptor cairo_font_extents$descriptor() {
        return cairo_font_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_extents(cairo_t *cr, cairo_font_extents_t *extents)
     * }
     */
    public static MethodHandle cairo_font_extents$handle() {
        return cairo_font_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_extents(cairo_t *cr, cairo_font_extents_t *extents)
     * }
     */
    public static void cairo_font_extents(MemorySegment cr, MemorySegment extents) {
        var mh$ = cairo_font_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_extents", cr, extents);
            }
            mh$.invokeExact(cr, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_face_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_face_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_font_face_reference(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_font_face_reference$descriptor() {
        return cairo_font_face_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_font_face_reference(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_font_face_reference$handle() {
        return cairo_font_face_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_font_face_reference(cairo_font_face_t *font_face)
     * }
     */
    public static MemorySegment cairo_font_face_reference(MemorySegment font_face) {
        var mh$ = cairo_font_face_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_face_reference", font_face);
            }
            return (MemorySegment)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_face_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_face_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_font_face_destroy(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_font_face_destroy$descriptor() {
        return cairo_font_face_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_font_face_destroy(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_font_face_destroy$handle() {
        return cairo_font_face_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_font_face_destroy(cairo_font_face_t *font_face)
     * }
     */
    public static void cairo_font_face_destroy(MemorySegment font_face) {
        var mh$ = cairo_font_face_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_face_destroy", font_face);
            }
            mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_face_get_reference_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_face_get_reference_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int cairo_font_face_get_reference_count(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_font_face_get_reference_count$descriptor() {
        return cairo_font_face_get_reference_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int cairo_font_face_get_reference_count(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_font_face_get_reference_count$handle() {
        return cairo_font_face_get_reference_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int cairo_font_face_get_reference_count(cairo_font_face_t *font_face)
     * }
     */
    public static int cairo_font_face_get_reference_count(MemorySegment font_face) {
        var mh$ = cairo_font_face_get_reference_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_face_get_reference_count", font_face);
            }
            return (int)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_face_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_face_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_face_status(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_font_face_status$descriptor() {
        return cairo_font_face_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_face_status(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_font_face_status$handle() {
        return cairo_font_face_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_face_status(cairo_font_face_t *font_face)
     * }
     */
    public static int cairo_font_face_status(MemorySegment font_face) {
        var mh$ = cairo_font_face_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_face_status", font_face);
            }
            return (int)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_FONT_TYPE_TOY = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_type.CAIRO_FONT_TYPE_TOY = 0
     * }
     */
    public static int CAIRO_FONT_TYPE_TOY() {
        return CAIRO_FONT_TYPE_TOY;
    }
    private static final int CAIRO_FONT_TYPE_FT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_type.CAIRO_FONT_TYPE_FT = 1
     * }
     */
    public static int CAIRO_FONT_TYPE_FT() {
        return CAIRO_FONT_TYPE_FT;
    }
    private static final int CAIRO_FONT_TYPE_WIN32 = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_type.CAIRO_FONT_TYPE_WIN32 = 2
     * }
     */
    public static int CAIRO_FONT_TYPE_WIN32() {
        return CAIRO_FONT_TYPE_WIN32;
    }
    private static final int CAIRO_FONT_TYPE_QUARTZ = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_type.CAIRO_FONT_TYPE_QUARTZ = 3
     * }
     */
    public static int CAIRO_FONT_TYPE_QUARTZ() {
        return CAIRO_FONT_TYPE_QUARTZ;
    }
    private static final int CAIRO_FONT_TYPE_USER = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_type.CAIRO_FONT_TYPE_USER = 4
     * }
     */
    public static int CAIRO_FONT_TYPE_USER() {
        return CAIRO_FONT_TYPE_USER;
    }
    private static final int CAIRO_FONT_TYPE_DWRITE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _cairo_font_type.CAIRO_FONT_TYPE_DWRITE = 5
     * }
     */
    public static int CAIRO_FONT_TYPE_DWRITE() {
        return CAIRO_FONT_TYPE_DWRITE;
    }

    private static class cairo_font_face_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_face_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_type_t cairo_font_face_get_type(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_font_face_get_type$descriptor() {
        return cairo_font_face_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_type_t cairo_font_face_get_type(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_font_face_get_type$handle() {
        return cairo_font_face_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_type_t cairo_font_face_get_type(cairo_font_face_t *font_face)
     * }
     */
    public static int cairo_font_face_get_type(MemorySegment font_face) {
        var mh$ = cairo_font_face_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_face_get_type", font_face);
            }
            return (int)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_face_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_face_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *cairo_font_face_get_user_data(cairo_font_face_t *font_face, const cairo_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor cairo_font_face_get_user_data$descriptor() {
        return cairo_font_face_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *cairo_font_face_get_user_data(cairo_font_face_t *font_face, const cairo_user_data_key_t *key)
     * }
     */
    public static MethodHandle cairo_font_face_get_user_data$handle() {
        return cairo_font_face_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *cairo_font_face_get_user_data(cairo_font_face_t *font_face, const cairo_user_data_key_t *key)
     * }
     */
    public static MemorySegment cairo_font_face_get_user_data(MemorySegment font_face, MemorySegment key) {
        var mh$ = cairo_font_face_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_face_get_user_data", font_face, key);
            }
            return (MemorySegment)mh$.invokeExact(font_face, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_font_face_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_font_face_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_face_set_user_data(cairo_font_face_t *font_face, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor cairo_font_face_set_user_data$descriptor() {
        return cairo_font_face_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_face_set_user_data(cairo_font_face_t *font_face, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static MethodHandle cairo_font_face_set_user_data$handle() {
        return cairo_font_face_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_font_face_set_user_data(cairo_font_face_t *font_face, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static int cairo_font_face_set_user_data(MemorySegment font_face, MemorySegment key, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = cairo_font_face_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_font_face_set_user_data", font_face, key, user_data, destroy);
            }
            return (int)mh$.invokeExact(font_face, key, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *cairo_scaled_font_create(cairo_font_face_t *font_face, const cairo_matrix_t *font_matrix, const cairo_matrix_t *ctm, const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_create$descriptor() {
        return cairo_scaled_font_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *cairo_scaled_font_create(cairo_font_face_t *font_face, const cairo_matrix_t *font_matrix, const cairo_matrix_t *ctm, const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_scaled_font_create$handle() {
        return cairo_scaled_font_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *cairo_scaled_font_create(cairo_font_face_t *font_face, const cairo_matrix_t *font_matrix, const cairo_matrix_t *ctm, const cairo_font_options_t *options)
     * }
     */
    public static MemorySegment cairo_scaled_font_create(MemorySegment font_face, MemorySegment font_matrix, MemorySegment ctm, MemorySegment options) {
        var mh$ = cairo_scaled_font_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_create", font_face, font_matrix, ctm, options);
            }
            return (MemorySegment)mh$.invokeExact(font_face, font_matrix, ctm, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *cairo_scaled_font_reference(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_reference$descriptor() {
        return cairo_scaled_font_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *cairo_scaled_font_reference(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MethodHandle cairo_scaled_font_reference$handle() {
        return cairo_scaled_font_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_scaled_font_t *cairo_scaled_font_reference(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MemorySegment cairo_scaled_font_reference(MemorySegment scaled_font) {
        var mh$ = cairo_scaled_font_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_reference", scaled_font);
            }
            return (MemorySegment)mh$.invokeExact(scaled_font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_destroy(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_destroy$descriptor() {
        return cairo_scaled_font_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_destroy(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MethodHandle cairo_scaled_font_destroy$handle() {
        return cairo_scaled_font_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_scaled_font_destroy(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static void cairo_scaled_font_destroy(MemorySegment scaled_font) {
        var mh$ = cairo_scaled_font_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_destroy", scaled_font);
            }
            mh$.invokeExact(scaled_font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_get_reference_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_get_reference_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int cairo_scaled_font_get_reference_count(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_get_reference_count$descriptor() {
        return cairo_scaled_font_get_reference_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int cairo_scaled_font_get_reference_count(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MethodHandle cairo_scaled_font_get_reference_count$handle() {
        return cairo_scaled_font_get_reference_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int cairo_scaled_font_get_reference_count(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static int cairo_scaled_font_get_reference_count(MemorySegment scaled_font) {
        var mh$ = cairo_scaled_font_get_reference_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_get_reference_count", scaled_font);
            }
            return (int)mh$.invokeExact(scaled_font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_scaled_font_status(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_status$descriptor() {
        return cairo_scaled_font_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_scaled_font_status(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MethodHandle cairo_scaled_font_status$handle() {
        return cairo_scaled_font_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_scaled_font_status(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static int cairo_scaled_font_status(MemorySegment scaled_font) {
        var mh$ = cairo_scaled_font_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_status", scaled_font);
            }
            return (int)mh$.invokeExact(scaled_font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_type_t cairo_scaled_font_get_type(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_get_type$descriptor() {
        return cairo_scaled_font_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_type_t cairo_scaled_font_get_type(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MethodHandle cairo_scaled_font_get_type$handle() {
        return cairo_scaled_font_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_type_t cairo_scaled_font_get_type(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static int cairo_scaled_font_get_type(MemorySegment scaled_font) {
        var mh$ = cairo_scaled_font_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_get_type", scaled_font);
            }
            return (int)mh$.invokeExact(scaled_font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *cairo_scaled_font_get_user_data(cairo_scaled_font_t *scaled_font, const cairo_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_get_user_data$descriptor() {
        return cairo_scaled_font_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *cairo_scaled_font_get_user_data(cairo_scaled_font_t *scaled_font, const cairo_user_data_key_t *key)
     * }
     */
    public static MethodHandle cairo_scaled_font_get_user_data$handle() {
        return cairo_scaled_font_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *cairo_scaled_font_get_user_data(cairo_scaled_font_t *scaled_font, const cairo_user_data_key_t *key)
     * }
     */
    public static MemorySegment cairo_scaled_font_get_user_data(MemorySegment scaled_font, MemorySegment key) {
        var mh$ = cairo_scaled_font_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_get_user_data", scaled_font, key);
            }
            return (MemorySegment)mh$.invokeExact(scaled_font, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_scaled_font_set_user_data(cairo_scaled_font_t *scaled_font, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_set_user_data$descriptor() {
        return cairo_scaled_font_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_scaled_font_set_user_data(cairo_scaled_font_t *scaled_font, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static MethodHandle cairo_scaled_font_set_user_data$handle() {
        return cairo_scaled_font_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_scaled_font_set_user_data(cairo_scaled_font_t *scaled_font, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static int cairo_scaled_font_set_user_data(MemorySegment scaled_font, MemorySegment key, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = cairo_scaled_font_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_set_user_data", scaled_font, key, user_data, destroy);
            }
            return (int)mh$.invokeExact(scaled_font, key, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_extents(cairo_scaled_font_t *scaled_font, cairo_font_extents_t *extents)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_extents$descriptor() {
        return cairo_scaled_font_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_extents(cairo_scaled_font_t *scaled_font, cairo_font_extents_t *extents)
     * }
     */
    public static MethodHandle cairo_scaled_font_extents$handle() {
        return cairo_scaled_font_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_scaled_font_extents(cairo_scaled_font_t *scaled_font, cairo_font_extents_t *extents)
     * }
     */
    public static void cairo_scaled_font_extents(MemorySegment scaled_font, MemorySegment extents) {
        var mh$ = cairo_scaled_font_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_extents", scaled_font, extents);
            }
            mh$.invokeExact(scaled_font, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_text_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_text_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_text_extents(cairo_scaled_font_t *scaled_font, const char *utf8, cairo_text_extents_t *extents)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_text_extents$descriptor() {
        return cairo_scaled_font_text_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_text_extents(cairo_scaled_font_t *scaled_font, const char *utf8, cairo_text_extents_t *extents)
     * }
     */
    public static MethodHandle cairo_scaled_font_text_extents$handle() {
        return cairo_scaled_font_text_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_scaled_font_text_extents(cairo_scaled_font_t *scaled_font, const char *utf8, cairo_text_extents_t *extents)
     * }
     */
    public static void cairo_scaled_font_text_extents(MemorySegment scaled_font, MemorySegment utf8, MemorySegment extents) {
        var mh$ = cairo_scaled_font_text_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_text_extents", scaled_font, utf8, extents);
            }
            mh$.invokeExact(scaled_font, utf8, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_glyph_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_glyph_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_glyph_extents(cairo_scaled_font_t *scaled_font, const cairo_glyph_t *glyphs, int num_glyphs, cairo_text_extents_t *extents)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_glyph_extents$descriptor() {
        return cairo_scaled_font_glyph_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_glyph_extents(cairo_scaled_font_t *scaled_font, const cairo_glyph_t *glyphs, int num_glyphs, cairo_text_extents_t *extents)
     * }
     */
    public static MethodHandle cairo_scaled_font_glyph_extents$handle() {
        return cairo_scaled_font_glyph_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_scaled_font_glyph_extents(cairo_scaled_font_t *scaled_font, const cairo_glyph_t *glyphs, int num_glyphs, cairo_text_extents_t *extents)
     * }
     */
    public static void cairo_scaled_font_glyph_extents(MemorySegment scaled_font, MemorySegment glyphs, int num_glyphs, MemorySegment extents) {
        var mh$ = cairo_scaled_font_glyph_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_glyph_extents", scaled_font, glyphs, num_glyphs, extents);
            }
            mh$.invokeExact(scaled_font, glyphs, num_glyphs, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_text_to_glyphs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_text_to_glyphs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_scaled_font_text_to_glyphs(cairo_scaled_font_t *scaled_font, double x, double y, const char *utf8, int utf8_len, cairo_glyph_t **glyphs, int *num_glyphs, cairo_text_cluster_t **clusters, int *num_clusters, cairo_text_cluster_flags_t *cluster_flags)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_text_to_glyphs$descriptor() {
        return cairo_scaled_font_text_to_glyphs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_scaled_font_text_to_glyphs(cairo_scaled_font_t *scaled_font, double x, double y, const char *utf8, int utf8_len, cairo_glyph_t **glyphs, int *num_glyphs, cairo_text_cluster_t **clusters, int *num_clusters, cairo_text_cluster_flags_t *cluster_flags)
     * }
     */
    public static MethodHandle cairo_scaled_font_text_to_glyphs$handle() {
        return cairo_scaled_font_text_to_glyphs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_scaled_font_text_to_glyphs(cairo_scaled_font_t *scaled_font, double x, double y, const char *utf8, int utf8_len, cairo_glyph_t **glyphs, int *num_glyphs, cairo_text_cluster_t **clusters, int *num_clusters, cairo_text_cluster_flags_t *cluster_flags)
     * }
     */
    public static int cairo_scaled_font_text_to_glyphs(MemorySegment scaled_font, double x, double y, MemorySegment utf8, int utf8_len, MemorySegment glyphs, MemorySegment num_glyphs, MemorySegment clusters, MemorySegment num_clusters, MemorySegment cluster_flags) {
        var mh$ = cairo_scaled_font_text_to_glyphs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_text_to_glyphs", scaled_font, x, y, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags);
            }
            return (int)mh$.invokeExact(scaled_font, x, y, utf8, utf8_len, glyphs, num_glyphs, clusters, num_clusters, cluster_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_get_font_face {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_get_font_face"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_scaled_font_get_font_face(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_get_font_face$descriptor() {
        return cairo_scaled_font_get_font_face.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_scaled_font_get_font_face(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MethodHandle cairo_scaled_font_get_font_face$handle() {
        return cairo_scaled_font_get_font_face.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_scaled_font_get_font_face(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MemorySegment cairo_scaled_font_get_font_face(MemorySegment scaled_font) {
        var mh$ = cairo_scaled_font_get_font_face.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_get_font_face", scaled_font);
            }
            return (MemorySegment)mh$.invokeExact(scaled_font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_get_font_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_get_font_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_font_matrix(cairo_scaled_font_t *scaled_font, cairo_matrix_t *font_matrix)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_get_font_matrix$descriptor() {
        return cairo_scaled_font_get_font_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_font_matrix(cairo_scaled_font_t *scaled_font, cairo_matrix_t *font_matrix)
     * }
     */
    public static MethodHandle cairo_scaled_font_get_font_matrix$handle() {
        return cairo_scaled_font_get_font_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_font_matrix(cairo_scaled_font_t *scaled_font, cairo_matrix_t *font_matrix)
     * }
     */
    public static void cairo_scaled_font_get_font_matrix(MemorySegment scaled_font, MemorySegment font_matrix) {
        var mh$ = cairo_scaled_font_get_font_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_get_font_matrix", scaled_font, font_matrix);
            }
            mh$.invokeExact(scaled_font, font_matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_get_ctm {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_get_ctm"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_ctm(cairo_scaled_font_t *scaled_font, cairo_matrix_t *ctm)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_get_ctm$descriptor() {
        return cairo_scaled_font_get_ctm.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_ctm(cairo_scaled_font_t *scaled_font, cairo_matrix_t *ctm)
     * }
     */
    public static MethodHandle cairo_scaled_font_get_ctm$handle() {
        return cairo_scaled_font_get_ctm.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_ctm(cairo_scaled_font_t *scaled_font, cairo_matrix_t *ctm)
     * }
     */
    public static void cairo_scaled_font_get_ctm(MemorySegment scaled_font, MemorySegment ctm) {
        var mh$ = cairo_scaled_font_get_ctm.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_get_ctm", scaled_font, ctm);
            }
            mh$.invokeExact(scaled_font, ctm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_get_scale_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_get_scale_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_scale_matrix(cairo_scaled_font_t *scaled_font, cairo_matrix_t *scale_matrix)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_get_scale_matrix$descriptor() {
        return cairo_scaled_font_get_scale_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_scale_matrix(cairo_scaled_font_t *scaled_font, cairo_matrix_t *scale_matrix)
     * }
     */
    public static MethodHandle cairo_scaled_font_get_scale_matrix$handle() {
        return cairo_scaled_font_get_scale_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_scale_matrix(cairo_scaled_font_t *scaled_font, cairo_matrix_t *scale_matrix)
     * }
     */
    public static void cairo_scaled_font_get_scale_matrix(MemorySegment scaled_font, MemorySegment scale_matrix) {
        var mh$ = cairo_scaled_font_get_scale_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_get_scale_matrix", scaled_font, scale_matrix);
            }
            mh$.invokeExact(scaled_font, scale_matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_scaled_font_get_font_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_scaled_font_get_font_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_font_options(cairo_scaled_font_t *scaled_font, cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_scaled_font_get_font_options$descriptor() {
        return cairo_scaled_font_get_font_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_font_options(cairo_scaled_font_t *scaled_font, cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_scaled_font_get_font_options$handle() {
        return cairo_scaled_font_get_font_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_scaled_font_get_font_options(cairo_scaled_font_t *scaled_font, cairo_font_options_t *options)
     * }
     */
    public static void cairo_scaled_font_get_font_options(MemorySegment scaled_font, MemorySegment options) {
        var mh$ = cairo_scaled_font_get_font_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_scaled_font_get_font_options", scaled_font, options);
            }
            mh$.invokeExact(scaled_font, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_toy_font_face_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_toy_font_face_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_toy_font_face_create(const char *family, cairo_font_slant_t slant, cairo_font_weight_t weight)
     * }
     */
    public static FunctionDescriptor cairo_toy_font_face_create$descriptor() {
        return cairo_toy_font_face_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_toy_font_face_create(const char *family, cairo_font_slant_t slant, cairo_font_weight_t weight)
     * }
     */
    public static MethodHandle cairo_toy_font_face_create$handle() {
        return cairo_toy_font_face_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_toy_font_face_create(const char *family, cairo_font_slant_t slant, cairo_font_weight_t weight)
     * }
     */
    public static MemorySegment cairo_toy_font_face_create(MemorySegment family, int slant, int weight) {
        var mh$ = cairo_toy_font_face_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_toy_font_face_create", family, slant, weight);
            }
            return (MemorySegment)mh$.invokeExact(family, slant, weight);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_toy_font_face_get_family {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_toy_font_face_get_family"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *cairo_toy_font_face_get_family(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_toy_font_face_get_family$descriptor() {
        return cairo_toy_font_face_get_family.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *cairo_toy_font_face_get_family(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_toy_font_face_get_family$handle() {
        return cairo_toy_font_face_get_family.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *cairo_toy_font_face_get_family(cairo_font_face_t *font_face)
     * }
     */
    public static MemorySegment cairo_toy_font_face_get_family(MemorySegment font_face) {
        var mh$ = cairo_toy_font_face_get_family.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_toy_font_face_get_family", font_face);
            }
            return (MemorySegment)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_toy_font_face_get_slant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_toy_font_face_get_slant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_slant_t cairo_toy_font_face_get_slant(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_toy_font_face_get_slant$descriptor() {
        return cairo_toy_font_face_get_slant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_slant_t cairo_toy_font_face_get_slant(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_toy_font_face_get_slant$handle() {
        return cairo_toy_font_face_get_slant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_slant_t cairo_toy_font_face_get_slant(cairo_font_face_t *font_face)
     * }
     */
    public static int cairo_toy_font_face_get_slant(MemorySegment font_face) {
        var mh$ = cairo_toy_font_face_get_slant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_toy_font_face_get_slant", font_face);
            }
            return (int)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_toy_font_face_get_weight {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_toy_font_face_get_weight"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_weight_t cairo_toy_font_face_get_weight(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_toy_font_face_get_weight$descriptor() {
        return cairo_toy_font_face_get_weight.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_weight_t cairo_toy_font_face_get_weight(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_toy_font_face_get_weight$handle() {
        return cairo_toy_font_face_get_weight.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_weight_t cairo_toy_font_face_get_weight(cairo_font_face_t *font_face)
     * }
     */
    public static int cairo_toy_font_face_get_weight(MemorySegment font_face) {
        var mh$ = cairo_toy_font_face_get_weight.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_toy_font_face_get_weight", font_face);
            }
            return (int)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_user_font_face_create()
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_create$descriptor() {
        return cairo_user_font_face_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_user_font_face_create()
     * }
     */
    public static MethodHandle cairo_user_font_face_create$handle() {
        return cairo_user_font_face_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_font_face_t *cairo_user_font_face_create()
     * }
     */
    public static MemorySegment cairo_user_font_face_create() {
        var mh$ = cairo_user_font_face_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_set_init_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_set_init_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_init_func(cairo_font_face_t *font_face, cairo_user_scaled_font_init_func_t init_func)
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_set_init_func$descriptor() {
        return cairo_user_font_face_set_init_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_init_func(cairo_font_face_t *font_face, cairo_user_scaled_font_init_func_t init_func)
     * }
     */
    public static MethodHandle cairo_user_font_face_set_init_func$handle() {
        return cairo_user_font_face_set_init_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_init_func(cairo_font_face_t *font_face, cairo_user_scaled_font_init_func_t init_func)
     * }
     */
    public static void cairo_user_font_face_set_init_func(MemorySegment font_face, MemorySegment init_func) {
        var mh$ = cairo_user_font_face_set_init_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_set_init_func", font_face, init_func);
            }
            mh$.invokeExact(font_face, init_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_set_render_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_set_render_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_render_glyph_func(cairo_font_face_t *font_face, cairo_user_scaled_font_render_glyph_func_t render_glyph_func)
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_set_render_glyph_func$descriptor() {
        return cairo_user_font_face_set_render_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_render_glyph_func(cairo_font_face_t *font_face, cairo_user_scaled_font_render_glyph_func_t render_glyph_func)
     * }
     */
    public static MethodHandle cairo_user_font_face_set_render_glyph_func$handle() {
        return cairo_user_font_face_set_render_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_render_glyph_func(cairo_font_face_t *font_face, cairo_user_scaled_font_render_glyph_func_t render_glyph_func)
     * }
     */
    public static void cairo_user_font_face_set_render_glyph_func(MemorySegment font_face, MemorySegment render_glyph_func) {
        var mh$ = cairo_user_font_face_set_render_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_set_render_glyph_func", font_face, render_glyph_func);
            }
            mh$.invokeExact(font_face, render_glyph_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_set_render_color_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_set_render_color_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_render_color_glyph_func(cairo_font_face_t *font_face, cairo_user_scaled_font_render_glyph_func_t render_glyph_func)
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_set_render_color_glyph_func$descriptor() {
        return cairo_user_font_face_set_render_color_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_render_color_glyph_func(cairo_font_face_t *font_face, cairo_user_scaled_font_render_glyph_func_t render_glyph_func)
     * }
     */
    public static MethodHandle cairo_user_font_face_set_render_color_glyph_func$handle() {
        return cairo_user_font_face_set_render_color_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_render_color_glyph_func(cairo_font_face_t *font_face, cairo_user_scaled_font_render_glyph_func_t render_glyph_func)
     * }
     */
    public static void cairo_user_font_face_set_render_color_glyph_func(MemorySegment font_face, MemorySegment render_glyph_func) {
        var mh$ = cairo_user_font_face_set_render_color_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_set_render_color_glyph_func", font_face, render_glyph_func);
            }
            mh$.invokeExact(font_face, render_glyph_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_set_text_to_glyphs_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_set_text_to_glyphs_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_text_to_glyphs_func(cairo_font_face_t *font_face, cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func)
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_set_text_to_glyphs_func$descriptor() {
        return cairo_user_font_face_set_text_to_glyphs_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_text_to_glyphs_func(cairo_font_face_t *font_face, cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func)
     * }
     */
    public static MethodHandle cairo_user_font_face_set_text_to_glyphs_func$handle() {
        return cairo_user_font_face_set_text_to_glyphs_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_text_to_glyphs_func(cairo_font_face_t *font_face, cairo_user_scaled_font_text_to_glyphs_func_t text_to_glyphs_func)
     * }
     */
    public static void cairo_user_font_face_set_text_to_glyphs_func(MemorySegment font_face, MemorySegment text_to_glyphs_func) {
        var mh$ = cairo_user_font_face_set_text_to_glyphs_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_set_text_to_glyphs_func", font_face, text_to_glyphs_func);
            }
            mh$.invokeExact(font_face, text_to_glyphs_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_set_unicode_to_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_set_unicode_to_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_unicode_to_glyph_func(cairo_font_face_t *font_face, cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func)
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_set_unicode_to_glyph_func$descriptor() {
        return cairo_user_font_face_set_unicode_to_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_unicode_to_glyph_func(cairo_font_face_t *font_face, cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func)
     * }
     */
    public static MethodHandle cairo_user_font_face_set_unicode_to_glyph_func$handle() {
        return cairo_user_font_face_set_unicode_to_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_user_font_face_set_unicode_to_glyph_func(cairo_font_face_t *font_face, cairo_user_scaled_font_unicode_to_glyph_func_t unicode_to_glyph_func)
     * }
     */
    public static void cairo_user_font_face_set_unicode_to_glyph_func(MemorySegment font_face, MemorySegment unicode_to_glyph_func) {
        var mh$ = cairo_user_font_face_set_unicode_to_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_set_unicode_to_glyph_func", font_face, unicode_to_glyph_func);
            }
            mh$.invokeExact(font_face, unicode_to_glyph_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_get_init_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_get_init_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_init_func_t cairo_user_font_face_get_init_func(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_get_init_func$descriptor() {
        return cairo_user_font_face_get_init_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_init_func_t cairo_user_font_face_get_init_func(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_user_font_face_get_init_func$handle() {
        return cairo_user_font_face_get_init_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_init_func_t cairo_user_font_face_get_init_func(cairo_font_face_t *font_face)
     * }
     */
    public static MemorySegment cairo_user_font_face_get_init_func(MemorySegment font_face) {
        var mh$ = cairo_user_font_face_get_init_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_get_init_func", font_face);
            }
            return (MemorySegment)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_get_render_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_get_render_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_render_glyph_func_t cairo_user_font_face_get_render_glyph_func(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_get_render_glyph_func$descriptor() {
        return cairo_user_font_face_get_render_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_render_glyph_func_t cairo_user_font_face_get_render_glyph_func(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_user_font_face_get_render_glyph_func$handle() {
        return cairo_user_font_face_get_render_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_render_glyph_func_t cairo_user_font_face_get_render_glyph_func(cairo_font_face_t *font_face)
     * }
     */
    public static MemorySegment cairo_user_font_face_get_render_glyph_func(MemorySegment font_face) {
        var mh$ = cairo_user_font_face_get_render_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_get_render_glyph_func", font_face);
            }
            return (MemorySegment)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_get_render_color_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_get_render_color_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_render_glyph_func_t cairo_user_font_face_get_render_color_glyph_func(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_get_render_color_glyph_func$descriptor() {
        return cairo_user_font_face_get_render_color_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_render_glyph_func_t cairo_user_font_face_get_render_color_glyph_func(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_user_font_face_get_render_color_glyph_func$handle() {
        return cairo_user_font_face_get_render_color_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_render_glyph_func_t cairo_user_font_face_get_render_color_glyph_func(cairo_font_face_t *font_face)
     * }
     */
    public static MemorySegment cairo_user_font_face_get_render_color_glyph_func(MemorySegment font_face) {
        var mh$ = cairo_user_font_face_get_render_color_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_get_render_color_glyph_func", font_face);
            }
            return (MemorySegment)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_get_text_to_glyphs_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_get_text_to_glyphs_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_text_to_glyphs_func_t cairo_user_font_face_get_text_to_glyphs_func(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_get_text_to_glyphs_func$descriptor() {
        return cairo_user_font_face_get_text_to_glyphs_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_text_to_glyphs_func_t cairo_user_font_face_get_text_to_glyphs_func(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_user_font_face_get_text_to_glyphs_func$handle() {
        return cairo_user_font_face_get_text_to_glyphs_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_text_to_glyphs_func_t cairo_user_font_face_get_text_to_glyphs_func(cairo_font_face_t *font_face)
     * }
     */
    public static MemorySegment cairo_user_font_face_get_text_to_glyphs_func(MemorySegment font_face) {
        var mh$ = cairo_user_font_face_get_text_to_glyphs_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_get_text_to_glyphs_func", font_face);
            }
            return (MemorySegment)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_font_face_get_unicode_to_glyph_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_font_face_get_unicode_to_glyph_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_unicode_to_glyph_func_t cairo_user_font_face_get_unicode_to_glyph_func(cairo_font_face_t *font_face)
     * }
     */
    public static FunctionDescriptor cairo_user_font_face_get_unicode_to_glyph_func$descriptor() {
        return cairo_user_font_face_get_unicode_to_glyph_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_unicode_to_glyph_func_t cairo_user_font_face_get_unicode_to_glyph_func(cairo_font_face_t *font_face)
     * }
     */
    public static MethodHandle cairo_user_font_face_get_unicode_to_glyph_func$handle() {
        return cairo_user_font_face_get_unicode_to_glyph_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_user_scaled_font_unicode_to_glyph_func_t cairo_user_font_face_get_unicode_to_glyph_func(cairo_font_face_t *font_face)
     * }
     */
    public static MemorySegment cairo_user_font_face_get_unicode_to_glyph_func(MemorySegment font_face) {
        var mh$ = cairo_user_font_face_get_unicode_to_glyph_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_font_face_get_unicode_to_glyph_func", font_face);
            }
            return (MemorySegment)mh$.invokeExact(font_face);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_scaled_font_get_foreground_marker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_scaled_font_get_foreground_marker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_user_scaled_font_get_foreground_marker(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static FunctionDescriptor cairo_user_scaled_font_get_foreground_marker$descriptor() {
        return cairo_user_scaled_font_get_foreground_marker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_user_scaled_font_get_foreground_marker(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MethodHandle cairo_user_scaled_font_get_foreground_marker$handle() {
        return cairo_user_scaled_font_get_foreground_marker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_user_scaled_font_get_foreground_marker(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MemorySegment cairo_user_scaled_font_get_foreground_marker(MemorySegment scaled_font) {
        var mh$ = cairo_user_scaled_font_get_foreground_marker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_scaled_font_get_foreground_marker", scaled_font);
            }
            return (MemorySegment)mh$.invokeExact(scaled_font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_user_scaled_font_get_foreground_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_user_scaled_font_get_foreground_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_user_scaled_font_get_foreground_source(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static FunctionDescriptor cairo_user_scaled_font_get_foreground_source$descriptor() {
        return cairo_user_scaled_font_get_foreground_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_user_scaled_font_get_foreground_source(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MethodHandle cairo_user_scaled_font_get_foreground_source$handle() {
        return cairo_user_scaled_font_get_foreground_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_user_scaled_font_get_foreground_source(cairo_scaled_font_t *scaled_font)
     * }
     */
    public static MemorySegment cairo_user_scaled_font_get_foreground_source(MemorySegment scaled_font) {
        var mh$ = cairo_user_scaled_font_get_foreground_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_user_scaled_font_get_foreground_source", scaled_font);
            }
            return (MemorySegment)mh$.invokeExact(scaled_font);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_operator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_operator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_operator_t cairo_get_operator(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_operator$descriptor() {
        return cairo_get_operator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_operator_t cairo_get_operator(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_operator$handle() {
        return cairo_get_operator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_operator_t cairo_get_operator(cairo_t *cr)
     * }
     */
    public static int cairo_get_operator(MemorySegment cr) {
        var mh$ = cairo_get_operator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_operator", cr);
            }
            return (int)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_get_source(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_source$descriptor() {
        return cairo_get_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_get_source(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_source$handle() {
        return cairo_get_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_get_source(cairo_t *cr)
     * }
     */
    public static MemorySegment cairo_get_source(MemorySegment cr) {
        var mh$ = cairo_get_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_source", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_tolerance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_tolerance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cairo_get_tolerance(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_tolerance$descriptor() {
        return cairo_get_tolerance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cairo_get_tolerance(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_tolerance$handle() {
        return cairo_get_tolerance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double cairo_get_tolerance(cairo_t *cr)
     * }
     */
    public static double cairo_get_tolerance(MemorySegment cr) {
        var mh$ = cairo_get_tolerance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_tolerance", cr);
            }
            return (double)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_antialias {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_antialias"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_antialias_t cairo_get_antialias(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_antialias$descriptor() {
        return cairo_get_antialias.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_antialias_t cairo_get_antialias(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_antialias$handle() {
        return cairo_get_antialias.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_antialias_t cairo_get_antialias(cairo_t *cr)
     * }
     */
    public static int cairo_get_antialias(MemorySegment cr) {
        var mh$ = cairo_get_antialias.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_antialias", cr);
            }
            return (int)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_has_current_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_has_current_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_has_current_point(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_has_current_point$descriptor() {
        return cairo_has_current_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_has_current_point(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_has_current_point$handle() {
        return cairo_has_current_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_has_current_point(cairo_t *cr)
     * }
     */
    public static int cairo_has_current_point(MemorySegment cr) {
        var mh$ = cairo_has_current_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_has_current_point", cr);
            }
            return (int)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_current_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_current_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_get_current_point(cairo_t *cr, double *x, double *y)
     * }
     */
    public static FunctionDescriptor cairo_get_current_point$descriptor() {
        return cairo_get_current_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_get_current_point(cairo_t *cr, double *x, double *y)
     * }
     */
    public static MethodHandle cairo_get_current_point$handle() {
        return cairo_get_current_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_get_current_point(cairo_t *cr, double *x, double *y)
     * }
     */
    public static void cairo_get_current_point(MemorySegment cr, MemorySegment x, MemorySegment y) {
        var mh$ = cairo_get_current_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_current_point", cr, x, y);
            }
            mh$.invokeExact(cr, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_fill_rule {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_fill_rule"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_fill_rule_t cairo_get_fill_rule(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_fill_rule$descriptor() {
        return cairo_get_fill_rule.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_fill_rule_t cairo_get_fill_rule(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_fill_rule$handle() {
        return cairo_get_fill_rule.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_fill_rule_t cairo_get_fill_rule(cairo_t *cr)
     * }
     */
    public static int cairo_get_fill_rule(MemorySegment cr) {
        var mh$ = cairo_get_fill_rule.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_fill_rule", cr);
            }
            return (int)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_line_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_line_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cairo_get_line_width(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_line_width$descriptor() {
        return cairo_get_line_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cairo_get_line_width(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_line_width$handle() {
        return cairo_get_line_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double cairo_get_line_width(cairo_t *cr)
     * }
     */
    public static double cairo_get_line_width(MemorySegment cr) {
        var mh$ = cairo_get_line_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_line_width", cr);
            }
            return (double)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_hairline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_hairline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_get_hairline(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_hairline$descriptor() {
        return cairo_get_hairline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_get_hairline(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_hairline$handle() {
        return cairo_get_hairline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_get_hairline(cairo_t *cr)
     * }
     */
    public static int cairo_get_hairline(MemorySegment cr) {
        var mh$ = cairo_get_hairline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_hairline", cr);
            }
            return (int)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_line_cap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_line_cap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_line_cap_t cairo_get_line_cap(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_line_cap$descriptor() {
        return cairo_get_line_cap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_line_cap_t cairo_get_line_cap(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_line_cap$handle() {
        return cairo_get_line_cap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_line_cap_t cairo_get_line_cap(cairo_t *cr)
     * }
     */
    public static int cairo_get_line_cap(MemorySegment cr) {
        var mh$ = cairo_get_line_cap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_line_cap", cr);
            }
            return (int)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_line_join {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_line_join"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_line_join_t cairo_get_line_join(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_line_join$descriptor() {
        return cairo_get_line_join.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_line_join_t cairo_get_line_join(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_line_join$handle() {
        return cairo_get_line_join.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_line_join_t cairo_get_line_join(cairo_t *cr)
     * }
     */
    public static int cairo_get_line_join(MemorySegment cr) {
        var mh$ = cairo_get_line_join.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_line_join", cr);
            }
            return (int)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_miter_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_miter_limit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cairo_get_miter_limit(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_miter_limit$descriptor() {
        return cairo_get_miter_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cairo_get_miter_limit(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_miter_limit$handle() {
        return cairo_get_miter_limit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double cairo_get_miter_limit(cairo_t *cr)
     * }
     */
    public static double cairo_get_miter_limit(MemorySegment cr) {
        var mh$ = cairo_get_miter_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_miter_limit", cr);
            }
            return (double)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_dash_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_dash_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int cairo_get_dash_count(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_dash_count$descriptor() {
        return cairo_get_dash_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int cairo_get_dash_count(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_dash_count$handle() {
        return cairo_get_dash_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int cairo_get_dash_count(cairo_t *cr)
     * }
     */
    public static int cairo_get_dash_count(MemorySegment cr) {
        var mh$ = cairo_get_dash_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_dash_count", cr);
            }
            return (int)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_dash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_dash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_get_dash(cairo_t *cr, double *dashes, double *offset)
     * }
     */
    public static FunctionDescriptor cairo_get_dash$descriptor() {
        return cairo_get_dash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_get_dash(cairo_t *cr, double *dashes, double *offset)
     * }
     */
    public static MethodHandle cairo_get_dash$handle() {
        return cairo_get_dash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_get_dash(cairo_t *cr, double *dashes, double *offset)
     * }
     */
    public static void cairo_get_dash(MemorySegment cr, MemorySegment dashes, MemorySegment offset) {
        var mh$ = cairo_get_dash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_dash", cr, dashes, offset);
            }
            mh$.invokeExact(cr, dashes, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_get_matrix(cairo_t *cr, cairo_matrix_t *matrix)
     * }
     */
    public static FunctionDescriptor cairo_get_matrix$descriptor() {
        return cairo_get_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_get_matrix(cairo_t *cr, cairo_matrix_t *matrix)
     * }
     */
    public static MethodHandle cairo_get_matrix$handle() {
        return cairo_get_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_get_matrix(cairo_t *cr, cairo_matrix_t *matrix)
     * }
     */
    public static void cairo_get_matrix(MemorySegment cr, MemorySegment matrix) {
        var mh$ = cairo_get_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_matrix", cr, matrix);
            }
            mh$.invokeExact(cr, matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_get_target(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_target$descriptor() {
        return cairo_get_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_get_target(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_target$handle() {
        return cairo_get_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_get_target(cairo_t *cr)
     * }
     */
    public static MemorySegment cairo_get_target(MemorySegment cr) {
        var mh$ = cairo_get_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_target", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_get_group_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_get_group_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_get_group_target(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_get_group_target$descriptor() {
        return cairo_get_group_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_get_group_target(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_get_group_target$handle() {
        return cairo_get_group_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_get_group_target(cairo_t *cr)
     * }
     */
    public static MemorySegment cairo_get_group_target(MemorySegment cr) {
        var mh$ = cairo_get_group_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_get_group_target", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_PATH_MOVE_TO = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_path_data_type.CAIRO_PATH_MOVE_TO = 0
     * }
     */
    public static int CAIRO_PATH_MOVE_TO() {
        return CAIRO_PATH_MOVE_TO;
    }
    private static final int CAIRO_PATH_LINE_TO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_path_data_type.CAIRO_PATH_LINE_TO = 1
     * }
     */
    public static int CAIRO_PATH_LINE_TO() {
        return CAIRO_PATH_LINE_TO;
    }
    private static final int CAIRO_PATH_CURVE_TO = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_path_data_type.CAIRO_PATH_CURVE_TO = 2
     * }
     */
    public static int CAIRO_PATH_CURVE_TO() {
        return CAIRO_PATH_CURVE_TO;
    }
    private static final int CAIRO_PATH_CLOSE_PATH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_path_data_type.CAIRO_PATH_CLOSE_PATH = 3
     * }
     */
    public static int CAIRO_PATH_CLOSE_PATH() {
        return CAIRO_PATH_CLOSE_PATH;
    }

    private static class cairo_copy_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_copy_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_path_t *cairo_copy_path(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_copy_path$descriptor() {
        return cairo_copy_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_path_t *cairo_copy_path(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_copy_path$handle() {
        return cairo_copy_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_path_t *cairo_copy_path(cairo_t *cr)
     * }
     */
    public static MemorySegment cairo_copy_path(MemorySegment cr) {
        var mh$ = cairo_copy_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_copy_path", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_copy_path_flat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_copy_path_flat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_path_t *cairo_copy_path_flat(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_copy_path_flat$descriptor() {
        return cairo_copy_path_flat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_path_t *cairo_copy_path_flat(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_copy_path_flat$handle() {
        return cairo_copy_path_flat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_path_t *cairo_copy_path_flat(cairo_t *cr)
     * }
     */
    public static MemorySegment cairo_copy_path_flat(MemorySegment cr) {
        var mh$ = cairo_copy_path_flat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_copy_path_flat", cr);
            }
            return (MemorySegment)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_append_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_append_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_append_path(cairo_t *cr, const cairo_path_t *path)
     * }
     */
    public static FunctionDescriptor cairo_append_path$descriptor() {
        return cairo_append_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_append_path(cairo_t *cr, const cairo_path_t *path)
     * }
     */
    public static MethodHandle cairo_append_path$handle() {
        return cairo_append_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_append_path(cairo_t *cr, const cairo_path_t *path)
     * }
     */
    public static void cairo_append_path(MemorySegment cr, MemorySegment path) {
        var mh$ = cairo_append_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_append_path", cr, path);
            }
            mh$.invokeExact(cr, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_path_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_path_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_path_destroy(cairo_path_t *path)
     * }
     */
    public static FunctionDescriptor cairo_path_destroy$descriptor() {
        return cairo_path_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_path_destroy(cairo_path_t *path)
     * }
     */
    public static MethodHandle cairo_path_destroy$handle() {
        return cairo_path_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_path_destroy(cairo_path_t *path)
     * }
     */
    public static void cairo_path_destroy(MemorySegment path) {
        var mh$ = cairo_path_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_path_destroy", path);
            }
            mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_status(cairo_t *cr)
     * }
     */
    public static FunctionDescriptor cairo_status$descriptor() {
        return cairo_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_status(cairo_t *cr)
     * }
     */
    public static MethodHandle cairo_status$handle() {
        return cairo_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_status(cairo_t *cr)
     * }
     */
    public static int cairo_status(MemorySegment cr) {
        var mh$ = cairo_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_status", cr);
            }
            return (int)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_status_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_status_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *cairo_status_to_string(cairo_status_t status)
     * }
     */
    public static FunctionDescriptor cairo_status_to_string$descriptor() {
        return cairo_status_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *cairo_status_to_string(cairo_status_t status)
     * }
     */
    public static MethodHandle cairo_status_to_string$handle() {
        return cairo_status_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *cairo_status_to_string(cairo_status_t status)
     * }
     */
    public static MemorySegment cairo_status_to_string(int status) {
        var mh$ = cairo_status_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_status_to_string", status);
            }
            return (MemorySegment)mh$.invokeExact(status);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_device_t *cairo_device_reference(cairo_device_t *device)
     * }
     */
    public static FunctionDescriptor cairo_device_reference$descriptor() {
        return cairo_device_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_device_t *cairo_device_reference(cairo_device_t *device)
     * }
     */
    public static MethodHandle cairo_device_reference$handle() {
        return cairo_device_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_device_t *cairo_device_reference(cairo_device_t *device)
     * }
     */
    public static MemorySegment cairo_device_reference(MemorySegment device) {
        var mh$ = cairo_device_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_reference", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_DEVICE_TYPE_DRM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_device_type.CAIRO_DEVICE_TYPE_DRM = 0
     * }
     */
    public static int CAIRO_DEVICE_TYPE_DRM() {
        return CAIRO_DEVICE_TYPE_DRM;
    }
    private static final int CAIRO_DEVICE_TYPE_GL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_device_type.CAIRO_DEVICE_TYPE_GL = 1
     * }
     */
    public static int CAIRO_DEVICE_TYPE_GL() {
        return CAIRO_DEVICE_TYPE_GL;
    }
    private static final int CAIRO_DEVICE_TYPE_SCRIPT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_device_type.CAIRO_DEVICE_TYPE_SCRIPT = 2
     * }
     */
    public static int CAIRO_DEVICE_TYPE_SCRIPT() {
        return CAIRO_DEVICE_TYPE_SCRIPT;
    }
    private static final int CAIRO_DEVICE_TYPE_XCB = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_device_type.CAIRO_DEVICE_TYPE_XCB = 3
     * }
     */
    public static int CAIRO_DEVICE_TYPE_XCB() {
        return CAIRO_DEVICE_TYPE_XCB;
    }
    private static final int CAIRO_DEVICE_TYPE_XLIB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_device_type.CAIRO_DEVICE_TYPE_XLIB = 4
     * }
     */
    public static int CAIRO_DEVICE_TYPE_XLIB() {
        return CAIRO_DEVICE_TYPE_XLIB;
    }
    private static final int CAIRO_DEVICE_TYPE_XML = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _cairo_device_type.CAIRO_DEVICE_TYPE_XML = 5
     * }
     */
    public static int CAIRO_DEVICE_TYPE_XML() {
        return CAIRO_DEVICE_TYPE_XML;
    }
    private static final int CAIRO_DEVICE_TYPE_COGL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _cairo_device_type.CAIRO_DEVICE_TYPE_COGL = 6
     * }
     */
    public static int CAIRO_DEVICE_TYPE_COGL() {
        return CAIRO_DEVICE_TYPE_COGL;
    }
    private static final int CAIRO_DEVICE_TYPE_WIN32 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _cairo_device_type.CAIRO_DEVICE_TYPE_WIN32 = 7
     * }
     */
    public static int CAIRO_DEVICE_TYPE_WIN32() {
        return CAIRO_DEVICE_TYPE_WIN32;
    }
    private static final int CAIRO_DEVICE_TYPE_INVALID = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_device_type.CAIRO_DEVICE_TYPE_INVALID = -1
     * }
     */
    public static int CAIRO_DEVICE_TYPE_INVALID() {
        return CAIRO_DEVICE_TYPE_INVALID;
    }

    private static class cairo_device_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_device_type_t cairo_device_get_type(cairo_device_t *device)
     * }
     */
    public static FunctionDescriptor cairo_device_get_type$descriptor() {
        return cairo_device_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_device_type_t cairo_device_get_type(cairo_device_t *device)
     * }
     */
    public static MethodHandle cairo_device_get_type$handle() {
        return cairo_device_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_device_type_t cairo_device_get_type(cairo_device_t *device)
     * }
     */
    public static int cairo_device_get_type(MemorySegment device) {
        var mh$ = cairo_device_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_get_type", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_status(cairo_device_t *device)
     * }
     */
    public static FunctionDescriptor cairo_device_status$descriptor() {
        return cairo_device_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_status(cairo_device_t *device)
     * }
     */
    public static MethodHandle cairo_device_status$handle() {
        return cairo_device_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_status(cairo_device_t *device)
     * }
     */
    public static int cairo_device_status(MemorySegment device) {
        var mh$ = cairo_device_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_status", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_acquire {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_acquire"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_acquire(cairo_device_t *device)
     * }
     */
    public static FunctionDescriptor cairo_device_acquire$descriptor() {
        return cairo_device_acquire.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_acquire(cairo_device_t *device)
     * }
     */
    public static MethodHandle cairo_device_acquire$handle() {
        return cairo_device_acquire.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_acquire(cairo_device_t *device)
     * }
     */
    public static int cairo_device_acquire(MemorySegment device) {
        var mh$ = cairo_device_acquire.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_acquire", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_device_release(cairo_device_t *device)
     * }
     */
    public static FunctionDescriptor cairo_device_release$descriptor() {
        return cairo_device_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_device_release(cairo_device_t *device)
     * }
     */
    public static MethodHandle cairo_device_release$handle() {
        return cairo_device_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_device_release(cairo_device_t *device)
     * }
     */
    public static void cairo_device_release(MemorySegment device) {
        var mh$ = cairo_device_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_release", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_flush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_device_flush(cairo_device_t *device)
     * }
     */
    public static FunctionDescriptor cairo_device_flush$descriptor() {
        return cairo_device_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_device_flush(cairo_device_t *device)
     * }
     */
    public static MethodHandle cairo_device_flush$handle() {
        return cairo_device_flush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_device_flush(cairo_device_t *device)
     * }
     */
    public static void cairo_device_flush(MemorySegment device) {
        var mh$ = cairo_device_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_flush", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_device_finish(cairo_device_t *device)
     * }
     */
    public static FunctionDescriptor cairo_device_finish$descriptor() {
        return cairo_device_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_device_finish(cairo_device_t *device)
     * }
     */
    public static MethodHandle cairo_device_finish$handle() {
        return cairo_device_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_device_finish(cairo_device_t *device)
     * }
     */
    public static void cairo_device_finish(MemorySegment device) {
        var mh$ = cairo_device_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_finish", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_device_destroy(cairo_device_t *device)
     * }
     */
    public static FunctionDescriptor cairo_device_destroy$descriptor() {
        return cairo_device_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_device_destroy(cairo_device_t *device)
     * }
     */
    public static MethodHandle cairo_device_destroy$handle() {
        return cairo_device_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_device_destroy(cairo_device_t *device)
     * }
     */
    public static void cairo_device_destroy(MemorySegment device) {
        var mh$ = cairo_device_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_destroy", device);
            }
            mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_get_reference_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_get_reference_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int cairo_device_get_reference_count(cairo_device_t *device)
     * }
     */
    public static FunctionDescriptor cairo_device_get_reference_count$descriptor() {
        return cairo_device_get_reference_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int cairo_device_get_reference_count(cairo_device_t *device)
     * }
     */
    public static MethodHandle cairo_device_get_reference_count$handle() {
        return cairo_device_get_reference_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int cairo_device_get_reference_count(cairo_device_t *device)
     * }
     */
    public static int cairo_device_get_reference_count(MemorySegment device) {
        var mh$ = cairo_device_get_reference_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_get_reference_count", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *cairo_device_get_user_data(cairo_device_t *device, const cairo_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor cairo_device_get_user_data$descriptor() {
        return cairo_device_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *cairo_device_get_user_data(cairo_device_t *device, const cairo_user_data_key_t *key)
     * }
     */
    public static MethodHandle cairo_device_get_user_data$handle() {
        return cairo_device_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *cairo_device_get_user_data(cairo_device_t *device, const cairo_user_data_key_t *key)
     * }
     */
    public static MemorySegment cairo_device_get_user_data(MemorySegment device, MemorySegment key) {
        var mh$ = cairo_device_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_get_user_data", device, key);
            }
            return (MemorySegment)mh$.invokeExact(device, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_set_user_data(cairo_device_t *device, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor cairo_device_set_user_data$descriptor() {
        return cairo_device_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_set_user_data(cairo_device_t *device, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static MethodHandle cairo_device_set_user_data$handle() {
        return cairo_device_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_set_user_data(cairo_device_t *device, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static int cairo_device_set_user_data(MemorySegment device, MemorySegment key, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = cairo_device_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_set_user_data", device, key, user_data, destroy);
            }
            return (int)mh$.invokeExact(device, key, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_create_similar {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_create_similar"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_similar(cairo_surface_t *other, cairo_content_t content, int width, int height)
     * }
     */
    public static FunctionDescriptor cairo_surface_create_similar$descriptor() {
        return cairo_surface_create_similar.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_similar(cairo_surface_t *other, cairo_content_t content, int width, int height)
     * }
     */
    public static MethodHandle cairo_surface_create_similar$handle() {
        return cairo_surface_create_similar.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_similar(cairo_surface_t *other, cairo_content_t content, int width, int height)
     * }
     */
    public static MemorySegment cairo_surface_create_similar(MemorySegment other, int content, int width, int height) {
        var mh$ = cairo_surface_create_similar.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_create_similar", other, content, width, height);
            }
            return (MemorySegment)mh$.invokeExact(other, content, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_create_similar_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_create_similar_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_similar_image(cairo_surface_t *other, cairo_format_t format, int width, int height)
     * }
     */
    public static FunctionDescriptor cairo_surface_create_similar_image$descriptor() {
        return cairo_surface_create_similar_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_similar_image(cairo_surface_t *other, cairo_format_t format, int width, int height)
     * }
     */
    public static MethodHandle cairo_surface_create_similar_image$handle() {
        return cairo_surface_create_similar_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_similar_image(cairo_surface_t *other, cairo_format_t format, int width, int height)
     * }
     */
    public static MemorySegment cairo_surface_create_similar_image(MemorySegment other, int format, int width, int height) {
        var mh$ = cairo_surface_create_similar_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_create_similar_image", other, format, width, height);
            }
            return (MemorySegment)mh$.invokeExact(other, format, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_map_to_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_map_to_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_map_to_image(cairo_surface_t *surface, const cairo_rectangle_int_t *extents)
     * }
     */
    public static FunctionDescriptor cairo_surface_map_to_image$descriptor() {
        return cairo_surface_map_to_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_map_to_image(cairo_surface_t *surface, const cairo_rectangle_int_t *extents)
     * }
     */
    public static MethodHandle cairo_surface_map_to_image$handle() {
        return cairo_surface_map_to_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_map_to_image(cairo_surface_t *surface, const cairo_rectangle_int_t *extents)
     * }
     */
    public static MemorySegment cairo_surface_map_to_image(MemorySegment surface, MemorySegment extents) {
        var mh$ = cairo_surface_map_to_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_map_to_image", surface, extents);
            }
            return (MemorySegment)mh$.invokeExact(surface, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_unmap_image {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_unmap_image"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_unmap_image(cairo_surface_t *surface, cairo_surface_t *image)
     * }
     */
    public static FunctionDescriptor cairo_surface_unmap_image$descriptor() {
        return cairo_surface_unmap_image.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_unmap_image(cairo_surface_t *surface, cairo_surface_t *image)
     * }
     */
    public static MethodHandle cairo_surface_unmap_image$handle() {
        return cairo_surface_unmap_image.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_unmap_image(cairo_surface_t *surface, cairo_surface_t *image)
     * }
     */
    public static void cairo_surface_unmap_image(MemorySegment surface, MemorySegment image) {
        var mh$ = cairo_surface_unmap_image.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_unmap_image", surface, image);
            }
            mh$.invokeExact(surface, image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_create_for_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_create_for_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_for_rectangle(cairo_surface_t *target, double x, double y, double width, double height)
     * }
     */
    public static FunctionDescriptor cairo_surface_create_for_rectangle$descriptor() {
        return cairo_surface_create_for_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_for_rectangle(cairo_surface_t *target, double x, double y, double width, double height)
     * }
     */
    public static MethodHandle cairo_surface_create_for_rectangle$handle() {
        return cairo_surface_create_for_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_for_rectangle(cairo_surface_t *target, double x, double y, double width, double height)
     * }
     */
    public static MemorySegment cairo_surface_create_for_rectangle(MemorySegment target, double x, double y, double width, double height) {
        var mh$ = cairo_surface_create_for_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_create_for_rectangle", target, x, y, width, height);
            }
            return (MemorySegment)mh$.invokeExact(target, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_SURFACE_OBSERVER_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CAIRO_SURFACE_OBSERVER_NORMAL = 0
     * }
     */
    public static int CAIRO_SURFACE_OBSERVER_NORMAL() {
        return CAIRO_SURFACE_OBSERVER_NORMAL;
    }
    private static final int CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS = 1
     * }
     */
    public static int CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS() {
        return CAIRO_SURFACE_OBSERVER_RECORD_OPERATIONS;
    }

    private static class cairo_surface_create_observer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_create_observer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_observer(cairo_surface_t *target, cairo_surface_observer_mode_t mode)
     * }
     */
    public static FunctionDescriptor cairo_surface_create_observer$descriptor() {
        return cairo_surface_create_observer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_observer(cairo_surface_t *target, cairo_surface_observer_mode_t mode)
     * }
     */
    public static MethodHandle cairo_surface_create_observer$handle() {
        return cairo_surface_create_observer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_create_observer(cairo_surface_t *target, cairo_surface_observer_mode_t mode)
     * }
     */
    public static MemorySegment cairo_surface_create_observer(MemorySegment target, int mode) {
        var mh$ = cairo_surface_create_observer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_create_observer", target, mode);
            }
            return (MemorySegment)mh$.invokeExact(target, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_observer_add_paint_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_observer_add_paint_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_paint_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static FunctionDescriptor cairo_surface_observer_add_paint_callback$descriptor() {
        return cairo_surface_observer_add_paint_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_paint_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static MethodHandle cairo_surface_observer_add_paint_callback$handle() {
        return cairo_surface_observer_add_paint_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_paint_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static int cairo_surface_observer_add_paint_callback(MemorySegment abstract_surface, MemorySegment func, MemorySegment data) {
        var mh$ = cairo_surface_observer_add_paint_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_observer_add_paint_callback", abstract_surface, func, data);
            }
            return (int)mh$.invokeExact(abstract_surface, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_observer_add_mask_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_observer_add_mask_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_mask_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static FunctionDescriptor cairo_surface_observer_add_mask_callback$descriptor() {
        return cairo_surface_observer_add_mask_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_mask_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static MethodHandle cairo_surface_observer_add_mask_callback$handle() {
        return cairo_surface_observer_add_mask_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_mask_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static int cairo_surface_observer_add_mask_callback(MemorySegment abstract_surface, MemorySegment func, MemorySegment data) {
        var mh$ = cairo_surface_observer_add_mask_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_observer_add_mask_callback", abstract_surface, func, data);
            }
            return (int)mh$.invokeExact(abstract_surface, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_observer_add_fill_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_observer_add_fill_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_fill_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static FunctionDescriptor cairo_surface_observer_add_fill_callback$descriptor() {
        return cairo_surface_observer_add_fill_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_fill_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static MethodHandle cairo_surface_observer_add_fill_callback$handle() {
        return cairo_surface_observer_add_fill_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_fill_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static int cairo_surface_observer_add_fill_callback(MemorySegment abstract_surface, MemorySegment func, MemorySegment data) {
        var mh$ = cairo_surface_observer_add_fill_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_observer_add_fill_callback", abstract_surface, func, data);
            }
            return (int)mh$.invokeExact(abstract_surface, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_observer_add_stroke_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_observer_add_stroke_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_stroke_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static FunctionDescriptor cairo_surface_observer_add_stroke_callback$descriptor() {
        return cairo_surface_observer_add_stroke_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_stroke_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static MethodHandle cairo_surface_observer_add_stroke_callback$handle() {
        return cairo_surface_observer_add_stroke_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_stroke_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static int cairo_surface_observer_add_stroke_callback(MemorySegment abstract_surface, MemorySegment func, MemorySegment data) {
        var mh$ = cairo_surface_observer_add_stroke_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_observer_add_stroke_callback", abstract_surface, func, data);
            }
            return (int)mh$.invokeExact(abstract_surface, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_observer_add_glyphs_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_observer_add_glyphs_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_glyphs_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static FunctionDescriptor cairo_surface_observer_add_glyphs_callback$descriptor() {
        return cairo_surface_observer_add_glyphs_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_glyphs_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static MethodHandle cairo_surface_observer_add_glyphs_callback$handle() {
        return cairo_surface_observer_add_glyphs_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_glyphs_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static int cairo_surface_observer_add_glyphs_callback(MemorySegment abstract_surface, MemorySegment func, MemorySegment data) {
        var mh$ = cairo_surface_observer_add_glyphs_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_observer_add_glyphs_callback", abstract_surface, func, data);
            }
            return (int)mh$.invokeExact(abstract_surface, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_observer_add_flush_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_observer_add_flush_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_flush_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static FunctionDescriptor cairo_surface_observer_add_flush_callback$descriptor() {
        return cairo_surface_observer_add_flush_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_flush_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static MethodHandle cairo_surface_observer_add_flush_callback$handle() {
        return cairo_surface_observer_add_flush_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_flush_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static int cairo_surface_observer_add_flush_callback(MemorySegment abstract_surface, MemorySegment func, MemorySegment data) {
        var mh$ = cairo_surface_observer_add_flush_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_observer_add_flush_callback", abstract_surface, func, data);
            }
            return (int)mh$.invokeExact(abstract_surface, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_observer_add_finish_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_observer_add_finish_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_finish_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static FunctionDescriptor cairo_surface_observer_add_finish_callback$descriptor() {
        return cairo_surface_observer_add_finish_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_finish_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static MethodHandle cairo_surface_observer_add_finish_callback$handle() {
        return cairo_surface_observer_add_finish_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_add_finish_callback(cairo_surface_t *abstract_surface, cairo_surface_observer_callback_t func, void *data)
     * }
     */
    public static int cairo_surface_observer_add_finish_callback(MemorySegment abstract_surface, MemorySegment func, MemorySegment data) {
        var mh$ = cairo_surface_observer_add_finish_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_observer_add_finish_callback", abstract_surface, func, data);
            }
            return (int)mh$.invokeExact(abstract_surface, func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_observer_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_observer_print"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_print(cairo_surface_t *abstract_surface, cairo_write_func_t write_func, void *closure)
     * }
     */
    public static FunctionDescriptor cairo_surface_observer_print$descriptor() {
        return cairo_surface_observer_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_print(cairo_surface_t *abstract_surface, cairo_write_func_t write_func, void *closure)
     * }
     */
    public static MethodHandle cairo_surface_observer_print$handle() {
        return cairo_surface_observer_print.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_observer_print(cairo_surface_t *abstract_surface, cairo_write_func_t write_func, void *closure)
     * }
     */
    public static int cairo_surface_observer_print(MemorySegment abstract_surface, MemorySegment write_func, MemorySegment closure) {
        var mh$ = cairo_surface_observer_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_observer_print", abstract_surface, write_func, closure);
            }
            return (int)mh$.invokeExact(abstract_surface, write_func, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_observer_elapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_observer_elapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cairo_surface_observer_elapsed(cairo_surface_t *abstract_surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_observer_elapsed$descriptor() {
        return cairo_surface_observer_elapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cairo_surface_observer_elapsed(cairo_surface_t *abstract_surface)
     * }
     */
    public static MethodHandle cairo_surface_observer_elapsed$handle() {
        return cairo_surface_observer_elapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double cairo_surface_observer_elapsed(cairo_surface_t *abstract_surface)
     * }
     */
    public static double cairo_surface_observer_elapsed(MemorySegment abstract_surface) {
        var mh$ = cairo_surface_observer_elapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_observer_elapsed", abstract_surface);
            }
            return (double)mh$.invokeExact(abstract_surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_observer_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_observer_print"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_observer_print(cairo_device_t *abstract_device, cairo_write_func_t write_func, void *closure)
     * }
     */
    public static FunctionDescriptor cairo_device_observer_print$descriptor() {
        return cairo_device_observer_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_observer_print(cairo_device_t *abstract_device, cairo_write_func_t write_func, void *closure)
     * }
     */
    public static MethodHandle cairo_device_observer_print$handle() {
        return cairo_device_observer_print.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_device_observer_print(cairo_device_t *abstract_device, cairo_write_func_t write_func, void *closure)
     * }
     */
    public static int cairo_device_observer_print(MemorySegment abstract_device, MemorySegment write_func, MemorySegment closure) {
        var mh$ = cairo_device_observer_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_observer_print", abstract_device, write_func, closure);
            }
            return (int)mh$.invokeExact(abstract_device, write_func, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_observer_elapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_observer_elapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static FunctionDescriptor cairo_device_observer_elapsed$descriptor() {
        return cairo_device_observer_elapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static MethodHandle cairo_device_observer_elapsed$handle() {
        return cairo_device_observer_elapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double cairo_device_observer_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static double cairo_device_observer_elapsed(MemorySegment abstract_device) {
        var mh$ = cairo_device_observer_elapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_observer_elapsed", abstract_device);
            }
            return (double)mh$.invokeExact(abstract_device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_observer_paint_elapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_observer_paint_elapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_paint_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static FunctionDescriptor cairo_device_observer_paint_elapsed$descriptor() {
        return cairo_device_observer_paint_elapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_paint_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static MethodHandle cairo_device_observer_paint_elapsed$handle() {
        return cairo_device_observer_paint_elapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double cairo_device_observer_paint_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static double cairo_device_observer_paint_elapsed(MemorySegment abstract_device) {
        var mh$ = cairo_device_observer_paint_elapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_observer_paint_elapsed", abstract_device);
            }
            return (double)mh$.invokeExact(abstract_device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_observer_mask_elapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_observer_mask_elapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_mask_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static FunctionDescriptor cairo_device_observer_mask_elapsed$descriptor() {
        return cairo_device_observer_mask_elapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_mask_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static MethodHandle cairo_device_observer_mask_elapsed$handle() {
        return cairo_device_observer_mask_elapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double cairo_device_observer_mask_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static double cairo_device_observer_mask_elapsed(MemorySegment abstract_device) {
        var mh$ = cairo_device_observer_mask_elapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_observer_mask_elapsed", abstract_device);
            }
            return (double)mh$.invokeExact(abstract_device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_observer_fill_elapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_observer_fill_elapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_fill_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static FunctionDescriptor cairo_device_observer_fill_elapsed$descriptor() {
        return cairo_device_observer_fill_elapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_fill_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static MethodHandle cairo_device_observer_fill_elapsed$handle() {
        return cairo_device_observer_fill_elapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double cairo_device_observer_fill_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static double cairo_device_observer_fill_elapsed(MemorySegment abstract_device) {
        var mh$ = cairo_device_observer_fill_elapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_observer_fill_elapsed", abstract_device);
            }
            return (double)mh$.invokeExact(abstract_device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_observer_stroke_elapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_observer_stroke_elapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_stroke_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static FunctionDescriptor cairo_device_observer_stroke_elapsed$descriptor() {
        return cairo_device_observer_stroke_elapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_stroke_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static MethodHandle cairo_device_observer_stroke_elapsed$handle() {
        return cairo_device_observer_stroke_elapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double cairo_device_observer_stroke_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static double cairo_device_observer_stroke_elapsed(MemorySegment abstract_device) {
        var mh$ = cairo_device_observer_stroke_elapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_observer_stroke_elapsed", abstract_device);
            }
            return (double)mh$.invokeExact(abstract_device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_device_observer_glyphs_elapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_device_observer_glyphs_elapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_glyphs_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static FunctionDescriptor cairo_device_observer_glyphs_elapsed$descriptor() {
        return cairo_device_observer_glyphs_elapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double cairo_device_observer_glyphs_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static MethodHandle cairo_device_observer_glyphs_elapsed$handle() {
        return cairo_device_observer_glyphs_elapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double cairo_device_observer_glyphs_elapsed(cairo_device_t *abstract_device)
     * }
     */
    public static double cairo_device_observer_glyphs_elapsed(MemorySegment abstract_device) {
        var mh$ = cairo_device_observer_glyphs_elapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_device_observer_glyphs_elapsed", abstract_device);
            }
            return (double)mh$.invokeExact(abstract_device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_reference(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_reference$descriptor() {
        return cairo_surface_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_reference(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_reference$handle() {
        return cairo_surface_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_surface_reference(cairo_surface_t *surface)
     * }
     */
    public static MemorySegment cairo_surface_reference(MemorySegment surface) {
        var mh$ = cairo_surface_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_reference", surface);
            }
            return (MemorySegment)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_finish(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_finish$descriptor() {
        return cairo_surface_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_finish(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_finish$handle() {
        return cairo_surface_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_finish(cairo_surface_t *surface)
     * }
     */
    public static void cairo_surface_finish(MemorySegment surface) {
        var mh$ = cairo_surface_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_finish", surface);
            }
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_destroy(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_destroy$descriptor() {
        return cairo_surface_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_destroy(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_destroy$handle() {
        return cairo_surface_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_destroy(cairo_surface_t *surface)
     * }
     */
    public static void cairo_surface_destroy(MemorySegment surface) {
        var mh$ = cairo_surface_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_destroy", surface);
            }
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_get_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_get_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_device_t *cairo_surface_get_device(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_get_device$descriptor() {
        return cairo_surface_get_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_device_t *cairo_surface_get_device(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_get_device$handle() {
        return cairo_surface_get_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_device_t *cairo_surface_get_device(cairo_surface_t *surface)
     * }
     */
    public static MemorySegment cairo_surface_get_device(MemorySegment surface) {
        var mh$ = cairo_surface_get_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_get_device", surface);
            }
            return (MemorySegment)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_get_reference_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_get_reference_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int cairo_surface_get_reference_count(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_get_reference_count$descriptor() {
        return cairo_surface_get_reference_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int cairo_surface_get_reference_count(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_get_reference_count$handle() {
        return cairo_surface_get_reference_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int cairo_surface_get_reference_count(cairo_surface_t *surface)
     * }
     */
    public static int cairo_surface_get_reference_count(MemorySegment surface) {
        var mh$ = cairo_surface_get_reference_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_get_reference_count", surface);
            }
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_status(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_status$descriptor() {
        return cairo_surface_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_status(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_status$handle() {
        return cairo_surface_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_status(cairo_surface_t *surface)
     * }
     */
    public static int cairo_surface_status(MemorySegment surface) {
        var mh$ = cairo_surface_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_status", surface);
            }
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_SURFACE_TYPE_IMAGE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_IMAGE = 0
     * }
     */
    public static int CAIRO_SURFACE_TYPE_IMAGE() {
        return CAIRO_SURFACE_TYPE_IMAGE;
    }
    private static final int CAIRO_SURFACE_TYPE_PDF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_PDF = 1
     * }
     */
    public static int CAIRO_SURFACE_TYPE_PDF() {
        return CAIRO_SURFACE_TYPE_PDF;
    }
    private static final int CAIRO_SURFACE_TYPE_PS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_PS = 2
     * }
     */
    public static int CAIRO_SURFACE_TYPE_PS() {
        return CAIRO_SURFACE_TYPE_PS;
    }
    private static final int CAIRO_SURFACE_TYPE_XLIB = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_XLIB = 3
     * }
     */
    public static int CAIRO_SURFACE_TYPE_XLIB() {
        return CAIRO_SURFACE_TYPE_XLIB;
    }
    private static final int CAIRO_SURFACE_TYPE_XCB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_XCB = 4
     * }
     */
    public static int CAIRO_SURFACE_TYPE_XCB() {
        return CAIRO_SURFACE_TYPE_XCB;
    }
    private static final int CAIRO_SURFACE_TYPE_GLITZ = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_GLITZ = 5
     * }
     */
    public static int CAIRO_SURFACE_TYPE_GLITZ() {
        return CAIRO_SURFACE_TYPE_GLITZ;
    }
    private static final int CAIRO_SURFACE_TYPE_QUARTZ = (int)6L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_QUARTZ = 6
     * }
     */
    public static int CAIRO_SURFACE_TYPE_QUARTZ() {
        return CAIRO_SURFACE_TYPE_QUARTZ;
    }
    private static final int CAIRO_SURFACE_TYPE_WIN32 = (int)7L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_WIN32 = 7
     * }
     */
    public static int CAIRO_SURFACE_TYPE_WIN32() {
        return CAIRO_SURFACE_TYPE_WIN32;
    }
    private static final int CAIRO_SURFACE_TYPE_BEOS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_BEOS = 8
     * }
     */
    public static int CAIRO_SURFACE_TYPE_BEOS() {
        return CAIRO_SURFACE_TYPE_BEOS;
    }
    private static final int CAIRO_SURFACE_TYPE_DIRECTFB = (int)9L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_DIRECTFB = 9
     * }
     */
    public static int CAIRO_SURFACE_TYPE_DIRECTFB() {
        return CAIRO_SURFACE_TYPE_DIRECTFB;
    }
    private static final int CAIRO_SURFACE_TYPE_SVG = (int)10L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_SVG = 10
     * }
     */
    public static int CAIRO_SURFACE_TYPE_SVG() {
        return CAIRO_SURFACE_TYPE_SVG;
    }
    private static final int CAIRO_SURFACE_TYPE_OS2 = (int)11L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_OS2 = 11
     * }
     */
    public static int CAIRO_SURFACE_TYPE_OS2() {
        return CAIRO_SURFACE_TYPE_OS2;
    }
    private static final int CAIRO_SURFACE_TYPE_WIN32_PRINTING = (int)12L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_WIN32_PRINTING = 12
     * }
     */
    public static int CAIRO_SURFACE_TYPE_WIN32_PRINTING() {
        return CAIRO_SURFACE_TYPE_WIN32_PRINTING;
    }
    private static final int CAIRO_SURFACE_TYPE_QUARTZ_IMAGE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_QUARTZ_IMAGE = 13
     * }
     */
    public static int CAIRO_SURFACE_TYPE_QUARTZ_IMAGE() {
        return CAIRO_SURFACE_TYPE_QUARTZ_IMAGE;
    }
    private static final int CAIRO_SURFACE_TYPE_SCRIPT = (int)14L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_SCRIPT = 14
     * }
     */
    public static int CAIRO_SURFACE_TYPE_SCRIPT() {
        return CAIRO_SURFACE_TYPE_SCRIPT;
    }
    private static final int CAIRO_SURFACE_TYPE_QT = (int)15L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_QT = 15
     * }
     */
    public static int CAIRO_SURFACE_TYPE_QT() {
        return CAIRO_SURFACE_TYPE_QT;
    }
    private static final int CAIRO_SURFACE_TYPE_RECORDING = (int)16L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_RECORDING = 16
     * }
     */
    public static int CAIRO_SURFACE_TYPE_RECORDING() {
        return CAIRO_SURFACE_TYPE_RECORDING;
    }
    private static final int CAIRO_SURFACE_TYPE_VG = (int)17L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_VG = 17
     * }
     */
    public static int CAIRO_SURFACE_TYPE_VG() {
        return CAIRO_SURFACE_TYPE_VG;
    }
    private static final int CAIRO_SURFACE_TYPE_GL = (int)18L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_GL = 18
     * }
     */
    public static int CAIRO_SURFACE_TYPE_GL() {
        return CAIRO_SURFACE_TYPE_GL;
    }
    private static final int CAIRO_SURFACE_TYPE_DRM = (int)19L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_DRM = 19
     * }
     */
    public static int CAIRO_SURFACE_TYPE_DRM() {
        return CAIRO_SURFACE_TYPE_DRM;
    }
    private static final int CAIRO_SURFACE_TYPE_TEE = (int)20L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_TEE = 20
     * }
     */
    public static int CAIRO_SURFACE_TYPE_TEE() {
        return CAIRO_SURFACE_TYPE_TEE;
    }
    private static final int CAIRO_SURFACE_TYPE_XML = (int)21L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_XML = 21
     * }
     */
    public static int CAIRO_SURFACE_TYPE_XML() {
        return CAIRO_SURFACE_TYPE_XML;
    }
    private static final int CAIRO_SURFACE_TYPE_SKIA = (int)22L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_SKIA = 22
     * }
     */
    public static int CAIRO_SURFACE_TYPE_SKIA() {
        return CAIRO_SURFACE_TYPE_SKIA;
    }
    private static final int CAIRO_SURFACE_TYPE_SUBSURFACE = (int)23L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_SUBSURFACE = 23
     * }
     */
    public static int CAIRO_SURFACE_TYPE_SUBSURFACE() {
        return CAIRO_SURFACE_TYPE_SUBSURFACE;
    }
    private static final int CAIRO_SURFACE_TYPE_COGL = (int)24L;
    /**
     * {@snippet lang=c :
     * enum _cairo_surface_type.CAIRO_SURFACE_TYPE_COGL = 24
     * }
     */
    public static int CAIRO_SURFACE_TYPE_COGL() {
        return CAIRO_SURFACE_TYPE_COGL;
    }

    private static class cairo_surface_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_type_t cairo_surface_get_type(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_get_type$descriptor() {
        return cairo_surface_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_type_t cairo_surface_get_type(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_get_type$handle() {
        return cairo_surface_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_type_t cairo_surface_get_type(cairo_surface_t *surface)
     * }
     */
    public static int cairo_surface_get_type(MemorySegment surface) {
        var mh$ = cairo_surface_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_get_type", surface);
            }
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_get_content {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_get_content"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_content_t cairo_surface_get_content(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_get_content$descriptor() {
        return cairo_surface_get_content.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_content_t cairo_surface_get_content(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_get_content$handle() {
        return cairo_surface_get_content.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_content_t cairo_surface_get_content(cairo_surface_t *surface)
     * }
     */
    public static int cairo_surface_get_content(MemorySegment surface) {
        var mh$ = cairo_surface_get_content.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_get_content", surface);
            }
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_write_to_png {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_write_to_png"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_write_to_png(cairo_surface_t *surface, const char *filename)
     * }
     */
    public static FunctionDescriptor cairo_surface_write_to_png$descriptor() {
        return cairo_surface_write_to_png.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_write_to_png(cairo_surface_t *surface, const char *filename)
     * }
     */
    public static MethodHandle cairo_surface_write_to_png$handle() {
        return cairo_surface_write_to_png.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_write_to_png(cairo_surface_t *surface, const char *filename)
     * }
     */
    public static int cairo_surface_write_to_png(MemorySegment surface, MemorySegment filename) {
        var mh$ = cairo_surface_write_to_png.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_write_to_png", surface, filename);
            }
            return (int)mh$.invokeExact(surface, filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_write_to_png_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_write_to_png_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_write_to_png_stream(cairo_surface_t *surface, cairo_write_func_t write_func, void *closure)
     * }
     */
    public static FunctionDescriptor cairo_surface_write_to_png_stream$descriptor() {
        return cairo_surface_write_to_png_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_write_to_png_stream(cairo_surface_t *surface, cairo_write_func_t write_func, void *closure)
     * }
     */
    public static MethodHandle cairo_surface_write_to_png_stream$handle() {
        return cairo_surface_write_to_png_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_write_to_png_stream(cairo_surface_t *surface, cairo_write_func_t write_func, void *closure)
     * }
     */
    public static int cairo_surface_write_to_png_stream(MemorySegment surface, MemorySegment write_func, MemorySegment closure) {
        var mh$ = cairo_surface_write_to_png_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_write_to_png_stream", surface, write_func, closure);
            }
            return (int)mh$.invokeExact(surface, write_func, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *cairo_surface_get_user_data(cairo_surface_t *surface, const cairo_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor cairo_surface_get_user_data$descriptor() {
        return cairo_surface_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *cairo_surface_get_user_data(cairo_surface_t *surface, const cairo_user_data_key_t *key)
     * }
     */
    public static MethodHandle cairo_surface_get_user_data$handle() {
        return cairo_surface_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *cairo_surface_get_user_data(cairo_surface_t *surface, const cairo_user_data_key_t *key)
     * }
     */
    public static MemorySegment cairo_surface_get_user_data(MemorySegment surface, MemorySegment key) {
        var mh$ = cairo_surface_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_get_user_data", surface, key);
            }
            return (MemorySegment)mh$.invokeExact(surface, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_set_user_data(cairo_surface_t *surface, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor cairo_surface_set_user_data$descriptor() {
        return cairo_surface_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_set_user_data(cairo_surface_t *surface, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static MethodHandle cairo_surface_set_user_data$handle() {
        return cairo_surface_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_set_user_data(cairo_surface_t *surface, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static int cairo_surface_set_user_data(MemorySegment surface, MemorySegment key, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = cairo_surface_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_set_user_data", surface, key, user_data, destroy);
            }
            return (int)mh$.invokeExact(surface, key, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_get_mime_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_get_mime_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_get_mime_data(cairo_surface_t *surface, const char *mime_type, const unsigned char **data, unsigned long *length)
     * }
     */
    public static FunctionDescriptor cairo_surface_get_mime_data$descriptor() {
        return cairo_surface_get_mime_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_get_mime_data(cairo_surface_t *surface, const char *mime_type, const unsigned char **data, unsigned long *length)
     * }
     */
    public static MethodHandle cairo_surface_get_mime_data$handle() {
        return cairo_surface_get_mime_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_get_mime_data(cairo_surface_t *surface, const char *mime_type, const unsigned char **data, unsigned long *length)
     * }
     */
    public static void cairo_surface_get_mime_data(MemorySegment surface, MemorySegment mime_type, MemorySegment data, MemorySegment length) {
        var mh$ = cairo_surface_get_mime_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_get_mime_data", surface, mime_type, data, length);
            }
            mh$.invokeExact(surface, mime_type, data, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_set_mime_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_set_mime_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_set_mime_data(cairo_surface_t *surface, const char *mime_type, const unsigned char *data, unsigned long length, cairo_destroy_func_t destroy, void *closure)
     * }
     */
    public static FunctionDescriptor cairo_surface_set_mime_data$descriptor() {
        return cairo_surface_set_mime_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_set_mime_data(cairo_surface_t *surface, const char *mime_type, const unsigned char *data, unsigned long length, cairo_destroy_func_t destroy, void *closure)
     * }
     */
    public static MethodHandle cairo_surface_set_mime_data$handle() {
        return cairo_surface_set_mime_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_surface_set_mime_data(cairo_surface_t *surface, const char *mime_type, const unsigned char *data, unsigned long length, cairo_destroy_func_t destroy, void *closure)
     * }
     */
    public static int cairo_surface_set_mime_data(MemorySegment surface, MemorySegment mime_type, MemorySegment data, long length, MemorySegment destroy, MemorySegment closure) {
        var mh$ = cairo_surface_set_mime_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_set_mime_data", surface, mime_type, data, length, destroy, closure);
            }
            return (int)mh$.invokeExact(surface, mime_type, data, length, destroy, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_supports_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_supports_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_surface_supports_mime_type(cairo_surface_t *surface, const char *mime_type)
     * }
     */
    public static FunctionDescriptor cairo_surface_supports_mime_type$descriptor() {
        return cairo_surface_supports_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_surface_supports_mime_type(cairo_surface_t *surface, const char *mime_type)
     * }
     */
    public static MethodHandle cairo_surface_supports_mime_type$handle() {
        return cairo_surface_supports_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_surface_supports_mime_type(cairo_surface_t *surface, const char *mime_type)
     * }
     */
    public static int cairo_surface_supports_mime_type(MemorySegment surface, MemorySegment mime_type) {
        var mh$ = cairo_surface_supports_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_supports_mime_type", surface, mime_type);
            }
            return (int)mh$.invokeExact(surface, mime_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_get_font_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_get_font_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_get_font_options(cairo_surface_t *surface, cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor cairo_surface_get_font_options$descriptor() {
        return cairo_surface_get_font_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_get_font_options(cairo_surface_t *surface, cairo_font_options_t *options)
     * }
     */
    public static MethodHandle cairo_surface_get_font_options$handle() {
        return cairo_surface_get_font_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_get_font_options(cairo_surface_t *surface, cairo_font_options_t *options)
     * }
     */
    public static void cairo_surface_get_font_options(MemorySegment surface, MemorySegment options) {
        var mh$ = cairo_surface_get_font_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_get_font_options", surface, options);
            }
            mh$.invokeExact(surface, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_flush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_flush(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_flush$descriptor() {
        return cairo_surface_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_flush(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_flush$handle() {
        return cairo_surface_flush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_flush(cairo_surface_t *surface)
     * }
     */
    public static void cairo_surface_flush(MemorySegment surface) {
        var mh$ = cairo_surface_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_flush", surface);
            }
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_mark_dirty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_mark_dirty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_mark_dirty(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_mark_dirty$descriptor() {
        return cairo_surface_mark_dirty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_mark_dirty(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_mark_dirty$handle() {
        return cairo_surface_mark_dirty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_mark_dirty(cairo_surface_t *surface)
     * }
     */
    public static void cairo_surface_mark_dirty(MemorySegment surface) {
        var mh$ = cairo_surface_mark_dirty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_mark_dirty", surface);
            }
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_mark_dirty_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_mark_dirty_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_mark_dirty_rectangle(cairo_surface_t *surface, int x, int y, int width, int height)
     * }
     */
    public static FunctionDescriptor cairo_surface_mark_dirty_rectangle$descriptor() {
        return cairo_surface_mark_dirty_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_mark_dirty_rectangle(cairo_surface_t *surface, int x, int y, int width, int height)
     * }
     */
    public static MethodHandle cairo_surface_mark_dirty_rectangle$handle() {
        return cairo_surface_mark_dirty_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_mark_dirty_rectangle(cairo_surface_t *surface, int x, int y, int width, int height)
     * }
     */
    public static void cairo_surface_mark_dirty_rectangle(MemorySegment surface, int x, int y, int width, int height) {
        var mh$ = cairo_surface_mark_dirty_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_mark_dirty_rectangle", surface, x, y, width, height);
            }
            mh$.invokeExact(surface, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_set_device_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_set_device_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_set_device_scale(cairo_surface_t *surface, double x_scale, double y_scale)
     * }
     */
    public static FunctionDescriptor cairo_surface_set_device_scale$descriptor() {
        return cairo_surface_set_device_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_set_device_scale(cairo_surface_t *surface, double x_scale, double y_scale)
     * }
     */
    public static MethodHandle cairo_surface_set_device_scale$handle() {
        return cairo_surface_set_device_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_set_device_scale(cairo_surface_t *surface, double x_scale, double y_scale)
     * }
     */
    public static void cairo_surface_set_device_scale(MemorySegment surface, double x_scale, double y_scale) {
        var mh$ = cairo_surface_set_device_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_set_device_scale", surface, x_scale, y_scale);
            }
            mh$.invokeExact(surface, x_scale, y_scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_get_device_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_get_device_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_get_device_scale(cairo_surface_t *surface, double *x_scale, double *y_scale)
     * }
     */
    public static FunctionDescriptor cairo_surface_get_device_scale$descriptor() {
        return cairo_surface_get_device_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_get_device_scale(cairo_surface_t *surface, double *x_scale, double *y_scale)
     * }
     */
    public static MethodHandle cairo_surface_get_device_scale$handle() {
        return cairo_surface_get_device_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_get_device_scale(cairo_surface_t *surface, double *x_scale, double *y_scale)
     * }
     */
    public static void cairo_surface_get_device_scale(MemorySegment surface, MemorySegment x_scale, MemorySegment y_scale) {
        var mh$ = cairo_surface_get_device_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_get_device_scale", surface, x_scale, y_scale);
            }
            mh$.invokeExact(surface, x_scale, y_scale);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_set_device_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_set_device_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_set_device_offset(cairo_surface_t *surface, double x_offset, double y_offset)
     * }
     */
    public static FunctionDescriptor cairo_surface_set_device_offset$descriptor() {
        return cairo_surface_set_device_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_set_device_offset(cairo_surface_t *surface, double x_offset, double y_offset)
     * }
     */
    public static MethodHandle cairo_surface_set_device_offset$handle() {
        return cairo_surface_set_device_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_set_device_offset(cairo_surface_t *surface, double x_offset, double y_offset)
     * }
     */
    public static void cairo_surface_set_device_offset(MemorySegment surface, double x_offset, double y_offset) {
        var mh$ = cairo_surface_set_device_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_set_device_offset", surface, x_offset, y_offset);
            }
            mh$.invokeExact(surface, x_offset, y_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_get_device_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_get_device_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_get_device_offset(cairo_surface_t *surface, double *x_offset, double *y_offset)
     * }
     */
    public static FunctionDescriptor cairo_surface_get_device_offset$descriptor() {
        return cairo_surface_get_device_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_get_device_offset(cairo_surface_t *surface, double *x_offset, double *y_offset)
     * }
     */
    public static MethodHandle cairo_surface_get_device_offset$handle() {
        return cairo_surface_get_device_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_get_device_offset(cairo_surface_t *surface, double *x_offset, double *y_offset)
     * }
     */
    public static void cairo_surface_get_device_offset(MemorySegment surface, MemorySegment x_offset, MemorySegment y_offset) {
        var mh$ = cairo_surface_get_device_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_get_device_offset", surface, x_offset, y_offset);
            }
            mh$.invokeExact(surface, x_offset, y_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_set_fallback_resolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_set_fallback_resolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_set_fallback_resolution(cairo_surface_t *surface, double x_pixels_per_inch, double y_pixels_per_inch)
     * }
     */
    public static FunctionDescriptor cairo_surface_set_fallback_resolution$descriptor() {
        return cairo_surface_set_fallback_resolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_set_fallback_resolution(cairo_surface_t *surface, double x_pixels_per_inch, double y_pixels_per_inch)
     * }
     */
    public static MethodHandle cairo_surface_set_fallback_resolution$handle() {
        return cairo_surface_set_fallback_resolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_set_fallback_resolution(cairo_surface_t *surface, double x_pixels_per_inch, double y_pixels_per_inch)
     * }
     */
    public static void cairo_surface_set_fallback_resolution(MemorySegment surface, double x_pixels_per_inch, double y_pixels_per_inch) {
        var mh$ = cairo_surface_set_fallback_resolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_set_fallback_resolution", surface, x_pixels_per_inch, y_pixels_per_inch);
            }
            mh$.invokeExact(surface, x_pixels_per_inch, y_pixels_per_inch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_get_fallback_resolution {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_get_fallback_resolution"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_get_fallback_resolution(cairo_surface_t *surface, double *x_pixels_per_inch, double *y_pixels_per_inch)
     * }
     */
    public static FunctionDescriptor cairo_surface_get_fallback_resolution$descriptor() {
        return cairo_surface_get_fallback_resolution.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_get_fallback_resolution(cairo_surface_t *surface, double *x_pixels_per_inch, double *y_pixels_per_inch)
     * }
     */
    public static MethodHandle cairo_surface_get_fallback_resolution$handle() {
        return cairo_surface_get_fallback_resolution.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_get_fallback_resolution(cairo_surface_t *surface, double *x_pixels_per_inch, double *y_pixels_per_inch)
     * }
     */
    public static void cairo_surface_get_fallback_resolution(MemorySegment surface, MemorySegment x_pixels_per_inch, MemorySegment y_pixels_per_inch) {
        var mh$ = cairo_surface_get_fallback_resolution.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_get_fallback_resolution", surface, x_pixels_per_inch, y_pixels_per_inch);
            }
            mh$.invokeExact(surface, x_pixels_per_inch, y_pixels_per_inch);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_copy_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_copy_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_copy_page(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_copy_page$descriptor() {
        return cairo_surface_copy_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_copy_page(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_copy_page$handle() {
        return cairo_surface_copy_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_copy_page(cairo_surface_t *surface)
     * }
     */
    public static void cairo_surface_copy_page(MemorySegment surface) {
        var mh$ = cairo_surface_copy_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_copy_page", surface);
            }
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_show_page {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_show_page"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_surface_show_page(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_show_page$descriptor() {
        return cairo_surface_show_page.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_surface_show_page(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_show_page$handle() {
        return cairo_surface_show_page.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_surface_show_page(cairo_surface_t *surface)
     * }
     */
    public static void cairo_surface_show_page(MemorySegment surface) {
        var mh$ = cairo_surface_show_page.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_show_page", surface);
            }
            mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_surface_has_show_text_glyphs {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_surface_has_show_text_glyphs"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_surface_has_show_text_glyphs(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_surface_has_show_text_glyphs$descriptor() {
        return cairo_surface_has_show_text_glyphs.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_surface_has_show_text_glyphs(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_surface_has_show_text_glyphs$handle() {
        return cairo_surface_has_show_text_glyphs.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_surface_has_show_text_glyphs(cairo_surface_t *surface)
     * }
     */
    public static int cairo_surface_has_show_text_glyphs(MemorySegment surface) {
        var mh$ = cairo_surface_has_show_text_glyphs.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_surface_has_show_text_glyphs", surface);
            }
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_image_surface_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_image_surface_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create(cairo_format_t format, int width, int height)
     * }
     */
    public static FunctionDescriptor cairo_image_surface_create$descriptor() {
        return cairo_image_surface_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create(cairo_format_t format, int width, int height)
     * }
     */
    public static MethodHandle cairo_image_surface_create$handle() {
        return cairo_image_surface_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create(cairo_format_t format, int width, int height)
     * }
     */
    public static MemorySegment cairo_image_surface_create(int format, int width, int height) {
        var mh$ = cairo_image_surface_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_image_surface_create", format, width, height);
            }
            return (MemorySegment)mh$.invokeExact(format, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_format_stride_for_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_format_stride_for_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int cairo_format_stride_for_width(cairo_format_t format, int width)
     * }
     */
    public static FunctionDescriptor cairo_format_stride_for_width$descriptor() {
        return cairo_format_stride_for_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int cairo_format_stride_for_width(cairo_format_t format, int width)
     * }
     */
    public static MethodHandle cairo_format_stride_for_width$handle() {
        return cairo_format_stride_for_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int cairo_format_stride_for_width(cairo_format_t format, int width)
     * }
     */
    public static int cairo_format_stride_for_width(int format, int width) {
        var mh$ = cairo_format_stride_for_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_format_stride_for_width", format, width);
            }
            return (int)mh$.invokeExact(format, width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_image_surface_create_for_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_image_surface_create_for_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create_for_data(unsigned char *data, cairo_format_t format, int width, int height, int stride)
     * }
     */
    public static FunctionDescriptor cairo_image_surface_create_for_data$descriptor() {
        return cairo_image_surface_create_for_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create_for_data(unsigned char *data, cairo_format_t format, int width, int height, int stride)
     * }
     */
    public static MethodHandle cairo_image_surface_create_for_data$handle() {
        return cairo_image_surface_create_for_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create_for_data(unsigned char *data, cairo_format_t format, int width, int height, int stride)
     * }
     */
    public static MemorySegment cairo_image_surface_create_for_data(MemorySegment data, int format, int width, int height, int stride) {
        var mh$ = cairo_image_surface_create_for_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_image_surface_create_for_data", data, format, width, height, stride);
            }
            return (MemorySegment)mh$.invokeExact(data, format, width, height, stride);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_image_surface_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_image_surface_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned char *cairo_image_surface_get_data(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_image_surface_get_data$descriptor() {
        return cairo_image_surface_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned char *cairo_image_surface_get_data(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_image_surface_get_data$handle() {
        return cairo_image_surface_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned char *cairo_image_surface_get_data(cairo_surface_t *surface)
     * }
     */
    public static MemorySegment cairo_image_surface_get_data(MemorySegment surface) {
        var mh$ = cairo_image_surface_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_image_surface_get_data", surface);
            }
            return (MemorySegment)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_image_surface_get_format {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_image_surface_get_format"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_format_t cairo_image_surface_get_format(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_image_surface_get_format$descriptor() {
        return cairo_image_surface_get_format.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_format_t cairo_image_surface_get_format(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_image_surface_get_format$handle() {
        return cairo_image_surface_get_format.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_format_t cairo_image_surface_get_format(cairo_surface_t *surface)
     * }
     */
    public static int cairo_image_surface_get_format(MemorySegment surface) {
        var mh$ = cairo_image_surface_get_format.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_image_surface_get_format", surface);
            }
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_image_surface_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_image_surface_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int cairo_image_surface_get_width(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_image_surface_get_width$descriptor() {
        return cairo_image_surface_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int cairo_image_surface_get_width(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_image_surface_get_width$handle() {
        return cairo_image_surface_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int cairo_image_surface_get_width(cairo_surface_t *surface)
     * }
     */
    public static int cairo_image_surface_get_width(MemorySegment surface) {
        var mh$ = cairo_image_surface_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_image_surface_get_width", surface);
            }
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_image_surface_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_image_surface_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int cairo_image_surface_get_height(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_image_surface_get_height$descriptor() {
        return cairo_image_surface_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int cairo_image_surface_get_height(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_image_surface_get_height$handle() {
        return cairo_image_surface_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int cairo_image_surface_get_height(cairo_surface_t *surface)
     * }
     */
    public static int cairo_image_surface_get_height(MemorySegment surface) {
        var mh$ = cairo_image_surface_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_image_surface_get_height", surface);
            }
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_image_surface_get_stride {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_image_surface_get_stride"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int cairo_image_surface_get_stride(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_image_surface_get_stride$descriptor() {
        return cairo_image_surface_get_stride.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int cairo_image_surface_get_stride(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_image_surface_get_stride$handle() {
        return cairo_image_surface_get_stride.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int cairo_image_surface_get_stride(cairo_surface_t *surface)
     * }
     */
    public static int cairo_image_surface_get_stride(MemorySegment surface) {
        var mh$ = cairo_image_surface_get_stride.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_image_surface_get_stride", surface);
            }
            return (int)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_image_surface_create_from_png {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_image_surface_create_from_png"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create_from_png(const char *filename)
     * }
     */
    public static FunctionDescriptor cairo_image_surface_create_from_png$descriptor() {
        return cairo_image_surface_create_from_png.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create_from_png(const char *filename)
     * }
     */
    public static MethodHandle cairo_image_surface_create_from_png$handle() {
        return cairo_image_surface_create_from_png.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create_from_png(const char *filename)
     * }
     */
    public static MemorySegment cairo_image_surface_create_from_png(MemorySegment filename) {
        var mh$ = cairo_image_surface_create_from_png.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_image_surface_create_from_png", filename);
            }
            return (MemorySegment)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_image_surface_create_from_png_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_image_surface_create_from_png_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create_from_png_stream(cairo_read_func_t read_func, void *closure)
     * }
     */
    public static FunctionDescriptor cairo_image_surface_create_from_png_stream$descriptor() {
        return cairo_image_surface_create_from_png_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create_from_png_stream(cairo_read_func_t read_func, void *closure)
     * }
     */
    public static MethodHandle cairo_image_surface_create_from_png_stream$handle() {
        return cairo_image_surface_create_from_png_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_image_surface_create_from_png_stream(cairo_read_func_t read_func, void *closure)
     * }
     */
    public static MemorySegment cairo_image_surface_create_from_png_stream(MemorySegment read_func, MemorySegment closure) {
        var mh$ = cairo_image_surface_create_from_png_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_image_surface_create_from_png_stream", read_func, closure);
            }
            return (MemorySegment)mh$.invokeExact(read_func, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_recording_surface_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_recording_surface_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_recording_surface_create(cairo_content_t content, const cairo_rectangle_t *extents)
     * }
     */
    public static FunctionDescriptor cairo_recording_surface_create$descriptor() {
        return cairo_recording_surface_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_recording_surface_create(cairo_content_t content, const cairo_rectangle_t *extents)
     * }
     */
    public static MethodHandle cairo_recording_surface_create$handle() {
        return cairo_recording_surface_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_surface_t *cairo_recording_surface_create(cairo_content_t content, const cairo_rectangle_t *extents)
     * }
     */
    public static MemorySegment cairo_recording_surface_create(int content, MemorySegment extents) {
        var mh$ = cairo_recording_surface_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_recording_surface_create", content, extents);
            }
            return (MemorySegment)mh$.invokeExact(content, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_recording_surface_ink_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_recording_surface_ink_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_recording_surface_ink_extents(cairo_surface_t *surface, double *x0, double *y0, double *width, double *height)
     * }
     */
    public static FunctionDescriptor cairo_recording_surface_ink_extents$descriptor() {
        return cairo_recording_surface_ink_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_recording_surface_ink_extents(cairo_surface_t *surface, double *x0, double *y0, double *width, double *height)
     * }
     */
    public static MethodHandle cairo_recording_surface_ink_extents$handle() {
        return cairo_recording_surface_ink_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_recording_surface_ink_extents(cairo_surface_t *surface, double *x0, double *y0, double *width, double *height)
     * }
     */
    public static void cairo_recording_surface_ink_extents(MemorySegment surface, MemorySegment x0, MemorySegment y0, MemorySegment width, MemorySegment height) {
        var mh$ = cairo_recording_surface_ink_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_recording_surface_ink_extents", surface, x0, y0, width, height);
            }
            mh$.invokeExact(surface, x0, y0, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_recording_surface_get_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_recording_surface_get_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_recording_surface_get_extents(cairo_surface_t *surface, cairo_rectangle_t *extents)
     * }
     */
    public static FunctionDescriptor cairo_recording_surface_get_extents$descriptor() {
        return cairo_recording_surface_get_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_recording_surface_get_extents(cairo_surface_t *surface, cairo_rectangle_t *extents)
     * }
     */
    public static MethodHandle cairo_recording_surface_get_extents$handle() {
        return cairo_recording_surface_get_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_recording_surface_get_extents(cairo_surface_t *surface, cairo_rectangle_t *extents)
     * }
     */
    public static int cairo_recording_surface_get_extents(MemorySegment surface, MemorySegment extents) {
        var mh$ = cairo_recording_surface_get_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_recording_surface_get_extents", surface, extents);
            }
            return (int)mh$.invokeExact(surface, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_create_raster_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_create_raster_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_raster_source(void *user_data, cairo_content_t content, int width, int height)
     * }
     */
    public static FunctionDescriptor cairo_pattern_create_raster_source$descriptor() {
        return cairo_pattern_create_raster_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_raster_source(void *user_data, cairo_content_t content, int width, int height)
     * }
     */
    public static MethodHandle cairo_pattern_create_raster_source$handle() {
        return cairo_pattern_create_raster_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_raster_source(void *user_data, cairo_content_t content, int width, int height)
     * }
     */
    public static MemorySegment cairo_pattern_create_raster_source(MemorySegment user_data, int content, int width, int height) {
        var mh$ = cairo_pattern_create_raster_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_create_raster_source", user_data, content, width, height);
            }
            return (MemorySegment)mh$.invokeExact(user_data, content, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_raster_source_pattern_set_callback_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_raster_source_pattern_set_callback_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_callback_data(cairo_pattern_t *pattern, void *data)
     * }
     */
    public static FunctionDescriptor cairo_raster_source_pattern_set_callback_data$descriptor() {
        return cairo_raster_source_pattern_set_callback_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_callback_data(cairo_pattern_t *pattern, void *data)
     * }
     */
    public static MethodHandle cairo_raster_source_pattern_set_callback_data$handle() {
        return cairo_raster_source_pattern_set_callback_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_callback_data(cairo_pattern_t *pattern, void *data)
     * }
     */
    public static void cairo_raster_source_pattern_set_callback_data(MemorySegment pattern, MemorySegment data) {
        var mh$ = cairo_raster_source_pattern_set_callback_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_raster_source_pattern_set_callback_data", pattern, data);
            }
            mh$.invokeExact(pattern, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_raster_source_pattern_get_callback_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_raster_source_pattern_get_callback_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *cairo_raster_source_pattern_get_callback_data(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_raster_source_pattern_get_callback_data$descriptor() {
        return cairo_raster_source_pattern_get_callback_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *cairo_raster_source_pattern_get_callback_data(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_raster_source_pattern_get_callback_data$handle() {
        return cairo_raster_source_pattern_get_callback_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *cairo_raster_source_pattern_get_callback_data(cairo_pattern_t *pattern)
     * }
     */
    public static MemorySegment cairo_raster_source_pattern_get_callback_data(MemorySegment pattern) {
        var mh$ = cairo_raster_source_pattern_get_callback_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_raster_source_pattern_get_callback_data", pattern);
            }
            return (MemorySegment)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_raster_source_pattern_set_acquire {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_raster_source_pattern_set_acquire"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_acquire(cairo_pattern_t *pattern, cairo_raster_source_acquire_func_t acquire, cairo_raster_source_release_func_t release)
     * }
     */
    public static FunctionDescriptor cairo_raster_source_pattern_set_acquire$descriptor() {
        return cairo_raster_source_pattern_set_acquire.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_acquire(cairo_pattern_t *pattern, cairo_raster_source_acquire_func_t acquire, cairo_raster_source_release_func_t release)
     * }
     */
    public static MethodHandle cairo_raster_source_pattern_set_acquire$handle() {
        return cairo_raster_source_pattern_set_acquire.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_acquire(cairo_pattern_t *pattern, cairo_raster_source_acquire_func_t acquire, cairo_raster_source_release_func_t release)
     * }
     */
    public static void cairo_raster_source_pattern_set_acquire(MemorySegment pattern, MemorySegment acquire, MemorySegment release) {
        var mh$ = cairo_raster_source_pattern_set_acquire.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_raster_source_pattern_set_acquire", pattern, acquire, release);
            }
            mh$.invokeExact(pattern, acquire, release);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_raster_source_pattern_get_acquire {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_raster_source_pattern_get_acquire"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_get_acquire(cairo_pattern_t *pattern, cairo_raster_source_acquire_func_t *acquire, cairo_raster_source_release_func_t *release)
     * }
     */
    public static FunctionDescriptor cairo_raster_source_pattern_get_acquire$descriptor() {
        return cairo_raster_source_pattern_get_acquire.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_get_acquire(cairo_pattern_t *pattern, cairo_raster_source_acquire_func_t *acquire, cairo_raster_source_release_func_t *release)
     * }
     */
    public static MethodHandle cairo_raster_source_pattern_get_acquire$handle() {
        return cairo_raster_source_pattern_get_acquire.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_get_acquire(cairo_pattern_t *pattern, cairo_raster_source_acquire_func_t *acquire, cairo_raster_source_release_func_t *release)
     * }
     */
    public static void cairo_raster_source_pattern_get_acquire(MemorySegment pattern, MemorySegment acquire, MemorySegment release) {
        var mh$ = cairo_raster_source_pattern_get_acquire.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_raster_source_pattern_get_acquire", pattern, acquire, release);
            }
            mh$.invokeExact(pattern, acquire, release);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_raster_source_pattern_set_snapshot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_raster_source_pattern_set_snapshot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_snapshot(cairo_pattern_t *pattern, cairo_raster_source_snapshot_func_t snapshot)
     * }
     */
    public static FunctionDescriptor cairo_raster_source_pattern_set_snapshot$descriptor() {
        return cairo_raster_source_pattern_set_snapshot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_snapshot(cairo_pattern_t *pattern, cairo_raster_source_snapshot_func_t snapshot)
     * }
     */
    public static MethodHandle cairo_raster_source_pattern_set_snapshot$handle() {
        return cairo_raster_source_pattern_set_snapshot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_snapshot(cairo_pattern_t *pattern, cairo_raster_source_snapshot_func_t snapshot)
     * }
     */
    public static void cairo_raster_source_pattern_set_snapshot(MemorySegment pattern, MemorySegment snapshot) {
        var mh$ = cairo_raster_source_pattern_set_snapshot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_raster_source_pattern_set_snapshot", pattern, snapshot);
            }
            mh$.invokeExact(pattern, snapshot);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_raster_source_pattern_get_snapshot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_raster_source_pattern_get_snapshot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_raster_source_snapshot_func_t cairo_raster_source_pattern_get_snapshot(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_raster_source_pattern_get_snapshot$descriptor() {
        return cairo_raster_source_pattern_get_snapshot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_raster_source_snapshot_func_t cairo_raster_source_pattern_get_snapshot(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_raster_source_pattern_get_snapshot$handle() {
        return cairo_raster_source_pattern_get_snapshot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_raster_source_snapshot_func_t cairo_raster_source_pattern_get_snapshot(cairo_pattern_t *pattern)
     * }
     */
    public static MemorySegment cairo_raster_source_pattern_get_snapshot(MemorySegment pattern) {
        var mh$ = cairo_raster_source_pattern_get_snapshot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_raster_source_pattern_get_snapshot", pattern);
            }
            return (MemorySegment)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_raster_source_pattern_set_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_raster_source_pattern_set_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_copy(cairo_pattern_t *pattern, cairo_raster_source_copy_func_t copy)
     * }
     */
    public static FunctionDescriptor cairo_raster_source_pattern_set_copy$descriptor() {
        return cairo_raster_source_pattern_set_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_copy(cairo_pattern_t *pattern, cairo_raster_source_copy_func_t copy)
     * }
     */
    public static MethodHandle cairo_raster_source_pattern_set_copy$handle() {
        return cairo_raster_source_pattern_set_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_copy(cairo_pattern_t *pattern, cairo_raster_source_copy_func_t copy)
     * }
     */
    public static void cairo_raster_source_pattern_set_copy(MemorySegment pattern, MemorySegment copy) {
        var mh$ = cairo_raster_source_pattern_set_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_raster_source_pattern_set_copy", pattern, copy);
            }
            mh$.invokeExact(pattern, copy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_raster_source_pattern_get_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_raster_source_pattern_get_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_raster_source_copy_func_t cairo_raster_source_pattern_get_copy(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_raster_source_pattern_get_copy$descriptor() {
        return cairo_raster_source_pattern_get_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_raster_source_copy_func_t cairo_raster_source_pattern_get_copy(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_raster_source_pattern_get_copy$handle() {
        return cairo_raster_source_pattern_get_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_raster_source_copy_func_t cairo_raster_source_pattern_get_copy(cairo_pattern_t *pattern)
     * }
     */
    public static MemorySegment cairo_raster_source_pattern_get_copy(MemorySegment pattern) {
        var mh$ = cairo_raster_source_pattern_get_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_raster_source_pattern_get_copy", pattern);
            }
            return (MemorySegment)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_raster_source_pattern_set_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_raster_source_pattern_set_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_finish(cairo_pattern_t *pattern, cairo_raster_source_finish_func_t finish)
     * }
     */
    public static FunctionDescriptor cairo_raster_source_pattern_set_finish$descriptor() {
        return cairo_raster_source_pattern_set_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_finish(cairo_pattern_t *pattern, cairo_raster_source_finish_func_t finish)
     * }
     */
    public static MethodHandle cairo_raster_source_pattern_set_finish$handle() {
        return cairo_raster_source_pattern_set_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_raster_source_pattern_set_finish(cairo_pattern_t *pattern, cairo_raster_source_finish_func_t finish)
     * }
     */
    public static void cairo_raster_source_pattern_set_finish(MemorySegment pattern, MemorySegment finish) {
        var mh$ = cairo_raster_source_pattern_set_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_raster_source_pattern_set_finish", pattern, finish);
            }
            mh$.invokeExact(pattern, finish);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_raster_source_pattern_get_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_raster_source_pattern_get_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_raster_source_finish_func_t cairo_raster_source_pattern_get_finish(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_raster_source_pattern_get_finish$descriptor() {
        return cairo_raster_source_pattern_get_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_raster_source_finish_func_t cairo_raster_source_pattern_get_finish(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_raster_source_pattern_get_finish$handle() {
        return cairo_raster_source_pattern_get_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_raster_source_finish_func_t cairo_raster_source_pattern_get_finish(cairo_pattern_t *pattern)
     * }
     */
    public static MemorySegment cairo_raster_source_pattern_get_finish(MemorySegment pattern) {
        var mh$ = cairo_raster_source_pattern_get_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_raster_source_pattern_get_finish", pattern);
            }
            return (MemorySegment)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_create_rgb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_create_rgb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_rgb(double red, double green, double blue)
     * }
     */
    public static FunctionDescriptor cairo_pattern_create_rgb$descriptor() {
        return cairo_pattern_create_rgb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_rgb(double red, double green, double blue)
     * }
     */
    public static MethodHandle cairo_pattern_create_rgb$handle() {
        return cairo_pattern_create_rgb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_rgb(double red, double green, double blue)
     * }
     */
    public static MemorySegment cairo_pattern_create_rgb(double red, double green, double blue) {
        var mh$ = cairo_pattern_create_rgb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_create_rgb", red, green, blue);
            }
            return (MemorySegment)mh$.invokeExact(red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_create_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_create_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_rgba(double red, double green, double blue, double alpha)
     * }
     */
    public static FunctionDescriptor cairo_pattern_create_rgba$descriptor() {
        return cairo_pattern_create_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_rgba(double red, double green, double blue, double alpha)
     * }
     */
    public static MethodHandle cairo_pattern_create_rgba$handle() {
        return cairo_pattern_create_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_rgba(double red, double green, double blue, double alpha)
     * }
     */
    public static MemorySegment cairo_pattern_create_rgba(double red, double green, double blue, double alpha) {
        var mh$ = cairo_pattern_create_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_create_rgba", red, green, blue, alpha);
            }
            return (MemorySegment)mh$.invokeExact(red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_create_for_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_create_for_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_for_surface(cairo_surface_t *surface)
     * }
     */
    public static FunctionDescriptor cairo_pattern_create_for_surface$descriptor() {
        return cairo_pattern_create_for_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_for_surface(cairo_surface_t *surface)
     * }
     */
    public static MethodHandle cairo_pattern_create_for_surface$handle() {
        return cairo_pattern_create_for_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_for_surface(cairo_surface_t *surface)
     * }
     */
    public static MemorySegment cairo_pattern_create_for_surface(MemorySegment surface) {
        var mh$ = cairo_pattern_create_for_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_create_for_surface", surface);
            }
            return (MemorySegment)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_create_linear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_create_linear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_linear(double x0, double y0, double x1, double y1)
     * }
     */
    public static FunctionDescriptor cairo_pattern_create_linear$descriptor() {
        return cairo_pattern_create_linear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_linear(double x0, double y0, double x1, double y1)
     * }
     */
    public static MethodHandle cairo_pattern_create_linear$handle() {
        return cairo_pattern_create_linear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_linear(double x0, double y0, double x1, double y1)
     * }
     */
    public static MemorySegment cairo_pattern_create_linear(double x0, double y0, double x1, double y1) {
        var mh$ = cairo_pattern_create_linear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_create_linear", x0, y0, x1, y1);
            }
            return (MemorySegment)mh$.invokeExact(x0, y0, x1, y1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_create_radial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_create_radial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1)
     * }
     */
    public static FunctionDescriptor cairo_pattern_create_radial$descriptor() {
        return cairo_pattern_create_radial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1)
     * }
     */
    public static MethodHandle cairo_pattern_create_radial$handle() {
        return cairo_pattern_create_radial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1)
     * }
     */
    public static MemorySegment cairo_pattern_create_radial(double cx0, double cy0, double radius0, double cx1, double cy1, double radius1) {
        var mh$ = cairo_pattern_create_radial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_create_radial", cx0, cy0, radius0, cx1, cy1, radius1);
            }
            return (MemorySegment)mh$.invokeExact(cx0, cy0, radius0, cx1, cy1, radius1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_create_mesh {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_create_mesh"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_mesh()
     * }
     */
    public static FunctionDescriptor cairo_pattern_create_mesh$descriptor() {
        return cairo_pattern_create_mesh.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_mesh()
     * }
     */
    public static MethodHandle cairo_pattern_create_mesh$handle() {
        return cairo_pattern_create_mesh.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_create_mesh()
     * }
     */
    public static MemorySegment cairo_pattern_create_mesh() {
        var mh$ = cairo_pattern_create_mesh.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_create_mesh");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_reference(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_pattern_reference$descriptor() {
        return cairo_pattern_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_reference(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_pattern_reference$handle() {
        return cairo_pattern_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *cairo_pattern_reference(cairo_pattern_t *pattern)
     * }
     */
    public static MemorySegment cairo_pattern_reference(MemorySegment pattern) {
        var mh$ = cairo_pattern_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_reference", pattern);
            }
            return (MemorySegment)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_pattern_destroy(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_pattern_destroy$descriptor() {
        return cairo_pattern_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_pattern_destroy(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_pattern_destroy$handle() {
        return cairo_pattern_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_pattern_destroy(cairo_pattern_t *pattern)
     * }
     */
    public static void cairo_pattern_destroy(MemorySegment pattern) {
        var mh$ = cairo_pattern_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_destroy", pattern);
            }
            mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_reference_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_reference_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern unsigned int cairo_pattern_get_reference_count(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_reference_count$descriptor() {
        return cairo_pattern_get_reference_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern unsigned int cairo_pattern_get_reference_count(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_pattern_get_reference_count$handle() {
        return cairo_pattern_get_reference_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern unsigned int cairo_pattern_get_reference_count(cairo_pattern_t *pattern)
     * }
     */
    public static int cairo_pattern_get_reference_count(MemorySegment pattern) {
        var mh$ = cairo_pattern_get_reference_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_reference_count", pattern);
            }
            return (int)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_status(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_pattern_status$descriptor() {
        return cairo_pattern_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_status(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_pattern_status$handle() {
        return cairo_pattern_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_status(cairo_pattern_t *pattern)
     * }
     */
    public static int cairo_pattern_status(MemorySegment pattern) {
        var mh$ = cairo_pattern_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_status", pattern);
            }
            return (int)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void *cairo_pattern_get_user_data(cairo_pattern_t *pattern, const cairo_user_data_key_t *key)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_user_data$descriptor() {
        return cairo_pattern_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void *cairo_pattern_get_user_data(cairo_pattern_t *pattern, const cairo_user_data_key_t *key)
     * }
     */
    public static MethodHandle cairo_pattern_get_user_data$handle() {
        return cairo_pattern_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void *cairo_pattern_get_user_data(cairo_pattern_t *pattern, const cairo_user_data_key_t *key)
     * }
     */
    public static MemorySegment cairo_pattern_get_user_data(MemorySegment pattern, MemorySegment key) {
        var mh$ = cairo_pattern_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_user_data", pattern, key);
            }
            return (MemorySegment)mh$.invokeExact(pattern, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_set_user_data(cairo_pattern_t *pattern, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static FunctionDescriptor cairo_pattern_set_user_data$descriptor() {
        return cairo_pattern_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_set_user_data(cairo_pattern_t *pattern, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static MethodHandle cairo_pattern_set_user_data$handle() {
        return cairo_pattern_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_set_user_data(cairo_pattern_t *pattern, const cairo_user_data_key_t *key, void *user_data, cairo_destroy_func_t destroy)
     * }
     */
    public static int cairo_pattern_set_user_data(MemorySegment pattern, MemorySegment key, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = cairo_pattern_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_set_user_data", pattern, key, user_data, destroy);
            }
            return (int)mh$.invokeExact(pattern, key, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_PATTERN_TYPE_SOLID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_pattern_type.CAIRO_PATTERN_TYPE_SOLID = 0
     * }
     */
    public static int CAIRO_PATTERN_TYPE_SOLID() {
        return CAIRO_PATTERN_TYPE_SOLID;
    }
    private static final int CAIRO_PATTERN_TYPE_SURFACE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_pattern_type.CAIRO_PATTERN_TYPE_SURFACE = 1
     * }
     */
    public static int CAIRO_PATTERN_TYPE_SURFACE() {
        return CAIRO_PATTERN_TYPE_SURFACE;
    }
    private static final int CAIRO_PATTERN_TYPE_LINEAR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_pattern_type.CAIRO_PATTERN_TYPE_LINEAR = 2
     * }
     */
    public static int CAIRO_PATTERN_TYPE_LINEAR() {
        return CAIRO_PATTERN_TYPE_LINEAR;
    }
    private static final int CAIRO_PATTERN_TYPE_RADIAL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_pattern_type.CAIRO_PATTERN_TYPE_RADIAL = 3
     * }
     */
    public static int CAIRO_PATTERN_TYPE_RADIAL() {
        return CAIRO_PATTERN_TYPE_RADIAL;
    }
    private static final int CAIRO_PATTERN_TYPE_MESH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_pattern_type.CAIRO_PATTERN_TYPE_MESH = 4
     * }
     */
    public static int CAIRO_PATTERN_TYPE_MESH() {
        return CAIRO_PATTERN_TYPE_MESH;
    }
    private static final int CAIRO_PATTERN_TYPE_RASTER_SOURCE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _cairo_pattern_type.CAIRO_PATTERN_TYPE_RASTER_SOURCE = 5
     * }
     */
    public static int CAIRO_PATTERN_TYPE_RASTER_SOURCE() {
        return CAIRO_PATTERN_TYPE_RASTER_SOURCE;
    }

    private static class cairo_pattern_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_type_t cairo_pattern_get_type(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_type$descriptor() {
        return cairo_pattern_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_type_t cairo_pattern_get_type(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_pattern_get_type$handle() {
        return cairo_pattern_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_type_t cairo_pattern_get_type(cairo_pattern_t *pattern)
     * }
     */
    public static int cairo_pattern_get_type(MemorySegment pattern) {
        var mh$ = cairo_pattern_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_type", pattern);
            }
            return (int)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_add_color_stop_rgb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_add_color_stop_rgb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_pattern_add_color_stop_rgb(cairo_pattern_t *pattern, double offset, double red, double green, double blue)
     * }
     */
    public static FunctionDescriptor cairo_pattern_add_color_stop_rgb$descriptor() {
        return cairo_pattern_add_color_stop_rgb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_pattern_add_color_stop_rgb(cairo_pattern_t *pattern, double offset, double red, double green, double blue)
     * }
     */
    public static MethodHandle cairo_pattern_add_color_stop_rgb$handle() {
        return cairo_pattern_add_color_stop_rgb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_pattern_add_color_stop_rgb(cairo_pattern_t *pattern, double offset, double red, double green, double blue)
     * }
     */
    public static void cairo_pattern_add_color_stop_rgb(MemorySegment pattern, double offset, double red, double green, double blue) {
        var mh$ = cairo_pattern_add_color_stop_rgb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_add_color_stop_rgb", pattern, offset, red, green, blue);
            }
            mh$.invokeExact(pattern, offset, red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_add_color_stop_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_add_color_stop_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_pattern_add_color_stop_rgba(cairo_pattern_t *pattern, double offset, double red, double green, double blue, double alpha)
     * }
     */
    public static FunctionDescriptor cairo_pattern_add_color_stop_rgba$descriptor() {
        return cairo_pattern_add_color_stop_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_pattern_add_color_stop_rgba(cairo_pattern_t *pattern, double offset, double red, double green, double blue, double alpha)
     * }
     */
    public static MethodHandle cairo_pattern_add_color_stop_rgba$handle() {
        return cairo_pattern_add_color_stop_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_pattern_add_color_stop_rgba(cairo_pattern_t *pattern, double offset, double red, double green, double blue, double alpha)
     * }
     */
    public static void cairo_pattern_add_color_stop_rgba(MemorySegment pattern, double offset, double red, double green, double blue, double alpha) {
        var mh$ = cairo_pattern_add_color_stop_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_add_color_stop_rgba", pattern, offset, red, green, blue, alpha);
            }
            mh$.invokeExact(pattern, offset, red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_begin_patch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_begin_patch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_begin_patch(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_begin_patch$descriptor() {
        return cairo_mesh_pattern_begin_patch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_begin_patch(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_begin_patch$handle() {
        return cairo_mesh_pattern_begin_patch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_begin_patch(cairo_pattern_t *pattern)
     * }
     */
    public static void cairo_mesh_pattern_begin_patch(MemorySegment pattern) {
        var mh$ = cairo_mesh_pattern_begin_patch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_begin_patch", pattern);
            }
            mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_end_patch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_end_patch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_end_patch(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_end_patch$descriptor() {
        return cairo_mesh_pattern_end_patch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_end_patch(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_end_patch$handle() {
        return cairo_mesh_pattern_end_patch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_end_patch(cairo_pattern_t *pattern)
     * }
     */
    public static void cairo_mesh_pattern_end_patch(MemorySegment pattern) {
        var mh$ = cairo_mesh_pattern_end_patch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_end_patch", pattern);
            }
            mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_curve_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_curve_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_curve_to(cairo_pattern_t *pattern, double x1, double y1, double x2, double y2, double x3, double y3)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_curve_to$descriptor() {
        return cairo_mesh_pattern_curve_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_curve_to(cairo_pattern_t *pattern, double x1, double y1, double x2, double y2, double x3, double y3)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_curve_to$handle() {
        return cairo_mesh_pattern_curve_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_curve_to(cairo_pattern_t *pattern, double x1, double y1, double x2, double y2, double x3, double y3)
     * }
     */
    public static void cairo_mesh_pattern_curve_to(MemorySegment pattern, double x1, double y1, double x2, double y2, double x3, double y3) {
        var mh$ = cairo_mesh_pattern_curve_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_curve_to", pattern, x1, y1, x2, y2, x3, y3);
            }
            mh$.invokeExact(pattern, x1, y1, x2, y2, x3, y3);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_line_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_line_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_line_to(cairo_pattern_t *pattern, double x, double y)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_line_to$descriptor() {
        return cairo_mesh_pattern_line_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_line_to(cairo_pattern_t *pattern, double x, double y)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_line_to$handle() {
        return cairo_mesh_pattern_line_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_line_to(cairo_pattern_t *pattern, double x, double y)
     * }
     */
    public static void cairo_mesh_pattern_line_to(MemorySegment pattern, double x, double y) {
        var mh$ = cairo_mesh_pattern_line_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_line_to", pattern, x, y);
            }
            mh$.invokeExact(pattern, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_move_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_move_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_move_to(cairo_pattern_t *pattern, double x, double y)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_move_to$descriptor() {
        return cairo_mesh_pattern_move_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_move_to(cairo_pattern_t *pattern, double x, double y)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_move_to$handle() {
        return cairo_mesh_pattern_move_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_move_to(cairo_pattern_t *pattern, double x, double y)
     * }
     */
    public static void cairo_mesh_pattern_move_to(MemorySegment pattern, double x, double y) {
        var mh$ = cairo_mesh_pattern_move_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_move_to", pattern, x, y);
            }
            mh$.invokeExact(pattern, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_set_control_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_set_control_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_set_control_point(cairo_pattern_t *pattern, unsigned int point_num, double x, double y)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_set_control_point$descriptor() {
        return cairo_mesh_pattern_set_control_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_set_control_point(cairo_pattern_t *pattern, unsigned int point_num, double x, double y)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_set_control_point$handle() {
        return cairo_mesh_pattern_set_control_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_set_control_point(cairo_pattern_t *pattern, unsigned int point_num, double x, double y)
     * }
     */
    public static void cairo_mesh_pattern_set_control_point(MemorySegment pattern, int point_num, double x, double y) {
        var mh$ = cairo_mesh_pattern_set_control_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_set_control_point", pattern, point_num, x, y);
            }
            mh$.invokeExact(pattern, point_num, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_set_corner_color_rgb {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_set_corner_color_rgb"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_set_corner_color_rgb(cairo_pattern_t *pattern, unsigned int corner_num, double red, double green, double blue)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_set_corner_color_rgb$descriptor() {
        return cairo_mesh_pattern_set_corner_color_rgb.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_set_corner_color_rgb(cairo_pattern_t *pattern, unsigned int corner_num, double red, double green, double blue)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_set_corner_color_rgb$handle() {
        return cairo_mesh_pattern_set_corner_color_rgb.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_set_corner_color_rgb(cairo_pattern_t *pattern, unsigned int corner_num, double red, double green, double blue)
     * }
     */
    public static void cairo_mesh_pattern_set_corner_color_rgb(MemorySegment pattern, int corner_num, double red, double green, double blue) {
        var mh$ = cairo_mesh_pattern_set_corner_color_rgb.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_set_corner_color_rgb", pattern, corner_num, red, green, blue);
            }
            mh$.invokeExact(pattern, corner_num, red, green, blue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_set_corner_color_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_set_corner_color_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_set_corner_color_rgba(cairo_pattern_t *pattern, unsigned int corner_num, double red, double green, double blue, double alpha)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_set_corner_color_rgba$descriptor() {
        return cairo_mesh_pattern_set_corner_color_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_set_corner_color_rgba(cairo_pattern_t *pattern, unsigned int corner_num, double red, double green, double blue, double alpha)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_set_corner_color_rgba$handle() {
        return cairo_mesh_pattern_set_corner_color_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_mesh_pattern_set_corner_color_rgba(cairo_pattern_t *pattern, unsigned int corner_num, double red, double green, double blue, double alpha)
     * }
     */
    public static void cairo_mesh_pattern_set_corner_color_rgba(MemorySegment pattern, int corner_num, double red, double green, double blue, double alpha) {
        var mh$ = cairo_mesh_pattern_set_corner_color_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_set_corner_color_rgba", pattern, corner_num, red, green, blue, alpha);
            }
            mh$.invokeExact(pattern, corner_num, red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_set_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_set_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_pattern_set_matrix(cairo_pattern_t *pattern, const cairo_matrix_t *matrix)
     * }
     */
    public static FunctionDescriptor cairo_pattern_set_matrix$descriptor() {
        return cairo_pattern_set_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_pattern_set_matrix(cairo_pattern_t *pattern, const cairo_matrix_t *matrix)
     * }
     */
    public static MethodHandle cairo_pattern_set_matrix$handle() {
        return cairo_pattern_set_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_pattern_set_matrix(cairo_pattern_t *pattern, const cairo_matrix_t *matrix)
     * }
     */
    public static void cairo_pattern_set_matrix(MemorySegment pattern, MemorySegment matrix) {
        var mh$ = cairo_pattern_set_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_set_matrix", pattern, matrix);
            }
            mh$.invokeExact(pattern, matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_matrix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_matrix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_pattern_get_matrix(cairo_pattern_t *pattern, cairo_matrix_t *matrix)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_matrix$descriptor() {
        return cairo_pattern_get_matrix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_pattern_get_matrix(cairo_pattern_t *pattern, cairo_matrix_t *matrix)
     * }
     */
    public static MethodHandle cairo_pattern_get_matrix$handle() {
        return cairo_pattern_get_matrix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_pattern_get_matrix(cairo_pattern_t *pattern, cairo_matrix_t *matrix)
     * }
     */
    public static void cairo_pattern_get_matrix(MemorySegment pattern, MemorySegment matrix) {
        var mh$ = cairo_pattern_get_matrix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_matrix", pattern, matrix);
            }
            mh$.invokeExact(pattern, matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_EXTEND_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_extend.CAIRO_EXTEND_NONE = 0
     * }
     */
    public static int CAIRO_EXTEND_NONE() {
        return CAIRO_EXTEND_NONE;
    }
    private static final int CAIRO_EXTEND_REPEAT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_extend.CAIRO_EXTEND_REPEAT = 1
     * }
     */
    public static int CAIRO_EXTEND_REPEAT() {
        return CAIRO_EXTEND_REPEAT;
    }
    private static final int CAIRO_EXTEND_REFLECT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_extend.CAIRO_EXTEND_REFLECT = 2
     * }
     */
    public static int CAIRO_EXTEND_REFLECT() {
        return CAIRO_EXTEND_REFLECT;
    }
    private static final int CAIRO_EXTEND_PAD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_extend.CAIRO_EXTEND_PAD = 3
     * }
     */
    public static int CAIRO_EXTEND_PAD() {
        return CAIRO_EXTEND_PAD;
    }

    private static class cairo_pattern_set_extend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_set_extend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_pattern_set_extend(cairo_pattern_t *pattern, cairo_extend_t extend)
     * }
     */
    public static FunctionDescriptor cairo_pattern_set_extend$descriptor() {
        return cairo_pattern_set_extend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_pattern_set_extend(cairo_pattern_t *pattern, cairo_extend_t extend)
     * }
     */
    public static MethodHandle cairo_pattern_set_extend$handle() {
        return cairo_pattern_set_extend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_pattern_set_extend(cairo_pattern_t *pattern, cairo_extend_t extend)
     * }
     */
    public static void cairo_pattern_set_extend(MemorySegment pattern, int extend) {
        var mh$ = cairo_pattern_set_extend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_set_extend", pattern, extend);
            }
            mh$.invokeExact(pattern, extend);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_extend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_extend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_extend_t cairo_pattern_get_extend(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_extend$descriptor() {
        return cairo_pattern_get_extend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_extend_t cairo_pattern_get_extend(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_pattern_get_extend$handle() {
        return cairo_pattern_get_extend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_extend_t cairo_pattern_get_extend(cairo_pattern_t *pattern)
     * }
     */
    public static int cairo_pattern_get_extend(MemorySegment pattern) {
        var mh$ = cairo_pattern_get_extend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_extend", pattern);
            }
            return (int)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_FILTER_FAST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_filter.CAIRO_FILTER_FAST = 0
     * }
     */
    public static int CAIRO_FILTER_FAST() {
        return CAIRO_FILTER_FAST;
    }
    private static final int CAIRO_FILTER_GOOD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_filter.CAIRO_FILTER_GOOD = 1
     * }
     */
    public static int CAIRO_FILTER_GOOD() {
        return CAIRO_FILTER_GOOD;
    }
    private static final int CAIRO_FILTER_BEST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_filter.CAIRO_FILTER_BEST = 2
     * }
     */
    public static int CAIRO_FILTER_BEST() {
        return CAIRO_FILTER_BEST;
    }
    private static final int CAIRO_FILTER_NEAREST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum _cairo_filter.CAIRO_FILTER_NEAREST = 3
     * }
     */
    public static int CAIRO_FILTER_NEAREST() {
        return CAIRO_FILTER_NEAREST;
    }
    private static final int CAIRO_FILTER_BILINEAR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum _cairo_filter.CAIRO_FILTER_BILINEAR = 4
     * }
     */
    public static int CAIRO_FILTER_BILINEAR() {
        return CAIRO_FILTER_BILINEAR;
    }
    private static final int CAIRO_FILTER_GAUSSIAN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum _cairo_filter.CAIRO_FILTER_GAUSSIAN = 5
     * }
     */
    public static int CAIRO_FILTER_GAUSSIAN() {
        return CAIRO_FILTER_GAUSSIAN;
    }

    private static class cairo_pattern_set_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_set_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_pattern_set_filter(cairo_pattern_t *pattern, cairo_filter_t filter)
     * }
     */
    public static FunctionDescriptor cairo_pattern_set_filter$descriptor() {
        return cairo_pattern_set_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_pattern_set_filter(cairo_pattern_t *pattern, cairo_filter_t filter)
     * }
     */
    public static MethodHandle cairo_pattern_set_filter$handle() {
        return cairo_pattern_set_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_pattern_set_filter(cairo_pattern_t *pattern, cairo_filter_t filter)
     * }
     */
    public static void cairo_pattern_set_filter(MemorySegment pattern, int filter) {
        var mh$ = cairo_pattern_set_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_set_filter", pattern, filter);
            }
            mh$.invokeExact(pattern, filter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_filter_t cairo_pattern_get_filter(cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_filter$descriptor() {
        return cairo_pattern_get_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_filter_t cairo_pattern_get_filter(cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle cairo_pattern_get_filter$handle() {
        return cairo_pattern_get_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_filter_t cairo_pattern_get_filter(cairo_pattern_t *pattern)
     * }
     */
    public static int cairo_pattern_get_filter(MemorySegment pattern) {
        var mh$ = cairo_pattern_get_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_filter", pattern);
            }
            return (int)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_rgba(cairo_pattern_t *pattern, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_rgba$descriptor() {
        return cairo_pattern_get_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_rgba(cairo_pattern_t *pattern, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static MethodHandle cairo_pattern_get_rgba$handle() {
        return cairo_pattern_get_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_rgba(cairo_pattern_t *pattern, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static int cairo_pattern_get_rgba(MemorySegment pattern, MemorySegment red, MemorySegment green, MemorySegment blue, MemorySegment alpha) {
        var mh$ = cairo_pattern_get_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_rgba", pattern, red, green, blue, alpha);
            }
            return (int)mh$.invokeExact(pattern, red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_surface {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_surface"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_surface(cairo_pattern_t *pattern, cairo_surface_t **surface)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_surface$descriptor() {
        return cairo_pattern_get_surface.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_surface(cairo_pattern_t *pattern, cairo_surface_t **surface)
     * }
     */
    public static MethodHandle cairo_pattern_get_surface$handle() {
        return cairo_pattern_get_surface.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_surface(cairo_pattern_t *pattern, cairo_surface_t **surface)
     * }
     */
    public static int cairo_pattern_get_surface(MemorySegment pattern, MemorySegment surface) {
        var mh$ = cairo_pattern_get_surface.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_surface", pattern, surface);
            }
            return (int)mh$.invokeExact(pattern, surface);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_color_stop_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_color_stop_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_color_stop_rgba(cairo_pattern_t *pattern, int index, double *offset, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_color_stop_rgba$descriptor() {
        return cairo_pattern_get_color_stop_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_color_stop_rgba(cairo_pattern_t *pattern, int index, double *offset, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static MethodHandle cairo_pattern_get_color_stop_rgba$handle() {
        return cairo_pattern_get_color_stop_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_color_stop_rgba(cairo_pattern_t *pattern, int index, double *offset, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static int cairo_pattern_get_color_stop_rgba(MemorySegment pattern, int index, MemorySegment offset, MemorySegment red, MemorySegment green, MemorySegment blue, MemorySegment alpha) {
        var mh$ = cairo_pattern_get_color_stop_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_color_stop_rgba", pattern, index, offset, red, green, blue, alpha);
            }
            return (int)mh$.invokeExact(pattern, index, offset, red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_color_stop_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_color_stop_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_color_stop_count(cairo_pattern_t *pattern, int *count)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_color_stop_count$descriptor() {
        return cairo_pattern_get_color_stop_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_color_stop_count(cairo_pattern_t *pattern, int *count)
     * }
     */
    public static MethodHandle cairo_pattern_get_color_stop_count$handle() {
        return cairo_pattern_get_color_stop_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_color_stop_count(cairo_pattern_t *pattern, int *count)
     * }
     */
    public static int cairo_pattern_get_color_stop_count(MemorySegment pattern, MemorySegment count) {
        var mh$ = cairo_pattern_get_color_stop_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_color_stop_count", pattern, count);
            }
            return (int)mh$.invokeExact(pattern, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_linear_points {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_linear_points"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_linear_points(cairo_pattern_t *pattern, double *x0, double *y0, double *x1, double *y1)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_linear_points$descriptor() {
        return cairo_pattern_get_linear_points.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_linear_points(cairo_pattern_t *pattern, double *x0, double *y0, double *x1, double *y1)
     * }
     */
    public static MethodHandle cairo_pattern_get_linear_points$handle() {
        return cairo_pattern_get_linear_points.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_linear_points(cairo_pattern_t *pattern, double *x0, double *y0, double *x1, double *y1)
     * }
     */
    public static int cairo_pattern_get_linear_points(MemorySegment pattern, MemorySegment x0, MemorySegment y0, MemorySegment x1, MemorySegment y1) {
        var mh$ = cairo_pattern_get_linear_points.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_linear_points", pattern, x0, y0, x1, y1);
            }
            return (int)mh$.invokeExact(pattern, x0, y0, x1, y1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_pattern_get_radial_circles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_pattern_get_radial_circles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_radial_circles(cairo_pattern_t *pattern, double *x0, double *y0, double *r0, double *x1, double *y1, double *r1)
     * }
     */
    public static FunctionDescriptor cairo_pattern_get_radial_circles$descriptor() {
        return cairo_pattern_get_radial_circles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_radial_circles(cairo_pattern_t *pattern, double *x0, double *y0, double *r0, double *x1, double *y1, double *r1)
     * }
     */
    public static MethodHandle cairo_pattern_get_radial_circles$handle() {
        return cairo_pattern_get_radial_circles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_pattern_get_radial_circles(cairo_pattern_t *pattern, double *x0, double *y0, double *r0, double *x1, double *y1, double *r1)
     * }
     */
    public static int cairo_pattern_get_radial_circles(MemorySegment pattern, MemorySegment x0, MemorySegment y0, MemorySegment r0, MemorySegment x1, MemorySegment y1, MemorySegment r1) {
        var mh$ = cairo_pattern_get_radial_circles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_pattern_get_radial_circles", pattern, x0, y0, r0, x1, y1, r1);
            }
            return (int)mh$.invokeExact(pattern, x0, y0, r0, x1, y1, r1);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_get_patch_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_get_patch_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_mesh_pattern_get_patch_count(cairo_pattern_t *pattern, unsigned int *count)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_get_patch_count$descriptor() {
        return cairo_mesh_pattern_get_patch_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_mesh_pattern_get_patch_count(cairo_pattern_t *pattern, unsigned int *count)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_get_patch_count$handle() {
        return cairo_mesh_pattern_get_patch_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_mesh_pattern_get_patch_count(cairo_pattern_t *pattern, unsigned int *count)
     * }
     */
    public static int cairo_mesh_pattern_get_patch_count(MemorySegment pattern, MemorySegment count) {
        var mh$ = cairo_mesh_pattern_get_patch_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_get_patch_count", pattern, count);
            }
            return (int)mh$.invokeExact(pattern, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_path_t *cairo_mesh_pattern_get_path(cairo_pattern_t *pattern, unsigned int patch_num)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_get_path$descriptor() {
        return cairo_mesh_pattern_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_path_t *cairo_mesh_pattern_get_path(cairo_pattern_t *pattern, unsigned int patch_num)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_get_path$handle() {
        return cairo_mesh_pattern_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_path_t *cairo_mesh_pattern_get_path(cairo_pattern_t *pattern, unsigned int patch_num)
     * }
     */
    public static MemorySegment cairo_mesh_pattern_get_path(MemorySegment pattern, int patch_num) {
        var mh$ = cairo_mesh_pattern_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_get_path", pattern, patch_num);
            }
            return (MemorySegment)mh$.invokeExact(pattern, patch_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_get_corner_color_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_get_corner_color_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_mesh_pattern_get_corner_color_rgba(cairo_pattern_t *pattern, unsigned int patch_num, unsigned int corner_num, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_get_corner_color_rgba$descriptor() {
        return cairo_mesh_pattern_get_corner_color_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_mesh_pattern_get_corner_color_rgba(cairo_pattern_t *pattern, unsigned int patch_num, unsigned int corner_num, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_get_corner_color_rgba$handle() {
        return cairo_mesh_pattern_get_corner_color_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_mesh_pattern_get_corner_color_rgba(cairo_pattern_t *pattern, unsigned int patch_num, unsigned int corner_num, double *red, double *green, double *blue, double *alpha)
     * }
     */
    public static int cairo_mesh_pattern_get_corner_color_rgba(MemorySegment pattern, int patch_num, int corner_num, MemorySegment red, MemorySegment green, MemorySegment blue, MemorySegment alpha) {
        var mh$ = cairo_mesh_pattern_get_corner_color_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_get_corner_color_rgba", pattern, patch_num, corner_num, red, green, blue, alpha);
            }
            return (int)mh$.invokeExact(pattern, patch_num, corner_num, red, green, blue, alpha);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_mesh_pattern_get_control_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_mesh_pattern_get_control_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_mesh_pattern_get_control_point(cairo_pattern_t *pattern, unsigned int patch_num, unsigned int point_num, double *x, double *y)
     * }
     */
    public static FunctionDescriptor cairo_mesh_pattern_get_control_point$descriptor() {
        return cairo_mesh_pattern_get_control_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_mesh_pattern_get_control_point(cairo_pattern_t *pattern, unsigned int patch_num, unsigned int point_num, double *x, double *y)
     * }
     */
    public static MethodHandle cairo_mesh_pattern_get_control_point$handle() {
        return cairo_mesh_pattern_get_control_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_mesh_pattern_get_control_point(cairo_pattern_t *pattern, unsigned int patch_num, unsigned int point_num, double *x, double *y)
     * }
     */
    public static int cairo_mesh_pattern_get_control_point(MemorySegment pattern, int patch_num, int point_num, MemorySegment x, MemorySegment y) {
        var mh$ = cairo_mesh_pattern_get_control_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_mesh_pattern_get_control_point", pattern, patch_num, point_num, x, y);
            }
            return (int)mh$.invokeExact(pattern, patch_num, point_num, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_init(cairo_matrix_t *matrix, double xx, double yx, double xy, double yy, double x0, double y0)
     * }
     */
    public static FunctionDescriptor cairo_matrix_init$descriptor() {
        return cairo_matrix_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_init(cairo_matrix_t *matrix, double xx, double yx, double xy, double yy, double x0, double y0)
     * }
     */
    public static MethodHandle cairo_matrix_init$handle() {
        return cairo_matrix_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_init(cairo_matrix_t *matrix, double xx, double yx, double xy, double yy, double x0, double y0)
     * }
     */
    public static void cairo_matrix_init(MemorySegment matrix, double xx, double yx, double xy, double yy, double x0, double y0) {
        var mh$ = cairo_matrix_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_init", matrix, xx, yx, xy, yy, x0, y0);
            }
            mh$.invokeExact(matrix, xx, yx, xy, yy, x0, y0);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_init_identity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_init_identity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_init_identity(cairo_matrix_t *matrix)
     * }
     */
    public static FunctionDescriptor cairo_matrix_init_identity$descriptor() {
        return cairo_matrix_init_identity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_init_identity(cairo_matrix_t *matrix)
     * }
     */
    public static MethodHandle cairo_matrix_init_identity$handle() {
        return cairo_matrix_init_identity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_init_identity(cairo_matrix_t *matrix)
     * }
     */
    public static void cairo_matrix_init_identity(MemorySegment matrix) {
        var mh$ = cairo_matrix_init_identity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_init_identity", matrix);
            }
            mh$.invokeExact(matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_init_translate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_init_translate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_init_translate(cairo_matrix_t *matrix, double tx, double ty)
     * }
     */
    public static FunctionDescriptor cairo_matrix_init_translate$descriptor() {
        return cairo_matrix_init_translate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_init_translate(cairo_matrix_t *matrix, double tx, double ty)
     * }
     */
    public static MethodHandle cairo_matrix_init_translate$handle() {
        return cairo_matrix_init_translate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_init_translate(cairo_matrix_t *matrix, double tx, double ty)
     * }
     */
    public static void cairo_matrix_init_translate(MemorySegment matrix, double tx, double ty) {
        var mh$ = cairo_matrix_init_translate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_init_translate", matrix, tx, ty);
            }
            mh$.invokeExact(matrix, tx, ty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_init_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_init_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_init_scale(cairo_matrix_t *matrix, double sx, double sy)
     * }
     */
    public static FunctionDescriptor cairo_matrix_init_scale$descriptor() {
        return cairo_matrix_init_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_init_scale(cairo_matrix_t *matrix, double sx, double sy)
     * }
     */
    public static MethodHandle cairo_matrix_init_scale$handle() {
        return cairo_matrix_init_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_init_scale(cairo_matrix_t *matrix, double sx, double sy)
     * }
     */
    public static void cairo_matrix_init_scale(MemorySegment matrix, double sx, double sy) {
        var mh$ = cairo_matrix_init_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_init_scale", matrix, sx, sy);
            }
            mh$.invokeExact(matrix, sx, sy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_init_rotate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_init_rotate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_init_rotate(cairo_matrix_t *matrix, double radians)
     * }
     */
    public static FunctionDescriptor cairo_matrix_init_rotate$descriptor() {
        return cairo_matrix_init_rotate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_init_rotate(cairo_matrix_t *matrix, double radians)
     * }
     */
    public static MethodHandle cairo_matrix_init_rotate$handle() {
        return cairo_matrix_init_rotate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_init_rotate(cairo_matrix_t *matrix, double radians)
     * }
     */
    public static void cairo_matrix_init_rotate(MemorySegment matrix, double radians) {
        var mh$ = cairo_matrix_init_rotate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_init_rotate", matrix, radians);
            }
            mh$.invokeExact(matrix, radians);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_translate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_translate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_translate(cairo_matrix_t *matrix, double tx, double ty)
     * }
     */
    public static FunctionDescriptor cairo_matrix_translate$descriptor() {
        return cairo_matrix_translate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_translate(cairo_matrix_t *matrix, double tx, double ty)
     * }
     */
    public static MethodHandle cairo_matrix_translate$handle() {
        return cairo_matrix_translate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_translate(cairo_matrix_t *matrix, double tx, double ty)
     * }
     */
    public static void cairo_matrix_translate(MemorySegment matrix, double tx, double ty) {
        var mh$ = cairo_matrix_translate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_translate", matrix, tx, ty);
            }
            mh$.invokeExact(matrix, tx, ty);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_scale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_scale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_scale(cairo_matrix_t *matrix, double sx, double sy)
     * }
     */
    public static FunctionDescriptor cairo_matrix_scale$descriptor() {
        return cairo_matrix_scale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_scale(cairo_matrix_t *matrix, double sx, double sy)
     * }
     */
    public static MethodHandle cairo_matrix_scale$handle() {
        return cairo_matrix_scale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_scale(cairo_matrix_t *matrix, double sx, double sy)
     * }
     */
    public static void cairo_matrix_scale(MemorySegment matrix, double sx, double sy) {
        var mh$ = cairo_matrix_scale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_scale", matrix, sx, sy);
            }
            mh$.invokeExact(matrix, sx, sy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_rotate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_rotate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_rotate(cairo_matrix_t *matrix, double radians)
     * }
     */
    public static FunctionDescriptor cairo_matrix_rotate$descriptor() {
        return cairo_matrix_rotate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_rotate(cairo_matrix_t *matrix, double radians)
     * }
     */
    public static MethodHandle cairo_matrix_rotate$handle() {
        return cairo_matrix_rotate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_rotate(cairo_matrix_t *matrix, double radians)
     * }
     */
    public static void cairo_matrix_rotate(MemorySegment matrix, double radians) {
        var mh$ = cairo_matrix_rotate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_rotate", matrix, radians);
            }
            mh$.invokeExact(matrix, radians);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_invert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_invert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_matrix_invert(cairo_matrix_t *matrix)
     * }
     */
    public static FunctionDescriptor cairo_matrix_invert$descriptor() {
        return cairo_matrix_invert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_matrix_invert(cairo_matrix_t *matrix)
     * }
     */
    public static MethodHandle cairo_matrix_invert$handle() {
        return cairo_matrix_invert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_matrix_invert(cairo_matrix_t *matrix)
     * }
     */
    public static int cairo_matrix_invert(MemorySegment matrix) {
        var mh$ = cairo_matrix_invert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_invert", matrix);
            }
            return (int)mh$.invokeExact(matrix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_multiply {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_multiply"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_multiply(cairo_matrix_t *result, const cairo_matrix_t *a, const cairo_matrix_t *b)
     * }
     */
    public static FunctionDescriptor cairo_matrix_multiply$descriptor() {
        return cairo_matrix_multiply.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_multiply(cairo_matrix_t *result, const cairo_matrix_t *a, const cairo_matrix_t *b)
     * }
     */
    public static MethodHandle cairo_matrix_multiply$handle() {
        return cairo_matrix_multiply.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_multiply(cairo_matrix_t *result, const cairo_matrix_t *a, const cairo_matrix_t *b)
     * }
     */
    public static void cairo_matrix_multiply(MemorySegment result, MemorySegment a, MemorySegment b) {
        var mh$ = cairo_matrix_multiply.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_multiply", result, a, b);
            }
            mh$.invokeExact(result, a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_transform_distance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_transform_distance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_transform_distance(const cairo_matrix_t *matrix, double *dx, double *dy)
     * }
     */
    public static FunctionDescriptor cairo_matrix_transform_distance$descriptor() {
        return cairo_matrix_transform_distance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_transform_distance(const cairo_matrix_t *matrix, double *dx, double *dy)
     * }
     */
    public static MethodHandle cairo_matrix_transform_distance$handle() {
        return cairo_matrix_transform_distance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_transform_distance(const cairo_matrix_t *matrix, double *dx, double *dy)
     * }
     */
    public static void cairo_matrix_transform_distance(MemorySegment matrix, MemorySegment dx, MemorySegment dy) {
        var mh$ = cairo_matrix_transform_distance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_transform_distance", matrix, dx, dy);
            }
            mh$.invokeExact(matrix, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_matrix_transform_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_matrix_transform_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_matrix_transform_point(const cairo_matrix_t *matrix, double *x, double *y)
     * }
     */
    public static FunctionDescriptor cairo_matrix_transform_point$descriptor() {
        return cairo_matrix_transform_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_matrix_transform_point(const cairo_matrix_t *matrix, double *x, double *y)
     * }
     */
    public static MethodHandle cairo_matrix_transform_point$handle() {
        return cairo_matrix_transform_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_matrix_transform_point(const cairo_matrix_t *matrix, double *x, double *y)
     * }
     */
    public static void cairo_matrix_transform_point(MemorySegment matrix, MemorySegment x, MemorySegment y) {
        var mh$ = cairo_matrix_transform_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_matrix_transform_point", matrix, x, y);
            }
            mh$.invokeExact(matrix, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int CAIRO_REGION_OVERLAP_IN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum _cairo_region_overlap.CAIRO_REGION_OVERLAP_IN = 0
     * }
     */
    public static int CAIRO_REGION_OVERLAP_IN() {
        return CAIRO_REGION_OVERLAP_IN;
    }
    private static final int CAIRO_REGION_OVERLAP_OUT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum _cairo_region_overlap.CAIRO_REGION_OVERLAP_OUT = 1
     * }
     */
    public static int CAIRO_REGION_OVERLAP_OUT() {
        return CAIRO_REGION_OVERLAP_OUT;
    }
    private static final int CAIRO_REGION_OVERLAP_PART = (int)2L;
    /**
     * {@snippet lang=c :
     * enum _cairo_region_overlap.CAIRO_REGION_OVERLAP_PART = 2
     * }
     */
    public static int CAIRO_REGION_OVERLAP_PART() {
        return CAIRO_REGION_OVERLAP_PART;
    }

    private static class cairo_region_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_create()
     * }
     */
    public static FunctionDescriptor cairo_region_create$descriptor() {
        return cairo_region_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_create()
     * }
     */
    public static MethodHandle cairo_region_create$handle() {
        return cairo_region_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_create()
     * }
     */
    public static MemorySegment cairo_region_create() {
        var mh$ = cairo_region_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_create");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_create_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_create_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_create_rectangle(const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static FunctionDescriptor cairo_region_create_rectangle$descriptor() {
        return cairo_region_create_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_create_rectangle(const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static MethodHandle cairo_region_create_rectangle$handle() {
        return cairo_region_create_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_create_rectangle(const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static MemorySegment cairo_region_create_rectangle(MemorySegment rectangle) {
        var mh$ = cairo_region_create_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_create_rectangle", rectangle);
            }
            return (MemorySegment)mh$.invokeExact(rectangle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_create_rectangles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_create_rectangles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_create_rectangles(const cairo_rectangle_int_t *rects, int count)
     * }
     */
    public static FunctionDescriptor cairo_region_create_rectangles$descriptor() {
        return cairo_region_create_rectangles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_create_rectangles(const cairo_rectangle_int_t *rects, int count)
     * }
     */
    public static MethodHandle cairo_region_create_rectangles$handle() {
        return cairo_region_create_rectangles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_create_rectangles(const cairo_rectangle_int_t *rects, int count)
     * }
     */
    public static MemorySegment cairo_region_create_rectangles(MemorySegment rects, int count) {
        var mh$ = cairo_region_create_rectangles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_create_rectangles", rects, count);
            }
            return (MemorySegment)mh$.invokeExact(rects, count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_copy(const cairo_region_t *original)
     * }
     */
    public static FunctionDescriptor cairo_region_copy$descriptor() {
        return cairo_region_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_copy(const cairo_region_t *original)
     * }
     */
    public static MethodHandle cairo_region_copy$handle() {
        return cairo_region_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_copy(const cairo_region_t *original)
     * }
     */
    public static MemorySegment cairo_region_copy(MemorySegment original) {
        var mh$ = cairo_region_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_copy", original);
            }
            return (MemorySegment)mh$.invokeExact(original);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_reference {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_reference"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_reference(cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor cairo_region_reference$descriptor() {
        return cairo_region_reference.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_reference(cairo_region_t *region)
     * }
     */
    public static MethodHandle cairo_region_reference$handle() {
        return cairo_region_reference.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *cairo_region_reference(cairo_region_t *region)
     * }
     */
    public static MemorySegment cairo_region_reference(MemorySegment region) {
        var mh$ = cairo_region_reference.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_reference", region);
            }
            return (MemorySegment)mh$.invokeExact(region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_region_destroy(cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor cairo_region_destroy$descriptor() {
        return cairo_region_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_region_destroy(cairo_region_t *region)
     * }
     */
    public static MethodHandle cairo_region_destroy$handle() {
        return cairo_region_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_region_destroy(cairo_region_t *region)
     * }
     */
    public static void cairo_region_destroy(MemorySegment region) {
        var mh$ = cairo_region_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_destroy", region);
            }
            mh$.invokeExact(region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_region_equal(const cairo_region_t *a, const cairo_region_t *b)
     * }
     */
    public static FunctionDescriptor cairo_region_equal$descriptor() {
        return cairo_region_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_region_equal(const cairo_region_t *a, const cairo_region_t *b)
     * }
     */
    public static MethodHandle cairo_region_equal$handle() {
        return cairo_region_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_region_equal(const cairo_region_t *a, const cairo_region_t *b)
     * }
     */
    public static int cairo_region_equal(MemorySegment a, MemorySegment b) {
        var mh$ = cairo_region_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_equal", a, b);
            }
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_status(const cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor cairo_region_status$descriptor() {
        return cairo_region_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_status(const cairo_region_t *region)
     * }
     */
    public static MethodHandle cairo_region_status$handle() {
        return cairo_region_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_status(const cairo_region_t *region)
     * }
     */
    public static int cairo_region_status(MemorySegment region) {
        var mh$ = cairo_region_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_status", region);
            }
            return (int)mh$.invokeExact(region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_get_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_get_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_region_get_extents(const cairo_region_t *region, cairo_rectangle_int_t *extents)
     * }
     */
    public static FunctionDescriptor cairo_region_get_extents$descriptor() {
        return cairo_region_get_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_region_get_extents(const cairo_region_t *region, cairo_rectangle_int_t *extents)
     * }
     */
    public static MethodHandle cairo_region_get_extents$handle() {
        return cairo_region_get_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_region_get_extents(const cairo_region_t *region, cairo_rectangle_int_t *extents)
     * }
     */
    public static void cairo_region_get_extents(MemorySegment region, MemorySegment extents) {
        var mh$ = cairo_region_get_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_get_extents", region, extents);
            }
            mh$.invokeExact(region, extents);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_num_rectangles {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_num_rectangles"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int cairo_region_num_rectangles(const cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor cairo_region_num_rectangles$descriptor() {
        return cairo_region_num_rectangles.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int cairo_region_num_rectangles(const cairo_region_t *region)
     * }
     */
    public static MethodHandle cairo_region_num_rectangles$handle() {
        return cairo_region_num_rectangles.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int cairo_region_num_rectangles(const cairo_region_t *region)
     * }
     */
    public static int cairo_region_num_rectangles(MemorySegment region) {
        var mh$ = cairo_region_num_rectangles.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_num_rectangles", region);
            }
            return (int)mh$.invokeExact(region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_get_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_get_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_region_get_rectangle(const cairo_region_t *region, int nth, cairo_rectangle_int_t *rectangle)
     * }
     */
    public static FunctionDescriptor cairo_region_get_rectangle$descriptor() {
        return cairo_region_get_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_region_get_rectangle(const cairo_region_t *region, int nth, cairo_rectangle_int_t *rectangle)
     * }
     */
    public static MethodHandle cairo_region_get_rectangle$handle() {
        return cairo_region_get_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_region_get_rectangle(const cairo_region_t *region, int nth, cairo_rectangle_int_t *rectangle)
     * }
     */
    public static void cairo_region_get_rectangle(MemorySegment region, int nth, MemorySegment rectangle) {
        var mh$ = cairo_region_get_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_get_rectangle", region, nth, rectangle);
            }
            mh$.invokeExact(region, nth, rectangle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_is_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_is_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_region_is_empty(const cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor cairo_region_is_empty$descriptor() {
        return cairo_region_is_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_region_is_empty(const cairo_region_t *region)
     * }
     */
    public static MethodHandle cairo_region_is_empty$handle() {
        return cairo_region_is_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_region_is_empty(const cairo_region_t *region)
     * }
     */
    public static int cairo_region_is_empty(MemorySegment region) {
        var mh$ = cairo_region_is_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_is_empty", region);
            }
            return (int)mh$.invokeExact(region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_contains_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_contains_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_overlap_t cairo_region_contains_rectangle(const cairo_region_t *region, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static FunctionDescriptor cairo_region_contains_rectangle$descriptor() {
        return cairo_region_contains_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_overlap_t cairo_region_contains_rectangle(const cairo_region_t *region, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static MethodHandle cairo_region_contains_rectangle$handle() {
        return cairo_region_contains_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_overlap_t cairo_region_contains_rectangle(const cairo_region_t *region, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static int cairo_region_contains_rectangle(MemorySegment region, MemorySegment rectangle) {
        var mh$ = cairo_region_contains_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_contains_rectangle", region, rectangle);
            }
            return (int)mh$.invokeExact(region, rectangle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_contains_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_contains_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_region_contains_point(const cairo_region_t *region, int x, int y)
     * }
     */
    public static FunctionDescriptor cairo_region_contains_point$descriptor() {
        return cairo_region_contains_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_region_contains_point(const cairo_region_t *region, int x, int y)
     * }
     */
    public static MethodHandle cairo_region_contains_point$handle() {
        return cairo_region_contains_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_bool_t cairo_region_contains_point(const cairo_region_t *region, int x, int y)
     * }
     */
    public static int cairo_region_contains_point(MemorySegment region, int x, int y) {
        var mh$ = cairo_region_contains_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_contains_point", region, x, y);
            }
            return (int)mh$.invokeExact(region, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_translate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_translate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_region_translate(cairo_region_t *region, int dx, int dy)
     * }
     */
    public static FunctionDescriptor cairo_region_translate$descriptor() {
        return cairo_region_translate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_region_translate(cairo_region_t *region, int dx, int dy)
     * }
     */
    public static MethodHandle cairo_region_translate$handle() {
        return cairo_region_translate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_region_translate(cairo_region_t *region, int dx, int dy)
     * }
     */
    public static void cairo_region_translate(MemorySegment region, int dx, int dy) {
        var mh$ = cairo_region_translate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_translate", region, dx, dy);
            }
            mh$.invokeExact(region, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_subtract {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_subtract"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_subtract(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static FunctionDescriptor cairo_region_subtract$descriptor() {
        return cairo_region_subtract.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_subtract(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static MethodHandle cairo_region_subtract$handle() {
        return cairo_region_subtract.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_subtract(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static int cairo_region_subtract(MemorySegment dst, MemorySegment other) {
        var mh$ = cairo_region_subtract.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_subtract", dst, other);
            }
            return (int)mh$.invokeExact(dst, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_subtract_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_subtract_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_subtract_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static FunctionDescriptor cairo_region_subtract_rectangle$descriptor() {
        return cairo_region_subtract_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_subtract_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static MethodHandle cairo_region_subtract_rectangle$handle() {
        return cairo_region_subtract_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_subtract_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static int cairo_region_subtract_rectangle(MemorySegment dst, MemorySegment rectangle) {
        var mh$ = cairo_region_subtract_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_subtract_rectangle", dst, rectangle);
            }
            return (int)mh$.invokeExact(dst, rectangle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_intersect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_intersect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_intersect(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static FunctionDescriptor cairo_region_intersect$descriptor() {
        return cairo_region_intersect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_intersect(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static MethodHandle cairo_region_intersect$handle() {
        return cairo_region_intersect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_intersect(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static int cairo_region_intersect(MemorySegment dst, MemorySegment other) {
        var mh$ = cairo_region_intersect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_intersect", dst, other);
            }
            return (int)mh$.invokeExact(dst, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_intersect_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_intersect_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_intersect_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static FunctionDescriptor cairo_region_intersect_rectangle$descriptor() {
        return cairo_region_intersect_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_intersect_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static MethodHandle cairo_region_intersect_rectangle$handle() {
        return cairo_region_intersect_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_intersect_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static int cairo_region_intersect_rectangle(MemorySegment dst, MemorySegment rectangle) {
        var mh$ = cairo_region_intersect_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_intersect_rectangle", dst, rectangle);
            }
            return (int)mh$.invokeExact(dst, rectangle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_union {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_union"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_union(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static FunctionDescriptor cairo_region_union$descriptor() {
        return cairo_region_union.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_union(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static MethodHandle cairo_region_union$handle() {
        return cairo_region_union.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_union(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static int cairo_region_union(MemorySegment dst, MemorySegment other) {
        var mh$ = cairo_region_union.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_union", dst, other);
            }
            return (int)mh$.invokeExact(dst, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_union_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_union_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_union_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static FunctionDescriptor cairo_region_union_rectangle$descriptor() {
        return cairo_region_union_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_union_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static MethodHandle cairo_region_union_rectangle$handle() {
        return cairo_region_union_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_union_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static int cairo_region_union_rectangle(MemorySegment dst, MemorySegment rectangle) {
        var mh$ = cairo_region_union_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_union_rectangle", dst, rectangle);
            }
            return (int)mh$.invokeExact(dst, rectangle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_xor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_xor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_xor(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static FunctionDescriptor cairo_region_xor$descriptor() {
        return cairo_region_xor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_xor(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static MethodHandle cairo_region_xor$handle() {
        return cairo_region_xor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_xor(cairo_region_t *dst, const cairo_region_t *other)
     * }
     */
    public static int cairo_region_xor(MemorySegment dst, MemorySegment other) {
        var mh$ = cairo_region_xor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_xor", dst, other);
            }
            return (int)mh$.invokeExact(dst, other);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_region_xor_rectangle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_region_xor_rectangle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_xor_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static FunctionDescriptor cairo_region_xor_rectangle$descriptor() {
        return cairo_region_xor_rectangle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_xor_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static MethodHandle cairo_region_xor_rectangle$handle() {
        return cairo_region_xor_rectangle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_status_t cairo_region_xor_rectangle(cairo_region_t *dst, const cairo_rectangle_int_t *rectangle)
     * }
     */
    public static int cairo_region_xor_rectangle(MemorySegment dst, MemorySegment rectangle) {
        var mh$ = cairo_region_xor_rectangle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_region_xor_rectangle", dst, rectangle);
            }
            return (int)mh$.invokeExact(dst, rectangle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class cairo_debug_reset_static_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("cairo_debug_reset_static_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void cairo_debug_reset_static_data()
     * }
     */
    public static FunctionDescriptor cairo_debug_reset_static_data$descriptor() {
        return cairo_debug_reset_static_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void cairo_debug_reset_static_data()
     * }
     */
    public static MethodHandle cairo_debug_reset_static_data$handle() {
        return cairo_debug_reset_static_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void cairo_debug_reset_static_data()
     * }
     */
    public static void cairo_debug_reset_static_data() {
        var mh$ = cairo_debug_reset_static_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("cairo_debug_reset_static_data");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef struct _GdkAtom *GdkAtom
     * }
     */
    public static final AddressLayout GdkAtom = app_indicator_h.C_POINTER;
    private static final int GDK_LSB_FIRST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LSB_FIRST = 0
     * }
     */
    public static int GDK_LSB_FIRST() {
        return GDK_LSB_FIRST;
    }
    private static final int GDK_MSB_FIRST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MSB_FIRST = 1
     * }
     */
    public static int GDK_MSB_FIRST() {
        return GDK_MSB_FIRST;
    }
    private static final int GDK_SHIFT_MASK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SHIFT_MASK = 1
     * }
     */
    public static int GDK_SHIFT_MASK() {
        return GDK_SHIFT_MASK;
    }
    private static final int GDK_LOCK_MASK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LOCK_MASK = 2
     * }
     */
    public static int GDK_LOCK_MASK() {
        return GDK_LOCK_MASK;
    }
    private static final int GDK_CONTROL_MASK = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CONTROL_MASK = 4
     * }
     */
    public static int GDK_CONTROL_MASK() {
        return GDK_CONTROL_MASK;
    }
    private static final int GDK_MOD1_MASK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MOD1_MASK = 8
     * }
     */
    public static int GDK_MOD1_MASK() {
        return GDK_MOD1_MASK;
    }
    private static final int GDK_MOD2_MASK = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MOD2_MASK = 16
     * }
     */
    public static int GDK_MOD2_MASK() {
        return GDK_MOD2_MASK;
    }
    private static final int GDK_MOD3_MASK = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MOD3_MASK = 32
     * }
     */
    public static int GDK_MOD3_MASK() {
        return GDK_MOD3_MASK;
    }
    private static final int GDK_MOD4_MASK = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MOD4_MASK = 64
     * }
     */
    public static int GDK_MOD4_MASK() {
        return GDK_MOD4_MASK;
    }
    private static final int GDK_MOD5_MASK = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MOD5_MASK = 128
     * }
     */
    public static int GDK_MOD5_MASK() {
        return GDK_MOD5_MASK;
    }
    private static final int GDK_BUTTON1_MASK = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON1_MASK = 256
     * }
     */
    public static int GDK_BUTTON1_MASK() {
        return GDK_BUTTON1_MASK;
    }
    private static final int GDK_BUTTON2_MASK = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON2_MASK = 512
     * }
     */
    public static int GDK_BUTTON2_MASK() {
        return GDK_BUTTON2_MASK;
    }
    private static final int GDK_BUTTON3_MASK = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON3_MASK = 1024
     * }
     */
    public static int GDK_BUTTON3_MASK() {
        return GDK_BUTTON3_MASK;
    }
    private static final int GDK_BUTTON4_MASK = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON4_MASK = 2048
     * }
     */
    public static int GDK_BUTTON4_MASK() {
        return GDK_BUTTON4_MASK;
    }
    private static final int GDK_BUTTON5_MASK = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON5_MASK = 4096
     * }
     */
    public static int GDK_BUTTON5_MASK() {
        return GDK_BUTTON5_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_13_MASK = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_13_MASK = 8192
     * }
     */
    public static int GDK_MODIFIER_RESERVED_13_MASK() {
        return GDK_MODIFIER_RESERVED_13_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_14_MASK = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_14_MASK = 16384
     * }
     */
    public static int GDK_MODIFIER_RESERVED_14_MASK() {
        return GDK_MODIFIER_RESERVED_14_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_15_MASK = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_15_MASK = 32768
     * }
     */
    public static int GDK_MODIFIER_RESERVED_15_MASK() {
        return GDK_MODIFIER_RESERVED_15_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_16_MASK = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_16_MASK = 65536
     * }
     */
    public static int GDK_MODIFIER_RESERVED_16_MASK() {
        return GDK_MODIFIER_RESERVED_16_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_17_MASK = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_17_MASK = 131072
     * }
     */
    public static int GDK_MODIFIER_RESERVED_17_MASK() {
        return GDK_MODIFIER_RESERVED_17_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_18_MASK = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_18_MASK = 262144
     * }
     */
    public static int GDK_MODIFIER_RESERVED_18_MASK() {
        return GDK_MODIFIER_RESERVED_18_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_19_MASK = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_19_MASK = 524288
     * }
     */
    public static int GDK_MODIFIER_RESERVED_19_MASK() {
        return GDK_MODIFIER_RESERVED_19_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_20_MASK = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_20_MASK = 1048576
     * }
     */
    public static int GDK_MODIFIER_RESERVED_20_MASK() {
        return GDK_MODIFIER_RESERVED_20_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_21_MASK = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_21_MASK = 2097152
     * }
     */
    public static int GDK_MODIFIER_RESERVED_21_MASK() {
        return GDK_MODIFIER_RESERVED_21_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_22_MASK = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_22_MASK = 4194304
     * }
     */
    public static int GDK_MODIFIER_RESERVED_22_MASK() {
        return GDK_MODIFIER_RESERVED_22_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_23_MASK = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_23_MASK = 8388608
     * }
     */
    public static int GDK_MODIFIER_RESERVED_23_MASK() {
        return GDK_MODIFIER_RESERVED_23_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_24_MASK = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_24_MASK = 16777216
     * }
     */
    public static int GDK_MODIFIER_RESERVED_24_MASK() {
        return GDK_MODIFIER_RESERVED_24_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_25_MASK = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_25_MASK = 33554432
     * }
     */
    public static int GDK_MODIFIER_RESERVED_25_MASK() {
        return GDK_MODIFIER_RESERVED_25_MASK;
    }
    private static final int GDK_SUPER_MASK = (int)67108864L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SUPER_MASK = 67108864
     * }
     */
    public static int GDK_SUPER_MASK() {
        return GDK_SUPER_MASK;
    }
    private static final int GDK_HYPER_MASK = (int)134217728L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HYPER_MASK = 134217728
     * }
     */
    public static int GDK_HYPER_MASK() {
        return GDK_HYPER_MASK;
    }
    private static final int GDK_META_MASK = (int)268435456L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_META_MASK = 268435456
     * }
     */
    public static int GDK_META_MASK() {
        return GDK_META_MASK;
    }
    private static final int GDK_MODIFIER_RESERVED_29_MASK = (int)536870912L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_RESERVED_29_MASK = 536870912
     * }
     */
    public static int GDK_MODIFIER_RESERVED_29_MASK() {
        return GDK_MODIFIER_RESERVED_29_MASK;
    }
    private static final int GDK_RELEASE_MASK = (int)1073741824L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_RELEASE_MASK = 1073741824
     * }
     */
    public static int GDK_RELEASE_MASK() {
        return GDK_RELEASE_MASK;
    }
    private static final int GDK_MODIFIER_MASK = (int)1543512063L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_MASK = 1543512063
     * }
     */
    public static int GDK_MODIFIER_MASK() {
        return GDK_MODIFIER_MASK;
    }
    private static final int GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR = 0
     * }
     */
    public static int GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR() {
        return GDK_MODIFIER_INTENT_PRIMARY_ACCELERATOR;
    }
    private static final int GDK_MODIFIER_INTENT_CONTEXT_MENU = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_INTENT_CONTEXT_MENU = 1
     * }
     */
    public static int GDK_MODIFIER_INTENT_CONTEXT_MENU() {
        return GDK_MODIFIER_INTENT_CONTEXT_MENU;
    }
    private static final int GDK_MODIFIER_INTENT_EXTEND_SELECTION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_INTENT_EXTEND_SELECTION = 2
     * }
     */
    public static int GDK_MODIFIER_INTENT_EXTEND_SELECTION() {
        return GDK_MODIFIER_INTENT_EXTEND_SELECTION;
    }
    private static final int GDK_MODIFIER_INTENT_MODIFY_SELECTION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_INTENT_MODIFY_SELECTION = 3
     * }
     */
    public static int GDK_MODIFIER_INTENT_MODIFY_SELECTION() {
        return GDK_MODIFIER_INTENT_MODIFY_SELECTION;
    }
    private static final int GDK_MODIFIER_INTENT_NO_TEXT_INPUT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_INTENT_NO_TEXT_INPUT = 4
     * }
     */
    public static int GDK_MODIFIER_INTENT_NO_TEXT_INPUT() {
        return GDK_MODIFIER_INTENT_NO_TEXT_INPUT;
    }
    private static final int GDK_MODIFIER_INTENT_SHIFT_GROUP = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_INTENT_SHIFT_GROUP = 5
     * }
     */
    public static int GDK_MODIFIER_INTENT_SHIFT_GROUP() {
        return GDK_MODIFIER_INTENT_SHIFT_GROUP;
    }
    private static final int GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK = 6
     * }
     */
    public static int GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK() {
        return GDK_MODIFIER_INTENT_DEFAULT_MOD_MASK;
    }
    private static final int GDK_OK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_OK = 0
     * }
     */
    public static int GDK_OK() {
        return GDK_OK;
    }
    private static final int GDK_ERROR = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ERROR = -1
     * }
     */
    public static int GDK_ERROR() {
        return GDK_ERROR;
    }
    private static final int GDK_ERROR_PARAM = (int)-2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ERROR_PARAM = -2
     * }
     */
    public static int GDK_ERROR_PARAM() {
        return GDK_ERROR_PARAM;
    }
    private static final int GDK_ERROR_FILE = (int)-3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ERROR_FILE = -3
     * }
     */
    public static int GDK_ERROR_FILE() {
        return GDK_ERROR_FILE;
    }
    private static final int GDK_ERROR_MEM = (int)-4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ERROR_MEM = -4
     * }
     */
    public static int GDK_ERROR_MEM() {
        return GDK_ERROR_MEM;
    }
    private static final int GDK_GRAB_SUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAB_SUCCESS = 0
     * }
     */
    public static int GDK_GRAB_SUCCESS() {
        return GDK_GRAB_SUCCESS;
    }
    private static final int GDK_GRAB_ALREADY_GRABBED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAB_ALREADY_GRABBED = 1
     * }
     */
    public static int GDK_GRAB_ALREADY_GRABBED() {
        return GDK_GRAB_ALREADY_GRABBED;
    }
    private static final int GDK_GRAB_INVALID_TIME = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAB_INVALID_TIME = 2
     * }
     */
    public static int GDK_GRAB_INVALID_TIME() {
        return GDK_GRAB_INVALID_TIME;
    }
    private static final int GDK_GRAB_NOT_VIEWABLE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAB_NOT_VIEWABLE = 3
     * }
     */
    public static int GDK_GRAB_NOT_VIEWABLE() {
        return GDK_GRAB_NOT_VIEWABLE;
    }
    private static final int GDK_GRAB_FROZEN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAB_FROZEN = 4
     * }
     */
    public static int GDK_GRAB_FROZEN() {
        return GDK_GRAB_FROZEN;
    }
    private static final int GDK_GRAB_FAILED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAB_FAILED = 5
     * }
     */
    public static int GDK_GRAB_FAILED() {
        return GDK_GRAB_FAILED;
    }
    private static final int GDK_OWNERSHIP_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_OWNERSHIP_NONE = 0
     * }
     */
    public static int GDK_OWNERSHIP_NONE() {
        return GDK_OWNERSHIP_NONE;
    }
    private static final int GDK_OWNERSHIP_WINDOW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_OWNERSHIP_WINDOW = 1
     * }
     */
    public static int GDK_OWNERSHIP_WINDOW() {
        return GDK_OWNERSHIP_WINDOW;
    }
    private static final int GDK_OWNERSHIP_APPLICATION = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_OWNERSHIP_APPLICATION = 2
     * }
     */
    public static int GDK_OWNERSHIP_APPLICATION() {
        return GDK_OWNERSHIP_APPLICATION;
    }
    private static final int GDK_EXPOSURE_MASK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_EXPOSURE_MASK = 2
     * }
     */
    public static int GDK_EXPOSURE_MASK() {
        return GDK_EXPOSURE_MASK;
    }
    private static final int GDK_POINTER_MOTION_MASK = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_POINTER_MOTION_MASK = 4
     * }
     */
    public static int GDK_POINTER_MOTION_MASK() {
        return GDK_POINTER_MOTION_MASK;
    }
    private static final int GDK_POINTER_MOTION_HINT_MASK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_POINTER_MOTION_HINT_MASK = 8
     * }
     */
    public static int GDK_POINTER_MOTION_HINT_MASK() {
        return GDK_POINTER_MOTION_HINT_MASK;
    }
    private static final int GDK_BUTTON_MOTION_MASK = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON_MOTION_MASK = 16
     * }
     */
    public static int GDK_BUTTON_MOTION_MASK() {
        return GDK_BUTTON_MOTION_MASK;
    }
    private static final int GDK_BUTTON1_MOTION_MASK = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON1_MOTION_MASK = 32
     * }
     */
    public static int GDK_BUTTON1_MOTION_MASK() {
        return GDK_BUTTON1_MOTION_MASK;
    }
    private static final int GDK_BUTTON2_MOTION_MASK = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON2_MOTION_MASK = 64
     * }
     */
    public static int GDK_BUTTON2_MOTION_MASK() {
        return GDK_BUTTON2_MOTION_MASK;
    }
    private static final int GDK_BUTTON3_MOTION_MASK = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON3_MOTION_MASK = 128
     * }
     */
    public static int GDK_BUTTON3_MOTION_MASK() {
        return GDK_BUTTON3_MOTION_MASK;
    }
    private static final int GDK_BUTTON_PRESS_MASK = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON_PRESS_MASK = 256
     * }
     */
    public static int GDK_BUTTON_PRESS_MASK() {
        return GDK_BUTTON_PRESS_MASK;
    }
    private static final int GDK_BUTTON_RELEASE_MASK = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON_RELEASE_MASK = 512
     * }
     */
    public static int GDK_BUTTON_RELEASE_MASK() {
        return GDK_BUTTON_RELEASE_MASK;
    }
    private static final int GDK_KEY_PRESS_MASK = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_KEY_PRESS_MASK = 1024
     * }
     */
    public static int GDK_KEY_PRESS_MASK() {
        return GDK_KEY_PRESS_MASK;
    }
    private static final int GDK_KEY_RELEASE_MASK = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_KEY_RELEASE_MASK = 2048
     * }
     */
    public static int GDK_KEY_RELEASE_MASK() {
        return GDK_KEY_RELEASE_MASK;
    }
    private static final int GDK_ENTER_NOTIFY_MASK = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ENTER_NOTIFY_MASK = 4096
     * }
     */
    public static int GDK_ENTER_NOTIFY_MASK() {
        return GDK_ENTER_NOTIFY_MASK;
    }
    private static final int GDK_LEAVE_NOTIFY_MASK = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LEAVE_NOTIFY_MASK = 8192
     * }
     */
    public static int GDK_LEAVE_NOTIFY_MASK() {
        return GDK_LEAVE_NOTIFY_MASK;
    }
    private static final int GDK_FOCUS_CHANGE_MASK = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FOCUS_CHANGE_MASK = 16384
     * }
     */
    public static int GDK_FOCUS_CHANGE_MASK() {
        return GDK_FOCUS_CHANGE_MASK;
    }
    private static final int GDK_STRUCTURE_MASK = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_STRUCTURE_MASK = 32768
     * }
     */
    public static int GDK_STRUCTURE_MASK() {
        return GDK_STRUCTURE_MASK;
    }
    private static final int GDK_PROPERTY_CHANGE_MASK = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROPERTY_CHANGE_MASK = 65536
     * }
     */
    public static int GDK_PROPERTY_CHANGE_MASK() {
        return GDK_PROPERTY_CHANGE_MASK;
    }
    private static final int GDK_VISIBILITY_NOTIFY_MASK = (int)131072L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISIBILITY_NOTIFY_MASK = 131072
     * }
     */
    public static int GDK_VISIBILITY_NOTIFY_MASK() {
        return GDK_VISIBILITY_NOTIFY_MASK;
    }
    private static final int GDK_PROXIMITY_IN_MASK = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROXIMITY_IN_MASK = 262144
     * }
     */
    public static int GDK_PROXIMITY_IN_MASK() {
        return GDK_PROXIMITY_IN_MASK;
    }
    private static final int GDK_PROXIMITY_OUT_MASK = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROXIMITY_OUT_MASK = 524288
     * }
     */
    public static int GDK_PROXIMITY_OUT_MASK() {
        return GDK_PROXIMITY_OUT_MASK;
    }
    private static final int GDK_SUBSTRUCTURE_MASK = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SUBSTRUCTURE_MASK = 1048576
     * }
     */
    public static int GDK_SUBSTRUCTURE_MASK() {
        return GDK_SUBSTRUCTURE_MASK;
    }
    private static final int GDK_SCROLL_MASK = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SCROLL_MASK = 2097152
     * }
     */
    public static int GDK_SCROLL_MASK() {
        return GDK_SCROLL_MASK;
    }
    private static final int GDK_TOUCH_MASK = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCH_MASK = 4194304
     * }
     */
    public static int GDK_TOUCH_MASK() {
        return GDK_TOUCH_MASK;
    }
    private static final int GDK_SMOOTH_SCROLL_MASK = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SMOOTH_SCROLL_MASK = 8388608
     * }
     */
    public static int GDK_SMOOTH_SCROLL_MASK() {
        return GDK_SMOOTH_SCROLL_MASK;
    }
    private static final int GDK_TOUCHPAD_GESTURE_MASK = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCHPAD_GESTURE_MASK = 16777216
     * }
     */
    public static int GDK_TOUCHPAD_GESTURE_MASK() {
        return GDK_TOUCHPAD_GESTURE_MASK;
    }
    private static final int GDK_TABLET_PAD_MASK = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TABLET_PAD_MASK = 33554432
     * }
     */
    public static int GDK_TABLET_PAD_MASK() {
        return GDK_TABLET_PAD_MASK;
    }
    private static final int GDK_ALL_EVENTS_MASK = (int)67108862L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ALL_EVENTS_MASK = 67108862
     * }
     */
    public static int GDK_ALL_EVENTS_MASK() {
        return GDK_ALL_EVENTS_MASK;
    }
    private static final int GDK_GL_ERROR_NOT_AVAILABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GL_ERROR_NOT_AVAILABLE = 0
     * }
     */
    public static int GDK_GL_ERROR_NOT_AVAILABLE() {
        return GDK_GL_ERROR_NOT_AVAILABLE;
    }
    private static final int GDK_GL_ERROR_UNSUPPORTED_FORMAT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GL_ERROR_UNSUPPORTED_FORMAT = 1
     * }
     */
    public static int GDK_GL_ERROR_UNSUPPORTED_FORMAT() {
        return GDK_GL_ERROR_UNSUPPORTED_FORMAT;
    }
    private static final int GDK_GL_ERROR_UNSUPPORTED_PROFILE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GL_ERROR_UNSUPPORTED_PROFILE = 2
     * }
     */
    public static int GDK_GL_ERROR_UNSUPPORTED_PROFILE() {
        return GDK_GL_ERROR_UNSUPPORTED_PROFILE;
    }
    private static final int GDK_WINDOW_TYPE_HINT_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_NORMAL = 0
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_NORMAL() {
        return GDK_WINDOW_TYPE_HINT_NORMAL;
    }
    private static final int GDK_WINDOW_TYPE_HINT_DIALOG = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_DIALOG = 1
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_DIALOG() {
        return GDK_WINDOW_TYPE_HINT_DIALOG;
    }
    private static final int GDK_WINDOW_TYPE_HINT_MENU = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_MENU = 2
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_MENU() {
        return GDK_WINDOW_TYPE_HINT_MENU;
    }
    private static final int GDK_WINDOW_TYPE_HINT_TOOLBAR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_TOOLBAR = 3
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_TOOLBAR() {
        return GDK_WINDOW_TYPE_HINT_TOOLBAR;
    }
    private static final int GDK_WINDOW_TYPE_HINT_SPLASHSCREEN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_SPLASHSCREEN = 4
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_SPLASHSCREEN() {
        return GDK_WINDOW_TYPE_HINT_SPLASHSCREEN;
    }
    private static final int GDK_WINDOW_TYPE_HINT_UTILITY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_UTILITY = 5
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_UTILITY() {
        return GDK_WINDOW_TYPE_HINT_UTILITY;
    }
    private static final int GDK_WINDOW_TYPE_HINT_DOCK = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_DOCK = 6
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_DOCK() {
        return GDK_WINDOW_TYPE_HINT_DOCK;
    }
    private static final int GDK_WINDOW_TYPE_HINT_DESKTOP = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_DESKTOP = 7
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_DESKTOP() {
        return GDK_WINDOW_TYPE_HINT_DESKTOP;
    }
    private static final int GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU = 8
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU() {
        return GDK_WINDOW_TYPE_HINT_DROPDOWN_MENU;
    }
    private static final int GDK_WINDOW_TYPE_HINT_POPUP_MENU = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_POPUP_MENU = 9
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_POPUP_MENU() {
        return GDK_WINDOW_TYPE_HINT_POPUP_MENU;
    }
    private static final int GDK_WINDOW_TYPE_HINT_TOOLTIP = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_TOOLTIP = 10
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_TOOLTIP() {
        return GDK_WINDOW_TYPE_HINT_TOOLTIP;
    }
    private static final int GDK_WINDOW_TYPE_HINT_NOTIFICATION = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_NOTIFICATION = 11
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_NOTIFICATION() {
        return GDK_WINDOW_TYPE_HINT_NOTIFICATION;
    }
    private static final int GDK_WINDOW_TYPE_HINT_COMBO = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_COMBO = 12
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_COMBO() {
        return GDK_WINDOW_TYPE_HINT_COMBO;
    }
    private static final int GDK_WINDOW_TYPE_HINT_DND = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TYPE_HINT_DND = 13
     * }
     */
    public static int GDK_WINDOW_TYPE_HINT_DND() {
        return GDK_WINDOW_TYPE_HINT_DND;
    }
    private static final int GDK_AXIS_IGNORE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_IGNORE = 0
     * }
     */
    public static int GDK_AXIS_IGNORE() {
        return GDK_AXIS_IGNORE;
    }
    private static final int GDK_AXIS_X = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_X = 1
     * }
     */
    public static int GDK_AXIS_X() {
        return GDK_AXIS_X;
    }
    private static final int GDK_AXIS_Y = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_Y = 2
     * }
     */
    public static int GDK_AXIS_Y() {
        return GDK_AXIS_Y;
    }
    private static final int GDK_AXIS_PRESSURE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_PRESSURE = 3
     * }
     */
    public static int GDK_AXIS_PRESSURE() {
        return GDK_AXIS_PRESSURE;
    }
    private static final int GDK_AXIS_XTILT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_XTILT = 4
     * }
     */
    public static int GDK_AXIS_XTILT() {
        return GDK_AXIS_XTILT;
    }
    private static final int GDK_AXIS_YTILT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_YTILT = 5
     * }
     */
    public static int GDK_AXIS_YTILT() {
        return GDK_AXIS_YTILT;
    }
    private static final int GDK_AXIS_WHEEL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_WHEEL = 6
     * }
     */
    public static int GDK_AXIS_WHEEL() {
        return GDK_AXIS_WHEEL;
    }
    private static final int GDK_AXIS_DISTANCE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_DISTANCE = 7
     * }
     */
    public static int GDK_AXIS_DISTANCE() {
        return GDK_AXIS_DISTANCE;
    }
    private static final int GDK_AXIS_ROTATION = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_ROTATION = 8
     * }
     */
    public static int GDK_AXIS_ROTATION() {
        return GDK_AXIS_ROTATION;
    }
    private static final int GDK_AXIS_SLIDER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_SLIDER = 9
     * }
     */
    public static int GDK_AXIS_SLIDER() {
        return GDK_AXIS_SLIDER;
    }
    private static final int GDK_AXIS_LAST = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_LAST = 10
     * }
     */
    public static int GDK_AXIS_LAST() {
        return GDK_AXIS_LAST;
    }
    private static final int GDK_AXIS_FLAG_X = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_FLAG_X = 2
     * }
     */
    public static int GDK_AXIS_FLAG_X() {
        return GDK_AXIS_FLAG_X;
    }
    private static final int GDK_AXIS_FLAG_Y = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_FLAG_Y = 4
     * }
     */
    public static int GDK_AXIS_FLAG_Y() {
        return GDK_AXIS_FLAG_Y;
    }
    private static final int GDK_AXIS_FLAG_PRESSURE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_FLAG_PRESSURE = 8
     * }
     */
    public static int GDK_AXIS_FLAG_PRESSURE() {
        return GDK_AXIS_FLAG_PRESSURE;
    }
    private static final int GDK_AXIS_FLAG_XTILT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_FLAG_XTILT = 16
     * }
     */
    public static int GDK_AXIS_FLAG_XTILT() {
        return GDK_AXIS_FLAG_XTILT;
    }
    private static final int GDK_AXIS_FLAG_YTILT = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_FLAG_YTILT = 32
     * }
     */
    public static int GDK_AXIS_FLAG_YTILT() {
        return GDK_AXIS_FLAG_YTILT;
    }
    private static final int GDK_AXIS_FLAG_WHEEL = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_FLAG_WHEEL = 64
     * }
     */
    public static int GDK_AXIS_FLAG_WHEEL() {
        return GDK_AXIS_FLAG_WHEEL;
    }
    private static final int GDK_AXIS_FLAG_DISTANCE = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_FLAG_DISTANCE = 128
     * }
     */
    public static int GDK_AXIS_FLAG_DISTANCE() {
        return GDK_AXIS_FLAG_DISTANCE;
    }
    private static final int GDK_AXIS_FLAG_ROTATION = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_FLAG_ROTATION = 256
     * }
     */
    public static int GDK_AXIS_FLAG_ROTATION() {
        return GDK_AXIS_FLAG_ROTATION;
    }
    private static final int GDK_AXIS_FLAG_SLIDER = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_AXIS_FLAG_SLIDER = 512
     * }
     */
    public static int GDK_AXIS_FLAG_SLIDER() {
        return GDK_AXIS_FLAG_SLIDER;
    }
    private static final int GDK_SOURCE_MOUSE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SOURCE_MOUSE = 0
     * }
     */
    public static int GDK_SOURCE_MOUSE() {
        return GDK_SOURCE_MOUSE;
    }
    private static final int GDK_SOURCE_PEN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SOURCE_PEN = 1
     * }
     */
    public static int GDK_SOURCE_PEN() {
        return GDK_SOURCE_PEN;
    }
    private static final int GDK_SOURCE_ERASER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SOURCE_ERASER = 2
     * }
     */
    public static int GDK_SOURCE_ERASER() {
        return GDK_SOURCE_ERASER;
    }
    private static final int GDK_SOURCE_CURSOR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SOURCE_CURSOR = 3
     * }
     */
    public static int GDK_SOURCE_CURSOR() {
        return GDK_SOURCE_CURSOR;
    }
    private static final int GDK_SOURCE_KEYBOARD = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SOURCE_KEYBOARD = 4
     * }
     */
    public static int GDK_SOURCE_KEYBOARD() {
        return GDK_SOURCE_KEYBOARD;
    }
    private static final int GDK_SOURCE_TOUCHSCREEN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SOURCE_TOUCHSCREEN = 5
     * }
     */
    public static int GDK_SOURCE_TOUCHSCREEN() {
        return GDK_SOURCE_TOUCHSCREEN;
    }
    private static final int GDK_SOURCE_TOUCHPAD = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SOURCE_TOUCHPAD = 6
     * }
     */
    public static int GDK_SOURCE_TOUCHPAD() {
        return GDK_SOURCE_TOUCHPAD;
    }
    private static final int GDK_SOURCE_TRACKPOINT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SOURCE_TRACKPOINT = 7
     * }
     */
    public static int GDK_SOURCE_TRACKPOINT() {
        return GDK_SOURCE_TRACKPOINT;
    }
    private static final int GDK_SOURCE_TABLET_PAD = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SOURCE_TABLET_PAD = 8
     * }
     */
    public static int GDK_SOURCE_TABLET_PAD() {
        return GDK_SOURCE_TABLET_PAD;
    }
    private static final int GDK_MODE_DISABLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODE_DISABLED = 0
     * }
     */
    public static int GDK_MODE_DISABLED() {
        return GDK_MODE_DISABLED;
    }
    private static final int GDK_MODE_SCREEN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODE_SCREEN = 1
     * }
     */
    public static int GDK_MODE_SCREEN() {
        return GDK_MODE_SCREEN;
    }
    private static final int GDK_MODE_WINDOW = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MODE_WINDOW = 2
     * }
     */
    public static int GDK_MODE_WINDOW() {
        return GDK_MODE_WINDOW;
    }
    private static final int GDK_DEVICE_TYPE_MASTER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TYPE_MASTER = 0
     * }
     */
    public static int GDK_DEVICE_TYPE_MASTER() {
        return GDK_DEVICE_TYPE_MASTER;
    }
    private static final int GDK_DEVICE_TYPE_SLAVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TYPE_SLAVE = 1
     * }
     */
    public static int GDK_DEVICE_TYPE_SLAVE() {
        return GDK_DEVICE_TYPE_SLAVE;
    }
    private static final int GDK_DEVICE_TYPE_FLOATING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TYPE_FLOATING = 2
     * }
     */
    public static int GDK_DEVICE_TYPE_FLOATING() {
        return GDK_DEVICE_TYPE_FLOATING;
    }

    private static class gdk_device_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_device_get_type()
     * }
     */
    public static FunctionDescriptor gdk_device_get_type$descriptor() {
        return gdk_device_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_device_get_type()
     * }
     */
    public static MethodHandle gdk_device_get_type$handle() {
        return gdk_device_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_device_get_type()
     * }
     */
    public static long gdk_device_get_type() {
        var mh$ = gdk_device_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gdk_device_get_name(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_name$descriptor() {
        return gdk_device_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gdk_device_get_name(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_name$handle() {
        return gdk_device_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gdk_device_get_name(GdkDevice *device)
     * }
     */
    public static MemorySegment gdk_device_get_name(MemorySegment device) {
        var mh$ = gdk_device_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_name", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_has_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_has_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_has_cursor(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_has_cursor$descriptor() {
        return gdk_device_get_has_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_has_cursor(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_has_cursor$handle() {
        return gdk_device_get_has_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_has_cursor(GdkDevice *device)
     * }
     */
    public static int gdk_device_get_has_cursor(MemorySegment device) {
        var mh$ = gdk_device_get_has_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_has_cursor", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_source {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_source"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkInputSource gdk_device_get_source(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_source$descriptor() {
        return gdk_device_get_source.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkInputSource gdk_device_get_source(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_source$handle() {
        return gdk_device_get_source.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkInputSource gdk_device_get_source(GdkDevice *device)
     * }
     */
    public static int gdk_device_get_source(MemorySegment device) {
        var mh$ = gdk_device_get_source.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_source", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkInputMode gdk_device_get_mode(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_mode$descriptor() {
        return gdk_device_get_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkInputMode gdk_device_get_mode(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_mode$handle() {
        return gdk_device_get_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkInputMode gdk_device_get_mode(GdkDevice *device)
     * }
     */
    public static int gdk_device_get_mode(MemorySegment device) {
        var mh$ = gdk_device_get_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_mode", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_set_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_set_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_set_mode(GdkDevice *device, GdkInputMode mode)
     * }
     */
    public static FunctionDescriptor gdk_device_set_mode$descriptor() {
        return gdk_device_set_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_set_mode(GdkDevice *device, GdkInputMode mode)
     * }
     */
    public static MethodHandle gdk_device_set_mode$handle() {
        return gdk_device_set_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_device_set_mode(GdkDevice *device, GdkInputMode mode)
     * }
     */
    public static int gdk_device_set_mode(MemorySegment device, int mode) {
        var mh$ = gdk_device_set_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_set_mode", device, mode);
            }
            return (int)mh$.invokeExact(device, mode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_n_keys {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_n_keys"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_device_get_n_keys(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_n_keys$descriptor() {
        return gdk_device_get_n_keys.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_device_get_n_keys(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_n_keys$handle() {
        return gdk_device_get_n_keys.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_device_get_n_keys(GdkDevice *device)
     * }
     */
    public static int gdk_device_get_n_keys(MemorySegment device) {
        var mh$ = gdk_device_get_n_keys.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_n_keys", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_key(GdkDevice *device, guint index_, guint *keyval, GdkModifierType *modifiers)
     * }
     */
    public static FunctionDescriptor gdk_device_get_key$descriptor() {
        return gdk_device_get_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_key(GdkDevice *device, guint index_, guint *keyval, GdkModifierType *modifiers)
     * }
     */
    public static MethodHandle gdk_device_get_key$handle() {
        return gdk_device_get_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_key(GdkDevice *device, guint index_, guint *keyval, GdkModifierType *modifiers)
     * }
     */
    public static int gdk_device_get_key(MemorySegment device, int index_, MemorySegment keyval, MemorySegment modifiers) {
        var mh$ = gdk_device_get_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_key", device, index_, keyval, modifiers);
            }
            return (int)mh$.invokeExact(device, index_, keyval, modifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_set_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_set_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_device_set_key(GdkDevice *device, guint index_, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static FunctionDescriptor gdk_device_set_key$descriptor() {
        return gdk_device_set_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_device_set_key(GdkDevice *device, guint index_, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static MethodHandle gdk_device_set_key$handle() {
        return gdk_device_set_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_device_set_key(GdkDevice *device, guint index_, guint keyval, GdkModifierType modifiers)
     * }
     */
    public static void gdk_device_set_key(MemorySegment device, int index_, int keyval, int modifiers) {
        var mh$ = gdk_device_set_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_set_key", device, index_, keyval, modifiers);
            }
            mh$.invokeExact(device, index_, keyval, modifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_axis_use {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_axis_use"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAxisUse gdk_device_get_axis_use(GdkDevice *device, guint index_)
     * }
     */
    public static FunctionDescriptor gdk_device_get_axis_use$descriptor() {
        return gdk_device_get_axis_use.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAxisUse gdk_device_get_axis_use(GdkDevice *device, guint index_)
     * }
     */
    public static MethodHandle gdk_device_get_axis_use$handle() {
        return gdk_device_get_axis_use.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAxisUse gdk_device_get_axis_use(GdkDevice *device, guint index_)
     * }
     */
    public static int gdk_device_get_axis_use(MemorySegment device, int index_) {
        var mh$ = gdk_device_get_axis_use.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_axis_use", device, index_);
            }
            return (int)mh$.invokeExact(device, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_set_axis_use {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_set_axis_use"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_device_set_axis_use(GdkDevice *device, guint index_, GdkAxisUse use)
     * }
     */
    public static FunctionDescriptor gdk_device_set_axis_use$descriptor() {
        return gdk_device_set_axis_use.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_device_set_axis_use(GdkDevice *device, guint index_, GdkAxisUse use)
     * }
     */
    public static MethodHandle gdk_device_set_axis_use$handle() {
        return gdk_device_set_axis_use.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_device_set_axis_use(GdkDevice *device, guint index_, GdkAxisUse use)
     * }
     */
    public static void gdk_device_set_axis_use(MemorySegment device, int index_, int use) {
        var mh$ = gdk_device_set_axis_use.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_set_axis_use", device, index_, use);
            }
            mh$.invokeExact(device, index_, use);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_device_get_state(GdkDevice *device, GdkWindow *window, gdouble *axes, GdkModifierType *mask)
     * }
     */
    public static FunctionDescriptor gdk_device_get_state$descriptor() {
        return gdk_device_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_device_get_state(GdkDevice *device, GdkWindow *window, gdouble *axes, GdkModifierType *mask)
     * }
     */
    public static MethodHandle gdk_device_get_state$handle() {
        return gdk_device_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_device_get_state(GdkDevice *device, GdkWindow *window, gdouble *axes, GdkModifierType *mask)
     * }
     */
    public static void gdk_device_get_state(MemorySegment device, MemorySegment window, MemorySegment axes, MemorySegment mask) {
        var mh$ = gdk_device_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_state", device, window, axes, mask);
            }
            mh$.invokeExact(device, window, axes, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_device_get_position(GdkDevice *device, GdkScreen **screen, gint *x, gint *y)
     * }
     */
    public static FunctionDescriptor gdk_device_get_position$descriptor() {
        return gdk_device_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_device_get_position(GdkDevice *device, GdkScreen **screen, gint *x, gint *y)
     * }
     */
    public static MethodHandle gdk_device_get_position$handle() {
        return gdk_device_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_device_get_position(GdkDevice *device, GdkScreen **screen, gint *x, gint *y)
     * }
     */
    public static void gdk_device_get_position(MemorySegment device, MemorySegment screen, MemorySegment x, MemorySegment y) {
        var mh$ = gdk_device_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_position", device, screen, x, y);
            }
            mh$.invokeExact(device, screen, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_window_at_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_window_at_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_device_get_window_at_position(GdkDevice *device, gint *win_x, gint *win_y)
     * }
     */
    public static FunctionDescriptor gdk_device_get_window_at_position$descriptor() {
        return gdk_device_get_window_at_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_device_get_window_at_position(GdkDevice *device, gint *win_x, gint *win_y)
     * }
     */
    public static MethodHandle gdk_device_get_window_at_position$handle() {
        return gdk_device_get_window_at_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_device_get_window_at_position(GdkDevice *device, gint *win_x, gint *win_y)
     * }
     */
    public static MemorySegment gdk_device_get_window_at_position(MemorySegment device, MemorySegment win_x, MemorySegment win_y) {
        var mh$ = gdk_device_get_window_at_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_window_at_position", device, win_x, win_y);
            }
            return (MemorySegment)mh$.invokeExact(device, win_x, win_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_position_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_position_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_device_get_position_double(GdkDevice *device, GdkScreen **screen, gdouble *x, gdouble *y)
     * }
     */
    public static FunctionDescriptor gdk_device_get_position_double$descriptor() {
        return gdk_device_get_position_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_device_get_position_double(GdkDevice *device, GdkScreen **screen, gdouble *x, gdouble *y)
     * }
     */
    public static MethodHandle gdk_device_get_position_double$handle() {
        return gdk_device_get_position_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_device_get_position_double(GdkDevice *device, GdkScreen **screen, gdouble *x, gdouble *y)
     * }
     */
    public static void gdk_device_get_position_double(MemorySegment device, MemorySegment screen, MemorySegment x, MemorySegment y) {
        var mh$ = gdk_device_get_position_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_position_double", device, screen, x, y);
            }
            mh$.invokeExact(device, screen, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_window_at_position_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_window_at_position_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_device_get_window_at_position_double(GdkDevice *device, gdouble *win_x, gdouble *win_y)
     * }
     */
    public static FunctionDescriptor gdk_device_get_window_at_position_double$descriptor() {
        return gdk_device_get_window_at_position_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_device_get_window_at_position_double(GdkDevice *device, gdouble *win_x, gdouble *win_y)
     * }
     */
    public static MethodHandle gdk_device_get_window_at_position_double$handle() {
        return gdk_device_get_window_at_position_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_device_get_window_at_position_double(GdkDevice *device, gdouble *win_x, gdouble *win_y)
     * }
     */
    public static MemorySegment gdk_device_get_window_at_position_double(MemorySegment device, MemorySegment win_x, MemorySegment win_y) {
        var mh$ = gdk_device_get_window_at_position_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_window_at_position_double", device, win_x, win_y);
            }
            return (MemorySegment)mh$.invokeExact(device, win_x, win_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_history {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_history"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_history(GdkDevice *device, GdkWindow *window, guint32 start, guint32 stop, GdkTimeCoord ***events, gint *n_events)
     * }
     */
    public static FunctionDescriptor gdk_device_get_history$descriptor() {
        return gdk_device_get_history.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_history(GdkDevice *device, GdkWindow *window, guint32 start, guint32 stop, GdkTimeCoord ***events, gint *n_events)
     * }
     */
    public static MethodHandle gdk_device_get_history$handle() {
        return gdk_device_get_history.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_history(GdkDevice *device, GdkWindow *window, guint32 start, guint32 stop, GdkTimeCoord ***events, gint *n_events)
     * }
     */
    public static int gdk_device_get_history(MemorySegment device, MemorySegment window, int start, int stop, MemorySegment events, MemorySegment n_events) {
        var mh$ = gdk_device_get_history.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_history", device, window, start, stop, events, n_events);
            }
            return (int)mh$.invokeExact(device, window, start, stop, events, n_events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_free_history {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_free_history"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_device_free_history(GdkTimeCoord **events, gint n_events)
     * }
     */
    public static FunctionDescriptor gdk_device_free_history$descriptor() {
        return gdk_device_free_history.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_device_free_history(GdkTimeCoord **events, gint n_events)
     * }
     */
    public static MethodHandle gdk_device_free_history$handle() {
        return gdk_device_free_history.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_device_free_history(GdkTimeCoord **events, gint n_events)
     * }
     */
    public static void gdk_device_free_history(MemorySegment events, int n_events) {
        var mh$ = gdk_device_free_history.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_free_history", events, n_events);
            }
            mh$.invokeExact(events, n_events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_n_axes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_n_axes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_device_get_n_axes(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_n_axes$descriptor() {
        return gdk_device_get_n_axes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_device_get_n_axes(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_n_axes$handle() {
        return gdk_device_get_n_axes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_device_get_n_axes(GdkDevice *device)
     * }
     */
    public static int gdk_device_get_n_axes(MemorySegment device) {
        var mh$ = gdk_device_get_n_axes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_n_axes", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_list_axes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_list_axes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_device_list_axes(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_list_axes$descriptor() {
        return gdk_device_list_axes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_device_list_axes(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_list_axes$handle() {
        return gdk_device_list_axes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_device_list_axes(GdkDevice *device)
     * }
     */
    public static MemorySegment gdk_device_list_axes(MemorySegment device) {
        var mh$ = gdk_device_list_axes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_list_axes", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_axis_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_axis_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_axis_value(GdkDevice *device, gdouble *axes, GdkAtom axis_label, gdouble *value)
     * }
     */
    public static FunctionDescriptor gdk_device_get_axis_value$descriptor() {
        return gdk_device_get_axis_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_axis_value(GdkDevice *device, gdouble *axes, GdkAtom axis_label, gdouble *value)
     * }
     */
    public static MethodHandle gdk_device_get_axis_value$handle() {
        return gdk_device_get_axis_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_axis_value(GdkDevice *device, gdouble *axes, GdkAtom axis_label, gdouble *value)
     * }
     */
    public static int gdk_device_get_axis_value(MemorySegment device, MemorySegment axes, MemorySegment axis_label, MemorySegment value) {
        var mh$ = gdk_device_get_axis_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_axis_value", device, axes, axis_label, value);
            }
            return (int)mh$.invokeExact(device, axes, axis_label, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_axis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_axis"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_axis(GdkDevice *device, gdouble *axes, GdkAxisUse use, gdouble *value)
     * }
     */
    public static FunctionDescriptor gdk_device_get_axis$descriptor() {
        return gdk_device_get_axis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_axis(GdkDevice *device, gdouble *axes, GdkAxisUse use, gdouble *value)
     * }
     */
    public static MethodHandle gdk_device_get_axis$handle() {
        return gdk_device_get_axis.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_device_get_axis(GdkDevice *device, gdouble *axes, GdkAxisUse use, gdouble *value)
     * }
     */
    public static int gdk_device_get_axis(MemorySegment device, MemorySegment axes, int use, MemorySegment value) {
        var mh$ = gdk_device_get_axis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_axis", device, axes, use, value);
            }
            return (int)mh$.invokeExact(device, axes, use, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_device_get_display(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_display$descriptor() {
        return gdk_device_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_device_get_display(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_display$handle() {
        return gdk_device_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_device_get_display(GdkDevice *device)
     * }
     */
    public static MemorySegment gdk_device_get_display(MemorySegment device) {
        var mh$ = gdk_device_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_display", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_associated_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_associated_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_device_get_associated_device(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_associated_device$descriptor() {
        return gdk_device_get_associated_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_device_get_associated_device(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_associated_device$handle() {
        return gdk_device_get_associated_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDevice *gdk_device_get_associated_device(GdkDevice *device)
     * }
     */
    public static MemorySegment gdk_device_get_associated_device(MemorySegment device) {
        var mh$ = gdk_device_get_associated_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_associated_device", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_list_slave_devices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_list_slave_devices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_device_list_slave_devices(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_list_slave_devices$descriptor() {
        return gdk_device_list_slave_devices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_device_list_slave_devices(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_list_slave_devices$handle() {
        return gdk_device_list_slave_devices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_device_list_slave_devices(GdkDevice *device)
     * }
     */
    public static MemorySegment gdk_device_list_slave_devices(MemorySegment device) {
        var mh$ = gdk_device_list_slave_devices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_list_slave_devices", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_device_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_device_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDeviceType gdk_device_get_device_type(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_device_type$descriptor() {
        return gdk_device_get_device_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDeviceType gdk_device_get_device_type(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_device_type$handle() {
        return gdk_device_get_device_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDeviceType gdk_device_get_device_type(GdkDevice *device)
     * }
     */
    public static int gdk_device_get_device_type(MemorySegment device) {
        var mh$ = gdk_device_get_device_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_device_type", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_grab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_grab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_device_grab(GdkDevice *device, GdkWindow *window, GdkGrabOwnership grab_ownership, gboolean owner_events, GdkEventMask event_mask, GdkCursor *cursor, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_device_grab$descriptor() {
        return gdk_device_grab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_device_grab(GdkDevice *device, GdkWindow *window, GdkGrabOwnership grab_ownership, gboolean owner_events, GdkEventMask event_mask, GdkCursor *cursor, guint32 time_)
     * }
     */
    public static MethodHandle gdk_device_grab$handle() {
        return gdk_device_grab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkGrabStatus gdk_device_grab(GdkDevice *device, GdkWindow *window, GdkGrabOwnership grab_ownership, gboolean owner_events, GdkEventMask event_mask, GdkCursor *cursor, guint32 time_)
     * }
     */
    public static int gdk_device_grab(MemorySegment device, MemorySegment window, int grab_ownership, int owner_events, int event_mask, MemorySegment cursor, int time_) {
        var mh$ = gdk_device_grab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_grab", device, window, grab_ownership, owner_events, event_mask, cursor, time_);
            }
            return (int)mh$.invokeExact(device, window, grab_ownership, owner_events, event_mask, cursor, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_ungrab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_ungrab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_device_ungrab(GdkDevice *device, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_device_ungrab$descriptor() {
        return gdk_device_ungrab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_device_ungrab(GdkDevice *device, guint32 time_)
     * }
     */
    public static MethodHandle gdk_device_ungrab$handle() {
        return gdk_device_ungrab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_device_ungrab(GdkDevice *device, guint32 time_)
     * }
     */
    public static void gdk_device_ungrab(MemorySegment device, int time_) {
        var mh$ = gdk_device_ungrab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_ungrab", device, time_);
            }
            mh$.invokeExact(device, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_warp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_warp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_device_warp(GdkDevice *device, GdkScreen *screen, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gdk_device_warp$descriptor() {
        return gdk_device_warp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_device_warp(GdkDevice *device, GdkScreen *screen, gint x, gint y)
     * }
     */
    public static MethodHandle gdk_device_warp$handle() {
        return gdk_device_warp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_device_warp(GdkDevice *device, GdkScreen *screen, gint x, gint y)
     * }
     */
    public static void gdk_device_warp(MemorySegment device, MemorySegment screen, int x, int y) {
        var mh$ = gdk_device_warp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_warp", device, screen, x, y);
            }
            mh$.invokeExact(device, screen, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_grab_info_libgtk_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_grab_info_libgtk_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_grab_info_libgtk_only(GdkDisplay *display, GdkDevice *device, GdkWindow **grab_window, gboolean *owner_events)
     * }
     */
    public static FunctionDescriptor gdk_device_grab_info_libgtk_only$descriptor() {
        return gdk_device_grab_info_libgtk_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_device_grab_info_libgtk_only(GdkDisplay *display, GdkDevice *device, GdkWindow **grab_window, gboolean *owner_events)
     * }
     */
    public static MethodHandle gdk_device_grab_info_libgtk_only$handle() {
        return gdk_device_grab_info_libgtk_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_device_grab_info_libgtk_only(GdkDisplay *display, GdkDevice *device, GdkWindow **grab_window, gboolean *owner_events)
     * }
     */
    public static int gdk_device_grab_info_libgtk_only(MemorySegment display, MemorySegment device, MemorySegment grab_window, MemorySegment owner_events) {
        var mh$ = gdk_device_grab_info_libgtk_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_grab_info_libgtk_only", display, device, grab_window, owner_events);
            }
            return (int)mh$.invokeExact(display, device, grab_window, owner_events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_last_event_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_last_event_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_device_get_last_event_window(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_last_event_window$descriptor() {
        return gdk_device_get_last_event_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_device_get_last_event_window(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_last_event_window$handle() {
        return gdk_device_get_last_event_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_device_get_last_event_window(GdkDevice *device)
     * }
     */
    public static MemorySegment gdk_device_get_last_event_window(MemorySegment device) {
        var mh$ = gdk_device_get_last_event_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_last_event_window", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_vendor_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_vendor_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gdk_device_get_vendor_id(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_vendor_id$descriptor() {
        return gdk_device_get_vendor_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gdk_device_get_vendor_id(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_vendor_id$handle() {
        return gdk_device_get_vendor_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gdk_device_get_vendor_id(GdkDevice *device)
     * }
     */
    public static MemorySegment gdk_device_get_vendor_id(MemorySegment device) {
        var mh$ = gdk_device_get_vendor_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_vendor_id", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_product_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_product_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gdk_device_get_product_id(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_product_id$descriptor() {
        return gdk_device_get_product_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gdk_device_get_product_id(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_product_id$handle() {
        return gdk_device_get_product_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gdk_device_get_product_id(GdkDevice *device)
     * }
     */
    public static MemorySegment gdk_device_get_product_id(MemorySegment device) {
        var mh$ = gdk_device_get_product_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_product_id", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_seat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_seat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkSeat *gdk_device_get_seat(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_seat$descriptor() {
        return gdk_device_get_seat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkSeat *gdk_device_get_seat(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_seat$handle() {
        return gdk_device_get_seat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkSeat *gdk_device_get_seat(GdkDevice *device)
     * }
     */
    public static MemorySegment gdk_device_get_seat(MemorySegment device) {
        var mh$ = gdk_device_get_seat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_seat", device);
            }
            return (MemorySegment)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_get_axes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_get_axes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAxisFlags gdk_device_get_axes(GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_device_get_axes$descriptor() {
        return gdk_device_get_axes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAxisFlags gdk_device_get_axes(GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_device_get_axes$handle() {
        return gdk_device_get_axes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAxisFlags gdk_device_get_axes(GdkDevice *device)
     * }
     */
    public static int gdk_device_get_axes(MemorySegment device) {
        var mh$ = gdk_device_get_axes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_get_axes", device);
            }
            return (int)mh$.invokeExact(device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_ACTION_DEFAULT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ACTION_DEFAULT = 1
     * }
     */
    public static int GDK_ACTION_DEFAULT() {
        return GDK_ACTION_DEFAULT;
    }
    private static final int GDK_ACTION_COPY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ACTION_COPY = 2
     * }
     */
    public static int GDK_ACTION_COPY() {
        return GDK_ACTION_COPY;
    }
    private static final int GDK_ACTION_MOVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ACTION_MOVE = 4
     * }
     */
    public static int GDK_ACTION_MOVE() {
        return GDK_ACTION_MOVE;
    }
    private static final int GDK_ACTION_LINK = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ACTION_LINK = 8
     * }
     */
    public static int GDK_ACTION_LINK() {
        return GDK_ACTION_LINK;
    }
    private static final int GDK_ACTION_PRIVATE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ACTION_PRIVATE = 16
     * }
     */
    public static int GDK_ACTION_PRIVATE() {
        return GDK_ACTION_PRIVATE;
    }
    private static final int GDK_ACTION_ASK = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ACTION_ASK = 32
     * }
     */
    public static int GDK_ACTION_ASK() {
        return GDK_ACTION_ASK;
    }
    private static final int GDK_DRAG_CANCEL_NO_TARGET = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_CANCEL_NO_TARGET = 0
     * }
     */
    public static int GDK_DRAG_CANCEL_NO_TARGET() {
        return GDK_DRAG_CANCEL_NO_TARGET;
    }
    private static final int GDK_DRAG_CANCEL_USER_CANCELLED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_CANCEL_USER_CANCELLED = 1
     * }
     */
    public static int GDK_DRAG_CANCEL_USER_CANCELLED() {
        return GDK_DRAG_CANCEL_USER_CANCELLED;
    }
    private static final int GDK_DRAG_CANCEL_ERROR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_CANCEL_ERROR = 2
     * }
     */
    public static int GDK_DRAG_CANCEL_ERROR() {
        return GDK_DRAG_CANCEL_ERROR;
    }
    private static final int GDK_DRAG_PROTO_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_PROTO_NONE = 0
     * }
     */
    public static int GDK_DRAG_PROTO_NONE() {
        return GDK_DRAG_PROTO_NONE;
    }
    private static final int GDK_DRAG_PROTO_MOTIF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_PROTO_MOTIF = 1
     * }
     */
    public static int GDK_DRAG_PROTO_MOTIF() {
        return GDK_DRAG_PROTO_MOTIF;
    }
    private static final int GDK_DRAG_PROTO_XDND = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_PROTO_XDND = 2
     * }
     */
    public static int GDK_DRAG_PROTO_XDND() {
        return GDK_DRAG_PROTO_XDND;
    }
    private static final int GDK_DRAG_PROTO_ROOTWIN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_PROTO_ROOTWIN = 3
     * }
     */
    public static int GDK_DRAG_PROTO_ROOTWIN() {
        return GDK_DRAG_PROTO_ROOTWIN;
    }
    private static final int GDK_DRAG_PROTO_WIN32_DROPFILES = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_PROTO_WIN32_DROPFILES = 4
     * }
     */
    public static int GDK_DRAG_PROTO_WIN32_DROPFILES() {
        return GDK_DRAG_PROTO_WIN32_DROPFILES;
    }
    private static final int GDK_DRAG_PROTO_OLE2 = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_PROTO_OLE2 = 5
     * }
     */
    public static int GDK_DRAG_PROTO_OLE2() {
        return GDK_DRAG_PROTO_OLE2;
    }
    private static final int GDK_DRAG_PROTO_LOCAL = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_PROTO_LOCAL = 6
     * }
     */
    public static int GDK_DRAG_PROTO_LOCAL() {
        return GDK_DRAG_PROTO_LOCAL;
    }
    private static final int GDK_DRAG_PROTO_WAYLAND = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_PROTO_WAYLAND = 7
     * }
     */
    public static int GDK_DRAG_PROTO_WAYLAND() {
        return GDK_DRAG_PROTO_WAYLAND;
    }

    private static class gdk_drag_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_drag_context_get_type()
     * }
     */
    public static FunctionDescriptor gdk_drag_context_get_type$descriptor() {
        return gdk_drag_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_drag_context_get_type()
     * }
     */
    public static MethodHandle gdk_drag_context_get_type$handle() {
        return gdk_drag_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_drag_context_get_type()
     * }
     */
    public static long gdk_drag_context_get_type() {
        var mh$ = gdk_drag_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_set_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_set_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_drag_context_set_device(GdkDragContext *context, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_set_device$descriptor() {
        return gdk_drag_context_set_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_drag_context_set_device(GdkDragContext *context, GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_drag_context_set_device$handle() {
        return gdk_drag_context_set_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_drag_context_set_device(GdkDragContext *context, GdkDevice *device)
     * }
     */
    public static void gdk_drag_context_set_device(MemorySegment context, MemorySegment device) {
        var mh$ = gdk_drag_context_set_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_set_device", context, device);
            }
            mh$.invokeExact(context, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_get_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_get_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_drag_context_get_device(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_get_device$descriptor() {
        return gdk_drag_context_get_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_drag_context_get_device(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_context_get_device$handle() {
        return gdk_drag_context_get_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDevice *gdk_drag_context_get_device(GdkDragContext *context)
     * }
     */
    public static MemorySegment gdk_drag_context_get_device(MemorySegment context) {
        var mh$ = gdk_drag_context_get_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_get_device", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_list_targets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_list_targets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_drag_context_list_targets(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_list_targets$descriptor() {
        return gdk_drag_context_list_targets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_drag_context_list_targets(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_context_list_targets$handle() {
        return gdk_drag_context_list_targets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_drag_context_list_targets(GdkDragContext *context)
     * }
     */
    public static MemorySegment gdk_drag_context_list_targets(MemorySegment context) {
        var mh$ = gdk_drag_context_list_targets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_list_targets", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_get_actions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_get_actions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDragAction gdk_drag_context_get_actions(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_get_actions$descriptor() {
        return gdk_drag_context_get_actions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDragAction gdk_drag_context_get_actions(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_context_get_actions$handle() {
        return gdk_drag_context_get_actions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDragAction gdk_drag_context_get_actions(GdkDragContext *context)
     * }
     */
    public static int gdk_drag_context_get_actions(MemorySegment context) {
        var mh$ = gdk_drag_context_get_actions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_get_actions", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_get_suggested_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_get_suggested_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDragAction gdk_drag_context_get_suggested_action(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_get_suggested_action$descriptor() {
        return gdk_drag_context_get_suggested_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDragAction gdk_drag_context_get_suggested_action(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_context_get_suggested_action$handle() {
        return gdk_drag_context_get_suggested_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDragAction gdk_drag_context_get_suggested_action(GdkDragContext *context)
     * }
     */
    public static int gdk_drag_context_get_suggested_action(MemorySegment context) {
        var mh$ = gdk_drag_context_get_suggested_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_get_suggested_action", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_get_selected_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_get_selected_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDragAction gdk_drag_context_get_selected_action(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_get_selected_action$descriptor() {
        return gdk_drag_context_get_selected_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDragAction gdk_drag_context_get_selected_action(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_context_get_selected_action$handle() {
        return gdk_drag_context_get_selected_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDragAction gdk_drag_context_get_selected_action(GdkDragContext *context)
     * }
     */
    public static int gdk_drag_context_get_selected_action(MemorySegment context) {
        var mh$ = gdk_drag_context_get_selected_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_get_selected_action", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_get_source_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_get_source_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drag_context_get_source_window(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_get_source_window$descriptor() {
        return gdk_drag_context_get_source_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drag_context_get_source_window(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_context_get_source_window$handle() {
        return gdk_drag_context_get_source_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drag_context_get_source_window(GdkDragContext *context)
     * }
     */
    public static MemorySegment gdk_drag_context_get_source_window(MemorySegment context) {
        var mh$ = gdk_drag_context_get_source_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_get_source_window", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_get_dest_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_get_dest_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drag_context_get_dest_window(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_get_dest_window$descriptor() {
        return gdk_drag_context_get_dest_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drag_context_get_dest_window(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_context_get_dest_window$handle() {
        return gdk_drag_context_get_dest_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drag_context_get_dest_window(GdkDragContext *context)
     * }
     */
    public static MemorySegment gdk_drag_context_get_dest_window(MemorySegment context) {
        var mh$ = gdk_drag_context_get_dest_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_get_dest_window", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_get_protocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_get_protocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDragProtocol gdk_drag_context_get_protocol(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_get_protocol$descriptor() {
        return gdk_drag_context_get_protocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDragProtocol gdk_drag_context_get_protocol(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_context_get_protocol$handle() {
        return gdk_drag_context_get_protocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDragProtocol gdk_drag_context_get_protocol(GdkDragContext *context)
     * }
     */
    public static int gdk_drag_context_get_protocol(MemorySegment context) {
        var mh$ = gdk_drag_context_get_protocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_get_protocol", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_drag_status(GdkDragContext *context, GdkDragAction action, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_drag_status$descriptor() {
        return gdk_drag_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_drag_status(GdkDragContext *context, GdkDragAction action, guint32 time_)
     * }
     */
    public static MethodHandle gdk_drag_status$handle() {
        return gdk_drag_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_drag_status(GdkDragContext *context, GdkDragAction action, guint32 time_)
     * }
     */
    public static void gdk_drag_status(MemorySegment context, int action, int time_) {
        var mh$ = gdk_drag_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_status", context, action, time_);
            }
            mh$.invokeExact(context, action, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drop_reply {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drop_reply"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_drop_reply(GdkDragContext *context, gboolean accepted, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_drop_reply$descriptor() {
        return gdk_drop_reply.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_drop_reply(GdkDragContext *context, gboolean accepted, guint32 time_)
     * }
     */
    public static MethodHandle gdk_drop_reply$handle() {
        return gdk_drop_reply.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_drop_reply(GdkDragContext *context, gboolean accepted, guint32 time_)
     * }
     */
    public static void gdk_drop_reply(MemorySegment context, int accepted, int time_) {
        var mh$ = gdk_drop_reply.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drop_reply", context, accepted, time_);
            }
            mh$.invokeExact(context, accepted, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drop_finish {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drop_finish"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_drop_finish(GdkDragContext *context, gboolean success, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_drop_finish$descriptor() {
        return gdk_drop_finish.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_drop_finish(GdkDragContext *context, gboolean success, guint32 time_)
     * }
     */
    public static MethodHandle gdk_drop_finish$handle() {
        return gdk_drop_finish.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_drop_finish(GdkDragContext *context, gboolean success, guint32 time_)
     * }
     */
    public static void gdk_drop_finish(MemorySegment context, int success, int time_) {
        var mh$ = gdk_drop_finish.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drop_finish", context, success, time_);
            }
            mh$.invokeExact(context, success, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_get_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_get_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkAtom gdk_drag_get_selection(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_get_selection$descriptor() {
        return gdk_drag_get_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkAtom gdk_drag_get_selection(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_get_selection$handle() {
        return gdk_drag_get_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkAtom gdk_drag_get_selection(GdkDragContext *context)
     * }
     */
    public static MemorySegment gdk_drag_get_selection(MemorySegment context) {
        var mh$ = gdk_drag_get_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_get_selection", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_begin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_begin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDragContext *gdk_drag_begin(GdkWindow *window, GList *targets)
     * }
     */
    public static FunctionDescriptor gdk_drag_begin$descriptor() {
        return gdk_drag_begin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDragContext *gdk_drag_begin(GdkWindow *window, GList *targets)
     * }
     */
    public static MethodHandle gdk_drag_begin$handle() {
        return gdk_drag_begin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDragContext *gdk_drag_begin(GdkWindow *window, GList *targets)
     * }
     */
    public static MemorySegment gdk_drag_begin(MemorySegment window, MemorySegment targets) {
        var mh$ = gdk_drag_begin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_begin", window, targets);
            }
            return (MemorySegment)mh$.invokeExact(window, targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_begin_for_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_begin_for_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDragContext *gdk_drag_begin_for_device(GdkWindow *window, GdkDevice *device, GList *targets)
     * }
     */
    public static FunctionDescriptor gdk_drag_begin_for_device$descriptor() {
        return gdk_drag_begin_for_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDragContext *gdk_drag_begin_for_device(GdkWindow *window, GdkDevice *device, GList *targets)
     * }
     */
    public static MethodHandle gdk_drag_begin_for_device$handle() {
        return gdk_drag_begin_for_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDragContext *gdk_drag_begin_for_device(GdkWindow *window, GdkDevice *device, GList *targets)
     * }
     */
    public static MemorySegment gdk_drag_begin_for_device(MemorySegment window, MemorySegment device, MemorySegment targets) {
        var mh$ = gdk_drag_begin_for_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_begin_for_device", window, device, targets);
            }
            return (MemorySegment)mh$.invokeExact(window, device, targets);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_begin_from_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_begin_from_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDragContext *gdk_drag_begin_from_point(GdkWindow *window, GdkDevice *device, GList *targets, gint x_root, gint y_root)
     * }
     */
    public static FunctionDescriptor gdk_drag_begin_from_point$descriptor() {
        return gdk_drag_begin_from_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDragContext *gdk_drag_begin_from_point(GdkWindow *window, GdkDevice *device, GList *targets, gint x_root, gint y_root)
     * }
     */
    public static MethodHandle gdk_drag_begin_from_point$handle() {
        return gdk_drag_begin_from_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDragContext *gdk_drag_begin_from_point(GdkWindow *window, GdkDevice *device, GList *targets, gint x_root, gint y_root)
     * }
     */
    public static MemorySegment gdk_drag_begin_from_point(MemorySegment window, MemorySegment device, MemorySegment targets, int x_root, int y_root) {
        var mh$ = gdk_drag_begin_from_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_begin_from_point", window, device, targets, x_root, y_root);
            }
            return (MemorySegment)mh$.invokeExact(window, device, targets, x_root, y_root);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_find_window_for_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_find_window_for_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_drag_find_window_for_screen(GdkDragContext *context, GdkWindow *drag_window, GdkScreen *screen, gint x_root, gint y_root, GdkWindow **dest_window, GdkDragProtocol *protocol)
     * }
     */
    public static FunctionDescriptor gdk_drag_find_window_for_screen$descriptor() {
        return gdk_drag_find_window_for_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_drag_find_window_for_screen(GdkDragContext *context, GdkWindow *drag_window, GdkScreen *screen, gint x_root, gint y_root, GdkWindow **dest_window, GdkDragProtocol *protocol)
     * }
     */
    public static MethodHandle gdk_drag_find_window_for_screen$handle() {
        return gdk_drag_find_window_for_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_drag_find_window_for_screen(GdkDragContext *context, GdkWindow *drag_window, GdkScreen *screen, gint x_root, gint y_root, GdkWindow **dest_window, GdkDragProtocol *protocol)
     * }
     */
    public static void gdk_drag_find_window_for_screen(MemorySegment context, MemorySegment drag_window, MemorySegment screen, int x_root, int y_root, MemorySegment dest_window, MemorySegment protocol) {
        var mh$ = gdk_drag_find_window_for_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_find_window_for_screen", context, drag_window, screen, x_root, y_root, dest_window, protocol);
            }
            mh$.invokeExact(context, drag_window, screen, x_root, y_root, dest_window, protocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_motion {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_motion"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_drag_motion(GdkDragContext *context, GdkWindow *dest_window, GdkDragProtocol protocol, gint x_root, gint y_root, GdkDragAction suggested_action, GdkDragAction possible_actions, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_drag_motion$descriptor() {
        return gdk_drag_motion.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_drag_motion(GdkDragContext *context, GdkWindow *dest_window, GdkDragProtocol protocol, gint x_root, gint y_root, GdkDragAction suggested_action, GdkDragAction possible_actions, guint32 time_)
     * }
     */
    public static MethodHandle gdk_drag_motion$handle() {
        return gdk_drag_motion.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_drag_motion(GdkDragContext *context, GdkWindow *dest_window, GdkDragProtocol protocol, gint x_root, gint y_root, GdkDragAction suggested_action, GdkDragAction possible_actions, guint32 time_)
     * }
     */
    public static int gdk_drag_motion(MemorySegment context, MemorySegment dest_window, int protocol, int x_root, int y_root, int suggested_action, int possible_actions, int time_) {
        var mh$ = gdk_drag_motion.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_motion", context, dest_window, protocol, x_root, y_root, suggested_action, possible_actions, time_);
            }
            return (int)mh$.invokeExact(context, dest_window, protocol, x_root, y_root, suggested_action, possible_actions, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_drop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_drop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_drag_drop(GdkDragContext *context, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_drag_drop$descriptor() {
        return gdk_drag_drop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_drag_drop(GdkDragContext *context, guint32 time_)
     * }
     */
    public static MethodHandle gdk_drag_drop$handle() {
        return gdk_drag_drop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_drag_drop(GdkDragContext *context, guint32 time_)
     * }
     */
    public static void gdk_drag_drop(MemorySegment context, int time_) {
        var mh$ = gdk_drag_drop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_drop", context, time_);
            }
            mh$.invokeExact(context, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_abort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_abort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_drag_abort(GdkDragContext *context, guint32 time_)
     * }
     */
    public static FunctionDescriptor gdk_drag_abort$descriptor() {
        return gdk_drag_abort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_drag_abort(GdkDragContext *context, guint32 time_)
     * }
     */
    public static MethodHandle gdk_drag_abort$handle() {
        return gdk_drag_abort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_drag_abort(GdkDragContext *context, guint32 time_)
     * }
     */
    public static void gdk_drag_abort(MemorySegment context, int time_) {
        var mh$ = gdk_drag_abort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_abort", context, time_);
            }
            mh$.invokeExact(context, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_drop_succeeded {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_drop_succeeded"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_drag_drop_succeeded(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_drop_succeeded$descriptor() {
        return gdk_drag_drop_succeeded.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_drag_drop_succeeded(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_drop_succeeded$handle() {
        return gdk_drag_drop_succeeded.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_drag_drop_succeeded(GdkDragContext *context)
     * }
     */
    public static int gdk_drag_drop_succeeded(MemorySegment context) {
        var mh$ = gdk_drag_drop_succeeded.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_drop_succeeded", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_drop_done {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_drop_done"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_drag_drop_done(GdkDragContext *context, gboolean success)
     * }
     */
    public static FunctionDescriptor gdk_drag_drop_done$descriptor() {
        return gdk_drag_drop_done.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_drag_drop_done(GdkDragContext *context, gboolean success)
     * }
     */
    public static MethodHandle gdk_drag_drop_done$handle() {
        return gdk_drag_drop_done.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_drag_drop_done(GdkDragContext *context, gboolean success)
     * }
     */
    public static void gdk_drag_drop_done(MemorySegment context, int success) {
        var mh$ = gdk_drag_drop_done.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_drop_done", context, success);
            }
            mh$.invokeExact(context, success);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_get_drag_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_get_drag_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drag_context_get_drag_window(GdkDragContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_get_drag_window$descriptor() {
        return gdk_drag_context_get_drag_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drag_context_get_drag_window(GdkDragContext *context)
     * }
     */
    public static MethodHandle gdk_drag_context_get_drag_window$handle() {
        return gdk_drag_context_get_drag_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drag_context_get_drag_window(GdkDragContext *context)
     * }
     */
    public static MemorySegment gdk_drag_context_get_drag_window(MemorySegment context) {
        var mh$ = gdk_drag_context_get_drag_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_get_drag_window", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_set_hotspot {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_set_hotspot"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_drag_context_set_hotspot(GdkDragContext *context, gint hot_x, gint hot_y)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_set_hotspot$descriptor() {
        return gdk_drag_context_set_hotspot.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_drag_context_set_hotspot(GdkDragContext *context, gint hot_x, gint hot_y)
     * }
     */
    public static MethodHandle gdk_drag_context_set_hotspot$handle() {
        return gdk_drag_context_set_hotspot.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_drag_context_set_hotspot(GdkDragContext *context, gint hot_x, gint hot_y)
     * }
     */
    public static void gdk_drag_context_set_hotspot(MemorySegment context, int hot_x, int hot_y) {
        var mh$ = gdk_drag_context_set_hotspot.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_set_hotspot", context, hot_x, hot_y);
            }
            mh$.invokeExact(context, hot_x, hot_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drag_context_manage_dnd {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drag_context_manage_dnd"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_drag_context_manage_dnd(GdkDragContext *context, GdkWindow *ipc_window, GdkDragAction actions)
     * }
     */
    public static FunctionDescriptor gdk_drag_context_manage_dnd$descriptor() {
        return gdk_drag_context_manage_dnd.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_drag_context_manage_dnd(GdkDragContext *context, GdkWindow *ipc_window, GdkDragAction actions)
     * }
     */
    public static MethodHandle gdk_drag_context_manage_dnd$handle() {
        return gdk_drag_context_manage_dnd.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_drag_context_manage_dnd(GdkDragContext *context, GdkWindow *ipc_window, GdkDragAction actions)
     * }
     */
    public static int gdk_drag_context_manage_dnd(MemorySegment context, MemorySegment ipc_window, int actions) {
        var mh$ = gdk_drag_context_manage_dnd.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drag_context_manage_dnd", context, ipc_window, actions);
            }
            return (int)mh$.invokeExact(context, ipc_window, actions);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_DEVICE_TOOL_TYPE_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TOOL_TYPE_UNKNOWN = 0
     * }
     */
    public static int GDK_DEVICE_TOOL_TYPE_UNKNOWN() {
        return GDK_DEVICE_TOOL_TYPE_UNKNOWN;
    }
    private static final int GDK_DEVICE_TOOL_TYPE_PEN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TOOL_TYPE_PEN = 1
     * }
     */
    public static int GDK_DEVICE_TOOL_TYPE_PEN() {
        return GDK_DEVICE_TOOL_TYPE_PEN;
    }
    private static final int GDK_DEVICE_TOOL_TYPE_ERASER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TOOL_TYPE_ERASER = 2
     * }
     */
    public static int GDK_DEVICE_TOOL_TYPE_ERASER() {
        return GDK_DEVICE_TOOL_TYPE_ERASER;
    }
    private static final int GDK_DEVICE_TOOL_TYPE_BRUSH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TOOL_TYPE_BRUSH = 3
     * }
     */
    public static int GDK_DEVICE_TOOL_TYPE_BRUSH() {
        return GDK_DEVICE_TOOL_TYPE_BRUSH;
    }
    private static final int GDK_DEVICE_TOOL_TYPE_PENCIL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TOOL_TYPE_PENCIL = 4
     * }
     */
    public static int GDK_DEVICE_TOOL_TYPE_PENCIL() {
        return GDK_DEVICE_TOOL_TYPE_PENCIL;
    }
    private static final int GDK_DEVICE_TOOL_TYPE_AIRBRUSH = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TOOL_TYPE_AIRBRUSH = 5
     * }
     */
    public static int GDK_DEVICE_TOOL_TYPE_AIRBRUSH() {
        return GDK_DEVICE_TOOL_TYPE_AIRBRUSH;
    }
    private static final int GDK_DEVICE_TOOL_TYPE_MOUSE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TOOL_TYPE_MOUSE = 6
     * }
     */
    public static int GDK_DEVICE_TOOL_TYPE_MOUSE() {
        return GDK_DEVICE_TOOL_TYPE_MOUSE;
    }
    private static final int GDK_DEVICE_TOOL_TYPE_LENS = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DEVICE_TOOL_TYPE_LENS = 7
     * }
     */
    public static int GDK_DEVICE_TOOL_TYPE_LENS() {
        return GDK_DEVICE_TOOL_TYPE_LENS;
    }

    private static class gdk_device_tool_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_tool_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_device_tool_get_type()
     * }
     */
    public static FunctionDescriptor gdk_device_tool_get_type$descriptor() {
        return gdk_device_tool_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_device_tool_get_type()
     * }
     */
    public static MethodHandle gdk_device_tool_get_type$handle() {
        return gdk_device_tool_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_device_tool_get_type()
     * }
     */
    public static long gdk_device_tool_get_type() {
        var mh$ = gdk_device_tool_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_tool_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_tool_get_serial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_tool_get_serial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 gdk_device_tool_get_serial(GdkDeviceTool *tool)
     * }
     */
    public static FunctionDescriptor gdk_device_tool_get_serial$descriptor() {
        return gdk_device_tool_get_serial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 gdk_device_tool_get_serial(GdkDeviceTool *tool)
     * }
     */
    public static MethodHandle gdk_device_tool_get_serial$handle() {
        return gdk_device_tool_get_serial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint64 gdk_device_tool_get_serial(GdkDeviceTool *tool)
     * }
     */
    public static long gdk_device_tool_get_serial(MemorySegment tool) {
        var mh$ = gdk_device_tool_get_serial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_tool_get_serial", tool);
            }
            return (long)mh$.invokeExact(tool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_tool_get_hardware_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_tool_get_hardware_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint64 gdk_device_tool_get_hardware_id(GdkDeviceTool *tool)
     * }
     */
    public static FunctionDescriptor gdk_device_tool_get_hardware_id$descriptor() {
        return gdk_device_tool_get_hardware_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint64 gdk_device_tool_get_hardware_id(GdkDeviceTool *tool)
     * }
     */
    public static MethodHandle gdk_device_tool_get_hardware_id$handle() {
        return gdk_device_tool_get_hardware_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint64 gdk_device_tool_get_hardware_id(GdkDeviceTool *tool)
     * }
     */
    public static long gdk_device_tool_get_hardware_id(MemorySegment tool) {
        var mh$ = gdk_device_tool_get_hardware_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_tool_get_hardware_id", tool);
            }
            return (long)mh$.invokeExact(tool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_tool_get_tool_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_tool_get_tool_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDeviceToolType gdk_device_tool_get_tool_type(GdkDeviceTool *tool)
     * }
     */
    public static FunctionDescriptor gdk_device_tool_get_tool_type$descriptor() {
        return gdk_device_tool_get_tool_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDeviceToolType gdk_device_tool_get_tool_type(GdkDeviceTool *tool)
     * }
     */
    public static MethodHandle gdk_device_tool_get_tool_type$handle() {
        return gdk_device_tool_get_tool_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDeviceToolType gdk_device_tool_get_tool_type(GdkDeviceTool *tool)
     * }
     */
    public static int gdk_device_tool_get_tool_type(MemorySegment tool) {
        var mh$ = gdk_device_tool_get_tool_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_tool_get_tool_type", tool);
            }
            return (int)mh$.invokeExact(tool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_FILTER_CONTINUE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FILTER_CONTINUE = 0
     * }
     */
    public static int GDK_FILTER_CONTINUE() {
        return GDK_FILTER_CONTINUE;
    }
    private static final int GDK_FILTER_TRANSLATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FILTER_TRANSLATE = 1
     * }
     */
    public static int GDK_FILTER_TRANSLATE() {
        return GDK_FILTER_TRANSLATE;
    }
    private static final int GDK_FILTER_REMOVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FILTER_REMOVE = 2
     * }
     */
    public static int GDK_FILTER_REMOVE() {
        return GDK_FILTER_REMOVE;
    }
    private static final int GDK_NOTHING = (int)-1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_NOTHING = -1
     * }
     */
    public static int GDK_NOTHING() {
        return GDK_NOTHING;
    }
    private static final int GDK_DELETE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DELETE = 0
     * }
     */
    public static int GDK_DELETE() {
        return GDK_DELETE;
    }
    private static final int GDK_DESTROY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DESTROY = 1
     * }
     */
    public static int GDK_DESTROY() {
        return GDK_DESTROY;
    }
    private static final int GDK_EXPOSE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_EXPOSE = 2
     * }
     */
    public static int GDK_EXPOSE() {
        return GDK_EXPOSE;
    }
    private static final int GDK_MOTION_NOTIFY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MOTION_NOTIFY = 3
     * }
     */
    public static int GDK_MOTION_NOTIFY() {
        return GDK_MOTION_NOTIFY;
    }
    private static final int GDK_BUTTON_PRESS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON_PRESS = 4
     * }
     */
    public static int GDK_BUTTON_PRESS() {
        return GDK_BUTTON_PRESS;
    }
    private static final int GDK_2BUTTON_PRESS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_2BUTTON_PRESS = 5
     * }
     */
    public static int GDK_2BUTTON_PRESS() {
        return GDK_2BUTTON_PRESS;
    }
    private static final int GDK_DOUBLE_BUTTON_PRESS = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DOUBLE_BUTTON_PRESS = 5
     * }
     */
    public static int GDK_DOUBLE_BUTTON_PRESS() {
        return GDK_DOUBLE_BUTTON_PRESS;
    }
    private static final int GDK_3BUTTON_PRESS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_3BUTTON_PRESS = 6
     * }
     */
    public static int GDK_3BUTTON_PRESS() {
        return GDK_3BUTTON_PRESS;
    }
    private static final int GDK_TRIPLE_BUTTON_PRESS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TRIPLE_BUTTON_PRESS = 6
     * }
     */
    public static int GDK_TRIPLE_BUTTON_PRESS() {
        return GDK_TRIPLE_BUTTON_PRESS;
    }
    private static final int GDK_BUTTON_RELEASE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_BUTTON_RELEASE = 7
     * }
     */
    public static int GDK_BUTTON_RELEASE() {
        return GDK_BUTTON_RELEASE;
    }
    private static final int GDK_KEY_PRESS = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_KEY_PRESS = 8
     * }
     */
    public static int GDK_KEY_PRESS() {
        return GDK_KEY_PRESS;
    }
    private static final int GDK_KEY_RELEASE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_KEY_RELEASE = 9
     * }
     */
    public static int GDK_KEY_RELEASE() {
        return GDK_KEY_RELEASE;
    }
    private static final int GDK_ENTER_NOTIFY = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ENTER_NOTIFY = 10
     * }
     */
    public static int GDK_ENTER_NOTIFY() {
        return GDK_ENTER_NOTIFY;
    }
    private static final int GDK_LEAVE_NOTIFY = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_LEAVE_NOTIFY = 11
     * }
     */
    public static int GDK_LEAVE_NOTIFY() {
        return GDK_LEAVE_NOTIFY;
    }
    private static final int GDK_FOCUS_CHANGE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FOCUS_CHANGE = 12
     * }
     */
    public static int GDK_FOCUS_CHANGE() {
        return GDK_FOCUS_CHANGE;
    }
    private static final int GDK_CONFIGURE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CONFIGURE = 13
     * }
     */
    public static int GDK_CONFIGURE() {
        return GDK_CONFIGURE;
    }
    private static final int GDK_MAP = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_MAP = 14
     * }
     */
    public static int GDK_MAP() {
        return GDK_MAP;
    }
    private static final int GDK_UNMAP = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_UNMAP = 15
     * }
     */
    public static int GDK_UNMAP() {
        return GDK_UNMAP;
    }
    private static final int GDK_PROPERTY_NOTIFY = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROPERTY_NOTIFY = 16
     * }
     */
    public static int GDK_PROPERTY_NOTIFY() {
        return GDK_PROPERTY_NOTIFY;
    }
    private static final int GDK_SELECTION_CLEAR = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SELECTION_CLEAR = 17
     * }
     */
    public static int GDK_SELECTION_CLEAR() {
        return GDK_SELECTION_CLEAR;
    }
    private static final int GDK_SELECTION_REQUEST = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SELECTION_REQUEST = 18
     * }
     */
    public static int GDK_SELECTION_REQUEST() {
        return GDK_SELECTION_REQUEST;
    }
    private static final int GDK_SELECTION_NOTIFY = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SELECTION_NOTIFY = 19
     * }
     */
    public static int GDK_SELECTION_NOTIFY() {
        return GDK_SELECTION_NOTIFY;
    }
    private static final int GDK_PROXIMITY_IN = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROXIMITY_IN = 20
     * }
     */
    public static int GDK_PROXIMITY_IN() {
        return GDK_PROXIMITY_IN;
    }
    private static final int GDK_PROXIMITY_OUT = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROXIMITY_OUT = 21
     * }
     */
    public static int GDK_PROXIMITY_OUT() {
        return GDK_PROXIMITY_OUT;
    }
    private static final int GDK_DRAG_ENTER = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_ENTER = 22
     * }
     */
    public static int GDK_DRAG_ENTER() {
        return GDK_DRAG_ENTER;
    }
    private static final int GDK_DRAG_LEAVE = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_LEAVE = 23
     * }
     */
    public static int GDK_DRAG_LEAVE() {
        return GDK_DRAG_LEAVE;
    }
    private static final int GDK_DRAG_MOTION = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_MOTION = 24
     * }
     */
    public static int GDK_DRAG_MOTION() {
        return GDK_DRAG_MOTION;
    }
    private static final int GDK_DRAG_STATUS = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DRAG_STATUS = 25
     * }
     */
    public static int GDK_DRAG_STATUS() {
        return GDK_DRAG_STATUS;
    }
    private static final int GDK_DROP_START = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DROP_START = 26
     * }
     */
    public static int GDK_DROP_START() {
        return GDK_DROP_START;
    }
    private static final int GDK_DROP_FINISHED = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DROP_FINISHED = 27
     * }
     */
    public static int GDK_DROP_FINISHED() {
        return GDK_DROP_FINISHED;
    }
    private static final int GDK_CLIENT_EVENT = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CLIENT_EVENT = 28
     * }
     */
    public static int GDK_CLIENT_EVENT() {
        return GDK_CLIENT_EVENT;
    }
    private static final int GDK_VISIBILITY_NOTIFY = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISIBILITY_NOTIFY = 29
     * }
     */
    public static int GDK_VISIBILITY_NOTIFY() {
        return GDK_VISIBILITY_NOTIFY;
    }
    private static final int GDK_SCROLL = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SCROLL = 31
     * }
     */
    public static int GDK_SCROLL() {
        return GDK_SCROLL;
    }
    private static final int GDK_WINDOW_STATE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE = 32
     * }
     */
    public static int GDK_WINDOW_STATE() {
        return GDK_WINDOW_STATE;
    }
    private static final int GDK_SETTING = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SETTING = 33
     * }
     */
    public static int GDK_SETTING() {
        return GDK_SETTING;
    }
    private static final int GDK_OWNER_CHANGE = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_OWNER_CHANGE = 34
     * }
     */
    public static int GDK_OWNER_CHANGE() {
        return GDK_OWNER_CHANGE;
    }
    private static final int GDK_GRAB_BROKEN = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAB_BROKEN = 35
     * }
     */
    public static int GDK_GRAB_BROKEN() {
        return GDK_GRAB_BROKEN;
    }
    private static final int GDK_DAMAGE = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DAMAGE = 36
     * }
     */
    public static int GDK_DAMAGE() {
        return GDK_DAMAGE;
    }
    private static final int GDK_TOUCH_BEGIN = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCH_BEGIN = 37
     * }
     */
    public static int GDK_TOUCH_BEGIN() {
        return GDK_TOUCH_BEGIN;
    }
    private static final int GDK_TOUCH_UPDATE = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCH_UPDATE = 38
     * }
     */
    public static int GDK_TOUCH_UPDATE() {
        return GDK_TOUCH_UPDATE;
    }
    private static final int GDK_TOUCH_END = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCH_END = 39
     * }
     */
    public static int GDK_TOUCH_END() {
        return GDK_TOUCH_END;
    }
    private static final int GDK_TOUCH_CANCEL = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCH_CANCEL = 40
     * }
     */
    public static int GDK_TOUCH_CANCEL() {
        return GDK_TOUCH_CANCEL;
    }
    private static final int GDK_TOUCHPAD_SWIPE = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCHPAD_SWIPE = 41
     * }
     */
    public static int GDK_TOUCHPAD_SWIPE() {
        return GDK_TOUCHPAD_SWIPE;
    }
    private static final int GDK_TOUCHPAD_PINCH = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCHPAD_PINCH = 42
     * }
     */
    public static int GDK_TOUCHPAD_PINCH() {
        return GDK_TOUCHPAD_PINCH;
    }
    private static final int GDK_PAD_BUTTON_PRESS = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PAD_BUTTON_PRESS = 43
     * }
     */
    public static int GDK_PAD_BUTTON_PRESS() {
        return GDK_PAD_BUTTON_PRESS;
    }
    private static final int GDK_PAD_BUTTON_RELEASE = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PAD_BUTTON_RELEASE = 44
     * }
     */
    public static int GDK_PAD_BUTTON_RELEASE() {
        return GDK_PAD_BUTTON_RELEASE;
    }
    private static final int GDK_PAD_RING = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PAD_RING = 45
     * }
     */
    public static int GDK_PAD_RING() {
        return GDK_PAD_RING;
    }
    private static final int GDK_PAD_STRIP = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PAD_STRIP = 46
     * }
     */
    public static int GDK_PAD_STRIP() {
        return GDK_PAD_STRIP;
    }
    private static final int GDK_PAD_GROUP_MODE = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PAD_GROUP_MODE = 47
     * }
     */
    public static int GDK_PAD_GROUP_MODE() {
        return GDK_PAD_GROUP_MODE;
    }
    private static final int GDK_EVENT_LAST = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_EVENT_LAST = 48
     * }
     */
    public static int GDK_EVENT_LAST() {
        return GDK_EVENT_LAST;
    }
    private static final int GDK_VISIBILITY_UNOBSCURED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISIBILITY_UNOBSCURED = 0
     * }
     */
    public static int GDK_VISIBILITY_UNOBSCURED() {
        return GDK_VISIBILITY_UNOBSCURED;
    }
    private static final int GDK_VISIBILITY_PARTIAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISIBILITY_PARTIAL = 1
     * }
     */
    public static int GDK_VISIBILITY_PARTIAL() {
        return GDK_VISIBILITY_PARTIAL;
    }
    private static final int GDK_VISIBILITY_FULLY_OBSCURED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_VISIBILITY_FULLY_OBSCURED = 2
     * }
     */
    public static int GDK_VISIBILITY_FULLY_OBSCURED() {
        return GDK_VISIBILITY_FULLY_OBSCURED;
    }
    private static final int GDK_TOUCHPAD_GESTURE_PHASE_BEGIN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCHPAD_GESTURE_PHASE_BEGIN = 0
     * }
     */
    public static int GDK_TOUCHPAD_GESTURE_PHASE_BEGIN() {
        return GDK_TOUCHPAD_GESTURE_PHASE_BEGIN;
    }
    private static final int GDK_TOUCHPAD_GESTURE_PHASE_UPDATE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCHPAD_GESTURE_PHASE_UPDATE = 1
     * }
     */
    public static int GDK_TOUCHPAD_GESTURE_PHASE_UPDATE() {
        return GDK_TOUCHPAD_GESTURE_PHASE_UPDATE;
    }
    private static final int GDK_TOUCHPAD_GESTURE_PHASE_END = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCHPAD_GESTURE_PHASE_END = 2
     * }
     */
    public static int GDK_TOUCHPAD_GESTURE_PHASE_END() {
        return GDK_TOUCHPAD_GESTURE_PHASE_END;
    }
    private static final int GDK_TOUCHPAD_GESTURE_PHASE_CANCEL = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_TOUCHPAD_GESTURE_PHASE_CANCEL = 3
     * }
     */
    public static int GDK_TOUCHPAD_GESTURE_PHASE_CANCEL() {
        return GDK_TOUCHPAD_GESTURE_PHASE_CANCEL;
    }
    private static final int GDK_SCROLL_UP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SCROLL_UP = 0
     * }
     */
    public static int GDK_SCROLL_UP() {
        return GDK_SCROLL_UP;
    }
    private static final int GDK_SCROLL_DOWN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SCROLL_DOWN = 1
     * }
     */
    public static int GDK_SCROLL_DOWN() {
        return GDK_SCROLL_DOWN;
    }
    private static final int GDK_SCROLL_LEFT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SCROLL_LEFT = 2
     * }
     */
    public static int GDK_SCROLL_LEFT() {
        return GDK_SCROLL_LEFT;
    }
    private static final int GDK_SCROLL_RIGHT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SCROLL_RIGHT = 3
     * }
     */
    public static int GDK_SCROLL_RIGHT() {
        return GDK_SCROLL_RIGHT;
    }
    private static final int GDK_SCROLL_SMOOTH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SCROLL_SMOOTH = 4
     * }
     */
    public static int GDK_SCROLL_SMOOTH() {
        return GDK_SCROLL_SMOOTH;
    }
    private static final int GDK_NOTIFY_ANCESTOR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_NOTIFY_ANCESTOR = 0
     * }
     */
    public static int GDK_NOTIFY_ANCESTOR() {
        return GDK_NOTIFY_ANCESTOR;
    }
    private static final int GDK_NOTIFY_VIRTUAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_NOTIFY_VIRTUAL = 1
     * }
     */
    public static int GDK_NOTIFY_VIRTUAL() {
        return GDK_NOTIFY_VIRTUAL;
    }
    private static final int GDK_NOTIFY_INFERIOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_NOTIFY_INFERIOR = 2
     * }
     */
    public static int GDK_NOTIFY_INFERIOR() {
        return GDK_NOTIFY_INFERIOR;
    }
    private static final int GDK_NOTIFY_NONLINEAR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_NOTIFY_NONLINEAR = 3
     * }
     */
    public static int GDK_NOTIFY_NONLINEAR() {
        return GDK_NOTIFY_NONLINEAR;
    }
    private static final int GDK_NOTIFY_NONLINEAR_VIRTUAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_NOTIFY_NONLINEAR_VIRTUAL = 4
     * }
     */
    public static int GDK_NOTIFY_NONLINEAR_VIRTUAL() {
        return GDK_NOTIFY_NONLINEAR_VIRTUAL;
    }
    private static final int GDK_NOTIFY_UNKNOWN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_NOTIFY_UNKNOWN = 5
     * }
     */
    public static int GDK_NOTIFY_UNKNOWN() {
        return GDK_NOTIFY_UNKNOWN;
    }
    private static final int GDK_CROSSING_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSSING_NORMAL = 0
     * }
     */
    public static int GDK_CROSSING_NORMAL() {
        return GDK_CROSSING_NORMAL;
    }
    private static final int GDK_CROSSING_GRAB = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSSING_GRAB = 1
     * }
     */
    public static int GDK_CROSSING_GRAB() {
        return GDK_CROSSING_GRAB;
    }
    private static final int GDK_CROSSING_UNGRAB = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSSING_UNGRAB = 2
     * }
     */
    public static int GDK_CROSSING_UNGRAB() {
        return GDK_CROSSING_UNGRAB;
    }
    private static final int GDK_CROSSING_GTK_GRAB = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSSING_GTK_GRAB = 3
     * }
     */
    public static int GDK_CROSSING_GTK_GRAB() {
        return GDK_CROSSING_GTK_GRAB;
    }
    private static final int GDK_CROSSING_GTK_UNGRAB = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSSING_GTK_UNGRAB = 4
     * }
     */
    public static int GDK_CROSSING_GTK_UNGRAB() {
        return GDK_CROSSING_GTK_UNGRAB;
    }
    private static final int GDK_CROSSING_STATE_CHANGED = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSSING_STATE_CHANGED = 5
     * }
     */
    public static int GDK_CROSSING_STATE_CHANGED() {
        return GDK_CROSSING_STATE_CHANGED;
    }
    private static final int GDK_CROSSING_TOUCH_BEGIN = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSSING_TOUCH_BEGIN = 6
     * }
     */
    public static int GDK_CROSSING_TOUCH_BEGIN() {
        return GDK_CROSSING_TOUCH_BEGIN;
    }
    private static final int GDK_CROSSING_TOUCH_END = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSSING_TOUCH_END = 7
     * }
     */
    public static int GDK_CROSSING_TOUCH_END() {
        return GDK_CROSSING_TOUCH_END;
    }
    private static final int GDK_CROSSING_DEVICE_SWITCH = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_CROSSING_DEVICE_SWITCH = 8
     * }
     */
    public static int GDK_CROSSING_DEVICE_SWITCH() {
        return GDK_CROSSING_DEVICE_SWITCH;
    }
    private static final int GDK_PROPERTY_NEW_VALUE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROPERTY_NEW_VALUE = 0
     * }
     */
    public static int GDK_PROPERTY_NEW_VALUE() {
        return GDK_PROPERTY_NEW_VALUE;
    }
    private static final int GDK_PROPERTY_DELETE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_PROPERTY_DELETE = 1
     * }
     */
    public static int GDK_PROPERTY_DELETE() {
        return GDK_PROPERTY_DELETE;
    }
    private static final int GDK_WINDOW_STATE_WITHDRAWN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_WITHDRAWN = 1
     * }
     */
    public static int GDK_WINDOW_STATE_WITHDRAWN() {
        return GDK_WINDOW_STATE_WITHDRAWN;
    }
    private static final int GDK_WINDOW_STATE_ICONIFIED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_ICONIFIED = 2
     * }
     */
    public static int GDK_WINDOW_STATE_ICONIFIED() {
        return GDK_WINDOW_STATE_ICONIFIED;
    }
    private static final int GDK_WINDOW_STATE_MAXIMIZED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_MAXIMIZED = 4
     * }
     */
    public static int GDK_WINDOW_STATE_MAXIMIZED() {
        return GDK_WINDOW_STATE_MAXIMIZED;
    }
    private static final int GDK_WINDOW_STATE_STICKY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_STICKY = 8
     * }
     */
    public static int GDK_WINDOW_STATE_STICKY() {
        return GDK_WINDOW_STATE_STICKY;
    }
    private static final int GDK_WINDOW_STATE_FULLSCREEN = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_FULLSCREEN = 16
     * }
     */
    public static int GDK_WINDOW_STATE_FULLSCREEN() {
        return GDK_WINDOW_STATE_FULLSCREEN;
    }
    private static final int GDK_WINDOW_STATE_ABOVE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_ABOVE = 32
     * }
     */
    public static int GDK_WINDOW_STATE_ABOVE() {
        return GDK_WINDOW_STATE_ABOVE;
    }
    private static final int GDK_WINDOW_STATE_BELOW = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_BELOW = 64
     * }
     */
    public static int GDK_WINDOW_STATE_BELOW() {
        return GDK_WINDOW_STATE_BELOW;
    }
    private static final int GDK_WINDOW_STATE_FOCUSED = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_FOCUSED = 128
     * }
     */
    public static int GDK_WINDOW_STATE_FOCUSED() {
        return GDK_WINDOW_STATE_FOCUSED;
    }
    private static final int GDK_WINDOW_STATE_TILED = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_TILED = 256
     * }
     */
    public static int GDK_WINDOW_STATE_TILED() {
        return GDK_WINDOW_STATE_TILED;
    }
    private static final int GDK_WINDOW_STATE_TOP_TILED = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_TOP_TILED = 512
     * }
     */
    public static int GDK_WINDOW_STATE_TOP_TILED() {
        return GDK_WINDOW_STATE_TOP_TILED;
    }
    private static final int GDK_WINDOW_STATE_TOP_RESIZABLE = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_TOP_RESIZABLE = 1024
     * }
     */
    public static int GDK_WINDOW_STATE_TOP_RESIZABLE() {
        return GDK_WINDOW_STATE_TOP_RESIZABLE;
    }
    private static final int GDK_WINDOW_STATE_RIGHT_TILED = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_RIGHT_TILED = 2048
     * }
     */
    public static int GDK_WINDOW_STATE_RIGHT_TILED() {
        return GDK_WINDOW_STATE_RIGHT_TILED;
    }
    private static final int GDK_WINDOW_STATE_RIGHT_RESIZABLE = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_RIGHT_RESIZABLE = 4096
     * }
     */
    public static int GDK_WINDOW_STATE_RIGHT_RESIZABLE() {
        return GDK_WINDOW_STATE_RIGHT_RESIZABLE;
    }
    private static final int GDK_WINDOW_STATE_BOTTOM_TILED = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_BOTTOM_TILED = 8192
     * }
     */
    public static int GDK_WINDOW_STATE_BOTTOM_TILED() {
        return GDK_WINDOW_STATE_BOTTOM_TILED;
    }
    private static final int GDK_WINDOW_STATE_BOTTOM_RESIZABLE = (int)16384L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_BOTTOM_RESIZABLE = 16384
     * }
     */
    public static int GDK_WINDOW_STATE_BOTTOM_RESIZABLE() {
        return GDK_WINDOW_STATE_BOTTOM_RESIZABLE;
    }
    private static final int GDK_WINDOW_STATE_LEFT_TILED = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_LEFT_TILED = 32768
     * }
     */
    public static int GDK_WINDOW_STATE_LEFT_TILED() {
        return GDK_WINDOW_STATE_LEFT_TILED;
    }
    private static final int GDK_WINDOW_STATE_LEFT_RESIZABLE = (int)65536L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_STATE_LEFT_RESIZABLE = 65536
     * }
     */
    public static int GDK_WINDOW_STATE_LEFT_RESIZABLE() {
        return GDK_WINDOW_STATE_LEFT_RESIZABLE;
    }
    private static final int GDK_SETTING_ACTION_NEW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SETTING_ACTION_NEW = 0
     * }
     */
    public static int GDK_SETTING_ACTION_NEW() {
        return GDK_SETTING_ACTION_NEW;
    }
    private static final int GDK_SETTING_ACTION_CHANGED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SETTING_ACTION_CHANGED = 1
     * }
     */
    public static int GDK_SETTING_ACTION_CHANGED() {
        return GDK_SETTING_ACTION_CHANGED;
    }
    private static final int GDK_SETTING_ACTION_DELETED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_SETTING_ACTION_DELETED = 2
     * }
     */
    public static int GDK_SETTING_ACTION_DELETED() {
        return GDK_SETTING_ACTION_DELETED;
    }
    private static final int GDK_OWNER_CHANGE_NEW_OWNER = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_OWNER_CHANGE_NEW_OWNER = 0
     * }
     */
    public static int GDK_OWNER_CHANGE_NEW_OWNER() {
        return GDK_OWNER_CHANGE_NEW_OWNER;
    }
    private static final int GDK_OWNER_CHANGE_DESTROY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_OWNER_CHANGE_DESTROY = 1
     * }
     */
    public static int GDK_OWNER_CHANGE_DESTROY() {
        return GDK_OWNER_CHANGE_DESTROY;
    }
    private static final int GDK_OWNER_CHANGE_CLOSE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_OWNER_CHANGE_CLOSE = 2
     * }
     */
    public static int GDK_OWNER_CHANGE_CLOSE() {
        return GDK_OWNER_CHANGE_CLOSE;
    }

    private static class gdk_event_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_event_get_type()
     * }
     */
    public static FunctionDescriptor gdk_event_get_type$descriptor() {
        return gdk_event_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_event_get_type()
     * }
     */
    public static MethodHandle gdk_event_get_type$handle() {
        return gdk_event_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_event_get_type()
     * }
     */
    public static long gdk_event_get_type() {
        var mh$ = gdk_event_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_sequence_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_sequence_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_event_sequence_get_type()
     * }
     */
    public static FunctionDescriptor gdk_event_sequence_get_type$descriptor() {
        return gdk_event_sequence_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_event_sequence_get_type()
     * }
     */
    public static MethodHandle gdk_event_sequence_get_type$handle() {
        return gdk_event_sequence_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_event_sequence_get_type()
     * }
     */
    public static long gdk_event_sequence_get_type() {
        var mh$ = gdk_event_sequence_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_sequence_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_events_pending {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_events_pending"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_events_pending()
     * }
     */
    public static FunctionDescriptor gdk_events_pending$descriptor() {
        return gdk_events_pending.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_events_pending()
     * }
     */
    public static MethodHandle gdk_events_pending$handle() {
        return gdk_events_pending.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_events_pending()
     * }
     */
    public static int gdk_events_pending() {
        var mh$ = gdk_events_pending.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_events_pending");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_get()
     * }
     */
    public static FunctionDescriptor gdk_event_get$descriptor() {
        return gdk_event_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_get()
     * }
     */
    public static MethodHandle gdk_event_get$handle() {
        return gdk_event_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_get()
     * }
     */
    public static MemorySegment gdk_event_get() {
        var mh$ = gdk_event_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_peek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_peek()
     * }
     */
    public static FunctionDescriptor gdk_event_peek$descriptor() {
        return gdk_event_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_peek()
     * }
     */
    public static MethodHandle gdk_event_peek$handle() {
        return gdk_event_peek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_peek()
     * }
     */
    public static MemorySegment gdk_event_peek() {
        var mh$ = gdk_event_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_peek");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_put {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_put"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_event_put(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_put$descriptor() {
        return gdk_event_put.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_event_put(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_put$handle() {
        return gdk_event_put.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_event_put(const GdkEvent *event)
     * }
     */
    public static void gdk_event_put(MemorySegment event) {
        var mh$ = gdk_event_put.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_put", event);
            }
            mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_new(GdkEventType type)
     * }
     */
    public static FunctionDescriptor gdk_event_new$descriptor() {
        return gdk_event_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_new(GdkEventType type)
     * }
     */
    public static MethodHandle gdk_event_new$handle() {
        return gdk_event_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_new(GdkEventType type)
     * }
     */
    public static MemorySegment gdk_event_new(int type) {
        var mh$ = gdk_event_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_new", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_copy(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_copy$descriptor() {
        return gdk_event_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_copy(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_copy$handle() {
        return gdk_event_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEvent *gdk_event_copy(const GdkEvent *event)
     * }
     */
    public static MemorySegment gdk_event_copy(MemorySegment event) {
        var mh$ = gdk_event_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_copy", event);
            }
            return (MemorySegment)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_event_free(GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_free$descriptor() {
        return gdk_event_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_event_free(GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_free$handle() {
        return gdk_event_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_event_free(GdkEvent *event)
     * }
     */
    public static void gdk_event_free(MemorySegment event) {
        var mh$ = gdk_event_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_free", event);
            }
            mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_event_get_window(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_window$descriptor() {
        return gdk_event_get_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_event_get_window(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_window$handle() {
        return gdk_event_get_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_event_get_window(const GdkEvent *event)
     * }
     */
    public static MemorySegment gdk_event_get_window(MemorySegment event) {
        var mh$ = gdk_event_get_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_window", event);
            }
            return (MemorySegment)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 gdk_event_get_time(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_time$descriptor() {
        return gdk_event_get_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 gdk_event_get_time(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_time$handle() {
        return gdk_event_get_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 gdk_event_get_time(const GdkEvent *event)
     * }
     */
    public static int gdk_event_get_time(MemorySegment event) {
        var mh$ = gdk_event_get_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_time", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_state(const GdkEvent *event, GdkModifierType *state)
     * }
     */
    public static FunctionDescriptor gdk_event_get_state$descriptor() {
        return gdk_event_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_state(const GdkEvent *event, GdkModifierType *state)
     * }
     */
    public static MethodHandle gdk_event_get_state$handle() {
        return gdk_event_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_state(const GdkEvent *event, GdkModifierType *state)
     * }
     */
    public static int gdk_event_get_state(MemorySegment event, MemorySegment state) {
        var mh$ = gdk_event_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_state", event, state);
            }
            return (int)mh$.invokeExact(event, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_coords(const GdkEvent *event, gdouble *x_win, gdouble *y_win)
     * }
     */
    public static FunctionDescriptor gdk_event_get_coords$descriptor() {
        return gdk_event_get_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_coords(const GdkEvent *event, gdouble *x_win, gdouble *y_win)
     * }
     */
    public static MethodHandle gdk_event_get_coords$handle() {
        return gdk_event_get_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_coords(const GdkEvent *event, gdouble *x_win, gdouble *y_win)
     * }
     */
    public static int gdk_event_get_coords(MemorySegment event, MemorySegment x_win, MemorySegment y_win) {
        var mh$ = gdk_event_get_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_coords", event, x_win, y_win);
            }
            return (int)mh$.invokeExact(event, x_win, y_win);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_root_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_root_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_root_coords(const GdkEvent *event, gdouble *x_root, gdouble *y_root)
     * }
     */
    public static FunctionDescriptor gdk_event_get_root_coords$descriptor() {
        return gdk_event_get_root_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_root_coords(const GdkEvent *event, gdouble *x_root, gdouble *y_root)
     * }
     */
    public static MethodHandle gdk_event_get_root_coords$handle() {
        return gdk_event_get_root_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_root_coords(const GdkEvent *event, gdouble *x_root, gdouble *y_root)
     * }
     */
    public static int gdk_event_get_root_coords(MemorySegment event, MemorySegment x_root, MemorySegment y_root) {
        var mh$ = gdk_event_get_root_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_root_coords", event, x_root, y_root);
            }
            return (int)mh$.invokeExact(event, x_root, y_root);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_button {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_button"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_button(const GdkEvent *event, guint *button)
     * }
     */
    public static FunctionDescriptor gdk_event_get_button$descriptor() {
        return gdk_event_get_button.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_button(const GdkEvent *event, guint *button)
     * }
     */
    public static MethodHandle gdk_event_get_button$handle() {
        return gdk_event_get_button.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_button(const GdkEvent *event, guint *button)
     * }
     */
    public static int gdk_event_get_button(MemorySegment event, MemorySegment button) {
        var mh$ = gdk_event_get_button.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_button", event, button);
            }
            return (int)mh$.invokeExact(event, button);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_click_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_click_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_click_count(const GdkEvent *event, guint *click_count)
     * }
     */
    public static FunctionDescriptor gdk_event_get_click_count$descriptor() {
        return gdk_event_get_click_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_click_count(const GdkEvent *event, guint *click_count)
     * }
     */
    public static MethodHandle gdk_event_get_click_count$handle() {
        return gdk_event_get_click_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_click_count(const GdkEvent *event, guint *click_count)
     * }
     */
    public static int gdk_event_get_click_count(MemorySegment event, MemorySegment click_count) {
        var mh$ = gdk_event_get_click_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_click_count", event, click_count);
            }
            return (int)mh$.invokeExact(event, click_count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_keyval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_keyval"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_keyval(const GdkEvent *event, guint *keyval)
     * }
     */
    public static FunctionDescriptor gdk_event_get_keyval$descriptor() {
        return gdk_event_get_keyval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_keyval(const GdkEvent *event, guint *keyval)
     * }
     */
    public static MethodHandle gdk_event_get_keyval$handle() {
        return gdk_event_get_keyval.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_keyval(const GdkEvent *event, guint *keyval)
     * }
     */
    public static int gdk_event_get_keyval(MemorySegment event, MemorySegment keyval) {
        var mh$ = gdk_event_get_keyval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_keyval", event, keyval);
            }
            return (int)mh$.invokeExact(event, keyval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_keycode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_keycode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_keycode(const GdkEvent *event, guint16 *keycode)
     * }
     */
    public static FunctionDescriptor gdk_event_get_keycode$descriptor() {
        return gdk_event_get_keycode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_keycode(const GdkEvent *event, guint16 *keycode)
     * }
     */
    public static MethodHandle gdk_event_get_keycode$handle() {
        return gdk_event_get_keycode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_keycode(const GdkEvent *event, guint16 *keycode)
     * }
     */
    public static int gdk_event_get_keycode(MemorySegment event, MemorySegment keycode) {
        var mh$ = gdk_event_get_keycode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_keycode", event, keycode);
            }
            return (int)mh$.invokeExact(event, keycode);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_scroll_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_scroll_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_scroll_direction(const GdkEvent *event, GdkScrollDirection *direction)
     * }
     */
    public static FunctionDescriptor gdk_event_get_scroll_direction$descriptor() {
        return gdk_event_get_scroll_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_scroll_direction(const GdkEvent *event, GdkScrollDirection *direction)
     * }
     */
    public static MethodHandle gdk_event_get_scroll_direction$handle() {
        return gdk_event_get_scroll_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_scroll_direction(const GdkEvent *event, GdkScrollDirection *direction)
     * }
     */
    public static int gdk_event_get_scroll_direction(MemorySegment event, MemorySegment direction) {
        var mh$ = gdk_event_get_scroll_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_scroll_direction", event, direction);
            }
            return (int)mh$.invokeExact(event, direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_scroll_deltas {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_scroll_deltas"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_scroll_deltas(const GdkEvent *event, gdouble *delta_x, gdouble *delta_y)
     * }
     */
    public static FunctionDescriptor gdk_event_get_scroll_deltas$descriptor() {
        return gdk_event_get_scroll_deltas.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_scroll_deltas(const GdkEvent *event, gdouble *delta_x, gdouble *delta_y)
     * }
     */
    public static MethodHandle gdk_event_get_scroll_deltas$handle() {
        return gdk_event_get_scroll_deltas.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_scroll_deltas(const GdkEvent *event, gdouble *delta_x, gdouble *delta_y)
     * }
     */
    public static int gdk_event_get_scroll_deltas(MemorySegment event, MemorySegment delta_x, MemorySegment delta_y) {
        var mh$ = gdk_event_get_scroll_deltas.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_scroll_deltas", event, delta_x, delta_y);
            }
            return (int)mh$.invokeExact(event, delta_x, delta_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_is_scroll_stop_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_is_scroll_stop_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_is_scroll_stop_event(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_is_scroll_stop_event$descriptor() {
        return gdk_event_is_scroll_stop_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_is_scroll_stop_event(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_is_scroll_stop_event$handle() {
        return gdk_event_is_scroll_stop_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_is_scroll_stop_event(const GdkEvent *event)
     * }
     */
    public static int gdk_event_is_scroll_stop_event(MemorySegment event) {
        var mh$ = gdk_event_is_scroll_stop_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_is_scroll_stop_event", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_axis {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_axis"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_axis(const GdkEvent *event, GdkAxisUse axis_use, gdouble *value)
     * }
     */
    public static FunctionDescriptor gdk_event_get_axis$descriptor() {
        return gdk_event_get_axis.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_axis(const GdkEvent *event, GdkAxisUse axis_use, gdouble *value)
     * }
     */
    public static MethodHandle gdk_event_get_axis$handle() {
        return gdk_event_get_axis.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_axis(const GdkEvent *event, GdkAxisUse axis_use, gdouble *value)
     * }
     */
    public static int gdk_event_get_axis(MemorySegment event, int axis_use, MemorySegment value) {
        var mh$ = gdk_event_get_axis.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_axis", event, axis_use, value);
            }
            return (int)mh$.invokeExact(event, axis_use, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_set_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_set_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_event_set_device(GdkEvent *event, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_event_set_device$descriptor() {
        return gdk_event_set_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_event_set_device(GdkEvent *event, GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_event_set_device$handle() {
        return gdk_event_set_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_event_set_device(GdkEvent *event, GdkDevice *device)
     * }
     */
    public static void gdk_event_set_device(MemorySegment event, MemorySegment device) {
        var mh$ = gdk_event_set_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_set_device", event, device);
            }
            mh$.invokeExact(event, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_event_get_device(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_device$descriptor() {
        return gdk_event_get_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_event_get_device(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_device$handle() {
        return gdk_event_get_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDevice *gdk_event_get_device(const GdkEvent *event)
     * }
     */
    public static MemorySegment gdk_event_get_device(MemorySegment event) {
        var mh$ = gdk_event_get_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_device", event);
            }
            return (MemorySegment)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_set_source_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_set_source_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_event_set_source_device(GdkEvent *event, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_event_set_source_device$descriptor() {
        return gdk_event_set_source_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_event_set_source_device(GdkEvent *event, GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_event_set_source_device$handle() {
        return gdk_event_set_source_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_event_set_source_device(GdkEvent *event, GdkDevice *device)
     * }
     */
    public static void gdk_event_set_source_device(MemorySegment event, MemorySegment device) {
        var mh$ = gdk_event_set_source_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_set_source_device", event, device);
            }
            mh$.invokeExact(event, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_source_device {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_source_device"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_event_get_source_device(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_source_device$descriptor() {
        return gdk_event_get_source_device.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_event_get_source_device(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_source_device$handle() {
        return gdk_event_get_source_device.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDevice *gdk_event_get_source_device(const GdkEvent *event)
     * }
     */
    public static MemorySegment gdk_event_get_source_device(MemorySegment event) {
        var mh$ = gdk_event_get_source_device.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_source_device", event);
            }
            return (MemorySegment)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_request_motions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_request_motions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_event_request_motions(const GdkEventMotion *event)
     * }
     */
    public static FunctionDescriptor gdk_event_request_motions$descriptor() {
        return gdk_event_request_motions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_event_request_motions(const GdkEventMotion *event)
     * }
     */
    public static MethodHandle gdk_event_request_motions$handle() {
        return gdk_event_request_motions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_event_request_motions(const GdkEventMotion *event)
     * }
     */
    public static void gdk_event_request_motions(MemorySegment event) {
        var mh$ = gdk_event_request_motions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_request_motions", event);
            }
            mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_triggers_context_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_triggers_context_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_triggers_context_menu(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_triggers_context_menu$descriptor() {
        return gdk_event_triggers_context_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_triggers_context_menu(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_triggers_context_menu$handle() {
        return gdk_event_triggers_context_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_triggers_context_menu(const GdkEvent *event)
     * }
     */
    public static int gdk_event_triggers_context_menu(MemorySegment event) {
        var mh$ = gdk_event_triggers_context_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_triggers_context_menu", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_events_get_distance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_events_get_distance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_events_get_distance(GdkEvent *event1, GdkEvent *event2, gdouble *distance)
     * }
     */
    public static FunctionDescriptor gdk_events_get_distance$descriptor() {
        return gdk_events_get_distance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_events_get_distance(GdkEvent *event1, GdkEvent *event2, gdouble *distance)
     * }
     */
    public static MethodHandle gdk_events_get_distance$handle() {
        return gdk_events_get_distance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_events_get_distance(GdkEvent *event1, GdkEvent *event2, gdouble *distance)
     * }
     */
    public static int gdk_events_get_distance(MemorySegment event1, MemorySegment event2, MemorySegment distance) {
        var mh$ = gdk_events_get_distance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_events_get_distance", event1, event2, distance);
            }
            return (int)mh$.invokeExact(event1, event2, distance);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_events_get_angle {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_events_get_angle"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_events_get_angle(GdkEvent *event1, GdkEvent *event2, gdouble *angle)
     * }
     */
    public static FunctionDescriptor gdk_events_get_angle$descriptor() {
        return gdk_events_get_angle.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_events_get_angle(GdkEvent *event1, GdkEvent *event2, gdouble *angle)
     * }
     */
    public static MethodHandle gdk_events_get_angle$handle() {
        return gdk_events_get_angle.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_events_get_angle(GdkEvent *event1, GdkEvent *event2, gdouble *angle)
     * }
     */
    public static int gdk_events_get_angle(MemorySegment event1, MemorySegment event2, MemorySegment angle) {
        var mh$ = gdk_events_get_angle.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_events_get_angle", event1, event2, angle);
            }
            return (int)mh$.invokeExact(event1, event2, angle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_events_get_center {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_events_get_center"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_events_get_center(GdkEvent *event1, GdkEvent *event2, gdouble *x, gdouble *y)
     * }
     */
    public static FunctionDescriptor gdk_events_get_center$descriptor() {
        return gdk_events_get_center.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_events_get_center(GdkEvent *event1, GdkEvent *event2, gdouble *x, gdouble *y)
     * }
     */
    public static MethodHandle gdk_events_get_center$handle() {
        return gdk_events_get_center.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_events_get_center(GdkEvent *event1, GdkEvent *event2, gdouble *x, gdouble *y)
     * }
     */
    public static int gdk_events_get_center(MemorySegment event1, MemorySegment event2, MemorySegment x, MemorySegment y) {
        var mh$ = gdk_events_get_center.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_events_get_center", event1, event2, x, y);
            }
            return (int)mh$.invokeExact(event1, event2, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_handler_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_handler_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_event_handler_set(GdkEventFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor gdk_event_handler_set$descriptor() {
        return gdk_event_handler_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_event_handler_set(GdkEventFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle gdk_event_handler_set$handle() {
        return gdk_event_handler_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_event_handler_set(GdkEventFunc func, gpointer data, GDestroyNotify notify)
     * }
     */
    public static void gdk_event_handler_set(MemorySegment func, MemorySegment data, MemorySegment notify) {
        var mh$ = gdk_event_handler_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_handler_set", func, data, notify);
            }
            mh$.invokeExact(func, data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_set_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_set_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_event_set_screen(GdkEvent *event, GdkScreen *screen)
     * }
     */
    public static FunctionDescriptor gdk_event_set_screen$descriptor() {
        return gdk_event_set_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_event_set_screen(GdkEvent *event, GdkScreen *screen)
     * }
     */
    public static MethodHandle gdk_event_set_screen$handle() {
        return gdk_event_set_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_event_set_screen(GdkEvent *event, GdkScreen *screen)
     * }
     */
    public static void gdk_event_set_screen(MemorySegment event, MemorySegment screen) {
        var mh$ = gdk_event_set_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_set_screen", event, screen);
            }
            mh$.invokeExact(event, screen);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_event_get_screen(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_screen$descriptor() {
        return gdk_event_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_event_get_screen(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_screen$handle() {
        return gdk_event_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gdk_event_get_screen(const GdkEvent *event)
     * }
     */
    public static MemorySegment gdk_event_get_screen(MemorySegment event) {
        var mh$ = gdk_event_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_screen", event);
            }
            return (MemorySegment)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_event_sequence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_event_sequence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEventSequence *gdk_event_get_event_sequence(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_event_sequence$descriptor() {
        return gdk_event_get_event_sequence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEventSequence *gdk_event_get_event_sequence(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_event_sequence$handle() {
        return gdk_event_get_event_sequence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEventSequence *gdk_event_get_event_sequence(const GdkEvent *event)
     * }
     */
    public static MemorySegment gdk_event_get_event_sequence(MemorySegment event) {
        var mh$ = gdk_event_get_event_sequence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_event_sequence", event);
            }
            return (MemorySegment)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_event_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_event_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEventType gdk_event_get_event_type(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_event_type$descriptor() {
        return gdk_event_get_event_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEventType gdk_event_get_event_type(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_event_type$handle() {
        return gdk_event_get_event_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEventType gdk_event_get_event_type(const GdkEvent *event)
     * }
     */
    public static int gdk_event_get_event_type(MemorySegment event) {
        var mh$ = gdk_event_get_event_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_event_type", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_seat {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_seat"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkSeat *gdk_event_get_seat(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_seat$descriptor() {
        return gdk_event_get_seat.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkSeat *gdk_event_get_seat(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_seat$handle() {
        return gdk_event_get_seat.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkSeat *gdk_event_get_seat(const GdkEvent *event)
     * }
     */
    public static MemorySegment gdk_event_get_seat(MemorySegment event) {
        var mh$ = gdk_event_get_seat.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_seat", event);
            }
            return (MemorySegment)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_set_show_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_set_show_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_set_show_events(gboolean show_events)
     * }
     */
    public static FunctionDescriptor gdk_set_show_events$descriptor() {
        return gdk_set_show_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_set_show_events(gboolean show_events)
     * }
     */
    public static MethodHandle gdk_set_show_events$handle() {
        return gdk_set_show_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_set_show_events(gboolean show_events)
     * }
     */
    public static void gdk_set_show_events(int show_events) {
        var mh$ = gdk_set_show_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_set_show_events", show_events);
            }
            mh$.invokeExact(show_events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_get_show_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_get_show_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_get_show_events()
     * }
     */
    public static FunctionDescriptor gdk_get_show_events$descriptor() {
        return gdk_get_show_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_get_show_events()
     * }
     */
    public static MethodHandle gdk_get_show_events$handle() {
        return gdk_get_show_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_get_show_events()
     * }
     */
    public static int gdk_get_show_events() {
        var mh$ = gdk_get_show_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_get_show_events");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_setting_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_setting_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_setting_get(const gchar *name, GValue *value)
     * }
     */
    public static FunctionDescriptor gdk_setting_get$descriptor() {
        return gdk_setting_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_setting_get(const gchar *name, GValue *value)
     * }
     */
    public static MethodHandle gdk_setting_get$handle() {
        return gdk_setting_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_setting_get(const gchar *name, GValue *value)
     * }
     */
    public static int gdk_setting_get(MemorySegment name, MemorySegment value) {
        var mh$ = gdk_setting_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_setting_get", name, value);
            }
            return (int)mh$.invokeExact(name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_device_tool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_device_tool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDeviceTool *gdk_event_get_device_tool(const GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_device_tool$descriptor() {
        return gdk_event_get_device_tool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDeviceTool *gdk_event_get_device_tool(const GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_device_tool$handle() {
        return gdk_event_get_device_tool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDeviceTool *gdk_event_get_device_tool(const GdkEvent *event)
     * }
     */
    public static MemorySegment gdk_event_get_device_tool(MemorySegment event) {
        var mh$ = gdk_event_get_device_tool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_device_tool", event);
            }
            return (MemorySegment)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_set_device_tool {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_set_device_tool"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_event_set_device_tool(GdkEvent *event, GdkDeviceTool *tool)
     * }
     */
    public static FunctionDescriptor gdk_event_set_device_tool$descriptor() {
        return gdk_event_set_device_tool.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_event_set_device_tool(GdkEvent *event, GdkDeviceTool *tool)
     * }
     */
    public static MethodHandle gdk_event_set_device_tool$handle() {
        return gdk_event_set_device_tool.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_event_set_device_tool(GdkEvent *event, GdkDeviceTool *tool)
     * }
     */
    public static void gdk_event_set_device_tool(MemorySegment event, MemorySegment tool) {
        var mh$ = gdk_event_set_device_tool.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_set_device_tool", event, tool);
            }
            mh$.invokeExact(event, tool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_scancode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_scancode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_event_get_scancode(GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_scancode$descriptor() {
        return gdk_event_get_scancode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_event_get_scancode(GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_scancode$handle() {
        return gdk_event_get_scancode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_event_get_scancode(GdkEvent *event)
     * }
     */
    public static int gdk_event_get_scancode(MemorySegment event) {
        var mh$ = gdk_event_get_scancode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_scancode", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_event_get_pointer_emulated {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_event_get_pointer_emulated"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_pointer_emulated(GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gdk_event_get_pointer_emulated$descriptor() {
        return gdk_event_get_pointer_emulated.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_pointer_emulated(GdkEvent *event)
     * }
     */
    public static MethodHandle gdk_event_get_pointer_emulated$handle() {
        return gdk_event_get_pointer_emulated.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_event_get_pointer_emulated(GdkEvent *event)
     * }
     */
    public static int gdk_event_get_pointer_emulated(MemorySegment event) {
        var mh$ = gdk_event_get_pointer_emulated.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_event_get_pointer_emulated", event);
            }
            return (int)mh$.invokeExact(event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_manager_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_manager_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_device_manager_get_type()
     * }
     */
    public static FunctionDescriptor gdk_device_manager_get_type$descriptor() {
        return gdk_device_manager_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_device_manager_get_type()
     * }
     */
    public static MethodHandle gdk_device_manager_get_type$handle() {
        return gdk_device_manager_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_device_manager_get_type()
     * }
     */
    public static long gdk_device_manager_get_type() {
        var mh$ = gdk_device_manager_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_manager_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_manager_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_manager_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_device_manager_get_display(GdkDeviceManager *device_manager)
     * }
     */
    public static FunctionDescriptor gdk_device_manager_get_display$descriptor() {
        return gdk_device_manager_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_device_manager_get_display(GdkDeviceManager *device_manager)
     * }
     */
    public static MethodHandle gdk_device_manager_get_display$handle() {
        return gdk_device_manager_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_device_manager_get_display(GdkDeviceManager *device_manager)
     * }
     */
    public static MemorySegment gdk_device_manager_get_display(MemorySegment device_manager) {
        var mh$ = gdk_device_manager_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_manager_get_display", device_manager);
            }
            return (MemorySegment)mh$.invokeExact(device_manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_manager_list_devices {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_manager_list_devices"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_device_manager_list_devices(GdkDeviceManager *device_manager, GdkDeviceType type)
     * }
     */
    public static FunctionDescriptor gdk_device_manager_list_devices$descriptor() {
        return gdk_device_manager_list_devices.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_device_manager_list_devices(GdkDeviceManager *device_manager, GdkDeviceType type)
     * }
     */
    public static MethodHandle gdk_device_manager_list_devices$handle() {
        return gdk_device_manager_list_devices.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_device_manager_list_devices(GdkDeviceManager *device_manager, GdkDeviceType type)
     * }
     */
    public static MemorySegment gdk_device_manager_list_devices(MemorySegment device_manager, int type) {
        var mh$ = gdk_device_manager_list_devices.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_manager_list_devices", device_manager, type);
            }
            return (MemorySegment)mh$.invokeExact(device_manager, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_device_manager_get_client_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_device_manager_get_client_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_device_manager_get_client_pointer(GdkDeviceManager *device_manager)
     * }
     */
    public static FunctionDescriptor gdk_device_manager_get_client_pointer$descriptor() {
        return gdk_device_manager_get_client_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDevice *gdk_device_manager_get_client_pointer(GdkDeviceManager *device_manager)
     * }
     */
    public static MethodHandle gdk_device_manager_get_client_pointer$handle() {
        return gdk_device_manager_get_client_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDevice *gdk_device_manager_get_client_pointer(GdkDeviceManager *device_manager)
     * }
     */
    public static MemorySegment gdk_device_manager_get_client_pointer(MemorySegment device_manager) {
        var mh$ = gdk_device_manager_get_client_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_device_manager_get_client_pointer", device_manager);
            }
            return (MemorySegment)mh$.invokeExact(device_manager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drawing_context_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drawing_context_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_drawing_context_get_type()
     * }
     */
    public static FunctionDescriptor gdk_drawing_context_get_type$descriptor() {
        return gdk_drawing_context_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_drawing_context_get_type()
     * }
     */
    public static MethodHandle gdk_drawing_context_get_type$handle() {
        return gdk_drawing_context_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_drawing_context_get_type()
     * }
     */
    public static long gdk_drawing_context_get_type() {
        var mh$ = gdk_drawing_context_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drawing_context_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drawing_context_get_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drawing_context_get_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drawing_context_get_window(GdkDrawingContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drawing_context_get_window$descriptor() {
        return gdk_drawing_context_get_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drawing_context_get_window(GdkDrawingContext *context)
     * }
     */
    public static MethodHandle gdk_drawing_context_get_window$handle() {
        return gdk_drawing_context_get_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_drawing_context_get_window(GdkDrawingContext *context)
     * }
     */
    public static MemorySegment gdk_drawing_context_get_window(MemorySegment context) {
        var mh$ = gdk_drawing_context_get_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drawing_context_get_window", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drawing_context_get_clip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drawing_context_get_clip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_drawing_context_get_clip(GdkDrawingContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drawing_context_get_clip$descriptor() {
        return gdk_drawing_context_get_clip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_drawing_context_get_clip(GdkDrawingContext *context)
     * }
     */
    public static MethodHandle gdk_drawing_context_get_clip$handle() {
        return gdk_drawing_context_get_clip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_drawing_context_get_clip(GdkDrawingContext *context)
     * }
     */
    public static MemorySegment gdk_drawing_context_get_clip(MemorySegment context) {
        var mh$ = gdk_drawing_context_get_clip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drawing_context_get_clip", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drawing_context_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drawing_context_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_drawing_context_is_valid(GdkDrawingContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drawing_context_is_valid$descriptor() {
        return gdk_drawing_context_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_drawing_context_is_valid(GdkDrawingContext *context)
     * }
     */
    public static MethodHandle gdk_drawing_context_is_valid$handle() {
        return gdk_drawing_context_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_drawing_context_is_valid(GdkDrawingContext *context)
     * }
     */
    public static int gdk_drawing_context_is_valid(MemorySegment context) {
        var mh$ = gdk_drawing_context_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drawing_context_is_valid", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_drawing_context_get_cairo_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_drawing_context_get_cairo_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_t *gdk_drawing_context_get_cairo_context(GdkDrawingContext *context)
     * }
     */
    public static FunctionDescriptor gdk_drawing_context_get_cairo_context$descriptor() {
        return gdk_drawing_context_get_cairo_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_t *gdk_drawing_context_get_cairo_context(GdkDrawingContext *context)
     * }
     */
    public static MethodHandle gdk_drawing_context_get_cairo_context$handle() {
        return gdk_drawing_context_get_cairo_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_t *gdk_drawing_context_get_cairo_context(GdkDrawingContext *context)
     * }
     */
    public static MemorySegment gdk_drawing_context_get_cairo_context(MemorySegment context) {
        var mh$ = gdk_drawing_context_get_cairo_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_drawing_context_get_cairo_context", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_timings_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_timings_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_frame_timings_get_type()
     * }
     */
    public static FunctionDescriptor gdk_frame_timings_get_type$descriptor() {
        return gdk_frame_timings_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_frame_timings_get_type()
     * }
     */
    public static MethodHandle gdk_frame_timings_get_type$handle() {
        return gdk_frame_timings_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_frame_timings_get_type()
     * }
     */
    public static long gdk_frame_timings_get_type() {
        var mh$ = gdk_frame_timings_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_timings_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_timings_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_timings_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkFrameTimings *gdk_frame_timings_ref(GdkFrameTimings *timings)
     * }
     */
    public static FunctionDescriptor gdk_frame_timings_ref$descriptor() {
        return gdk_frame_timings_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkFrameTimings *gdk_frame_timings_ref(GdkFrameTimings *timings)
     * }
     */
    public static MethodHandle gdk_frame_timings_ref$handle() {
        return gdk_frame_timings_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkFrameTimings *gdk_frame_timings_ref(GdkFrameTimings *timings)
     * }
     */
    public static MemorySegment gdk_frame_timings_ref(MemorySegment timings) {
        var mh$ = gdk_frame_timings_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_timings_ref", timings);
            }
            return (MemorySegment)mh$.invokeExact(timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_timings_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_timings_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_frame_timings_unref(GdkFrameTimings *timings)
     * }
     */
    public static FunctionDescriptor gdk_frame_timings_unref$descriptor() {
        return gdk_frame_timings_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_frame_timings_unref(GdkFrameTimings *timings)
     * }
     */
    public static MethodHandle gdk_frame_timings_unref$handle() {
        return gdk_frame_timings_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_frame_timings_unref(GdkFrameTimings *timings)
     * }
     */
    public static void gdk_frame_timings_unref(MemorySegment timings) {
        var mh$ = gdk_frame_timings_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_timings_unref", timings);
            }
            mh$.invokeExact(timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_timings_get_frame_counter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_timings_get_frame_counter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_frame_counter(GdkFrameTimings *timings)
     * }
     */
    public static FunctionDescriptor gdk_frame_timings_get_frame_counter$descriptor() {
        return gdk_frame_timings_get_frame_counter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_frame_counter(GdkFrameTimings *timings)
     * }
     */
    public static MethodHandle gdk_frame_timings_get_frame_counter$handle() {
        return gdk_frame_timings_get_frame_counter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_frame_counter(GdkFrameTimings *timings)
     * }
     */
    public static long gdk_frame_timings_get_frame_counter(MemorySegment timings) {
        var mh$ = gdk_frame_timings_get_frame_counter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_timings_get_frame_counter", timings);
            }
            return (long)mh$.invokeExact(timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_timings_get_complete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_timings_get_complete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_frame_timings_get_complete(GdkFrameTimings *timings)
     * }
     */
    public static FunctionDescriptor gdk_frame_timings_get_complete$descriptor() {
        return gdk_frame_timings_get_complete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_frame_timings_get_complete(GdkFrameTimings *timings)
     * }
     */
    public static MethodHandle gdk_frame_timings_get_complete$handle() {
        return gdk_frame_timings_get_complete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_frame_timings_get_complete(GdkFrameTimings *timings)
     * }
     */
    public static int gdk_frame_timings_get_complete(MemorySegment timings) {
        var mh$ = gdk_frame_timings_get_complete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_timings_get_complete", timings);
            }
            return (int)mh$.invokeExact(timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_timings_get_frame_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_timings_get_frame_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_frame_time(GdkFrameTimings *timings)
     * }
     */
    public static FunctionDescriptor gdk_frame_timings_get_frame_time$descriptor() {
        return gdk_frame_timings_get_frame_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_frame_time(GdkFrameTimings *timings)
     * }
     */
    public static MethodHandle gdk_frame_timings_get_frame_time$handle() {
        return gdk_frame_timings_get_frame_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_frame_time(GdkFrameTimings *timings)
     * }
     */
    public static long gdk_frame_timings_get_frame_time(MemorySegment timings) {
        var mh$ = gdk_frame_timings_get_frame_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_timings_get_frame_time", timings);
            }
            return (long)mh$.invokeExact(timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_timings_get_presentation_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_timings_get_presentation_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_presentation_time(GdkFrameTimings *timings)
     * }
     */
    public static FunctionDescriptor gdk_frame_timings_get_presentation_time$descriptor() {
        return gdk_frame_timings_get_presentation_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_presentation_time(GdkFrameTimings *timings)
     * }
     */
    public static MethodHandle gdk_frame_timings_get_presentation_time$handle() {
        return gdk_frame_timings_get_presentation_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_presentation_time(GdkFrameTimings *timings)
     * }
     */
    public static long gdk_frame_timings_get_presentation_time(MemorySegment timings) {
        var mh$ = gdk_frame_timings_get_presentation_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_timings_get_presentation_time", timings);
            }
            return (long)mh$.invokeExact(timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_timings_get_refresh_interval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_timings_get_refresh_interval"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_refresh_interval(GdkFrameTimings *timings)
     * }
     */
    public static FunctionDescriptor gdk_frame_timings_get_refresh_interval$descriptor() {
        return gdk_frame_timings_get_refresh_interval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_refresh_interval(GdkFrameTimings *timings)
     * }
     */
    public static MethodHandle gdk_frame_timings_get_refresh_interval$handle() {
        return gdk_frame_timings_get_refresh_interval.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_refresh_interval(GdkFrameTimings *timings)
     * }
     */
    public static long gdk_frame_timings_get_refresh_interval(MemorySegment timings) {
        var mh$ = gdk_frame_timings_get_refresh_interval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_timings_get_refresh_interval", timings);
            }
            return (long)mh$.invokeExact(timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_timings_get_predicted_presentation_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_timings_get_predicted_presentation_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_predicted_presentation_time(GdkFrameTimings *timings)
     * }
     */
    public static FunctionDescriptor gdk_frame_timings_get_predicted_presentation_time$descriptor() {
        return gdk_frame_timings_get_predicted_presentation_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_predicted_presentation_time(GdkFrameTimings *timings)
     * }
     */
    public static MethodHandle gdk_frame_timings_get_predicted_presentation_time$handle() {
        return gdk_frame_timings_get_predicted_presentation_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 gdk_frame_timings_get_predicted_presentation_time(GdkFrameTimings *timings)
     * }
     */
    public static long gdk_frame_timings_get_predicted_presentation_time(MemorySegment timings) {
        var mh$ = gdk_frame_timings_get_predicted_presentation_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_timings_get_predicted_presentation_time", timings);
            }
            return (long)mh$.invokeExact(timings);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_FRAME_CLOCK_PHASE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FRAME_CLOCK_PHASE_NONE = 0
     * }
     */
    public static int GDK_FRAME_CLOCK_PHASE_NONE() {
        return GDK_FRAME_CLOCK_PHASE_NONE;
    }
    private static final int GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS = 1
     * }
     */
    public static int GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS() {
        return GDK_FRAME_CLOCK_PHASE_FLUSH_EVENTS;
    }
    private static final int GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT = 2
     * }
     */
    public static int GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT() {
        return GDK_FRAME_CLOCK_PHASE_BEFORE_PAINT;
    }
    private static final int GDK_FRAME_CLOCK_PHASE_UPDATE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FRAME_CLOCK_PHASE_UPDATE = 4
     * }
     */
    public static int GDK_FRAME_CLOCK_PHASE_UPDATE() {
        return GDK_FRAME_CLOCK_PHASE_UPDATE;
    }
    private static final int GDK_FRAME_CLOCK_PHASE_LAYOUT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FRAME_CLOCK_PHASE_LAYOUT = 8
     * }
     */
    public static int GDK_FRAME_CLOCK_PHASE_LAYOUT() {
        return GDK_FRAME_CLOCK_PHASE_LAYOUT;
    }
    private static final int GDK_FRAME_CLOCK_PHASE_PAINT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FRAME_CLOCK_PHASE_PAINT = 16
     * }
     */
    public static int GDK_FRAME_CLOCK_PHASE_PAINT() {
        return GDK_FRAME_CLOCK_PHASE_PAINT;
    }
    private static final int GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS = 32
     * }
     */
    public static int GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS() {
        return GDK_FRAME_CLOCK_PHASE_RESUME_EVENTS;
    }
    private static final int GDK_FRAME_CLOCK_PHASE_AFTER_PAINT = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FRAME_CLOCK_PHASE_AFTER_PAINT = 64
     * }
     */
    public static int GDK_FRAME_CLOCK_PHASE_AFTER_PAINT() {
        return GDK_FRAME_CLOCK_PHASE_AFTER_PAINT;
    }

    private static class gdk_frame_clock_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_frame_clock_get_type()
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_get_type$descriptor() {
        return gdk_frame_clock_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_frame_clock_get_type()
     * }
     */
    public static MethodHandle gdk_frame_clock_get_type$handle() {
        return gdk_frame_clock_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_frame_clock_get_type()
     * }
     */
    public static long gdk_frame_clock_get_type() {
        var mh$ = gdk_frame_clock_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_clock_get_frame_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_get_frame_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_clock_get_frame_time(GdkFrameClock *frame_clock)
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_get_frame_time$descriptor() {
        return gdk_frame_clock_get_frame_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_clock_get_frame_time(GdkFrameClock *frame_clock)
     * }
     */
    public static MethodHandle gdk_frame_clock_get_frame_time$handle() {
        return gdk_frame_clock_get_frame_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 gdk_frame_clock_get_frame_time(GdkFrameClock *frame_clock)
     * }
     */
    public static long gdk_frame_clock_get_frame_time(MemorySegment frame_clock) {
        var mh$ = gdk_frame_clock_get_frame_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_get_frame_time", frame_clock);
            }
            return (long)mh$.invokeExact(frame_clock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_clock_request_phase {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_request_phase"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_frame_clock_request_phase(GdkFrameClock *frame_clock, GdkFrameClockPhase phase)
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_request_phase$descriptor() {
        return gdk_frame_clock_request_phase.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_frame_clock_request_phase(GdkFrameClock *frame_clock, GdkFrameClockPhase phase)
     * }
     */
    public static MethodHandle gdk_frame_clock_request_phase$handle() {
        return gdk_frame_clock_request_phase.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_frame_clock_request_phase(GdkFrameClock *frame_clock, GdkFrameClockPhase phase)
     * }
     */
    public static void gdk_frame_clock_request_phase(MemorySegment frame_clock, int phase) {
        var mh$ = gdk_frame_clock_request_phase.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_request_phase", frame_clock, phase);
            }
            mh$.invokeExact(frame_clock, phase);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_clock_begin_updating {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_begin_updating"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_frame_clock_begin_updating(GdkFrameClock *frame_clock)
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_begin_updating$descriptor() {
        return gdk_frame_clock_begin_updating.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_frame_clock_begin_updating(GdkFrameClock *frame_clock)
     * }
     */
    public static MethodHandle gdk_frame_clock_begin_updating$handle() {
        return gdk_frame_clock_begin_updating.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_frame_clock_begin_updating(GdkFrameClock *frame_clock)
     * }
     */
    public static void gdk_frame_clock_begin_updating(MemorySegment frame_clock) {
        var mh$ = gdk_frame_clock_begin_updating.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_begin_updating", frame_clock);
            }
            mh$.invokeExact(frame_clock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_clock_end_updating {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_end_updating"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_frame_clock_end_updating(GdkFrameClock *frame_clock)
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_end_updating$descriptor() {
        return gdk_frame_clock_end_updating.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_frame_clock_end_updating(GdkFrameClock *frame_clock)
     * }
     */
    public static MethodHandle gdk_frame_clock_end_updating$handle() {
        return gdk_frame_clock_end_updating.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_frame_clock_end_updating(GdkFrameClock *frame_clock)
     * }
     */
    public static void gdk_frame_clock_end_updating(MemorySegment frame_clock) {
        var mh$ = gdk_frame_clock_end_updating.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_end_updating", frame_clock);
            }
            mh$.invokeExact(frame_clock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_clock_get_frame_counter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_get_frame_counter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_clock_get_frame_counter(GdkFrameClock *frame_clock)
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_get_frame_counter$descriptor() {
        return gdk_frame_clock_get_frame_counter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_clock_get_frame_counter(GdkFrameClock *frame_clock)
     * }
     */
    public static MethodHandle gdk_frame_clock_get_frame_counter$handle() {
        return gdk_frame_clock_get_frame_counter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 gdk_frame_clock_get_frame_counter(GdkFrameClock *frame_clock)
     * }
     */
    public static long gdk_frame_clock_get_frame_counter(MemorySegment frame_clock) {
        var mh$ = gdk_frame_clock_get_frame_counter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_get_frame_counter", frame_clock);
            }
            return (long)mh$.invokeExact(frame_clock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_clock_get_history_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_get_history_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_clock_get_history_start(GdkFrameClock *frame_clock)
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_get_history_start$descriptor() {
        return gdk_frame_clock_get_history_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 gdk_frame_clock_get_history_start(GdkFrameClock *frame_clock)
     * }
     */
    public static MethodHandle gdk_frame_clock_get_history_start$handle() {
        return gdk_frame_clock_get_history_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 gdk_frame_clock_get_history_start(GdkFrameClock *frame_clock)
     * }
     */
    public static long gdk_frame_clock_get_history_start(MemorySegment frame_clock) {
        var mh$ = gdk_frame_clock_get_history_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_get_history_start", frame_clock);
            }
            return (long)mh$.invokeExact(frame_clock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_clock_get_timings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_get_timings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkFrameTimings *gdk_frame_clock_get_timings(GdkFrameClock *frame_clock, gint64 frame_counter)
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_get_timings$descriptor() {
        return gdk_frame_clock_get_timings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkFrameTimings *gdk_frame_clock_get_timings(GdkFrameClock *frame_clock, gint64 frame_counter)
     * }
     */
    public static MethodHandle gdk_frame_clock_get_timings$handle() {
        return gdk_frame_clock_get_timings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkFrameTimings *gdk_frame_clock_get_timings(GdkFrameClock *frame_clock, gint64 frame_counter)
     * }
     */
    public static MemorySegment gdk_frame_clock_get_timings(MemorySegment frame_clock, long frame_counter) {
        var mh$ = gdk_frame_clock_get_timings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_get_timings", frame_clock, frame_counter);
            }
            return (MemorySegment)mh$.invokeExact(frame_clock, frame_counter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_clock_get_current_timings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_get_current_timings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkFrameTimings *gdk_frame_clock_get_current_timings(GdkFrameClock *frame_clock)
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_get_current_timings$descriptor() {
        return gdk_frame_clock_get_current_timings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkFrameTimings *gdk_frame_clock_get_current_timings(GdkFrameClock *frame_clock)
     * }
     */
    public static MethodHandle gdk_frame_clock_get_current_timings$handle() {
        return gdk_frame_clock_get_current_timings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkFrameTimings *gdk_frame_clock_get_current_timings(GdkFrameClock *frame_clock)
     * }
     */
    public static MemorySegment gdk_frame_clock_get_current_timings(MemorySegment frame_clock) {
        var mh$ = gdk_frame_clock_get_current_timings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_get_current_timings", frame_clock);
            }
            return (MemorySegment)mh$.invokeExact(frame_clock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_frame_clock_get_refresh_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_frame_clock_get_refresh_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_frame_clock_get_refresh_info(GdkFrameClock *frame_clock, gint64 base_time, gint64 *refresh_interval_return, gint64 *presentation_time_return)
     * }
     */
    public static FunctionDescriptor gdk_frame_clock_get_refresh_info$descriptor() {
        return gdk_frame_clock_get_refresh_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_frame_clock_get_refresh_info(GdkFrameClock *frame_clock, gint64 base_time, gint64 *refresh_interval_return, gint64 *presentation_time_return)
     * }
     */
    public static MethodHandle gdk_frame_clock_get_refresh_info$handle() {
        return gdk_frame_clock_get_refresh_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_frame_clock_get_refresh_info(GdkFrameClock *frame_clock, gint64 base_time, gint64 *refresh_interval_return, gint64 *presentation_time_return)
     * }
     */
    public static void gdk_frame_clock_get_refresh_info(MemorySegment frame_clock, long base_time, MemorySegment refresh_interval_return, MemorySegment presentation_time_return) {
        var mh$ = gdk_frame_clock_get_refresh_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_frame_clock_get_refresh_info", frame_clock, base_time, refresh_interval_return, presentation_time_return);
            }
            mh$.invokeExact(frame_clock, base_time, refresh_interval_return, presentation_time_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int GDK_INPUT_OUTPUT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_INPUT_OUTPUT = 0
     * }
     */
    public static int GDK_INPUT_OUTPUT() {
        return GDK_INPUT_OUTPUT;
    }
    private static final int GDK_INPUT_ONLY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_INPUT_ONLY = 1
     * }
     */
    public static int GDK_INPUT_ONLY() {
        return GDK_INPUT_ONLY;
    }
    private static final int GDK_WINDOW_ROOT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_ROOT = 0
     * }
     */
    public static int GDK_WINDOW_ROOT() {
        return GDK_WINDOW_ROOT;
    }
    private static final int GDK_WINDOW_TOPLEVEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TOPLEVEL = 1
     * }
     */
    public static int GDK_WINDOW_TOPLEVEL() {
        return GDK_WINDOW_TOPLEVEL;
    }
    private static final int GDK_WINDOW_CHILD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_CHILD = 2
     * }
     */
    public static int GDK_WINDOW_CHILD() {
        return GDK_WINDOW_CHILD;
    }
    private static final int GDK_WINDOW_TEMP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_TEMP = 3
     * }
     */
    public static int GDK_WINDOW_TEMP() {
        return GDK_WINDOW_TEMP;
    }
    private static final int GDK_WINDOW_FOREIGN = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_FOREIGN = 4
     * }
     */
    public static int GDK_WINDOW_FOREIGN() {
        return GDK_WINDOW_FOREIGN;
    }
    private static final int GDK_WINDOW_OFFSCREEN = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_OFFSCREEN = 5
     * }
     */
    public static int GDK_WINDOW_OFFSCREEN() {
        return GDK_WINDOW_OFFSCREEN;
    }
    private static final int GDK_WINDOW_SUBSURFACE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_SUBSURFACE = 6
     * }
     */
    public static int GDK_WINDOW_SUBSURFACE() {
        return GDK_WINDOW_SUBSURFACE;
    }
    private static final int GDK_WA_TITLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WA_TITLE = 2
     * }
     */
    public static int GDK_WA_TITLE() {
        return GDK_WA_TITLE;
    }
    private static final int GDK_WA_X = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WA_X = 4
     * }
     */
    public static int GDK_WA_X() {
        return GDK_WA_X;
    }
    private static final int GDK_WA_Y = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WA_Y = 8
     * }
     */
    public static int GDK_WA_Y() {
        return GDK_WA_Y;
    }
    private static final int GDK_WA_CURSOR = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WA_CURSOR = 16
     * }
     */
    public static int GDK_WA_CURSOR() {
        return GDK_WA_CURSOR;
    }
    private static final int GDK_WA_VISUAL = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WA_VISUAL = 32
     * }
     */
    public static int GDK_WA_VISUAL() {
        return GDK_WA_VISUAL;
    }
    private static final int GDK_WA_WMCLASS = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WA_WMCLASS = 64
     * }
     */
    public static int GDK_WA_WMCLASS() {
        return GDK_WA_WMCLASS;
    }
    private static final int GDK_WA_NOREDIR = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WA_NOREDIR = 128
     * }
     */
    public static int GDK_WA_NOREDIR() {
        return GDK_WA_NOREDIR;
    }
    private static final int GDK_WA_TYPE_HINT = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WA_TYPE_HINT = 256
     * }
     */
    public static int GDK_WA_TYPE_HINT() {
        return GDK_WA_TYPE_HINT;
    }
    private static final int GDK_HINT_POS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HINT_POS = 1
     * }
     */
    public static int GDK_HINT_POS() {
        return GDK_HINT_POS;
    }
    private static final int GDK_HINT_MIN_SIZE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HINT_MIN_SIZE = 2
     * }
     */
    public static int GDK_HINT_MIN_SIZE() {
        return GDK_HINT_MIN_SIZE;
    }
    private static final int GDK_HINT_MAX_SIZE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HINT_MAX_SIZE = 4
     * }
     */
    public static int GDK_HINT_MAX_SIZE() {
        return GDK_HINT_MAX_SIZE;
    }
    private static final int GDK_HINT_BASE_SIZE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HINT_BASE_SIZE = 8
     * }
     */
    public static int GDK_HINT_BASE_SIZE() {
        return GDK_HINT_BASE_SIZE;
    }
    private static final int GDK_HINT_ASPECT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HINT_ASPECT = 16
     * }
     */
    public static int GDK_HINT_ASPECT() {
        return GDK_HINT_ASPECT;
    }
    private static final int GDK_HINT_RESIZE_INC = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HINT_RESIZE_INC = 32
     * }
     */
    public static int GDK_HINT_RESIZE_INC() {
        return GDK_HINT_RESIZE_INC;
    }
    private static final int GDK_HINT_WIN_GRAVITY = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HINT_WIN_GRAVITY = 64
     * }
     */
    public static int GDK_HINT_WIN_GRAVITY() {
        return GDK_HINT_WIN_GRAVITY;
    }
    private static final int GDK_HINT_USER_POS = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HINT_USER_POS = 128
     * }
     */
    public static int GDK_HINT_USER_POS() {
        return GDK_HINT_USER_POS;
    }
    private static final int GDK_HINT_USER_SIZE = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_HINT_USER_SIZE = 256
     * }
     */
    public static int GDK_HINT_USER_SIZE() {
        return GDK_HINT_USER_SIZE;
    }
    private static final int GDK_DECOR_ALL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DECOR_ALL = 1
     * }
     */
    public static int GDK_DECOR_ALL() {
        return GDK_DECOR_ALL;
    }
    private static final int GDK_DECOR_BORDER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DECOR_BORDER = 2
     * }
     */
    public static int GDK_DECOR_BORDER() {
        return GDK_DECOR_BORDER;
    }
    private static final int GDK_DECOR_RESIZEH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DECOR_RESIZEH = 4
     * }
     */
    public static int GDK_DECOR_RESIZEH() {
        return GDK_DECOR_RESIZEH;
    }
    private static final int GDK_DECOR_TITLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DECOR_TITLE = 8
     * }
     */
    public static int GDK_DECOR_TITLE() {
        return GDK_DECOR_TITLE;
    }
    private static final int GDK_DECOR_MENU = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DECOR_MENU = 16
     * }
     */
    public static int GDK_DECOR_MENU() {
        return GDK_DECOR_MENU;
    }
    private static final int GDK_DECOR_MINIMIZE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DECOR_MINIMIZE = 32
     * }
     */
    public static int GDK_DECOR_MINIMIZE() {
        return GDK_DECOR_MINIMIZE;
    }
    private static final int GDK_DECOR_MAXIMIZE = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_DECOR_MAXIMIZE = 64
     * }
     */
    public static int GDK_DECOR_MAXIMIZE() {
        return GDK_DECOR_MAXIMIZE;
    }
    private static final int GDK_FUNC_ALL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FUNC_ALL = 1
     * }
     */
    public static int GDK_FUNC_ALL() {
        return GDK_FUNC_ALL;
    }
    private static final int GDK_FUNC_RESIZE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FUNC_RESIZE = 2
     * }
     */
    public static int GDK_FUNC_RESIZE() {
        return GDK_FUNC_RESIZE;
    }
    private static final int GDK_FUNC_MOVE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FUNC_MOVE = 4
     * }
     */
    public static int GDK_FUNC_MOVE() {
        return GDK_FUNC_MOVE;
    }
    private static final int GDK_FUNC_MINIMIZE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FUNC_MINIMIZE = 8
     * }
     */
    public static int GDK_FUNC_MINIMIZE() {
        return GDK_FUNC_MINIMIZE;
    }
    private static final int GDK_FUNC_MAXIMIZE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FUNC_MAXIMIZE = 16
     * }
     */
    public static int GDK_FUNC_MAXIMIZE() {
        return GDK_FUNC_MAXIMIZE;
    }
    private static final int GDK_FUNC_CLOSE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FUNC_CLOSE = 32
     * }
     */
    public static int GDK_FUNC_CLOSE() {
        return GDK_FUNC_CLOSE;
    }
    private static final int GDK_GRAVITY_NORTH_WEST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAVITY_NORTH_WEST = 1
     * }
     */
    public static int GDK_GRAVITY_NORTH_WEST() {
        return GDK_GRAVITY_NORTH_WEST;
    }
    private static final int GDK_GRAVITY_NORTH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAVITY_NORTH = 2
     * }
     */
    public static int GDK_GRAVITY_NORTH() {
        return GDK_GRAVITY_NORTH;
    }
    private static final int GDK_GRAVITY_NORTH_EAST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAVITY_NORTH_EAST = 3
     * }
     */
    public static int GDK_GRAVITY_NORTH_EAST() {
        return GDK_GRAVITY_NORTH_EAST;
    }
    private static final int GDK_GRAVITY_WEST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAVITY_WEST = 4
     * }
     */
    public static int GDK_GRAVITY_WEST() {
        return GDK_GRAVITY_WEST;
    }
    private static final int GDK_GRAVITY_CENTER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAVITY_CENTER = 5
     * }
     */
    public static int GDK_GRAVITY_CENTER() {
        return GDK_GRAVITY_CENTER;
    }
    private static final int GDK_GRAVITY_EAST = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAVITY_EAST = 6
     * }
     */
    public static int GDK_GRAVITY_EAST() {
        return GDK_GRAVITY_EAST;
    }
    private static final int GDK_GRAVITY_SOUTH_WEST = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAVITY_SOUTH_WEST = 7
     * }
     */
    public static int GDK_GRAVITY_SOUTH_WEST() {
        return GDK_GRAVITY_SOUTH_WEST;
    }
    private static final int GDK_GRAVITY_SOUTH = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAVITY_SOUTH = 8
     * }
     */
    public static int GDK_GRAVITY_SOUTH() {
        return GDK_GRAVITY_SOUTH;
    }
    private static final int GDK_GRAVITY_SOUTH_EAST = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAVITY_SOUTH_EAST = 9
     * }
     */
    public static int GDK_GRAVITY_SOUTH_EAST() {
        return GDK_GRAVITY_SOUTH_EAST;
    }
    private static final int GDK_GRAVITY_STATIC = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_GRAVITY_STATIC = 10
     * }
     */
    public static int GDK_GRAVITY_STATIC() {
        return GDK_GRAVITY_STATIC;
    }
    private static final int GDK_ANCHOR_FLIP_X = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ANCHOR_FLIP_X = 1
     * }
     */
    public static int GDK_ANCHOR_FLIP_X() {
        return GDK_ANCHOR_FLIP_X;
    }
    private static final int GDK_ANCHOR_FLIP_Y = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ANCHOR_FLIP_Y = 2
     * }
     */
    public static int GDK_ANCHOR_FLIP_Y() {
        return GDK_ANCHOR_FLIP_Y;
    }
    private static final int GDK_ANCHOR_SLIDE_X = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ANCHOR_SLIDE_X = 4
     * }
     */
    public static int GDK_ANCHOR_SLIDE_X() {
        return GDK_ANCHOR_SLIDE_X;
    }
    private static final int GDK_ANCHOR_SLIDE_Y = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ANCHOR_SLIDE_Y = 8
     * }
     */
    public static int GDK_ANCHOR_SLIDE_Y() {
        return GDK_ANCHOR_SLIDE_Y;
    }
    private static final int GDK_ANCHOR_RESIZE_X = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ANCHOR_RESIZE_X = 16
     * }
     */
    public static int GDK_ANCHOR_RESIZE_X() {
        return GDK_ANCHOR_RESIZE_X;
    }
    private static final int GDK_ANCHOR_RESIZE_Y = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ANCHOR_RESIZE_Y = 32
     * }
     */
    public static int GDK_ANCHOR_RESIZE_Y() {
        return GDK_ANCHOR_RESIZE_Y;
    }
    private static final int GDK_ANCHOR_FLIP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ANCHOR_FLIP = 3
     * }
     */
    public static int GDK_ANCHOR_FLIP() {
        return GDK_ANCHOR_FLIP;
    }
    private static final int GDK_ANCHOR_SLIDE = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ANCHOR_SLIDE = 12
     * }
     */
    public static int GDK_ANCHOR_SLIDE() {
        return GDK_ANCHOR_SLIDE;
    }
    private static final int GDK_ANCHOR_RESIZE = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_ANCHOR_RESIZE = 48
     * }
     */
    public static int GDK_ANCHOR_RESIZE() {
        return GDK_ANCHOR_RESIZE;
    }
    private static final int GDK_WINDOW_EDGE_NORTH_WEST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_EDGE_NORTH_WEST = 0
     * }
     */
    public static int GDK_WINDOW_EDGE_NORTH_WEST() {
        return GDK_WINDOW_EDGE_NORTH_WEST;
    }
    private static final int GDK_WINDOW_EDGE_NORTH = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_EDGE_NORTH = 1
     * }
     */
    public static int GDK_WINDOW_EDGE_NORTH() {
        return GDK_WINDOW_EDGE_NORTH;
    }
    private static final int GDK_WINDOW_EDGE_NORTH_EAST = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_EDGE_NORTH_EAST = 2
     * }
     */
    public static int GDK_WINDOW_EDGE_NORTH_EAST() {
        return GDK_WINDOW_EDGE_NORTH_EAST;
    }
    private static final int GDK_WINDOW_EDGE_WEST = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_EDGE_WEST = 3
     * }
     */
    public static int GDK_WINDOW_EDGE_WEST() {
        return GDK_WINDOW_EDGE_WEST;
    }
    private static final int GDK_WINDOW_EDGE_EAST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_EDGE_EAST = 4
     * }
     */
    public static int GDK_WINDOW_EDGE_EAST() {
        return GDK_WINDOW_EDGE_EAST;
    }
    private static final int GDK_WINDOW_EDGE_SOUTH_WEST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_EDGE_SOUTH_WEST = 5
     * }
     */
    public static int GDK_WINDOW_EDGE_SOUTH_WEST() {
        return GDK_WINDOW_EDGE_SOUTH_WEST;
    }
    private static final int GDK_WINDOW_EDGE_SOUTH = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_EDGE_SOUTH = 6
     * }
     */
    public static int GDK_WINDOW_EDGE_SOUTH() {
        return GDK_WINDOW_EDGE_SOUTH;
    }
    private static final int GDK_WINDOW_EDGE_SOUTH_EAST = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_WINDOW_EDGE_SOUTH_EAST = 7
     * }
     */
    public static int GDK_WINDOW_EDGE_SOUTH_EAST() {
        return GDK_WINDOW_EDGE_SOUTH_EAST;
    }
    private static final int GDK_FULLSCREEN_ON_CURRENT_MONITOR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FULLSCREEN_ON_CURRENT_MONITOR = 0
     * }
     */
    public static int GDK_FULLSCREEN_ON_CURRENT_MONITOR() {
        return GDK_FULLSCREEN_ON_CURRENT_MONITOR;
    }
    private static final int GDK_FULLSCREEN_ON_ALL_MONITORS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GDK_FULLSCREEN_ON_ALL_MONITORS = 1
     * }
     */
    public static int GDK_FULLSCREEN_ON_ALL_MONITORS() {
        return GDK_FULLSCREEN_ON_ALL_MONITORS;
    }

    private static class gdk_window_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gdk_window_get_type()
     * }
     */
    public static FunctionDescriptor gdk_window_get_type$descriptor() {
        return gdk_window_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gdk_window_get_type()
     * }
     */
    public static MethodHandle gdk_window_get_type$handle() {
        return gdk_window_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gdk_window_get_type()
     * }
     */
    public static long gdk_window_get_type() {
        var mh$ = gdk_window_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_new(GdkWindow *parent, GdkWindowAttr *attributes, gint attributes_mask)
     * }
     */
    public static FunctionDescriptor gdk_window_new$descriptor() {
        return gdk_window_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_new(GdkWindow *parent, GdkWindowAttr *attributes, gint attributes_mask)
     * }
     */
    public static MethodHandle gdk_window_new$handle() {
        return gdk_window_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_new(GdkWindow *parent, GdkWindowAttr *attributes, gint attributes_mask)
     * }
     */
    public static MemorySegment gdk_window_new(MemorySegment parent, MemorySegment attributes, int attributes_mask) {
        var mh$ = gdk_window_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_new", parent, attributes, attributes_mask);
            }
            return (MemorySegment)mh$.invokeExact(parent, attributes, attributes_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_destroy(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_destroy$descriptor() {
        return gdk_window_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_destroy(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_destroy$handle() {
        return gdk_window_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_destroy(GdkWindow *window)
     * }
     */
    public static void gdk_window_destroy(MemorySegment window) {
        var mh$ = gdk_window_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_destroy", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_window_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_window_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindowType gdk_window_get_window_type(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_window_type$descriptor() {
        return gdk_window_get_window_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindowType gdk_window_get_window_type(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_window_type$handle() {
        return gdk_window_get_window_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindowType gdk_window_get_window_type(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_window_type(MemorySegment window) {
        var mh$ = gdk_window_get_window_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_window_type", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_is_destroyed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_is_destroyed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_destroyed(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_is_destroyed$descriptor() {
        return gdk_window_is_destroyed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_destroyed(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_is_destroyed$handle() {
        return gdk_window_is_destroyed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_destroyed(GdkWindow *window)
     * }
     */
    public static int gdk_window_is_destroyed(MemorySegment window) {
        var mh$ = gdk_window_is_destroyed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_is_destroyed", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_visual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_visual"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_window_get_visual(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_visual$descriptor() {
        return gdk_window_get_visual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisual *gdk_window_get_visual(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_visual$handle() {
        return gdk_window_get_visual.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisual *gdk_window_get_visual(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_visual(MemorySegment window) {
        var mh$ = gdk_window_get_visual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_visual", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_window_get_screen(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_screen$descriptor() {
        return gdk_window_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gdk_window_get_screen(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_screen$handle() {
        return gdk_window_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gdk_window_get_screen(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_screen(MemorySegment window) {
        var mh$ = gdk_window_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_screen", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_window_get_display(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_display$descriptor() {
        return gdk_window_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_window_get_display(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_display$handle() {
        return gdk_window_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gdk_window_get_display(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_display(MemorySegment window) {
        var mh$ = gdk_window_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_display", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_at_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_at_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_at_pointer(gint *win_x, gint *win_y)
     * }
     */
    public static FunctionDescriptor gdk_window_at_pointer$descriptor() {
        return gdk_window_at_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_at_pointer(gint *win_x, gint *win_y)
     * }
     */
    public static MethodHandle gdk_window_at_pointer$handle() {
        return gdk_window_at_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_at_pointer(gint *win_x, gint *win_y)
     * }
     */
    public static MemorySegment gdk_window_at_pointer(MemorySegment win_x, MemorySegment win_y) {
        var mh$ = gdk_window_at_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_at_pointer", win_x, win_y);
            }
            return (MemorySegment)mh$.invokeExact(win_x, win_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_show {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_show"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_show(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_show$descriptor() {
        return gdk_window_show.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_show(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_show$handle() {
        return gdk_window_show.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_show(GdkWindow *window)
     * }
     */
    public static void gdk_window_show(MemorySegment window) {
        var mh$ = gdk_window_show.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_show", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_hide {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_hide"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_hide(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_hide$descriptor() {
        return gdk_window_hide.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_hide(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_hide$handle() {
        return gdk_window_hide.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_hide(GdkWindow *window)
     * }
     */
    public static void gdk_window_hide(MemorySegment window) {
        var mh$ = gdk_window_hide.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_hide", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_withdraw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_withdraw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_withdraw(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_withdraw$descriptor() {
        return gdk_window_withdraw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_withdraw(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_withdraw$handle() {
        return gdk_window_withdraw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_withdraw(GdkWindow *window)
     * }
     */
    public static void gdk_window_withdraw(MemorySegment window) {
        var mh$ = gdk_window_withdraw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_withdraw", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_show_unraised {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_show_unraised"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_show_unraised(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_show_unraised$descriptor() {
        return gdk_window_show_unraised.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_show_unraised(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_show_unraised$handle() {
        return gdk_window_show_unraised.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_show_unraised(GdkWindow *window)
     * }
     */
    public static void gdk_window_show_unraised(MemorySegment window) {
        var mh$ = gdk_window_show_unraised.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_show_unraised", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_move {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_move"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_move(GdkWindow *window, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gdk_window_move$descriptor() {
        return gdk_window_move.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_move(GdkWindow *window, gint x, gint y)
     * }
     */
    public static MethodHandle gdk_window_move$handle() {
        return gdk_window_move.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_move(GdkWindow *window, gint x, gint y)
     * }
     */
    public static void gdk_window_move(MemorySegment window, int x, int y) {
        var mh$ = gdk_window_move.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_move", window, x, y);
            }
            mh$.invokeExact(window, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_resize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_resize(GdkWindow *window, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gdk_window_resize$descriptor() {
        return gdk_window_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_resize(GdkWindow *window, gint width, gint height)
     * }
     */
    public static MethodHandle gdk_window_resize$handle() {
        return gdk_window_resize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_resize(GdkWindow *window, gint width, gint height)
     * }
     */
    public static void gdk_window_resize(MemorySegment window, int width, int height) {
        var mh$ = gdk_window_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_resize", window, width, height);
            }
            mh$.invokeExact(window, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_move_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_move_resize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_move_resize(GdkWindow *window, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gdk_window_move_resize$descriptor() {
        return gdk_window_move_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_move_resize(GdkWindow *window, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gdk_window_move_resize$handle() {
        return gdk_window_move_resize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_move_resize(GdkWindow *window, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gdk_window_move_resize(MemorySegment window, int x, int y, int width, int height) {
        var mh$ = gdk_window_move_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_move_resize", window, x, y, width, height);
            }
            mh$.invokeExact(window, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_move_to_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_move_to_rect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_move_to_rect(GdkWindow *window, const GdkRectangle *rect, GdkGravity rect_anchor, GdkGravity window_anchor, GdkAnchorHints anchor_hints, gint rect_anchor_dx, gint rect_anchor_dy)
     * }
     */
    public static FunctionDescriptor gdk_window_move_to_rect$descriptor() {
        return gdk_window_move_to_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_move_to_rect(GdkWindow *window, const GdkRectangle *rect, GdkGravity rect_anchor, GdkGravity window_anchor, GdkAnchorHints anchor_hints, gint rect_anchor_dx, gint rect_anchor_dy)
     * }
     */
    public static MethodHandle gdk_window_move_to_rect$handle() {
        return gdk_window_move_to_rect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_move_to_rect(GdkWindow *window, const GdkRectangle *rect, GdkGravity rect_anchor, GdkGravity window_anchor, GdkAnchorHints anchor_hints, gint rect_anchor_dx, gint rect_anchor_dy)
     * }
     */
    public static void gdk_window_move_to_rect(MemorySegment window, MemorySegment rect, int rect_anchor, int window_anchor, int anchor_hints, int rect_anchor_dx, int rect_anchor_dy) {
        var mh$ = gdk_window_move_to_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_move_to_rect", window, rect, rect_anchor, window_anchor, anchor_hints, rect_anchor_dx, rect_anchor_dy);
            }
            mh$.invokeExact(window, rect, rect_anchor, window_anchor, anchor_hints, rect_anchor_dx, rect_anchor_dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_reparent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_reparent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_reparent(GdkWindow *window, GdkWindow *new_parent, gint x, gint y)
     * }
     */
    public static FunctionDescriptor gdk_window_reparent$descriptor() {
        return gdk_window_reparent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_reparent(GdkWindow *window, GdkWindow *new_parent, gint x, gint y)
     * }
     */
    public static MethodHandle gdk_window_reparent$handle() {
        return gdk_window_reparent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_reparent(GdkWindow *window, GdkWindow *new_parent, gint x, gint y)
     * }
     */
    public static void gdk_window_reparent(MemorySegment window, MemorySegment new_parent, int x, int y) {
        var mh$ = gdk_window_reparent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_reparent", window, new_parent, x, y);
            }
            mh$.invokeExact(window, new_parent, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_raise {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_raise"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_raise(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_raise$descriptor() {
        return gdk_window_raise.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_raise(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_raise$handle() {
        return gdk_window_raise.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_raise(GdkWindow *window)
     * }
     */
    public static void gdk_window_raise(MemorySegment window) {
        var mh$ = gdk_window_raise.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_raise", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_lower {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_lower"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_lower(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_lower$descriptor() {
        return gdk_window_lower.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_lower(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_lower$handle() {
        return gdk_window_lower.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_lower(GdkWindow *window)
     * }
     */
    public static void gdk_window_lower(MemorySegment window) {
        var mh$ = gdk_window_lower.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_lower", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_restack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_restack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_restack(GdkWindow *window, GdkWindow *sibling, gboolean above)
     * }
     */
    public static FunctionDescriptor gdk_window_restack$descriptor() {
        return gdk_window_restack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_restack(GdkWindow *window, GdkWindow *sibling, gboolean above)
     * }
     */
    public static MethodHandle gdk_window_restack$handle() {
        return gdk_window_restack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_restack(GdkWindow *window, GdkWindow *sibling, gboolean above)
     * }
     */
    public static void gdk_window_restack(MemorySegment window, MemorySegment sibling, int above) {
        var mh$ = gdk_window_restack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_restack", window, sibling, above);
            }
            mh$.invokeExact(window, sibling, above);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_focus(GdkWindow *window, guint32 timestamp)
     * }
     */
    public static FunctionDescriptor gdk_window_focus$descriptor() {
        return gdk_window_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_focus(GdkWindow *window, guint32 timestamp)
     * }
     */
    public static MethodHandle gdk_window_focus$handle() {
        return gdk_window_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_focus(GdkWindow *window, guint32 timestamp)
     * }
     */
    public static void gdk_window_focus(MemorySegment window, int timestamp) {
        var mh$ = gdk_window_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_focus", window, timestamp);
            }
            mh$.invokeExact(window, timestamp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_user_data(GdkWindow *window, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gdk_window_set_user_data$descriptor() {
        return gdk_window_set_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_user_data(GdkWindow *window, gpointer user_data)
     * }
     */
    public static MethodHandle gdk_window_set_user_data$handle() {
        return gdk_window_set_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_user_data(GdkWindow *window, gpointer user_data)
     * }
     */
    public static void gdk_window_set_user_data(MemorySegment window, MemorySegment user_data) {
        var mh$ = gdk_window_set_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_user_data", window, user_data);
            }
            mh$.invokeExact(window, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_override_redirect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_override_redirect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_override_redirect(GdkWindow *window, gboolean override_redirect)
     * }
     */
    public static FunctionDescriptor gdk_window_set_override_redirect$descriptor() {
        return gdk_window_set_override_redirect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_override_redirect(GdkWindow *window, gboolean override_redirect)
     * }
     */
    public static MethodHandle gdk_window_set_override_redirect$handle() {
        return gdk_window_set_override_redirect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_override_redirect(GdkWindow *window, gboolean override_redirect)
     * }
     */
    public static void gdk_window_set_override_redirect(MemorySegment window, int override_redirect) {
        var mh$ = gdk_window_set_override_redirect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_override_redirect", window, override_redirect);
            }
            mh$.invokeExact(window, override_redirect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_accept_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_accept_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_accept_focus(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_accept_focus$descriptor() {
        return gdk_window_get_accept_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_accept_focus(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_accept_focus$handle() {
        return gdk_window_get_accept_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_accept_focus(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_accept_focus(MemorySegment window) {
        var mh$ = gdk_window_get_accept_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_accept_focus", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_accept_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_accept_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_accept_focus(GdkWindow *window, gboolean accept_focus)
     * }
     */
    public static FunctionDescriptor gdk_window_set_accept_focus$descriptor() {
        return gdk_window_set_accept_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_accept_focus(GdkWindow *window, gboolean accept_focus)
     * }
     */
    public static MethodHandle gdk_window_set_accept_focus$handle() {
        return gdk_window_set_accept_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_accept_focus(GdkWindow *window, gboolean accept_focus)
     * }
     */
    public static void gdk_window_set_accept_focus(MemorySegment window, int accept_focus) {
        var mh$ = gdk_window_set_accept_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_accept_focus", window, accept_focus);
            }
            mh$.invokeExact(window, accept_focus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_focus_on_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_focus_on_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_focus_on_map(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_focus_on_map$descriptor() {
        return gdk_window_get_focus_on_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_focus_on_map(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_focus_on_map$handle() {
        return gdk_window_get_focus_on_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_focus_on_map(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_focus_on_map(MemorySegment window) {
        var mh$ = gdk_window_get_focus_on_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_focus_on_map", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_focus_on_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_focus_on_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_focus_on_map(GdkWindow *window, gboolean focus_on_map)
     * }
     */
    public static FunctionDescriptor gdk_window_set_focus_on_map$descriptor() {
        return gdk_window_set_focus_on_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_focus_on_map(GdkWindow *window, gboolean focus_on_map)
     * }
     */
    public static MethodHandle gdk_window_set_focus_on_map$handle() {
        return gdk_window_set_focus_on_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_focus_on_map(GdkWindow *window, gboolean focus_on_map)
     * }
     */
    public static void gdk_window_set_focus_on_map(MemorySegment window, int focus_on_map) {
        var mh$ = gdk_window_set_focus_on_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_focus_on_map", window, focus_on_map);
            }
            mh$.invokeExact(window, focus_on_map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_add_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_add_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_add_filter(GdkWindow *window, GdkFilterFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor gdk_window_add_filter$descriptor() {
        return gdk_window_add_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_add_filter(GdkWindow *window, GdkFilterFunc function, gpointer data)
     * }
     */
    public static MethodHandle gdk_window_add_filter$handle() {
        return gdk_window_add_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_add_filter(GdkWindow *window, GdkFilterFunc function, gpointer data)
     * }
     */
    public static void gdk_window_add_filter(MemorySegment window, MemorySegment function, MemorySegment data) {
        var mh$ = gdk_window_add_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_add_filter", window, function, data);
            }
            mh$.invokeExact(window, function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_remove_filter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_remove_filter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_remove_filter(GdkWindow *window, GdkFilterFunc function, gpointer data)
     * }
     */
    public static FunctionDescriptor gdk_window_remove_filter$descriptor() {
        return gdk_window_remove_filter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_remove_filter(GdkWindow *window, GdkFilterFunc function, gpointer data)
     * }
     */
    public static MethodHandle gdk_window_remove_filter$handle() {
        return gdk_window_remove_filter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_remove_filter(GdkWindow *window, GdkFilterFunc function, gpointer data)
     * }
     */
    public static void gdk_window_remove_filter(MemorySegment window, MemorySegment function, MemorySegment data) {
        var mh$ = gdk_window_remove_filter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_remove_filter", window, function, data);
            }
            mh$.invokeExact(window, function, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_scroll {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_scroll"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_scroll(GdkWindow *window, gint dx, gint dy)
     * }
     */
    public static FunctionDescriptor gdk_window_scroll$descriptor() {
        return gdk_window_scroll.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_scroll(GdkWindow *window, gint dx, gint dy)
     * }
     */
    public static MethodHandle gdk_window_scroll$handle() {
        return gdk_window_scroll.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_scroll(GdkWindow *window, gint dx, gint dy)
     * }
     */
    public static void gdk_window_scroll(MemorySegment window, int dx, int dy) {
        var mh$ = gdk_window_scroll.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_scroll", window, dx, dy);
            }
            mh$.invokeExact(window, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_move_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_move_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_move_region(GdkWindow *window, const cairo_region_t *region, gint dx, gint dy)
     * }
     */
    public static FunctionDescriptor gdk_window_move_region$descriptor() {
        return gdk_window_move_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_move_region(GdkWindow *window, const cairo_region_t *region, gint dx, gint dy)
     * }
     */
    public static MethodHandle gdk_window_move_region$handle() {
        return gdk_window_move_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_move_region(GdkWindow *window, const cairo_region_t *region, gint dx, gint dy)
     * }
     */
    public static void gdk_window_move_region(MemorySegment window, MemorySegment region, int dx, int dy) {
        var mh$ = gdk_window_move_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_move_region", window, region, dx, dy);
            }
            mh$.invokeExact(window, region, dx, dy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_ensure_native {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_ensure_native"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_ensure_native(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_ensure_native$descriptor() {
        return gdk_window_ensure_native.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_ensure_native(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_ensure_native$handle() {
        return gdk_window_ensure_native.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_ensure_native(GdkWindow *window)
     * }
     */
    public static int gdk_window_ensure_native(MemorySegment window) {
        var mh$ = gdk_window_ensure_native.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_ensure_native", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_shape_combine_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_shape_combine_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_shape_combine_region(GdkWindow *window, const cairo_region_t *shape_region, gint offset_x, gint offset_y)
     * }
     */
    public static FunctionDescriptor gdk_window_shape_combine_region$descriptor() {
        return gdk_window_shape_combine_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_shape_combine_region(GdkWindow *window, const cairo_region_t *shape_region, gint offset_x, gint offset_y)
     * }
     */
    public static MethodHandle gdk_window_shape_combine_region$handle() {
        return gdk_window_shape_combine_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_shape_combine_region(GdkWindow *window, const cairo_region_t *shape_region, gint offset_x, gint offset_y)
     * }
     */
    public static void gdk_window_shape_combine_region(MemorySegment window, MemorySegment shape_region, int offset_x, int offset_y) {
        var mh$ = gdk_window_shape_combine_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_shape_combine_region", window, shape_region, offset_x, offset_y);
            }
            mh$.invokeExact(window, shape_region, offset_x, offset_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_child_shapes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_child_shapes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_child_shapes(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_set_child_shapes$descriptor() {
        return gdk_window_set_child_shapes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_child_shapes(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_set_child_shapes$handle() {
        return gdk_window_set_child_shapes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_child_shapes(GdkWindow *window)
     * }
     */
    public static void gdk_window_set_child_shapes(MemorySegment window) {
        var mh$ = gdk_window_set_child_shapes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_child_shapes", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_composited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_composited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_composited(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_composited$descriptor() {
        return gdk_window_get_composited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_composited(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_composited$handle() {
        return gdk_window_get_composited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_composited(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_composited(MemorySegment window) {
        var mh$ = gdk_window_get_composited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_composited", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_composited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_composited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_composited(GdkWindow *window, gboolean composited)
     * }
     */
    public static FunctionDescriptor gdk_window_set_composited$descriptor() {
        return gdk_window_set_composited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_composited(GdkWindow *window, gboolean composited)
     * }
     */
    public static MethodHandle gdk_window_set_composited$handle() {
        return gdk_window_set_composited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_composited(GdkWindow *window, gboolean composited)
     * }
     */
    public static void gdk_window_set_composited(MemorySegment window, int composited) {
        var mh$ = gdk_window_set_composited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_composited", window, composited);
            }
            mh$.invokeExact(window, composited);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_merge_child_shapes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_merge_child_shapes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_merge_child_shapes(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_merge_child_shapes$descriptor() {
        return gdk_window_merge_child_shapes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_merge_child_shapes(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_merge_child_shapes$handle() {
        return gdk_window_merge_child_shapes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_merge_child_shapes(GdkWindow *window)
     * }
     */
    public static void gdk_window_merge_child_shapes(MemorySegment window) {
        var mh$ = gdk_window_merge_child_shapes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_merge_child_shapes", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_input_shape_combine_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_input_shape_combine_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_input_shape_combine_region(GdkWindow *window, const cairo_region_t *shape_region, gint offset_x, gint offset_y)
     * }
     */
    public static FunctionDescriptor gdk_window_input_shape_combine_region$descriptor() {
        return gdk_window_input_shape_combine_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_input_shape_combine_region(GdkWindow *window, const cairo_region_t *shape_region, gint offset_x, gint offset_y)
     * }
     */
    public static MethodHandle gdk_window_input_shape_combine_region$handle() {
        return gdk_window_input_shape_combine_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_input_shape_combine_region(GdkWindow *window, const cairo_region_t *shape_region, gint offset_x, gint offset_y)
     * }
     */
    public static void gdk_window_input_shape_combine_region(MemorySegment window, MemorySegment shape_region, int offset_x, int offset_y) {
        var mh$ = gdk_window_input_shape_combine_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_input_shape_combine_region", window, shape_region, offset_x, offset_y);
            }
            mh$.invokeExact(window, shape_region, offset_x, offset_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_child_input_shapes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_child_input_shapes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_child_input_shapes(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_set_child_input_shapes$descriptor() {
        return gdk_window_set_child_input_shapes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_child_input_shapes(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_set_child_input_shapes$handle() {
        return gdk_window_set_child_input_shapes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_child_input_shapes(GdkWindow *window)
     * }
     */
    public static void gdk_window_set_child_input_shapes(MemorySegment window) {
        var mh$ = gdk_window_set_child_input_shapes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_child_input_shapes", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_merge_child_input_shapes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_merge_child_input_shapes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_merge_child_input_shapes(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_merge_child_input_shapes$descriptor() {
        return gdk_window_merge_child_input_shapes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_merge_child_input_shapes(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_merge_child_input_shapes$handle() {
        return gdk_window_merge_child_input_shapes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_merge_child_input_shapes(GdkWindow *window)
     * }
     */
    public static void gdk_window_merge_child_input_shapes(MemorySegment window) {
        var mh$ = gdk_window_merge_child_input_shapes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_merge_child_input_shapes", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_pass_through {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_pass_through"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_pass_through(GdkWindow *window, gboolean pass_through)
     * }
     */
    public static FunctionDescriptor gdk_window_set_pass_through$descriptor() {
        return gdk_window_set_pass_through.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_pass_through(GdkWindow *window, gboolean pass_through)
     * }
     */
    public static MethodHandle gdk_window_set_pass_through$handle() {
        return gdk_window_set_pass_through.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_pass_through(GdkWindow *window, gboolean pass_through)
     * }
     */
    public static void gdk_window_set_pass_through(MemorySegment window, int pass_through) {
        var mh$ = gdk_window_set_pass_through.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_pass_through", window, pass_through);
            }
            mh$.invokeExact(window, pass_through);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_pass_through {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_pass_through"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_pass_through(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_pass_through$descriptor() {
        return gdk_window_get_pass_through.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_pass_through(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_pass_through$handle() {
        return gdk_window_get_pass_through.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_pass_through(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_pass_through(MemorySegment window) {
        var mh$ = gdk_window_get_pass_through.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_pass_through", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_is_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_is_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_visible(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_is_visible$descriptor() {
        return gdk_window_is_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_visible(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_is_visible$handle() {
        return gdk_window_is_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_visible(GdkWindow *window)
     * }
     */
    public static int gdk_window_is_visible(MemorySegment window) {
        var mh$ = gdk_window_is_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_is_visible", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_is_viewable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_is_viewable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_viewable(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_is_viewable$descriptor() {
        return gdk_window_is_viewable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_viewable(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_is_viewable$handle() {
        return gdk_window_is_viewable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_viewable(GdkWindow *window)
     * }
     */
    public static int gdk_window_is_viewable(MemorySegment window) {
        var mh$ = gdk_window_is_viewable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_is_viewable", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_is_input_only {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_is_input_only"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_input_only(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_is_input_only$descriptor() {
        return gdk_window_is_input_only.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_input_only(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_is_input_only$handle() {
        return gdk_window_is_input_only.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_input_only(GdkWindow *window)
     * }
     */
    public static int gdk_window_is_input_only(MemorySegment window) {
        var mh$ = gdk_window_is_input_only.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_is_input_only", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_is_shaped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_is_shaped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_shaped(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_is_shaped$descriptor() {
        return gdk_window_is_shaped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_shaped(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_is_shaped$handle() {
        return gdk_window_is_shaped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_is_shaped(GdkWindow *window)
     * }
     */
    public static int gdk_window_is_shaped(MemorySegment window) {
        var mh$ = gdk_window_is_shaped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_is_shaped", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindowState gdk_window_get_state(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_state$descriptor() {
        return gdk_window_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindowState gdk_window_get_state(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_state$handle() {
        return gdk_window_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindowState gdk_window_get_state(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_state(MemorySegment window) {
        var mh$ = gdk_window_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_state", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_static_gravities {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_static_gravities"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_set_static_gravities(GdkWindow *window, gboolean use_static)
     * }
     */
    public static FunctionDescriptor gdk_window_set_static_gravities$descriptor() {
        return gdk_window_set_static_gravities.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_set_static_gravities(GdkWindow *window, gboolean use_static)
     * }
     */
    public static MethodHandle gdk_window_set_static_gravities$handle() {
        return gdk_window_set_static_gravities.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_set_static_gravities(GdkWindow *window, gboolean use_static)
     * }
     */
    public static int gdk_window_set_static_gravities(MemorySegment window, int use_static) {
        var mh$ = gdk_window_set_static_gravities.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_static_gravities", window, use_static);
            }
            return (int)mh$.invokeExact(window, use_static);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_invalidate_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_invalidate_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_invalidate_handler(GdkWindow *window, GdkWindowInvalidateHandlerFunc handler)
     * }
     */
    public static FunctionDescriptor gdk_window_set_invalidate_handler$descriptor() {
        return gdk_window_set_invalidate_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_invalidate_handler(GdkWindow *window, GdkWindowInvalidateHandlerFunc handler)
     * }
     */
    public static MethodHandle gdk_window_set_invalidate_handler$handle() {
        return gdk_window_set_invalidate_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_invalidate_handler(GdkWindow *window, GdkWindowInvalidateHandlerFunc handler)
     * }
     */
    public static void gdk_window_set_invalidate_handler(MemorySegment window, MemorySegment handler) {
        var mh$ = gdk_window_set_invalidate_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_invalidate_handler", window, handler);
            }
            mh$.invokeExact(window, handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_has_native {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_has_native"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_has_native(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_has_native$descriptor() {
        return gdk_window_has_native.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_has_native(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_has_native$handle() {
        return gdk_window_has_native.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_has_native(GdkWindow *window)
     * }
     */
    public static int gdk_window_has_native(MemorySegment window) {
        var mh$ = gdk_window_has_native.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_has_native", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_type_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_type_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_type_hint(GdkWindow *window, GdkWindowTypeHint hint)
     * }
     */
    public static FunctionDescriptor gdk_window_set_type_hint$descriptor() {
        return gdk_window_set_type_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_type_hint(GdkWindow *window, GdkWindowTypeHint hint)
     * }
     */
    public static MethodHandle gdk_window_set_type_hint$handle() {
        return gdk_window_set_type_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_type_hint(GdkWindow *window, GdkWindowTypeHint hint)
     * }
     */
    public static void gdk_window_set_type_hint(MemorySegment window, int hint) {
        var mh$ = gdk_window_set_type_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_type_hint", window, hint);
            }
            mh$.invokeExact(window, hint);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_type_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_type_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindowTypeHint gdk_window_get_type_hint(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_type_hint$descriptor() {
        return gdk_window_get_type_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindowTypeHint gdk_window_get_type_hint(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_type_hint$handle() {
        return gdk_window_get_type_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindowTypeHint gdk_window_get_type_hint(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_type_hint(MemorySegment window) {
        var mh$ = gdk_window_get_type_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_type_hint", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_modal_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_modal_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_modal_hint(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_modal_hint$descriptor() {
        return gdk_window_get_modal_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_modal_hint(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_modal_hint$handle() {
        return gdk_window_get_modal_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_modal_hint(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_modal_hint(MemorySegment window) {
        var mh$ = gdk_window_get_modal_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_modal_hint", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_modal_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_modal_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_modal_hint(GdkWindow *window, gboolean modal)
     * }
     */
    public static FunctionDescriptor gdk_window_set_modal_hint$descriptor() {
        return gdk_window_set_modal_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_modal_hint(GdkWindow *window, gboolean modal)
     * }
     */
    public static MethodHandle gdk_window_set_modal_hint$handle() {
        return gdk_window_set_modal_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_modal_hint(GdkWindow *window, gboolean modal)
     * }
     */
    public static void gdk_window_set_modal_hint(MemorySegment window, int modal) {
        var mh$ = gdk_window_set_modal_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_modal_hint", window, modal);
            }
            mh$.invokeExact(window, modal);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_skip_taskbar_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_skip_taskbar_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_skip_taskbar_hint(GdkWindow *window, gboolean skips_taskbar)
     * }
     */
    public static FunctionDescriptor gdk_window_set_skip_taskbar_hint$descriptor() {
        return gdk_window_set_skip_taskbar_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_skip_taskbar_hint(GdkWindow *window, gboolean skips_taskbar)
     * }
     */
    public static MethodHandle gdk_window_set_skip_taskbar_hint$handle() {
        return gdk_window_set_skip_taskbar_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_skip_taskbar_hint(GdkWindow *window, gboolean skips_taskbar)
     * }
     */
    public static void gdk_window_set_skip_taskbar_hint(MemorySegment window, int skips_taskbar) {
        var mh$ = gdk_window_set_skip_taskbar_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_skip_taskbar_hint", window, skips_taskbar);
            }
            mh$.invokeExact(window, skips_taskbar);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_skip_pager_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_skip_pager_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_skip_pager_hint(GdkWindow *window, gboolean skips_pager)
     * }
     */
    public static FunctionDescriptor gdk_window_set_skip_pager_hint$descriptor() {
        return gdk_window_set_skip_pager_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_skip_pager_hint(GdkWindow *window, gboolean skips_pager)
     * }
     */
    public static MethodHandle gdk_window_set_skip_pager_hint$handle() {
        return gdk_window_set_skip_pager_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_skip_pager_hint(GdkWindow *window, gboolean skips_pager)
     * }
     */
    public static void gdk_window_set_skip_pager_hint(MemorySegment window, int skips_pager) {
        var mh$ = gdk_window_set_skip_pager_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_skip_pager_hint", window, skips_pager);
            }
            mh$.invokeExact(window, skips_pager);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_urgency_hint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_urgency_hint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_urgency_hint(GdkWindow *window, gboolean urgent)
     * }
     */
    public static FunctionDescriptor gdk_window_set_urgency_hint$descriptor() {
        return gdk_window_set_urgency_hint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_urgency_hint(GdkWindow *window, gboolean urgent)
     * }
     */
    public static MethodHandle gdk_window_set_urgency_hint$handle() {
        return gdk_window_set_urgency_hint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_urgency_hint(GdkWindow *window, gboolean urgent)
     * }
     */
    public static void gdk_window_set_urgency_hint(MemorySegment window, int urgent) {
        var mh$ = gdk_window_set_urgency_hint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_urgency_hint", window, urgent);
            }
            mh$.invokeExact(window, urgent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_geometry_hints {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_geometry_hints"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_geometry_hints(GdkWindow *window, const GdkGeometry *geometry, GdkWindowHints geom_mask)
     * }
     */
    public static FunctionDescriptor gdk_window_set_geometry_hints$descriptor() {
        return gdk_window_set_geometry_hints.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_geometry_hints(GdkWindow *window, const GdkGeometry *geometry, GdkWindowHints geom_mask)
     * }
     */
    public static MethodHandle gdk_window_set_geometry_hints$handle() {
        return gdk_window_set_geometry_hints.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_geometry_hints(GdkWindow *window, const GdkGeometry *geometry, GdkWindowHints geom_mask)
     * }
     */
    public static void gdk_window_set_geometry_hints(MemorySegment window, MemorySegment geometry, int geom_mask) {
        var mh$ = gdk_window_set_geometry_hints.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_geometry_hints", window, geometry, geom_mask);
            }
            mh$.invokeExact(window, geometry, geom_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_clip_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_clip_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_window_get_clip_region(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_clip_region$descriptor() {
        return gdk_window_get_clip_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_window_get_clip_region(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_clip_region$handle() {
        return gdk_window_get_clip_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_window_get_clip_region(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_clip_region(MemorySegment window) {
        var mh$ = gdk_window_get_clip_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_clip_region", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_visible_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_visible_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_window_get_visible_region(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_visible_region$descriptor() {
        return gdk_window_get_visible_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_window_get_visible_region(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_visible_region$handle() {
        return gdk_window_get_visible_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *gdk_window_get_visible_region(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_visible_region(MemorySegment window) {
        var mh$ = gdk_window_get_visible_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_visible_region", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_begin_paint_rect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_begin_paint_rect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_paint_rect(GdkWindow *window, const GdkRectangle *rectangle)
     * }
     */
    public static FunctionDescriptor gdk_window_begin_paint_rect$descriptor() {
        return gdk_window_begin_paint_rect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_paint_rect(GdkWindow *window, const GdkRectangle *rectangle)
     * }
     */
    public static MethodHandle gdk_window_begin_paint_rect$handle() {
        return gdk_window_begin_paint_rect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_begin_paint_rect(GdkWindow *window, const GdkRectangle *rectangle)
     * }
     */
    public static void gdk_window_begin_paint_rect(MemorySegment window, MemorySegment rectangle) {
        var mh$ = gdk_window_begin_paint_rect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_begin_paint_rect", window, rectangle);
            }
            mh$.invokeExact(window, rectangle);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_mark_paint_from_clip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_mark_paint_from_clip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_mark_paint_from_clip(GdkWindow *window, cairo_t *cr)
     * }
     */
    public static FunctionDescriptor gdk_window_mark_paint_from_clip$descriptor() {
        return gdk_window_mark_paint_from_clip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_mark_paint_from_clip(GdkWindow *window, cairo_t *cr)
     * }
     */
    public static MethodHandle gdk_window_mark_paint_from_clip$handle() {
        return gdk_window_mark_paint_from_clip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_mark_paint_from_clip(GdkWindow *window, cairo_t *cr)
     * }
     */
    public static void gdk_window_mark_paint_from_clip(MemorySegment window, MemorySegment cr) {
        var mh$ = gdk_window_mark_paint_from_clip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_mark_paint_from_clip", window, cr);
            }
            mh$.invokeExact(window, cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_begin_paint_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_begin_paint_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_paint_region(GdkWindow *window, const cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor gdk_window_begin_paint_region$descriptor() {
        return gdk_window_begin_paint_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_begin_paint_region(GdkWindow *window, const cairo_region_t *region)
     * }
     */
    public static MethodHandle gdk_window_begin_paint_region$handle() {
        return gdk_window_begin_paint_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_begin_paint_region(GdkWindow *window, const cairo_region_t *region)
     * }
     */
    public static void gdk_window_begin_paint_region(MemorySegment window, MemorySegment region) {
        var mh$ = gdk_window_begin_paint_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_begin_paint_region", window, region);
            }
            mh$.invokeExact(window, region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_end_paint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_end_paint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_end_paint(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_end_paint$descriptor() {
        return gdk_window_end_paint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_end_paint(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_end_paint$handle() {
        return gdk_window_end_paint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_end_paint(GdkWindow *window)
     * }
     */
    public static void gdk_window_end_paint(MemorySegment window) {
        var mh$ = gdk_window_end_paint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_end_paint", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_begin_draw_frame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_begin_draw_frame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDrawingContext *gdk_window_begin_draw_frame(GdkWindow *window, const cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor gdk_window_begin_draw_frame$descriptor() {
        return gdk_window_begin_draw_frame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDrawingContext *gdk_window_begin_draw_frame(GdkWindow *window, const cairo_region_t *region)
     * }
     */
    public static MethodHandle gdk_window_begin_draw_frame$handle() {
        return gdk_window_begin_draw_frame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDrawingContext *gdk_window_begin_draw_frame(GdkWindow *window, const cairo_region_t *region)
     * }
     */
    public static MemorySegment gdk_window_begin_draw_frame(MemorySegment window, MemorySegment region) {
        var mh$ = gdk_window_begin_draw_frame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_begin_draw_frame", window, region);
            }
            return (MemorySegment)mh$.invokeExact(window, region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_end_draw_frame {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_end_draw_frame"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_end_draw_frame(GdkWindow *window, GdkDrawingContext *context)
     * }
     */
    public static FunctionDescriptor gdk_window_end_draw_frame$descriptor() {
        return gdk_window_end_draw_frame.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_end_draw_frame(GdkWindow *window, GdkDrawingContext *context)
     * }
     */
    public static MethodHandle gdk_window_end_draw_frame$handle() {
        return gdk_window_end_draw_frame.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_end_draw_frame(GdkWindow *window, GdkDrawingContext *context)
     * }
     */
    public static void gdk_window_end_draw_frame(MemorySegment window, MemorySegment context) {
        var mh$ = gdk_window_end_draw_frame.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_end_draw_frame", window, context);
            }
            mh$.invokeExact(window, context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_flush {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_flush"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_flush(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_flush$descriptor() {
        return gdk_window_flush.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_flush(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_flush$handle() {
        return gdk_window_flush.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_flush(GdkWindow *window)
     * }
     */
    public static void gdk_window_flush(MemorySegment window) {
        var mh$ = gdk_window_flush.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_flush", window);
            }
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_title {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_title"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_title(GdkWindow *window, const gchar *title)
     * }
     */
    public static FunctionDescriptor gdk_window_set_title$descriptor() {
        return gdk_window_set_title.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_title(GdkWindow *window, const gchar *title)
     * }
     */
    public static MethodHandle gdk_window_set_title$handle() {
        return gdk_window_set_title.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_title(GdkWindow *window, const gchar *title)
     * }
     */
    public static void gdk_window_set_title(MemorySegment window, MemorySegment title) {
        var mh$ = gdk_window_set_title.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_title", window, title);
            }
            mh$.invokeExact(window, title);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_role {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_role"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_role(GdkWindow *window, const gchar *role)
     * }
     */
    public static FunctionDescriptor gdk_window_set_role$descriptor() {
        return gdk_window_set_role.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_role(GdkWindow *window, const gchar *role)
     * }
     */
    public static MethodHandle gdk_window_set_role$handle() {
        return gdk_window_set_role.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_role(GdkWindow *window, const gchar *role)
     * }
     */
    public static void gdk_window_set_role(MemorySegment window, MemorySegment role) {
        var mh$ = gdk_window_set_role.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_role", window, role);
            }
            mh$.invokeExact(window, role);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_startup_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_startup_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_startup_id(GdkWindow *window, const gchar *startup_id)
     * }
     */
    public static FunctionDescriptor gdk_window_set_startup_id$descriptor() {
        return gdk_window_set_startup_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_startup_id(GdkWindow *window, const gchar *startup_id)
     * }
     */
    public static MethodHandle gdk_window_set_startup_id$handle() {
        return gdk_window_set_startup_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_startup_id(GdkWindow *window, const gchar *startup_id)
     * }
     */
    public static void gdk_window_set_startup_id(MemorySegment window, MemorySegment startup_id) {
        var mh$ = gdk_window_set_startup_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_startup_id", window, startup_id);
            }
            mh$.invokeExact(window, startup_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_transient_for {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_transient_for"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_transient_for(GdkWindow *window, GdkWindow *parent)
     * }
     */
    public static FunctionDescriptor gdk_window_set_transient_for$descriptor() {
        return gdk_window_set_transient_for.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_transient_for(GdkWindow *window, GdkWindow *parent)
     * }
     */
    public static MethodHandle gdk_window_set_transient_for$handle() {
        return gdk_window_set_transient_for.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_transient_for(GdkWindow *window, GdkWindow *parent)
     * }
     */
    public static void gdk_window_set_transient_for(MemorySegment window, MemorySegment parent) {
        var mh$ = gdk_window_set_transient_for.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_transient_for", window, parent);
            }
            mh$.invokeExact(window, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_background {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_background"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_background(GdkWindow *window, const GdkColor *color)
     * }
     */
    public static FunctionDescriptor gdk_window_set_background$descriptor() {
        return gdk_window_set_background.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_background(GdkWindow *window, const GdkColor *color)
     * }
     */
    public static MethodHandle gdk_window_set_background$handle() {
        return gdk_window_set_background.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_background(GdkWindow *window, const GdkColor *color)
     * }
     */
    public static void gdk_window_set_background(MemorySegment window, MemorySegment color) {
        var mh$ = gdk_window_set_background.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_background", window, color);
            }
            mh$.invokeExact(window, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_background_rgba {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_background_rgba"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_background_rgba(GdkWindow *window, const GdkRGBA *rgba)
     * }
     */
    public static FunctionDescriptor gdk_window_set_background_rgba$descriptor() {
        return gdk_window_set_background_rgba.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_background_rgba(GdkWindow *window, const GdkRGBA *rgba)
     * }
     */
    public static MethodHandle gdk_window_set_background_rgba$handle() {
        return gdk_window_set_background_rgba.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_background_rgba(GdkWindow *window, const GdkRGBA *rgba)
     * }
     */
    public static void gdk_window_set_background_rgba(MemorySegment window, MemorySegment rgba) {
        var mh$ = gdk_window_set_background_rgba.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_background_rgba", window, rgba);
            }
            mh$.invokeExact(window, rgba);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_background_pattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_background_pattern"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_background_pattern(GdkWindow *window, cairo_pattern_t *pattern)
     * }
     */
    public static FunctionDescriptor gdk_window_set_background_pattern$descriptor() {
        return gdk_window_set_background_pattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_background_pattern(GdkWindow *window, cairo_pattern_t *pattern)
     * }
     */
    public static MethodHandle gdk_window_set_background_pattern$handle() {
        return gdk_window_set_background_pattern.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_background_pattern(GdkWindow *window, cairo_pattern_t *pattern)
     * }
     */
    public static void gdk_window_set_background_pattern(MemorySegment window, MemorySegment pattern) {
        var mh$ = gdk_window_set_background_pattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_background_pattern", window, pattern);
            }
            mh$.invokeExact(window, pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_background_pattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_background_pattern"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *gdk_window_get_background_pattern(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_background_pattern$descriptor() {
        return gdk_window_get_background_pattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_pattern_t *gdk_window_get_background_pattern(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_background_pattern$handle() {
        return gdk_window_get_background_pattern.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_pattern_t *gdk_window_get_background_pattern(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_background_pattern(MemorySegment window) {
        var mh$ = gdk_window_get_background_pattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_background_pattern", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_cursor(GdkWindow *window, GdkCursor *cursor)
     * }
     */
    public static FunctionDescriptor gdk_window_set_cursor$descriptor() {
        return gdk_window_set_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_cursor(GdkWindow *window, GdkCursor *cursor)
     * }
     */
    public static MethodHandle gdk_window_set_cursor$handle() {
        return gdk_window_set_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_cursor(GdkWindow *window, GdkCursor *cursor)
     * }
     */
    public static void gdk_window_set_cursor(MemorySegment window, MemorySegment cursor) {
        var mh$ = gdk_window_set_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_cursor", window, cursor);
            }
            mh$.invokeExact(window, cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_window_get_cursor(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_cursor$descriptor() {
        return gdk_window_get_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_window_get_cursor(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_cursor$handle() {
        return gdk_window_get_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkCursor *gdk_window_get_cursor(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_cursor(MemorySegment window) {
        var mh$ = gdk_window_get_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_cursor", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_device_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_device_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_device_cursor(GdkWindow *window, GdkDevice *device, GdkCursor *cursor)
     * }
     */
    public static FunctionDescriptor gdk_window_set_device_cursor$descriptor() {
        return gdk_window_set_device_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_device_cursor(GdkWindow *window, GdkDevice *device, GdkCursor *cursor)
     * }
     */
    public static MethodHandle gdk_window_set_device_cursor$handle() {
        return gdk_window_set_device_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_device_cursor(GdkWindow *window, GdkDevice *device, GdkCursor *cursor)
     * }
     */
    public static void gdk_window_set_device_cursor(MemorySegment window, MemorySegment device, MemorySegment cursor) {
        var mh$ = gdk_window_set_device_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_device_cursor", window, device, cursor);
            }
            mh$.invokeExact(window, device, cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_device_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_device_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_window_get_device_cursor(GdkWindow *window, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_window_get_device_cursor$descriptor() {
        return gdk_window_get_device_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkCursor *gdk_window_get_device_cursor(GdkWindow *window, GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_window_get_device_cursor$handle() {
        return gdk_window_get_device_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkCursor *gdk_window_get_device_cursor(GdkWindow *window, GdkDevice *device)
     * }
     */
    public static MemorySegment gdk_window_get_device_cursor(MemorySegment window, MemorySegment device) {
        var mh$ = gdk_window_get_device_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_device_cursor", window, device);
            }
            return (MemorySegment)mh$.invokeExact(window, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_get_user_data(GdkWindow *window, gpointer *data)
     * }
     */
    public static FunctionDescriptor gdk_window_get_user_data$descriptor() {
        return gdk_window_get_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_get_user_data(GdkWindow *window, gpointer *data)
     * }
     */
    public static MethodHandle gdk_window_get_user_data$handle() {
        return gdk_window_get_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_get_user_data(GdkWindow *window, gpointer *data)
     * }
     */
    public static void gdk_window_get_user_data(MemorySegment window, MemorySegment data) {
        var mh$ = gdk_window_get_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_user_data", window, data);
            }
            mh$.invokeExact(window, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_geometry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_geometry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_get_geometry(GdkWindow *window, gint *x, gint *y, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gdk_window_get_geometry$descriptor() {
        return gdk_window_get_geometry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_get_geometry(GdkWindow *window, gint *x, gint *y, gint *width, gint *height)
     * }
     */
    public static MethodHandle gdk_window_get_geometry$handle() {
        return gdk_window_get_geometry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_get_geometry(GdkWindow *window, gint *x, gint *y, gint *width, gint *height)
     * }
     */
    public static void gdk_window_get_geometry(MemorySegment window, MemorySegment x, MemorySegment y, MemorySegment width, MemorySegment height) {
        var mh$ = gdk_window_get_geometry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_geometry", window, x, y, width, height);
            }
            mh$.invokeExact(window, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_window_get_width(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_width$descriptor() {
        return gdk_window_get_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_window_get_width(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_width$handle() {
        return gdk_window_get_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_window_get_width(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_width(MemorySegment window) {
        var mh$ = gdk_window_get_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_width", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gdk_window_get_height(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_height$descriptor() {
        return gdk_window_get_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gdk_window_get_height(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_height$handle() {
        return gdk_window_get_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gdk_window_get_height(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_height(MemorySegment window) {
        var mh$ = gdk_window_get_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_height", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_get_position(GdkWindow *window, gint *x, gint *y)
     * }
     */
    public static FunctionDescriptor gdk_window_get_position$descriptor() {
        return gdk_window_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_get_position(GdkWindow *window, gint *x, gint *y)
     * }
     */
    public static MethodHandle gdk_window_get_position$handle() {
        return gdk_window_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_get_position(GdkWindow *window, gint *x, gint *y)
     * }
     */
    public static void gdk_window_get_position(MemorySegment window, MemorySegment x, MemorySegment y) {
        var mh$ = gdk_window_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_position", window, x, y);
            }
            mh$.invokeExact(window, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_origin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_window_get_origin(GdkWindow *window, gint *x, gint *y)
     * }
     */
    public static FunctionDescriptor gdk_window_get_origin$descriptor() {
        return gdk_window_get_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_window_get_origin(GdkWindow *window, gint *x, gint *y)
     * }
     */
    public static MethodHandle gdk_window_get_origin$handle() {
        return gdk_window_get_origin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_window_get_origin(GdkWindow *window, gint *x, gint *y)
     * }
     */
    public static int gdk_window_get_origin(MemorySegment window, MemorySegment x, MemorySegment y) {
        var mh$ = gdk_window_get_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_origin", window, x, y);
            }
            return (int)mh$.invokeExact(window, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_root_coords {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_root_coords"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_get_root_coords(GdkWindow *window, gint x, gint y, gint *root_x, gint *root_y)
     * }
     */
    public static FunctionDescriptor gdk_window_get_root_coords$descriptor() {
        return gdk_window_get_root_coords.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_get_root_coords(GdkWindow *window, gint x, gint y, gint *root_x, gint *root_y)
     * }
     */
    public static MethodHandle gdk_window_get_root_coords$handle() {
        return gdk_window_get_root_coords.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_get_root_coords(GdkWindow *window, gint x, gint y, gint *root_x, gint *root_y)
     * }
     */
    public static void gdk_window_get_root_coords(MemorySegment window, int x, int y, MemorySegment root_x, MemorySegment root_y) {
        var mh$ = gdk_window_get_root_coords.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_root_coords", window, x, y, root_x, root_y);
            }
            mh$.invokeExact(window, x, y, root_x, root_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_coords_to_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_coords_to_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_coords_to_parent(GdkWindow *window, gdouble x, gdouble y, gdouble *parent_x, gdouble *parent_y)
     * }
     */
    public static FunctionDescriptor gdk_window_coords_to_parent$descriptor() {
        return gdk_window_coords_to_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_coords_to_parent(GdkWindow *window, gdouble x, gdouble y, gdouble *parent_x, gdouble *parent_y)
     * }
     */
    public static MethodHandle gdk_window_coords_to_parent$handle() {
        return gdk_window_coords_to_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_coords_to_parent(GdkWindow *window, gdouble x, gdouble y, gdouble *parent_x, gdouble *parent_y)
     * }
     */
    public static void gdk_window_coords_to_parent(MemorySegment window, double x, double y, MemorySegment parent_x, MemorySegment parent_y) {
        var mh$ = gdk_window_coords_to_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_coords_to_parent", window, x, y, parent_x, parent_y);
            }
            mh$.invokeExact(window, x, y, parent_x, parent_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_coords_from_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_coords_from_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_coords_from_parent(GdkWindow *window, gdouble parent_x, gdouble parent_y, gdouble *x, gdouble *y)
     * }
     */
    public static FunctionDescriptor gdk_window_coords_from_parent$descriptor() {
        return gdk_window_coords_from_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_coords_from_parent(GdkWindow *window, gdouble parent_x, gdouble parent_y, gdouble *x, gdouble *y)
     * }
     */
    public static MethodHandle gdk_window_coords_from_parent$handle() {
        return gdk_window_coords_from_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_coords_from_parent(GdkWindow *window, gdouble parent_x, gdouble parent_y, gdouble *x, gdouble *y)
     * }
     */
    public static void gdk_window_coords_from_parent(MemorySegment window, double parent_x, double parent_y, MemorySegment x, MemorySegment y) {
        var mh$ = gdk_window_coords_from_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_coords_from_parent", window, parent_x, parent_y, x, y);
            }
            mh$.invokeExact(window, parent_x, parent_y, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_root_origin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_root_origin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_get_root_origin(GdkWindow *window, gint *x, gint *y)
     * }
     */
    public static FunctionDescriptor gdk_window_get_root_origin$descriptor() {
        return gdk_window_get_root_origin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_get_root_origin(GdkWindow *window, gint *x, gint *y)
     * }
     */
    public static MethodHandle gdk_window_get_root_origin$handle() {
        return gdk_window_get_root_origin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_get_root_origin(GdkWindow *window, gint *x, gint *y)
     * }
     */
    public static void gdk_window_get_root_origin(MemorySegment window, MemorySegment x, MemorySegment y) {
        var mh$ = gdk_window_get_root_origin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_root_origin", window, x, y);
            }
            mh$.invokeExact(window, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_frame_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_frame_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_get_frame_extents(GdkWindow *window, GdkRectangle *rect)
     * }
     */
    public static FunctionDescriptor gdk_window_get_frame_extents$descriptor() {
        return gdk_window_get_frame_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_get_frame_extents(GdkWindow *window, GdkRectangle *rect)
     * }
     */
    public static MethodHandle gdk_window_get_frame_extents$handle() {
        return gdk_window_get_frame_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_get_frame_extents(GdkWindow *window, GdkRectangle *rect)
     * }
     */
    public static void gdk_window_get_frame_extents(MemorySegment window, MemorySegment rect) {
        var mh$ = gdk_window_get_frame_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_frame_extents", window, rect);
            }
            mh$.invokeExact(window, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_scale_factor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_scale_factor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gdk_window_get_scale_factor(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_scale_factor$descriptor() {
        return gdk_window_get_scale_factor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gdk_window_get_scale_factor(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_scale_factor$handle() {
        return gdk_window_get_scale_factor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gdk_window_get_scale_factor(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_scale_factor(MemorySegment window) {
        var mh$ = gdk_window_get_scale_factor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_scale_factor", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_pointer(GdkWindow *window, gint *x, gint *y, GdkModifierType *mask)
     * }
     */
    public static FunctionDescriptor gdk_window_get_pointer$descriptor() {
        return gdk_window_get_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_pointer(GdkWindow *window, gint *x, gint *y, GdkModifierType *mask)
     * }
     */
    public static MethodHandle gdk_window_get_pointer$handle() {
        return gdk_window_get_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_pointer(GdkWindow *window, gint *x, gint *y, GdkModifierType *mask)
     * }
     */
    public static MemorySegment gdk_window_get_pointer(MemorySegment window, MemorySegment x, MemorySegment y, MemorySegment mask) {
        var mh$ = gdk_window_get_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_pointer", window, x, y, mask);
            }
            return (MemorySegment)mh$.invokeExact(window, x, y, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_device_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_device_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_device_position(GdkWindow *window, GdkDevice *device, gint *x, gint *y, GdkModifierType *mask)
     * }
     */
    public static FunctionDescriptor gdk_window_get_device_position$descriptor() {
        return gdk_window_get_device_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_device_position(GdkWindow *window, GdkDevice *device, gint *x, gint *y, GdkModifierType *mask)
     * }
     */
    public static MethodHandle gdk_window_get_device_position$handle() {
        return gdk_window_get_device_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_device_position(GdkWindow *window, GdkDevice *device, gint *x, gint *y, GdkModifierType *mask)
     * }
     */
    public static MemorySegment gdk_window_get_device_position(MemorySegment window, MemorySegment device, MemorySegment x, MemorySegment y, MemorySegment mask) {
        var mh$ = gdk_window_get_device_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_device_position", window, device, x, y, mask);
            }
            return (MemorySegment)mh$.invokeExact(window, device, x, y, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_device_position_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_device_position_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_device_position_double(GdkWindow *window, GdkDevice *device, gdouble *x, gdouble *y, GdkModifierType *mask)
     * }
     */
    public static FunctionDescriptor gdk_window_get_device_position_double$descriptor() {
        return gdk_window_get_device_position_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_device_position_double(GdkWindow *window, GdkDevice *device, gdouble *x, gdouble *y, GdkModifierType *mask)
     * }
     */
    public static MethodHandle gdk_window_get_device_position_double$handle() {
        return gdk_window_get_device_position_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_device_position_double(GdkWindow *window, GdkDevice *device, gdouble *x, gdouble *y, GdkModifierType *mask)
     * }
     */
    public static MemorySegment gdk_window_get_device_position_double(MemorySegment window, MemorySegment device, MemorySegment x, MemorySegment y, MemorySegment mask) {
        var mh$ = gdk_window_get_device_position_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_device_position_double", window, device, x, y, mask);
            }
            return (MemorySegment)mh$.invokeExact(window, device, x, y, mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_parent(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_parent$descriptor() {
        return gdk_window_get_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_parent(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_parent$handle() {
        return gdk_window_get_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_parent(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_parent(MemorySegment window) {
        var mh$ = gdk_window_get_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_parent", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_toplevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_toplevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_toplevel(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_toplevel$descriptor() {
        return gdk_window_get_toplevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_toplevel(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_toplevel$handle() {
        return gdk_window_get_toplevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_toplevel(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_toplevel(MemorySegment window) {
        var mh$ = gdk_window_get_toplevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_toplevel", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_effective_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_effective_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_effective_parent(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_effective_parent$descriptor() {
        return gdk_window_get_effective_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_effective_parent(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_effective_parent$handle() {
        return gdk_window_get_effective_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_effective_parent(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_effective_parent(MemorySegment window) {
        var mh$ = gdk_window_get_effective_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_effective_parent", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_effective_toplevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_effective_toplevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_effective_toplevel(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_effective_toplevel$descriptor() {
        return gdk_window_get_effective_toplevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_effective_toplevel(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_effective_toplevel$handle() {
        return gdk_window_get_effective_toplevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_effective_toplevel(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_effective_toplevel(MemorySegment window) {
        var mh$ = gdk_window_get_effective_toplevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_effective_toplevel", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_window_get_children(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_children$descriptor() {
        return gdk_window_get_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_window_get_children(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_children$handle() {
        return gdk_window_get_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_window_get_children(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_children(MemorySegment window) {
        var mh$ = gdk_window_get_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_children", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_peek_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_peek_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_window_peek_children(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_peek_children$descriptor() {
        return gdk_window_peek_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_window_peek_children(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_peek_children$handle() {
        return gdk_window_peek_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_window_peek_children(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_peek_children(MemorySegment window) {
        var mh$ = gdk_window_peek_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_peek_children", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_children_with_user_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_children_with_user_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gdk_window_get_children_with_user_data(GdkWindow *window, gpointer user_data)
     * }
     */
    public static FunctionDescriptor gdk_window_get_children_with_user_data$descriptor() {
        return gdk_window_get_children_with_user_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gdk_window_get_children_with_user_data(GdkWindow *window, gpointer user_data)
     * }
     */
    public static MethodHandle gdk_window_get_children_with_user_data$handle() {
        return gdk_window_get_children_with_user_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gdk_window_get_children_with_user_data(GdkWindow *window, gpointer user_data)
     * }
     */
    public static MemorySegment gdk_window_get_children_with_user_data(MemorySegment window, MemorySegment user_data) {
        var mh$ = gdk_window_get_children_with_user_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_children_with_user_data", window, user_data);
            }
            return (MemorySegment)mh$.invokeExact(window, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEventMask gdk_window_get_events(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_events$descriptor() {
        return gdk_window_get_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEventMask gdk_window_get_events(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_events$handle() {
        return gdk_window_get_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEventMask gdk_window_get_events(GdkWindow *window)
     * }
     */
    public static int gdk_window_get_events(MemorySegment window) {
        var mh$ = gdk_window_get_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_events", window);
            }
            return (int)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_events(GdkWindow *window, GdkEventMask event_mask)
     * }
     */
    public static FunctionDescriptor gdk_window_set_events$descriptor() {
        return gdk_window_set_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_events(GdkWindow *window, GdkEventMask event_mask)
     * }
     */
    public static MethodHandle gdk_window_set_events$handle() {
        return gdk_window_set_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_events(GdkWindow *window, GdkEventMask event_mask)
     * }
     */
    public static void gdk_window_set_events(MemorySegment window, int event_mask) {
        var mh$ = gdk_window_set_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_events", window, event_mask);
            }
            mh$.invokeExact(window, event_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_device_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_device_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_device_events(GdkWindow *window, GdkDevice *device, GdkEventMask event_mask)
     * }
     */
    public static FunctionDescriptor gdk_window_set_device_events$descriptor() {
        return gdk_window_set_device_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_device_events(GdkWindow *window, GdkDevice *device, GdkEventMask event_mask)
     * }
     */
    public static MethodHandle gdk_window_set_device_events$handle() {
        return gdk_window_set_device_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_device_events(GdkWindow *window, GdkDevice *device, GdkEventMask event_mask)
     * }
     */
    public static void gdk_window_set_device_events(MemorySegment window, MemorySegment device, int event_mask) {
        var mh$ = gdk_window_set_device_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_device_events", window, device, event_mask);
            }
            mh$.invokeExact(window, device, event_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_device_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_device_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEventMask gdk_window_get_device_events(GdkWindow *window, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gdk_window_get_device_events$descriptor() {
        return gdk_window_get_device_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEventMask gdk_window_get_device_events(GdkWindow *window, GdkDevice *device)
     * }
     */
    public static MethodHandle gdk_window_get_device_events$handle() {
        return gdk_window_get_device_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEventMask gdk_window_get_device_events(GdkWindow *window, GdkDevice *device)
     * }
     */
    public static int gdk_window_get_device_events(MemorySegment window, MemorySegment device) {
        var mh$ = gdk_window_get_device_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_device_events", window, device);
            }
            return (int)mh$.invokeExact(window, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_source_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_source_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_source_events(GdkWindow *window, GdkInputSource source, GdkEventMask event_mask)
     * }
     */
    public static FunctionDescriptor gdk_window_set_source_events$descriptor() {
        return gdk_window_set_source_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_source_events(GdkWindow *window, GdkInputSource source, GdkEventMask event_mask)
     * }
     */
    public static MethodHandle gdk_window_set_source_events$handle() {
        return gdk_window_set_source_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_source_events(GdkWindow *window, GdkInputSource source, GdkEventMask event_mask)
     * }
     */
    public static void gdk_window_set_source_events(MemorySegment window, int source, int event_mask) {
        var mh$ = gdk_window_set_source_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_source_events", window, source, event_mask);
            }
            mh$.invokeExact(window, source, event_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_source_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_source_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEventMask gdk_window_get_source_events(GdkWindow *window, GdkInputSource source)
     * }
     */
    public static FunctionDescriptor gdk_window_get_source_events$descriptor() {
        return gdk_window_get_source_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEventMask gdk_window_get_source_events(GdkWindow *window, GdkInputSource source)
     * }
     */
    public static MethodHandle gdk_window_get_source_events$handle() {
        return gdk_window_get_source_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEventMask gdk_window_get_source_events(GdkWindow *window, GdkInputSource source)
     * }
     */
    public static int gdk_window_get_source_events(MemorySegment window, int source) {
        var mh$ = gdk_window_get_source_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_source_events", window, source);
            }
            return (int)mh$.invokeExact(window, source);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_icon_list {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_icon_list"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_icon_list(GdkWindow *window, GList *pixbufs)
     * }
     */
    public static FunctionDescriptor gdk_window_set_icon_list$descriptor() {
        return gdk_window_set_icon_list.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_icon_list(GdkWindow *window, GList *pixbufs)
     * }
     */
    public static MethodHandle gdk_window_set_icon_list$handle() {
        return gdk_window_set_icon_list.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_icon_list(GdkWindow *window, GList *pixbufs)
     * }
     */
    public static void gdk_window_set_icon_list(MemorySegment window, MemorySegment pixbufs) {
        var mh$ = gdk_window_set_icon_list.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_icon_list", window, pixbufs);
            }
            mh$.invokeExact(window, pixbufs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_icon_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_icon_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_icon_name(GdkWindow *window, const gchar *name)
     * }
     */
    public static FunctionDescriptor gdk_window_set_icon_name$descriptor() {
        return gdk_window_set_icon_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_icon_name(GdkWindow *window, const gchar *name)
     * }
     */
    public static MethodHandle gdk_window_set_icon_name$handle() {
        return gdk_window_set_icon_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_icon_name(GdkWindow *window, const gchar *name)
     * }
     */
    public static void gdk_window_set_icon_name(MemorySegment window, MemorySegment name) {
        var mh$ = gdk_window_set_icon_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_icon_name", window, name);
            }
            mh$.invokeExact(window, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_group(GdkWindow *window, GdkWindow *leader)
     * }
     */
    public static FunctionDescriptor gdk_window_set_group$descriptor() {
        return gdk_window_set_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_group(GdkWindow *window, GdkWindow *leader)
     * }
     */
    public static MethodHandle gdk_window_set_group$handle() {
        return gdk_window_set_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_group(GdkWindow *window, GdkWindow *leader)
     * }
     */
    public static void gdk_window_set_group(MemorySegment window, MemorySegment leader) {
        var mh$ = gdk_window_set_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_group", window, leader);
            }
            mh$.invokeExact(window, leader);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_group(GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gdk_window_get_group$descriptor() {
        return gdk_window_get_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_group(GdkWindow *window)
     * }
     */
    public static MethodHandle gdk_window_get_group$handle() {
        return gdk_window_get_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gdk_window_get_group(GdkWindow *window)
     * }
     */
    public static MemorySegment gdk_window_get_group(MemorySegment window) {
        var mh$ = gdk_window_get_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_group", window);
            }
            return (MemorySegment)mh$.invokeExact(window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_set_decorations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_set_decorations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gdk_window_set_decorations(GdkWindow *window, GdkWMDecoration decorations)
     * }
     */
    public static FunctionDescriptor gdk_window_set_decorations$descriptor() {
        return gdk_window_set_decorations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gdk_window_set_decorations(GdkWindow *window, GdkWMDecoration decorations)
     * }
     */
    public static MethodHandle gdk_window_set_decorations$handle() {
        return gdk_window_set_decorations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gdk_window_set_decorations(GdkWindow *window, GdkWMDecoration decorations)
     * }
     */
    public static void gdk_window_set_decorations(MemorySegment window, int decorations) {
        var mh$ = gdk_window_set_decorations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_set_decorations", window, decorations);
            }
            mh$.invokeExact(window, decorations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gdk_window_get_decorations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gdk_window_get_decorations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_decorations(GdkWindow *window, GdkWMDecoration *decorations)
     * }
     */
    public static FunctionDescriptor gdk_window_get_decorations$descriptor() {
        return gdk_window_get_decorations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_decorations(GdkWindow *window, GdkWMDecoration *decorations)
     * }
     */
    public static MethodHandle gdk_window_get_decorations$handle() {
        return gdk_window_get_decorations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gdk_window_get_decorations(GdkWindow *window, GdkWMDecoration *decorations)
     * }
     */
    public static int gdk_window_get_decorations(MemorySegment window, MemorySegment decorations) {
        var mh$ = gdk_window_get_decorations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gdk_window_get_decorations", window, decorations);
            }
            return (int)mh$.invokeExact(window, decorations);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

