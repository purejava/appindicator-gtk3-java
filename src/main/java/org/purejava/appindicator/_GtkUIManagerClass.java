// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkUIManagerClass {
 *     struct _GObjectClass parent_class;
 *     void (*add_widget)(struct _GtkUIManager*,struct _GtkWidget*);
 *     void (*actions_changed)(struct _GtkUIManager*);
 *     void (*connect_proxy)(struct _GtkUIManager*,struct _GtkAction*,struct _GtkWidget*);
 *     void (*disconnect_proxy)(struct _GtkUIManager*,struct _GtkAction*,struct _GtkWidget*);
 *     void (*pre_activate)(struct _GtkUIManager*,struct _GtkAction*);
 *     void (*post_activate)(struct _GtkUIManager*,struct _GtkAction*);
 *     struct _GtkWidget* (*get_widget)(struct _GtkUIManager*,char*);
 *     struct _GtkAction* (*get_action)(struct _GtkUIManager*,char*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkUIManagerClass {

    public static MemoryLayout $LAYOUT() {
        return constants$3396.const$0;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*add_widget)(struct _GtkUIManager*,struct _GtkWidget*);
     * }
     */
    public interface add_widget {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(add_widget fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3396.const$1, fi, constants$13.const$4, scope);
        }
        static add_widget ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle add_widget$VH() {
        return constants$3396.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*add_widget)(struct _GtkUIManager*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment add_widget$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3396.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*add_widget)(struct _GtkUIManager*,struct _GtkWidget*);
     * }
     */
    public static void add_widget$set(MemorySegment seg, MemorySegment x) {
        constants$3396.const$2.set(seg, x);
    }
    public static MemorySegment add_widget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3396.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void add_widget$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3396.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_widget add_widget(MemorySegment segment, Arena scope) {
        return add_widget.ofAddress(add_widget$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*actions_changed)(struct _GtkUIManager*);
     * }
     */
    public interface actions_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(actions_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3396.const$3, fi, constants$13.const$1, scope);
        }
        static actions_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle actions_changed$VH() {
        return constants$3396.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*actions_changed)(struct _GtkUIManager*);
     * }
     */
    public static MemorySegment actions_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3396.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*actions_changed)(struct _GtkUIManager*);
     * }
     */
    public static void actions_changed$set(MemorySegment seg, MemorySegment x) {
        constants$3396.const$4.set(seg, x);
    }
    public static MemorySegment actions_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3396.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void actions_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3396.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static actions_changed actions_changed(MemorySegment segment, Arena scope) {
        return actions_changed.ofAddress(actions_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*connect_proxy)(struct _GtkUIManager*,struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public interface connect_proxy {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(connect_proxy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3396.const$5, fi, constants$14.const$3, scope);
        }
        static connect_proxy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle connect_proxy$VH() {
        return constants$3397.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*connect_proxy)(struct _GtkUIManager*,struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment connect_proxy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3397.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*connect_proxy)(struct _GtkUIManager*,struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public static void connect_proxy$set(MemorySegment seg, MemorySegment x) {
        constants$3397.const$0.set(seg, x);
    }
    public static MemorySegment connect_proxy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3397.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void connect_proxy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3397.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static connect_proxy connect_proxy(MemorySegment segment, Arena scope) {
        return connect_proxy.ofAddress(connect_proxy$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*disconnect_proxy)(struct _GtkUIManager*,struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public interface disconnect_proxy {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(disconnect_proxy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3397.const$1, fi, constants$14.const$3, scope);
        }
        static disconnect_proxy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle disconnect_proxy$VH() {
        return constants$3397.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*disconnect_proxy)(struct _GtkUIManager*,struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment disconnect_proxy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3397.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*disconnect_proxy)(struct _GtkUIManager*,struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public static void disconnect_proxy$set(MemorySegment seg, MemorySegment x) {
        constants$3397.const$2.set(seg, x);
    }
    public static MemorySegment disconnect_proxy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3397.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void disconnect_proxy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3397.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static disconnect_proxy disconnect_proxy(MemorySegment segment, Arena scope) {
        return disconnect_proxy.ofAddress(disconnect_proxy$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*pre_activate)(struct _GtkUIManager*,struct _GtkAction*);
     * }
     */
    public interface pre_activate {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(pre_activate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3397.const$3, fi, constants$13.const$4, scope);
        }
        static pre_activate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle pre_activate$VH() {
        return constants$3397.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*pre_activate)(struct _GtkUIManager*,struct _GtkAction*);
     * }
     */
    public static MemorySegment pre_activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3397.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*pre_activate)(struct _GtkUIManager*,struct _GtkAction*);
     * }
     */
    public static void pre_activate$set(MemorySegment seg, MemorySegment x) {
        constants$3397.const$4.set(seg, x);
    }
    public static MemorySegment pre_activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3397.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_activate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3397.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static pre_activate pre_activate(MemorySegment segment, Arena scope) {
        return pre_activate.ofAddress(pre_activate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*post_activate)(struct _GtkUIManager*,struct _GtkAction*);
     * }
     */
    public interface post_activate {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(post_activate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3397.const$5, fi, constants$13.const$4, scope);
        }
        static post_activate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle post_activate$VH() {
        return constants$3398.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*post_activate)(struct _GtkUIManager*,struct _GtkAction*);
     * }
     */
    public static MemorySegment post_activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3398.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*post_activate)(struct _GtkUIManager*,struct _GtkAction*);
     * }
     */
    public static void post_activate$set(MemorySegment seg, MemorySegment x) {
        constants$3398.const$0.set(seg, x);
    }
    public static MemorySegment post_activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3398.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void post_activate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3398.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static post_activate post_activate(MemorySegment segment, Arena scope) {
        return post_activate.ofAddress(post_activate$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkWidget* (*get_widget)(struct _GtkUIManager*,char*);
     * }
     */
    public interface get_widget {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_widget fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3398.const$1, fi, constants$5.const$5, scope);
        }
        static get_widget ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_widget$VH() {
        return constants$3398.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkWidget* (*get_widget)(struct _GtkUIManager*,char*);
     * }
     */
    public static MemorySegment get_widget$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3398.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkWidget* (*get_widget)(struct _GtkUIManager*,char*);
     * }
     */
    public static void get_widget$set(MemorySegment seg, MemorySegment x) {
        constants$3398.const$2.set(seg, x);
    }
    public static MemorySegment get_widget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3398.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_widget$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3398.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_widget get_widget(MemorySegment segment, Arena scope) {
        return get_widget.ofAddress(get_widget$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkAction* (*get_action)(struct _GtkUIManager*,char*);
     * }
     */
    public interface get_action {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_action fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3398.const$3, fi, constants$5.const$5, scope);
        }
        static get_action ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_action$VH() {
        return constants$3398.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkAction* (*get_action)(struct _GtkUIManager*,char*);
     * }
     */
    public static MemorySegment get_action$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3398.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkAction* (*get_action)(struct _GtkUIManager*,char*);
     * }
     */
    public static void get_action$set(MemorySegment seg, MemorySegment x) {
        constants$3398.const$4.set(seg, x);
    }
    public static MemorySegment get_action$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3398.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3398.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action get_action(MemorySegment segment, Arena scope) {
        return get_action.ofAddress(get_action$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3398.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$3399.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3399.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$3399.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3399.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3399.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3399.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$3399.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3399.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$3399.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3399.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3399.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3399.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$3399.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3399.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$3399.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3399.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3399.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3399.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$3400.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3400.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$3400.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3400.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3400.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


