// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkUIManagerClass {
 *     GObjectClass parent_class;
 *     void (*add_widget)(GtkUIManager *, GtkWidget *);
 *     void (*actions_changed)(GtkUIManager *);
 *     void (*connect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *);
 *     void (*disconnect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *);
 *     void (*pre_activate)(GtkUIManager *, GtkAction *);
 *     void (*post_activate)(GtkUIManager *, GtkAction *);
 *     GtkWidget *(*get_widget)(GtkUIManager *, const gchar *);
 *     GtkAction *(*get_action)(GtkUIManager *, const gchar *);
 *     void (*_gtk_reserved1)(void);
 *     void (*_gtk_reserved2)(void);
 *     void (*_gtk_reserved3)(void);
 *     void (*_gtk_reserved4)(void);
 * }
 * }
 */
public class _GtkUIManagerClass {

    _GtkUIManagerClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("add_widget"),
        app_indicator_h.C_POINTER.withName("actions_changed"),
        app_indicator_h.C_POINTER.withName("connect_proxy"),
        app_indicator_h.C_POINTER.withName("disconnect_proxy"),
        app_indicator_h.C_POINTER.withName("pre_activate"),
        app_indicator_h.C_POINTER.withName("post_activate"),
        app_indicator_h.C_POINTER.withName("get_widget"),
        app_indicator_h.C_POINTER.withName("get_action"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved1"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved2"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved3"),
        app_indicator_h.C_POINTER.withName("_gtk_reserved4")
    ).withName("_GtkUIManagerClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*add_widget)(GtkUIManager *, GtkWidget *)
     * }
     */
    public class add_widget {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(add_widget.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(add_widget.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout add_widget$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("add_widget"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*add_widget)(GtkUIManager *, GtkWidget *)
     * }
     */
    public static final AddressLayout add_widget$layout() {
        return add_widget$LAYOUT;
    }

    private static final long add_widget$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*add_widget)(GtkUIManager *, GtkWidget *)
     * }
     */
    public static final long add_widget$offset() {
        return add_widget$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*add_widget)(GtkUIManager *, GtkWidget *)
     * }
     */
    public static MemorySegment add_widget(MemorySegment struct) {
        return struct.get(add_widget$LAYOUT, add_widget$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*add_widget)(GtkUIManager *, GtkWidget *)
     * }
     */
    public static void add_widget(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(add_widget$LAYOUT, add_widget$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*actions_changed)(GtkUIManager *)
     * }
     */
    public class actions_changed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(actions_changed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(actions_changed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout actions_changed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("actions_changed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*actions_changed)(GtkUIManager *)
     * }
     */
    public static final AddressLayout actions_changed$layout() {
        return actions_changed$LAYOUT;
    }

    private static final long actions_changed$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*actions_changed)(GtkUIManager *)
     * }
     */
    public static final long actions_changed$offset() {
        return actions_changed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*actions_changed)(GtkUIManager *)
     * }
     */
    public static MemorySegment actions_changed(MemorySegment struct) {
        return struct.get(actions_changed$LAYOUT, actions_changed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*actions_changed)(GtkUIManager *)
     * }
     */
    public static void actions_changed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(actions_changed$LAYOUT, actions_changed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*connect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *)
     * }
     */
    public class connect_proxy {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(connect_proxy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(connect_proxy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout connect_proxy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("connect_proxy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*connect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *)
     * }
     */
    public static final AddressLayout connect_proxy$layout() {
        return connect_proxy$LAYOUT;
    }

    private static final long connect_proxy$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*connect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *)
     * }
     */
    public static final long connect_proxy$offset() {
        return connect_proxy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*connect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *)
     * }
     */
    public static MemorySegment connect_proxy(MemorySegment struct) {
        return struct.get(connect_proxy$LAYOUT, connect_proxy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*connect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *)
     * }
     */
    public static void connect_proxy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(connect_proxy$LAYOUT, connect_proxy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*disconnect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *)
     * }
     */
    public class disconnect_proxy {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(disconnect_proxy.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(disconnect_proxy.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout disconnect_proxy$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("disconnect_proxy"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*disconnect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *)
     * }
     */
    public static final AddressLayout disconnect_proxy$layout() {
        return disconnect_proxy$LAYOUT;
    }

    private static final long disconnect_proxy$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*disconnect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *)
     * }
     */
    public static final long disconnect_proxy$offset() {
        return disconnect_proxy$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*disconnect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *)
     * }
     */
    public static MemorySegment disconnect_proxy(MemorySegment struct) {
        return struct.get(disconnect_proxy$LAYOUT, disconnect_proxy$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*disconnect_proxy)(GtkUIManager *, GtkAction *, GtkWidget *)
     * }
     */
    public static void disconnect_proxy(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(disconnect_proxy$LAYOUT, disconnect_proxy$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*pre_activate)(GtkUIManager *, GtkAction *)
     * }
     */
    public class pre_activate {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(pre_activate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(pre_activate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout pre_activate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("pre_activate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*pre_activate)(GtkUIManager *, GtkAction *)
     * }
     */
    public static final AddressLayout pre_activate$layout() {
        return pre_activate$LAYOUT;
    }

    private static final long pre_activate$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*pre_activate)(GtkUIManager *, GtkAction *)
     * }
     */
    public static final long pre_activate$offset() {
        return pre_activate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*pre_activate)(GtkUIManager *, GtkAction *)
     * }
     */
    public static MemorySegment pre_activate(MemorySegment struct) {
        return struct.get(pre_activate$LAYOUT, pre_activate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*pre_activate)(GtkUIManager *, GtkAction *)
     * }
     */
    public static void pre_activate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(pre_activate$LAYOUT, pre_activate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*post_activate)(GtkUIManager *, GtkAction *)
     * }
     */
    public class post_activate {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(post_activate.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(post_activate.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout post_activate$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("post_activate"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*post_activate)(GtkUIManager *, GtkAction *)
     * }
     */
    public static final AddressLayout post_activate$layout() {
        return post_activate$LAYOUT;
    }

    private static final long post_activate$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*post_activate)(GtkUIManager *, GtkAction *)
     * }
     */
    public static final long post_activate$offset() {
        return post_activate$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*post_activate)(GtkUIManager *, GtkAction *)
     * }
     */
    public static MemorySegment post_activate(MemorySegment struct) {
        return struct.get(post_activate$LAYOUT, post_activate$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*post_activate)(GtkUIManager *, GtkAction *)
     * }
     */
    public static void post_activate(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(post_activate$LAYOUT, post_activate$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GtkWidget *(*get_widget)(GtkUIManager *, const gchar *)
     * }
     */
    public class get_widget {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_widget.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_widget.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_widget$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_widget"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkWidget *(*get_widget)(GtkUIManager *, const gchar *)
     * }
     */
    public static final AddressLayout get_widget$layout() {
        return get_widget$LAYOUT;
    }

    private static final long get_widget$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkWidget *(*get_widget)(GtkUIManager *, const gchar *)
     * }
     */
    public static final long get_widget$offset() {
        return get_widget$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkWidget *(*get_widget)(GtkUIManager *, const gchar *)
     * }
     */
    public static MemorySegment get_widget(MemorySegment struct) {
        return struct.get(get_widget$LAYOUT, get_widget$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkWidget *(*get_widget)(GtkUIManager *, const gchar *)
     * }
     */
    public static void get_widget(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_widget$LAYOUT, get_widget$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GtkAction *(*get_action)(GtkUIManager *, const gchar *)
     * }
     */
    public class get_action {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_action.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_action.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_action$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_action"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkAction *(*get_action)(GtkUIManager *, const gchar *)
     * }
     */
    public static final AddressLayout get_action$layout() {
        return get_action$LAYOUT;
    }

    private static final long get_action$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkAction *(*get_action)(GtkUIManager *, const gchar *)
     * }
     */
    public static final long get_action$offset() {
        return get_action$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkAction *(*get_action)(GtkUIManager *, const gchar *)
     * }
     */
    public static MemorySegment get_action(MemorySegment struct) {
        return struct.get(get_action$LAYOUT, get_action$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkAction *(*get_action)(GtkUIManager *, const gchar *)
     * }
     */
    public static void get_action(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_action$LAYOUT, get_action$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public class _gtk_reserved1 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved1.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved1.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved1$layout() {
        return _gtk_reserved1$LAYOUT;
    }

    private static final long _gtk_reserved1$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static final long _gtk_reserved1$offset() {
        return _gtk_reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static MemorySegment _gtk_reserved1(MemorySegment struct) {
        return struct.get(_gtk_reserved1$LAYOUT, _gtk_reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved1)(void)
     * }
     */
    public static void _gtk_reserved1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved1$LAYOUT, _gtk_reserved1$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public class _gtk_reserved2 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved2$layout() {
        return _gtk_reserved2$LAYOUT;
    }

    private static final long _gtk_reserved2$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static final long _gtk_reserved2$offset() {
        return _gtk_reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static MemorySegment _gtk_reserved2(MemorySegment struct) {
        return struct.get(_gtk_reserved2$LAYOUT, _gtk_reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved2)(void)
     * }
     */
    public static void _gtk_reserved2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved2$LAYOUT, _gtk_reserved2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public class _gtk_reserved3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved3$layout() {
        return _gtk_reserved3$LAYOUT;
    }

    private static final long _gtk_reserved3$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static final long _gtk_reserved3$offset() {
        return _gtk_reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static MemorySegment _gtk_reserved3(MemorySegment struct) {
        return struct.get(_gtk_reserved3$LAYOUT, _gtk_reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved3)(void)
     * }
     */
    public static void _gtk_reserved3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved3$LAYOUT, _gtk_reserved3$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public class _gtk_reserved4 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_gtk_reserved4.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_gtk_reserved4.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _gtk_reserved4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_gtk_reserved4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static final AddressLayout _gtk_reserved4$layout() {
        return _gtk_reserved4$LAYOUT;
    }

    private static final long _gtk_reserved4$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static final long _gtk_reserved4$offset() {
        return _gtk_reserved4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static MemorySegment _gtk_reserved4(MemorySegment struct) {
        return struct.get(_gtk_reserved4$LAYOUT, _gtk_reserved4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_gtk_reserved4)(void)
     * }
     */
    public static void _gtk_reserved4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_gtk_reserved4$LAYOUT, _gtk_reserved4$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

