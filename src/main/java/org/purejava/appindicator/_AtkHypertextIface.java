// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _AtkHypertextIface {
 *     struct _GTypeInterface parent;
 *     struct _AtkHyperlink* (*get_link)(struct _AtkHypertext*,int);
 *     int (*get_n_links)(struct _AtkHypertext*);
 *     int (*get_link_index)(struct _AtkHypertext*,int);
 *     void (*link_selected)(struct _AtkHypertext*,int);
 * };
 * }
 */
public class _AtkHypertextIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2036.const$0;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * struct _AtkHyperlink* (*get_link)(struct _AtkHypertext*,int);
     * }
     */
    public interface get_link {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_link fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2036.const$1, fi, constants$21.const$3, scope);
        }
        static get_link ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$318.const$0.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_link$VH() {
        return constants$2036.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkHyperlink* (*get_link)(struct _AtkHypertext*,int);
     * }
     */
    public static MemorySegment get_link$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2036.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkHyperlink* (*get_link)(struct _AtkHypertext*,int);
     * }
     */
    public static void get_link$set(MemorySegment seg, MemorySegment x) {
        constants$2036.const$2.set(seg, x);
    }
    public static MemorySegment get_link$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2036.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_link$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2036.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_link get_link(MemorySegment segment, Arena scope) {
        return get_link.ofAddress(get_link$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_n_links)(struct _AtkHypertext*);
     * }
     */
    public interface get_n_links {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_n_links fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2036.const$3, fi, constants$10.const$5, scope);
        }
        static get_n_links ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_n_links$VH() {
        return constants$2036.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_n_links)(struct _AtkHypertext*);
     * }
     */
    public static MemorySegment get_n_links$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2036.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_n_links)(struct _AtkHypertext*);
     * }
     */
    public static void get_n_links$set(MemorySegment seg, MemorySegment x) {
        constants$2036.const$4.set(seg, x);
    }
    public static MemorySegment get_n_links$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2036.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_links$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2036.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_links get_n_links(MemorySegment segment, Arena scope) {
        return get_n_links.ofAddress(get_n_links$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_link_index)(struct _AtkHypertext*,int);
     * }
     */
    public interface get_link_index {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_link_index fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2036.const$5, fi, constants$11.const$4, scope);
        }
        static get_link_index ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_link_index$VH() {
        return constants$2037.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_link_index)(struct _AtkHypertext*,int);
     * }
     */
    public static MemorySegment get_link_index$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2037.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_link_index)(struct _AtkHypertext*,int);
     * }
     */
    public static void get_link_index$set(MemorySegment seg, MemorySegment x) {
        constants$2037.const$0.set(seg, x);
    }
    public static MemorySegment get_link_index$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2037.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_link_index$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2037.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_link_index get_link_index(MemorySegment segment, Arena scope) {
        return get_link_index.ofAddress(get_link_index$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*link_selected)(struct _AtkHypertext*,int);
     * }
     */
    public interface link_selected {

        void apply(java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(link_selected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2037.const$1, fi, constants$40.const$2, scope);
        }
        static link_selected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle link_selected$VH() {
        return constants$2037.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*link_selected)(struct _AtkHypertext*,int);
     * }
     */
    public static MemorySegment link_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2037.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*link_selected)(struct _AtkHypertext*,int);
     * }
     */
    public static void link_selected$set(MemorySegment seg, MemorySegment x) {
        constants$2037.const$2.set(seg, x);
    }
    public static MemorySegment link_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2037.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void link_selected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2037.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static link_selected link_selected(MemorySegment segment, Arena scope) {
        return link_selected.ofAddress(link_selected$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


