// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _AppIndicatorClass {
 *     GObjectClass parent_class;
 *     void (*new_icon)(AppIndicator *, gpointer);
 *     void (*new_attention_icon)(AppIndicator *, gpointer);
 *     void (*new_status)(AppIndicator *, const gchar *, gpointer);
 *     void (*new_icon_theme_path)(AppIndicator *, const gchar *, gpointer);
 *     void (*new_label)(AppIndicator *, const gchar *, const gchar *, gpointer);
 *     void (*connection_changed)(AppIndicator *, gboolean, gpointer);
 *     void (*scroll_event)(AppIndicator *, gint, GdkScrollDirection, gpointer);
 *     void (*app_indicator_reserved_ats)(void);
 *     GtkStatusIcon *(*fallback)(AppIndicator *);
 *     void (*unfallback)(AppIndicator *, GtkStatusIcon *);
 *     void (*app_indicator_reserved_1)(void);
 *     void (*app_indicator_reserved_2)(void);
 *     void (*app_indicator_reserved_3)(void);
 *     void (*app_indicator_reserved_4)(void);
 *     void (*app_indicator_reserved_5)(void);
 *     void (*app_indicator_reserved_6)(void);
 * }
 * }
 */
public class _AppIndicatorClass {

    _AppIndicatorClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("new_icon"),
        app_indicator_h.C_POINTER.withName("new_attention_icon"),
        app_indicator_h.C_POINTER.withName("new_status"),
        app_indicator_h.C_POINTER.withName("new_icon_theme_path"),
        app_indicator_h.C_POINTER.withName("new_label"),
        app_indicator_h.C_POINTER.withName("connection_changed"),
        app_indicator_h.C_POINTER.withName("scroll_event"),
        app_indicator_h.C_POINTER.withName("app_indicator_reserved_ats"),
        app_indicator_h.C_POINTER.withName("fallback"),
        app_indicator_h.C_POINTER.withName("unfallback"),
        app_indicator_h.C_POINTER.withName("app_indicator_reserved_1"),
        app_indicator_h.C_POINTER.withName("app_indicator_reserved_2"),
        app_indicator_h.C_POINTER.withName("app_indicator_reserved_3"),
        app_indicator_h.C_POINTER.withName("app_indicator_reserved_4"),
        app_indicator_h.C_POINTER.withName("app_indicator_reserved_5"),
        app_indicator_h.C_POINTER.withName("app_indicator_reserved_6")
    ).withName("_AppIndicatorClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*new_icon)(AppIndicator *, gpointer)
     * }
     */
    public class new_icon {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(new_icon.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(new_icon.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout new_icon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("new_icon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*new_icon)(AppIndicator *, gpointer)
     * }
     */
    public static final AddressLayout new_icon$layout() {
        return new_icon$LAYOUT;
    }

    private static final long new_icon$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*new_icon)(AppIndicator *, gpointer)
     * }
     */
    public static final long new_icon$offset() {
        return new_icon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*new_icon)(AppIndicator *, gpointer)
     * }
     */
    public static MemorySegment new_icon(MemorySegment struct) {
        return struct.get(new_icon$LAYOUT, new_icon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*new_icon)(AppIndicator *, gpointer)
     * }
     */
    public static void new_icon(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(new_icon$LAYOUT, new_icon$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*new_attention_icon)(AppIndicator *, gpointer)
     * }
     */
    public class new_attention_icon {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(new_attention_icon.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(new_attention_icon.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout new_attention_icon$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("new_attention_icon"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*new_attention_icon)(AppIndicator *, gpointer)
     * }
     */
    public static final AddressLayout new_attention_icon$layout() {
        return new_attention_icon$LAYOUT;
    }

    private static final long new_attention_icon$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*new_attention_icon)(AppIndicator *, gpointer)
     * }
     */
    public static final long new_attention_icon$offset() {
        return new_attention_icon$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*new_attention_icon)(AppIndicator *, gpointer)
     * }
     */
    public static MemorySegment new_attention_icon(MemorySegment struct) {
        return struct.get(new_attention_icon$LAYOUT, new_attention_icon$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*new_attention_icon)(AppIndicator *, gpointer)
     * }
     */
    public static void new_attention_icon(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(new_attention_icon$LAYOUT, new_attention_icon$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*new_status)(AppIndicator *, const gchar *, gpointer)
     * }
     */
    public class new_status {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(new_status.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(new_status.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout new_status$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("new_status"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*new_status)(AppIndicator *, const gchar *, gpointer)
     * }
     */
    public static final AddressLayout new_status$layout() {
        return new_status$LAYOUT;
    }

    private static final long new_status$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*new_status)(AppIndicator *, const gchar *, gpointer)
     * }
     */
    public static final long new_status$offset() {
        return new_status$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*new_status)(AppIndicator *, const gchar *, gpointer)
     * }
     */
    public static MemorySegment new_status(MemorySegment struct) {
        return struct.get(new_status$LAYOUT, new_status$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*new_status)(AppIndicator *, const gchar *, gpointer)
     * }
     */
    public static void new_status(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(new_status$LAYOUT, new_status$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*new_icon_theme_path)(AppIndicator *, const gchar *, gpointer)
     * }
     */
    public class new_icon_theme_path {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(new_icon_theme_path.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(new_icon_theme_path.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout new_icon_theme_path$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("new_icon_theme_path"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*new_icon_theme_path)(AppIndicator *, const gchar *, gpointer)
     * }
     */
    public static final AddressLayout new_icon_theme_path$layout() {
        return new_icon_theme_path$LAYOUT;
    }

    private static final long new_icon_theme_path$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*new_icon_theme_path)(AppIndicator *, const gchar *, gpointer)
     * }
     */
    public static final long new_icon_theme_path$offset() {
        return new_icon_theme_path$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*new_icon_theme_path)(AppIndicator *, const gchar *, gpointer)
     * }
     */
    public static MemorySegment new_icon_theme_path(MemorySegment struct) {
        return struct.get(new_icon_theme_path$LAYOUT, new_icon_theme_path$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*new_icon_theme_path)(AppIndicator *, const gchar *, gpointer)
     * }
     */
    public static void new_icon_theme_path(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(new_icon_theme_path$LAYOUT, new_icon_theme_path$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*new_label)(AppIndicator *, const gchar *, const gchar *, gpointer)
     * }
     */
    public class new_label {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(new_label.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(new_label.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout new_label$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("new_label"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*new_label)(AppIndicator *, const gchar *, const gchar *, gpointer)
     * }
     */
    public static final AddressLayout new_label$layout() {
        return new_label$LAYOUT;
    }

    private static final long new_label$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*new_label)(AppIndicator *, const gchar *, const gchar *, gpointer)
     * }
     */
    public static final long new_label$offset() {
        return new_label$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*new_label)(AppIndicator *, const gchar *, const gchar *, gpointer)
     * }
     */
    public static MemorySegment new_label(MemorySegment struct) {
        return struct.get(new_label$LAYOUT, new_label$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*new_label)(AppIndicator *, const gchar *, const gchar *, gpointer)
     * }
     */
    public static void new_label(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(new_label$LAYOUT, new_label$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*connection_changed)(AppIndicator *, gboolean, gpointer)
     * }
     */
    public class connection_changed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(connection_changed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(connection_changed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout connection_changed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("connection_changed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*connection_changed)(AppIndicator *, gboolean, gpointer)
     * }
     */
    public static final AddressLayout connection_changed$layout() {
        return connection_changed$LAYOUT;
    }

    private static final long connection_changed$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*connection_changed)(AppIndicator *, gboolean, gpointer)
     * }
     */
    public static final long connection_changed$offset() {
        return connection_changed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*connection_changed)(AppIndicator *, gboolean, gpointer)
     * }
     */
    public static MemorySegment connection_changed(MemorySegment struct) {
        return struct.get(connection_changed$LAYOUT, connection_changed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*connection_changed)(AppIndicator *, gboolean, gpointer)
     * }
     */
    public static void connection_changed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(connection_changed$LAYOUT, connection_changed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*scroll_event)(AppIndicator *, gint, GdkScrollDirection, gpointer)
     * }
     */
    public class scroll_event {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, int _x1, int _x2, MemorySegment _x3);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(scroll_event.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(scroll_event.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, int _x1, int _x2, MemorySegment _x3) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2, _x3);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout scroll_event$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("scroll_event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*scroll_event)(AppIndicator *, gint, GdkScrollDirection, gpointer)
     * }
     */
    public static final AddressLayout scroll_event$layout() {
        return scroll_event$LAYOUT;
    }

    private static final long scroll_event$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*scroll_event)(AppIndicator *, gint, GdkScrollDirection, gpointer)
     * }
     */
    public static final long scroll_event$offset() {
        return scroll_event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*scroll_event)(AppIndicator *, gint, GdkScrollDirection, gpointer)
     * }
     */
    public static MemorySegment scroll_event(MemorySegment struct) {
        return struct.get(scroll_event$LAYOUT, scroll_event$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*scroll_event)(AppIndicator *, gint, GdkScrollDirection, gpointer)
     * }
     */
    public static void scroll_event(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(scroll_event$LAYOUT, scroll_event$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*app_indicator_reserved_ats)(void)
     * }
     */
    public class app_indicator_reserved_ats {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(app_indicator_reserved_ats.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(app_indicator_reserved_ats.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout app_indicator_reserved_ats$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("app_indicator_reserved_ats"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_ats)(void)
     * }
     */
    public static final AddressLayout app_indicator_reserved_ats$layout() {
        return app_indicator_reserved_ats$LAYOUT;
    }

    private static final long app_indicator_reserved_ats$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_ats)(void)
     * }
     */
    public static final long app_indicator_reserved_ats$offset() {
        return app_indicator_reserved_ats$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_ats)(void)
     * }
     */
    public static MemorySegment app_indicator_reserved_ats(MemorySegment struct) {
        return struct.get(app_indicator_reserved_ats$LAYOUT, app_indicator_reserved_ats$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_ats)(void)
     * }
     */
    public static void app_indicator_reserved_ats(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(app_indicator_reserved_ats$LAYOUT, app_indicator_reserved_ats$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GtkStatusIcon *(*fallback)(AppIndicator *)
     * }
     */
    public class fallback {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(fallback.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(fallback.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout fallback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("fallback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkStatusIcon *(*fallback)(AppIndicator *)
     * }
     */
    public static final AddressLayout fallback$layout() {
        return fallback$LAYOUT;
    }

    private static final long fallback$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkStatusIcon *(*fallback)(AppIndicator *)
     * }
     */
    public static final long fallback$offset() {
        return fallback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkStatusIcon *(*fallback)(AppIndicator *)
     * }
     */
    public static MemorySegment fallback(MemorySegment struct) {
        return struct.get(fallback$LAYOUT, fallback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkStatusIcon *(*fallback)(AppIndicator *)
     * }
     */
    public static void fallback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(fallback$LAYOUT, fallback$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*unfallback)(AppIndicator *, GtkStatusIcon *)
     * }
     */
    public class unfallback {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(unfallback.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(unfallback.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout unfallback$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("unfallback"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*unfallback)(AppIndicator *, GtkStatusIcon *)
     * }
     */
    public static final AddressLayout unfallback$layout() {
        return unfallback$LAYOUT;
    }

    private static final long unfallback$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*unfallback)(AppIndicator *, GtkStatusIcon *)
     * }
     */
    public static final long unfallback$offset() {
        return unfallback$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*unfallback)(AppIndicator *, GtkStatusIcon *)
     * }
     */
    public static MemorySegment unfallback(MemorySegment struct) {
        return struct.get(unfallback$LAYOUT, unfallback$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*unfallback)(AppIndicator *, GtkStatusIcon *)
     * }
     */
    public static void unfallback(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(unfallback$LAYOUT, unfallback$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*app_indicator_reserved_1)(void)
     * }
     */
    public class app_indicator_reserved_1 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(app_indicator_reserved_1.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(app_indicator_reserved_1.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout app_indicator_reserved_1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("app_indicator_reserved_1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_1)(void)
     * }
     */
    public static final AddressLayout app_indicator_reserved_1$layout() {
        return app_indicator_reserved_1$LAYOUT;
    }

    private static final long app_indicator_reserved_1$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_1)(void)
     * }
     */
    public static final long app_indicator_reserved_1$offset() {
        return app_indicator_reserved_1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_1)(void)
     * }
     */
    public static MemorySegment app_indicator_reserved_1(MemorySegment struct) {
        return struct.get(app_indicator_reserved_1$LAYOUT, app_indicator_reserved_1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_1)(void)
     * }
     */
    public static void app_indicator_reserved_1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(app_indicator_reserved_1$LAYOUT, app_indicator_reserved_1$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*app_indicator_reserved_2)(void)
     * }
     */
    public class app_indicator_reserved_2 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(app_indicator_reserved_2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(app_indicator_reserved_2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout app_indicator_reserved_2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("app_indicator_reserved_2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_2)(void)
     * }
     */
    public static final AddressLayout app_indicator_reserved_2$layout() {
        return app_indicator_reserved_2$LAYOUT;
    }

    private static final long app_indicator_reserved_2$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_2)(void)
     * }
     */
    public static final long app_indicator_reserved_2$offset() {
        return app_indicator_reserved_2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_2)(void)
     * }
     */
    public static MemorySegment app_indicator_reserved_2(MemorySegment struct) {
        return struct.get(app_indicator_reserved_2$LAYOUT, app_indicator_reserved_2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_2)(void)
     * }
     */
    public static void app_indicator_reserved_2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(app_indicator_reserved_2$LAYOUT, app_indicator_reserved_2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*app_indicator_reserved_3)(void)
     * }
     */
    public class app_indicator_reserved_3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(app_indicator_reserved_3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(app_indicator_reserved_3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout app_indicator_reserved_3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("app_indicator_reserved_3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_3)(void)
     * }
     */
    public static final AddressLayout app_indicator_reserved_3$layout() {
        return app_indicator_reserved_3$LAYOUT;
    }

    private static final long app_indicator_reserved_3$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_3)(void)
     * }
     */
    public static final long app_indicator_reserved_3$offset() {
        return app_indicator_reserved_3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_3)(void)
     * }
     */
    public static MemorySegment app_indicator_reserved_3(MemorySegment struct) {
        return struct.get(app_indicator_reserved_3$LAYOUT, app_indicator_reserved_3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_3)(void)
     * }
     */
    public static void app_indicator_reserved_3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(app_indicator_reserved_3$LAYOUT, app_indicator_reserved_3$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*app_indicator_reserved_4)(void)
     * }
     */
    public class app_indicator_reserved_4 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(app_indicator_reserved_4.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(app_indicator_reserved_4.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout app_indicator_reserved_4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("app_indicator_reserved_4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_4)(void)
     * }
     */
    public static final AddressLayout app_indicator_reserved_4$layout() {
        return app_indicator_reserved_4$LAYOUT;
    }

    private static final long app_indicator_reserved_4$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_4)(void)
     * }
     */
    public static final long app_indicator_reserved_4$offset() {
        return app_indicator_reserved_4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_4)(void)
     * }
     */
    public static MemorySegment app_indicator_reserved_4(MemorySegment struct) {
        return struct.get(app_indicator_reserved_4$LAYOUT, app_indicator_reserved_4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_4)(void)
     * }
     */
    public static void app_indicator_reserved_4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(app_indicator_reserved_4$LAYOUT, app_indicator_reserved_4$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*app_indicator_reserved_5)(void)
     * }
     */
    public class app_indicator_reserved_5 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(app_indicator_reserved_5.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(app_indicator_reserved_5.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout app_indicator_reserved_5$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("app_indicator_reserved_5"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_5)(void)
     * }
     */
    public static final AddressLayout app_indicator_reserved_5$layout() {
        return app_indicator_reserved_5$LAYOUT;
    }

    private static final long app_indicator_reserved_5$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_5)(void)
     * }
     */
    public static final long app_indicator_reserved_5$offset() {
        return app_indicator_reserved_5$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_5)(void)
     * }
     */
    public static MemorySegment app_indicator_reserved_5(MemorySegment struct) {
        return struct.get(app_indicator_reserved_5$LAYOUT, app_indicator_reserved_5$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_5)(void)
     * }
     */
    public static void app_indicator_reserved_5(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(app_indicator_reserved_5$LAYOUT, app_indicator_reserved_5$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*app_indicator_reserved_6)(void)
     * }
     */
    public class app_indicator_reserved_6 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(app_indicator_reserved_6.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(app_indicator_reserved_6.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout app_indicator_reserved_6$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("app_indicator_reserved_6"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_6)(void)
     * }
     */
    public static final AddressLayout app_indicator_reserved_6$layout() {
        return app_indicator_reserved_6$LAYOUT;
    }

    private static final long app_indicator_reserved_6$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_6)(void)
     * }
     */
    public static final long app_indicator_reserved_6$offset() {
        return app_indicator_reserved_6$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_6)(void)
     * }
     */
    public static MemorySegment app_indicator_reserved_6(MemorySegment struct) {
        return struct.get(app_indicator_reserved_6$LAYOUT, app_indicator_reserved_6$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*app_indicator_reserved_6)(void)
     * }
     */
    public static void app_indicator_reserved_6(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(app_indicator_reserved_6$LAYOUT, app_indicator_reserved_6$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

