// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_16 extends app_indicator_h_17 {

    app_indicator_h_16() {
        // Should not be called directly
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean g_variant_lookup(GVariant *dictionary, const gchar *key, const gchar *format_string, ...)
     * }
     */
    public static class g_variant_lookup {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_lookup");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_lookup(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean g_variant_lookup(GVariant *dictionary, const gchar *key, const gchar *format_string, ...)
         * }
         */
        public static g_variant_lookup makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_lookup(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment dictionary, MemorySegment key, MemorySegment format_string, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_lookup", dictionary, key, format_string, x3);
                }
                return (int)spreader.invokeExact(dictionary, key, format_string, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_variant_lookup_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_lookup_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_lookup_value(GVariant *dictionary, const gchar *key, const GVariantType *expected_type)
     * }
     */
    public static FunctionDescriptor g_variant_lookup_value$descriptor() {
        return g_variant_lookup_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_lookup_value(GVariant *dictionary, const gchar *key, const GVariantType *expected_type)
     * }
     */
    public static MethodHandle g_variant_lookup_value$handle() {
        return g_variant_lookup_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_lookup_value(GVariant *dictionary, const gchar *key, const GVariantType *expected_type)
     * }
     */
    public static MemorySegment g_variant_lookup_value(MemorySegment dictionary, MemorySegment key, MemorySegment expected_type) {
        var mh$ = g_variant_lookup_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_lookup_value", dictionary, key, expected_type);
            }
            return (MemorySegment)mh$.invokeExact(dictionary, key, expected_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_fixed_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_fixed_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gconstpointer g_variant_get_fixed_array(GVariant *value, gsize *n_elements, gsize element_size)
     * }
     */
    public static FunctionDescriptor g_variant_get_fixed_array$descriptor() {
        return g_variant_get_fixed_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gconstpointer g_variant_get_fixed_array(GVariant *value, gsize *n_elements, gsize element_size)
     * }
     */
    public static MethodHandle g_variant_get_fixed_array$handle() {
        return g_variant_get_fixed_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gconstpointer g_variant_get_fixed_array(GVariant *value, gsize *n_elements, gsize element_size)
     * }
     */
    public static MemorySegment g_variant_get_fixed_array(MemorySegment value, MemorySegment n_elements, long element_size) {
        var mh$ = g_variant_get_fixed_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_fixed_array", value, n_elements, element_size);
            }
            return (MemorySegment)mh$.invokeExact(value, n_elements, element_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_variant_get_size(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_size$descriptor() {
        return g_variant_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_variant_get_size(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_size$handle() {
        return g_variant_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_variant_get_size(GVariant *value)
     * }
     */
    public static long g_variant_get_size(MemorySegment value) {
        var mh$ = g_variant_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_size", value);
            }
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gconstpointer g_variant_get_data(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_data$descriptor() {
        return g_variant_get_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gconstpointer g_variant_get_data(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_data$handle() {
        return g_variant_get_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gconstpointer g_variant_get_data(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_get_data(MemorySegment value) {
        var mh$ = g_variant_get_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_data", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_data_as_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_data_as_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_variant_get_data_as_bytes(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_data_as_bytes$descriptor() {
        return g_variant_get_data_as_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_variant_get_data_as_bytes(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_data_as_bytes$handle() {
        return g_variant_get_data_as_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_variant_get_data_as_bytes(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_get_data_as_bytes(MemorySegment value) {
        var mh$ = g_variant_get_data_as_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_data_as_bytes", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_store {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_store"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_store(GVariant *value, gpointer data)
     * }
     */
    public static FunctionDescriptor g_variant_store$descriptor() {
        return g_variant_store.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_store(GVariant *value, gpointer data)
     * }
     */
    public static MethodHandle g_variant_store$handle() {
        return g_variant_store.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_store(GVariant *value, gpointer data)
     * }
     */
    public static void g_variant_store(MemorySegment value, MemorySegment data) {
        var mh$ = g_variant_store.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_store", value, data);
            }
            mh$.invokeExact(value, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_print"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_variant_print(GVariant *value, gboolean type_annotate)
     * }
     */
    public static FunctionDescriptor g_variant_print$descriptor() {
        return g_variant_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_variant_print(GVariant *value, gboolean type_annotate)
     * }
     */
    public static MethodHandle g_variant_print$handle() {
        return g_variant_print.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_variant_print(GVariant *value, gboolean type_annotate)
     * }
     */
    public static MemorySegment g_variant_print(MemorySegment value, int type_annotate) {
        var mh$ = g_variant_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_print", value, type_annotate);
            }
            return (MemorySegment)mh$.invokeExact(value, type_annotate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_print_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_print_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GString *g_variant_print_string(GVariant *value, GString *string, gboolean type_annotate)
     * }
     */
    public static FunctionDescriptor g_variant_print_string$descriptor() {
        return g_variant_print_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GString *g_variant_print_string(GVariant *value, GString *string, gboolean type_annotate)
     * }
     */
    public static MethodHandle g_variant_print_string$handle() {
        return g_variant_print_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GString *g_variant_print_string(GVariant *value, GString *string, gboolean type_annotate)
     * }
     */
    public static MemorySegment g_variant_print_string(MemorySegment value, MemorySegment string, int type_annotate) {
        var mh$ = g_variant_print_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_print_string", value, string, type_annotate);
            }
            return (MemorySegment)mh$.invokeExact(value, string, type_annotate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_hash {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_hash"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_variant_hash(gconstpointer value)
     * }
     */
    public static FunctionDescriptor g_variant_hash$descriptor() {
        return g_variant_hash.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_variant_hash(gconstpointer value)
     * }
     */
    public static MethodHandle g_variant_hash$handle() {
        return g_variant_hash.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_variant_hash(gconstpointer value)
     * }
     */
    public static int g_variant_hash(MemorySegment value) {
        var mh$ = g_variant_hash.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_hash", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_equal(gconstpointer one, gconstpointer two)
     * }
     */
    public static FunctionDescriptor g_variant_equal$descriptor() {
        return g_variant_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_equal(gconstpointer one, gconstpointer two)
     * }
     */
    public static MethodHandle g_variant_equal$handle() {
        return g_variant_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_equal(gconstpointer one, gconstpointer two)
     * }
     */
    public static int g_variant_equal(MemorySegment one, MemorySegment two) {
        var mh$ = g_variant_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_equal", one, two);
            }
            return (int)mh$.invokeExact(one, two);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_normal_form {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_normal_form"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_normal_form(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_get_normal_form$descriptor() {
        return g_variant_get_normal_form.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_normal_form(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_get_normal_form$handle() {
        return g_variant_get_normal_form.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_get_normal_form(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_get_normal_form(MemorySegment value) {
        var mh$ = g_variant_get_normal_form.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_normal_form", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_is_normal_form {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_is_normal_form"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_normal_form(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_is_normal_form$descriptor() {
        return g_variant_is_normal_form.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_is_normal_form(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_is_normal_form$handle() {
        return g_variant_is_normal_form.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_is_normal_form(GVariant *value)
     * }
     */
    public static int g_variant_is_normal_form(MemorySegment value) {
        var mh$ = g_variant_is_normal_form.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_is_normal_form", value);
            }
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_byteswap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_byteswap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_byteswap(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_byteswap$descriptor() {
        return g_variant_byteswap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_byteswap(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_byteswap$handle() {
        return g_variant_byteswap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_byteswap(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_byteswap(MemorySegment value) {
        var mh$ = g_variant_byteswap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_byteswap", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_from_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_from_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_from_bytes(const GVariantType *type, GBytes *bytes, gboolean trusted)
     * }
     */
    public static FunctionDescriptor g_variant_new_from_bytes$descriptor() {
        return g_variant_new_from_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_from_bytes(const GVariantType *type, GBytes *bytes, gboolean trusted)
     * }
     */
    public static MethodHandle g_variant_new_from_bytes$handle() {
        return g_variant_new_from_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_from_bytes(const GVariantType *type, GBytes *bytes, gboolean trusted)
     * }
     */
    public static MemorySegment g_variant_new_from_bytes(MemorySegment type, MemorySegment bytes, int trusted) {
        var mh$ = g_variant_new_from_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_from_bytes", type, bytes, trusted);
            }
            return (MemorySegment)mh$.invokeExact(type, bytes, trusted);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_new_from_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_from_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_from_data(const GVariantType *type, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_variant_new_from_data$descriptor() {
        return g_variant_new_from_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_from_data(const GVariantType *type, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data)
     * }
     */
    public static MethodHandle g_variant_new_from_data$handle() {
        return g_variant_new_from_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_from_data(const GVariantType *type, gconstpointer data, gsize size, gboolean trusted, GDestroyNotify notify, gpointer user_data)
     * }
     */
    public static MemorySegment g_variant_new_from_data(MemorySegment type, MemorySegment data, long size, int trusted, MemorySegment notify, MemorySegment user_data) {
        var mh$ = g_variant_new_from_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_from_data", type, data, size, trusted, notify, user_data);
            }
            return (MemorySegment)mh$.invokeExact(type, data, size, trusted, notify, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_iter_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_iter_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantIter *g_variant_iter_new(GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_iter_new$descriptor() {
        return g_variant_iter_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantIter *g_variant_iter_new(GVariant *value)
     * }
     */
    public static MethodHandle g_variant_iter_new$handle() {
        return g_variant_iter_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantIter *g_variant_iter_new(GVariant *value)
     * }
     */
    public static MemorySegment g_variant_iter_new(MemorySegment value) {
        var mh$ = g_variant_iter_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_iter_new", value);
            }
            return (MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_iter_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_iter_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_variant_iter_init(GVariantIter *iter, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_iter_init$descriptor() {
        return g_variant_iter_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_variant_iter_init(GVariantIter *iter, GVariant *value)
     * }
     */
    public static MethodHandle g_variant_iter_init$handle() {
        return g_variant_iter_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_variant_iter_init(GVariantIter *iter, GVariant *value)
     * }
     */
    public static long g_variant_iter_init(MemorySegment iter, MemorySegment value) {
        var mh$ = g_variant_iter_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_iter_init", iter, value);
            }
            return (long)mh$.invokeExact(iter, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_iter_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_iter_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantIter *g_variant_iter_copy(GVariantIter *iter)
     * }
     */
    public static FunctionDescriptor g_variant_iter_copy$descriptor() {
        return g_variant_iter_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantIter *g_variant_iter_copy(GVariantIter *iter)
     * }
     */
    public static MethodHandle g_variant_iter_copy$handle() {
        return g_variant_iter_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantIter *g_variant_iter_copy(GVariantIter *iter)
     * }
     */
    public static MemorySegment g_variant_iter_copy(MemorySegment iter) {
        var mh$ = g_variant_iter_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_iter_copy", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_iter_n_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_iter_n_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_variant_iter_n_children(GVariantIter *iter)
     * }
     */
    public static FunctionDescriptor g_variant_iter_n_children$descriptor() {
        return g_variant_iter_n_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_variant_iter_n_children(GVariantIter *iter)
     * }
     */
    public static MethodHandle g_variant_iter_n_children$handle() {
        return g_variant_iter_n_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_variant_iter_n_children(GVariantIter *iter)
     * }
     */
    public static long g_variant_iter_n_children(MemorySegment iter) {
        var mh$ = g_variant_iter_n_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_iter_n_children", iter);
            }
            return (long)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_iter_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_iter_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_iter_free(GVariantIter *iter)
     * }
     */
    public static FunctionDescriptor g_variant_iter_free$descriptor() {
        return g_variant_iter_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_iter_free(GVariantIter *iter)
     * }
     */
    public static MethodHandle g_variant_iter_free$handle() {
        return g_variant_iter_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_iter_free(GVariantIter *iter)
     * }
     */
    public static void g_variant_iter_free(MemorySegment iter) {
        var mh$ = g_variant_iter_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_iter_free", iter);
            }
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_iter_next_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_iter_next_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_iter_next_value(GVariantIter *iter)
     * }
     */
    public static FunctionDescriptor g_variant_iter_next_value$descriptor() {
        return g_variant_iter_next_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_iter_next_value(GVariantIter *iter)
     * }
     */
    public static MethodHandle g_variant_iter_next_value$handle() {
        return g_variant_iter_next_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_iter_next_value(GVariantIter *iter)
     * }
     */
    public static MemorySegment g_variant_iter_next_value(MemorySegment iter) {
        var mh$ = g_variant_iter_next_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_iter_next_value", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean g_variant_iter_next(GVariantIter *iter, const gchar *format_string, ...)
     * }
     */
    public static class g_variant_iter_next {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_iter_next");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_iter_next(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean g_variant_iter_next(GVariantIter *iter, const gchar *format_string, ...)
         * }
         */
        public static g_variant_iter_next makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_iter_next(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment iter, MemorySegment format_string, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_iter_next", iter, format_string, x2);
                }
                return (int)spreader.invokeExact(iter, format_string, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean g_variant_iter_loop(GVariantIter *iter, const gchar *format_string, ...)
     * }
     */
    public static class g_variant_iter_loop {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_iter_loop");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_iter_loop(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean g_variant_iter_loop(GVariantIter *iter, const gchar *format_string, ...)
         * }
         */
        public static g_variant_iter_loop makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_iter_loop(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment iter, MemorySegment format_string, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_iter_loop", iter, format_string, x2);
                }
                return (int)spreader.invokeExact(iter, format_string, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }
    private static final int G_VARIANT_PARSE_ERROR_FAILED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_FAILED = 0
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_FAILED() {
        return G_VARIANT_PARSE_ERROR_FAILED;
    }
    private static final int G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED() {
        return G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED;
    }
    private static final int G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE() {
        return G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE;
    }
    private static final int G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED() {
        return G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED;
    }
    private static final int G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END() {
        return G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END;
    }
    private static final int G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INVALID_CHARACTER() {
        return G_VARIANT_PARSE_ERROR_INVALID_CHARACTER;
    }
    private static final int G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING() {
        return G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING;
    }
    private static final int G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH() {
        return G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH;
    }
    private static final int G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE() {
        return G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE;
    }
    private static final int G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING() {
        return G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING;
    }
    private static final int G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE() {
        return G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE;
    }
    private static final int G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE() {
        return G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE;
    }
    private static final int G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG() {
        return G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG;
    }
    private static final int G_VARIANT_PARSE_ERROR_TYPE_ERROR = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_TYPE_ERROR() {
        return G_VARIANT_PARSE_ERROR_TYPE_ERROR;
    }
    private static final int G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN() {
        return G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN;
    }
    private static final int G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD() {
        return G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD;
    }
    private static final int G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT() {
        return G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT;
    }
    private static final int G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_VALUE_EXPECTED() {
        return G_VARIANT_PARSE_ERROR_VALUE_EXPECTED;
    }
    private static final int G_VARIANT_PARSE_ERROR_RECURSION = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_VARIANT_PARSE_ERROR_RECURSION = 18
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_RECURSION() {
        return G_VARIANT_PARSE_ERROR_RECURSION;
    }

    private static class g_variant_parser_get_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_parser_get_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_variant_parser_get_error_quark()
     * }
     */
    public static FunctionDescriptor g_variant_parser_get_error_quark$descriptor() {
        return g_variant_parser_get_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_variant_parser_get_error_quark()
     * }
     */
    public static MethodHandle g_variant_parser_get_error_quark$handle() {
        return g_variant_parser_get_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_variant_parser_get_error_quark()
     * }
     */
    public static int g_variant_parser_get_error_quark() {
        var mh$ = g_variant_parser_get_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_parser_get_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_parse_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_parse_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_variant_parse_error_quark()
     * }
     */
    public static FunctionDescriptor g_variant_parse_error_quark$descriptor() {
        return g_variant_parse_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_variant_parse_error_quark()
     * }
     */
    public static MethodHandle g_variant_parse_error_quark$handle() {
        return g_variant_parse_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_variant_parse_error_quark()
     * }
     */
    public static int g_variant_parse_error_quark() {
        var mh$ = g_variant_parse_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_parse_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_builder_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_builder_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantBuilder *g_variant_builder_new(const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_builder_new$descriptor() {
        return g_variant_builder_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantBuilder *g_variant_builder_new(const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_builder_new$handle() {
        return g_variant_builder_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantBuilder *g_variant_builder_new(const GVariantType *type)
     * }
     */
    public static MemorySegment g_variant_builder_new(MemorySegment type) {
        var mh$ = g_variant_builder_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_builder_new", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_builder_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_builder_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_builder_unref(GVariantBuilder *builder)
     * }
     */
    public static FunctionDescriptor g_variant_builder_unref$descriptor() {
        return g_variant_builder_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_builder_unref(GVariantBuilder *builder)
     * }
     */
    public static MethodHandle g_variant_builder_unref$handle() {
        return g_variant_builder_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_builder_unref(GVariantBuilder *builder)
     * }
     */
    public static void g_variant_builder_unref(MemorySegment builder) {
        var mh$ = g_variant_builder_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_builder_unref", builder);
            }
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_builder_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_builder_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantBuilder *g_variant_builder_ref(GVariantBuilder *builder)
     * }
     */
    public static FunctionDescriptor g_variant_builder_ref$descriptor() {
        return g_variant_builder_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantBuilder *g_variant_builder_ref(GVariantBuilder *builder)
     * }
     */
    public static MethodHandle g_variant_builder_ref$handle() {
        return g_variant_builder_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantBuilder *g_variant_builder_ref(GVariantBuilder *builder)
     * }
     */
    public static MemorySegment g_variant_builder_ref(MemorySegment builder) {
        var mh$ = g_variant_builder_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_builder_ref", builder);
            }
            return (MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_builder_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_builder_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_builder_init(GVariantBuilder *builder, const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_builder_init$descriptor() {
        return g_variant_builder_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_builder_init(GVariantBuilder *builder, const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_builder_init$handle() {
        return g_variant_builder_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_builder_init(GVariantBuilder *builder, const GVariantType *type)
     * }
     */
    public static void g_variant_builder_init(MemorySegment builder, MemorySegment type) {
        var mh$ = g_variant_builder_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_builder_init", builder, type);
            }
            mh$.invokeExact(builder, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_builder_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_builder_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_builder_end(GVariantBuilder *builder)
     * }
     */
    public static FunctionDescriptor g_variant_builder_end$descriptor() {
        return g_variant_builder_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_builder_end(GVariantBuilder *builder)
     * }
     */
    public static MethodHandle g_variant_builder_end$handle() {
        return g_variant_builder_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_builder_end(GVariantBuilder *builder)
     * }
     */
    public static MemorySegment g_variant_builder_end(MemorySegment builder) {
        var mh$ = g_variant_builder_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_builder_end", builder);
            }
            return (MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_builder_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_builder_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_builder_clear(GVariantBuilder *builder)
     * }
     */
    public static FunctionDescriptor g_variant_builder_clear$descriptor() {
        return g_variant_builder_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_builder_clear(GVariantBuilder *builder)
     * }
     */
    public static MethodHandle g_variant_builder_clear$handle() {
        return g_variant_builder_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_builder_clear(GVariantBuilder *builder)
     * }
     */
    public static void g_variant_builder_clear(MemorySegment builder) {
        var mh$ = g_variant_builder_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_builder_clear", builder);
            }
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_builder_open {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_builder_open"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_builder_open(GVariantBuilder *builder, const GVariantType *type)
     * }
     */
    public static FunctionDescriptor g_variant_builder_open$descriptor() {
        return g_variant_builder_open.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_builder_open(GVariantBuilder *builder, const GVariantType *type)
     * }
     */
    public static MethodHandle g_variant_builder_open$handle() {
        return g_variant_builder_open.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_builder_open(GVariantBuilder *builder, const GVariantType *type)
     * }
     */
    public static void g_variant_builder_open(MemorySegment builder, MemorySegment type) {
        var mh$ = g_variant_builder_open.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_builder_open", builder, type);
            }
            mh$.invokeExact(builder, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_builder_close {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_builder_close"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_builder_close(GVariantBuilder *builder)
     * }
     */
    public static FunctionDescriptor g_variant_builder_close$descriptor() {
        return g_variant_builder_close.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_builder_close(GVariantBuilder *builder)
     * }
     */
    public static MethodHandle g_variant_builder_close$handle() {
        return g_variant_builder_close.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_builder_close(GVariantBuilder *builder)
     * }
     */
    public static void g_variant_builder_close(MemorySegment builder) {
        var mh$ = g_variant_builder_close.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_builder_close", builder);
            }
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_builder_add_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_builder_add_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_builder_add_value(GVariantBuilder *builder, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_builder_add_value$descriptor() {
        return g_variant_builder_add_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_builder_add_value(GVariantBuilder *builder, GVariant *value)
     * }
     */
    public static MethodHandle g_variant_builder_add_value$handle() {
        return g_variant_builder_add_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_builder_add_value(GVariantBuilder *builder, GVariant *value)
     * }
     */
    public static void g_variant_builder_add_value(MemorySegment builder, MemorySegment value) {
        var mh$ = g_variant_builder_add_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_builder_add_value", builder, value);
            }
            mh$.invokeExact(builder, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_variant_builder_add(GVariantBuilder *builder, const gchar *format_string, ...)
     * }
     */
    public static class g_variant_builder_add {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_builder_add");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_builder_add(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_variant_builder_add(GVariantBuilder *builder, const gchar *format_string, ...)
         * }
         */
        public static g_variant_builder_add makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_builder_add(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment builder, MemorySegment format_string, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_builder_add", builder, format_string, x2);
                }
                spreader.invokeExact(builder, format_string, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_variant_builder_add_parsed(GVariantBuilder *builder, const gchar *format, ...)
     * }
     */
    public static class g_variant_builder_add_parsed {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_builder_add_parsed");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_builder_add_parsed(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_variant_builder_add_parsed(GVariantBuilder *builder, const gchar *format, ...)
         * }
         */
        public static g_variant_builder_add_parsed makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_builder_add_parsed(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment builder, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_builder_add_parsed", builder, format, x2);
                }
                spreader.invokeExact(builder, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new(const gchar *format_string, ...)
     * }
     */
    public static class g_variant_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GVariant *g_variant_new(const gchar *format_string, ...)
         * }
         */
        public static g_variant_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment format_string, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_new", format_string, x1);
                }
                return (MemorySegment)spreader.invokeExact(format_string, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_variant_get(GVariant *value, const gchar *format_string, ...)
     * }
     */
    public static class g_variant_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_variant_get(GVariant *value, const gchar *format_string, ...)
         * }
         */
        public static g_variant_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment value, MemorySegment format_string, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_get", value, format_string, x2);
                }
                spreader.invokeExact(value, format_string, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_variant_new_va {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_va"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_va(const gchar *format_string, const gchar **endptr, va_list *app)
     * }
     */
    public static FunctionDescriptor g_variant_new_va$descriptor() {
        return g_variant_new_va.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_va(const gchar *format_string, const gchar **endptr, va_list *app)
     * }
     */
    public static MethodHandle g_variant_new_va$handle() {
        return g_variant_new_va.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_va(const gchar *format_string, const gchar **endptr, va_list *app)
     * }
     */
    public static MemorySegment g_variant_new_va(MemorySegment format_string, MemorySegment endptr, MemorySegment app) {
        var mh$ = g_variant_new_va.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_va", format_string, endptr, app);
            }
            return (MemorySegment)mh$.invokeExact(format_string, endptr, app);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_get_va {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_get_va"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_get_va(GVariant *value, const gchar *format_string, const gchar **endptr, va_list *app)
     * }
     */
    public static FunctionDescriptor g_variant_get_va$descriptor() {
        return g_variant_get_va.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_get_va(GVariant *value, const gchar *format_string, const gchar **endptr, va_list *app)
     * }
     */
    public static MethodHandle g_variant_get_va$handle() {
        return g_variant_get_va.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_get_va(GVariant *value, const gchar *format_string, const gchar **endptr, va_list *app)
     * }
     */
    public static void g_variant_get_va(MemorySegment value, MemorySegment format_string, MemorySegment endptr, MemorySegment app) {
        var mh$ = g_variant_get_va.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_get_va", value, format_string, endptr, app);
            }
            mh$.invokeExact(value, format_string, endptr, app);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_check_format_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_check_format_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_check_format_string(GVariant *value, const gchar *format_string, gboolean copy_only)
     * }
     */
    public static FunctionDescriptor g_variant_check_format_string$descriptor() {
        return g_variant_check_format_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_check_format_string(GVariant *value, const gchar *format_string, gboolean copy_only)
     * }
     */
    public static MethodHandle g_variant_check_format_string$handle() {
        return g_variant_check_format_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_check_format_string(GVariant *value, const gchar *format_string, gboolean copy_only)
     * }
     */
    public static int g_variant_check_format_string(MemorySegment value, MemorySegment format_string, int copy_only) {
        var mh$ = g_variant_check_format_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_check_format_string", value, format_string, copy_only);
            }
            return (int)mh$.invokeExact(value, format_string, copy_only);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_parse(const GVariantType *type, const gchar *text, const gchar *limit, const gchar **endptr, GError **error)
     * }
     */
    public static FunctionDescriptor g_variant_parse$descriptor() {
        return g_variant_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_parse(const GVariantType *type, const gchar *text, const gchar *limit, const gchar **endptr, GError **error)
     * }
     */
    public static MethodHandle g_variant_parse$handle() {
        return g_variant_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_parse(const GVariantType *type, const gchar *text, const gchar *limit, const gchar **endptr, GError **error)
     * }
     */
    public static MemorySegment g_variant_parse(MemorySegment type, MemorySegment text, MemorySegment limit, MemorySegment endptr, MemorySegment error) {
        var mh$ = g_variant_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_parse", type, text, limit, endptr, error);
            }
            return (MemorySegment)mh$.invokeExact(type, text, limit, endptr, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_parsed(const gchar *format, ...)
     * }
     */
    public static class g_variant_new_parsed {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_new_parsed");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_new_parsed(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GVariant *g_variant_new_parsed(const gchar *format, ...)
         * }
         */
        public static g_variant_new_parsed makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_new_parsed(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_new_parsed", format, x1);
                }
                return (MemorySegment)spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_variant_new_parsed_va {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_new_parsed_va"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_parsed_va(const gchar *format, va_list *app)
     * }
     */
    public static FunctionDescriptor g_variant_new_parsed_va$descriptor() {
        return g_variant_new_parsed_va.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_parsed_va(const gchar *format, va_list *app)
     * }
     */
    public static MethodHandle g_variant_new_parsed_va$handle() {
        return g_variant_new_parsed_va.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_new_parsed_va(const gchar *format, va_list *app)
     * }
     */
    public static MemorySegment g_variant_new_parsed_va(MemorySegment format, MemorySegment app) {
        var mh$ = g_variant_new_parsed_va.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_new_parsed_va", format, app);
            }
            return (MemorySegment)mh$.invokeExact(format, app);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_parse_error_print_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_parse_error_print_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_variant_parse_error_print_context(GError *error, const gchar *source_str)
     * }
     */
    public static FunctionDescriptor g_variant_parse_error_print_context$descriptor() {
        return g_variant_parse_error_print_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_variant_parse_error_print_context(GError *error, const gchar *source_str)
     * }
     */
    public static MethodHandle g_variant_parse_error_print_context$handle() {
        return g_variant_parse_error_print_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_variant_parse_error_print_context(GError *error, const gchar *source_str)
     * }
     */
    public static MemorySegment g_variant_parse_error_print_context(MemorySegment error, MemorySegment source_str) {
        var mh$ = g_variant_parse_error_print_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_parse_error_print_context", error, source_str);
            }
            return (MemorySegment)mh$.invokeExact(error, source_str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_compare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_variant_compare(gconstpointer one, gconstpointer two)
     * }
     */
    public static FunctionDescriptor g_variant_compare$descriptor() {
        return g_variant_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_variant_compare(gconstpointer one, gconstpointer two)
     * }
     */
    public static MethodHandle g_variant_compare$handle() {
        return g_variant_compare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_variant_compare(gconstpointer one, gconstpointer two)
     * }
     */
    public static int g_variant_compare(MemorySegment one, MemorySegment two) {
        var mh$ = g_variant_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_compare", one, two);
            }
            return (int)mh$.invokeExact(one, two);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dict_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantDict *g_variant_dict_new(GVariant *from_asv)
     * }
     */
    public static FunctionDescriptor g_variant_dict_new$descriptor() {
        return g_variant_dict_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantDict *g_variant_dict_new(GVariant *from_asv)
     * }
     */
    public static MethodHandle g_variant_dict_new$handle() {
        return g_variant_dict_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantDict *g_variant_dict_new(GVariant *from_asv)
     * }
     */
    public static MemorySegment g_variant_dict_new(MemorySegment from_asv) {
        var mh$ = g_variant_dict_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_new", from_asv);
            }
            return (MemorySegment)mh$.invokeExact(from_asv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dict_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_dict_init(GVariantDict *dict, GVariant *from_asv)
     * }
     */
    public static FunctionDescriptor g_variant_dict_init$descriptor() {
        return g_variant_dict_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_dict_init(GVariantDict *dict, GVariant *from_asv)
     * }
     */
    public static MethodHandle g_variant_dict_init$handle() {
        return g_variant_dict_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_dict_init(GVariantDict *dict, GVariant *from_asv)
     * }
     */
    public static void g_variant_dict_init(MemorySegment dict, MemorySegment from_asv) {
        var mh$ = g_variant_dict_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_init", dict, from_asv);
            }
            mh$.invokeExact(dict, from_asv);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean g_variant_dict_lookup(GVariantDict *dict, const gchar *key, const gchar *format_string, ...)
     * }
     */
    public static class g_variant_dict_lookup {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_dict_lookup");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_dict_lookup(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean g_variant_dict_lookup(GVariantDict *dict, const gchar *key, const gchar *format_string, ...)
         * }
         */
        public static g_variant_dict_lookup makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_dict_lookup(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment dict, MemorySegment key, MemorySegment format_string, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_dict_lookup", dict, key, format_string, x3);
                }
                return (int)spreader.invokeExact(dict, key, format_string, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_variant_dict_lookup_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_lookup_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_dict_lookup_value(GVariantDict *dict, const gchar *key, const GVariantType *expected_type)
     * }
     */
    public static FunctionDescriptor g_variant_dict_lookup_value$descriptor() {
        return g_variant_dict_lookup_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_dict_lookup_value(GVariantDict *dict, const gchar *key, const GVariantType *expected_type)
     * }
     */
    public static MethodHandle g_variant_dict_lookup_value$handle() {
        return g_variant_dict_lookup_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_dict_lookup_value(GVariantDict *dict, const gchar *key, const GVariantType *expected_type)
     * }
     */
    public static MemorySegment g_variant_dict_lookup_value(MemorySegment dict, MemorySegment key, MemorySegment expected_type) {
        var mh$ = g_variant_dict_lookup_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_lookup_value", dict, key, expected_type);
            }
            return (MemorySegment)mh$.invokeExact(dict, key, expected_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dict_contains {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_contains"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_dict_contains(GVariantDict *dict, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_variant_dict_contains$descriptor() {
        return g_variant_dict_contains.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_dict_contains(GVariantDict *dict, const gchar *key)
     * }
     */
    public static MethodHandle g_variant_dict_contains$handle() {
        return g_variant_dict_contains.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_dict_contains(GVariantDict *dict, const gchar *key)
     * }
     */
    public static int g_variant_dict_contains(MemorySegment dict, MemorySegment key) {
        var mh$ = g_variant_dict_contains.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_contains", dict, key);
            }
            return (int)mh$.invokeExact(dict, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_variant_dict_insert(GVariantDict *dict, const gchar *key, const gchar *format_string, ...)
     * }
     */
    public static class g_variant_dict_insert {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_variant_dict_insert");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_variant_dict_insert(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_variant_dict_insert(GVariantDict *dict, const gchar *key, const gchar *format_string, ...)
         * }
         */
        public static g_variant_dict_insert makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_variant_dict_insert(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment dict, MemorySegment key, MemorySegment format_string, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_variant_dict_insert", dict, key, format_string, x3);
                }
                spreader.invokeExact(dict, key, format_string, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_variant_dict_insert_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_insert_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_dict_insert_value(GVariantDict *dict, const gchar *key, GVariant *value)
     * }
     */
    public static FunctionDescriptor g_variant_dict_insert_value$descriptor() {
        return g_variant_dict_insert_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_dict_insert_value(GVariantDict *dict, const gchar *key, GVariant *value)
     * }
     */
    public static MethodHandle g_variant_dict_insert_value$handle() {
        return g_variant_dict_insert_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_dict_insert_value(GVariantDict *dict, const gchar *key, GVariant *value)
     * }
     */
    public static void g_variant_dict_insert_value(MemorySegment dict, MemorySegment key, MemorySegment value) {
        var mh$ = g_variant_dict_insert_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_insert_value", dict, key, value);
            }
            mh$.invokeExact(dict, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dict_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_variant_dict_remove(GVariantDict *dict, const gchar *key)
     * }
     */
    public static FunctionDescriptor g_variant_dict_remove$descriptor() {
        return g_variant_dict_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_variant_dict_remove(GVariantDict *dict, const gchar *key)
     * }
     */
    public static MethodHandle g_variant_dict_remove$handle() {
        return g_variant_dict_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_variant_dict_remove(GVariantDict *dict, const gchar *key)
     * }
     */
    public static int g_variant_dict_remove(MemorySegment dict, MemorySegment key) {
        var mh$ = g_variant_dict_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_remove", dict, key);
            }
            return (int)mh$.invokeExact(dict, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dict_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_dict_clear(GVariantDict *dict)
     * }
     */
    public static FunctionDescriptor g_variant_dict_clear$descriptor() {
        return g_variant_dict_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_dict_clear(GVariantDict *dict)
     * }
     */
    public static MethodHandle g_variant_dict_clear$handle() {
        return g_variant_dict_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_dict_clear(GVariantDict *dict)
     * }
     */
    public static void g_variant_dict_clear(MemorySegment dict) {
        var mh$ = g_variant_dict_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_clear", dict);
            }
            mh$.invokeExact(dict);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dict_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_dict_end(GVariantDict *dict)
     * }
     */
    public static FunctionDescriptor g_variant_dict_end$descriptor() {
        return g_variant_dict_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariant *g_variant_dict_end(GVariantDict *dict)
     * }
     */
    public static MethodHandle g_variant_dict_end$handle() {
        return g_variant_dict_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariant *g_variant_dict_end(GVariantDict *dict)
     * }
     */
    public static MemorySegment g_variant_dict_end(MemorySegment dict) {
        var mh$ = g_variant_dict_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_end", dict);
            }
            return (MemorySegment)mh$.invokeExact(dict);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dict_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GVariantDict *g_variant_dict_ref(GVariantDict *dict)
     * }
     */
    public static FunctionDescriptor g_variant_dict_ref$descriptor() {
        return g_variant_dict_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GVariantDict *g_variant_dict_ref(GVariantDict *dict)
     * }
     */
    public static MethodHandle g_variant_dict_ref$handle() {
        return g_variant_dict_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GVariantDict *g_variant_dict_ref(GVariantDict *dict)
     * }
     */
    public static MemorySegment g_variant_dict_ref(MemorySegment dict) {
        var mh$ = g_variant_dict_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_ref", dict);
            }
            return (MemorySegment)mh$.invokeExact(dict);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_variant_dict_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_variant_dict_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_variant_dict_unref(GVariantDict *dict)
     * }
     */
    public static FunctionDescriptor g_variant_dict_unref$descriptor() {
        return g_variant_dict_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_variant_dict_unref(GVariantDict *dict)
     * }
     */
    public static MethodHandle g_variant_dict_unref$handle() {
        return g_variant_dict_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_variant_dict_unref(GVariantDict *dict)
     * }
     */
    public static void g_variant_dict_unref(MemorySegment dict) {
        var mh$ = g_variant_dict_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_variant_dict_unref", dict);
            }
            mh$.invokeExact(dict);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_LOG_FLAG_RECURSION = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_FLAG_RECURSION = 1
     * }
     */
    public static int G_LOG_FLAG_RECURSION() {
        return G_LOG_FLAG_RECURSION;
    }
    private static final int G_LOG_FLAG_FATAL = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_FLAG_FATAL = 2
     * }
     */
    public static int G_LOG_FLAG_FATAL() {
        return G_LOG_FLAG_FATAL;
    }
    private static final int G_LOG_LEVEL_ERROR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_LEVEL_ERROR = 4
     * }
     */
    public static int G_LOG_LEVEL_ERROR() {
        return G_LOG_LEVEL_ERROR;
    }
    private static final int G_LOG_LEVEL_CRITICAL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_LEVEL_CRITICAL = 8
     * }
     */
    public static int G_LOG_LEVEL_CRITICAL() {
        return G_LOG_LEVEL_CRITICAL;
    }
    private static final int G_LOG_LEVEL_WARNING = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_LEVEL_WARNING = 16
     * }
     */
    public static int G_LOG_LEVEL_WARNING() {
        return G_LOG_LEVEL_WARNING;
    }
    private static final int G_LOG_LEVEL_MESSAGE = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_LEVEL_MESSAGE = 32
     * }
     */
    public static int G_LOG_LEVEL_MESSAGE() {
        return G_LOG_LEVEL_MESSAGE;
    }
    private static final int G_LOG_LEVEL_INFO = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_LEVEL_INFO = 64
     * }
     */
    public static int G_LOG_LEVEL_INFO() {
        return G_LOG_LEVEL_INFO;
    }
    private static final int G_LOG_LEVEL_DEBUG = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_LEVEL_DEBUG = 128
     * }
     */
    public static int G_LOG_LEVEL_DEBUG() {
        return G_LOG_LEVEL_DEBUG;
    }
    private static final int G_LOG_LEVEL_MASK = (int)-4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_LEVEL_MASK = -4
     * }
     */
    public static int G_LOG_LEVEL_MASK() {
        return G_LOG_LEVEL_MASK;
    }

    private static class g_log_set_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_set_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_log_set_handler(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_log_set_handler$descriptor() {
        return g_log_set_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_log_set_handler(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_log_set_handler$handle() {
        return g_log_set_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_log_set_handler(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data)
     * }
     */
    public static int g_log_set_handler(MemorySegment log_domain, int log_levels, MemorySegment log_func, MemorySegment user_data) {
        var mh$ = g_log_set_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_set_handler", log_domain, log_levels, log_func, user_data);
            }
            return (int)mh$.invokeExact(log_domain, log_levels, log_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_set_handler_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_set_handler_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_log_set_handler_full(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_log_set_handler_full$descriptor() {
        return g_log_set_handler_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_log_set_handler_full(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_log_set_handler_full$handle() {
        return g_log_set_handler_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_log_set_handler_full(const gchar *log_domain, GLogLevelFlags log_levels, GLogFunc log_func, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static int g_log_set_handler_full(MemorySegment log_domain, int log_levels, MemorySegment log_func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = g_log_set_handler_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_set_handler_full", log_domain, log_levels, log_func, user_data, destroy);
            }
            return (int)mh$.invokeExact(log_domain, log_levels, log_func, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_remove_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_remove_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_log_remove_handler(const gchar *log_domain, guint handler_id)
     * }
     */
    public static FunctionDescriptor g_log_remove_handler$descriptor() {
        return g_log_remove_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_log_remove_handler(const gchar *log_domain, guint handler_id)
     * }
     */
    public static MethodHandle g_log_remove_handler$handle() {
        return g_log_remove_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_log_remove_handler(const gchar *log_domain, guint handler_id)
     * }
     */
    public static void g_log_remove_handler(MemorySegment log_domain, int handler_id) {
        var mh$ = g_log_remove_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_remove_handler", log_domain, handler_id);
            }
            mh$.invokeExact(log_domain, handler_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_default_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_default_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_log_default_handler(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data)
     * }
     */
    public static FunctionDescriptor g_log_default_handler$descriptor() {
        return g_log_default_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_log_default_handler(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data)
     * }
     */
    public static MethodHandle g_log_default_handler$handle() {
        return g_log_default_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_log_default_handler(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data)
     * }
     */
    public static void g_log_default_handler(MemorySegment log_domain, int log_level, MemorySegment message, MemorySegment unused_data) {
        var mh$ = g_log_default_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_default_handler", log_domain, log_level, message, unused_data);
            }
            mh$.invokeExact(log_domain, log_level, message, unused_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_set_default_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_set_default_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLogFunc g_log_set_default_handler(GLogFunc log_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_log_set_default_handler$descriptor() {
        return g_log_set_default_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLogFunc g_log_set_default_handler(GLogFunc log_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_log_set_default_handler$handle() {
        return g_log_set_default_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GLogFunc g_log_set_default_handler(GLogFunc log_func, gpointer user_data)
     * }
     */
    public static MemorySegment g_log_set_default_handler(MemorySegment log_func, MemorySegment user_data) {
        var mh$ = g_log_set_default_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_set_default_handler", log_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(log_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_log(const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, ...)
     * }
     */
    public static class g_log {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_log");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_log(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_log(const gchar *log_domain, GLogLevelFlags log_level, const gchar *format, ...)
         * }
         */
        public static g_log makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_log(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment log_domain, int log_level, MemorySegment format, Object... x3) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_log", log_domain, log_level, format, x3);
                }
                spreader.invokeExact(log_domain, log_level, format, x3);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_log_set_fatal_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_set_fatal_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLogLevelFlags g_log_set_fatal_mask(const gchar *log_domain, GLogLevelFlags fatal_mask)
     * }
     */
    public static FunctionDescriptor g_log_set_fatal_mask$descriptor() {
        return g_log_set_fatal_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLogLevelFlags g_log_set_fatal_mask(const gchar *log_domain, GLogLevelFlags fatal_mask)
     * }
     */
    public static MethodHandle g_log_set_fatal_mask$handle() {
        return g_log_set_fatal_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GLogLevelFlags g_log_set_fatal_mask(const gchar *log_domain, GLogLevelFlags fatal_mask)
     * }
     */
    public static int g_log_set_fatal_mask(MemorySegment log_domain, int fatal_mask) {
        var mh$ = g_log_set_fatal_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_set_fatal_mask", log_domain, fatal_mask);
            }
            return (int)mh$.invokeExact(log_domain, fatal_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_set_always_fatal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_set_always_fatal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLogLevelFlags g_log_set_always_fatal(GLogLevelFlags fatal_mask)
     * }
     */
    public static FunctionDescriptor g_log_set_always_fatal$descriptor() {
        return g_log_set_always_fatal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLogLevelFlags g_log_set_always_fatal(GLogLevelFlags fatal_mask)
     * }
     */
    public static MethodHandle g_log_set_always_fatal$handle() {
        return g_log_set_always_fatal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GLogLevelFlags g_log_set_always_fatal(GLogLevelFlags fatal_mask)
     * }
     */
    public static int g_log_set_always_fatal(int fatal_mask) {
        var mh$ = g_log_set_always_fatal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_set_always_fatal", fatal_mask);
            }
            return (int)mh$.invokeExact(fatal_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_LOG_WRITER_HANDLED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_WRITER_HANDLED = 1
     * }
     */
    public static int G_LOG_WRITER_HANDLED() {
        return G_LOG_WRITER_HANDLED;
    }
    private static final int G_LOG_WRITER_UNHANDLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_LOG_WRITER_UNHANDLED = 0
     * }
     */
    public static int G_LOG_WRITER_UNHANDLED() {
        return G_LOG_WRITER_UNHANDLED;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_log_structured(const gchar *log_domain, GLogLevelFlags log_level, ...)
     * }
     */
    public static class g_log_structured {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_log_structured");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_log_structured(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_log_structured(const gchar *log_domain, GLogLevelFlags log_level, ...)
         * }
         */
        public static g_log_structured makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_log_structured(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment log_domain, int log_level, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_log_structured", log_domain, log_level, x2);
                }
                spreader.invokeExact(log_domain, log_level, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_log_structured_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_structured_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_log_structured_array(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields)
     * }
     */
    public static FunctionDescriptor g_log_structured_array$descriptor() {
        return g_log_structured_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_log_structured_array(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields)
     * }
     */
    public static MethodHandle g_log_structured_array$handle() {
        return g_log_structured_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_log_structured_array(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields)
     * }
     */
    public static void g_log_structured_array(int log_level, MemorySegment fields, long n_fields) {
        var mh$ = g_log_structured_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_structured_array", log_level, fields, n_fields);
            }
            mh$.invokeExact(log_level, fields, n_fields);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_variant {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_variant"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_log_variant(const gchar *log_domain, GLogLevelFlags log_level, GVariant *fields)
     * }
     */
    public static FunctionDescriptor g_log_variant$descriptor() {
        return g_log_variant.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_log_variant(const gchar *log_domain, GLogLevelFlags log_level, GVariant *fields)
     * }
     */
    public static MethodHandle g_log_variant$handle() {
        return g_log_variant.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_log_variant(const gchar *log_domain, GLogLevelFlags log_level, GVariant *fields)
     * }
     */
    public static void g_log_variant(MemorySegment log_domain, int log_level, MemorySegment fields) {
        var mh$ = g_log_variant.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_variant", log_domain, log_level, fields);
            }
            mh$.invokeExact(log_domain, log_level, fields);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_set_writer_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_set_writer_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_log_set_writer_func(GLogWriterFunc func, gpointer user_data, GDestroyNotify user_data_free)
     * }
     */
    public static FunctionDescriptor g_log_set_writer_func$descriptor() {
        return g_log_set_writer_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_log_set_writer_func(GLogWriterFunc func, gpointer user_data, GDestroyNotify user_data_free)
     * }
     */
    public static MethodHandle g_log_set_writer_func$handle() {
        return g_log_set_writer_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_log_set_writer_func(GLogWriterFunc func, gpointer user_data, GDestroyNotify user_data_free)
     * }
     */
    public static void g_log_set_writer_func(MemorySegment func, MemorySegment user_data, MemorySegment user_data_free) {
        var mh$ = g_log_set_writer_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_set_writer_func", func, user_data, user_data_free);
            }
            mh$.invokeExact(func, user_data, user_data_free);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_writer_supports_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_writer_supports_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_log_writer_supports_color(gint output_fd)
     * }
     */
    public static FunctionDescriptor g_log_writer_supports_color$descriptor() {
        return g_log_writer_supports_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_log_writer_supports_color(gint output_fd)
     * }
     */
    public static MethodHandle g_log_writer_supports_color$handle() {
        return g_log_writer_supports_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_log_writer_supports_color(gint output_fd)
     * }
     */
    public static int g_log_writer_supports_color(int output_fd) {
        var mh$ = g_log_writer_supports_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_writer_supports_color", output_fd);
            }
            return (int)mh$.invokeExact(output_fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_writer_is_journald {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_writer_is_journald"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_log_writer_is_journald(gint output_fd)
     * }
     */
    public static FunctionDescriptor g_log_writer_is_journald$descriptor() {
        return g_log_writer_is_journald.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_log_writer_is_journald(gint output_fd)
     * }
     */
    public static MethodHandle g_log_writer_is_journald$handle() {
        return g_log_writer_is_journald.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_log_writer_is_journald(gint output_fd)
     * }
     */
    public static int g_log_writer_is_journald(int output_fd) {
        var mh$ = g_log_writer_is_journald.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_writer_is_journald", output_fd);
            }
            return (int)mh$.invokeExact(output_fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_writer_format_fields {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_writer_format_fields"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_log_writer_format_fields(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gboolean use_color)
     * }
     */
    public static FunctionDescriptor g_log_writer_format_fields$descriptor() {
        return g_log_writer_format_fields.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_log_writer_format_fields(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gboolean use_color)
     * }
     */
    public static MethodHandle g_log_writer_format_fields$handle() {
        return g_log_writer_format_fields.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_log_writer_format_fields(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gboolean use_color)
     * }
     */
    public static MemorySegment g_log_writer_format_fields(int log_level, MemorySegment fields, long n_fields, int use_color) {
        var mh$ = g_log_writer_format_fields.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_writer_format_fields", log_level, fields, n_fields, use_color);
            }
            return (MemorySegment)mh$.invokeExact(log_level, fields, n_fields, use_color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_writer_journald {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_writer_journald"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLogWriterOutput g_log_writer_journald(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_log_writer_journald$descriptor() {
        return g_log_writer_journald.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLogWriterOutput g_log_writer_journald(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data)
     * }
     */
    public static MethodHandle g_log_writer_journald$handle() {
        return g_log_writer_journald.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GLogWriterOutput g_log_writer_journald(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data)
     * }
     */
    public static int g_log_writer_journald(int log_level, MemorySegment fields, long n_fields, MemorySegment user_data) {
        var mh$ = g_log_writer_journald.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_writer_journald", log_level, fields, n_fields, user_data);
            }
            return (int)mh$.invokeExact(log_level, fields, n_fields, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_writer_standard_streams {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_writer_standard_streams"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLogWriterOutput g_log_writer_standard_streams(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_log_writer_standard_streams$descriptor() {
        return g_log_writer_standard_streams.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLogWriterOutput g_log_writer_standard_streams(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data)
     * }
     */
    public static MethodHandle g_log_writer_standard_streams$handle() {
        return g_log_writer_standard_streams.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GLogWriterOutput g_log_writer_standard_streams(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data)
     * }
     */
    public static int g_log_writer_standard_streams(int log_level, MemorySegment fields, long n_fields, MemorySegment user_data) {
        var mh$ = g_log_writer_standard_streams.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_writer_standard_streams", log_level, fields, n_fields, user_data);
            }
            return (int)mh$.invokeExact(log_level, fields, n_fields, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_writer_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_writer_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GLogWriterOutput g_log_writer_default(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_log_writer_default$descriptor() {
        return g_log_writer_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GLogWriterOutput g_log_writer_default(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data)
     * }
     */
    public static MethodHandle g_log_writer_default$handle() {
        return g_log_writer_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GLogWriterOutput g_log_writer_default(GLogLevelFlags log_level, const GLogField *fields, gsize n_fields, gpointer user_data)
     * }
     */
    public static int g_log_writer_default(int log_level, MemorySegment fields, long n_fields, MemorySegment user_data) {
        var mh$ = g_log_writer_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_writer_default", log_level, fields, n_fields, user_data);
            }
            return (int)mh$.invokeExact(log_level, fields, n_fields, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_writer_default_set_use_stderr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_writer_default_set_use_stderr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_log_writer_default_set_use_stderr(gboolean use_stderr)
     * }
     */
    public static FunctionDescriptor g_log_writer_default_set_use_stderr$descriptor() {
        return g_log_writer_default_set_use_stderr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_log_writer_default_set_use_stderr(gboolean use_stderr)
     * }
     */
    public static MethodHandle g_log_writer_default_set_use_stderr$handle() {
        return g_log_writer_default_set_use_stderr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_log_writer_default_set_use_stderr(gboolean use_stderr)
     * }
     */
    public static void g_log_writer_default_set_use_stderr(int use_stderr) {
        var mh$ = g_log_writer_default_set_use_stderr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_writer_default_set_use_stderr", use_stderr);
            }
            mh$.invokeExact(use_stderr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_writer_default_would_drop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_writer_default_would_drop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_log_writer_default_would_drop(GLogLevelFlags log_level, const char *log_domain)
     * }
     */
    public static FunctionDescriptor g_log_writer_default_would_drop$descriptor() {
        return g_log_writer_default_would_drop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_log_writer_default_would_drop(GLogLevelFlags log_level, const char *log_domain)
     * }
     */
    public static MethodHandle g_log_writer_default_would_drop$handle() {
        return g_log_writer_default_would_drop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_log_writer_default_would_drop(GLogLevelFlags log_level, const char *log_domain)
     * }
     */
    public static int g_log_writer_default_would_drop(int log_level, MemorySegment log_domain) {
        var mh$ = g_log_writer_default_would_drop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_writer_default_would_drop", log_level, log_domain);
            }
            return (int)mh$.invokeExact(log_level, log_domain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_get_debug_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_get_debug_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_log_get_debug_enabled()
     * }
     */
    public static FunctionDescriptor g_log_get_debug_enabled$descriptor() {
        return g_log_get_debug_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_log_get_debug_enabled()
     * }
     */
    public static MethodHandle g_log_get_debug_enabled$handle() {
        return g_log_get_debug_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_log_get_debug_enabled()
     * }
     */
    public static int g_log_get_debug_enabled() {
        var mh$ = g_log_get_debug_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_get_debug_enabled");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_log_set_debug_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_log_set_debug_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_log_set_debug_enabled(gboolean enabled)
     * }
     */
    public static FunctionDescriptor g_log_set_debug_enabled$descriptor() {
        return g_log_set_debug_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_log_set_debug_enabled(gboolean enabled)
     * }
     */
    public static MethodHandle g_log_set_debug_enabled$handle() {
        return g_log_set_debug_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_log_set_debug_enabled(gboolean enabled)
     * }
     */
    public static void g_log_set_debug_enabled(int enabled) {
        var mh$ = g_log_set_debug_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_log_set_debug_enabled", enabled);
            }
            mh$.invokeExact(enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _g_log_fallback_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_g_log_fallback_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _g_log_fallback_handler(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data)
     * }
     */
    public static FunctionDescriptor _g_log_fallback_handler$descriptor() {
        return _g_log_fallback_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _g_log_fallback_handler(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data)
     * }
     */
    public static MethodHandle _g_log_fallback_handler$handle() {
        return _g_log_fallback_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _g_log_fallback_handler(const gchar *log_domain, GLogLevelFlags log_level, const gchar *message, gpointer unused_data)
     * }
     */
    public static void _g_log_fallback_handler(MemorySegment log_domain, int log_level, MemorySegment message, MemorySegment unused_data) {
        var mh$ = _g_log_fallback_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_g_log_fallback_handler", log_domain, log_level, message, unused_data);
            }
            mh$.invokeExact(log_domain, log_level, message, unused_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_return_if_fail_warning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_return_if_fail_warning"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_return_if_fail_warning(const char *log_domain, const char *pretty_function, const char *expression)
     * }
     */
    public static FunctionDescriptor g_return_if_fail_warning$descriptor() {
        return g_return_if_fail_warning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_return_if_fail_warning(const char *log_domain, const char *pretty_function, const char *expression)
     * }
     */
    public static MethodHandle g_return_if_fail_warning$handle() {
        return g_return_if_fail_warning.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_return_if_fail_warning(const char *log_domain, const char *pretty_function, const char *expression)
     * }
     */
    public static void g_return_if_fail_warning(MemorySegment log_domain, MemorySegment pretty_function, MemorySegment expression) {
        var mh$ = g_return_if_fail_warning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_return_if_fail_warning", log_domain, pretty_function, expression);
            }
            mh$.invokeExact(log_domain, pretty_function, expression);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_warn_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_warn_message"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_warn_message(const char *domain, const char *file, int line, const char *func, const char *warnexpr)
     * }
     */
    public static FunctionDescriptor g_warn_message$descriptor() {
        return g_warn_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_warn_message(const char *domain, const char *file, int line, const char *func, const char *warnexpr)
     * }
     */
    public static MethodHandle g_warn_message$handle() {
        return g_warn_message.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_warn_message(const char *domain, const char *file, int line, const char *func, const char *warnexpr)
     * }
     */
    public static void g_warn_message(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment warnexpr) {
        var mh$ = g_warn_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_warn_message", domain, file, line, func, warnexpr);
            }
            mh$.invokeExact(domain, file, line, func, warnexpr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_assert_warning {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_assert_warning"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_assert_warning(const char *log_domain, const char *file, const int line, const char *pretty_function, const char *expression)
     * }
     */
    public static FunctionDescriptor g_assert_warning$descriptor() {
        return g_assert_warning.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_assert_warning(const char *log_domain, const char *file, const int line, const char *pretty_function, const char *expression)
     * }
     */
    public static MethodHandle g_assert_warning$handle() {
        return g_assert_warning.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_assert_warning(const char *log_domain, const char *file, const int line, const char *pretty_function, const char *expression)
     * }
     */
    public static void g_assert_warning(MemorySegment log_domain, MemorySegment file, int line, MemorySegment pretty_function, MemorySegment expression) {
        var mh$ = g_assert_warning.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_assert_warning", log_domain, file, line, pretty_function, expression);
            }
            mh$.invokeExact(log_domain, file, line, pretty_function, expression);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_log_structured_standard(const gchar *log_domain, GLogLevelFlags log_level, const gchar *file, const gchar *line, const gchar *func, const gchar *message_format, ...)
     * }
     */
    public static class g_log_structured_standard {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_log_structured_standard");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_log_structured_standard(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_log_structured_standard(const gchar *log_domain, GLogLevelFlags log_level, const gchar *file, const gchar *line, const gchar *func, const gchar *message_format, ...)
         * }
         */
        public static g_log_structured_standard makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_log_structured_standard(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment log_domain, int log_level, MemorySegment file, MemorySegment line, MemorySegment func, MemorySegment message_format, Object... x6) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_log_structured_standard", log_domain, log_level, file, line, func, message_format, x6);
                }
                spreader.invokeExact(log_domain, log_level, file, line, func, message_format, x6);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_print(const gchar *format, ...)
     * }
     */
    public static class g_print {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_print");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_print(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_print(const gchar *format, ...)
         * }
         */
        public static g_print makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_print(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_print", format, x1);
                }
                spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_set_print_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_set_print_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPrintFunc g_set_print_handler(GPrintFunc func)
     * }
     */
    public static FunctionDescriptor g_set_print_handler$descriptor() {
        return g_set_print_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPrintFunc g_set_print_handler(GPrintFunc func)
     * }
     */
    public static MethodHandle g_set_print_handler$handle() {
        return g_set_print_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPrintFunc g_set_print_handler(GPrintFunc func)
     * }
     */
    public static MemorySegment g_set_print_handler(MemorySegment func) {
        var mh$ = g_set_print_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_set_print_handler", func);
            }
            return (MemorySegment)mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_printerr(const gchar *format, ...)
     * }
     */
    public static class g_printerr {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_printerr");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_printerr(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_printerr(const gchar *format, ...)
         * }
         */
        public static g_printerr makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_printerr(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_printerr", format, x1);
                }
                spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_set_printerr_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_set_printerr_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPrintFunc g_set_printerr_handler(GPrintFunc func)
     * }
     */
    public static FunctionDescriptor g_set_printerr_handler$descriptor() {
        return g_set_printerr_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPrintFunc g_set_printerr_handler(GPrintFunc func)
     * }
     */
    public static MethodHandle g_set_printerr_handler$handle() {
        return g_set_printerr_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPrintFunc g_set_printerr_handler(GPrintFunc func)
     * }
     */
    public static MemorySegment g_set_printerr_handler(MemorySegment func) {
        var mh$ = g_set_printerr_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_set_printerr_handler", func);
            }
            return (MemorySegment)mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_OPTION_FLAG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_FLAG_NONE = 0
     * }
     */
    public static int G_OPTION_FLAG_NONE() {
        return G_OPTION_FLAG_NONE;
    }
    private static final int G_OPTION_FLAG_HIDDEN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_FLAG_HIDDEN = 1
     * }
     */
    public static int G_OPTION_FLAG_HIDDEN() {
        return G_OPTION_FLAG_HIDDEN;
    }
    private static final int G_OPTION_FLAG_IN_MAIN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_FLAG_IN_MAIN = 2
     * }
     */
    public static int G_OPTION_FLAG_IN_MAIN() {
        return G_OPTION_FLAG_IN_MAIN;
    }
    private static final int G_OPTION_FLAG_REVERSE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_FLAG_REVERSE = 4
     * }
     */
    public static int G_OPTION_FLAG_REVERSE() {
        return G_OPTION_FLAG_REVERSE;
    }
    private static final int G_OPTION_FLAG_NO_ARG = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_FLAG_NO_ARG = 8
     * }
     */
    public static int G_OPTION_FLAG_NO_ARG() {
        return G_OPTION_FLAG_NO_ARG;
    }
    private static final int G_OPTION_FLAG_FILENAME = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_FLAG_FILENAME = 16
     * }
     */
    public static int G_OPTION_FLAG_FILENAME() {
        return G_OPTION_FLAG_FILENAME;
    }
    private static final int G_OPTION_FLAG_OPTIONAL_ARG = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_FLAG_OPTIONAL_ARG = 32
     * }
     */
    public static int G_OPTION_FLAG_OPTIONAL_ARG() {
        return G_OPTION_FLAG_OPTIONAL_ARG;
    }
    private static final int G_OPTION_FLAG_NOALIAS = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_FLAG_NOALIAS = 64
     * }
     */
    public static int G_OPTION_FLAG_NOALIAS() {
        return G_OPTION_FLAG_NOALIAS;
    }
    private static final int G_OPTION_ARG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ARG_NONE = 0
     * }
     */
    public static int G_OPTION_ARG_NONE() {
        return G_OPTION_ARG_NONE;
    }
    private static final int G_OPTION_ARG_STRING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ARG_STRING = 1
     * }
     */
    public static int G_OPTION_ARG_STRING() {
        return G_OPTION_ARG_STRING;
    }
    private static final int G_OPTION_ARG_INT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ARG_INT = 2
     * }
     */
    public static int G_OPTION_ARG_INT() {
        return G_OPTION_ARG_INT;
    }
    private static final int G_OPTION_ARG_CALLBACK = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ARG_CALLBACK = 3
     * }
     */
    public static int G_OPTION_ARG_CALLBACK() {
        return G_OPTION_ARG_CALLBACK;
    }
    private static final int G_OPTION_ARG_FILENAME = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ARG_FILENAME = 4
     * }
     */
    public static int G_OPTION_ARG_FILENAME() {
        return G_OPTION_ARG_FILENAME;
    }
    private static final int G_OPTION_ARG_STRING_ARRAY = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ARG_STRING_ARRAY = 5
     * }
     */
    public static int G_OPTION_ARG_STRING_ARRAY() {
        return G_OPTION_ARG_STRING_ARRAY;
    }
    private static final int G_OPTION_ARG_FILENAME_ARRAY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ARG_FILENAME_ARRAY = 6
     * }
     */
    public static int G_OPTION_ARG_FILENAME_ARRAY() {
        return G_OPTION_ARG_FILENAME_ARRAY;
    }
    private static final int G_OPTION_ARG_DOUBLE = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ARG_DOUBLE = 7
     * }
     */
    public static int G_OPTION_ARG_DOUBLE() {
        return G_OPTION_ARG_DOUBLE;
    }
    private static final int G_OPTION_ARG_INT64 = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ARG_INT64 = 8
     * }
     */
    public static int G_OPTION_ARG_INT64() {
        return G_OPTION_ARG_INT64;
    }
    private static final int G_OPTION_ERROR_UNKNOWN_OPTION = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ERROR_UNKNOWN_OPTION = 0
     * }
     */
    public static int G_OPTION_ERROR_UNKNOWN_OPTION() {
        return G_OPTION_ERROR_UNKNOWN_OPTION;
    }
    private static final int G_OPTION_ERROR_BAD_VALUE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ERROR_BAD_VALUE = 1
     * }
     */
    public static int G_OPTION_ERROR_BAD_VALUE() {
        return G_OPTION_ERROR_BAD_VALUE;
    }
    private static final int G_OPTION_ERROR_FAILED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_OPTION_ERROR_FAILED = 2
     * }
     */
    public static int G_OPTION_ERROR_FAILED() {
        return G_OPTION_ERROR_FAILED;
    }

    private static class g_option_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_option_error_quark()
     * }
     */
    public static FunctionDescriptor g_option_error_quark$descriptor() {
        return g_option_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_option_error_quark()
     * }
     */
    public static MethodHandle g_option_error_quark$handle() {
        return g_option_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_option_error_quark()
     * }
     */
    public static int g_option_error_quark() {
        var mh$ = g_option_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOptionContext *g_option_context_new(const gchar *parameter_string)
     * }
     */
    public static FunctionDescriptor g_option_context_new$descriptor() {
        return g_option_context_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOptionContext *g_option_context_new(const gchar *parameter_string)
     * }
     */
    public static MethodHandle g_option_context_new$handle() {
        return g_option_context_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOptionContext *g_option_context_new(const gchar *parameter_string)
     * }
     */
    public static MemorySegment g_option_context_new(MemorySegment parameter_string) {
        var mh$ = g_option_context_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_new", parameter_string);
            }
            return (MemorySegment)mh$.invokeExact(parameter_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_set_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_set_summary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_set_summary(GOptionContext *context, const gchar *summary)
     * }
     */
    public static FunctionDescriptor g_option_context_set_summary$descriptor() {
        return g_option_context_set_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_set_summary(GOptionContext *context, const gchar *summary)
     * }
     */
    public static MethodHandle g_option_context_set_summary$handle() {
        return g_option_context_set_summary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_set_summary(GOptionContext *context, const gchar *summary)
     * }
     */
    public static void g_option_context_set_summary(MemorySegment context, MemorySegment summary) {
        var mh$ = g_option_context_set_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_set_summary", context, summary);
            }
            mh$.invokeExact(context, summary);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_get_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_get_summary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_option_context_get_summary(GOptionContext *context)
     * }
     */
    public static FunctionDescriptor g_option_context_get_summary$descriptor() {
        return g_option_context_get_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_option_context_get_summary(GOptionContext *context)
     * }
     */
    public static MethodHandle g_option_context_get_summary$handle() {
        return g_option_context_get_summary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_option_context_get_summary(GOptionContext *context)
     * }
     */
    public static MemorySegment g_option_context_get_summary(MemorySegment context) {
        var mh$ = g_option_context_get_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_get_summary", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_set_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_set_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_set_description(GOptionContext *context, const gchar *description)
     * }
     */
    public static FunctionDescriptor g_option_context_set_description$descriptor() {
        return g_option_context_set_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_set_description(GOptionContext *context, const gchar *description)
     * }
     */
    public static MethodHandle g_option_context_set_description$handle() {
        return g_option_context_set_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_set_description(GOptionContext *context, const gchar *description)
     * }
     */
    public static void g_option_context_set_description(MemorySegment context, MemorySegment description) {
        var mh$ = g_option_context_set_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_set_description", context, description);
            }
            mh$.invokeExact(context, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_option_context_get_description(GOptionContext *context)
     * }
     */
    public static FunctionDescriptor g_option_context_get_description$descriptor() {
        return g_option_context_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_option_context_get_description(GOptionContext *context)
     * }
     */
    public static MethodHandle g_option_context_get_description$handle() {
        return g_option_context_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_option_context_get_description(GOptionContext *context)
     * }
     */
    public static MemorySegment g_option_context_get_description(MemorySegment context) {
        var mh$ = g_option_context_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_get_description", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_free(GOptionContext *context)
     * }
     */
    public static FunctionDescriptor g_option_context_free$descriptor() {
        return g_option_context_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_free(GOptionContext *context)
     * }
     */
    public static MethodHandle g_option_context_free$handle() {
        return g_option_context_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_free(GOptionContext *context)
     * }
     */
    public static void g_option_context_free(MemorySegment context) {
        var mh$ = g_option_context_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_free", context);
            }
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_set_help_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_set_help_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_set_help_enabled(GOptionContext *context, gboolean help_enabled)
     * }
     */
    public static FunctionDescriptor g_option_context_set_help_enabled$descriptor() {
        return g_option_context_set_help_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_set_help_enabled(GOptionContext *context, gboolean help_enabled)
     * }
     */
    public static MethodHandle g_option_context_set_help_enabled$handle() {
        return g_option_context_set_help_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_set_help_enabled(GOptionContext *context, gboolean help_enabled)
     * }
     */
    public static void g_option_context_set_help_enabled(MemorySegment context, int help_enabled) {
        var mh$ = g_option_context_set_help_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_set_help_enabled", context, help_enabled);
            }
            mh$.invokeExact(context, help_enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_get_help_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_get_help_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_option_context_get_help_enabled(GOptionContext *context)
     * }
     */
    public static FunctionDescriptor g_option_context_get_help_enabled$descriptor() {
        return g_option_context_get_help_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_option_context_get_help_enabled(GOptionContext *context)
     * }
     */
    public static MethodHandle g_option_context_get_help_enabled$handle() {
        return g_option_context_get_help_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_option_context_get_help_enabled(GOptionContext *context)
     * }
     */
    public static int g_option_context_get_help_enabled(MemorySegment context) {
        var mh$ = g_option_context_get_help_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_get_help_enabled", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_set_ignore_unknown_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_set_ignore_unknown_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_set_ignore_unknown_options(GOptionContext *context, gboolean ignore_unknown)
     * }
     */
    public static FunctionDescriptor g_option_context_set_ignore_unknown_options$descriptor() {
        return g_option_context_set_ignore_unknown_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_set_ignore_unknown_options(GOptionContext *context, gboolean ignore_unknown)
     * }
     */
    public static MethodHandle g_option_context_set_ignore_unknown_options$handle() {
        return g_option_context_set_ignore_unknown_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_set_ignore_unknown_options(GOptionContext *context, gboolean ignore_unknown)
     * }
     */
    public static void g_option_context_set_ignore_unknown_options(MemorySegment context, int ignore_unknown) {
        var mh$ = g_option_context_set_ignore_unknown_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_set_ignore_unknown_options", context, ignore_unknown);
            }
            mh$.invokeExact(context, ignore_unknown);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_get_ignore_unknown_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_get_ignore_unknown_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_option_context_get_ignore_unknown_options(GOptionContext *context)
     * }
     */
    public static FunctionDescriptor g_option_context_get_ignore_unknown_options$descriptor() {
        return g_option_context_get_ignore_unknown_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_option_context_get_ignore_unknown_options(GOptionContext *context)
     * }
     */
    public static MethodHandle g_option_context_get_ignore_unknown_options$handle() {
        return g_option_context_get_ignore_unknown_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_option_context_get_ignore_unknown_options(GOptionContext *context)
     * }
     */
    public static int g_option_context_get_ignore_unknown_options(MemorySegment context) {
        var mh$ = g_option_context_get_ignore_unknown_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_get_ignore_unknown_options", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_set_strict_posix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_set_strict_posix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_set_strict_posix(GOptionContext *context, gboolean strict_posix)
     * }
     */
    public static FunctionDescriptor g_option_context_set_strict_posix$descriptor() {
        return g_option_context_set_strict_posix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_set_strict_posix(GOptionContext *context, gboolean strict_posix)
     * }
     */
    public static MethodHandle g_option_context_set_strict_posix$handle() {
        return g_option_context_set_strict_posix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_set_strict_posix(GOptionContext *context, gboolean strict_posix)
     * }
     */
    public static void g_option_context_set_strict_posix(MemorySegment context, int strict_posix) {
        var mh$ = g_option_context_set_strict_posix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_set_strict_posix", context, strict_posix);
            }
            mh$.invokeExact(context, strict_posix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_get_strict_posix {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_get_strict_posix"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_option_context_get_strict_posix(GOptionContext *context)
     * }
     */
    public static FunctionDescriptor g_option_context_get_strict_posix$descriptor() {
        return g_option_context_get_strict_posix.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_option_context_get_strict_posix(GOptionContext *context)
     * }
     */
    public static MethodHandle g_option_context_get_strict_posix$handle() {
        return g_option_context_get_strict_posix.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_option_context_get_strict_posix(GOptionContext *context)
     * }
     */
    public static int g_option_context_get_strict_posix(MemorySegment context) {
        var mh$ = g_option_context_get_strict_posix.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_get_strict_posix", context);
            }
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_add_main_entries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_add_main_entries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_add_main_entries(GOptionContext *context, const GOptionEntry *entries, const gchar *translation_domain)
     * }
     */
    public static FunctionDescriptor g_option_context_add_main_entries$descriptor() {
        return g_option_context_add_main_entries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_add_main_entries(GOptionContext *context, const GOptionEntry *entries, const gchar *translation_domain)
     * }
     */
    public static MethodHandle g_option_context_add_main_entries$handle() {
        return g_option_context_add_main_entries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_add_main_entries(GOptionContext *context, const GOptionEntry *entries, const gchar *translation_domain)
     * }
     */
    public static void g_option_context_add_main_entries(MemorySegment context, MemorySegment entries, MemorySegment translation_domain) {
        var mh$ = g_option_context_add_main_entries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_add_main_entries", context, entries, translation_domain);
            }
            mh$.invokeExact(context, entries, translation_domain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_option_context_parse(GOptionContext *context, gint *argc, gchar ***argv, GError **error)
     * }
     */
    public static FunctionDescriptor g_option_context_parse$descriptor() {
        return g_option_context_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_option_context_parse(GOptionContext *context, gint *argc, gchar ***argv, GError **error)
     * }
     */
    public static MethodHandle g_option_context_parse$handle() {
        return g_option_context_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_option_context_parse(GOptionContext *context, gint *argc, gchar ***argv, GError **error)
     * }
     */
    public static int g_option_context_parse(MemorySegment context, MemorySegment argc, MemorySegment argv, MemorySegment error) {
        var mh$ = g_option_context_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_parse", context, argc, argv, error);
            }
            return (int)mh$.invokeExact(context, argc, argv, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_parse_strv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_parse_strv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_option_context_parse_strv(GOptionContext *context, gchar ***arguments, GError **error)
     * }
     */
    public static FunctionDescriptor g_option_context_parse_strv$descriptor() {
        return g_option_context_parse_strv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_option_context_parse_strv(GOptionContext *context, gchar ***arguments, GError **error)
     * }
     */
    public static MethodHandle g_option_context_parse_strv$handle() {
        return g_option_context_parse_strv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_option_context_parse_strv(GOptionContext *context, gchar ***arguments, GError **error)
     * }
     */
    public static int g_option_context_parse_strv(MemorySegment context, MemorySegment arguments, MemorySegment error) {
        var mh$ = g_option_context_parse_strv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_parse_strv", context, arguments, error);
            }
            return (int)mh$.invokeExact(context, arguments, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_set_translate_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_set_translate_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_set_translate_func(GOptionContext *context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify)
     * }
     */
    public static FunctionDescriptor g_option_context_set_translate_func$descriptor() {
        return g_option_context_set_translate_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_set_translate_func(GOptionContext *context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify)
     * }
     */
    public static MethodHandle g_option_context_set_translate_func$handle() {
        return g_option_context_set_translate_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_set_translate_func(GOptionContext *context, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify)
     * }
     */
    public static void g_option_context_set_translate_func(MemorySegment context, MemorySegment func, MemorySegment data, MemorySegment destroy_notify) {
        var mh$ = g_option_context_set_translate_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_set_translate_func", context, func, data, destroy_notify);
            }
            mh$.invokeExact(context, func, data, destroy_notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_set_translation_domain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_set_translation_domain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_set_translation_domain(GOptionContext *context, const gchar *domain)
     * }
     */
    public static FunctionDescriptor g_option_context_set_translation_domain$descriptor() {
        return g_option_context_set_translation_domain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_set_translation_domain(GOptionContext *context, const gchar *domain)
     * }
     */
    public static MethodHandle g_option_context_set_translation_domain$handle() {
        return g_option_context_set_translation_domain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_set_translation_domain(GOptionContext *context, const gchar *domain)
     * }
     */
    public static void g_option_context_set_translation_domain(MemorySegment context, MemorySegment domain) {
        var mh$ = g_option_context_set_translation_domain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_set_translation_domain", context, domain);
            }
            mh$.invokeExact(context, domain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_add_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_add_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_add_group(GOptionContext *context, GOptionGroup *group)
     * }
     */
    public static FunctionDescriptor g_option_context_add_group$descriptor() {
        return g_option_context_add_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_add_group(GOptionContext *context, GOptionGroup *group)
     * }
     */
    public static MethodHandle g_option_context_add_group$handle() {
        return g_option_context_add_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_add_group(GOptionContext *context, GOptionGroup *group)
     * }
     */
    public static void g_option_context_add_group(MemorySegment context, MemorySegment group) {
        var mh$ = g_option_context_add_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_add_group", context, group);
            }
            mh$.invokeExact(context, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_set_main_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_set_main_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_context_set_main_group(GOptionContext *context, GOptionGroup *group)
     * }
     */
    public static FunctionDescriptor g_option_context_set_main_group$descriptor() {
        return g_option_context_set_main_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_context_set_main_group(GOptionContext *context, GOptionGroup *group)
     * }
     */
    public static MethodHandle g_option_context_set_main_group$handle() {
        return g_option_context_set_main_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_context_set_main_group(GOptionContext *context, GOptionGroup *group)
     * }
     */
    public static void g_option_context_set_main_group(MemorySegment context, MemorySegment group) {
        var mh$ = g_option_context_set_main_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_set_main_group", context, group);
            }
            mh$.invokeExact(context, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_get_main_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_get_main_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOptionGroup *g_option_context_get_main_group(GOptionContext *context)
     * }
     */
    public static FunctionDescriptor g_option_context_get_main_group$descriptor() {
        return g_option_context_get_main_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOptionGroup *g_option_context_get_main_group(GOptionContext *context)
     * }
     */
    public static MethodHandle g_option_context_get_main_group$handle() {
        return g_option_context_get_main_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOptionGroup *g_option_context_get_main_group(GOptionContext *context)
     * }
     */
    public static MemorySegment g_option_context_get_main_group(MemorySegment context) {
        var mh$ = g_option_context_get_main_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_get_main_group", context);
            }
            return (MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_context_get_help {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_context_get_help"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_option_context_get_help(GOptionContext *context, gboolean main_help, GOptionGroup *group)
     * }
     */
    public static FunctionDescriptor g_option_context_get_help$descriptor() {
        return g_option_context_get_help.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_option_context_get_help(GOptionContext *context, gboolean main_help, GOptionGroup *group)
     * }
     */
    public static MethodHandle g_option_context_get_help$handle() {
        return g_option_context_get_help.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_option_context_get_help(GOptionContext *context, gboolean main_help, GOptionGroup *group)
     * }
     */
    public static MemorySegment g_option_context_get_help(MemorySegment context, int main_help, MemorySegment group) {
        var mh$ = g_option_context_get_help.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_context_get_help", context, main_help, group);
            }
            return (MemorySegment)mh$.invokeExact(context, main_help, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_group_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_group_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOptionGroup *g_option_group_new(const gchar *name, const gchar *description, const gchar *help_description, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static FunctionDescriptor g_option_group_new$descriptor() {
        return g_option_group_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOptionGroup *g_option_group_new(const gchar *name, const gchar *description, const gchar *help_description, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MethodHandle g_option_group_new$handle() {
        return g_option_group_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOptionGroup *g_option_group_new(const gchar *name, const gchar *description, const gchar *help_description, gpointer user_data, GDestroyNotify destroy)
     * }
     */
    public static MemorySegment g_option_group_new(MemorySegment name, MemorySegment description, MemorySegment help_description, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = g_option_group_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_group_new", name, description, help_description, user_data, destroy);
            }
            return (MemorySegment)mh$.invokeExact(name, description, help_description, user_data, destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_group_set_parse_hooks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_group_set_parse_hooks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_group_set_parse_hooks(GOptionGroup *group, GOptionParseFunc pre_parse_func, GOptionParseFunc post_parse_func)
     * }
     */
    public static FunctionDescriptor g_option_group_set_parse_hooks$descriptor() {
        return g_option_group_set_parse_hooks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_group_set_parse_hooks(GOptionGroup *group, GOptionParseFunc pre_parse_func, GOptionParseFunc post_parse_func)
     * }
     */
    public static MethodHandle g_option_group_set_parse_hooks$handle() {
        return g_option_group_set_parse_hooks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_group_set_parse_hooks(GOptionGroup *group, GOptionParseFunc pre_parse_func, GOptionParseFunc post_parse_func)
     * }
     */
    public static void g_option_group_set_parse_hooks(MemorySegment group, MemorySegment pre_parse_func, MemorySegment post_parse_func) {
        var mh$ = g_option_group_set_parse_hooks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_group_set_parse_hooks", group, pre_parse_func, post_parse_func);
            }
            mh$.invokeExact(group, pre_parse_func, post_parse_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_group_set_error_hook {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_group_set_error_hook"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_group_set_error_hook(GOptionGroup *group, GOptionErrorFunc error_func)
     * }
     */
    public static FunctionDescriptor g_option_group_set_error_hook$descriptor() {
        return g_option_group_set_error_hook.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_group_set_error_hook(GOptionGroup *group, GOptionErrorFunc error_func)
     * }
     */
    public static MethodHandle g_option_group_set_error_hook$handle() {
        return g_option_group_set_error_hook.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_group_set_error_hook(GOptionGroup *group, GOptionErrorFunc error_func)
     * }
     */
    public static void g_option_group_set_error_hook(MemorySegment group, MemorySegment error_func) {
        var mh$ = g_option_group_set_error_hook.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_group_set_error_hook", group, error_func);
            }
            mh$.invokeExact(group, error_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_group_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_group_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_group_free(GOptionGroup *group)
     * }
     */
    public static FunctionDescriptor g_option_group_free$descriptor() {
        return g_option_group_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_group_free(GOptionGroup *group)
     * }
     */
    public static MethodHandle g_option_group_free$handle() {
        return g_option_group_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_group_free(GOptionGroup *group)
     * }
     */
    public static void g_option_group_free(MemorySegment group) {
        var mh$ = g_option_group_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_group_free", group);
            }
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_group_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_group_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GOptionGroup *g_option_group_ref(GOptionGroup *group)
     * }
     */
    public static FunctionDescriptor g_option_group_ref$descriptor() {
        return g_option_group_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GOptionGroup *g_option_group_ref(GOptionGroup *group)
     * }
     */
    public static MethodHandle g_option_group_ref$handle() {
        return g_option_group_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GOptionGroup *g_option_group_ref(GOptionGroup *group)
     * }
     */
    public static MemorySegment g_option_group_ref(MemorySegment group) {
        var mh$ = g_option_group_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_group_ref", group);
            }
            return (MemorySegment)mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_group_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_group_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_group_unref(GOptionGroup *group)
     * }
     */
    public static FunctionDescriptor g_option_group_unref$descriptor() {
        return g_option_group_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_group_unref(GOptionGroup *group)
     * }
     */
    public static MethodHandle g_option_group_unref$handle() {
        return g_option_group_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_group_unref(GOptionGroup *group)
     * }
     */
    public static void g_option_group_unref(MemorySegment group) {
        var mh$ = g_option_group_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_group_unref", group);
            }
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_group_add_entries {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_group_add_entries"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_group_add_entries(GOptionGroup *group, const GOptionEntry *entries)
     * }
     */
    public static FunctionDescriptor g_option_group_add_entries$descriptor() {
        return g_option_group_add_entries.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_group_add_entries(GOptionGroup *group, const GOptionEntry *entries)
     * }
     */
    public static MethodHandle g_option_group_add_entries$handle() {
        return g_option_group_add_entries.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_group_add_entries(GOptionGroup *group, const GOptionEntry *entries)
     * }
     */
    public static void g_option_group_add_entries(MemorySegment group, MemorySegment entries) {
        var mh$ = g_option_group_add_entries.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_group_add_entries", group, entries);
            }
            mh$.invokeExact(group, entries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_group_set_translate_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_group_set_translate_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_group_set_translate_func(GOptionGroup *group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify)
     * }
     */
    public static FunctionDescriptor g_option_group_set_translate_func$descriptor() {
        return g_option_group_set_translate_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_group_set_translate_func(GOptionGroup *group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify)
     * }
     */
    public static MethodHandle g_option_group_set_translate_func$handle() {
        return g_option_group_set_translate_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_group_set_translate_func(GOptionGroup *group, GTranslateFunc func, gpointer data, GDestroyNotify destroy_notify)
     * }
     */
    public static void g_option_group_set_translate_func(MemorySegment group, MemorySegment func, MemorySegment data, MemorySegment destroy_notify) {
        var mh$ = g_option_group_set_translate_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_group_set_translate_func", group, func, data, destroy_notify);
            }
            mh$.invokeExact(group, func, data, destroy_notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_option_group_set_translation_domain {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_option_group_set_translation_domain"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_option_group_set_translation_domain(GOptionGroup *group, const gchar *domain)
     * }
     */
    public static FunctionDescriptor g_option_group_set_translation_domain$descriptor() {
        return g_option_group_set_translation_domain.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_option_group_set_translation_domain(GOptionGroup *group, const gchar *domain)
     * }
     */
    public static MethodHandle g_option_group_set_translation_domain$handle() {
        return g_option_group_set_translation_domain.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_option_group_set_translation_domain(GOptionGroup *group, const gchar *domain)
     * }
     */
    public static void g_option_group_set_translation_domain(MemorySegment group, MemorySegment domain) {
        var mh$ = g_option_group_set_translation_domain.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_option_group_set_translation_domain", group, domain);
            }
            mh$.invokeExact(group, domain);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_new()
     * }
     */
    public static FunctionDescriptor g_path_buf_new$descriptor() {
        return g_path_buf_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_new()
     * }
     */
    public static MethodHandle g_path_buf_new$handle() {
        return g_path_buf_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_new()
     * }
     */
    public static MemorySegment g_path_buf_new() {
        var mh$ = g_path_buf_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_new_from_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_new_from_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_new_from_path(const char *path)
     * }
     */
    public static FunctionDescriptor g_path_buf_new_from_path$descriptor() {
        return g_path_buf_new_from_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_new_from_path(const char *path)
     * }
     */
    public static MethodHandle g_path_buf_new_from_path$handle() {
        return g_path_buf_new_from_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_new_from_path(const char *path)
     * }
     */
    public static MemorySegment g_path_buf_new_from_path(MemorySegment path) {
        var mh$ = g_path_buf_new_from_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_new_from_path", path);
            }
            return (MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_init(GPathBuf *buf)
     * }
     */
    public static FunctionDescriptor g_path_buf_init$descriptor() {
        return g_path_buf_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_init(GPathBuf *buf)
     * }
     */
    public static MethodHandle g_path_buf_init$handle() {
        return g_path_buf_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_init(GPathBuf *buf)
     * }
     */
    public static MemorySegment g_path_buf_init(MemorySegment buf) {
        var mh$ = g_path_buf_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_init", buf);
            }
            return (MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_init_from_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_init_from_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_init_from_path(GPathBuf *buf, const char *path)
     * }
     */
    public static FunctionDescriptor g_path_buf_init_from_path$descriptor() {
        return g_path_buf_init_from_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_init_from_path(GPathBuf *buf, const char *path)
     * }
     */
    public static MethodHandle g_path_buf_init_from_path$handle() {
        return g_path_buf_init_from_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_init_from_path(GPathBuf *buf, const char *path)
     * }
     */
    public static MemorySegment g_path_buf_init_from_path(MemorySegment buf, MemorySegment path) {
        var mh$ = g_path_buf_init_from_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_init_from_path", buf, path);
            }
            return (MemorySegment)mh$.invokeExact(buf, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_path_buf_clear(GPathBuf *buf)
     * }
     */
    public static FunctionDescriptor g_path_buf_clear$descriptor() {
        return g_path_buf_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_path_buf_clear(GPathBuf *buf)
     * }
     */
    public static MethodHandle g_path_buf_clear$handle() {
        return g_path_buf_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_path_buf_clear(GPathBuf *buf)
     * }
     */
    public static void g_path_buf_clear(MemorySegment buf) {
        var mh$ = g_path_buf_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_clear", buf);
            }
            mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_clear_to_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_clear_to_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_path_buf_clear_to_path(GPathBuf *buf)
     * }
     */
    public static FunctionDescriptor g_path_buf_clear_to_path$descriptor() {
        return g_path_buf_clear_to_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_path_buf_clear_to_path(GPathBuf *buf)
     * }
     */
    public static MethodHandle g_path_buf_clear_to_path$handle() {
        return g_path_buf_clear_to_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_path_buf_clear_to_path(GPathBuf *buf)
     * }
     */
    public static MemorySegment g_path_buf_clear_to_path(MemorySegment buf) {
        var mh$ = g_path_buf_clear_to_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_clear_to_path", buf);
            }
            return (MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_path_buf_free(GPathBuf *buf)
     * }
     */
    public static FunctionDescriptor g_path_buf_free$descriptor() {
        return g_path_buf_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_path_buf_free(GPathBuf *buf)
     * }
     */
    public static MethodHandle g_path_buf_free$handle() {
        return g_path_buf_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_path_buf_free(GPathBuf *buf)
     * }
     */
    public static void g_path_buf_free(MemorySegment buf) {
        var mh$ = g_path_buf_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_free", buf);
            }
            mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_free_to_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_free_to_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_path_buf_free_to_path(GPathBuf *buf)
     * }
     */
    public static FunctionDescriptor g_path_buf_free_to_path$descriptor() {
        return g_path_buf_free_to_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_path_buf_free_to_path(GPathBuf *buf)
     * }
     */
    public static MethodHandle g_path_buf_free_to_path$handle() {
        return g_path_buf_free_to_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_path_buf_free_to_path(GPathBuf *buf)
     * }
     */
    public static MemorySegment g_path_buf_free_to_path(MemorySegment buf) {
        var mh$ = g_path_buf_free_to_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_free_to_path", buf);
            }
            return (MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_copy(GPathBuf *buf)
     * }
     */
    public static FunctionDescriptor g_path_buf_copy$descriptor() {
        return g_path_buf_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_copy(GPathBuf *buf)
     * }
     */
    public static MethodHandle g_path_buf_copy$handle() {
        return g_path_buf_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_copy(GPathBuf *buf)
     * }
     */
    public static MemorySegment g_path_buf_copy(MemorySegment buf) {
        var mh$ = g_path_buf_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_copy", buf);
            }
            return (MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_push {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_push"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_push(GPathBuf *buf, const char *path)
     * }
     */
    public static FunctionDescriptor g_path_buf_push$descriptor() {
        return g_path_buf_push.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_push(GPathBuf *buf, const char *path)
     * }
     */
    public static MethodHandle g_path_buf_push$handle() {
        return g_path_buf_push.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPathBuf *g_path_buf_push(GPathBuf *buf, const char *path)
     * }
     */
    public static MemorySegment g_path_buf_push(MemorySegment buf, MemorySegment path) {
        var mh$ = g_path_buf_push.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_push", buf, path);
            }
            return (MemorySegment)mh$.invokeExact(buf, path);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_pop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_pop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_path_buf_pop(GPathBuf *buf)
     * }
     */
    public static FunctionDescriptor g_path_buf_pop$descriptor() {
        return g_path_buf_pop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_path_buf_pop(GPathBuf *buf)
     * }
     */
    public static MethodHandle g_path_buf_pop$handle() {
        return g_path_buf_pop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_path_buf_pop(GPathBuf *buf)
     * }
     */
    public static int g_path_buf_pop(MemorySegment buf) {
        var mh$ = g_path_buf_pop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_pop", buf);
            }
            return (int)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_set_filename {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_set_filename"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_path_buf_set_filename(GPathBuf *buf, const char *file_name)
     * }
     */
    public static FunctionDescriptor g_path_buf_set_filename$descriptor() {
        return g_path_buf_set_filename.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_path_buf_set_filename(GPathBuf *buf, const char *file_name)
     * }
     */
    public static MethodHandle g_path_buf_set_filename$handle() {
        return g_path_buf_set_filename.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_path_buf_set_filename(GPathBuf *buf, const char *file_name)
     * }
     */
    public static int g_path_buf_set_filename(MemorySegment buf, MemorySegment file_name) {
        var mh$ = g_path_buf_set_filename.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_set_filename", buf, file_name);
            }
            return (int)mh$.invokeExact(buf, file_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_set_extension {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_set_extension"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_path_buf_set_extension(GPathBuf *buf, const char *extension)
     * }
     */
    public static FunctionDescriptor g_path_buf_set_extension$descriptor() {
        return g_path_buf_set_extension.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_path_buf_set_extension(GPathBuf *buf, const char *extension)
     * }
     */
    public static MethodHandle g_path_buf_set_extension$handle() {
        return g_path_buf_set_extension.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_path_buf_set_extension(GPathBuf *buf, const char *extension)
     * }
     */
    public static int g_path_buf_set_extension(MemorySegment buf, MemorySegment extension) {
        var mh$ = g_path_buf_set_extension.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_set_extension", buf, extension);
            }
            return (int)mh$.invokeExact(buf, extension);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_to_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_to_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_path_buf_to_path(GPathBuf *buf)
     * }
     */
    public static FunctionDescriptor g_path_buf_to_path$descriptor() {
        return g_path_buf_to_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_path_buf_to_path(GPathBuf *buf)
     * }
     */
    public static MethodHandle g_path_buf_to_path$handle() {
        return g_path_buf_to_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_path_buf_to_path(GPathBuf *buf)
     * }
     */
    public static MemorySegment g_path_buf_to_path(MemorySegment buf) {
        var mh$ = g_path_buf_to_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_to_path", buf);
            }
            return (MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_path_buf_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_path_buf_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_path_buf_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static FunctionDescriptor g_path_buf_equal$descriptor() {
        return g_path_buf_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_path_buf_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static MethodHandle g_path_buf_equal$handle() {
        return g_path_buf_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_path_buf_equal(gconstpointer v1, gconstpointer v2)
     * }
     */
    public static int g_path_buf_equal(MemorySegment v1, MemorySegment v2) {
        var mh$ = g_path_buf_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_path_buf_equal", v1, v2);
            }
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pattern_spec_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pattern_spec_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPatternSpec *g_pattern_spec_new(const gchar *pattern)
     * }
     */
    public static FunctionDescriptor g_pattern_spec_new$descriptor() {
        return g_pattern_spec_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPatternSpec *g_pattern_spec_new(const gchar *pattern)
     * }
     */
    public static MethodHandle g_pattern_spec_new$handle() {
        return g_pattern_spec_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPatternSpec *g_pattern_spec_new(const gchar *pattern)
     * }
     */
    public static MemorySegment g_pattern_spec_new(MemorySegment pattern) {
        var mh$ = g_pattern_spec_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pattern_spec_new", pattern);
            }
            return (MemorySegment)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pattern_spec_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pattern_spec_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_pattern_spec_free(GPatternSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_pattern_spec_free$descriptor() {
        return g_pattern_spec_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_pattern_spec_free(GPatternSpec *pspec)
     * }
     */
    public static MethodHandle g_pattern_spec_free$handle() {
        return g_pattern_spec_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_pattern_spec_free(GPatternSpec *pspec)
     * }
     */
    public static void g_pattern_spec_free(MemorySegment pspec) {
        var mh$ = g_pattern_spec_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pattern_spec_free", pspec);
            }
            mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pattern_spec_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pattern_spec_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPatternSpec *g_pattern_spec_copy(GPatternSpec *pspec)
     * }
     */
    public static FunctionDescriptor g_pattern_spec_copy$descriptor() {
        return g_pattern_spec_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPatternSpec *g_pattern_spec_copy(GPatternSpec *pspec)
     * }
     */
    public static MethodHandle g_pattern_spec_copy$handle() {
        return g_pattern_spec_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPatternSpec *g_pattern_spec_copy(GPatternSpec *pspec)
     * }
     */
    public static MemorySegment g_pattern_spec_copy(MemorySegment pspec) {
        var mh$ = g_pattern_spec_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pattern_spec_copy", pspec);
            }
            return (MemorySegment)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pattern_spec_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pattern_spec_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_spec_equal(GPatternSpec *pspec1, GPatternSpec *pspec2)
     * }
     */
    public static FunctionDescriptor g_pattern_spec_equal$descriptor() {
        return g_pattern_spec_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_spec_equal(GPatternSpec *pspec1, GPatternSpec *pspec2)
     * }
     */
    public static MethodHandle g_pattern_spec_equal$handle() {
        return g_pattern_spec_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pattern_spec_equal(GPatternSpec *pspec1, GPatternSpec *pspec2)
     * }
     */
    public static int g_pattern_spec_equal(MemorySegment pspec1, MemorySegment pspec2) {
        var mh$ = g_pattern_spec_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pattern_spec_equal", pspec1, pspec2);
            }
            return (int)mh$.invokeExact(pspec1, pspec2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pattern_spec_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pattern_spec_match"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_spec_match(GPatternSpec *pspec, gsize string_length, const gchar *string, const gchar *string_reversed)
     * }
     */
    public static FunctionDescriptor g_pattern_spec_match$descriptor() {
        return g_pattern_spec_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_spec_match(GPatternSpec *pspec, gsize string_length, const gchar *string, const gchar *string_reversed)
     * }
     */
    public static MethodHandle g_pattern_spec_match$handle() {
        return g_pattern_spec_match.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pattern_spec_match(GPatternSpec *pspec, gsize string_length, const gchar *string, const gchar *string_reversed)
     * }
     */
    public static int g_pattern_spec_match(MemorySegment pspec, long string_length, MemorySegment string, MemorySegment string_reversed) {
        var mh$ = g_pattern_spec_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pattern_spec_match", pspec, string_length, string, string_reversed);
            }
            return (int)mh$.invokeExact(pspec, string_length, string, string_reversed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pattern_spec_match_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pattern_spec_match_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_spec_match_string(GPatternSpec *pspec, const gchar *string)
     * }
     */
    public static FunctionDescriptor g_pattern_spec_match_string$descriptor() {
        return g_pattern_spec_match_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_spec_match_string(GPatternSpec *pspec, const gchar *string)
     * }
     */
    public static MethodHandle g_pattern_spec_match_string$handle() {
        return g_pattern_spec_match_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pattern_spec_match_string(GPatternSpec *pspec, const gchar *string)
     * }
     */
    public static int g_pattern_spec_match_string(MemorySegment pspec, MemorySegment string) {
        var mh$ = g_pattern_spec_match_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pattern_spec_match_string", pspec, string);
            }
            return (int)mh$.invokeExact(pspec, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pattern_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pattern_match"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_match(GPatternSpec *pspec, guint string_length, const gchar *string, const gchar *string_reversed)
     * }
     */
    public static FunctionDescriptor g_pattern_match$descriptor() {
        return g_pattern_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_match(GPatternSpec *pspec, guint string_length, const gchar *string, const gchar *string_reversed)
     * }
     */
    public static MethodHandle g_pattern_match$handle() {
        return g_pattern_match.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pattern_match(GPatternSpec *pspec, guint string_length, const gchar *string, const gchar *string_reversed)
     * }
     */
    public static int g_pattern_match(MemorySegment pspec, int string_length, MemorySegment string, MemorySegment string_reversed) {
        var mh$ = g_pattern_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pattern_match", pspec, string_length, string, string_reversed);
            }
            return (int)mh$.invokeExact(pspec, string_length, string, string_reversed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pattern_match_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pattern_match_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_match_string(GPatternSpec *pspec, const gchar *string)
     * }
     */
    public static FunctionDescriptor g_pattern_match_string$descriptor() {
        return g_pattern_match_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_match_string(GPatternSpec *pspec, const gchar *string)
     * }
     */
    public static MethodHandle g_pattern_match_string$handle() {
        return g_pattern_match_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pattern_match_string(GPatternSpec *pspec, const gchar *string)
     * }
     */
    public static int g_pattern_match_string(MemorySegment pspec, MemorySegment string) {
        var mh$ = g_pattern_match_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pattern_match_string", pspec, string);
            }
            return (int)mh$.invokeExact(pspec, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_pattern_match_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_pattern_match_simple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_match_simple(const gchar *pattern, const gchar *string)
     * }
     */
    public static FunctionDescriptor g_pattern_match_simple$descriptor() {
        return g_pattern_match_simple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_pattern_match_simple(const gchar *pattern, const gchar *string)
     * }
     */
    public static MethodHandle g_pattern_match_simple$handle() {
        return g_pattern_match_simple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_pattern_match_simple(const gchar *pattern, const gchar *string)
     * }
     */
    public static int g_pattern_match_simple(MemorySegment pattern, MemorySegment string) {
        var mh$ = g_pattern_match_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_pattern_match_simple", pattern, string);
            }
            return (int)mh$.invokeExact(pattern, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spaced_primes_closest {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spaced_primes_closest"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_spaced_primes_closest(guint num)
     * }
     */
    public static FunctionDescriptor g_spaced_primes_closest$descriptor() {
        return g_spaced_primes_closest.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_spaced_primes_closest(guint num)
     * }
     */
    public static MethodHandle g_spaced_primes_closest$handle() {
        return g_spaced_primes_closest.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_spaced_primes_closest(guint num)
     * }
     */
    public static int g_spaced_primes_closest(int num) {
        var mh$ = g_spaced_primes_closest.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spaced_primes_closest", num);
            }
            return (int)mh$.invokeExact(num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_qsort_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_qsort_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_qsort_with_data(gconstpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_qsort_with_data$descriptor() {
        return g_qsort_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_qsort_with_data(gconstpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_qsort_with_data$handle() {
        return g_qsort_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_qsort_with_data(gconstpointer pbase, gint total_elems, gsize size, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static void g_qsort_with_data(MemorySegment pbase, int total_elems, long size, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_qsort_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_qsort_with_data", pbase, total_elems, size, compare_func, user_data);
            }
            mh$.invokeExact(pbase, total_elems, size, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQueue *g_queue_new()
     * }
     */
    public static FunctionDescriptor g_queue_new$descriptor() {
        return g_queue_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQueue *g_queue_new()
     * }
     */
    public static MethodHandle g_queue_new$handle() {
        return g_queue_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQueue *g_queue_new()
     * }
     */
    public static MemorySegment g_queue_new() {
        var mh$ = g_queue_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_free(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_free$descriptor() {
        return g_queue_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_free(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_free$handle() {
        return g_queue_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_free(GQueue *queue)
     * }
     */
    public static void g_queue_free(MemorySegment queue) {
        var mh$ = g_queue_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_free", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_free_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_free_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_free_full(GQueue *queue, GDestroyNotify free_func)
     * }
     */
    public static FunctionDescriptor g_queue_free_full$descriptor() {
        return g_queue_free_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_free_full(GQueue *queue, GDestroyNotify free_func)
     * }
     */
    public static MethodHandle g_queue_free_full$handle() {
        return g_queue_free_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_free_full(GQueue *queue, GDestroyNotify free_func)
     * }
     */
    public static void g_queue_free_full(MemorySegment queue, MemorySegment free_func) {
        var mh$ = g_queue_free_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_free_full", queue, free_func);
            }
            mh$.invokeExact(queue, free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_init(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_init$descriptor() {
        return g_queue_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_init(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_init$handle() {
        return g_queue_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_init(GQueue *queue)
     * }
     */
    public static void g_queue_init(MemorySegment queue) {
        var mh$ = g_queue_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_init", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_clear(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_clear$descriptor() {
        return g_queue_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_clear(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_clear$handle() {
        return g_queue_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_clear(GQueue *queue)
     * }
     */
    public static void g_queue_clear(MemorySegment queue) {
        var mh$ = g_queue_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_clear", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_is_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_is_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_queue_is_empty(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_is_empty$descriptor() {
        return g_queue_is_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_queue_is_empty(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_is_empty$handle() {
        return g_queue_is_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_queue_is_empty(GQueue *queue)
     * }
     */
    public static int g_queue_is_empty(MemorySegment queue) {
        var mh$ = g_queue_is_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_is_empty", queue);
            }
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_clear_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_clear_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_clear_full(GQueue *queue, GDestroyNotify free_func)
     * }
     */
    public static FunctionDescriptor g_queue_clear_full$descriptor() {
        return g_queue_clear_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_clear_full(GQueue *queue, GDestroyNotify free_func)
     * }
     */
    public static MethodHandle g_queue_clear_full$handle() {
        return g_queue_clear_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_clear_full(GQueue *queue, GDestroyNotify free_func)
     * }
     */
    public static void g_queue_clear_full(MemorySegment queue, MemorySegment free_func) {
        var mh$ = g_queue_clear_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_clear_full", queue, free_func);
            }
            mh$.invokeExact(queue, free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_queue_get_length(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_get_length$descriptor() {
        return g_queue_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_queue_get_length(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_get_length$handle() {
        return g_queue_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_queue_get_length(GQueue *queue)
     * }
     */
    public static int g_queue_get_length(MemorySegment queue) {
        var mh$ = g_queue_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_get_length", queue);
            }
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_reverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_reverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_reverse(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_reverse$descriptor() {
        return g_queue_reverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_reverse(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_reverse$handle() {
        return g_queue_reverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_reverse(GQueue *queue)
     * }
     */
    public static void g_queue_reverse(MemorySegment queue) {
        var mh$ = g_queue_reverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_reverse", queue);
            }
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQueue *g_queue_copy(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_copy$descriptor() {
        return g_queue_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQueue *g_queue_copy(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_copy$handle() {
        return g_queue_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQueue *g_queue_copy(GQueue *queue)
     * }
     */
    public static MemorySegment g_queue_copy(MemorySegment queue) {
        var mh$ = g_queue_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_copy", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_foreach(GQueue *queue, GFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_queue_foreach$descriptor() {
        return g_queue_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_foreach(GQueue *queue, GFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_queue_foreach$handle() {
        return g_queue_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_foreach(GQueue *queue, GFunc func, gpointer user_data)
     * }
     */
    public static void g_queue_foreach(MemorySegment queue, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_queue_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_foreach", queue, func, user_data);
            }
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_queue_find(GQueue *queue, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_queue_find$descriptor() {
        return g_queue_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_queue_find(GQueue *queue, gconstpointer data)
     * }
     */
    public static MethodHandle g_queue_find$handle() {
        return g_queue_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_queue_find(GQueue *queue, gconstpointer data)
     * }
     */
    public static MemorySegment g_queue_find(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_find", queue, data);
            }
            return (MemorySegment)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_find_custom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_find_custom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_queue_find_custom(GQueue *queue, gconstpointer data, GCompareFunc func)
     * }
     */
    public static FunctionDescriptor g_queue_find_custom$descriptor() {
        return g_queue_find_custom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_queue_find_custom(GQueue *queue, gconstpointer data, GCompareFunc func)
     * }
     */
    public static MethodHandle g_queue_find_custom$handle() {
        return g_queue_find_custom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_queue_find_custom(GQueue *queue, gconstpointer data, GCompareFunc func)
     * }
     */
    public static MemorySegment g_queue_find_custom(MemorySegment queue, MemorySegment data, MemorySegment func) {
        var mh$ = g_queue_find_custom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_find_custom", queue, data, func);
            }
            return (MemorySegment)mh$.invokeExact(queue, data, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_sort(GQueue *queue, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_queue_sort$descriptor() {
        return g_queue_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_sort(GQueue *queue, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_queue_sort$handle() {
        return g_queue_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_sort(GQueue *queue, GCompareDataFunc compare_func, gpointer user_data)
     * }
     */
    public static void g_queue_sort(MemorySegment queue, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_queue_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_sort", queue, compare_func, user_data);
            }
            mh$.invokeExact(queue, compare_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_push_head {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_push_head"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_push_head(GQueue *queue, gpointer data)
     * }
     */
    public static FunctionDescriptor g_queue_push_head$descriptor() {
        return g_queue_push_head.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_push_head(GQueue *queue, gpointer data)
     * }
     */
    public static MethodHandle g_queue_push_head$handle() {
        return g_queue_push_head.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_push_head(GQueue *queue, gpointer data)
     * }
     */
    public static void g_queue_push_head(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_push_head.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_push_head", queue, data);
            }
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_push_tail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_push_tail"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_push_tail(GQueue *queue, gpointer data)
     * }
     */
    public static FunctionDescriptor g_queue_push_tail$descriptor() {
        return g_queue_push_tail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_push_tail(GQueue *queue, gpointer data)
     * }
     */
    public static MethodHandle g_queue_push_tail$handle() {
        return g_queue_push_tail.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_push_tail(GQueue *queue, gpointer data)
     * }
     */
    public static void g_queue_push_tail(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_push_tail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_push_tail", queue, data);
            }
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_push_nth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_push_nth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_push_nth(GQueue *queue, gpointer data, gint n)
     * }
     */
    public static FunctionDescriptor g_queue_push_nth$descriptor() {
        return g_queue_push_nth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_push_nth(GQueue *queue, gpointer data, gint n)
     * }
     */
    public static MethodHandle g_queue_push_nth$handle() {
        return g_queue_push_nth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_push_nth(GQueue *queue, gpointer data, gint n)
     * }
     */
    public static void g_queue_push_nth(MemorySegment queue, MemorySegment data, int n) {
        var mh$ = g_queue_push_nth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_push_nth", queue, data, n);
            }
            mh$.invokeExact(queue, data, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_pop_head {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_pop_head"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_queue_pop_head(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_pop_head$descriptor() {
        return g_queue_pop_head.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_queue_pop_head(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_pop_head$handle() {
        return g_queue_pop_head.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_queue_pop_head(GQueue *queue)
     * }
     */
    public static MemorySegment g_queue_pop_head(MemorySegment queue) {
        var mh$ = g_queue_pop_head.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_pop_head", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_pop_tail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_pop_tail"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_queue_pop_tail(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_pop_tail$descriptor() {
        return g_queue_pop_tail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_queue_pop_tail(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_pop_tail$handle() {
        return g_queue_pop_tail.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_queue_pop_tail(GQueue *queue)
     * }
     */
    public static MemorySegment g_queue_pop_tail(MemorySegment queue) {
        var mh$ = g_queue_pop_tail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_pop_tail", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_pop_nth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_pop_nth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_queue_pop_nth(GQueue *queue, guint n)
     * }
     */
    public static FunctionDescriptor g_queue_pop_nth$descriptor() {
        return g_queue_pop_nth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_queue_pop_nth(GQueue *queue, guint n)
     * }
     */
    public static MethodHandle g_queue_pop_nth$handle() {
        return g_queue_pop_nth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_queue_pop_nth(GQueue *queue, guint n)
     * }
     */
    public static MemorySegment g_queue_pop_nth(MemorySegment queue, int n) {
        var mh$ = g_queue_pop_nth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_pop_nth", queue, n);
            }
            return (MemorySegment)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_peek_head {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_peek_head"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_queue_peek_head(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_peek_head$descriptor() {
        return g_queue_peek_head.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_queue_peek_head(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_peek_head$handle() {
        return g_queue_peek_head.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_queue_peek_head(GQueue *queue)
     * }
     */
    public static MemorySegment g_queue_peek_head(MemorySegment queue) {
        var mh$ = g_queue_peek_head.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_peek_head", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_peek_tail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_peek_tail"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_queue_peek_tail(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_peek_tail$descriptor() {
        return g_queue_peek_tail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_queue_peek_tail(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_peek_tail$handle() {
        return g_queue_peek_tail.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_queue_peek_tail(GQueue *queue)
     * }
     */
    public static MemorySegment g_queue_peek_tail(MemorySegment queue) {
        var mh$ = g_queue_peek_tail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_peek_tail", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_peek_nth {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_peek_nth"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_queue_peek_nth(GQueue *queue, guint n)
     * }
     */
    public static FunctionDescriptor g_queue_peek_nth$descriptor() {
        return g_queue_peek_nth.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_queue_peek_nth(GQueue *queue, guint n)
     * }
     */
    public static MethodHandle g_queue_peek_nth$handle() {
        return g_queue_peek_nth.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_queue_peek_nth(GQueue *queue, guint n)
     * }
     */
    public static MemorySegment g_queue_peek_nth(MemorySegment queue, int n) {
        var mh$ = g_queue_peek_nth.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_peek_nth", queue, n);
            }
            return (MemorySegment)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_queue_index(GQueue *queue, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_queue_index$descriptor() {
        return g_queue_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_queue_index(GQueue *queue, gconstpointer data)
     * }
     */
    public static MethodHandle g_queue_index$handle() {
        return g_queue_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_queue_index(GQueue *queue, gconstpointer data)
     * }
     */
    public static int g_queue_index(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_index", queue, data);
            }
            return (int)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_queue_remove(GQueue *queue, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_queue_remove$descriptor() {
        return g_queue_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_queue_remove(GQueue *queue, gconstpointer data)
     * }
     */
    public static MethodHandle g_queue_remove$handle() {
        return g_queue_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_queue_remove(GQueue *queue, gconstpointer data)
     * }
     */
    public static int g_queue_remove(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_remove", queue, data);
            }
            return (int)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_remove_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_remove_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_queue_remove_all(GQueue *queue, gconstpointer data)
     * }
     */
    public static FunctionDescriptor g_queue_remove_all$descriptor() {
        return g_queue_remove_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_queue_remove_all(GQueue *queue, gconstpointer data)
     * }
     */
    public static MethodHandle g_queue_remove_all$handle() {
        return g_queue_remove_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_queue_remove_all(GQueue *queue, gconstpointer data)
     * }
     */
    public static int g_queue_remove_all(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_remove_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_remove_all", queue, data);
            }
            return (int)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_insert_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_insert_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_insert_before(GQueue *queue, GList *sibling, gpointer data)
     * }
     */
    public static FunctionDescriptor g_queue_insert_before$descriptor() {
        return g_queue_insert_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_insert_before(GQueue *queue, GList *sibling, gpointer data)
     * }
     */
    public static MethodHandle g_queue_insert_before$handle() {
        return g_queue_insert_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_insert_before(GQueue *queue, GList *sibling, gpointer data)
     * }
     */
    public static void g_queue_insert_before(MemorySegment queue, MemorySegment sibling, MemorySegment data) {
        var mh$ = g_queue_insert_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_insert_before", queue, sibling, data);
            }
            mh$.invokeExact(queue, sibling, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_insert_before_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_insert_before_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_insert_before_link(GQueue *queue, GList *sibling, GList *link_)
     * }
     */
    public static FunctionDescriptor g_queue_insert_before_link$descriptor() {
        return g_queue_insert_before_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_insert_before_link(GQueue *queue, GList *sibling, GList *link_)
     * }
     */
    public static MethodHandle g_queue_insert_before_link$handle() {
        return g_queue_insert_before_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_insert_before_link(GQueue *queue, GList *sibling, GList *link_)
     * }
     */
    public static void g_queue_insert_before_link(MemorySegment queue, MemorySegment sibling, MemorySegment link_) {
        var mh$ = g_queue_insert_before_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_insert_before_link", queue, sibling, link_);
            }
            mh$.invokeExact(queue, sibling, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_insert_after {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_insert_after"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_insert_after(GQueue *queue, GList *sibling, gpointer data)
     * }
     */
    public static FunctionDescriptor g_queue_insert_after$descriptor() {
        return g_queue_insert_after.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_insert_after(GQueue *queue, GList *sibling, gpointer data)
     * }
     */
    public static MethodHandle g_queue_insert_after$handle() {
        return g_queue_insert_after.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_insert_after(GQueue *queue, GList *sibling, gpointer data)
     * }
     */
    public static void g_queue_insert_after(MemorySegment queue, MemorySegment sibling, MemorySegment data) {
        var mh$ = g_queue_insert_after.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_insert_after", queue, sibling, data);
            }
            mh$.invokeExact(queue, sibling, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_insert_after_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_insert_after_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_insert_after_link(GQueue *queue, GList *sibling, GList *link_)
     * }
     */
    public static FunctionDescriptor g_queue_insert_after_link$descriptor() {
        return g_queue_insert_after_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_insert_after_link(GQueue *queue, GList *sibling, GList *link_)
     * }
     */
    public static MethodHandle g_queue_insert_after_link$handle() {
        return g_queue_insert_after_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_insert_after_link(GQueue *queue, GList *sibling, GList *link_)
     * }
     */
    public static void g_queue_insert_after_link(MemorySegment queue, MemorySegment sibling, MemorySegment link_) {
        var mh$ = g_queue_insert_after_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_insert_after_link", queue, sibling, link_);
            }
            mh$.invokeExact(queue, sibling, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_insert_sorted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_insert_sorted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_insert_sorted(GQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_queue_insert_sorted$descriptor() {
        return g_queue_insert_sorted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_insert_sorted(GQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_queue_insert_sorted$handle() {
        return g_queue_insert_sorted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_insert_sorted(GQueue *queue, gpointer data, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static void g_queue_insert_sorted(MemorySegment queue, MemorySegment data, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_queue_insert_sorted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_insert_sorted", queue, data, func, user_data);
            }
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_push_head_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_push_head_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_push_head_link(GQueue *queue, GList *link_)
     * }
     */
    public static FunctionDescriptor g_queue_push_head_link$descriptor() {
        return g_queue_push_head_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_push_head_link(GQueue *queue, GList *link_)
     * }
     */
    public static MethodHandle g_queue_push_head_link$handle() {
        return g_queue_push_head_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_push_head_link(GQueue *queue, GList *link_)
     * }
     */
    public static void g_queue_push_head_link(MemorySegment queue, MemorySegment link_) {
        var mh$ = g_queue_push_head_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_push_head_link", queue, link_);
            }
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_push_tail_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_push_tail_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_push_tail_link(GQueue *queue, GList *link_)
     * }
     */
    public static FunctionDescriptor g_queue_push_tail_link$descriptor() {
        return g_queue_push_tail_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_push_tail_link(GQueue *queue, GList *link_)
     * }
     */
    public static MethodHandle g_queue_push_tail_link$handle() {
        return g_queue_push_tail_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_push_tail_link(GQueue *queue, GList *link_)
     * }
     */
    public static void g_queue_push_tail_link(MemorySegment queue, MemorySegment link_) {
        var mh$ = g_queue_push_tail_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_push_tail_link", queue, link_);
            }
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_push_nth_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_push_nth_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_push_nth_link(GQueue *queue, gint n, GList *link_)
     * }
     */
    public static FunctionDescriptor g_queue_push_nth_link$descriptor() {
        return g_queue_push_nth_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_push_nth_link(GQueue *queue, gint n, GList *link_)
     * }
     */
    public static MethodHandle g_queue_push_nth_link$handle() {
        return g_queue_push_nth_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_push_nth_link(GQueue *queue, gint n, GList *link_)
     * }
     */
    public static void g_queue_push_nth_link(MemorySegment queue, int n, MemorySegment link_) {
        var mh$ = g_queue_push_nth_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_push_nth_link", queue, n, link_);
            }
            mh$.invokeExact(queue, n, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_pop_head_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_pop_head_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_queue_pop_head_link(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_pop_head_link$descriptor() {
        return g_queue_pop_head_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_queue_pop_head_link(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_pop_head_link$handle() {
        return g_queue_pop_head_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_queue_pop_head_link(GQueue *queue)
     * }
     */
    public static MemorySegment g_queue_pop_head_link(MemorySegment queue) {
        var mh$ = g_queue_pop_head_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_pop_head_link", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_pop_tail_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_pop_tail_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_queue_pop_tail_link(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_pop_tail_link$descriptor() {
        return g_queue_pop_tail_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_queue_pop_tail_link(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_pop_tail_link$handle() {
        return g_queue_pop_tail_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_queue_pop_tail_link(GQueue *queue)
     * }
     */
    public static MemorySegment g_queue_pop_tail_link(MemorySegment queue) {
        var mh$ = g_queue_pop_tail_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_pop_tail_link", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_pop_nth_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_pop_nth_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_queue_pop_nth_link(GQueue *queue, guint n)
     * }
     */
    public static FunctionDescriptor g_queue_pop_nth_link$descriptor() {
        return g_queue_pop_nth_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_queue_pop_nth_link(GQueue *queue, guint n)
     * }
     */
    public static MethodHandle g_queue_pop_nth_link$handle() {
        return g_queue_pop_nth_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_queue_pop_nth_link(GQueue *queue, guint n)
     * }
     */
    public static MemorySegment g_queue_pop_nth_link(MemorySegment queue, int n) {
        var mh$ = g_queue_pop_nth_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_pop_nth_link", queue, n);
            }
            return (MemorySegment)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_peek_head_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_peek_head_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_queue_peek_head_link(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_peek_head_link$descriptor() {
        return g_queue_peek_head_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_queue_peek_head_link(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_peek_head_link$handle() {
        return g_queue_peek_head_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_queue_peek_head_link(GQueue *queue)
     * }
     */
    public static MemorySegment g_queue_peek_head_link(MemorySegment queue) {
        var mh$ = g_queue_peek_head_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_peek_head_link", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_peek_tail_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_peek_tail_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_queue_peek_tail_link(GQueue *queue)
     * }
     */
    public static FunctionDescriptor g_queue_peek_tail_link$descriptor() {
        return g_queue_peek_tail_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_queue_peek_tail_link(GQueue *queue)
     * }
     */
    public static MethodHandle g_queue_peek_tail_link$handle() {
        return g_queue_peek_tail_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_queue_peek_tail_link(GQueue *queue)
     * }
     */
    public static MemorySegment g_queue_peek_tail_link(MemorySegment queue) {
        var mh$ = g_queue_peek_tail_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_peek_tail_link", queue);
            }
            return (MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_peek_nth_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_peek_nth_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_queue_peek_nth_link(GQueue *queue, guint n)
     * }
     */
    public static FunctionDescriptor g_queue_peek_nth_link$descriptor() {
        return g_queue_peek_nth_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_queue_peek_nth_link(GQueue *queue, guint n)
     * }
     */
    public static MethodHandle g_queue_peek_nth_link$handle() {
        return g_queue_peek_nth_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_queue_peek_nth_link(GQueue *queue, guint n)
     * }
     */
    public static MemorySegment g_queue_peek_nth_link(MemorySegment queue, int n) {
        var mh$ = g_queue_peek_nth_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_peek_nth_link", queue, n);
            }
            return (MemorySegment)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_link_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_link_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_queue_link_index(GQueue *queue, GList *link_)
     * }
     */
    public static FunctionDescriptor g_queue_link_index$descriptor() {
        return g_queue_link_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_queue_link_index(GQueue *queue, GList *link_)
     * }
     */
    public static MethodHandle g_queue_link_index$handle() {
        return g_queue_link_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_queue_link_index(GQueue *queue, GList *link_)
     * }
     */
    public static int g_queue_link_index(MemorySegment queue, MemorySegment link_) {
        var mh$ = g_queue_link_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_link_index", queue, link_);
            }
            return (int)mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_unlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_unlink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_unlink(GQueue *queue, GList *link_)
     * }
     */
    public static FunctionDescriptor g_queue_unlink$descriptor() {
        return g_queue_unlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_unlink(GQueue *queue, GList *link_)
     * }
     */
    public static MethodHandle g_queue_unlink$handle() {
        return g_queue_unlink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_unlink(GQueue *queue, GList *link_)
     * }
     */
    public static void g_queue_unlink(MemorySegment queue, MemorySegment link_) {
        var mh$ = g_queue_unlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_unlink", queue, link_);
            }
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_queue_delete_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_queue_delete_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_queue_delete_link(GQueue *queue, GList *link_)
     * }
     */
    public static FunctionDescriptor g_queue_delete_link$descriptor() {
        return g_queue_delete_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_queue_delete_link(GQueue *queue, GList *link_)
     * }
     */
    public static MethodHandle g_queue_delete_link$handle() {
        return g_queue_delete_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_queue_delete_link(GQueue *queue, GList *link_)
     * }
     */
    public static void g_queue_delete_link(MemorySegment queue, MemorySegment link_) {
        var mh$ = g_queue_delete_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_queue_delete_link", queue, link_);
            }
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_new_with_seed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_new_with_seed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GRand *g_rand_new_with_seed(guint32 seed)
     * }
     */
    public static FunctionDescriptor g_rand_new_with_seed$descriptor() {
        return g_rand_new_with_seed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GRand *g_rand_new_with_seed(guint32 seed)
     * }
     */
    public static MethodHandle g_rand_new_with_seed$handle() {
        return g_rand_new_with_seed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GRand *g_rand_new_with_seed(guint32 seed)
     * }
     */
    public static MemorySegment g_rand_new_with_seed(int seed) {
        var mh$ = g_rand_new_with_seed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_new_with_seed", seed);
            }
            return (MemorySegment)mh$.invokeExact(seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_new_with_seed_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_new_with_seed_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GRand *g_rand_new_with_seed_array(const guint32 *seed, guint seed_length)
     * }
     */
    public static FunctionDescriptor g_rand_new_with_seed_array$descriptor() {
        return g_rand_new_with_seed_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GRand *g_rand_new_with_seed_array(const guint32 *seed, guint seed_length)
     * }
     */
    public static MethodHandle g_rand_new_with_seed_array$handle() {
        return g_rand_new_with_seed_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GRand *g_rand_new_with_seed_array(const guint32 *seed, guint seed_length)
     * }
     */
    public static MemorySegment g_rand_new_with_seed_array(MemorySegment seed, int seed_length) {
        var mh$ = g_rand_new_with_seed_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_new_with_seed_array", seed, seed_length);
            }
            return (MemorySegment)mh$.invokeExact(seed, seed_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GRand *g_rand_new()
     * }
     */
    public static FunctionDescriptor g_rand_new$descriptor() {
        return g_rand_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GRand *g_rand_new()
     * }
     */
    public static MethodHandle g_rand_new$handle() {
        return g_rand_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GRand *g_rand_new()
     * }
     */
    public static MemorySegment g_rand_new() {
        var mh$ = g_rand_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rand_free(GRand *rand_)
     * }
     */
    public static FunctionDescriptor g_rand_free$descriptor() {
        return g_rand_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rand_free(GRand *rand_)
     * }
     */
    public static MethodHandle g_rand_free$handle() {
        return g_rand_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rand_free(GRand *rand_)
     * }
     */
    public static void g_rand_free(MemorySegment rand_) {
        var mh$ = g_rand_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_free", rand_);
            }
            mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GRand *g_rand_copy(GRand *rand_)
     * }
     */
    public static FunctionDescriptor g_rand_copy$descriptor() {
        return g_rand_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GRand *g_rand_copy(GRand *rand_)
     * }
     */
    public static MethodHandle g_rand_copy$handle() {
        return g_rand_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GRand *g_rand_copy(GRand *rand_)
     * }
     */
    public static MemorySegment g_rand_copy(MemorySegment rand_) {
        var mh$ = g_rand_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_copy", rand_);
            }
            return (MemorySegment)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_set_seed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_set_seed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rand_set_seed(GRand *rand_, guint32 seed)
     * }
     */
    public static FunctionDescriptor g_rand_set_seed$descriptor() {
        return g_rand_set_seed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rand_set_seed(GRand *rand_, guint32 seed)
     * }
     */
    public static MethodHandle g_rand_set_seed$handle() {
        return g_rand_set_seed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rand_set_seed(GRand *rand_, guint32 seed)
     * }
     */
    public static void g_rand_set_seed(MemorySegment rand_, int seed) {
        var mh$ = g_rand_set_seed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_set_seed", rand_, seed);
            }
            mh$.invokeExact(rand_, seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_set_seed_array {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_set_seed_array"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rand_set_seed_array(GRand *rand_, const guint32 *seed, guint seed_length)
     * }
     */
    public static FunctionDescriptor g_rand_set_seed_array$descriptor() {
        return g_rand_set_seed_array.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rand_set_seed_array(GRand *rand_, const guint32 *seed, guint seed_length)
     * }
     */
    public static MethodHandle g_rand_set_seed_array$handle() {
        return g_rand_set_seed_array.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rand_set_seed_array(GRand *rand_, const guint32 *seed, guint seed_length)
     * }
     */
    public static void g_rand_set_seed_array(MemorySegment rand_, MemorySegment seed, int seed_length) {
        var mh$ = g_rand_set_seed_array.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_set_seed_array", rand_, seed, seed_length);
            }
            mh$.invokeExact(rand_, seed, seed_length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_rand_int(GRand *rand_)
     * }
     */
    public static FunctionDescriptor g_rand_int$descriptor() {
        return g_rand_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_rand_int(GRand *rand_)
     * }
     */
    public static MethodHandle g_rand_int$handle() {
        return g_rand_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_rand_int(GRand *rand_)
     * }
     */
    public static int g_rand_int(MemorySegment rand_) {
        var mh$ = g_rand_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_int", rand_);
            }
            return (int)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_int_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_int_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint32 g_rand_int_range(GRand *rand_, gint32 begin, gint32 end)
     * }
     */
    public static FunctionDescriptor g_rand_int_range$descriptor() {
        return g_rand_int_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint32 g_rand_int_range(GRand *rand_, gint32 begin, gint32 end)
     * }
     */
    public static MethodHandle g_rand_int_range$handle() {
        return g_rand_int_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint32 g_rand_int_range(GRand *rand_, gint32 begin, gint32 end)
     * }
     */
    public static int g_rand_int_range(MemorySegment rand_, int begin, int end) {
        var mh$ = g_rand_int_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_int_range", rand_, begin, end);
            }
            return (int)mh$.invokeExact(rand_, begin, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_rand_double(GRand *rand_)
     * }
     */
    public static FunctionDescriptor g_rand_double$descriptor() {
        return g_rand_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_rand_double(GRand *rand_)
     * }
     */
    public static MethodHandle g_rand_double$handle() {
        return g_rand_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_rand_double(GRand *rand_)
     * }
     */
    public static double g_rand_double(MemorySegment rand_) {
        var mh$ = g_rand_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_double", rand_);
            }
            return (double)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rand_double_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rand_double_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_rand_double_range(GRand *rand_, gdouble begin, gdouble end)
     * }
     */
    public static FunctionDescriptor g_rand_double_range$descriptor() {
        return g_rand_double_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_rand_double_range(GRand *rand_, gdouble begin, gdouble end)
     * }
     */
    public static MethodHandle g_rand_double_range$handle() {
        return g_rand_double_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_rand_double_range(GRand *rand_, gdouble begin, gdouble end)
     * }
     */
    public static double g_rand_double_range(MemorySegment rand_, double begin, double end) {
        var mh$ = g_rand_double_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rand_double_range", rand_, begin, end);
            }
            return (double)mh$.invokeExact(rand_, begin, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_random_set_seed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_random_set_seed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_random_set_seed(guint32 seed)
     * }
     */
    public static FunctionDescriptor g_random_set_seed$descriptor() {
        return g_random_set_seed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_random_set_seed(guint32 seed)
     * }
     */
    public static MethodHandle g_random_set_seed$handle() {
        return g_random_set_seed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_random_set_seed(guint32 seed)
     * }
     */
    public static void g_random_set_seed(int seed) {
        var mh$ = g_random_set_seed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_random_set_seed", seed);
            }
            mh$.invokeExact(seed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_random_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_random_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint32 g_random_int()
     * }
     */
    public static FunctionDescriptor g_random_int$descriptor() {
        return g_random_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint32 g_random_int()
     * }
     */
    public static MethodHandle g_random_int$handle() {
        return g_random_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint32 g_random_int()
     * }
     */
    public static int g_random_int() {
        var mh$ = g_random_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_random_int");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_random_int_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_random_int_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint32 g_random_int_range(gint32 begin, gint32 end)
     * }
     */
    public static FunctionDescriptor g_random_int_range$descriptor() {
        return g_random_int_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint32 g_random_int_range(gint32 begin, gint32 end)
     * }
     */
    public static MethodHandle g_random_int_range$handle() {
        return g_random_int_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint32 g_random_int_range(gint32 begin, gint32 end)
     * }
     */
    public static int g_random_int_range(int begin, int end) {
        var mh$ = g_random_int_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_random_int_range", begin, end);
            }
            return (int)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_random_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_random_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_random_double()
     * }
     */
    public static FunctionDescriptor g_random_double$descriptor() {
        return g_random_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_random_double()
     * }
     */
    public static MethodHandle g_random_double$handle() {
        return g_random_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_random_double()
     * }
     */
    public static double g_random_double() {
        var mh$ = g_random_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_random_double");
            }
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_random_double_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_random_double_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_random_double_range(gdouble begin, gdouble end)
     * }
     */
    public static FunctionDescriptor g_random_double_range$descriptor() {
        return g_random_double_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_random_double_range(gdouble begin, gdouble end)
     * }
     */
    public static MethodHandle g_random_double_range$handle() {
        return g_random_double_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_random_double_range(gdouble begin, gdouble end)
     * }
     */
    public static double g_random_double_range(double begin, double end) {
        var mh$ = g_random_double_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_random_double_range", begin, end);
            }
            return (double)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rc_box_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rc_box_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_rc_box_alloc(gsize block_size)
     * }
     */
    public static FunctionDescriptor g_rc_box_alloc$descriptor() {
        return g_rc_box_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_rc_box_alloc(gsize block_size)
     * }
     */
    public static MethodHandle g_rc_box_alloc$handle() {
        return g_rc_box_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_rc_box_alloc(gsize block_size)
     * }
     */
    public static MemorySegment g_rc_box_alloc(long block_size) {
        var mh$ = g_rc_box_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rc_box_alloc", block_size);
            }
            return (MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rc_box_alloc0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rc_box_alloc0"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_rc_box_alloc0(gsize block_size)
     * }
     */
    public static FunctionDescriptor g_rc_box_alloc0$descriptor() {
        return g_rc_box_alloc0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_rc_box_alloc0(gsize block_size)
     * }
     */
    public static MethodHandle g_rc_box_alloc0$handle() {
        return g_rc_box_alloc0.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_rc_box_alloc0(gsize block_size)
     * }
     */
    public static MemorySegment g_rc_box_alloc0(long block_size) {
        var mh$ = g_rc_box_alloc0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rc_box_alloc0", block_size);
            }
            return (MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rc_box_dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rc_box_dup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_rc_box_dup(gsize block_size, gconstpointer mem_block)
     * }
     */
    public static FunctionDescriptor g_rc_box_dup$descriptor() {
        return g_rc_box_dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_rc_box_dup(gsize block_size, gconstpointer mem_block)
     * }
     */
    public static MethodHandle g_rc_box_dup$handle() {
        return g_rc_box_dup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_rc_box_dup(gsize block_size, gconstpointer mem_block)
     * }
     */
    public static MemorySegment g_rc_box_dup(long block_size, MemorySegment mem_block) {
        var mh$ = g_rc_box_dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rc_box_dup", block_size, mem_block);
            }
            return (MemorySegment)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rc_box_acquire {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rc_box_acquire"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_rc_box_acquire(gpointer mem_block)
     * }
     */
    public static FunctionDescriptor g_rc_box_acquire$descriptor() {
        return g_rc_box_acquire.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_rc_box_acquire(gpointer mem_block)
     * }
     */
    public static MethodHandle g_rc_box_acquire$handle() {
        return g_rc_box_acquire.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_rc_box_acquire(gpointer mem_block)
     * }
     */
    public static MemorySegment g_rc_box_acquire(MemorySegment mem_block) {
        var mh$ = g_rc_box_acquire.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rc_box_acquire", mem_block);
            }
            return (MemorySegment)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rc_box_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rc_box_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rc_box_release(gpointer mem_block)
     * }
     */
    public static FunctionDescriptor g_rc_box_release$descriptor() {
        return g_rc_box_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rc_box_release(gpointer mem_block)
     * }
     */
    public static MethodHandle g_rc_box_release$handle() {
        return g_rc_box_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rc_box_release(gpointer mem_block)
     * }
     */
    public static void g_rc_box_release(MemorySegment mem_block) {
        var mh$ = g_rc_box_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rc_box_release", mem_block);
            }
            mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rc_box_release_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rc_box_release_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_rc_box_release_full(gpointer mem_block, GDestroyNotify clear_func)
     * }
     */
    public static FunctionDescriptor g_rc_box_release_full$descriptor() {
        return g_rc_box_release_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_rc_box_release_full(gpointer mem_block, GDestroyNotify clear_func)
     * }
     */
    public static MethodHandle g_rc_box_release_full$handle() {
        return g_rc_box_release_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_rc_box_release_full(gpointer mem_block, GDestroyNotify clear_func)
     * }
     */
    public static void g_rc_box_release_full(MemorySegment mem_block, MemorySegment clear_func) {
        var mh$ = g_rc_box_release_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rc_box_release_full", mem_block, clear_func);
            }
            mh$.invokeExact(mem_block, clear_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_rc_box_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_rc_box_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_rc_box_get_size(gpointer mem_block)
     * }
     */
    public static FunctionDescriptor g_rc_box_get_size$descriptor() {
        return g_rc_box_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_rc_box_get_size(gpointer mem_block)
     * }
     */
    public static MethodHandle g_rc_box_get_size$handle() {
        return g_rc_box_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_rc_box_get_size(gpointer mem_block)
     * }
     */
    public static long g_rc_box_get_size(MemorySegment mem_block) {
        var mh$ = g_rc_box_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_rc_box_get_size", mem_block);
            }
            return (long)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_rc_box_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_rc_box_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_alloc(gsize block_size)
     * }
     */
    public static FunctionDescriptor g_atomic_rc_box_alloc$descriptor() {
        return g_atomic_rc_box_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_alloc(gsize block_size)
     * }
     */
    public static MethodHandle g_atomic_rc_box_alloc$handle() {
        return g_atomic_rc_box_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_alloc(gsize block_size)
     * }
     */
    public static MemorySegment g_atomic_rc_box_alloc(long block_size) {
        var mh$ = g_atomic_rc_box_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_rc_box_alloc", block_size);
            }
            return (MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_rc_box_alloc0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_rc_box_alloc0"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_alloc0(gsize block_size)
     * }
     */
    public static FunctionDescriptor g_atomic_rc_box_alloc0$descriptor() {
        return g_atomic_rc_box_alloc0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_alloc0(gsize block_size)
     * }
     */
    public static MethodHandle g_atomic_rc_box_alloc0$handle() {
        return g_atomic_rc_box_alloc0.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_alloc0(gsize block_size)
     * }
     */
    public static MemorySegment g_atomic_rc_box_alloc0(long block_size) {
        var mh$ = g_atomic_rc_box_alloc0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_rc_box_alloc0", block_size);
            }
            return (MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_rc_box_dup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_rc_box_dup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_dup(gsize block_size, gconstpointer mem_block)
     * }
     */
    public static FunctionDescriptor g_atomic_rc_box_dup$descriptor() {
        return g_atomic_rc_box_dup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_dup(gsize block_size, gconstpointer mem_block)
     * }
     */
    public static MethodHandle g_atomic_rc_box_dup$handle() {
        return g_atomic_rc_box_dup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_dup(gsize block_size, gconstpointer mem_block)
     * }
     */
    public static MemorySegment g_atomic_rc_box_dup(long block_size, MemorySegment mem_block) {
        var mh$ = g_atomic_rc_box_dup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_rc_box_dup", block_size, mem_block);
            }
            return (MemorySegment)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_rc_box_acquire {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_rc_box_acquire"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_acquire(gpointer mem_block)
     * }
     */
    public static FunctionDescriptor g_atomic_rc_box_acquire$descriptor() {
        return g_atomic_rc_box_acquire.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_acquire(gpointer mem_block)
     * }
     */
    public static MethodHandle g_atomic_rc_box_acquire$handle() {
        return g_atomic_rc_box_acquire.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_atomic_rc_box_acquire(gpointer mem_block)
     * }
     */
    public static MemorySegment g_atomic_rc_box_acquire(MemorySegment mem_block) {
        var mh$ = g_atomic_rc_box_acquire.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_rc_box_acquire", mem_block);
            }
            return (MemorySegment)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_rc_box_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_rc_box_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_atomic_rc_box_release(gpointer mem_block)
     * }
     */
    public static FunctionDescriptor g_atomic_rc_box_release$descriptor() {
        return g_atomic_rc_box_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_atomic_rc_box_release(gpointer mem_block)
     * }
     */
    public static MethodHandle g_atomic_rc_box_release$handle() {
        return g_atomic_rc_box_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_atomic_rc_box_release(gpointer mem_block)
     * }
     */
    public static void g_atomic_rc_box_release(MemorySegment mem_block) {
        var mh$ = g_atomic_rc_box_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_rc_box_release", mem_block);
            }
            mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_rc_box_release_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_rc_box_release_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_atomic_rc_box_release_full(gpointer mem_block, GDestroyNotify clear_func)
     * }
     */
    public static FunctionDescriptor g_atomic_rc_box_release_full$descriptor() {
        return g_atomic_rc_box_release_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_atomic_rc_box_release_full(gpointer mem_block, GDestroyNotify clear_func)
     * }
     */
    public static MethodHandle g_atomic_rc_box_release_full$handle() {
        return g_atomic_rc_box_release_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_atomic_rc_box_release_full(gpointer mem_block, GDestroyNotify clear_func)
     * }
     */
    public static void g_atomic_rc_box_release_full(MemorySegment mem_block, MemorySegment clear_func) {
        var mh$ = g_atomic_rc_box_release_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_rc_box_release_full", mem_block, clear_func);
            }
            mh$.invokeExact(mem_block, clear_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_rc_box_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_rc_box_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_atomic_rc_box_get_size(gpointer mem_block)
     * }
     */
    public static FunctionDescriptor g_atomic_rc_box_get_size$descriptor() {
        return g_atomic_rc_box_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_atomic_rc_box_get_size(gpointer mem_block)
     * }
     */
    public static MethodHandle g_atomic_rc_box_get_size$handle() {
        return g_atomic_rc_box_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_atomic_rc_box_get_size(gpointer mem_block)
     * }
     */
    public static long g_atomic_rc_box_get_size(MemorySegment mem_block) {
        var mh$ = g_atomic_rc_box_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_rc_box_get_size", mem_block);
            }
            return (long)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ref_count_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ref_count_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ref_count_init(grefcount *rc)
     * }
     */
    public static FunctionDescriptor g_ref_count_init$descriptor() {
        return g_ref_count_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ref_count_init(grefcount *rc)
     * }
     */
    public static MethodHandle g_ref_count_init$handle() {
        return g_ref_count_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ref_count_init(grefcount *rc)
     * }
     */
    public static void g_ref_count_init(MemorySegment rc) {
        var mh$ = g_ref_count_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ref_count_init", rc);
            }
            mh$.invokeExact(rc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ref_count_inc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ref_count_inc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ref_count_inc(grefcount *rc)
     * }
     */
    public static FunctionDescriptor g_ref_count_inc$descriptor() {
        return g_ref_count_inc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ref_count_inc(grefcount *rc)
     * }
     */
    public static MethodHandle g_ref_count_inc$handle() {
        return g_ref_count_inc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ref_count_inc(grefcount *rc)
     * }
     */
    public static void g_ref_count_inc(MemorySegment rc) {
        var mh$ = g_ref_count_inc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ref_count_inc", rc);
            }
            mh$.invokeExact(rc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ref_count_dec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ref_count_dec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_ref_count_dec(grefcount *rc)
     * }
     */
    public static FunctionDescriptor g_ref_count_dec$descriptor() {
        return g_ref_count_dec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_ref_count_dec(grefcount *rc)
     * }
     */
    public static MethodHandle g_ref_count_dec$handle() {
        return g_ref_count_dec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_ref_count_dec(grefcount *rc)
     * }
     */
    public static int g_ref_count_dec(MemorySegment rc) {
        var mh$ = g_ref_count_dec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ref_count_dec", rc);
            }
            return (int)mh$.invokeExact(rc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ref_count_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ref_count_compare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_ref_count_compare(grefcount *rc, gint val)
     * }
     */
    public static FunctionDescriptor g_ref_count_compare$descriptor() {
        return g_ref_count_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_ref_count_compare(grefcount *rc, gint val)
     * }
     */
    public static MethodHandle g_ref_count_compare$handle() {
        return g_ref_count_compare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_ref_count_compare(grefcount *rc, gint val)
     * }
     */
    public static int g_ref_count_compare(MemorySegment rc, int val) {
        var mh$ = g_ref_count_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ref_count_compare", rc, val);
            }
            return (int)mh$.invokeExact(rc, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_ref_count_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_ref_count_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_atomic_ref_count_init(gatomicrefcount *arc)
     * }
     */
    public static FunctionDescriptor g_atomic_ref_count_init$descriptor() {
        return g_atomic_ref_count_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_atomic_ref_count_init(gatomicrefcount *arc)
     * }
     */
    public static MethodHandle g_atomic_ref_count_init$handle() {
        return g_atomic_ref_count_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_atomic_ref_count_init(gatomicrefcount *arc)
     * }
     */
    public static void g_atomic_ref_count_init(MemorySegment arc) {
        var mh$ = g_atomic_ref_count_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_ref_count_init", arc);
            }
            mh$.invokeExact(arc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_ref_count_inc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_ref_count_inc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_atomic_ref_count_inc(gatomicrefcount *arc)
     * }
     */
    public static FunctionDescriptor g_atomic_ref_count_inc$descriptor() {
        return g_atomic_ref_count_inc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_atomic_ref_count_inc(gatomicrefcount *arc)
     * }
     */
    public static MethodHandle g_atomic_ref_count_inc$handle() {
        return g_atomic_ref_count_inc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_atomic_ref_count_inc(gatomicrefcount *arc)
     * }
     */
    public static void g_atomic_ref_count_inc(MemorySegment arc) {
        var mh$ = g_atomic_ref_count_inc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_ref_count_inc", arc);
            }
            mh$.invokeExact(arc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_ref_count_dec {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_ref_count_dec"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_ref_count_dec(gatomicrefcount *arc)
     * }
     */
    public static FunctionDescriptor g_atomic_ref_count_dec$descriptor() {
        return g_atomic_ref_count_dec.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_ref_count_dec(gatomicrefcount *arc)
     * }
     */
    public static MethodHandle g_atomic_ref_count_dec$handle() {
        return g_atomic_ref_count_dec.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_atomic_ref_count_dec(gatomicrefcount *arc)
     * }
     */
    public static int g_atomic_ref_count_dec(MemorySegment arc) {
        var mh$ = g_atomic_ref_count_dec.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_ref_count_dec", arc);
            }
            return (int)mh$.invokeExact(arc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_atomic_ref_count_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_atomic_ref_count_compare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_ref_count_compare(gatomicrefcount *arc, gint val)
     * }
     */
    public static FunctionDescriptor g_atomic_ref_count_compare$descriptor() {
        return g_atomic_ref_count_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_atomic_ref_count_compare(gatomicrefcount *arc, gint val)
     * }
     */
    public static MethodHandle g_atomic_ref_count_compare$handle() {
        return g_atomic_ref_count_compare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_atomic_ref_count_compare(gatomicrefcount *arc, gint val)
     * }
     */
    public static int g_atomic_ref_count_compare(MemorySegment arc, int val) {
        var mh$ = g_atomic_ref_count_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_atomic_ref_count_compare", arc, val);
            }
            return (int)mh$.invokeExact(arc, val);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ref_string_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ref_string_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_ref_string_new(const char *str)
     * }
     */
    public static FunctionDescriptor g_ref_string_new$descriptor() {
        return g_ref_string_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_ref_string_new(const char *str)
     * }
     */
    public static MethodHandle g_ref_string_new$handle() {
        return g_ref_string_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_ref_string_new(const char *str)
     * }
     */
    public static MemorySegment g_ref_string_new(MemorySegment str) {
        var mh$ = g_ref_string_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ref_string_new", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ref_string_new_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ref_string_new_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_ref_string_new_len(const char *str, gssize len)
     * }
     */
    public static FunctionDescriptor g_ref_string_new_len$descriptor() {
        return g_ref_string_new_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_ref_string_new_len(const char *str, gssize len)
     * }
     */
    public static MethodHandle g_ref_string_new_len$handle() {
        return g_ref_string_new_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_ref_string_new_len(const char *str, gssize len)
     * }
     */
    public static MemorySegment g_ref_string_new_len(MemorySegment str, long len) {
        var mh$ = g_ref_string_new_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ref_string_new_len", str, len);
            }
            return (MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ref_string_new_intern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ref_string_new_intern"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_ref_string_new_intern(const char *str)
     * }
     */
    public static FunctionDescriptor g_ref_string_new_intern$descriptor() {
        return g_ref_string_new_intern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_ref_string_new_intern(const char *str)
     * }
     */
    public static MethodHandle g_ref_string_new_intern$handle() {
        return g_ref_string_new_intern.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_ref_string_new_intern(const char *str)
     * }
     */
    public static MemorySegment g_ref_string_new_intern(MemorySegment str) {
        var mh$ = g_ref_string_new_intern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ref_string_new_intern", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ref_string_acquire {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ref_string_acquire"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_ref_string_acquire(char *str)
     * }
     */
    public static FunctionDescriptor g_ref_string_acquire$descriptor() {
        return g_ref_string_acquire.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_ref_string_acquire(char *str)
     * }
     */
    public static MethodHandle g_ref_string_acquire$handle() {
        return g_ref_string_acquire.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_ref_string_acquire(char *str)
     * }
     */
    public static MemorySegment g_ref_string_acquire(MemorySegment str) {
        var mh$ = g_ref_string_acquire.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ref_string_acquire", str);
            }
            return (MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ref_string_release {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ref_string_release"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_ref_string_release(char *str)
     * }
     */
    public static FunctionDescriptor g_ref_string_release$descriptor() {
        return g_ref_string_release.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_ref_string_release(char *str)
     * }
     */
    public static MethodHandle g_ref_string_release$handle() {
        return g_ref_string_release.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_ref_string_release(char *str)
     * }
     */
    public static void g_ref_string_release(MemorySegment str) {
        var mh$ = g_ref_string_release.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ref_string_release", str);
            }
            mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_ref_string_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_ref_string_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gsize g_ref_string_length(char *str)
     * }
     */
    public static FunctionDescriptor g_ref_string_length$descriptor() {
        return g_ref_string_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gsize g_ref_string_length(char *str)
     * }
     */
    public static MethodHandle g_ref_string_length$handle() {
        return g_ref_string_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gsize g_ref_string_length(char *str)
     * }
     */
    public static long g_ref_string_length(MemorySegment str) {
        var mh$ = g_ref_string_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_ref_string_length", str);
            }
            return (long)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef char GRefString
     * }
     */
    public static final OfByte GRefString = app_indicator_h.C_CHAR;
    private static final int G_REGEX_ERROR_COMPILE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_COMPILE = 0
     * }
     */
    public static int G_REGEX_ERROR_COMPILE() {
        return G_REGEX_ERROR_COMPILE;
    }
    private static final int G_REGEX_ERROR_OPTIMIZE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_OPTIMIZE = 1
     * }
     */
    public static int G_REGEX_ERROR_OPTIMIZE() {
        return G_REGEX_ERROR_OPTIMIZE;
    }
    private static final int G_REGEX_ERROR_REPLACE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_REPLACE = 2
     * }
     */
    public static int G_REGEX_ERROR_REPLACE() {
        return G_REGEX_ERROR_REPLACE;
    }
    private static final int G_REGEX_ERROR_MATCH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_MATCH = 3
     * }
     */
    public static int G_REGEX_ERROR_MATCH() {
        return G_REGEX_ERROR_MATCH;
    }
    private static final int G_REGEX_ERROR_INTERNAL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_INTERNAL = 4
     * }
     */
    public static int G_REGEX_ERROR_INTERNAL() {
        return G_REGEX_ERROR_INTERNAL;
    }
    private static final int G_REGEX_ERROR_STRAY_BACKSLASH = (int)101L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_STRAY_BACKSLASH = 101
     * }
     */
    public static int G_REGEX_ERROR_STRAY_BACKSLASH() {
        return G_REGEX_ERROR_STRAY_BACKSLASH;
    }
    private static final int G_REGEX_ERROR_MISSING_CONTROL_CHAR = (int)102L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102
     * }
     */
    public static int G_REGEX_ERROR_MISSING_CONTROL_CHAR() {
        return G_REGEX_ERROR_MISSING_CONTROL_CHAR;
    }
    private static final int G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = (int)103L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103
     * }
     */
    public static int G_REGEX_ERROR_UNRECOGNIZED_ESCAPE() {
        return G_REGEX_ERROR_UNRECOGNIZED_ESCAPE;
    }
    private static final int G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = (int)104L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104
     * }
     */
    public static int G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER() {
        return G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER;
    }
    private static final int G_REGEX_ERROR_QUANTIFIER_TOO_BIG = (int)105L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105
     * }
     */
    public static int G_REGEX_ERROR_QUANTIFIER_TOO_BIG() {
        return G_REGEX_ERROR_QUANTIFIER_TOO_BIG;
    }
    private static final int G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = (int)106L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106
     * }
     */
    public static int G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS() {
        return G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS;
    }
    private static final int G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = (int)107L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107
     * }
     */
    public static int G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS() {
        return G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS;
    }
    private static final int G_REGEX_ERROR_RANGE_OUT_OF_ORDER = (int)108L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108
     * }
     */
    public static int G_REGEX_ERROR_RANGE_OUT_OF_ORDER() {
        return G_REGEX_ERROR_RANGE_OUT_OF_ORDER;
    }
    private static final int G_REGEX_ERROR_NOTHING_TO_REPEAT = (int)109L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_NOTHING_TO_REPEAT = 109
     * }
     */
    public static int G_REGEX_ERROR_NOTHING_TO_REPEAT() {
        return G_REGEX_ERROR_NOTHING_TO_REPEAT;
    }
    private static final int G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = (int)112L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112
     * }
     */
    public static int G_REGEX_ERROR_UNRECOGNIZED_CHARACTER() {
        return G_REGEX_ERROR_UNRECOGNIZED_CHARACTER;
    }
    private static final int G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = (int)113L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113
     * }
     */
    public static int G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS() {
        return G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS;
    }
    private static final int G_REGEX_ERROR_UNMATCHED_PARENTHESIS = (int)114L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114
     * }
     */
    public static int G_REGEX_ERROR_UNMATCHED_PARENTHESIS() {
        return G_REGEX_ERROR_UNMATCHED_PARENTHESIS;
    }
    private static final int G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = (int)115L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115
     * }
     */
    public static int G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE() {
        return G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE;
    }
    private static final int G_REGEX_ERROR_UNTERMINATED_COMMENT = (int)118L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_UNTERMINATED_COMMENT = 118
     * }
     */
    public static int G_REGEX_ERROR_UNTERMINATED_COMMENT() {
        return G_REGEX_ERROR_UNTERMINATED_COMMENT;
    }
    private static final int G_REGEX_ERROR_EXPRESSION_TOO_LARGE = (int)120L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120
     * }
     */
    public static int G_REGEX_ERROR_EXPRESSION_TOO_LARGE() {
        return G_REGEX_ERROR_EXPRESSION_TOO_LARGE;
    }
    private static final int G_REGEX_ERROR_MEMORY_ERROR = (int)121L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_MEMORY_ERROR = 121
     * }
     */
    public static int G_REGEX_ERROR_MEMORY_ERROR() {
        return G_REGEX_ERROR_MEMORY_ERROR;
    }
    private static final int G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = (int)125L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125
     * }
     */
    public static int G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND() {
        return G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND;
    }
    private static final int G_REGEX_ERROR_MALFORMED_CONDITION = (int)126L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_MALFORMED_CONDITION = 126
     * }
     */
    public static int G_REGEX_ERROR_MALFORMED_CONDITION() {
        return G_REGEX_ERROR_MALFORMED_CONDITION;
    }
    private static final int G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = (int)127L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127
     * }
     */
    public static int G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES() {
        return G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES;
    }
    private static final int G_REGEX_ERROR_ASSERTION_EXPECTED = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_ASSERTION_EXPECTED = 128
     * }
     */
    public static int G_REGEX_ERROR_ASSERTION_EXPECTED() {
        return G_REGEX_ERROR_ASSERTION_EXPECTED;
    }
    private static final int G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = (int)130L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130
     * }
     */
    public static int G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME() {
        return G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME;
    }
    private static final int G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = (int)131L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131
     * }
     */
    public static int G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED() {
        return G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED;
    }
    private static final int G_REGEX_ERROR_HEX_CODE_TOO_LARGE = (int)134L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134
     * }
     */
    public static int G_REGEX_ERROR_HEX_CODE_TOO_LARGE() {
        return G_REGEX_ERROR_HEX_CODE_TOO_LARGE;
    }
    private static final int G_REGEX_ERROR_INVALID_CONDITION = (int)135L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_INVALID_CONDITION = 135
     * }
     */
    public static int G_REGEX_ERROR_INVALID_CONDITION() {
        return G_REGEX_ERROR_INVALID_CONDITION;
    }
    private static final int G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = (int)136L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136
     * }
     */
    public static int G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND() {
        return G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND;
    }
    private static final int G_REGEX_ERROR_INFINITE_LOOP = (int)140L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_INFINITE_LOOP = 140
     * }
     */
    public static int G_REGEX_ERROR_INFINITE_LOOP() {
        return G_REGEX_ERROR_INFINITE_LOOP;
    }
    private static final int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = (int)142L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142
     * }
     */
    public static int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR() {
        return G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR;
    }
    private static final int G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = (int)143L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143
     * }
     */
    public static int G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME() {
        return G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME;
    }
    private static final int G_REGEX_ERROR_MALFORMED_PROPERTY = (int)146L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_MALFORMED_PROPERTY = 146
     * }
     */
    public static int G_REGEX_ERROR_MALFORMED_PROPERTY() {
        return G_REGEX_ERROR_MALFORMED_PROPERTY;
    }
    private static final int G_REGEX_ERROR_UNKNOWN_PROPERTY = (int)147L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_UNKNOWN_PROPERTY = 147
     * }
     */
    public static int G_REGEX_ERROR_UNKNOWN_PROPERTY() {
        return G_REGEX_ERROR_UNKNOWN_PROPERTY;
    }
    private static final int G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = (int)148L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148
     * }
     */
    public static int G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG() {
        return G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG;
    }
    private static final int G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = (int)149L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149
     * }
     */
    public static int G_REGEX_ERROR_TOO_MANY_SUBPATTERNS() {
        return G_REGEX_ERROR_TOO_MANY_SUBPATTERNS;
    }
    private static final int G_REGEX_ERROR_INVALID_OCTAL_VALUE = (int)151L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151
     * }
     */
    public static int G_REGEX_ERROR_INVALID_OCTAL_VALUE() {
        return G_REGEX_ERROR_INVALID_OCTAL_VALUE;
    }
    private static final int G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = (int)154L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154
     * }
     */
    public static int G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE() {
        return G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE;
    }
    private static final int G_REGEX_ERROR_DEFINE_REPETION = (int)155L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_DEFINE_REPETION = 155
     * }
     */
    public static int G_REGEX_ERROR_DEFINE_REPETION() {
        return G_REGEX_ERROR_DEFINE_REPETION;
    }
    private static final int G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = (int)156L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156
     * }
     */
    public static int G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS() {
        return G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS;
    }
    private static final int G_REGEX_ERROR_MISSING_BACK_REFERENCE = (int)157L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157
     * }
     */
    public static int G_REGEX_ERROR_MISSING_BACK_REFERENCE() {
        return G_REGEX_ERROR_MISSING_BACK_REFERENCE;
    }
    private static final int G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = (int)158L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158
     * }
     */
    public static int G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE() {
        return G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE;
    }
    private static final int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = (int)159L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159
     * }
     */
    public static int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN() {
        return G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN;
    }
    private static final int G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = (int)160L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160
     * }
     */
    public static int G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB() {
        return G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB;
    }
    private static final int G_REGEX_ERROR_NUMBER_TOO_BIG = (int)161L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_NUMBER_TOO_BIG = 161
     * }
     */
    public static int G_REGEX_ERROR_NUMBER_TOO_BIG() {
        return G_REGEX_ERROR_NUMBER_TOO_BIG;
    }
    private static final int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = (int)162L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162
     * }
     */
    public static int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME() {
        return G_REGEX_ERROR_MISSING_SUBPATTERN_NAME;
    }
    private static final int G_REGEX_ERROR_MISSING_DIGIT = (int)163L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_MISSING_DIGIT = 163
     * }
     */
    public static int G_REGEX_ERROR_MISSING_DIGIT() {
        return G_REGEX_ERROR_MISSING_DIGIT;
    }
    private static final int G_REGEX_ERROR_INVALID_DATA_CHARACTER = (int)164L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164
     * }
     */
    public static int G_REGEX_ERROR_INVALID_DATA_CHARACTER() {
        return G_REGEX_ERROR_INVALID_DATA_CHARACTER;
    }
    private static final int G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = (int)165L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165
     * }
     */
    public static int G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME() {
        return G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME;
    }
    private static final int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = (int)166L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166
     * }
     */
    public static int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED() {
        return G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED;
    }
    private static final int G_REGEX_ERROR_INVALID_CONTROL_CHAR = (int)168L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168
     * }
     */
    public static int G_REGEX_ERROR_INVALID_CONTROL_CHAR() {
        return G_REGEX_ERROR_INVALID_CONTROL_CHAR;
    }
    private static final int G_REGEX_ERROR_MISSING_NAME = (int)169L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_MISSING_NAME = 169
     * }
     */
    public static int G_REGEX_ERROR_MISSING_NAME() {
        return G_REGEX_ERROR_MISSING_NAME;
    }
    private static final int G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = (int)171L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171
     * }
     */
    public static int G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS() {
        return G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS;
    }
    private static final int G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = (int)172L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172
     * }
     */
    public static int G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES() {
        return G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES;
    }
    private static final int G_REGEX_ERROR_NAME_TOO_LONG = (int)175L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_NAME_TOO_LONG = 175
     * }
     */
    public static int G_REGEX_ERROR_NAME_TOO_LONG() {
        return G_REGEX_ERROR_NAME_TOO_LONG;
    }
    private static final int G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = (int)176L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176
     * }
     */
    public static int G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE() {
        return G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE;
    }

    private static class g_regex_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_regex_error_quark()
     * }
     */
    public static FunctionDescriptor g_regex_error_quark$descriptor() {
        return g_regex_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_regex_error_quark()
     * }
     */
    public static MethodHandle g_regex_error_quark$handle() {
        return g_regex_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_regex_error_quark()
     * }
     */
    public static int g_regex_error_quark() {
        var mh$ = g_regex_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_REGEX_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_DEFAULT = 0
     * }
     */
    public static int G_REGEX_DEFAULT() {
        return G_REGEX_DEFAULT;
    }
    private static final int G_REGEX_CASELESS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_CASELESS = 1
     * }
     */
    public static int G_REGEX_CASELESS() {
        return G_REGEX_CASELESS;
    }
    private static final int G_REGEX_MULTILINE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MULTILINE = 2
     * }
     */
    public static int G_REGEX_MULTILINE() {
        return G_REGEX_MULTILINE;
    }
    private static final int G_REGEX_DOTALL = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_DOTALL = 4
     * }
     */
    public static int G_REGEX_DOTALL() {
        return G_REGEX_DOTALL;
    }
    private static final int G_REGEX_EXTENDED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_EXTENDED = 8
     * }
     */
    public static int G_REGEX_EXTENDED() {
        return G_REGEX_EXTENDED;
    }
    private static final int G_REGEX_ANCHORED = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_ANCHORED = 16
     * }
     */
    public static int G_REGEX_ANCHORED() {
        return G_REGEX_ANCHORED;
    }
    private static final int G_REGEX_DOLLAR_ENDONLY = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_DOLLAR_ENDONLY = 32
     * }
     */
    public static int G_REGEX_DOLLAR_ENDONLY() {
        return G_REGEX_DOLLAR_ENDONLY;
    }
    private static final int G_REGEX_UNGREEDY = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_UNGREEDY = 512
     * }
     */
    public static int G_REGEX_UNGREEDY() {
        return G_REGEX_UNGREEDY;
    }
    private static final int G_REGEX_RAW = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_RAW = 2048
     * }
     */
    public static int G_REGEX_RAW() {
        return G_REGEX_RAW;
    }
    private static final int G_REGEX_NO_AUTO_CAPTURE = (int)4096L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_NO_AUTO_CAPTURE = 4096
     * }
     */
    public static int G_REGEX_NO_AUTO_CAPTURE() {
        return G_REGEX_NO_AUTO_CAPTURE;
    }
    private static final int G_REGEX_OPTIMIZE = (int)8192L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_OPTIMIZE = 8192
     * }
     */
    public static int G_REGEX_OPTIMIZE() {
        return G_REGEX_OPTIMIZE;
    }
    private static final int G_REGEX_FIRSTLINE = (int)262144L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_FIRSTLINE = 262144
     * }
     */
    public static int G_REGEX_FIRSTLINE() {
        return G_REGEX_FIRSTLINE;
    }
    private static final int G_REGEX_DUPNAMES = (int)524288L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_DUPNAMES = 524288
     * }
     */
    public static int G_REGEX_DUPNAMES() {
        return G_REGEX_DUPNAMES;
    }
    private static final int G_REGEX_NEWLINE_CR = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_NEWLINE_CR = 1048576
     * }
     */
    public static int G_REGEX_NEWLINE_CR() {
        return G_REGEX_NEWLINE_CR;
    }
    private static final int G_REGEX_NEWLINE_LF = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_NEWLINE_LF = 2097152
     * }
     */
    public static int G_REGEX_NEWLINE_LF() {
        return G_REGEX_NEWLINE_LF;
    }
    private static final int G_REGEX_NEWLINE_CRLF = (int)3145728L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_NEWLINE_CRLF = 3145728
     * }
     */
    public static int G_REGEX_NEWLINE_CRLF() {
        return G_REGEX_NEWLINE_CRLF;
    }
    private static final int G_REGEX_NEWLINE_ANYCRLF = (int)5242880L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_NEWLINE_ANYCRLF = 5242880
     * }
     */
    public static int G_REGEX_NEWLINE_ANYCRLF() {
        return G_REGEX_NEWLINE_ANYCRLF;
    }
    private static final int G_REGEX_BSR_ANYCRLF = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_BSR_ANYCRLF = 8388608
     * }
     */
    public static int G_REGEX_BSR_ANYCRLF() {
        return G_REGEX_BSR_ANYCRLF;
    }
    private static final int G_REGEX_JAVASCRIPT_COMPAT = (int)33554432L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_JAVASCRIPT_COMPAT = 33554432
     * }
     */
    public static int G_REGEX_JAVASCRIPT_COMPAT() {
        return G_REGEX_JAVASCRIPT_COMPAT;
    }
    private static final int G_REGEX_MATCH_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_DEFAULT = 0
     * }
     */
    public static int G_REGEX_MATCH_DEFAULT() {
        return G_REGEX_MATCH_DEFAULT;
    }
    private static final int G_REGEX_MATCH_ANCHORED = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_ANCHORED = 16
     * }
     */
    public static int G_REGEX_MATCH_ANCHORED() {
        return G_REGEX_MATCH_ANCHORED;
    }
    private static final int G_REGEX_MATCH_NOTBOL = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_NOTBOL = 128
     * }
     */
    public static int G_REGEX_MATCH_NOTBOL() {
        return G_REGEX_MATCH_NOTBOL;
    }
    private static final int G_REGEX_MATCH_NOTEOL = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_NOTEOL = 256
     * }
     */
    public static int G_REGEX_MATCH_NOTEOL() {
        return G_REGEX_MATCH_NOTEOL;
    }
    private static final int G_REGEX_MATCH_NOTEMPTY = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_NOTEMPTY = 1024
     * }
     */
    public static int G_REGEX_MATCH_NOTEMPTY() {
        return G_REGEX_MATCH_NOTEMPTY;
    }
    private static final int G_REGEX_MATCH_PARTIAL = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_PARTIAL = 32768
     * }
     */
    public static int G_REGEX_MATCH_PARTIAL() {
        return G_REGEX_MATCH_PARTIAL;
    }
    private static final int G_REGEX_MATCH_NEWLINE_CR = (int)1048576L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_NEWLINE_CR = 1048576
     * }
     */
    public static int G_REGEX_MATCH_NEWLINE_CR() {
        return G_REGEX_MATCH_NEWLINE_CR;
    }
    private static final int G_REGEX_MATCH_NEWLINE_LF = (int)2097152L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_NEWLINE_LF = 2097152
     * }
     */
    public static int G_REGEX_MATCH_NEWLINE_LF() {
        return G_REGEX_MATCH_NEWLINE_LF;
    }
    private static final int G_REGEX_MATCH_NEWLINE_CRLF = (int)3145728L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_NEWLINE_CRLF = 3145728
     * }
     */
    public static int G_REGEX_MATCH_NEWLINE_CRLF() {
        return G_REGEX_MATCH_NEWLINE_CRLF;
    }
    private static final int G_REGEX_MATCH_NEWLINE_ANY = (int)4194304L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_NEWLINE_ANY = 4194304
     * }
     */
    public static int G_REGEX_MATCH_NEWLINE_ANY() {
        return G_REGEX_MATCH_NEWLINE_ANY;
    }
    private static final int G_REGEX_MATCH_NEWLINE_ANYCRLF = (int)5242880L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_NEWLINE_ANYCRLF = 5242880
     * }
     */
    public static int G_REGEX_MATCH_NEWLINE_ANYCRLF() {
        return G_REGEX_MATCH_NEWLINE_ANYCRLF;
    }
    private static final int G_REGEX_MATCH_BSR_ANYCRLF = (int)8388608L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_BSR_ANYCRLF = 8388608
     * }
     */
    public static int G_REGEX_MATCH_BSR_ANYCRLF() {
        return G_REGEX_MATCH_BSR_ANYCRLF;
    }
    private static final int G_REGEX_MATCH_BSR_ANY = (int)16777216L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_BSR_ANY = 16777216
     * }
     */
    public static int G_REGEX_MATCH_BSR_ANY() {
        return G_REGEX_MATCH_BSR_ANY;
    }
    private static final int G_REGEX_MATCH_PARTIAL_SOFT = (int)32768L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_PARTIAL_SOFT = 32768
     * }
     */
    public static int G_REGEX_MATCH_PARTIAL_SOFT() {
        return G_REGEX_MATCH_PARTIAL_SOFT;
    }
    private static final int G_REGEX_MATCH_PARTIAL_HARD = (int)134217728L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_PARTIAL_HARD = 134217728
     * }
     */
    public static int G_REGEX_MATCH_PARTIAL_HARD() {
        return G_REGEX_MATCH_PARTIAL_HARD;
    }
    private static final int G_REGEX_MATCH_NOTEMPTY_ATSTART = (int)268435456L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_REGEX_MATCH_NOTEMPTY_ATSTART = 268435456
     * }
     */
    public static int G_REGEX_MATCH_NOTEMPTY_ATSTART() {
        return G_REGEX_MATCH_NOTEMPTY_ATSTART;
    }

    private static class g_regex_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GRegex *g_regex_new(const gchar *pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, GError **error)
     * }
     */
    public static FunctionDescriptor g_regex_new$descriptor() {
        return g_regex_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GRegex *g_regex_new(const gchar *pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, GError **error)
     * }
     */
    public static MethodHandle g_regex_new$handle() {
        return g_regex_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GRegex *g_regex_new(const gchar *pattern, GRegexCompileFlags compile_options, GRegexMatchFlags match_options, GError **error)
     * }
     */
    public static MemorySegment g_regex_new(MemorySegment pattern, int compile_options, int match_options, MemorySegment error) {
        var mh$ = g_regex_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_new", pattern, compile_options, match_options, error);
            }
            return (MemorySegment)mh$.invokeExact(pattern, compile_options, match_options, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GRegex *g_regex_ref(GRegex *regex)
     * }
     */
    public static FunctionDescriptor g_regex_ref$descriptor() {
        return g_regex_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GRegex *g_regex_ref(GRegex *regex)
     * }
     */
    public static MethodHandle g_regex_ref$handle() {
        return g_regex_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GRegex *g_regex_ref(GRegex *regex)
     * }
     */
    public static MemorySegment g_regex_ref(MemorySegment regex) {
        var mh$ = g_regex_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_ref", regex);
            }
            return (MemorySegment)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_regex_unref(GRegex *regex)
     * }
     */
    public static FunctionDescriptor g_regex_unref$descriptor() {
        return g_regex_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_regex_unref(GRegex *regex)
     * }
     */
    public static MethodHandle g_regex_unref$handle() {
        return g_regex_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_regex_unref(GRegex *regex)
     * }
     */
    public static void g_regex_unref(MemorySegment regex) {
        var mh$ = g_regex_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_unref", regex);
            }
            mh$.invokeExact(regex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_get_pattern {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_get_pattern"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_regex_get_pattern(const GRegex *regex)
     * }
     */
    public static FunctionDescriptor g_regex_get_pattern$descriptor() {
        return g_regex_get_pattern.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_regex_get_pattern(const GRegex *regex)
     * }
     */
    public static MethodHandle g_regex_get_pattern$handle() {
        return g_regex_get_pattern.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_regex_get_pattern(const GRegex *regex)
     * }
     */
    public static MemorySegment g_regex_get_pattern(MemorySegment regex) {
        var mh$ = g_regex_get_pattern.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_get_pattern", regex);
            }
            return (MemorySegment)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_get_max_backref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_get_max_backref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_regex_get_max_backref(const GRegex *regex)
     * }
     */
    public static FunctionDescriptor g_regex_get_max_backref$descriptor() {
        return g_regex_get_max_backref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_regex_get_max_backref(const GRegex *regex)
     * }
     */
    public static MethodHandle g_regex_get_max_backref$handle() {
        return g_regex_get_max_backref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_regex_get_max_backref(const GRegex *regex)
     * }
     */
    public static int g_regex_get_max_backref(MemorySegment regex) {
        var mh$ = g_regex_get_max_backref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_get_max_backref", regex);
            }
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_get_capture_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_get_capture_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_regex_get_capture_count(const GRegex *regex)
     * }
     */
    public static FunctionDescriptor g_regex_get_capture_count$descriptor() {
        return g_regex_get_capture_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_regex_get_capture_count(const GRegex *regex)
     * }
     */
    public static MethodHandle g_regex_get_capture_count$handle() {
        return g_regex_get_capture_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_regex_get_capture_count(const GRegex *regex)
     * }
     */
    public static int g_regex_get_capture_count(MemorySegment regex) {
        var mh$ = g_regex_get_capture_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_get_capture_count", regex);
            }
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_get_has_cr_or_lf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_get_has_cr_or_lf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_regex_get_has_cr_or_lf(const GRegex *regex)
     * }
     */
    public static FunctionDescriptor g_regex_get_has_cr_or_lf$descriptor() {
        return g_regex_get_has_cr_or_lf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_regex_get_has_cr_or_lf(const GRegex *regex)
     * }
     */
    public static MethodHandle g_regex_get_has_cr_or_lf$handle() {
        return g_regex_get_has_cr_or_lf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_regex_get_has_cr_or_lf(const GRegex *regex)
     * }
     */
    public static int g_regex_get_has_cr_or_lf(MemorySegment regex) {
        var mh$ = g_regex_get_has_cr_or_lf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_get_has_cr_or_lf", regex);
            }
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_get_max_lookbehind {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_get_max_lookbehind"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_regex_get_max_lookbehind(const GRegex *regex)
     * }
     */
    public static FunctionDescriptor g_regex_get_max_lookbehind$descriptor() {
        return g_regex_get_max_lookbehind.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_regex_get_max_lookbehind(const GRegex *regex)
     * }
     */
    public static MethodHandle g_regex_get_max_lookbehind$handle() {
        return g_regex_get_max_lookbehind.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_regex_get_max_lookbehind(const GRegex *regex)
     * }
     */
    public static int g_regex_get_max_lookbehind(MemorySegment regex) {
        var mh$ = g_regex_get_max_lookbehind.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_get_max_lookbehind", regex);
            }
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_get_string_number {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_get_string_number"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_regex_get_string_number(const GRegex *regex, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_regex_get_string_number$descriptor() {
        return g_regex_get_string_number.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_regex_get_string_number(const GRegex *regex, const gchar *name)
     * }
     */
    public static MethodHandle g_regex_get_string_number$handle() {
        return g_regex_get_string_number.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_regex_get_string_number(const GRegex *regex, const gchar *name)
     * }
     */
    public static int g_regex_get_string_number(MemorySegment regex, MemorySegment name) {
        var mh$ = g_regex_get_string_number.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_get_string_number", regex, name);
            }
            return (int)mh$.invokeExact(regex, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_escape_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_escape_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_regex_escape_string(const gchar *string, gint length)
     * }
     */
    public static FunctionDescriptor g_regex_escape_string$descriptor() {
        return g_regex_escape_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_regex_escape_string(const gchar *string, gint length)
     * }
     */
    public static MethodHandle g_regex_escape_string$handle() {
        return g_regex_escape_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_regex_escape_string(const gchar *string, gint length)
     * }
     */
    public static MemorySegment g_regex_escape_string(MemorySegment string, int length) {
        var mh$ = g_regex_escape_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_escape_string", string, length);
            }
            return (MemorySegment)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_escape_nul {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_escape_nul"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_regex_escape_nul(const gchar *string, gint length)
     * }
     */
    public static FunctionDescriptor g_regex_escape_nul$descriptor() {
        return g_regex_escape_nul.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_regex_escape_nul(const gchar *string, gint length)
     * }
     */
    public static MethodHandle g_regex_escape_nul$handle() {
        return g_regex_escape_nul.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_regex_escape_nul(const gchar *string, gint length)
     * }
     */
    public static MemorySegment g_regex_escape_nul(MemorySegment string, int length) {
        var mh$ = g_regex_escape_nul.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_escape_nul", string, length);
            }
            return (MemorySegment)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_get_compile_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_get_compile_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GRegexCompileFlags g_regex_get_compile_flags(const GRegex *regex)
     * }
     */
    public static FunctionDescriptor g_regex_get_compile_flags$descriptor() {
        return g_regex_get_compile_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GRegexCompileFlags g_regex_get_compile_flags(const GRegex *regex)
     * }
     */
    public static MethodHandle g_regex_get_compile_flags$handle() {
        return g_regex_get_compile_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GRegexCompileFlags g_regex_get_compile_flags(const GRegex *regex)
     * }
     */
    public static int g_regex_get_compile_flags(MemorySegment regex) {
        var mh$ = g_regex_get_compile_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_get_compile_flags", regex);
            }
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_get_match_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_get_match_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GRegexMatchFlags g_regex_get_match_flags(const GRegex *regex)
     * }
     */
    public static FunctionDescriptor g_regex_get_match_flags$descriptor() {
        return g_regex_get_match_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GRegexMatchFlags g_regex_get_match_flags(const GRegex *regex)
     * }
     */
    public static MethodHandle g_regex_get_match_flags$handle() {
        return g_regex_get_match_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GRegexMatchFlags g_regex_get_match_flags(const GRegex *regex)
     * }
     */
    public static int g_regex_get_match_flags(MemorySegment regex) {
        var mh$ = g_regex_get_match_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_get_match_flags", regex);
            }
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_match_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_match_simple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_regex_match_simple(const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options)
     * }
     */
    public static FunctionDescriptor g_regex_match_simple$descriptor() {
        return g_regex_match_simple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_regex_match_simple(const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options)
     * }
     */
    public static MethodHandle g_regex_match_simple$handle() {
        return g_regex_match_simple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_regex_match_simple(const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options)
     * }
     */
    public static int g_regex_match_simple(MemorySegment pattern, MemorySegment string, int compile_options, int match_options) {
        var mh$ = g_regex_match_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_match_simple", pattern, string, compile_options, match_options);
            }
            return (int)mh$.invokeExact(pattern, string, compile_options, match_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_match"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_regex_match(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info)
     * }
     */
    public static FunctionDescriptor g_regex_match$descriptor() {
        return g_regex_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_regex_match(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info)
     * }
     */
    public static MethodHandle g_regex_match$handle() {
        return g_regex_match.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_regex_match(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info)
     * }
     */
    public static int g_regex_match(MemorySegment regex, MemorySegment string, int match_options, MemorySegment match_info) {
        var mh$ = g_regex_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_match", regex, string, match_options, match_info);
            }
            return (int)mh$.invokeExact(regex, string, match_options, match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_match_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_match_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_regex_match_full(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error)
     * }
     */
    public static FunctionDescriptor g_regex_match_full$descriptor() {
        return g_regex_match_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_regex_match_full(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error)
     * }
     */
    public static MethodHandle g_regex_match_full$handle() {
        return g_regex_match_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_regex_match_full(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error)
     * }
     */
    public static int g_regex_match_full(MemorySegment regex, MemorySegment string, long string_len, int start_position, int match_options, MemorySegment match_info, MemorySegment error) {
        var mh$ = g_regex_match_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_match_full", regex, string, string_len, start_position, match_options, match_info, error);
            }
            return (int)mh$.invokeExact(regex, string, string_len, start_position, match_options, match_info, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_match_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_match_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_regex_match_all(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info)
     * }
     */
    public static FunctionDescriptor g_regex_match_all$descriptor() {
        return g_regex_match_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_regex_match_all(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info)
     * }
     */
    public static MethodHandle g_regex_match_all$handle() {
        return g_regex_match_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_regex_match_all(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options, GMatchInfo **match_info)
     * }
     */
    public static int g_regex_match_all(MemorySegment regex, MemorySegment string, int match_options, MemorySegment match_info) {
        var mh$ = g_regex_match_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_match_all", regex, string, match_options, match_info);
            }
            return (int)mh$.invokeExact(regex, string, match_options, match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_match_all_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_match_all_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_regex_match_all_full(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error)
     * }
     */
    public static FunctionDescriptor g_regex_match_all_full$descriptor() {
        return g_regex_match_all_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_regex_match_all_full(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error)
     * }
     */
    public static MethodHandle g_regex_match_all_full$handle() {
        return g_regex_match_all_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_regex_match_all_full(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GMatchInfo **match_info, GError **error)
     * }
     */
    public static int g_regex_match_all_full(MemorySegment regex, MemorySegment string, long string_len, int start_position, int match_options, MemorySegment match_info, MemorySegment error) {
        var mh$ = g_regex_match_all_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_match_all_full", regex, string, string_len, start_position, match_options, match_info, error);
            }
            return (int)mh$.invokeExact(regex, string, string_len, start_position, match_options, match_info, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_split_simple {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_split_simple"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_regex_split_simple(const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options)
     * }
     */
    public static FunctionDescriptor g_regex_split_simple$descriptor() {
        return g_regex_split_simple.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_regex_split_simple(const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options)
     * }
     */
    public static MethodHandle g_regex_split_simple$handle() {
        return g_regex_split_simple.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_regex_split_simple(const gchar *pattern, const gchar *string, GRegexCompileFlags compile_options, GRegexMatchFlags match_options)
     * }
     */
    public static MemorySegment g_regex_split_simple(MemorySegment pattern, MemorySegment string, int compile_options, int match_options) {
        var mh$ = g_regex_split_simple.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_split_simple", pattern, string, compile_options, match_options);
            }
            return (MemorySegment)mh$.invokeExact(pattern, string, compile_options, match_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_split {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_split"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_regex_split(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options)
     * }
     */
    public static FunctionDescriptor g_regex_split$descriptor() {
        return g_regex_split.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_regex_split(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options)
     * }
     */
    public static MethodHandle g_regex_split$handle() {
        return g_regex_split.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_regex_split(const GRegex *regex, const gchar *string, GRegexMatchFlags match_options)
     * }
     */
    public static MemorySegment g_regex_split(MemorySegment regex, MemorySegment string, int match_options) {
        var mh$ = g_regex_split.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_split", regex, string, match_options);
            }
            return (MemorySegment)mh$.invokeExact(regex, string, match_options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_split_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_split_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_regex_split_full(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, gint max_tokens, GError **error)
     * }
     */
    public static FunctionDescriptor g_regex_split_full$descriptor() {
        return g_regex_split_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_regex_split_full(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, gint max_tokens, GError **error)
     * }
     */
    public static MethodHandle g_regex_split_full$handle() {
        return g_regex_split_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_regex_split_full(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, gint max_tokens, GError **error)
     * }
     */
    public static MemorySegment g_regex_split_full(MemorySegment regex, MemorySegment string, long string_len, int start_position, int match_options, int max_tokens, MemorySegment error) {
        var mh$ = g_regex_split_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_split_full", regex, string, string_len, start_position, match_options, max_tokens, error);
            }
            return (MemorySegment)mh$.invokeExact(regex, string, string_len, start_position, match_options, max_tokens, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_replace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_replace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_regex_replace(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error)
     * }
     */
    public static FunctionDescriptor g_regex_replace$descriptor() {
        return g_regex_replace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_regex_replace(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error)
     * }
     */
    public static MethodHandle g_regex_replace$handle() {
        return g_regex_replace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_regex_replace(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error)
     * }
     */
    public static MemorySegment g_regex_replace(MemorySegment regex, MemorySegment string, long string_len, int start_position, MemorySegment replacement, int match_options, MemorySegment error) {
        var mh$ = g_regex_replace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_replace", regex, string, string_len, start_position, replacement, match_options, error);
            }
            return (MemorySegment)mh$.invokeExact(regex, string, string_len, start_position, replacement, match_options, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_replace_literal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_replace_literal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_regex_replace_literal(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error)
     * }
     */
    public static FunctionDescriptor g_regex_replace_literal$descriptor() {
        return g_regex_replace_literal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_regex_replace_literal(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error)
     * }
     */
    public static MethodHandle g_regex_replace_literal$handle() {
        return g_regex_replace_literal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_regex_replace_literal(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, const gchar *replacement, GRegexMatchFlags match_options, GError **error)
     * }
     */
    public static MemorySegment g_regex_replace_literal(MemorySegment regex, MemorySegment string, long string_len, int start_position, MemorySegment replacement, int match_options, MemorySegment error) {
        var mh$ = g_regex_replace_literal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_replace_literal", regex, string, string_len, start_position, replacement, match_options, error);
            }
            return (MemorySegment)mh$.invokeExact(regex, string, string_len, start_position, replacement, match_options, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_replace_eval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_replace_eval"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_regex_replace_eval(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, GError **error)
     * }
     */
    public static FunctionDescriptor g_regex_replace_eval$descriptor() {
        return g_regex_replace_eval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_regex_replace_eval(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, GError **error)
     * }
     */
    public static MethodHandle g_regex_replace_eval$handle() {
        return g_regex_replace_eval.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_regex_replace_eval(const GRegex *regex, const gchar *string, gssize string_len, gint start_position, GRegexMatchFlags match_options, GRegexEvalCallback eval, gpointer user_data, GError **error)
     * }
     */
    public static MemorySegment g_regex_replace_eval(MemorySegment regex, MemorySegment string, long string_len, int start_position, int match_options, MemorySegment eval, MemorySegment user_data, MemorySegment error) {
        var mh$ = g_regex_replace_eval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_replace_eval", regex, string, string_len, start_position, match_options, eval, user_data, error);
            }
            return (MemorySegment)mh$.invokeExact(regex, string, string_len, start_position, match_options, eval, user_data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_regex_check_replacement {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_regex_check_replacement"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_regex_check_replacement(const gchar *replacement, gboolean *has_references, GError **error)
     * }
     */
    public static FunctionDescriptor g_regex_check_replacement$descriptor() {
        return g_regex_check_replacement.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_regex_check_replacement(const gchar *replacement, gboolean *has_references, GError **error)
     * }
     */
    public static MethodHandle g_regex_check_replacement$handle() {
        return g_regex_check_replacement.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_regex_check_replacement(const gchar *replacement, gboolean *has_references, GError **error)
     * }
     */
    public static int g_regex_check_replacement(MemorySegment replacement, MemorySegment has_references, MemorySegment error) {
        var mh$ = g_regex_check_replacement.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_regex_check_replacement", replacement, has_references, error);
            }
            return (int)mh$.invokeExact(replacement, has_references, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_get_regex {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_get_regex"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GRegex *g_match_info_get_regex(const GMatchInfo *match_info)
     * }
     */
    public static FunctionDescriptor g_match_info_get_regex$descriptor() {
        return g_match_info_get_regex.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GRegex *g_match_info_get_regex(const GMatchInfo *match_info)
     * }
     */
    public static MethodHandle g_match_info_get_regex$handle() {
        return g_match_info_get_regex.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GRegex *g_match_info_get_regex(const GMatchInfo *match_info)
     * }
     */
    public static MemorySegment g_match_info_get_regex(MemorySegment match_info) {
        var mh$ = g_match_info_get_regex.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_get_regex", match_info);
            }
            return (MemorySegment)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_get_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_get_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_match_info_get_string(const GMatchInfo *match_info)
     * }
     */
    public static FunctionDescriptor g_match_info_get_string$descriptor() {
        return g_match_info_get_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_match_info_get_string(const GMatchInfo *match_info)
     * }
     */
    public static MethodHandle g_match_info_get_string$handle() {
        return g_match_info_get_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_match_info_get_string(const GMatchInfo *match_info)
     * }
     */
    public static MemorySegment g_match_info_get_string(MemorySegment match_info) {
        var mh$ = g_match_info_get_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_get_string", match_info);
            }
            return (MemorySegment)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMatchInfo *g_match_info_ref(GMatchInfo *match_info)
     * }
     */
    public static FunctionDescriptor g_match_info_ref$descriptor() {
        return g_match_info_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMatchInfo *g_match_info_ref(GMatchInfo *match_info)
     * }
     */
    public static MethodHandle g_match_info_ref$handle() {
        return g_match_info_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMatchInfo *g_match_info_ref(GMatchInfo *match_info)
     * }
     */
    public static MemorySegment g_match_info_ref(MemorySegment match_info) {
        var mh$ = g_match_info_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_ref", match_info);
            }
            return (MemorySegment)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_match_info_unref(GMatchInfo *match_info)
     * }
     */
    public static FunctionDescriptor g_match_info_unref$descriptor() {
        return g_match_info_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_match_info_unref(GMatchInfo *match_info)
     * }
     */
    public static MethodHandle g_match_info_unref$handle() {
        return g_match_info_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_match_info_unref(GMatchInfo *match_info)
     * }
     */
    public static void g_match_info_unref(MemorySegment match_info) {
        var mh$ = g_match_info_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_unref", match_info);
            }
            mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_match_info_free(GMatchInfo *match_info)
     * }
     */
    public static FunctionDescriptor g_match_info_free$descriptor() {
        return g_match_info_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_match_info_free(GMatchInfo *match_info)
     * }
     */
    public static MethodHandle g_match_info_free$handle() {
        return g_match_info_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_match_info_free(GMatchInfo *match_info)
     * }
     */
    public static void g_match_info_free(MemorySegment match_info) {
        var mh$ = g_match_info_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_free", match_info);
            }
            mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_match_info_next(GMatchInfo *match_info, GError **error)
     * }
     */
    public static FunctionDescriptor g_match_info_next$descriptor() {
        return g_match_info_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_match_info_next(GMatchInfo *match_info, GError **error)
     * }
     */
    public static MethodHandle g_match_info_next$handle() {
        return g_match_info_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_match_info_next(GMatchInfo *match_info, GError **error)
     * }
     */
    public static int g_match_info_next(MemorySegment match_info, MemorySegment error) {
        var mh$ = g_match_info_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_next", match_info, error);
            }
            return (int)mh$.invokeExact(match_info, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_matches {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_matches"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_match_info_matches(const GMatchInfo *match_info)
     * }
     */
    public static FunctionDescriptor g_match_info_matches$descriptor() {
        return g_match_info_matches.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_match_info_matches(const GMatchInfo *match_info)
     * }
     */
    public static MethodHandle g_match_info_matches$handle() {
        return g_match_info_matches.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_match_info_matches(const GMatchInfo *match_info)
     * }
     */
    public static int g_match_info_matches(MemorySegment match_info) {
        var mh$ = g_match_info_matches.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_matches", match_info);
            }
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_get_match_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_get_match_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_match_info_get_match_count(const GMatchInfo *match_info)
     * }
     */
    public static FunctionDescriptor g_match_info_get_match_count$descriptor() {
        return g_match_info_get_match_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_match_info_get_match_count(const GMatchInfo *match_info)
     * }
     */
    public static MethodHandle g_match_info_get_match_count$handle() {
        return g_match_info_get_match_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_match_info_get_match_count(const GMatchInfo *match_info)
     * }
     */
    public static int g_match_info_get_match_count(MemorySegment match_info) {
        var mh$ = g_match_info_get_match_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_get_match_count", match_info);
            }
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_is_partial_match {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_is_partial_match"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_match_info_is_partial_match(const GMatchInfo *match_info)
     * }
     */
    public static FunctionDescriptor g_match_info_is_partial_match$descriptor() {
        return g_match_info_is_partial_match.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_match_info_is_partial_match(const GMatchInfo *match_info)
     * }
     */
    public static MethodHandle g_match_info_is_partial_match$handle() {
        return g_match_info_is_partial_match.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_match_info_is_partial_match(const GMatchInfo *match_info)
     * }
     */
    public static int g_match_info_is_partial_match(MemorySegment match_info) {
        var mh$ = g_match_info_is_partial_match.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_is_partial_match", match_info);
            }
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_expand_references {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_expand_references"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_match_info_expand_references(const GMatchInfo *match_info, const gchar *string_to_expand, GError **error)
     * }
     */
    public static FunctionDescriptor g_match_info_expand_references$descriptor() {
        return g_match_info_expand_references.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_match_info_expand_references(const GMatchInfo *match_info, const gchar *string_to_expand, GError **error)
     * }
     */
    public static MethodHandle g_match_info_expand_references$handle() {
        return g_match_info_expand_references.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_match_info_expand_references(const GMatchInfo *match_info, const gchar *string_to_expand, GError **error)
     * }
     */
    public static MemorySegment g_match_info_expand_references(MemorySegment match_info, MemorySegment string_to_expand, MemorySegment error) {
        var mh$ = g_match_info_expand_references.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_expand_references", match_info, string_to_expand, error);
            }
            return (MemorySegment)mh$.invokeExact(match_info, string_to_expand, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_fetch {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_fetch"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_match_info_fetch(const GMatchInfo *match_info, gint match_num)
     * }
     */
    public static FunctionDescriptor g_match_info_fetch$descriptor() {
        return g_match_info_fetch.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_match_info_fetch(const GMatchInfo *match_info, gint match_num)
     * }
     */
    public static MethodHandle g_match_info_fetch$handle() {
        return g_match_info_fetch.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_match_info_fetch(const GMatchInfo *match_info, gint match_num)
     * }
     */
    public static MemorySegment g_match_info_fetch(MemorySegment match_info, int match_num) {
        var mh$ = g_match_info_fetch.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_fetch", match_info, match_num);
            }
            return (MemorySegment)mh$.invokeExact(match_info, match_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_fetch_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_fetch_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_match_info_fetch_pos(const GMatchInfo *match_info, gint match_num, gint *start_pos, gint *end_pos)
     * }
     */
    public static FunctionDescriptor g_match_info_fetch_pos$descriptor() {
        return g_match_info_fetch_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_match_info_fetch_pos(const GMatchInfo *match_info, gint match_num, gint *start_pos, gint *end_pos)
     * }
     */
    public static MethodHandle g_match_info_fetch_pos$handle() {
        return g_match_info_fetch_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_match_info_fetch_pos(const GMatchInfo *match_info, gint match_num, gint *start_pos, gint *end_pos)
     * }
     */
    public static int g_match_info_fetch_pos(MemorySegment match_info, int match_num, MemorySegment start_pos, MemorySegment end_pos) {
        var mh$ = g_match_info_fetch_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_fetch_pos", match_info, match_num, start_pos, end_pos);
            }
            return (int)mh$.invokeExact(match_info, match_num, start_pos, end_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_fetch_named {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_fetch_named"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_match_info_fetch_named(const GMatchInfo *match_info, const gchar *name)
     * }
     */
    public static FunctionDescriptor g_match_info_fetch_named$descriptor() {
        return g_match_info_fetch_named.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_match_info_fetch_named(const GMatchInfo *match_info, const gchar *name)
     * }
     */
    public static MethodHandle g_match_info_fetch_named$handle() {
        return g_match_info_fetch_named.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_match_info_fetch_named(const GMatchInfo *match_info, const gchar *name)
     * }
     */
    public static MemorySegment g_match_info_fetch_named(MemorySegment match_info, MemorySegment name) {
        var mh$ = g_match_info_fetch_named.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_fetch_named", match_info, name);
            }
            return (MemorySegment)mh$.invokeExact(match_info, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_fetch_named_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_fetch_named_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_match_info_fetch_named_pos(const GMatchInfo *match_info, const gchar *name, gint *start_pos, gint *end_pos)
     * }
     */
    public static FunctionDescriptor g_match_info_fetch_named_pos$descriptor() {
        return g_match_info_fetch_named_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_match_info_fetch_named_pos(const GMatchInfo *match_info, const gchar *name, gint *start_pos, gint *end_pos)
     * }
     */
    public static MethodHandle g_match_info_fetch_named_pos$handle() {
        return g_match_info_fetch_named_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_match_info_fetch_named_pos(const GMatchInfo *match_info, const gchar *name, gint *start_pos, gint *end_pos)
     * }
     */
    public static int g_match_info_fetch_named_pos(MemorySegment match_info, MemorySegment name, MemorySegment start_pos, MemorySegment end_pos) {
        var mh$ = g_match_info_fetch_named_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_fetch_named_pos", match_info, name, start_pos, end_pos);
            }
            return (int)mh$.invokeExact(match_info, name, start_pos, end_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_match_info_fetch_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_match_info_fetch_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar **g_match_info_fetch_all(const GMatchInfo *match_info)
     * }
     */
    public static FunctionDescriptor g_match_info_fetch_all$descriptor() {
        return g_match_info_fetch_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar **g_match_info_fetch_all(const GMatchInfo *match_info)
     * }
     */
    public static MethodHandle g_match_info_fetch_all$handle() {
        return g_match_info_fetch_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar **g_match_info_fetch_all(const GMatchInfo *match_info)
     * }
     */
    public static MemorySegment g_match_info_fetch_all(MemorySegment match_info) {
        var mh$ = g_match_info_fetch_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_match_info_fetch_all", match_info);
            }
            return (MemorySegment)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_ERR_UNKNOWN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ERR_UNKNOWN = 0
     * }
     */
    public static int G_ERR_UNKNOWN() {
        return G_ERR_UNKNOWN;
    }
    private static final int G_ERR_UNEXP_EOF = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ERR_UNEXP_EOF = 1
     * }
     */
    public static int G_ERR_UNEXP_EOF() {
        return G_ERR_UNEXP_EOF;
    }
    private static final int G_ERR_UNEXP_EOF_IN_STRING = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ERR_UNEXP_EOF_IN_STRING = 2
     * }
     */
    public static int G_ERR_UNEXP_EOF_IN_STRING() {
        return G_ERR_UNEXP_EOF_IN_STRING;
    }
    private static final int G_ERR_UNEXP_EOF_IN_COMMENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ERR_UNEXP_EOF_IN_COMMENT = 3
     * }
     */
    public static int G_ERR_UNEXP_EOF_IN_COMMENT() {
        return G_ERR_UNEXP_EOF_IN_COMMENT;
    }
    private static final int G_ERR_NON_DIGIT_IN_CONST = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ERR_NON_DIGIT_IN_CONST = 4
     * }
     */
    public static int G_ERR_NON_DIGIT_IN_CONST() {
        return G_ERR_NON_DIGIT_IN_CONST;
    }
    private static final int G_ERR_DIGIT_RADIX = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ERR_DIGIT_RADIX = 5
     * }
     */
    public static int G_ERR_DIGIT_RADIX() {
        return G_ERR_DIGIT_RADIX;
    }
    private static final int G_ERR_FLOAT_RADIX = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ERR_FLOAT_RADIX = 6
     * }
     */
    public static int G_ERR_FLOAT_RADIX() {
        return G_ERR_FLOAT_RADIX;
    }
    private static final int G_ERR_FLOAT_MALFORMED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_ERR_FLOAT_MALFORMED = 7
     * }
     */
    public static int G_ERR_FLOAT_MALFORMED() {
        return G_ERR_FLOAT_MALFORMED;
    }
    private static final int G_TOKEN_EOF = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_EOF = 0
     * }
     */
    public static int G_TOKEN_EOF() {
        return G_TOKEN_EOF;
    }
    private static final int G_TOKEN_LEFT_PAREN = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_LEFT_PAREN = 40
     * }
     */
    public static int G_TOKEN_LEFT_PAREN() {
        return G_TOKEN_LEFT_PAREN;
    }
    private static final int G_TOKEN_RIGHT_PAREN = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_RIGHT_PAREN = 41
     * }
     */
    public static int G_TOKEN_RIGHT_PAREN() {
        return G_TOKEN_RIGHT_PAREN;
    }
    private static final int G_TOKEN_LEFT_CURLY = (int)123L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_LEFT_CURLY = 123
     * }
     */
    public static int G_TOKEN_LEFT_CURLY() {
        return G_TOKEN_LEFT_CURLY;
    }
    private static final int G_TOKEN_RIGHT_CURLY = (int)125L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_RIGHT_CURLY = 125
     * }
     */
    public static int G_TOKEN_RIGHT_CURLY() {
        return G_TOKEN_RIGHT_CURLY;
    }
    private static final int G_TOKEN_LEFT_BRACE = (int)91L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_LEFT_BRACE = 91
     * }
     */
    public static int G_TOKEN_LEFT_BRACE() {
        return G_TOKEN_LEFT_BRACE;
    }
    private static final int G_TOKEN_RIGHT_BRACE = (int)93L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_RIGHT_BRACE = 93
     * }
     */
    public static int G_TOKEN_RIGHT_BRACE() {
        return G_TOKEN_RIGHT_BRACE;
    }
    private static final int G_TOKEN_EQUAL_SIGN = (int)61L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_EQUAL_SIGN = 61
     * }
     */
    public static int G_TOKEN_EQUAL_SIGN() {
        return G_TOKEN_EQUAL_SIGN;
    }
    private static final int G_TOKEN_COMMA = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_COMMA = 44
     * }
     */
    public static int G_TOKEN_COMMA() {
        return G_TOKEN_COMMA;
    }
    private static final int G_TOKEN_NONE = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_NONE = 256
     * }
     */
    public static int G_TOKEN_NONE() {
        return G_TOKEN_NONE;
    }
    private static final int G_TOKEN_ERROR = (int)257L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_ERROR = 257
     * }
     */
    public static int G_TOKEN_ERROR() {
        return G_TOKEN_ERROR;
    }
    private static final int G_TOKEN_CHAR = (int)258L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_CHAR = 258
     * }
     */
    public static int G_TOKEN_CHAR() {
        return G_TOKEN_CHAR;
    }
    private static final int G_TOKEN_BINARY = (int)259L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_BINARY = 259
     * }
     */
    public static int G_TOKEN_BINARY() {
        return G_TOKEN_BINARY;
    }
    private static final int G_TOKEN_OCTAL = (int)260L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_OCTAL = 260
     * }
     */
    public static int G_TOKEN_OCTAL() {
        return G_TOKEN_OCTAL;
    }
    private static final int G_TOKEN_INT = (int)261L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_INT = 261
     * }
     */
    public static int G_TOKEN_INT() {
        return G_TOKEN_INT;
    }
    private static final int G_TOKEN_HEX = (int)262L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_HEX = 262
     * }
     */
    public static int G_TOKEN_HEX() {
        return G_TOKEN_HEX;
    }
    private static final int G_TOKEN_FLOAT = (int)263L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_FLOAT = 263
     * }
     */
    public static int G_TOKEN_FLOAT() {
        return G_TOKEN_FLOAT;
    }
    private static final int G_TOKEN_STRING = (int)264L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_STRING = 264
     * }
     */
    public static int G_TOKEN_STRING() {
        return G_TOKEN_STRING;
    }
    private static final int G_TOKEN_SYMBOL = (int)265L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_SYMBOL = 265
     * }
     */
    public static int G_TOKEN_SYMBOL() {
        return G_TOKEN_SYMBOL;
    }
    private static final int G_TOKEN_IDENTIFIER = (int)266L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_IDENTIFIER = 266
     * }
     */
    public static int G_TOKEN_IDENTIFIER() {
        return G_TOKEN_IDENTIFIER;
    }
    private static final int G_TOKEN_IDENTIFIER_NULL = (int)267L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_IDENTIFIER_NULL = 267
     * }
     */
    public static int G_TOKEN_IDENTIFIER_NULL() {
        return G_TOKEN_IDENTIFIER_NULL;
    }
    private static final int G_TOKEN_COMMENT_SINGLE = (int)268L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_COMMENT_SINGLE = 268
     * }
     */
    public static int G_TOKEN_COMMENT_SINGLE() {
        return G_TOKEN_COMMENT_SINGLE;
    }
    private static final int G_TOKEN_COMMENT_MULTI = (int)269L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_COMMENT_MULTI = 269
     * }
     */
    public static int G_TOKEN_COMMENT_MULTI() {
        return G_TOKEN_COMMENT_MULTI;
    }
    private static final int G_TOKEN_LAST = (int)270L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TOKEN_LAST = 270
     * }
     */
    public static int G_TOKEN_LAST() {
        return G_TOKEN_LAST;
    }

    private static class g_scanner_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GScanner *g_scanner_new(const GScannerConfig *config_templ)
     * }
     */
    public static FunctionDescriptor g_scanner_new$descriptor() {
        return g_scanner_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GScanner *g_scanner_new(const GScannerConfig *config_templ)
     * }
     */
    public static MethodHandle g_scanner_new$handle() {
        return g_scanner_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GScanner *g_scanner_new(const GScannerConfig *config_templ)
     * }
     */
    public static MemorySegment g_scanner_new(MemorySegment config_templ) {
        var mh$ = g_scanner_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_new", config_templ);
            }
            return (MemorySegment)mh$.invokeExact(config_templ);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_scanner_destroy(GScanner *scanner)
     * }
     */
    public static FunctionDescriptor g_scanner_destroy$descriptor() {
        return g_scanner_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_scanner_destroy(GScanner *scanner)
     * }
     */
    public static MethodHandle g_scanner_destroy$handle() {
        return g_scanner_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_scanner_destroy(GScanner *scanner)
     * }
     */
    public static void g_scanner_destroy(MemorySegment scanner) {
        var mh$ = g_scanner_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_destroy", scanner);
            }
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_input_file {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_input_file"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_scanner_input_file(GScanner *scanner, gint input_fd)
     * }
     */
    public static FunctionDescriptor g_scanner_input_file$descriptor() {
        return g_scanner_input_file.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_scanner_input_file(GScanner *scanner, gint input_fd)
     * }
     */
    public static MethodHandle g_scanner_input_file$handle() {
        return g_scanner_input_file.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_scanner_input_file(GScanner *scanner, gint input_fd)
     * }
     */
    public static void g_scanner_input_file(MemorySegment scanner, int input_fd) {
        var mh$ = g_scanner_input_file.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_input_file", scanner, input_fd);
            }
            mh$.invokeExact(scanner, input_fd);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_sync_file_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_sync_file_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_scanner_sync_file_offset(GScanner *scanner)
     * }
     */
    public static FunctionDescriptor g_scanner_sync_file_offset$descriptor() {
        return g_scanner_sync_file_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_scanner_sync_file_offset(GScanner *scanner)
     * }
     */
    public static MethodHandle g_scanner_sync_file_offset$handle() {
        return g_scanner_sync_file_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_scanner_sync_file_offset(GScanner *scanner)
     * }
     */
    public static void g_scanner_sync_file_offset(MemorySegment scanner) {
        var mh$ = g_scanner_sync_file_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_sync_file_offset", scanner);
            }
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_input_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_input_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_scanner_input_text(GScanner *scanner, const gchar *text, guint text_len)
     * }
     */
    public static FunctionDescriptor g_scanner_input_text$descriptor() {
        return g_scanner_input_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_scanner_input_text(GScanner *scanner, const gchar *text, guint text_len)
     * }
     */
    public static MethodHandle g_scanner_input_text$handle() {
        return g_scanner_input_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_scanner_input_text(GScanner *scanner, const gchar *text, guint text_len)
     * }
     */
    public static void g_scanner_input_text(MemorySegment scanner, MemorySegment text, int text_len) {
        var mh$ = g_scanner_input_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_input_text", scanner, text, text_len);
            }
            mh$.invokeExact(scanner, text, text_len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_get_next_token {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_get_next_token"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTokenType g_scanner_get_next_token(GScanner *scanner)
     * }
     */
    public static FunctionDescriptor g_scanner_get_next_token$descriptor() {
        return g_scanner_get_next_token.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTokenType g_scanner_get_next_token(GScanner *scanner)
     * }
     */
    public static MethodHandle g_scanner_get_next_token$handle() {
        return g_scanner_get_next_token.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTokenType g_scanner_get_next_token(GScanner *scanner)
     * }
     */
    public static int g_scanner_get_next_token(MemorySegment scanner) {
        var mh$ = g_scanner_get_next_token.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_get_next_token", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_peek_next_token {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_peek_next_token"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTokenType g_scanner_peek_next_token(GScanner *scanner)
     * }
     */
    public static FunctionDescriptor g_scanner_peek_next_token$descriptor() {
        return g_scanner_peek_next_token.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTokenType g_scanner_peek_next_token(GScanner *scanner)
     * }
     */
    public static MethodHandle g_scanner_peek_next_token$handle() {
        return g_scanner_peek_next_token.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTokenType g_scanner_peek_next_token(GScanner *scanner)
     * }
     */
    public static int g_scanner_peek_next_token(MemorySegment scanner) {
        var mh$ = g_scanner_peek_next_token.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_peek_next_token", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_cur_token {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_cur_token"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTokenType g_scanner_cur_token(GScanner *scanner)
     * }
     */
    public static FunctionDescriptor g_scanner_cur_token$descriptor() {
        return g_scanner_cur_token.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTokenType g_scanner_cur_token(GScanner *scanner)
     * }
     */
    public static MethodHandle g_scanner_cur_token$handle() {
        return g_scanner_cur_token.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTokenType g_scanner_cur_token(GScanner *scanner)
     * }
     */
    public static int g_scanner_cur_token(MemorySegment scanner) {
        var mh$ = g_scanner_cur_token.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_cur_token", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_cur_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            _GTokenValue.layout(),
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_cur_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTokenValue g_scanner_cur_value(GScanner *scanner)
     * }
     */
    public static FunctionDescriptor g_scanner_cur_value$descriptor() {
        return g_scanner_cur_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTokenValue g_scanner_cur_value(GScanner *scanner)
     * }
     */
    public static MethodHandle g_scanner_cur_value$handle() {
        return g_scanner_cur_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTokenValue g_scanner_cur_value(GScanner *scanner)
     * }
     */
    public static MemorySegment g_scanner_cur_value(SegmentAllocator allocator, MemorySegment scanner) {
        var mh$ = g_scanner_cur_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_cur_value", allocator, scanner);
            }
            return (MemorySegment)mh$.invokeExact(allocator, scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_cur_line {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_cur_line"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_scanner_cur_line(GScanner *scanner)
     * }
     */
    public static FunctionDescriptor g_scanner_cur_line$descriptor() {
        return g_scanner_cur_line.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_scanner_cur_line(GScanner *scanner)
     * }
     */
    public static MethodHandle g_scanner_cur_line$handle() {
        return g_scanner_cur_line.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_scanner_cur_line(GScanner *scanner)
     * }
     */
    public static int g_scanner_cur_line(MemorySegment scanner) {
        var mh$ = g_scanner_cur_line.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_cur_line", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_cur_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_cur_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_scanner_cur_position(GScanner *scanner)
     * }
     */
    public static FunctionDescriptor g_scanner_cur_position$descriptor() {
        return g_scanner_cur_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_scanner_cur_position(GScanner *scanner)
     * }
     */
    public static MethodHandle g_scanner_cur_position$handle() {
        return g_scanner_cur_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_scanner_cur_position(GScanner *scanner)
     * }
     */
    public static int g_scanner_cur_position(MemorySegment scanner) {
        var mh$ = g_scanner_cur_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_cur_position", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_eof {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_eof"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_scanner_eof(GScanner *scanner)
     * }
     */
    public static FunctionDescriptor g_scanner_eof$descriptor() {
        return g_scanner_eof.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_scanner_eof(GScanner *scanner)
     * }
     */
    public static MethodHandle g_scanner_eof$handle() {
        return g_scanner_eof.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_scanner_eof(GScanner *scanner)
     * }
     */
    public static int g_scanner_eof(MemorySegment scanner) {
        var mh$ = g_scanner_eof.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_eof", scanner);
            }
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_set_scope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_set_scope"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_scanner_set_scope(GScanner *scanner, guint scope_id)
     * }
     */
    public static FunctionDescriptor g_scanner_set_scope$descriptor() {
        return g_scanner_set_scope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_scanner_set_scope(GScanner *scanner, guint scope_id)
     * }
     */
    public static MethodHandle g_scanner_set_scope$handle() {
        return g_scanner_set_scope.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_scanner_set_scope(GScanner *scanner, guint scope_id)
     * }
     */
    public static int g_scanner_set_scope(MemorySegment scanner, int scope_id) {
        var mh$ = g_scanner_set_scope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_set_scope", scanner, scope_id);
            }
            return (int)mh$.invokeExact(scanner, scope_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_scope_add_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_scope_add_symbol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_scanner_scope_add_symbol(GScanner *scanner, guint scope_id, const gchar *symbol, gpointer value)
     * }
     */
    public static FunctionDescriptor g_scanner_scope_add_symbol$descriptor() {
        return g_scanner_scope_add_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_scanner_scope_add_symbol(GScanner *scanner, guint scope_id, const gchar *symbol, gpointer value)
     * }
     */
    public static MethodHandle g_scanner_scope_add_symbol$handle() {
        return g_scanner_scope_add_symbol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_scanner_scope_add_symbol(GScanner *scanner, guint scope_id, const gchar *symbol, gpointer value)
     * }
     */
    public static void g_scanner_scope_add_symbol(MemorySegment scanner, int scope_id, MemorySegment symbol, MemorySegment value) {
        var mh$ = g_scanner_scope_add_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_scope_add_symbol", scanner, scope_id, symbol, value);
            }
            mh$.invokeExact(scanner, scope_id, symbol, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_scope_remove_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_scope_remove_symbol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_scanner_scope_remove_symbol(GScanner *scanner, guint scope_id, const gchar *symbol)
     * }
     */
    public static FunctionDescriptor g_scanner_scope_remove_symbol$descriptor() {
        return g_scanner_scope_remove_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_scanner_scope_remove_symbol(GScanner *scanner, guint scope_id, const gchar *symbol)
     * }
     */
    public static MethodHandle g_scanner_scope_remove_symbol$handle() {
        return g_scanner_scope_remove_symbol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_scanner_scope_remove_symbol(GScanner *scanner, guint scope_id, const gchar *symbol)
     * }
     */
    public static void g_scanner_scope_remove_symbol(MemorySegment scanner, int scope_id, MemorySegment symbol) {
        var mh$ = g_scanner_scope_remove_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_scope_remove_symbol", scanner, scope_id, symbol);
            }
            mh$.invokeExact(scanner, scope_id, symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_scope_lookup_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_scope_lookup_symbol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_scanner_scope_lookup_symbol(GScanner *scanner, guint scope_id, const gchar *symbol)
     * }
     */
    public static FunctionDescriptor g_scanner_scope_lookup_symbol$descriptor() {
        return g_scanner_scope_lookup_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_scanner_scope_lookup_symbol(GScanner *scanner, guint scope_id, const gchar *symbol)
     * }
     */
    public static MethodHandle g_scanner_scope_lookup_symbol$handle() {
        return g_scanner_scope_lookup_symbol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_scanner_scope_lookup_symbol(GScanner *scanner, guint scope_id, const gchar *symbol)
     * }
     */
    public static MemorySegment g_scanner_scope_lookup_symbol(MemorySegment scanner, int scope_id, MemorySegment symbol) {
        var mh$ = g_scanner_scope_lookup_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_scope_lookup_symbol", scanner, scope_id, symbol);
            }
            return (MemorySegment)mh$.invokeExact(scanner, scope_id, symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_scope_foreach_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_scope_foreach_symbol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_scanner_scope_foreach_symbol(GScanner *scanner, guint scope_id, GHFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_scanner_scope_foreach_symbol$descriptor() {
        return g_scanner_scope_foreach_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_scanner_scope_foreach_symbol(GScanner *scanner, guint scope_id, GHFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_scanner_scope_foreach_symbol$handle() {
        return g_scanner_scope_foreach_symbol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_scanner_scope_foreach_symbol(GScanner *scanner, guint scope_id, GHFunc func, gpointer user_data)
     * }
     */
    public static void g_scanner_scope_foreach_symbol(MemorySegment scanner, int scope_id, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_scanner_scope_foreach_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_scope_foreach_symbol", scanner, scope_id, func, user_data);
            }
            mh$.invokeExact(scanner, scope_id, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_lookup_symbol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_lookup_symbol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_scanner_lookup_symbol(GScanner *scanner, const gchar *symbol)
     * }
     */
    public static FunctionDescriptor g_scanner_lookup_symbol$descriptor() {
        return g_scanner_lookup_symbol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_scanner_lookup_symbol(GScanner *scanner, const gchar *symbol)
     * }
     */
    public static MethodHandle g_scanner_lookup_symbol$handle() {
        return g_scanner_lookup_symbol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_scanner_lookup_symbol(GScanner *scanner, const gchar *symbol)
     * }
     */
    public static MemorySegment g_scanner_lookup_symbol(MemorySegment scanner, MemorySegment symbol) {
        var mh$ = g_scanner_lookup_symbol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_lookup_symbol", scanner, symbol);
            }
            return (MemorySegment)mh$.invokeExact(scanner, symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_scanner_unexp_token {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_scanner_unexp_token"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_scanner_unexp_token(GScanner *scanner, GTokenType expected_token, const gchar *identifier_spec, const gchar *symbol_spec, const gchar *symbol_name, const gchar *message, gint is_error)
     * }
     */
    public static FunctionDescriptor g_scanner_unexp_token$descriptor() {
        return g_scanner_unexp_token.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_scanner_unexp_token(GScanner *scanner, GTokenType expected_token, const gchar *identifier_spec, const gchar *symbol_spec, const gchar *symbol_name, const gchar *message, gint is_error)
     * }
     */
    public static MethodHandle g_scanner_unexp_token$handle() {
        return g_scanner_unexp_token.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_scanner_unexp_token(GScanner *scanner, GTokenType expected_token, const gchar *identifier_spec, const gchar *symbol_spec, const gchar *symbol_name, const gchar *message, gint is_error)
     * }
     */
    public static void g_scanner_unexp_token(MemorySegment scanner, int expected_token, MemorySegment identifier_spec, MemorySegment symbol_spec, MemorySegment symbol_name, MemorySegment message, int is_error) {
        var mh$ = g_scanner_unexp_token.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_scanner_unexp_token", scanner, expected_token, identifier_spec, symbol_spec, symbol_name, message, is_error);
            }
            mh$.invokeExact(scanner, expected_token, identifier_spec, symbol_spec, symbol_name, message, is_error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_scanner_error(GScanner *scanner, const gchar *format, ...)
     * }
     */
    public static class g_scanner_error {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_scanner_error");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_scanner_error(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_scanner_error(GScanner *scanner, const gchar *format, ...)
         * }
         */
        public static g_scanner_error makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_scanner_error(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment scanner, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_scanner_error", scanner, format, x2);
                }
                spreader.invokeExact(scanner, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_scanner_warn(GScanner *scanner, const gchar *format, ...)
     * }
     */
    public static class g_scanner_warn {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_scanner_warn");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_scanner_warn(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_scanner_warn(GScanner *scanner, const gchar *format, ...)
         * }
         */
        public static g_scanner_warn makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_scanner_warn(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment scanner, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_scanner_warn", scanner, format, x2);
                }
                spreader.invokeExact(scanner, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_sequence_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequence *g_sequence_new(GDestroyNotify data_destroy)
     * }
     */
    public static FunctionDescriptor g_sequence_new$descriptor() {
        return g_sequence_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequence *g_sequence_new(GDestroyNotify data_destroy)
     * }
     */
    public static MethodHandle g_sequence_new$handle() {
        return g_sequence_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequence *g_sequence_new(GDestroyNotify data_destroy)
     * }
     */
    public static MemorySegment g_sequence_new(MemorySegment data_destroy) {
        var mh$ = g_sequence_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_new", data_destroy);
            }
            return (MemorySegment)mh$.invokeExact(data_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_free(GSequence *seq)
     * }
     */
    public static FunctionDescriptor g_sequence_free$descriptor() {
        return g_sequence_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_free(GSequence *seq)
     * }
     */
    public static MethodHandle g_sequence_free$handle() {
        return g_sequence_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_free(GSequence *seq)
     * }
     */
    public static void g_sequence_free(MemorySegment seq) {
        var mh$ = g_sequence_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_free", seq);
            }
            mh$.invokeExact(seq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_get_length {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_get_length"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_sequence_get_length(GSequence *seq)
     * }
     */
    public static FunctionDescriptor g_sequence_get_length$descriptor() {
        return g_sequence_get_length.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_sequence_get_length(GSequence *seq)
     * }
     */
    public static MethodHandle g_sequence_get_length$handle() {
        return g_sequence_get_length.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_sequence_get_length(GSequence *seq)
     * }
     */
    public static int g_sequence_get_length(MemorySegment seq) {
        var mh$ = g_sequence_get_length.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_get_length", seq);
            }
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_foreach(GSequence *seq, GFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_sequence_foreach$descriptor() {
        return g_sequence_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_foreach(GSequence *seq, GFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_sequence_foreach$handle() {
        return g_sequence_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_foreach(GSequence *seq, GFunc func, gpointer user_data)
     * }
     */
    public static void g_sequence_foreach(MemorySegment seq, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_sequence_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_foreach", seq, func, user_data);
            }
            mh$.invokeExact(seq, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_foreach_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_foreach_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_foreach_range(GSequenceIter *begin, GSequenceIter *end, GFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_sequence_foreach_range$descriptor() {
        return g_sequence_foreach_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_foreach_range(GSequenceIter *begin, GSequenceIter *end, GFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_sequence_foreach_range$handle() {
        return g_sequence_foreach_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_foreach_range(GSequenceIter *begin, GSequenceIter *end, GFunc func, gpointer user_data)
     * }
     */
    public static void g_sequence_foreach_range(MemorySegment begin, MemorySegment end, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_sequence_foreach_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_foreach_range", begin, end, func, user_data);
            }
            mh$.invokeExact(begin, end, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_sort {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_sort"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_sort(GSequence *seq, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static FunctionDescriptor g_sequence_sort$descriptor() {
        return g_sequence_sort.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_sort(GSequence *seq, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static MethodHandle g_sequence_sort$handle() {
        return g_sequence_sort.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_sort(GSequence *seq, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static void g_sequence_sort(MemorySegment seq, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_sort.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_sort", seq, cmp_func, cmp_data);
            }
            mh$.invokeExact(seq, cmp_func, cmp_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_sort_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_sort_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_sort_iter(GSequence *seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static FunctionDescriptor g_sequence_sort_iter$descriptor() {
        return g_sequence_sort_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_sort_iter(GSequence *seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static MethodHandle g_sequence_sort_iter$handle() {
        return g_sequence_sort_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_sort_iter(GSequence *seq, GSequenceIterCompareFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static void g_sequence_sort_iter(MemorySegment seq, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_sort_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_sort_iter", seq, cmp_func, cmp_data);
            }
            mh$.invokeExact(seq, cmp_func, cmp_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_is_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_is_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_sequence_is_empty(GSequence *seq)
     * }
     */
    public static FunctionDescriptor g_sequence_is_empty$descriptor() {
        return g_sequence_is_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_sequence_is_empty(GSequence *seq)
     * }
     */
    public static MethodHandle g_sequence_is_empty$handle() {
        return g_sequence_is_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_sequence_is_empty(GSequence *seq)
     * }
     */
    public static int g_sequence_is_empty(MemorySegment seq) {
        var mh$ = g_sequence_is_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_is_empty", seq);
            }
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_get_begin_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_get_begin_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_get_begin_iter(GSequence *seq)
     * }
     */
    public static FunctionDescriptor g_sequence_get_begin_iter$descriptor() {
        return g_sequence_get_begin_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_get_begin_iter(GSequence *seq)
     * }
     */
    public static MethodHandle g_sequence_get_begin_iter$handle() {
        return g_sequence_get_begin_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_get_begin_iter(GSequence *seq)
     * }
     */
    public static MemorySegment g_sequence_get_begin_iter(MemorySegment seq) {
        var mh$ = g_sequence_get_begin_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_get_begin_iter", seq);
            }
            return (MemorySegment)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_get_end_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_get_end_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_get_end_iter(GSequence *seq)
     * }
     */
    public static FunctionDescriptor g_sequence_get_end_iter$descriptor() {
        return g_sequence_get_end_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_get_end_iter(GSequence *seq)
     * }
     */
    public static MethodHandle g_sequence_get_end_iter$handle() {
        return g_sequence_get_end_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_get_end_iter(GSequence *seq)
     * }
     */
    public static MemorySegment g_sequence_get_end_iter(MemorySegment seq) {
        var mh$ = g_sequence_get_end_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_get_end_iter", seq);
            }
            return (MemorySegment)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_get_iter_at_pos {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_get_iter_at_pos"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_get_iter_at_pos(GSequence *seq, gint pos)
     * }
     */
    public static FunctionDescriptor g_sequence_get_iter_at_pos$descriptor() {
        return g_sequence_get_iter_at_pos.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_get_iter_at_pos(GSequence *seq, gint pos)
     * }
     */
    public static MethodHandle g_sequence_get_iter_at_pos$handle() {
        return g_sequence_get_iter_at_pos.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_get_iter_at_pos(GSequence *seq, gint pos)
     * }
     */
    public static MemorySegment g_sequence_get_iter_at_pos(MemorySegment seq, int pos) {
        var mh$ = g_sequence_get_iter_at_pos.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_get_iter_at_pos", seq, pos);
            }
            return (MemorySegment)mh$.invokeExact(seq, pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_append {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_append"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_append(GSequence *seq, gpointer data)
     * }
     */
    public static FunctionDescriptor g_sequence_append$descriptor() {
        return g_sequence_append.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_append(GSequence *seq, gpointer data)
     * }
     */
    public static MethodHandle g_sequence_append$handle() {
        return g_sequence_append.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_append(GSequence *seq, gpointer data)
     * }
     */
    public static MemorySegment g_sequence_append(MemorySegment seq, MemorySegment data) {
        var mh$ = g_sequence_append.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_append", seq, data);
            }
            return (MemorySegment)mh$.invokeExact(seq, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_prepend {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_prepend"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_prepend(GSequence *seq, gpointer data)
     * }
     */
    public static FunctionDescriptor g_sequence_prepend$descriptor() {
        return g_sequence_prepend.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_prepend(GSequence *seq, gpointer data)
     * }
     */
    public static MethodHandle g_sequence_prepend$handle() {
        return g_sequence_prepend.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_prepend(GSequence *seq, gpointer data)
     * }
     */
    public static MemorySegment g_sequence_prepend(MemorySegment seq, MemorySegment data) {
        var mh$ = g_sequence_prepend.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_prepend", seq, data);
            }
            return (MemorySegment)mh$.invokeExact(seq, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_insert_before {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_insert_before"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_insert_before(GSequenceIter *iter, gpointer data)
     * }
     */
    public static FunctionDescriptor g_sequence_insert_before$descriptor() {
        return g_sequence_insert_before.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_insert_before(GSequenceIter *iter, gpointer data)
     * }
     */
    public static MethodHandle g_sequence_insert_before$handle() {
        return g_sequence_insert_before.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_insert_before(GSequenceIter *iter, gpointer data)
     * }
     */
    public static MemorySegment g_sequence_insert_before(MemorySegment iter, MemorySegment data) {
        var mh$ = g_sequence_insert_before.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_insert_before", iter, data);
            }
            return (MemorySegment)mh$.invokeExact(iter, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_move {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_move"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_move(GSequenceIter *src, GSequenceIter *dest)
     * }
     */
    public static FunctionDescriptor g_sequence_move$descriptor() {
        return g_sequence_move.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_move(GSequenceIter *src, GSequenceIter *dest)
     * }
     */
    public static MethodHandle g_sequence_move$handle() {
        return g_sequence_move.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_move(GSequenceIter *src, GSequenceIter *dest)
     * }
     */
    public static void g_sequence_move(MemorySegment src, MemorySegment dest) {
        var mh$ = g_sequence_move.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_move", src, dest);
            }
            mh$.invokeExact(src, dest);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_swap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_swap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_swap(GSequenceIter *a, GSequenceIter *b)
     * }
     */
    public static FunctionDescriptor g_sequence_swap$descriptor() {
        return g_sequence_swap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_swap(GSequenceIter *a, GSequenceIter *b)
     * }
     */
    public static MethodHandle g_sequence_swap$handle() {
        return g_sequence_swap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_swap(GSequenceIter *a, GSequenceIter *b)
     * }
     */
    public static void g_sequence_swap(MemorySegment a, MemorySegment b) {
        var mh$ = g_sequence_swap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_swap", a, b);
            }
            mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_insert_sorted {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_insert_sorted"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_insert_sorted(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static FunctionDescriptor g_sequence_insert_sorted$descriptor() {
        return g_sequence_insert_sorted.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_insert_sorted(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static MethodHandle g_sequence_insert_sorted$handle() {
        return g_sequence_insert_sorted.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_insert_sorted(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static MemorySegment g_sequence_insert_sorted(MemorySegment seq, MemorySegment data, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_insert_sorted.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_insert_sorted", seq, data, cmp_func, cmp_data);
            }
            return (MemorySegment)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_insert_sorted_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_insert_sorted_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_insert_sorted_iter(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static FunctionDescriptor g_sequence_insert_sorted_iter$descriptor() {
        return g_sequence_insert_sorted_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_insert_sorted_iter(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static MethodHandle g_sequence_insert_sorted_iter$handle() {
        return g_sequence_insert_sorted_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_insert_sorted_iter(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static MemorySegment g_sequence_insert_sorted_iter(MemorySegment seq, MemorySegment data, MemorySegment iter_cmp, MemorySegment cmp_data) {
        var mh$ = g_sequence_insert_sorted_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_insert_sorted_iter", seq, data, iter_cmp, cmp_data);
            }
            return (MemorySegment)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_sort_changed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_sort_changed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_sort_changed(GSequenceIter *iter, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static FunctionDescriptor g_sequence_sort_changed$descriptor() {
        return g_sequence_sort_changed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_sort_changed(GSequenceIter *iter, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static MethodHandle g_sequence_sort_changed$handle() {
        return g_sequence_sort_changed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_sort_changed(GSequenceIter *iter, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static void g_sequence_sort_changed(MemorySegment iter, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_sort_changed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_sort_changed", iter, cmp_func, cmp_data);
            }
            mh$.invokeExact(iter, cmp_func, cmp_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_sort_changed_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_sort_changed_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_sort_changed_iter(GSequenceIter *iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static FunctionDescriptor g_sequence_sort_changed_iter$descriptor() {
        return g_sequence_sort_changed_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_sort_changed_iter(GSequenceIter *iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static MethodHandle g_sequence_sort_changed_iter$handle() {
        return g_sequence_sort_changed_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_sort_changed_iter(GSequenceIter *iter, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static void g_sequence_sort_changed_iter(MemorySegment iter, MemorySegment iter_cmp, MemorySegment cmp_data) {
        var mh$ = g_sequence_sort_changed_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_sort_changed_iter", iter, iter_cmp, cmp_data);
            }
            mh$.invokeExact(iter, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_remove(GSequenceIter *iter)
     * }
     */
    public static FunctionDescriptor g_sequence_remove$descriptor() {
        return g_sequence_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_remove(GSequenceIter *iter)
     * }
     */
    public static MethodHandle g_sequence_remove$handle() {
        return g_sequence_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_remove(GSequenceIter *iter)
     * }
     */
    public static void g_sequence_remove(MemorySegment iter) {
        var mh$ = g_sequence_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_remove", iter);
            }
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_remove_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_remove_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_remove_range(GSequenceIter *begin, GSequenceIter *end)
     * }
     */
    public static FunctionDescriptor g_sequence_remove_range$descriptor() {
        return g_sequence_remove_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_remove_range(GSequenceIter *begin, GSequenceIter *end)
     * }
     */
    public static MethodHandle g_sequence_remove_range$handle() {
        return g_sequence_remove_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_remove_range(GSequenceIter *begin, GSequenceIter *end)
     * }
     */
    public static void g_sequence_remove_range(MemorySegment begin, MemorySegment end) {
        var mh$ = g_sequence_remove_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_remove_range", begin, end);
            }
            mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_move_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_move_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_move_range(GSequenceIter *dest, GSequenceIter *begin, GSequenceIter *end)
     * }
     */
    public static FunctionDescriptor g_sequence_move_range$descriptor() {
        return g_sequence_move_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_move_range(GSequenceIter *dest, GSequenceIter *begin, GSequenceIter *end)
     * }
     */
    public static MethodHandle g_sequence_move_range$handle() {
        return g_sequence_move_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_move_range(GSequenceIter *dest, GSequenceIter *begin, GSequenceIter *end)
     * }
     */
    public static void g_sequence_move_range(MemorySegment dest, MemorySegment begin, MemorySegment end) {
        var mh$ = g_sequence_move_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_move_range", dest, begin, end);
            }
            mh$.invokeExact(dest, begin, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_search {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_search"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_search(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static FunctionDescriptor g_sequence_search$descriptor() {
        return g_sequence_search.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_search(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static MethodHandle g_sequence_search$handle() {
        return g_sequence_search.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_search(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static MemorySegment g_sequence_search(MemorySegment seq, MemorySegment data, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_search.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_search", seq, data, cmp_func, cmp_data);
            }
            return (MemorySegment)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_search_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_search_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_search_iter(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static FunctionDescriptor g_sequence_search_iter$descriptor() {
        return g_sequence_search_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_search_iter(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static MethodHandle g_sequence_search_iter$handle() {
        return g_sequence_search_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_search_iter(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static MemorySegment g_sequence_search_iter(MemorySegment seq, MemorySegment data, MemorySegment iter_cmp, MemorySegment cmp_data) {
        var mh$ = g_sequence_search_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_search_iter", seq, data, iter_cmp, cmp_data);
            }
            return (MemorySegment)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_lookup(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static FunctionDescriptor g_sequence_lookup$descriptor() {
        return g_sequence_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_lookup(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static MethodHandle g_sequence_lookup$handle() {
        return g_sequence_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_lookup(GSequence *seq, gpointer data, GCompareDataFunc cmp_func, gpointer cmp_data)
     * }
     */
    public static MemorySegment g_sequence_lookup(MemorySegment seq, MemorySegment data, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_lookup", seq, data, cmp_func, cmp_data);
            }
            return (MemorySegment)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_lookup_iter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_lookup_iter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_lookup_iter(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static FunctionDescriptor g_sequence_lookup_iter$descriptor() {
        return g_sequence_lookup_iter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_lookup_iter(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static MethodHandle g_sequence_lookup_iter$handle() {
        return g_sequence_lookup_iter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_lookup_iter(GSequence *seq, gpointer data, GSequenceIterCompareFunc iter_cmp, gpointer cmp_data)
     * }
     */
    public static MemorySegment g_sequence_lookup_iter(MemorySegment seq, MemorySegment data, MemorySegment iter_cmp, MemorySegment cmp_data) {
        var mh$ = g_sequence_lookup_iter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_lookup_iter", seq, data, iter_cmp, cmp_data);
            }
            return (MemorySegment)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_get {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_get"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_sequence_get(GSequenceIter *iter)
     * }
     */
    public static FunctionDescriptor g_sequence_get$descriptor() {
        return g_sequence_get.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_sequence_get(GSequenceIter *iter)
     * }
     */
    public static MethodHandle g_sequence_get$handle() {
        return g_sequence_get.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_sequence_get(GSequenceIter *iter)
     * }
     */
    public static MemorySegment g_sequence_get(MemorySegment iter) {
        var mh$ = g_sequence_get.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_get", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_sequence_set(GSequenceIter *iter, gpointer data)
     * }
     */
    public static FunctionDescriptor g_sequence_set$descriptor() {
        return g_sequence_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_sequence_set(GSequenceIter *iter, gpointer data)
     * }
     */
    public static MethodHandle g_sequence_set$handle() {
        return g_sequence_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_sequence_set(GSequenceIter *iter, gpointer data)
     * }
     */
    public static void g_sequence_set(MemorySegment iter, MemorySegment data) {
        var mh$ = g_sequence_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_set", iter, data);
            }
            mh$.invokeExact(iter, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_iter_is_begin {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_iter_is_begin"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_sequence_iter_is_begin(GSequenceIter *iter)
     * }
     */
    public static FunctionDescriptor g_sequence_iter_is_begin$descriptor() {
        return g_sequence_iter_is_begin.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_sequence_iter_is_begin(GSequenceIter *iter)
     * }
     */
    public static MethodHandle g_sequence_iter_is_begin$handle() {
        return g_sequence_iter_is_begin.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_sequence_iter_is_begin(GSequenceIter *iter)
     * }
     */
    public static int g_sequence_iter_is_begin(MemorySegment iter) {
        var mh$ = g_sequence_iter_is_begin.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_iter_is_begin", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_iter_is_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_iter_is_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_sequence_iter_is_end(GSequenceIter *iter)
     * }
     */
    public static FunctionDescriptor g_sequence_iter_is_end$descriptor() {
        return g_sequence_iter_is_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_sequence_iter_is_end(GSequenceIter *iter)
     * }
     */
    public static MethodHandle g_sequence_iter_is_end$handle() {
        return g_sequence_iter_is_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_sequence_iter_is_end(GSequenceIter *iter)
     * }
     */
    public static int g_sequence_iter_is_end(MemorySegment iter) {
        var mh$ = g_sequence_iter_is_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_iter_is_end", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_iter_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_iter_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_iter_next(GSequenceIter *iter)
     * }
     */
    public static FunctionDescriptor g_sequence_iter_next$descriptor() {
        return g_sequence_iter_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_iter_next(GSequenceIter *iter)
     * }
     */
    public static MethodHandle g_sequence_iter_next$handle() {
        return g_sequence_iter_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_iter_next(GSequenceIter *iter)
     * }
     */
    public static MemorySegment g_sequence_iter_next(MemorySegment iter) {
        var mh$ = g_sequence_iter_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_iter_next", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_iter_prev {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_iter_prev"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_iter_prev(GSequenceIter *iter)
     * }
     */
    public static FunctionDescriptor g_sequence_iter_prev$descriptor() {
        return g_sequence_iter_prev.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_iter_prev(GSequenceIter *iter)
     * }
     */
    public static MethodHandle g_sequence_iter_prev$handle() {
        return g_sequence_iter_prev.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_iter_prev(GSequenceIter *iter)
     * }
     */
    public static MemorySegment g_sequence_iter_prev(MemorySegment iter) {
        var mh$ = g_sequence_iter_prev.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_iter_prev", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_iter_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_iter_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_sequence_iter_get_position(GSequenceIter *iter)
     * }
     */
    public static FunctionDescriptor g_sequence_iter_get_position$descriptor() {
        return g_sequence_iter_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_sequence_iter_get_position(GSequenceIter *iter)
     * }
     */
    public static MethodHandle g_sequence_iter_get_position$handle() {
        return g_sequence_iter_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_sequence_iter_get_position(GSequenceIter *iter)
     * }
     */
    public static int g_sequence_iter_get_position(MemorySegment iter) {
        var mh$ = g_sequence_iter_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_iter_get_position", iter);
            }
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_iter_move {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_iter_move"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_iter_move(GSequenceIter *iter, gint delta)
     * }
     */
    public static FunctionDescriptor g_sequence_iter_move$descriptor() {
        return g_sequence_iter_move.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_iter_move(GSequenceIter *iter, gint delta)
     * }
     */
    public static MethodHandle g_sequence_iter_move$handle() {
        return g_sequence_iter_move.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_iter_move(GSequenceIter *iter, gint delta)
     * }
     */
    public static MemorySegment g_sequence_iter_move(MemorySegment iter, int delta) {
        var mh$ = g_sequence_iter_move.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_iter_move", iter, delta);
            }
            return (MemorySegment)mh$.invokeExact(iter, delta);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_iter_get_sequence {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_iter_get_sequence"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequence *g_sequence_iter_get_sequence(GSequenceIter *iter)
     * }
     */
    public static FunctionDescriptor g_sequence_iter_get_sequence$descriptor() {
        return g_sequence_iter_get_sequence.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequence *g_sequence_iter_get_sequence(GSequenceIter *iter)
     * }
     */
    public static MethodHandle g_sequence_iter_get_sequence$handle() {
        return g_sequence_iter_get_sequence.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequence *g_sequence_iter_get_sequence(GSequenceIter *iter)
     * }
     */
    public static MemorySegment g_sequence_iter_get_sequence(MemorySegment iter) {
        var mh$ = g_sequence_iter_get_sequence.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_iter_get_sequence", iter);
            }
            return (MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_iter_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_iter_compare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_sequence_iter_compare(GSequenceIter *a, GSequenceIter *b)
     * }
     */
    public static FunctionDescriptor g_sequence_iter_compare$descriptor() {
        return g_sequence_iter_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_sequence_iter_compare(GSequenceIter *a, GSequenceIter *b)
     * }
     */
    public static MethodHandle g_sequence_iter_compare$handle() {
        return g_sequence_iter_compare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_sequence_iter_compare(GSequenceIter *a, GSequenceIter *b)
     * }
     */
    public static int g_sequence_iter_compare(MemorySegment a, MemorySegment b) {
        var mh$ = g_sequence_iter_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_iter_compare", a, b);
            }
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_sequence_range_get_midpoint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_sequence_range_get_midpoint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_range_get_midpoint(GSequenceIter *begin, GSequenceIter *end)
     * }
     */
    public static FunctionDescriptor g_sequence_range_get_midpoint$descriptor() {
        return g_sequence_range_get_midpoint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_range_get_midpoint(GSequenceIter *begin, GSequenceIter *end)
     * }
     */
    public static MethodHandle g_sequence_range_get_midpoint$handle() {
        return g_sequence_range_get_midpoint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSequenceIter *g_sequence_range_get_midpoint(GSequenceIter *begin, GSequenceIter *end)
     * }
     */
    public static MemorySegment g_sequence_range_get_midpoint(MemorySegment begin, MemorySegment end) {
        var mh$ = g_sequence_range_get_midpoint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_sequence_range_get_midpoint", begin, end);
            }
            return (MemorySegment)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_SHELL_ERROR_BAD_QUOTING = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SHELL_ERROR_BAD_QUOTING = 0
     * }
     */
    public static int G_SHELL_ERROR_BAD_QUOTING() {
        return G_SHELL_ERROR_BAD_QUOTING;
    }
    private static final int G_SHELL_ERROR_EMPTY_STRING = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SHELL_ERROR_EMPTY_STRING = 1
     * }
     */
    public static int G_SHELL_ERROR_EMPTY_STRING() {
        return G_SHELL_ERROR_EMPTY_STRING;
    }
    private static final int G_SHELL_ERROR_FAILED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SHELL_ERROR_FAILED = 2
     * }
     */
    public static int G_SHELL_ERROR_FAILED() {
        return G_SHELL_ERROR_FAILED;
    }

    private static class g_shell_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_shell_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_shell_error_quark()
     * }
     */
    public static FunctionDescriptor g_shell_error_quark$descriptor() {
        return g_shell_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_shell_error_quark()
     * }
     */
    public static MethodHandle g_shell_error_quark$handle() {
        return g_shell_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_shell_error_quark()
     * }
     */
    public static int g_shell_error_quark() {
        var mh$ = g_shell_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_shell_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_shell_quote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_shell_quote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_shell_quote(const gchar *unquoted_string)
     * }
     */
    public static FunctionDescriptor g_shell_quote$descriptor() {
        return g_shell_quote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_shell_quote(const gchar *unquoted_string)
     * }
     */
    public static MethodHandle g_shell_quote$handle() {
        return g_shell_quote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_shell_quote(const gchar *unquoted_string)
     * }
     */
    public static MemorySegment g_shell_quote(MemorySegment unquoted_string) {
        var mh$ = g_shell_quote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_shell_quote", unquoted_string);
            }
            return (MemorySegment)mh$.invokeExact(unquoted_string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_shell_unquote {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_shell_unquote"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_shell_unquote(const gchar *quoted_string, GError **error)
     * }
     */
    public static FunctionDescriptor g_shell_unquote$descriptor() {
        return g_shell_unquote.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_shell_unquote(const gchar *quoted_string, GError **error)
     * }
     */
    public static MethodHandle g_shell_unquote$handle() {
        return g_shell_unquote.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_shell_unquote(const gchar *quoted_string, GError **error)
     * }
     */
    public static MemorySegment g_shell_unquote(MemorySegment quoted_string, MemorySegment error) {
        var mh$ = g_shell_unquote.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_shell_unquote", quoted_string, error);
            }
            return (MemorySegment)mh$.invokeExact(quoted_string, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_shell_parse_argv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_shell_parse_argv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_shell_parse_argv(const gchar *command_line, gint *argcp, gchar ***argvp, GError **error)
     * }
     */
    public static FunctionDescriptor g_shell_parse_argv$descriptor() {
        return g_shell_parse_argv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_shell_parse_argv(const gchar *command_line, gint *argcp, gchar ***argvp, GError **error)
     * }
     */
    public static MethodHandle g_shell_parse_argv$handle() {
        return g_shell_parse_argv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_shell_parse_argv(const gchar *command_line, gint *argcp, gchar ***argvp, GError **error)
     * }
     */
    public static int g_shell_parse_argv(MemorySegment command_line, MemorySegment argcp, MemorySegment argvp, MemorySegment error) {
        var mh$ = g_shell_parse_argv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_shell_parse_argv", command_line, argcp, argvp, error);
            }
            return (int)mh$.invokeExact(command_line, argcp, argvp, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slice_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slice_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_slice_alloc(gsize block_size)
     * }
     */
    public static FunctionDescriptor g_slice_alloc$descriptor() {
        return g_slice_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_slice_alloc(gsize block_size)
     * }
     */
    public static MethodHandle g_slice_alloc$handle() {
        return g_slice_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_slice_alloc(gsize block_size)
     * }
     */
    public static MemorySegment g_slice_alloc(long block_size) {
        var mh$ = g_slice_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slice_alloc", block_size);
            }
            return (MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slice_alloc0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slice_alloc0"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_slice_alloc0(gsize block_size)
     * }
     */
    public static FunctionDescriptor g_slice_alloc0$descriptor() {
        return g_slice_alloc0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_slice_alloc0(gsize block_size)
     * }
     */
    public static MethodHandle g_slice_alloc0$handle() {
        return g_slice_alloc0.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_slice_alloc0(gsize block_size)
     * }
     */
    public static MemorySegment g_slice_alloc0(long block_size) {
        var mh$ = g_slice_alloc0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slice_alloc0", block_size);
            }
            return (MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slice_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slice_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_slice_copy(gsize block_size, gconstpointer mem_block)
     * }
     */
    public static FunctionDescriptor g_slice_copy$descriptor() {
        return g_slice_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_slice_copy(gsize block_size, gconstpointer mem_block)
     * }
     */
    public static MethodHandle g_slice_copy$handle() {
        return g_slice_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_slice_copy(gsize block_size, gconstpointer mem_block)
     * }
     */
    public static MemorySegment g_slice_copy(long block_size, MemorySegment mem_block) {
        var mh$ = g_slice_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slice_copy", block_size, mem_block);
            }
            return (MemorySegment)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slice_free1 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slice_free1"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_slice_free1(gsize block_size, gpointer mem_block)
     * }
     */
    public static FunctionDescriptor g_slice_free1$descriptor() {
        return g_slice_free1.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_slice_free1(gsize block_size, gpointer mem_block)
     * }
     */
    public static MethodHandle g_slice_free1$handle() {
        return g_slice_free1.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_slice_free1(gsize block_size, gpointer mem_block)
     * }
     */
    public static void g_slice_free1(long block_size, MemorySegment mem_block) {
        var mh$ = g_slice_free1.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slice_free1", block_size, mem_block);
            }
            mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slice_free_chain_with_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slice_free_chain_with_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_slice_free_chain_with_offset(gsize block_size, gpointer mem_chain, gsize next_offset)
     * }
     */
    public static FunctionDescriptor g_slice_free_chain_with_offset$descriptor() {
        return g_slice_free_chain_with_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_slice_free_chain_with_offset(gsize block_size, gpointer mem_chain, gsize next_offset)
     * }
     */
    public static MethodHandle g_slice_free_chain_with_offset$handle() {
        return g_slice_free_chain_with_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_slice_free_chain_with_offset(gsize block_size, gpointer mem_chain, gsize next_offset)
     * }
     */
    public static void g_slice_free_chain_with_offset(long block_size, MemorySegment mem_chain, long next_offset) {
        var mh$ = g_slice_free_chain_with_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slice_free_chain_with_offset", block_size, mem_chain, next_offset);
            }
            mh$.invokeExact(block_size, mem_chain, next_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_SLICE_CONFIG_ALWAYS_MALLOC = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SLICE_CONFIG_ALWAYS_MALLOC = 1
     * }
     */
    public static int G_SLICE_CONFIG_ALWAYS_MALLOC() {
        return G_SLICE_CONFIG_ALWAYS_MALLOC;
    }
    private static final int G_SLICE_CONFIG_BYPASS_MAGAZINES = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SLICE_CONFIG_BYPASS_MAGAZINES = 2
     * }
     */
    public static int G_SLICE_CONFIG_BYPASS_MAGAZINES() {
        return G_SLICE_CONFIG_BYPASS_MAGAZINES;
    }
    private static final int G_SLICE_CONFIG_WORKING_SET_MSECS = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SLICE_CONFIG_WORKING_SET_MSECS = 3
     * }
     */
    public static int G_SLICE_CONFIG_WORKING_SET_MSECS() {
        return G_SLICE_CONFIG_WORKING_SET_MSECS;
    }
    private static final int G_SLICE_CONFIG_COLOR_INCREMENT = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SLICE_CONFIG_COLOR_INCREMENT = 4
     * }
     */
    public static int G_SLICE_CONFIG_COLOR_INCREMENT() {
        return G_SLICE_CONFIG_COLOR_INCREMENT;
    }
    private static final int G_SLICE_CONFIG_CHUNK_SIZES = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SLICE_CONFIG_CHUNK_SIZES = 5
     * }
     */
    public static int G_SLICE_CONFIG_CHUNK_SIZES() {
        return G_SLICE_CONFIG_CHUNK_SIZES;
    }
    private static final int G_SLICE_CONFIG_CONTENTION_COUNTER = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SLICE_CONFIG_CONTENTION_COUNTER = 6
     * }
     */
    public static int G_SLICE_CONFIG_CONTENTION_COUNTER() {
        return G_SLICE_CONFIG_CONTENTION_COUNTER;
    }

    private static class g_slice_set_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slice_set_config"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_slice_set_config(GSliceConfig ckey, gint64 value)
     * }
     */
    public static FunctionDescriptor g_slice_set_config$descriptor() {
        return g_slice_set_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_slice_set_config(GSliceConfig ckey, gint64 value)
     * }
     */
    public static MethodHandle g_slice_set_config$handle() {
        return g_slice_set_config.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_slice_set_config(GSliceConfig ckey, gint64 value)
     * }
     */
    public static void g_slice_set_config(int ckey, long value) {
        var mh$ = g_slice_set_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slice_set_config", ckey, value);
            }
            mh$.invokeExact(ckey, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slice_get_config {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slice_get_config"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 g_slice_get_config(GSliceConfig ckey)
     * }
     */
    public static FunctionDescriptor g_slice_get_config$descriptor() {
        return g_slice_get_config.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 g_slice_get_config(GSliceConfig ckey)
     * }
     */
    public static MethodHandle g_slice_get_config$handle() {
        return g_slice_get_config.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 g_slice_get_config(GSliceConfig ckey)
     * }
     */
    public static long g_slice_get_config(int ckey) {
        var mh$ = g_slice_get_config.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slice_get_config", ckey);
            }
            return (long)mh$.invokeExact(ckey);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slice_get_config_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slice_get_config_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint64 *g_slice_get_config_state(GSliceConfig ckey, gint64 address, guint *n_values)
     * }
     */
    public static FunctionDescriptor g_slice_get_config_state$descriptor() {
        return g_slice_get_config_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint64 *g_slice_get_config_state(GSliceConfig ckey, gint64 address, guint *n_values)
     * }
     */
    public static MethodHandle g_slice_get_config_state$handle() {
        return g_slice_get_config_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint64 *g_slice_get_config_state(GSliceConfig ckey, gint64 address, guint *n_values)
     * }
     */
    public static MemorySegment g_slice_get_config_state(int ckey, long address, MemorySegment n_values) {
        var mh$ = g_slice_get_config_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slice_get_config_state", ckey, address, n_values);
            }
            return (MemorySegment)mh$.invokeExact(ckey, address, n_values);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_SPAWN_ERROR_FORK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_FORK = 0
     * }
     */
    public static int G_SPAWN_ERROR_FORK() {
        return G_SPAWN_ERROR_FORK;
    }
    private static final int G_SPAWN_ERROR_READ = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_READ = 1
     * }
     */
    public static int G_SPAWN_ERROR_READ() {
        return G_SPAWN_ERROR_READ;
    }
    private static final int G_SPAWN_ERROR_CHDIR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_CHDIR = 2
     * }
     */
    public static int G_SPAWN_ERROR_CHDIR() {
        return G_SPAWN_ERROR_CHDIR;
    }
    private static final int G_SPAWN_ERROR_ACCES = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_ACCES = 3
     * }
     */
    public static int G_SPAWN_ERROR_ACCES() {
        return G_SPAWN_ERROR_ACCES;
    }
    private static final int G_SPAWN_ERROR_PERM = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_PERM = 4
     * }
     */
    public static int G_SPAWN_ERROR_PERM() {
        return G_SPAWN_ERROR_PERM;
    }
    private static final int G_SPAWN_ERROR_TOO_BIG = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_TOO_BIG = 5
     * }
     */
    public static int G_SPAWN_ERROR_TOO_BIG() {
        return G_SPAWN_ERROR_TOO_BIG;
    }
    private static final int G_SPAWN_ERROR_2BIG = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_2BIG = 5
     * }
     */
    public static int G_SPAWN_ERROR_2BIG() {
        return G_SPAWN_ERROR_2BIG;
    }
    private static final int G_SPAWN_ERROR_NOEXEC = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_NOEXEC = 6
     * }
     */
    public static int G_SPAWN_ERROR_NOEXEC() {
        return G_SPAWN_ERROR_NOEXEC;
    }
    private static final int G_SPAWN_ERROR_NAMETOOLONG = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_NAMETOOLONG = 7
     * }
     */
    public static int G_SPAWN_ERROR_NAMETOOLONG() {
        return G_SPAWN_ERROR_NAMETOOLONG;
    }
    private static final int G_SPAWN_ERROR_NOENT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_NOENT = 8
     * }
     */
    public static int G_SPAWN_ERROR_NOENT() {
        return G_SPAWN_ERROR_NOENT;
    }
    private static final int G_SPAWN_ERROR_NOMEM = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_NOMEM = 9
     * }
     */
    public static int G_SPAWN_ERROR_NOMEM() {
        return G_SPAWN_ERROR_NOMEM;
    }
    private static final int G_SPAWN_ERROR_NOTDIR = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_NOTDIR = 10
     * }
     */
    public static int G_SPAWN_ERROR_NOTDIR() {
        return G_SPAWN_ERROR_NOTDIR;
    }
    private static final int G_SPAWN_ERROR_LOOP = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_LOOP = 11
     * }
     */
    public static int G_SPAWN_ERROR_LOOP() {
        return G_SPAWN_ERROR_LOOP;
    }
    private static final int G_SPAWN_ERROR_TXTBUSY = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_TXTBUSY = 12
     * }
     */
    public static int G_SPAWN_ERROR_TXTBUSY() {
        return G_SPAWN_ERROR_TXTBUSY;
    }
    private static final int G_SPAWN_ERROR_IO = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_IO = 13
     * }
     */
    public static int G_SPAWN_ERROR_IO() {
        return G_SPAWN_ERROR_IO;
    }
    private static final int G_SPAWN_ERROR_NFILE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_NFILE = 14
     * }
     */
    public static int G_SPAWN_ERROR_NFILE() {
        return G_SPAWN_ERROR_NFILE;
    }
    private static final int G_SPAWN_ERROR_MFILE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_MFILE = 15
     * }
     */
    public static int G_SPAWN_ERROR_MFILE() {
        return G_SPAWN_ERROR_MFILE;
    }
    private static final int G_SPAWN_ERROR_INVAL = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_INVAL = 16
     * }
     */
    public static int G_SPAWN_ERROR_INVAL() {
        return G_SPAWN_ERROR_INVAL;
    }
    private static final int G_SPAWN_ERROR_ISDIR = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_ISDIR = 17
     * }
     */
    public static int G_SPAWN_ERROR_ISDIR() {
        return G_SPAWN_ERROR_ISDIR;
    }
    private static final int G_SPAWN_ERROR_LIBBAD = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_LIBBAD = 18
     * }
     */
    public static int G_SPAWN_ERROR_LIBBAD() {
        return G_SPAWN_ERROR_LIBBAD;
    }
    private static final int G_SPAWN_ERROR_FAILED = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_ERROR_FAILED = 19
     * }
     */
    public static int G_SPAWN_ERROR_FAILED() {
        return G_SPAWN_ERROR_FAILED;
    }
    private static final int G_SPAWN_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_DEFAULT = 0
     * }
     */
    public static int G_SPAWN_DEFAULT() {
        return G_SPAWN_DEFAULT;
    }
    private static final int G_SPAWN_LEAVE_DESCRIPTORS_OPEN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1
     * }
     */
    public static int G_SPAWN_LEAVE_DESCRIPTORS_OPEN() {
        return G_SPAWN_LEAVE_DESCRIPTORS_OPEN;
    }
    private static final int G_SPAWN_DO_NOT_REAP_CHILD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_DO_NOT_REAP_CHILD = 2
     * }
     */
    public static int G_SPAWN_DO_NOT_REAP_CHILD() {
        return G_SPAWN_DO_NOT_REAP_CHILD;
    }
    private static final int G_SPAWN_SEARCH_PATH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_SEARCH_PATH = 4
     * }
     */
    public static int G_SPAWN_SEARCH_PATH() {
        return G_SPAWN_SEARCH_PATH;
    }
    private static final int G_SPAWN_STDOUT_TO_DEV_NULL = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_STDOUT_TO_DEV_NULL = 8
     * }
     */
    public static int G_SPAWN_STDOUT_TO_DEV_NULL() {
        return G_SPAWN_STDOUT_TO_DEV_NULL;
    }
    private static final int G_SPAWN_STDERR_TO_DEV_NULL = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_STDERR_TO_DEV_NULL = 16
     * }
     */
    public static int G_SPAWN_STDERR_TO_DEV_NULL() {
        return G_SPAWN_STDERR_TO_DEV_NULL;
    }
    private static final int G_SPAWN_CHILD_INHERITS_STDIN = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_CHILD_INHERITS_STDIN = 32
     * }
     */
    public static int G_SPAWN_CHILD_INHERITS_STDIN() {
        return G_SPAWN_CHILD_INHERITS_STDIN;
    }
    private static final int G_SPAWN_FILE_AND_ARGV_ZERO = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_FILE_AND_ARGV_ZERO = 64
     * }
     */
    public static int G_SPAWN_FILE_AND_ARGV_ZERO() {
        return G_SPAWN_FILE_AND_ARGV_ZERO;
    }
    private static final int G_SPAWN_SEARCH_PATH_FROM_ENVP = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_SEARCH_PATH_FROM_ENVP = 128
     * }
     */
    public static int G_SPAWN_SEARCH_PATH_FROM_ENVP() {
        return G_SPAWN_SEARCH_PATH_FROM_ENVP;
    }
    private static final int G_SPAWN_CLOEXEC_PIPES = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_CLOEXEC_PIPES = 256
     * }
     */
    public static int G_SPAWN_CLOEXEC_PIPES() {
        return G_SPAWN_CLOEXEC_PIPES;
    }
    private static final int G_SPAWN_CHILD_INHERITS_STDOUT = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_CHILD_INHERITS_STDOUT = 512
     * }
     */
    public static int G_SPAWN_CHILD_INHERITS_STDOUT() {
        return G_SPAWN_CHILD_INHERITS_STDOUT;
    }
    private static final int G_SPAWN_CHILD_INHERITS_STDERR = (int)1024L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_CHILD_INHERITS_STDERR = 1024
     * }
     */
    public static int G_SPAWN_CHILD_INHERITS_STDERR() {
        return G_SPAWN_CHILD_INHERITS_STDERR;
    }
    private static final int G_SPAWN_STDIN_FROM_DEV_NULL = (int)2048L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_SPAWN_STDIN_FROM_DEV_NULL = 2048
     * }
     */
    public static int G_SPAWN_STDIN_FROM_DEV_NULL() {
        return G_SPAWN_STDIN_FROM_DEV_NULL;
    }

    private static class g_spawn_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_spawn_error_quark()
     * }
     */
    public static FunctionDescriptor g_spawn_error_quark$descriptor() {
        return g_spawn_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_spawn_error_quark()
     * }
     */
    public static MethodHandle g_spawn_error_quark$handle() {
        return g_spawn_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_spawn_error_quark()
     * }
     */
    public static int g_spawn_error_quark() {
        var mh$ = g_spawn_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_exit_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_exit_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_spawn_exit_error_quark()
     * }
     */
    public static FunctionDescriptor g_spawn_exit_error_quark$descriptor() {
        return g_spawn_exit_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_spawn_exit_error_quark()
     * }
     */
    public static MethodHandle g_spawn_exit_error_quark$handle() {
        return g_spawn_exit_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_spawn_exit_error_quark()
     * }
     */
    public static int g_spawn_exit_error_quark() {
        var mh$ = g_spawn_exit_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_exit_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_async(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, GError **error)
     * }
     */
    public static FunctionDescriptor g_spawn_async$descriptor() {
        return g_spawn_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_async(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, GError **error)
     * }
     */
    public static MethodHandle g_spawn_async$handle() {
        return g_spawn_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_spawn_async(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, GError **error)
     * }
     */
    public static int g_spawn_async(MemorySegment working_directory, MemorySegment argv, MemorySegment envp, int flags, MemorySegment child_setup, MemorySegment user_data, MemorySegment child_pid, MemorySegment error) {
        var mh$ = g_spawn_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_async", working_directory, argv, envp, flags, child_setup, user_data, child_pid, error);
            }
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_async_with_pipes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_async_with_pipes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_async_with_pipes(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint *standard_input, gint *standard_output, gint *standard_error, GError **error)
     * }
     */
    public static FunctionDescriptor g_spawn_async_with_pipes$descriptor() {
        return g_spawn_async_with_pipes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_async_with_pipes(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint *standard_input, gint *standard_output, gint *standard_error, GError **error)
     * }
     */
    public static MethodHandle g_spawn_async_with_pipes$handle() {
        return g_spawn_async_with_pipes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_spawn_async_with_pipes(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint *standard_input, gint *standard_output, gint *standard_error, GError **error)
     * }
     */
    public static int g_spawn_async_with_pipes(MemorySegment working_directory, MemorySegment argv, MemorySegment envp, int flags, MemorySegment child_setup, MemorySegment user_data, MemorySegment child_pid, MemorySegment standard_input, MemorySegment standard_output, MemorySegment standard_error, MemorySegment error) {
        var mh$ = g_spawn_async_with_pipes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_async_with_pipes", working_directory, argv, envp, flags, child_setup, user_data, child_pid, standard_input, standard_output, standard_error, error);
            }
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, standard_input, standard_output, standard_error, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_async_with_pipes_and_fds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_async_with_pipes_and_fds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_async_with_pipes_and_fds(const gchar *working_directory, const gchar *const *argv, const gchar *const *envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gint stdin_fd, gint stdout_fd, gint stderr_fd, const gint *source_fds, const gint *target_fds, gsize n_fds, GPid *child_pid_out, gint *stdin_pipe_out, gint *stdout_pipe_out, gint *stderr_pipe_out, GError **error)
     * }
     */
    public static FunctionDescriptor g_spawn_async_with_pipes_and_fds$descriptor() {
        return g_spawn_async_with_pipes_and_fds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_async_with_pipes_and_fds(const gchar *working_directory, const gchar *const *argv, const gchar *const *envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gint stdin_fd, gint stdout_fd, gint stderr_fd, const gint *source_fds, const gint *target_fds, gsize n_fds, GPid *child_pid_out, gint *stdin_pipe_out, gint *stdout_pipe_out, gint *stderr_pipe_out, GError **error)
     * }
     */
    public static MethodHandle g_spawn_async_with_pipes_and_fds$handle() {
        return g_spawn_async_with_pipes_and_fds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_spawn_async_with_pipes_and_fds(const gchar *working_directory, const gchar *const *argv, const gchar *const *envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gint stdin_fd, gint stdout_fd, gint stderr_fd, const gint *source_fds, const gint *target_fds, gsize n_fds, GPid *child_pid_out, gint *stdin_pipe_out, gint *stdout_pipe_out, gint *stderr_pipe_out, GError **error)
     * }
     */
    public static int g_spawn_async_with_pipes_and_fds(MemorySegment working_directory, MemorySegment argv, MemorySegment envp, int flags, MemorySegment child_setup, MemorySegment user_data, int stdin_fd, int stdout_fd, int stderr_fd, MemorySegment source_fds, MemorySegment target_fds, long n_fds, MemorySegment child_pid_out, MemorySegment stdin_pipe_out, MemorySegment stdout_pipe_out, MemorySegment stderr_pipe_out, MemorySegment error) {
        var mh$ = g_spawn_async_with_pipes_and_fds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_async_with_pipes_and_fds", working_directory, argv, envp, flags, child_setup, user_data, stdin_fd, stdout_fd, stderr_fd, source_fds, target_fds, n_fds, child_pid_out, stdin_pipe_out, stdout_pipe_out, stderr_pipe_out, error);
            }
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, stdin_fd, stdout_fd, stderr_fd, source_fds, target_fds, n_fds, child_pid_out, stdin_pipe_out, stdout_pipe_out, stderr_pipe_out, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_async_with_fds {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_async_with_fds"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_async_with_fds(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint stdin_fd, gint stdout_fd, gint stderr_fd, GError **error)
     * }
     */
    public static FunctionDescriptor g_spawn_async_with_fds$descriptor() {
        return g_spawn_async_with_fds.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_async_with_fds(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint stdin_fd, gint stdout_fd, gint stderr_fd, GError **error)
     * }
     */
    public static MethodHandle g_spawn_async_with_fds$handle() {
        return g_spawn_async_with_fds.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_spawn_async_with_fds(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, GPid *child_pid, gint stdin_fd, gint stdout_fd, gint stderr_fd, GError **error)
     * }
     */
    public static int g_spawn_async_with_fds(MemorySegment working_directory, MemorySegment argv, MemorySegment envp, int flags, MemorySegment child_setup, MemorySegment user_data, MemorySegment child_pid, int stdin_fd, int stdout_fd, int stderr_fd, MemorySegment error) {
        var mh$ = g_spawn_async_with_fds.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_async_with_fds", working_directory, argv, envp, flags, child_setup, user_data, child_pid, stdin_fd, stdout_fd, stderr_fd, error);
            }
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, stdin_fd, stdout_fd, stderr_fd, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_sync(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar **standard_output, gchar **standard_error, gint *wait_status, GError **error)
     * }
     */
    public static FunctionDescriptor g_spawn_sync$descriptor() {
        return g_spawn_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_sync(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar **standard_output, gchar **standard_error, gint *wait_status, GError **error)
     * }
     */
    public static MethodHandle g_spawn_sync$handle() {
        return g_spawn_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_spawn_sync(const gchar *working_directory, gchar **argv, gchar **envp, GSpawnFlags flags, GSpawnChildSetupFunc child_setup, gpointer user_data, gchar **standard_output, gchar **standard_error, gint *wait_status, GError **error)
     * }
     */
    public static int g_spawn_sync(MemorySegment working_directory, MemorySegment argv, MemorySegment envp, int flags, MemorySegment child_setup, MemorySegment user_data, MemorySegment standard_output, MemorySegment standard_error, MemorySegment wait_status, MemorySegment error) {
        var mh$ = g_spawn_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_sync", working_directory, argv, envp, flags, child_setup, user_data, standard_output, standard_error, wait_status, error);
            }
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, standard_output, standard_error, wait_status, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_command_line_sync {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_command_line_sync"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_command_line_sync(const gchar *command_line, gchar **standard_output, gchar **standard_error, gint *wait_status, GError **error)
     * }
     */
    public static FunctionDescriptor g_spawn_command_line_sync$descriptor() {
        return g_spawn_command_line_sync.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_command_line_sync(const gchar *command_line, gchar **standard_output, gchar **standard_error, gint *wait_status, GError **error)
     * }
     */
    public static MethodHandle g_spawn_command_line_sync$handle() {
        return g_spawn_command_line_sync.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_spawn_command_line_sync(const gchar *command_line, gchar **standard_output, gchar **standard_error, gint *wait_status, GError **error)
     * }
     */
    public static int g_spawn_command_line_sync(MemorySegment command_line, MemorySegment standard_output, MemorySegment standard_error, MemorySegment wait_status, MemorySegment error) {
        var mh$ = g_spawn_command_line_sync.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_command_line_sync", command_line, standard_output, standard_error, wait_status, error);
            }
            return (int)mh$.invokeExact(command_line, standard_output, standard_error, wait_status, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_command_line_async {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_command_line_async"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_command_line_async(const gchar *command_line, GError **error)
     * }
     */
    public static FunctionDescriptor g_spawn_command_line_async$descriptor() {
        return g_spawn_command_line_async.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_command_line_async(const gchar *command_line, GError **error)
     * }
     */
    public static MethodHandle g_spawn_command_line_async$handle() {
        return g_spawn_command_line_async.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_spawn_command_line_async(const gchar *command_line, GError **error)
     * }
     */
    public static int g_spawn_command_line_async(MemorySegment command_line, MemorySegment error) {
        var mh$ = g_spawn_command_line_async.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_command_line_async", command_line, error);
            }
            return (int)mh$.invokeExact(command_line, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_check_wait_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_check_wait_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_check_wait_status(gint wait_status, GError **error)
     * }
     */
    public static FunctionDescriptor g_spawn_check_wait_status$descriptor() {
        return g_spawn_check_wait_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_check_wait_status(gint wait_status, GError **error)
     * }
     */
    public static MethodHandle g_spawn_check_wait_status$handle() {
        return g_spawn_check_wait_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_spawn_check_wait_status(gint wait_status, GError **error)
     * }
     */
    public static int g_spawn_check_wait_status(int wait_status, MemorySegment error) {
        var mh$ = g_spawn_check_wait_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_check_wait_status", wait_status, error);
            }
            return (int)mh$.invokeExact(wait_status, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_check_exit_status {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_check_exit_status"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_check_exit_status(gint wait_status, GError **error)
     * }
     */
    public static FunctionDescriptor g_spawn_check_exit_status$descriptor() {
        return g_spawn_check_exit_status.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_spawn_check_exit_status(gint wait_status, GError **error)
     * }
     */
    public static MethodHandle g_spawn_check_exit_status$handle() {
        return g_spawn_check_exit_status.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_spawn_check_exit_status(gint wait_status, GError **error)
     * }
     */
    public static int g_spawn_check_exit_status(int wait_status, MemorySegment error) {
        var mh$ = g_spawn_check_exit_status.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_check_exit_status", wait_status, error);
            }
            return (int)mh$.invokeExact(wait_status, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_spawn_close_pid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_spawn_close_pid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_spawn_close_pid(GPid pid)
     * }
     */
    public static FunctionDescriptor g_spawn_close_pid$descriptor() {
        return g_spawn_close_pid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_spawn_close_pid(GPid pid)
     * }
     */
    public static MethodHandle g_spawn_close_pid$handle() {
        return g_spawn_close_pid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_spawn_close_pid(GPid pid)
     * }
     */
    public static void g_spawn_close_pid(int pid) {
        var mh$ = g_spawn_close_pid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_spawn_close_pid", pid);
            }
            mh$.invokeExact(pid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_chunk_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_chunk_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GStringChunk *g_string_chunk_new(gsize size)
     * }
     */
    public static FunctionDescriptor g_string_chunk_new$descriptor() {
        return g_string_chunk_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GStringChunk *g_string_chunk_new(gsize size)
     * }
     */
    public static MethodHandle g_string_chunk_new$handle() {
        return g_string_chunk_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GStringChunk *g_string_chunk_new(gsize size)
     * }
     */
    public static MemorySegment g_string_chunk_new(long size) {
        var mh$ = g_string_chunk_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_chunk_new", size);
            }
            return (MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_chunk_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_chunk_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_string_chunk_free(GStringChunk *chunk)
     * }
     */
    public static FunctionDescriptor g_string_chunk_free$descriptor() {
        return g_string_chunk_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_string_chunk_free(GStringChunk *chunk)
     * }
     */
    public static MethodHandle g_string_chunk_free$handle() {
        return g_string_chunk_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_string_chunk_free(GStringChunk *chunk)
     * }
     */
    public static void g_string_chunk_free(MemorySegment chunk) {
        var mh$ = g_string_chunk_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_chunk_free", chunk);
            }
            mh$.invokeExact(chunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_chunk_clear {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_chunk_clear"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_string_chunk_clear(GStringChunk *chunk)
     * }
     */
    public static FunctionDescriptor g_string_chunk_clear$descriptor() {
        return g_string_chunk_clear.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_string_chunk_clear(GStringChunk *chunk)
     * }
     */
    public static MethodHandle g_string_chunk_clear$handle() {
        return g_string_chunk_clear.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_string_chunk_clear(GStringChunk *chunk)
     * }
     */
    public static void g_string_chunk_clear(MemorySegment chunk) {
        var mh$ = g_string_chunk_clear.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_chunk_clear", chunk);
            }
            mh$.invokeExact(chunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_chunk_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_chunk_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_string_chunk_insert(GStringChunk *chunk, const gchar *string)
     * }
     */
    public static FunctionDescriptor g_string_chunk_insert$descriptor() {
        return g_string_chunk_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_string_chunk_insert(GStringChunk *chunk, const gchar *string)
     * }
     */
    public static MethodHandle g_string_chunk_insert$handle() {
        return g_string_chunk_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_string_chunk_insert(GStringChunk *chunk, const gchar *string)
     * }
     */
    public static MemorySegment g_string_chunk_insert(MemorySegment chunk, MemorySegment string) {
        var mh$ = g_string_chunk_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_chunk_insert", chunk, string);
            }
            return (MemorySegment)mh$.invokeExact(chunk, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_chunk_insert_len {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_chunk_insert_len"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_string_chunk_insert_len(GStringChunk *chunk, const gchar *string, gssize len)
     * }
     */
    public static FunctionDescriptor g_string_chunk_insert_len$descriptor() {
        return g_string_chunk_insert_len.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_string_chunk_insert_len(GStringChunk *chunk, const gchar *string, gssize len)
     * }
     */
    public static MethodHandle g_string_chunk_insert_len$handle() {
        return g_string_chunk_insert_len.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_string_chunk_insert_len(GStringChunk *chunk, const gchar *string, gssize len)
     * }
     */
    public static MemorySegment g_string_chunk_insert_len(MemorySegment chunk, MemorySegment string, long len) {
        var mh$ = g_string_chunk_insert_len.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_chunk_insert_len", chunk, string, len);
            }
            return (MemorySegment)mh$.invokeExact(chunk, string, len);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_string_chunk_insert_const {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_string_chunk_insert_const"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_string_chunk_insert_const(GStringChunk *chunk, const gchar *string)
     * }
     */
    public static FunctionDescriptor g_string_chunk_insert_const$descriptor() {
        return g_string_chunk_insert_const.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_string_chunk_insert_const(GStringChunk *chunk, const gchar *string)
     * }
     */
    public static MethodHandle g_string_chunk_insert_const$handle() {
        return g_string_chunk_insert_const.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_string_chunk_insert_const(GStringChunk *chunk, const gchar *string)
     * }
     */
    public static MemorySegment g_string_chunk_insert_const(MemorySegment chunk, MemorySegment string) {
        var mh$ = g_string_chunk_insert_const.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_string_chunk_insert_const", chunk, string);
            }
            return (MemorySegment)mh$.invokeExact(chunk, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strv_builder_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strv_builder_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GStrvBuilder *g_strv_builder_new()
     * }
     */
    public static FunctionDescriptor g_strv_builder_new$descriptor() {
        return g_strv_builder_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GStrvBuilder *g_strv_builder_new()
     * }
     */
    public static MethodHandle g_strv_builder_new$handle() {
        return g_strv_builder_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GStrvBuilder *g_strv_builder_new()
     * }
     */
    public static MemorySegment g_strv_builder_new() {
        var mh$ = g_strv_builder_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strv_builder_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strv_builder_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strv_builder_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_strv_builder_unref(GStrvBuilder *builder)
     * }
     */
    public static FunctionDescriptor g_strv_builder_unref$descriptor() {
        return g_strv_builder_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_strv_builder_unref(GStrvBuilder *builder)
     * }
     */
    public static MethodHandle g_strv_builder_unref$handle() {
        return g_strv_builder_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_strv_builder_unref(GStrvBuilder *builder)
     * }
     */
    public static void g_strv_builder_unref(MemorySegment builder) {
        var mh$ = g_strv_builder_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strv_builder_unref", builder);
            }
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strv_builder_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strv_builder_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GStrvBuilder *g_strv_builder_ref(GStrvBuilder *builder)
     * }
     */
    public static FunctionDescriptor g_strv_builder_ref$descriptor() {
        return g_strv_builder_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GStrvBuilder *g_strv_builder_ref(GStrvBuilder *builder)
     * }
     */
    public static MethodHandle g_strv_builder_ref$handle() {
        return g_strv_builder_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GStrvBuilder *g_strv_builder_ref(GStrvBuilder *builder)
     * }
     */
    public static MemorySegment g_strv_builder_ref(MemorySegment builder) {
        var mh$ = g_strv_builder_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strv_builder_ref", builder);
            }
            return (MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strv_builder_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strv_builder_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_strv_builder_add(GStrvBuilder *builder, const char *value)
     * }
     */
    public static FunctionDescriptor g_strv_builder_add$descriptor() {
        return g_strv_builder_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_strv_builder_add(GStrvBuilder *builder, const char *value)
     * }
     */
    public static MethodHandle g_strv_builder_add$handle() {
        return g_strv_builder_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_strv_builder_add(GStrvBuilder *builder, const char *value)
     * }
     */
    public static void g_strv_builder_add(MemorySegment builder, MemorySegment value) {
        var mh$ = g_strv_builder_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strv_builder_add", builder, value);
            }
            mh$.invokeExact(builder, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strv_builder_addv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strv_builder_addv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_strv_builder_addv(GStrvBuilder *builder, const char **value)
     * }
     */
    public static FunctionDescriptor g_strv_builder_addv$descriptor() {
        return g_strv_builder_addv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_strv_builder_addv(GStrvBuilder *builder, const char **value)
     * }
     */
    public static MethodHandle g_strv_builder_addv$handle() {
        return g_strv_builder_addv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_strv_builder_addv(GStrvBuilder *builder, const char **value)
     * }
     */
    public static void g_strv_builder_addv(MemorySegment builder, MemorySegment value) {
        var mh$ = g_strv_builder_addv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strv_builder_addv", builder, value);
            }
            mh$.invokeExact(builder, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_strv_builder_add_many(GStrvBuilder *builder, ...)
     * }
     */
    public static class g_strv_builder_add_many {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_strv_builder_add_many");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_strv_builder_add_many(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_strv_builder_add_many(GStrvBuilder *builder, ...)
         * }
         */
        public static g_strv_builder_add_many makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_strv_builder_add_many(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment builder, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_strv_builder_add_many", builder, x1);
                }
                spreader.invokeExact(builder, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_strv_builder_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strv_builder_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GStrv g_strv_builder_end(GStrvBuilder *builder)
     * }
     */
    public static FunctionDescriptor g_strv_builder_end$descriptor() {
        return g_strv_builder_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GStrv g_strv_builder_end(GStrvBuilder *builder)
     * }
     */
    public static MethodHandle g_strv_builder_end$handle() {
        return g_strv_builder_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GStrv g_strv_builder_end(GStrvBuilder *builder)
     * }
     */
    public static MemorySegment g_strv_builder_end(MemorySegment builder) {
        var mh$ = g_strv_builder_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strv_builder_end", builder);
            }
            return (MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __errno_location {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__errno_location"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int *__errno_location()
     * }
     */
    public static FunctionDescriptor __errno_location$descriptor() {
        return __errno_location.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int *__errno_location()
     * }
     */
    public static MethodHandle __errno_location$handle() {
        return __errno_location.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int *__errno_location()
     * }
     */
    public static MemorySegment __errno_location() {
        var mh$ = __errno_location.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__errno_location");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_strcmp0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_strcmp0"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_strcmp0(const char *str1, const char *str2)
     * }
     */
    public static FunctionDescriptor g_strcmp0$descriptor() {
        return g_strcmp0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_strcmp0(const char *str1, const char *str2)
     * }
     */
    public static MethodHandle g_strcmp0$handle() {
        return g_strcmp0.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_strcmp0(const char *str1, const char *str2)
     * }
     */
    public static int g_strcmp0(MemorySegment str1, MemorySegment str2) {
        var mh$ = g_strcmp0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_strcmp0", str1, str2);
            }
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_test_minimized_result(double minimized_quantity, const char *format, ...)
     * }
     */
    public static class g_test_minimized_result {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_DOUBLE,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_test_minimized_result");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_test_minimized_result(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_test_minimized_result(double minimized_quantity, const char *format, ...)
         * }
         */
        public static g_test_minimized_result makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_test_minimized_result(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(double minimized_quantity, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_test_minimized_result", minimized_quantity, format, x2);
                }
                spreader.invokeExact(minimized_quantity, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_test_maximized_result(double maximized_quantity, const char *format, ...)
     * }
     */
    public static class g_test_maximized_result {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_DOUBLE,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_test_maximized_result");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_test_maximized_result(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_test_maximized_result(double maximized_quantity, const char *format, ...)
         * }
         */
        public static g_test_maximized_result makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_test_maximized_result(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(double maximized_quantity, MemorySegment format, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_test_maximized_result", maximized_quantity, format, x2);
                }
                spreader.invokeExact(maximized_quantity, format, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_test_init(int *argc, char ***argv, ...)
     * }
     */
    public static class g_test_init {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_test_init");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_test_init(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_test_init(int *argc, char ***argv, ...)
         * }
         */
        public static g_test_init makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_test_init(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment argc, MemorySegment argv, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_test_init", argc, argv, x2);
                }
                spreader.invokeExact(argc, argv, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_test_subprocess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_subprocess"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_test_subprocess()
     * }
     */
    public static FunctionDescriptor g_test_subprocess$descriptor() {
        return g_test_subprocess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_test_subprocess()
     * }
     */
    public static MethodHandle g_test_subprocess$handle() {
        return g_test_subprocess.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_test_subprocess()
     * }
     */
    public static int g_test_subprocess() {
        var mh$ = g_test_subprocess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_subprocess");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_run {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_run"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_test_run()
     * }
     */
    public static FunctionDescriptor g_test_run$descriptor() {
        return g_test_run.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_test_run()
     * }
     */
    public static MethodHandle g_test_run$handle() {
        return g_test_run.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_test_run()
     * }
     */
    public static int g_test_run() {
        var mh$ = g_test_run.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_run");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_add_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_add_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_add_func(const char *testpath, GTestFunc test_func)
     * }
     */
    public static FunctionDescriptor g_test_add_func$descriptor() {
        return g_test_add_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_add_func(const char *testpath, GTestFunc test_func)
     * }
     */
    public static MethodHandle g_test_add_func$handle() {
        return g_test_add_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_add_func(const char *testpath, GTestFunc test_func)
     * }
     */
    public static void g_test_add_func(MemorySegment testpath, MemorySegment test_func) {
        var mh$ = g_test_add_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_add_func", testpath, test_func);
            }
            mh$.invokeExact(testpath, test_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_add_data_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_add_data_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_add_data_func(const char *testpath, gconstpointer test_data, GTestDataFunc test_func)
     * }
     */
    public static FunctionDescriptor g_test_add_data_func$descriptor() {
        return g_test_add_data_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_add_data_func(const char *testpath, gconstpointer test_data, GTestDataFunc test_func)
     * }
     */
    public static MethodHandle g_test_add_data_func$handle() {
        return g_test_add_data_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_add_data_func(const char *testpath, gconstpointer test_data, GTestDataFunc test_func)
     * }
     */
    public static void g_test_add_data_func(MemorySegment testpath, MemorySegment test_data, MemorySegment test_func) {
        var mh$ = g_test_add_data_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_add_data_func", testpath, test_data, test_func);
            }
            mh$.invokeExact(testpath, test_data, test_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_add_data_func_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_add_data_func_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_add_data_func_full(const char *testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func)
     * }
     */
    public static FunctionDescriptor g_test_add_data_func_full$descriptor() {
        return g_test_add_data_func_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_add_data_func_full(const char *testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func)
     * }
     */
    public static MethodHandle g_test_add_data_func_full$handle() {
        return g_test_add_data_func_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_add_data_func_full(const char *testpath, gpointer test_data, GTestDataFunc test_func, GDestroyNotify data_free_func)
     * }
     */
    public static void g_test_add_data_func_full(MemorySegment testpath, MemorySegment test_data, MemorySegment test_func, MemorySegment data_free_func) {
        var mh$ = g_test_add_data_func_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_add_data_func_full", testpath, test_data, test_func, data_free_func);
            }
            mh$.invokeExact(testpath, test_data, test_func, data_free_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_test_get_path()
     * }
     */
    public static FunctionDescriptor g_test_get_path$descriptor() {
        return g_test_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_test_get_path()
     * }
     */
    public static MethodHandle g_test_get_path$handle() {
        return g_test_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_test_get_path()
     * }
     */
    public static MemorySegment g_test_get_path() {
        var mh$ = g_test_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_get_path");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_fail {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_fail"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_fail()
     * }
     */
    public static FunctionDescriptor g_test_fail$descriptor() {
        return g_test_fail.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_fail()
     * }
     */
    public static MethodHandle g_test_fail$handle() {
        return g_test_fail.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_fail()
     * }
     */
    public static void g_test_fail() {
        var mh$ = g_test_fail.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_fail");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_test_fail_printf(const char *format, ...)
     * }
     */
    public static class g_test_fail_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_test_fail_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_test_fail_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_test_fail_printf(const char *format, ...)
         * }
         */
        public static g_test_fail_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_test_fail_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_test_fail_printf", format, x1);
                }
                spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_test_incomplete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_incomplete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_incomplete(const gchar *msg)
     * }
     */
    public static FunctionDescriptor g_test_incomplete$descriptor() {
        return g_test_incomplete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_incomplete(const gchar *msg)
     * }
     */
    public static MethodHandle g_test_incomplete$handle() {
        return g_test_incomplete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_incomplete(const gchar *msg)
     * }
     */
    public static void g_test_incomplete(MemorySegment msg) {
        var mh$ = g_test_incomplete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_incomplete", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_test_incomplete_printf(const char *format, ...)
     * }
     */
    public static class g_test_incomplete_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_test_incomplete_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_test_incomplete_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_test_incomplete_printf(const char *format, ...)
         * }
         */
        public static g_test_incomplete_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_test_incomplete_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_test_incomplete_printf", format, x1);
                }
                spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_test_skip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_skip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_skip(const gchar *msg)
     * }
     */
    public static FunctionDescriptor g_test_skip$descriptor() {
        return g_test_skip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_skip(const gchar *msg)
     * }
     */
    public static MethodHandle g_test_skip$handle() {
        return g_test_skip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_skip(const gchar *msg)
     * }
     */
    public static void g_test_skip(MemorySegment msg) {
        var mh$ = g_test_skip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_skip", msg);
            }
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_test_skip_printf(const char *format, ...)
     * }
     */
    public static class g_test_skip_printf {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_test_skip_printf");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_test_skip_printf(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_test_skip_printf(const char *format, ...)
         * }
         */
        public static g_test_skip_printf makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_test_skip_printf(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_test_skip_printf", format, x1);
                }
                spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_test_failed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_failed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_test_failed()
     * }
     */
    public static FunctionDescriptor g_test_failed$descriptor() {
        return g_test_failed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_test_failed()
     * }
     */
    public static MethodHandle g_test_failed$handle() {
        return g_test_failed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_test_failed()
     * }
     */
    public static int g_test_failed() {
        var mh$ = g_test_failed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_failed");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_set_nonfatal_assertions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_set_nonfatal_assertions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_set_nonfatal_assertions()
     * }
     */
    public static FunctionDescriptor g_test_set_nonfatal_assertions$descriptor() {
        return g_test_set_nonfatal_assertions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_set_nonfatal_assertions()
     * }
     */
    public static MethodHandle g_test_set_nonfatal_assertions$handle() {
        return g_test_set_nonfatal_assertions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_set_nonfatal_assertions()
     * }
     */
    public static void g_test_set_nonfatal_assertions() {
        var mh$ = g_test_set_nonfatal_assertions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_set_nonfatal_assertions");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_disable_crash_reporting {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_disable_crash_reporting"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_disable_crash_reporting()
     * }
     */
    public static FunctionDescriptor g_test_disable_crash_reporting$descriptor() {
        return g_test_disable_crash_reporting.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_disable_crash_reporting()
     * }
     */
    public static MethodHandle g_test_disable_crash_reporting$handle() {
        return g_test_disable_crash_reporting.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_disable_crash_reporting()
     * }
     */
    public static void g_test_disable_crash_reporting() {
        var mh$ = g_test_disable_crash_reporting.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_disable_crash_reporting");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_test_message(const char *format, ...)
     * }
     */
    public static class g_test_message {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_test_message");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_test_message(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_test_message(const char *format, ...)
         * }
         */
        public static g_test_message makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_test_message(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment format, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_test_message", format, x1);
                }
                spreader.invokeExact(format, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_test_bug_base {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_bug_base"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_bug_base(const char *uri_pattern)
     * }
     */
    public static FunctionDescriptor g_test_bug_base$descriptor() {
        return g_test_bug_base.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_bug_base(const char *uri_pattern)
     * }
     */
    public static MethodHandle g_test_bug_base$handle() {
        return g_test_bug_base.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_bug_base(const char *uri_pattern)
     * }
     */
    public static void g_test_bug_base(MemorySegment uri_pattern) {
        var mh$ = g_test_bug_base.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_bug_base", uri_pattern);
            }
            mh$.invokeExact(uri_pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_bug {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_bug"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_bug(const char *bug_uri_snippet)
     * }
     */
    public static FunctionDescriptor g_test_bug$descriptor() {
        return g_test_bug.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_bug(const char *bug_uri_snippet)
     * }
     */
    public static MethodHandle g_test_bug$handle() {
        return g_test_bug.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_bug(const char *bug_uri_snippet)
     * }
     */
    public static void g_test_bug(MemorySegment bug_uri_snippet) {
        var mh$ = g_test_bug.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_bug", bug_uri_snippet);
            }
            mh$.invokeExact(bug_uri_snippet);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_summary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_summary(const char *summary)
     * }
     */
    public static FunctionDescriptor g_test_summary$descriptor() {
        return g_test_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_summary(const char *summary)
     * }
     */
    public static MethodHandle g_test_summary$handle() {
        return g_test_summary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_summary(const char *summary)
     * }
     */
    public static void g_test_summary(MemorySegment summary) {
        var mh$ = g_test_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_summary", summary);
            }
            mh$.invokeExact(summary);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_timer_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_timer_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_timer_start()
     * }
     */
    public static FunctionDescriptor g_test_timer_start$descriptor() {
        return g_test_timer_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_timer_start()
     * }
     */
    public static MethodHandle g_test_timer_start$handle() {
        return g_test_timer_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_timer_start()
     * }
     */
    public static void g_test_timer_start() {
        var mh$ = g_test_timer_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_timer_start");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_timer_elapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_timer_elapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double g_test_timer_elapsed()
     * }
     */
    public static FunctionDescriptor g_test_timer_elapsed$descriptor() {
        return g_test_timer_elapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double g_test_timer_elapsed()
     * }
     */
    public static MethodHandle g_test_timer_elapsed$handle() {
        return g_test_timer_elapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double g_test_timer_elapsed()
     * }
     */
    public static double g_test_timer_elapsed() {
        var mh$ = g_test_timer_elapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_timer_elapsed");
            }
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_timer_last {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_timer_last"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double g_test_timer_last()
     * }
     */
    public static FunctionDescriptor g_test_timer_last$descriptor() {
        return g_test_timer_last.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double g_test_timer_last()
     * }
     */
    public static MethodHandle g_test_timer_last$handle() {
        return g_test_timer_last.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double g_test_timer_last()
     * }
     */
    public static double g_test_timer_last() {
        var mh$ = g_test_timer_last.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_timer_last");
            }
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_queue_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_queue_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_queue_free(gpointer gfree_pointer)
     * }
     */
    public static FunctionDescriptor g_test_queue_free$descriptor() {
        return g_test_queue_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_queue_free(gpointer gfree_pointer)
     * }
     */
    public static MethodHandle g_test_queue_free$handle() {
        return g_test_queue_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_queue_free(gpointer gfree_pointer)
     * }
     */
    public static void g_test_queue_free(MemorySegment gfree_pointer) {
        var mh$ = g_test_queue_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_queue_free", gfree_pointer);
            }
            mh$.invokeExact(gfree_pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_queue_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_queue_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_queue_destroy(GDestroyNotify destroy_func, gpointer destroy_data)
     * }
     */
    public static FunctionDescriptor g_test_queue_destroy$descriptor() {
        return g_test_queue_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_queue_destroy(GDestroyNotify destroy_func, gpointer destroy_data)
     * }
     */
    public static MethodHandle g_test_queue_destroy$handle() {
        return g_test_queue_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_queue_destroy(GDestroyNotify destroy_func, gpointer destroy_data)
     * }
     */
    public static void g_test_queue_destroy(MemorySegment destroy_func, MemorySegment destroy_data) {
        var mh$ = g_test_queue_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_queue_destroy", destroy_func, destroy_data);
            }
            mh$.invokeExact(destroy_func, destroy_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_TEST_TRAP_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_TRAP_DEFAULT = 0
     * }
     */
    public static int G_TEST_TRAP_DEFAULT() {
        return G_TEST_TRAP_DEFAULT;
    }
    private static final int G_TEST_TRAP_SILENCE_STDOUT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_TRAP_SILENCE_STDOUT = 128
     * }
     */
    public static int G_TEST_TRAP_SILENCE_STDOUT() {
        return G_TEST_TRAP_SILENCE_STDOUT;
    }
    private static final int G_TEST_TRAP_SILENCE_STDERR = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_TRAP_SILENCE_STDERR = 256
     * }
     */
    public static int G_TEST_TRAP_SILENCE_STDERR() {
        return G_TEST_TRAP_SILENCE_STDERR;
    }
    private static final int G_TEST_TRAP_INHERIT_STDIN = (int)512L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_TRAP_INHERIT_STDIN = 512
     * }
     */
    public static int G_TEST_TRAP_INHERIT_STDIN() {
        return G_TEST_TRAP_INHERIT_STDIN;
    }

    private static class g_test_trap_fork {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_trap_fork"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_test_trap_fork(guint64 usec_timeout, GTestTrapFlags test_trap_flags)
     * }
     */
    public static FunctionDescriptor g_test_trap_fork$descriptor() {
        return g_test_trap_fork.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_test_trap_fork(guint64 usec_timeout, GTestTrapFlags test_trap_flags)
     * }
     */
    public static MethodHandle g_test_trap_fork$handle() {
        return g_test_trap_fork.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_test_trap_fork(guint64 usec_timeout, GTestTrapFlags test_trap_flags)
     * }
     */
    public static int g_test_trap_fork(long usec_timeout, int test_trap_flags) {
        var mh$ = g_test_trap_fork.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_trap_fork", usec_timeout, test_trap_flags);
            }
            return (int)mh$.invokeExact(usec_timeout, test_trap_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_TEST_SUBPROCESS_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_SUBPROCESS_DEFAULT = 0
     * }
     */
    public static int G_TEST_SUBPROCESS_DEFAULT() {
        return G_TEST_SUBPROCESS_DEFAULT;
    }
    private static final int G_TEST_SUBPROCESS_INHERIT_STDIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_SUBPROCESS_INHERIT_STDIN = 1
     * }
     */
    public static int G_TEST_SUBPROCESS_INHERIT_STDIN() {
        return G_TEST_SUBPROCESS_INHERIT_STDIN;
    }
    private static final int G_TEST_SUBPROCESS_INHERIT_STDOUT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_SUBPROCESS_INHERIT_STDOUT = 2
     * }
     */
    public static int G_TEST_SUBPROCESS_INHERIT_STDOUT() {
        return G_TEST_SUBPROCESS_INHERIT_STDOUT;
    }
    private static final int G_TEST_SUBPROCESS_INHERIT_STDERR = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_SUBPROCESS_INHERIT_STDERR = 4
     * }
     */
    public static int G_TEST_SUBPROCESS_INHERIT_STDERR() {
        return G_TEST_SUBPROCESS_INHERIT_STDERR;
    }

    private static class g_test_trap_subprocess {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_trap_subprocess"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_trap_subprocess(const char *test_path, guint64 usec_timeout, GTestSubprocessFlags test_flags)
     * }
     */
    public static FunctionDescriptor g_test_trap_subprocess$descriptor() {
        return g_test_trap_subprocess.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_trap_subprocess(const char *test_path, guint64 usec_timeout, GTestSubprocessFlags test_flags)
     * }
     */
    public static MethodHandle g_test_trap_subprocess$handle() {
        return g_test_trap_subprocess.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_trap_subprocess(const char *test_path, guint64 usec_timeout, GTestSubprocessFlags test_flags)
     * }
     */
    public static void g_test_trap_subprocess(MemorySegment test_path, long usec_timeout, int test_flags) {
        var mh$ = g_test_trap_subprocess.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_trap_subprocess", test_path, usec_timeout, test_flags);
            }
            mh$.invokeExact(test_path, usec_timeout, test_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_trap_has_passed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_trap_has_passed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_test_trap_has_passed()
     * }
     */
    public static FunctionDescriptor g_test_trap_has_passed$descriptor() {
        return g_test_trap_has_passed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_test_trap_has_passed()
     * }
     */
    public static MethodHandle g_test_trap_has_passed$handle() {
        return g_test_trap_has_passed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_test_trap_has_passed()
     * }
     */
    public static int g_test_trap_has_passed() {
        var mh$ = g_test_trap_has_passed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_trap_has_passed");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_trap_reached_timeout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_trap_reached_timeout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_test_trap_reached_timeout()
     * }
     */
    public static FunctionDescriptor g_test_trap_reached_timeout$descriptor() {
        return g_test_trap_reached_timeout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_test_trap_reached_timeout()
     * }
     */
    public static MethodHandle g_test_trap_reached_timeout$handle() {
        return g_test_trap_reached_timeout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_test_trap_reached_timeout()
     * }
     */
    public static int g_test_trap_reached_timeout() {
        var mh$ = g_test_trap_reached_timeout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_trap_reached_timeout");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_rand_int {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_rand_int"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint32 g_test_rand_int()
     * }
     */
    public static FunctionDescriptor g_test_rand_int$descriptor() {
        return g_test_rand_int.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint32 g_test_rand_int()
     * }
     */
    public static MethodHandle g_test_rand_int$handle() {
        return g_test_rand_int.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint32 g_test_rand_int()
     * }
     */
    public static int g_test_rand_int() {
        var mh$ = g_test_rand_int.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_rand_int");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_rand_int_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_rand_int_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint32 g_test_rand_int_range(gint32 begin, gint32 end)
     * }
     */
    public static FunctionDescriptor g_test_rand_int_range$descriptor() {
        return g_test_rand_int_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint32 g_test_rand_int_range(gint32 begin, gint32 end)
     * }
     */
    public static MethodHandle g_test_rand_int_range$handle() {
        return g_test_rand_int_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint32 g_test_rand_int_range(gint32 begin, gint32 end)
     * }
     */
    public static int g_test_rand_int_range(int begin, int end) {
        var mh$ = g_test_rand_int_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_rand_int_range", begin, end);
            }
            return (int)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_rand_double {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_rand_double"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double g_test_rand_double()
     * }
     */
    public static FunctionDescriptor g_test_rand_double$descriptor() {
        return g_test_rand_double.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double g_test_rand_double()
     * }
     */
    public static MethodHandle g_test_rand_double$handle() {
        return g_test_rand_double.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double g_test_rand_double()
     * }
     */
    public static double g_test_rand_double() {
        var mh$ = g_test_rand_double.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_rand_double");
            }
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_rand_double_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_rand_double_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double g_test_rand_double_range(double range_start, double range_end)
     * }
     */
    public static FunctionDescriptor g_test_rand_double_range$descriptor() {
        return g_test_rand_double_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double g_test_rand_double_range(double range_start, double range_end)
     * }
     */
    public static MethodHandle g_test_rand_double_range$handle() {
        return g_test_rand_double_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double g_test_rand_double_range(double range_start, double range_end)
     * }
     */
    public static double g_test_rand_double_range(double range_start, double range_end) {
        var mh$ = g_test_rand_double_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_rand_double_range", range_start, range_end);
            }
            return (double)mh$.invokeExact(range_start, range_end);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_create_case {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_create_case"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTestCase *g_test_create_case(const char *test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown)
     * }
     */
    public static FunctionDescriptor g_test_create_case$descriptor() {
        return g_test_create_case.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTestCase *g_test_create_case(const char *test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown)
     * }
     */
    public static MethodHandle g_test_create_case$handle() {
        return g_test_create_case.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTestCase *g_test_create_case(const char *test_name, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown)
     * }
     */
    public static MemorySegment g_test_create_case(MemorySegment test_name, long data_size, MemorySegment test_data, MemorySegment data_setup, MemorySegment data_test, MemorySegment data_teardown) {
        var mh$ = g_test_create_case.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_create_case", test_name, data_size, test_data, data_setup, data_test, data_teardown);
            }
            return (MemorySegment)mh$.invokeExact(test_name, data_size, test_data, data_setup, data_test, data_teardown);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_create_suite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_create_suite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTestSuite *g_test_create_suite(const char *suite_name)
     * }
     */
    public static FunctionDescriptor g_test_create_suite$descriptor() {
        return g_test_create_suite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTestSuite *g_test_create_suite(const char *suite_name)
     * }
     */
    public static MethodHandle g_test_create_suite$handle() {
        return g_test_create_suite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTestSuite *g_test_create_suite(const char *suite_name)
     * }
     */
    public static MemorySegment g_test_create_suite(MemorySegment suite_name) {
        var mh$ = g_test_create_suite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_create_suite", suite_name);
            }
            return (MemorySegment)mh$.invokeExact(suite_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_get_root {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_get_root"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTestSuite *g_test_get_root()
     * }
     */
    public static FunctionDescriptor g_test_get_root$descriptor() {
        return g_test_get_root.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTestSuite *g_test_get_root()
     * }
     */
    public static MethodHandle g_test_get_root$handle() {
        return g_test_get_root.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTestSuite *g_test_get_root()
     * }
     */
    public static MemorySegment g_test_get_root() {
        var mh$ = g_test_get_root.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_get_root");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_suite_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_suite_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_suite_add(GTestSuite *suite, GTestCase *test_case)
     * }
     */
    public static FunctionDescriptor g_test_suite_add$descriptor() {
        return g_test_suite_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_suite_add(GTestSuite *suite, GTestCase *test_case)
     * }
     */
    public static MethodHandle g_test_suite_add$handle() {
        return g_test_suite_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_suite_add(GTestSuite *suite, GTestCase *test_case)
     * }
     */
    public static void g_test_suite_add(MemorySegment suite, MemorySegment test_case) {
        var mh$ = g_test_suite_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_suite_add", suite, test_case);
            }
            mh$.invokeExact(suite, test_case);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_suite_add_suite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_suite_add_suite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_suite_add_suite(GTestSuite *suite, GTestSuite *nestedsuite)
     * }
     */
    public static FunctionDescriptor g_test_suite_add_suite$descriptor() {
        return g_test_suite_add_suite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_suite_add_suite(GTestSuite *suite, GTestSuite *nestedsuite)
     * }
     */
    public static MethodHandle g_test_suite_add_suite$handle() {
        return g_test_suite_add_suite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_suite_add_suite(GTestSuite *suite, GTestSuite *nestedsuite)
     * }
     */
    public static void g_test_suite_add_suite(MemorySegment suite, MemorySegment nestedsuite) {
        var mh$ = g_test_suite_add_suite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_suite_add_suite", suite, nestedsuite);
            }
            mh$.invokeExact(suite, nestedsuite);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_run_suite {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_run_suite"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int g_test_run_suite(GTestSuite *suite)
     * }
     */
    public static FunctionDescriptor g_test_run_suite$descriptor() {
        return g_test_run_suite.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int g_test_run_suite(GTestSuite *suite)
     * }
     */
    public static MethodHandle g_test_run_suite$handle() {
        return g_test_run_suite.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int g_test_run_suite(GTestSuite *suite)
     * }
     */
    public static int g_test_run_suite(MemorySegment suite) {
        var mh$ = g_test_run_suite.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_run_suite", suite);
            }
            return (int)mh$.invokeExact(suite);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_case_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_case_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_case_free(GTestCase *test_case)
     * }
     */
    public static FunctionDescriptor g_test_case_free$descriptor() {
        return g_test_case_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_case_free(GTestCase *test_case)
     * }
     */
    public static MethodHandle g_test_case_free$handle() {
        return g_test_case_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_case_free(GTestCase *test_case)
     * }
     */
    public static void g_test_case_free(MemorySegment test_case) {
        var mh$ = g_test_case_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_case_free", test_case);
            }
            mh$.invokeExact(test_case);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_suite_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_suite_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_suite_free(GTestSuite *suite)
     * }
     */
    public static FunctionDescriptor g_test_suite_free$descriptor() {
        return g_test_suite_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_suite_free(GTestSuite *suite)
     * }
     */
    public static MethodHandle g_test_suite_free$handle() {
        return g_test_suite_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_suite_free(GTestSuite *suite)
     * }
     */
    public static void g_test_suite_free(MemorySegment suite) {
        var mh$ = g_test_suite_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_suite_free", suite);
            }
            mh$.invokeExact(suite);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_trap_assertions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_trap_assertions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_trap_assertions(const char *domain, const char *file, int line, const char *func, guint64 assertion_flags, const char *pattern)
     * }
     */
    public static FunctionDescriptor g_test_trap_assertions$descriptor() {
        return g_test_trap_assertions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_trap_assertions(const char *domain, const char *file, int line, const char *func, guint64 assertion_flags, const char *pattern)
     * }
     */
    public static MethodHandle g_test_trap_assertions$handle() {
        return g_test_trap_assertions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_trap_assertions(const char *domain, const char *file, int line, const char *func, guint64 assertion_flags, const char *pattern)
     * }
     */
    public static void g_test_trap_assertions(MemorySegment domain, MemorySegment file, int line, MemorySegment func, long assertion_flags, MemorySegment pattern) {
        var mh$ = g_test_trap_assertions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_trap_assertions", domain, file, line, func, assertion_flags, pattern);
            }
            mh$.invokeExact(domain, file, line, func, assertion_flags, pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_assertion_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_assertion_message"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_assertion_message(const char *domain, const char *file, int line, const char *func, const char *message)
     * }
     */
    public static FunctionDescriptor g_assertion_message$descriptor() {
        return g_assertion_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_assertion_message(const char *domain, const char *file, int line, const char *func, const char *message)
     * }
     */
    public static MethodHandle g_assertion_message$handle() {
        return g_assertion_message.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_assertion_message(const char *domain, const char *file, int line, const char *func, const char *message)
     * }
     */
    public static void g_assertion_message(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment message) {
        var mh$ = g_assertion_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_assertion_message", domain, file, line, func, message);
            }
            mh$.invokeExact(domain, file, line, func, message);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_assertion_message_expr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_assertion_message_expr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_assertion_message_expr(const char *domain, const char *file, int line, const char *func, const char *expr)
     * }
     */
    public static FunctionDescriptor g_assertion_message_expr$descriptor() {
        return g_assertion_message_expr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_assertion_message_expr(const char *domain, const char *file, int line, const char *func, const char *expr)
     * }
     */
    public static MethodHandle g_assertion_message_expr$handle() {
        return g_assertion_message_expr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_assertion_message_expr(const char *domain, const char *file, int line, const char *func, const char *expr)
     * }
     */
    public static void g_assertion_message_expr(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment expr) {
        var mh$ = g_assertion_message_expr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_assertion_message_expr", domain, file, line, func, expr);
            }
            mh$.invokeExact(domain, file, line, func, expr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_assertion_message_cmpstr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_assertion_message_cmpstr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_assertion_message_cmpstr(const char *domain, const char *file, int line, const char *func, const char *expr, const char *arg1, const char *cmp, const char *arg2)
     * }
     */
    public static FunctionDescriptor g_assertion_message_cmpstr$descriptor() {
        return g_assertion_message_cmpstr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_assertion_message_cmpstr(const char *domain, const char *file, int line, const char *func, const char *expr, const char *arg1, const char *cmp, const char *arg2)
     * }
     */
    public static MethodHandle g_assertion_message_cmpstr$handle() {
        return g_assertion_message_cmpstr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_assertion_message_cmpstr(const char *domain, const char *file, int line, const char *func, const char *expr, const char *arg1, const char *cmp, const char *arg2)
     * }
     */
    public static void g_assertion_message_cmpstr(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment expr, MemorySegment arg1, MemorySegment cmp, MemorySegment arg2) {
        var mh$ = g_assertion_message_cmpstr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_assertion_message_cmpstr", domain, file, line, func, expr, arg1, cmp, arg2);
            }
            mh$.invokeExact(domain, file, line, func, expr, arg1, cmp, arg2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_assertion_message_cmpstrv {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_assertion_message_cmpstrv"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_assertion_message_cmpstrv(const char *domain, const char *file, int line, const char *func, const char *expr, const char *const *arg1, const char *const *arg2, gsize first_wrong_idx)
     * }
     */
    public static FunctionDescriptor g_assertion_message_cmpstrv$descriptor() {
        return g_assertion_message_cmpstrv.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_assertion_message_cmpstrv(const char *domain, const char *file, int line, const char *func, const char *expr, const char *const *arg1, const char *const *arg2, gsize first_wrong_idx)
     * }
     */
    public static MethodHandle g_assertion_message_cmpstrv$handle() {
        return g_assertion_message_cmpstrv.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_assertion_message_cmpstrv(const char *domain, const char *file, int line, const char *func, const char *expr, const char *const *arg1, const char *const *arg2, gsize first_wrong_idx)
     * }
     */
    public static void g_assertion_message_cmpstrv(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment expr, MemorySegment arg1, MemorySegment arg2, long first_wrong_idx) {
        var mh$ = g_assertion_message_cmpstrv.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_assertion_message_cmpstrv", domain, file, line, func, expr, arg1, arg2, first_wrong_idx);
            }
            mh$.invokeExact(domain, file, line, func, expr, arg1, arg2, first_wrong_idx);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_assertion_message_cmpint {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_CHAR
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_assertion_message_cmpint"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_assertion_message_cmpint(const char *domain, const char *file, int line, const char *func, const char *expr, guint64 arg1, const char *cmp, guint64 arg2, char numtype)
     * }
     */
    public static FunctionDescriptor g_assertion_message_cmpint$descriptor() {
        return g_assertion_message_cmpint.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_assertion_message_cmpint(const char *domain, const char *file, int line, const char *func, const char *expr, guint64 arg1, const char *cmp, guint64 arg2, char numtype)
     * }
     */
    public static MethodHandle g_assertion_message_cmpint$handle() {
        return g_assertion_message_cmpint.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_assertion_message_cmpint(const char *domain, const char *file, int line, const char *func, const char *expr, guint64 arg1, const char *cmp, guint64 arg2, char numtype)
     * }
     */
    public static void g_assertion_message_cmpint(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment expr, long arg1, MemorySegment cmp, long arg2, byte numtype) {
        var mh$ = g_assertion_message_cmpint.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_assertion_message_cmpint", domain, file, line, func, expr, arg1, cmp, arg2, numtype);
            }
            mh$.invokeExact(domain, file, line, func, expr, arg1, cmp, arg2, numtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_assertion_message_error {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_assertion_message_error"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_assertion_message_error(const char *domain, const char *file, int line, const char *func, const char *expr, const GError *error, GQuark error_domain, int error_code)
     * }
     */
    public static FunctionDescriptor g_assertion_message_error$descriptor() {
        return g_assertion_message_error.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_assertion_message_error(const char *domain, const char *file, int line, const char *func, const char *expr, const GError *error, GQuark error_domain, int error_code)
     * }
     */
    public static MethodHandle g_assertion_message_error$handle() {
        return g_assertion_message_error.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_assertion_message_error(const char *domain, const char *file, int line, const char *func, const char *expr, const GError *error, GQuark error_domain, int error_code)
     * }
     */
    public static void g_assertion_message_error(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment expr, MemorySegment error, int error_domain, int error_code) {
        var mh$ = g_assertion_message_error.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_assertion_message_error", domain, file, line, func, expr, error, error_domain, error_code);
            }
            mh$.invokeExact(domain, file, line, func, expr, error, error_domain, error_code);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_add_vtable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_add_vtable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_add_vtable(const char *testpath, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown)
     * }
     */
    public static FunctionDescriptor g_test_add_vtable$descriptor() {
        return g_test_add_vtable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_add_vtable(const char *testpath, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown)
     * }
     */
    public static MethodHandle g_test_add_vtable$handle() {
        return g_test_add_vtable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_add_vtable(const char *testpath, gsize data_size, gconstpointer test_data, GTestFixtureFunc data_setup, GTestFixtureFunc data_test, GTestFixtureFunc data_teardown)
     * }
     */
    public static void g_test_add_vtable(MemorySegment testpath, long data_size, MemorySegment test_data, MemorySegment data_setup, MemorySegment data_test, MemorySegment data_teardown) {
        var mh$ = g_test_add_vtable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_add_vtable", testpath, data_size, test_data, data_setup, data_test, data_teardown);
            }
            mh$.invokeExact(testpath, data_size, test_data, data_setup, data_test, data_teardown);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_config_vars$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_test_config_vars").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const GTestConfig *const g_test_config_vars
     * }
     */
    public static AddressLayout g_test_config_vars$layout() {
        return g_test_config_vars$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const GTestConfig *const g_test_config_vars
     * }
     */
    public static MemorySegment g_test_config_vars$segment() {
        return g_test_config_vars$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const GTestConfig *const g_test_config_vars
     * }
     */
    public static MemorySegment g_test_config_vars() {
        return g_test_config_vars$constants.SEGMENT.get(g_test_config_vars$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const GTestConfig *const g_test_config_vars
     * }
     */
    public static void g_test_config_vars(MemorySegment varValue) {
        g_test_config_vars$constants.SEGMENT.set(g_test_config_vars$constants.LAYOUT, 0L, varValue);
    }
    private static final int G_TEST_RUN_SUCCESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_RUN_SUCCESS = 0
     * }
     */
    public static int G_TEST_RUN_SUCCESS() {
        return G_TEST_RUN_SUCCESS;
    }
    private static final int G_TEST_RUN_SKIPPED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_RUN_SKIPPED = 1
     * }
     */
    public static int G_TEST_RUN_SKIPPED() {
        return G_TEST_RUN_SKIPPED;
    }
    private static final int G_TEST_RUN_FAILURE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_RUN_FAILURE = 2
     * }
     */
    public static int G_TEST_RUN_FAILURE() {
        return G_TEST_RUN_FAILURE;
    }
    private static final int G_TEST_RUN_INCOMPLETE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_RUN_INCOMPLETE = 3
     * }
     */
    public static int G_TEST_RUN_INCOMPLETE() {
        return G_TEST_RUN_INCOMPLETE;
    }
    private static final int G_TEST_LOG_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_NONE = 0
     * }
     */
    public static int G_TEST_LOG_NONE() {
        return G_TEST_LOG_NONE;
    }
    private static final int G_TEST_LOG_ERROR = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_ERROR = 1
     * }
     */
    public static int G_TEST_LOG_ERROR() {
        return G_TEST_LOG_ERROR;
    }
    private static final int G_TEST_LOG_START_BINARY = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_START_BINARY = 2
     * }
     */
    public static int G_TEST_LOG_START_BINARY() {
        return G_TEST_LOG_START_BINARY;
    }
    private static final int G_TEST_LOG_LIST_CASE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_LIST_CASE = 3
     * }
     */
    public static int G_TEST_LOG_LIST_CASE() {
        return G_TEST_LOG_LIST_CASE;
    }
    private static final int G_TEST_LOG_SKIP_CASE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_SKIP_CASE = 4
     * }
     */
    public static int G_TEST_LOG_SKIP_CASE() {
        return G_TEST_LOG_SKIP_CASE;
    }
    private static final int G_TEST_LOG_START_CASE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_START_CASE = 5
     * }
     */
    public static int G_TEST_LOG_START_CASE() {
        return G_TEST_LOG_START_CASE;
    }
    private static final int G_TEST_LOG_STOP_CASE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_STOP_CASE = 6
     * }
     */
    public static int G_TEST_LOG_STOP_CASE() {
        return G_TEST_LOG_STOP_CASE;
    }
    private static final int G_TEST_LOG_MIN_RESULT = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_MIN_RESULT = 7
     * }
     */
    public static int G_TEST_LOG_MIN_RESULT() {
        return G_TEST_LOG_MIN_RESULT;
    }
    private static final int G_TEST_LOG_MAX_RESULT = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_MAX_RESULT = 8
     * }
     */
    public static int G_TEST_LOG_MAX_RESULT() {
        return G_TEST_LOG_MAX_RESULT;
    }
    private static final int G_TEST_LOG_MESSAGE = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_MESSAGE = 9
     * }
     */
    public static int G_TEST_LOG_MESSAGE() {
        return G_TEST_LOG_MESSAGE;
    }
    private static final int G_TEST_LOG_START_SUITE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_START_SUITE = 10
     * }
     */
    public static int G_TEST_LOG_START_SUITE() {
        return G_TEST_LOG_START_SUITE;
    }
    private static final int G_TEST_LOG_STOP_SUITE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_LOG_STOP_SUITE = 11
     * }
     */
    public static int G_TEST_LOG_STOP_SUITE() {
        return G_TEST_LOG_STOP_SUITE;
    }

    private static class g_test_log_type_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_log_type_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_test_log_type_name(GTestLogType log_type)
     * }
     */
    public static FunctionDescriptor g_test_log_type_name$descriptor() {
        return g_test_log_type_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_test_log_type_name(GTestLogType log_type)
     * }
     */
    public static MethodHandle g_test_log_type_name$handle() {
        return g_test_log_type_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_test_log_type_name(GTestLogType log_type)
     * }
     */
    public static MemorySegment g_test_log_type_name(int log_type) {
        var mh$ = g_test_log_type_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_log_type_name", log_type);
            }
            return (MemorySegment)mh$.invokeExact(log_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_log_buffer_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_log_buffer_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTestLogBuffer *g_test_log_buffer_new()
     * }
     */
    public static FunctionDescriptor g_test_log_buffer_new$descriptor() {
        return g_test_log_buffer_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTestLogBuffer *g_test_log_buffer_new()
     * }
     */
    public static MethodHandle g_test_log_buffer_new$handle() {
        return g_test_log_buffer_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTestLogBuffer *g_test_log_buffer_new()
     * }
     */
    public static MemorySegment g_test_log_buffer_new() {
        var mh$ = g_test_log_buffer_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_log_buffer_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_log_buffer_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_log_buffer_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_log_buffer_free(GTestLogBuffer *tbuffer)
     * }
     */
    public static FunctionDescriptor g_test_log_buffer_free$descriptor() {
        return g_test_log_buffer_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_log_buffer_free(GTestLogBuffer *tbuffer)
     * }
     */
    public static MethodHandle g_test_log_buffer_free$handle() {
        return g_test_log_buffer_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_log_buffer_free(GTestLogBuffer *tbuffer)
     * }
     */
    public static void g_test_log_buffer_free(MemorySegment tbuffer) {
        var mh$ = g_test_log_buffer_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_log_buffer_free", tbuffer);
            }
            mh$.invokeExact(tbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_log_buffer_push {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_log_buffer_push"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_log_buffer_push(GTestLogBuffer *tbuffer, guint n_bytes, const guint8 *bytes)
     * }
     */
    public static FunctionDescriptor g_test_log_buffer_push$descriptor() {
        return g_test_log_buffer_push.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_log_buffer_push(GTestLogBuffer *tbuffer, guint n_bytes, const guint8 *bytes)
     * }
     */
    public static MethodHandle g_test_log_buffer_push$handle() {
        return g_test_log_buffer_push.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_log_buffer_push(GTestLogBuffer *tbuffer, guint n_bytes, const guint8 *bytes)
     * }
     */
    public static void g_test_log_buffer_push(MemorySegment tbuffer, int n_bytes, MemorySegment bytes) {
        var mh$ = g_test_log_buffer_push.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_log_buffer_push", tbuffer, n_bytes, bytes);
            }
            mh$.invokeExact(tbuffer, n_bytes, bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_log_buffer_pop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_log_buffer_pop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTestLogMsg *g_test_log_buffer_pop(GTestLogBuffer *tbuffer)
     * }
     */
    public static FunctionDescriptor g_test_log_buffer_pop$descriptor() {
        return g_test_log_buffer_pop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTestLogMsg *g_test_log_buffer_pop(GTestLogBuffer *tbuffer)
     * }
     */
    public static MethodHandle g_test_log_buffer_pop$handle() {
        return g_test_log_buffer_pop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTestLogMsg *g_test_log_buffer_pop(GTestLogBuffer *tbuffer)
     * }
     */
    public static MemorySegment g_test_log_buffer_pop(MemorySegment tbuffer) {
        var mh$ = g_test_log_buffer_pop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_log_buffer_pop", tbuffer);
            }
            return (MemorySegment)mh$.invokeExact(tbuffer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_log_msg_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_log_msg_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_log_msg_free(GTestLogMsg *tmsg)
     * }
     */
    public static FunctionDescriptor g_test_log_msg_free$descriptor() {
        return g_test_log_msg_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_log_msg_free(GTestLogMsg *tmsg)
     * }
     */
    public static MethodHandle g_test_log_msg_free$handle() {
        return g_test_log_msg_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_log_msg_free(GTestLogMsg *tmsg)
     * }
     */
    public static void g_test_log_msg_free(MemorySegment tmsg) {
        var mh$ = g_test_log_msg_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_log_msg_free", tmsg);
            }
            mh$.invokeExact(tmsg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_log_set_fatal_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_log_set_fatal_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_log_set_fatal_handler(GTestLogFatalFunc log_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_test_log_set_fatal_handler$descriptor() {
        return g_test_log_set_fatal_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_log_set_fatal_handler(GTestLogFatalFunc log_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_test_log_set_fatal_handler$handle() {
        return g_test_log_set_fatal_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_log_set_fatal_handler(GTestLogFatalFunc log_func, gpointer user_data)
     * }
     */
    public static void g_test_log_set_fatal_handler(MemorySegment log_func, MemorySegment user_data) {
        var mh$ = g_test_log_set_fatal_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_log_set_fatal_handler", log_func, user_data);
            }
            mh$.invokeExact(log_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_expect_message {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_expect_message"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_expect_message(const gchar *log_domain, GLogLevelFlags log_level, const gchar *pattern)
     * }
     */
    public static FunctionDescriptor g_test_expect_message$descriptor() {
        return g_test_expect_message.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_expect_message(const gchar *log_domain, GLogLevelFlags log_level, const gchar *pattern)
     * }
     */
    public static MethodHandle g_test_expect_message$handle() {
        return g_test_expect_message.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_expect_message(const gchar *log_domain, GLogLevelFlags log_level, const gchar *pattern)
     * }
     */
    public static void g_test_expect_message(MemorySegment log_domain, int log_level, MemorySegment pattern) {
        var mh$ = g_test_expect_message.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_expect_message", log_domain, log_level, pattern);
            }
            mh$.invokeExact(log_domain, log_level, pattern);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_test_assert_expected_messages_internal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_assert_expected_messages_internal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_test_assert_expected_messages_internal(const char *domain, const char *file, int line, const char *func)
     * }
     */
    public static FunctionDescriptor g_test_assert_expected_messages_internal$descriptor() {
        return g_test_assert_expected_messages_internal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_test_assert_expected_messages_internal(const char *domain, const char *file, int line, const char *func)
     * }
     */
    public static MethodHandle g_test_assert_expected_messages_internal$handle() {
        return g_test_assert_expected_messages_internal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_test_assert_expected_messages_internal(const char *domain, const char *file, int line, const char *func)
     * }
     */
    public static void g_test_assert_expected_messages_internal(MemorySegment domain, MemorySegment file, int line, MemorySegment func) {
        var mh$ = g_test_assert_expected_messages_internal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_assert_expected_messages_internal", domain, file, line, func);
            }
            mh$.invokeExact(domain, file, line, func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_TEST_DIST = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_DIST = 0
     * }
     */
    public static int G_TEST_DIST() {
        return G_TEST_DIST;
    }
    private static final int G_TEST_BUILT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_TEST_BUILT = 1
     * }
     */
    public static int G_TEST_BUILT() {
        return G_TEST_BUILT;
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gchar *g_test_build_filename(GTestFileType file_type, const gchar *first_path, ...)
     * }
     */
    public static class g_test_build_filename {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_test_build_filename");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_test_build_filename(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gchar *g_test_build_filename(GTestFileType file_type, const gchar *first_path, ...)
         * }
         */
        public static g_test_build_filename makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_test_build_filename(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int file_type, MemorySegment first_path, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_test_build_filename", file_type, first_path, x2);
                }
                return (MemorySegment)spreader.invokeExact(file_type, first_path, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_test_get_dir {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_test_get_dir"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_test_get_dir(GTestFileType file_type)
     * }
     */
    public static FunctionDescriptor g_test_get_dir$descriptor() {
        return g_test_get_dir.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_test_get_dir(GTestFileType file_type)
     * }
     */
    public static MethodHandle g_test_get_dir$handle() {
        return g_test_get_dir.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_test_get_dir(GTestFileType file_type)
     * }
     */
    public static MemorySegment g_test_get_dir(int file_type) {
        var mh$ = g_test_get_dir.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_test_get_dir", file_type);
            }
            return (MemorySegment)mh$.invokeExact(file_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern const gchar *g_test_get_filename(GTestFileType file_type, const gchar *first_path, ...)
     * }
     */
    public static class g_test_get_filename {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_test_get_filename");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_test_get_filename(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern const gchar *g_test_get_filename(GTestFileType file_type, const gchar *first_path, ...)
         * }
         */
        public static g_test_get_filename makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_test_get_filename(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(int file_type, MemorySegment first_path, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_test_get_filename", file_type, first_path, x2);
                }
                return (MemorySegment)spreader.invokeExact(file_type, first_path, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_thread_pool_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GThreadPool *g_thread_pool_new(GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError **error)
     * }
     */
    public static FunctionDescriptor g_thread_pool_new$descriptor() {
        return g_thread_pool_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GThreadPool *g_thread_pool_new(GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError **error)
     * }
     */
    public static MethodHandle g_thread_pool_new$handle() {
        return g_thread_pool_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GThreadPool *g_thread_pool_new(GFunc func, gpointer user_data, gint max_threads, gboolean exclusive, GError **error)
     * }
     */
    public static MemorySegment g_thread_pool_new(MemorySegment func, MemorySegment user_data, int max_threads, int exclusive, MemorySegment error) {
        var mh$ = g_thread_pool_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_new", func, user_data, max_threads, exclusive, error);
            }
            return (MemorySegment)mh$.invokeExact(func, user_data, max_threads, exclusive, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_new_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_new_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GThreadPool *g_thread_pool_new_full(GFunc func, gpointer user_data, GDestroyNotify item_free_func, gint max_threads, gboolean exclusive, GError **error)
     * }
     */
    public static FunctionDescriptor g_thread_pool_new_full$descriptor() {
        return g_thread_pool_new_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GThreadPool *g_thread_pool_new_full(GFunc func, gpointer user_data, GDestroyNotify item_free_func, gint max_threads, gboolean exclusive, GError **error)
     * }
     */
    public static MethodHandle g_thread_pool_new_full$handle() {
        return g_thread_pool_new_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GThreadPool *g_thread_pool_new_full(GFunc func, gpointer user_data, GDestroyNotify item_free_func, gint max_threads, gboolean exclusive, GError **error)
     * }
     */
    public static MemorySegment g_thread_pool_new_full(MemorySegment func, MemorySegment user_data, MemorySegment item_free_func, int max_threads, int exclusive, MemorySegment error) {
        var mh$ = g_thread_pool_new_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_new_full", func, user_data, item_free_func, max_threads, exclusive, error);
            }
            return (MemorySegment)mh$.invokeExact(func, user_data, item_free_func, max_threads, exclusive, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_pool_free(GThreadPool *pool, gboolean immediate, gboolean wait_)
     * }
     */
    public static FunctionDescriptor g_thread_pool_free$descriptor() {
        return g_thread_pool_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_pool_free(GThreadPool *pool, gboolean immediate, gboolean wait_)
     * }
     */
    public static MethodHandle g_thread_pool_free$handle() {
        return g_thread_pool_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_pool_free(GThreadPool *pool, gboolean immediate, gboolean wait_)
     * }
     */
    public static void g_thread_pool_free(MemorySegment pool, int immediate, int wait_) {
        var mh$ = g_thread_pool_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_free", pool, immediate, wait_);
            }
            mh$.invokeExact(pool, immediate, wait_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_push {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_push"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_thread_pool_push(GThreadPool *pool, gpointer data, GError **error)
     * }
     */
    public static FunctionDescriptor g_thread_pool_push$descriptor() {
        return g_thread_pool_push.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_thread_pool_push(GThreadPool *pool, gpointer data, GError **error)
     * }
     */
    public static MethodHandle g_thread_pool_push$handle() {
        return g_thread_pool_push.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_thread_pool_push(GThreadPool *pool, gpointer data, GError **error)
     * }
     */
    public static int g_thread_pool_push(MemorySegment pool, MemorySegment data, MemorySegment error) {
        var mh$ = g_thread_pool_push.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_push", pool, data, error);
            }
            return (int)mh$.invokeExact(pool, data, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_unprocessed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_unprocessed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_thread_pool_unprocessed(GThreadPool *pool)
     * }
     */
    public static FunctionDescriptor g_thread_pool_unprocessed$descriptor() {
        return g_thread_pool_unprocessed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_thread_pool_unprocessed(GThreadPool *pool)
     * }
     */
    public static MethodHandle g_thread_pool_unprocessed$handle() {
        return g_thread_pool_unprocessed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_thread_pool_unprocessed(GThreadPool *pool)
     * }
     */
    public static int g_thread_pool_unprocessed(MemorySegment pool) {
        var mh$ = g_thread_pool_unprocessed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_unprocessed", pool);
            }
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_set_sort_function {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_set_sort_function"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_pool_set_sort_function(GThreadPool *pool, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_thread_pool_set_sort_function$descriptor() {
        return g_thread_pool_set_sort_function.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_pool_set_sort_function(GThreadPool *pool, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_thread_pool_set_sort_function$handle() {
        return g_thread_pool_set_sort_function.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_pool_set_sort_function(GThreadPool *pool, GCompareDataFunc func, gpointer user_data)
     * }
     */
    public static void g_thread_pool_set_sort_function(MemorySegment pool, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_thread_pool_set_sort_function.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_set_sort_function", pool, func, user_data);
            }
            mh$.invokeExact(pool, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_move_to_front {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_move_to_front"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_thread_pool_move_to_front(GThreadPool *pool, gpointer data)
     * }
     */
    public static FunctionDescriptor g_thread_pool_move_to_front$descriptor() {
        return g_thread_pool_move_to_front.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_thread_pool_move_to_front(GThreadPool *pool, gpointer data)
     * }
     */
    public static MethodHandle g_thread_pool_move_to_front$handle() {
        return g_thread_pool_move_to_front.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_thread_pool_move_to_front(GThreadPool *pool, gpointer data)
     * }
     */
    public static int g_thread_pool_move_to_front(MemorySegment pool, MemorySegment data) {
        var mh$ = g_thread_pool_move_to_front.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_move_to_front", pool, data);
            }
            return (int)mh$.invokeExact(pool, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_set_max_threads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_set_max_threads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_thread_pool_set_max_threads(GThreadPool *pool, gint max_threads, GError **error)
     * }
     */
    public static FunctionDescriptor g_thread_pool_set_max_threads$descriptor() {
        return g_thread_pool_set_max_threads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_thread_pool_set_max_threads(GThreadPool *pool, gint max_threads, GError **error)
     * }
     */
    public static MethodHandle g_thread_pool_set_max_threads$handle() {
        return g_thread_pool_set_max_threads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_thread_pool_set_max_threads(GThreadPool *pool, gint max_threads, GError **error)
     * }
     */
    public static int g_thread_pool_set_max_threads(MemorySegment pool, int max_threads, MemorySegment error) {
        var mh$ = g_thread_pool_set_max_threads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_set_max_threads", pool, max_threads, error);
            }
            return (int)mh$.invokeExact(pool, max_threads, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_get_max_threads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_get_max_threads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_thread_pool_get_max_threads(GThreadPool *pool)
     * }
     */
    public static FunctionDescriptor g_thread_pool_get_max_threads$descriptor() {
        return g_thread_pool_get_max_threads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_thread_pool_get_max_threads(GThreadPool *pool)
     * }
     */
    public static MethodHandle g_thread_pool_get_max_threads$handle() {
        return g_thread_pool_get_max_threads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_thread_pool_get_max_threads(GThreadPool *pool)
     * }
     */
    public static int g_thread_pool_get_max_threads(MemorySegment pool) {
        var mh$ = g_thread_pool_get_max_threads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_get_max_threads", pool);
            }
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_get_num_threads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_get_num_threads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_thread_pool_get_num_threads(GThreadPool *pool)
     * }
     */
    public static FunctionDescriptor g_thread_pool_get_num_threads$descriptor() {
        return g_thread_pool_get_num_threads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_thread_pool_get_num_threads(GThreadPool *pool)
     * }
     */
    public static MethodHandle g_thread_pool_get_num_threads$handle() {
        return g_thread_pool_get_num_threads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_thread_pool_get_num_threads(GThreadPool *pool)
     * }
     */
    public static int g_thread_pool_get_num_threads(MemorySegment pool) {
        var mh$ = g_thread_pool_get_num_threads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_get_num_threads", pool);
            }
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_set_max_unused_threads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_set_max_unused_threads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_pool_set_max_unused_threads(gint max_threads)
     * }
     */
    public static FunctionDescriptor g_thread_pool_set_max_unused_threads$descriptor() {
        return g_thread_pool_set_max_unused_threads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_pool_set_max_unused_threads(gint max_threads)
     * }
     */
    public static MethodHandle g_thread_pool_set_max_unused_threads$handle() {
        return g_thread_pool_set_max_unused_threads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_pool_set_max_unused_threads(gint max_threads)
     * }
     */
    public static void g_thread_pool_set_max_unused_threads(int max_threads) {
        var mh$ = g_thread_pool_set_max_unused_threads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_set_max_unused_threads", max_threads);
            }
            mh$.invokeExact(max_threads);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_get_max_unused_threads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_get_max_unused_threads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_thread_pool_get_max_unused_threads()
     * }
     */
    public static FunctionDescriptor g_thread_pool_get_max_unused_threads$descriptor() {
        return g_thread_pool_get_max_unused_threads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_thread_pool_get_max_unused_threads()
     * }
     */
    public static MethodHandle g_thread_pool_get_max_unused_threads$handle() {
        return g_thread_pool_get_max_unused_threads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_thread_pool_get_max_unused_threads()
     * }
     */
    public static int g_thread_pool_get_max_unused_threads() {
        var mh$ = g_thread_pool_get_max_unused_threads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_get_max_unused_threads");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_get_num_unused_threads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_get_num_unused_threads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_thread_pool_get_num_unused_threads()
     * }
     */
    public static FunctionDescriptor g_thread_pool_get_num_unused_threads$descriptor() {
        return g_thread_pool_get_num_unused_threads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_thread_pool_get_num_unused_threads()
     * }
     */
    public static MethodHandle g_thread_pool_get_num_unused_threads$handle() {
        return g_thread_pool_get_num_unused_threads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_thread_pool_get_num_unused_threads()
     * }
     */
    public static int g_thread_pool_get_num_unused_threads() {
        var mh$ = g_thread_pool_get_num_unused_threads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_get_num_unused_threads");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_stop_unused_threads {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_stop_unused_threads"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_pool_stop_unused_threads()
     * }
     */
    public static FunctionDescriptor g_thread_pool_stop_unused_threads$descriptor() {
        return g_thread_pool_stop_unused_threads.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_pool_stop_unused_threads()
     * }
     */
    public static MethodHandle g_thread_pool_stop_unused_threads$handle() {
        return g_thread_pool_stop_unused_threads.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_pool_stop_unused_threads()
     * }
     */
    public static void g_thread_pool_stop_unused_threads() {
        var mh$ = g_thread_pool_stop_unused_threads.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_stop_unused_threads");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_set_max_idle_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_set_max_idle_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_pool_set_max_idle_time(guint interval)
     * }
     */
    public static FunctionDescriptor g_thread_pool_set_max_idle_time$descriptor() {
        return g_thread_pool_set_max_idle_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_pool_set_max_idle_time(guint interval)
     * }
     */
    public static MethodHandle g_thread_pool_set_max_idle_time$handle() {
        return g_thread_pool_set_max_idle_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_pool_set_max_idle_time(guint interval)
     * }
     */
    public static void g_thread_pool_set_max_idle_time(int interval) {
        var mh$ = g_thread_pool_set_max_idle_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_set_max_idle_time", interval);
            }
            mh$.invokeExact(interval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_pool_get_max_idle_time {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_pool_get_max_idle_time"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_thread_pool_get_max_idle_time()
     * }
     */
    public static FunctionDescriptor g_thread_pool_get_max_idle_time$descriptor() {
        return g_thread_pool_get_max_idle_time.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_thread_pool_get_max_idle_time()
     * }
     */
    public static MethodHandle g_thread_pool_get_max_idle_time$handle() {
        return g_thread_pool_get_max_idle_time.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_thread_pool_get_max_idle_time()
     * }
     */
    public static int g_thread_pool_get_max_idle_time() {
        var mh$ = g_thread_pool_get_max_idle_time.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_pool_get_max_idle_time");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timer_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timer_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTimer *g_timer_new()
     * }
     */
    public static FunctionDescriptor g_timer_new$descriptor() {
        return g_timer_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTimer *g_timer_new()
     * }
     */
    public static MethodHandle g_timer_new$handle() {
        return g_timer_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTimer *g_timer_new()
     * }
     */
    public static MemorySegment g_timer_new() {
        var mh$ = g_timer_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timer_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timer_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timer_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_timer_destroy(GTimer *timer)
     * }
     */
    public static FunctionDescriptor g_timer_destroy$descriptor() {
        return g_timer_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_timer_destroy(GTimer *timer)
     * }
     */
    public static MethodHandle g_timer_destroy$handle() {
        return g_timer_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_timer_destroy(GTimer *timer)
     * }
     */
    public static void g_timer_destroy(MemorySegment timer) {
        var mh$ = g_timer_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timer_destroy", timer);
            }
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timer_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timer_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_timer_start(GTimer *timer)
     * }
     */
    public static FunctionDescriptor g_timer_start$descriptor() {
        return g_timer_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_timer_start(GTimer *timer)
     * }
     */
    public static MethodHandle g_timer_start$handle() {
        return g_timer_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_timer_start(GTimer *timer)
     * }
     */
    public static void g_timer_start(MemorySegment timer) {
        var mh$ = g_timer_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timer_start", timer);
            }
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timer_stop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timer_stop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_timer_stop(GTimer *timer)
     * }
     */
    public static FunctionDescriptor g_timer_stop$descriptor() {
        return g_timer_stop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_timer_stop(GTimer *timer)
     * }
     */
    public static MethodHandle g_timer_stop$handle() {
        return g_timer_stop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_timer_stop(GTimer *timer)
     * }
     */
    public static void g_timer_stop(MemorySegment timer) {
        var mh$ = g_timer_stop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timer_stop", timer);
            }
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timer_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timer_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_timer_reset(GTimer *timer)
     * }
     */
    public static FunctionDescriptor g_timer_reset$descriptor() {
        return g_timer_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_timer_reset(GTimer *timer)
     * }
     */
    public static MethodHandle g_timer_reset$handle() {
        return g_timer_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_timer_reset(GTimer *timer)
     * }
     */
    public static void g_timer_reset(MemorySegment timer) {
        var mh$ = g_timer_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timer_reset", timer);
            }
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timer_continue {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timer_continue"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_timer_continue(GTimer *timer)
     * }
     */
    public static FunctionDescriptor g_timer_continue$descriptor() {
        return g_timer_continue.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_timer_continue(GTimer *timer)
     * }
     */
    public static MethodHandle g_timer_continue$handle() {
        return g_timer_continue.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_timer_continue(GTimer *timer)
     * }
     */
    public static void g_timer_continue(MemorySegment timer) {
        var mh$ = g_timer_continue.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timer_continue", timer);
            }
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timer_elapsed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timer_elapsed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble g_timer_elapsed(GTimer *timer, gulong *microseconds)
     * }
     */
    public static FunctionDescriptor g_timer_elapsed$descriptor() {
        return g_timer_elapsed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble g_timer_elapsed(GTimer *timer, gulong *microseconds)
     * }
     */
    public static MethodHandle g_timer_elapsed$handle() {
        return g_timer_elapsed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble g_timer_elapsed(GTimer *timer, gulong *microseconds)
     * }
     */
    public static double g_timer_elapsed(MemorySegment timer, MemorySegment microseconds) {
        var mh$ = g_timer_elapsed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timer_elapsed", timer, microseconds);
            }
            return (double)mh$.invokeExact(timer, microseconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_timer_is_active {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_timer_is_active"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_timer_is_active(GTimer *timer)
     * }
     */
    public static FunctionDescriptor g_timer_is_active$descriptor() {
        return g_timer_is_active.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_timer_is_active(GTimer *timer)
     * }
     */
    public static MethodHandle g_timer_is_active$handle() {
        return g_timer_is_active.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_timer_is_active(GTimer *timer)
     * }
     */
    public static int g_timer_is_active(MemorySegment timer) {
        var mh$ = g_timer_is_active.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_timer_is_active", timer);
            }
            return (int)mh$.invokeExact(timer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_usleep {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_usleep"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_usleep(gulong microseconds)
     * }
     */
    public static FunctionDescriptor g_usleep$descriptor() {
        return g_usleep.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_usleep(gulong microseconds)
     * }
     */
    public static MethodHandle g_usleep$handle() {
        return g_usleep.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_usleep(gulong microseconds)
     * }
     */
    public static void g_usleep(long microseconds) {
        var mh$ = g_usleep.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_usleep", microseconds);
            }
            mh$.invokeExact(microseconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_val_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_val_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_time_val_add(GTimeVal *time_, glong microseconds)
     * }
     */
    public static FunctionDescriptor g_time_val_add$descriptor() {
        return g_time_val_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_time_val_add(GTimeVal *time_, glong microseconds)
     * }
     */
    public static MethodHandle g_time_val_add$handle() {
        return g_time_val_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_time_val_add(GTimeVal *time_, glong microseconds)
     * }
     */
    public static void g_time_val_add(MemorySegment time_, long microseconds) {
        var mh$ = g_time_val_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_val_add", time_, microseconds);
            }
            mh$.invokeExact(time_, microseconds);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_val_from_iso8601 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_val_from_iso8601"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_time_val_from_iso8601(const gchar *iso_date, GTimeVal *time_)
     * }
     */
    public static FunctionDescriptor g_time_val_from_iso8601$descriptor() {
        return g_time_val_from_iso8601.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_time_val_from_iso8601(const gchar *iso_date, GTimeVal *time_)
     * }
     */
    public static MethodHandle g_time_val_from_iso8601$handle() {
        return g_time_val_from_iso8601.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_time_val_from_iso8601(const gchar *iso_date, GTimeVal *time_)
     * }
     */
    public static int g_time_val_from_iso8601(MemorySegment iso_date, MemorySegment time_) {
        var mh$ = g_time_val_from_iso8601.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_val_from_iso8601", iso_date, time_);
            }
            return (int)mh$.invokeExact(iso_date, time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_time_val_to_iso8601 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_time_val_to_iso8601"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_time_val_to_iso8601(GTimeVal *time_)
     * }
     */
    public static FunctionDescriptor g_time_val_to_iso8601$descriptor() {
        return g_time_val_to_iso8601.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_time_val_to_iso8601(GTimeVal *time_)
     * }
     */
    public static MethodHandle g_time_val_to_iso8601$handle() {
        return g_time_val_to_iso8601.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_time_val_to_iso8601(GTimeVal *time_)
     * }
     */
    public static MemorySegment g_time_val_to_iso8601(MemorySegment time_) {
        var mh$ = g_time_val_to_iso8601.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_time_val_to_iso8601", time_);
            }
            return (MemorySegment)mh$.invokeExact(time_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_trash_stack_push {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_trash_stack_push"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_trash_stack_push(GTrashStack **stack_p, gpointer data_p)
     * }
     */
    public static FunctionDescriptor g_trash_stack_push$descriptor() {
        return g_trash_stack_push.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_trash_stack_push(GTrashStack **stack_p, gpointer data_p)
     * }
     */
    public static MethodHandle g_trash_stack_push$handle() {
        return g_trash_stack_push.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_trash_stack_push(GTrashStack **stack_p, gpointer data_p)
     * }
     */
    public static void g_trash_stack_push(MemorySegment stack_p, MemorySegment data_p) {
        var mh$ = g_trash_stack_push.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_trash_stack_push", stack_p, data_p);
            }
            mh$.invokeExact(stack_p, data_p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_trash_stack_pop {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_trash_stack_pop"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_trash_stack_pop(GTrashStack **stack_p)
     * }
     */
    public static FunctionDescriptor g_trash_stack_pop$descriptor() {
        return g_trash_stack_pop.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_trash_stack_pop(GTrashStack **stack_p)
     * }
     */
    public static MethodHandle g_trash_stack_pop$handle() {
        return g_trash_stack_pop.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_trash_stack_pop(GTrashStack **stack_p)
     * }
     */
    public static MemorySegment g_trash_stack_pop(MemorySegment stack_p) {
        var mh$ = g_trash_stack_pop.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_trash_stack_pop", stack_p);
            }
            return (MemorySegment)mh$.invokeExact(stack_p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_trash_stack_peek {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_trash_stack_peek"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_trash_stack_peek(GTrashStack **stack_p)
     * }
     */
    public static FunctionDescriptor g_trash_stack_peek$descriptor() {
        return g_trash_stack_peek.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_trash_stack_peek(GTrashStack **stack_p)
     * }
     */
    public static MethodHandle g_trash_stack_peek$handle() {
        return g_trash_stack_peek.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_trash_stack_peek(GTrashStack **stack_p)
     * }
     */
    public static MemorySegment g_trash_stack_peek(MemorySegment stack_p) {
        var mh$ = g_trash_stack_peek.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_trash_stack_peek", stack_p);
            }
            return (MemorySegment)mh$.invokeExact(stack_p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_trash_stack_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_trash_stack_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint g_trash_stack_height(GTrashStack **stack_p)
     * }
     */
    public static FunctionDescriptor g_trash_stack_height$descriptor() {
        return g_trash_stack_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint g_trash_stack_height(GTrashStack **stack_p)
     * }
     */
    public static MethodHandle g_trash_stack_height$handle() {
        return g_trash_stack_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint g_trash_stack_height(GTrashStack **stack_p)
     * }
     */
    public static int g_trash_stack_height(MemorySegment stack_p) {
        var mh$ = g_trash_stack_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_trash_stack_height", stack_p);
            }
            return (int)mh$.invokeExact(stack_p);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTree *g_tree_new(GCompareFunc key_compare_func)
     * }
     */
    public static FunctionDescriptor g_tree_new$descriptor() {
        return g_tree_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTree *g_tree_new(GCompareFunc key_compare_func)
     * }
     */
    public static MethodHandle g_tree_new$handle() {
        return g_tree_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTree *g_tree_new(GCompareFunc key_compare_func)
     * }
     */
    public static MemorySegment g_tree_new(MemorySegment key_compare_func) {
        var mh$ = g_tree_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_new", key_compare_func);
            }
            return (MemorySegment)mh$.invokeExact(key_compare_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_new_with_data {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_new_with_data"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTree *g_tree_new_with_data(GCompareDataFunc key_compare_func, gpointer key_compare_data)
     * }
     */
    public static FunctionDescriptor g_tree_new_with_data$descriptor() {
        return g_tree_new_with_data.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTree *g_tree_new_with_data(GCompareDataFunc key_compare_func, gpointer key_compare_data)
     * }
     */
    public static MethodHandle g_tree_new_with_data$handle() {
        return g_tree_new_with_data.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTree *g_tree_new_with_data(GCompareDataFunc key_compare_func, gpointer key_compare_data)
     * }
     */
    public static MemorySegment g_tree_new_with_data(MemorySegment key_compare_func, MemorySegment key_compare_data) {
        var mh$ = g_tree_new_with_data.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_new_with_data", key_compare_func, key_compare_data);
            }
            return (MemorySegment)mh$.invokeExact(key_compare_func, key_compare_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_new_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_new_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTree *g_tree_new_full(GCompareDataFunc key_compare_func, gpointer key_compare_data, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func)
     * }
     */
    public static FunctionDescriptor g_tree_new_full$descriptor() {
        return g_tree_new_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTree *g_tree_new_full(GCompareDataFunc key_compare_func, gpointer key_compare_data, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func)
     * }
     */
    public static MethodHandle g_tree_new_full$handle() {
        return g_tree_new_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTree *g_tree_new_full(GCompareDataFunc key_compare_func, gpointer key_compare_data, GDestroyNotify key_destroy_func, GDestroyNotify value_destroy_func)
     * }
     */
    public static MemorySegment g_tree_new_full(MemorySegment key_compare_func, MemorySegment key_compare_data, MemorySegment key_destroy_func, MemorySegment value_destroy_func) {
        var mh$ = g_tree_new_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_new_full", key_compare_func, key_compare_data, key_destroy_func, value_destroy_func);
            }
            return (MemorySegment)mh$.invokeExact(key_compare_func, key_compare_data, key_destroy_func, value_destroy_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_node_first {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_node_first"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_first(GTree *tree)
     * }
     */
    public static FunctionDescriptor g_tree_node_first$descriptor() {
        return g_tree_node_first.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_first(GTree *tree)
     * }
     */
    public static MethodHandle g_tree_node_first$handle() {
        return g_tree_node_first.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_first(GTree *tree)
     * }
     */
    public static MemorySegment g_tree_node_first(MemorySegment tree) {
        var mh$ = g_tree_node_first.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_node_first", tree);
            }
            return (MemorySegment)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_node_last {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_node_last"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_last(GTree *tree)
     * }
     */
    public static FunctionDescriptor g_tree_node_last$descriptor() {
        return g_tree_node_last.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_last(GTree *tree)
     * }
     */
    public static MethodHandle g_tree_node_last$handle() {
        return g_tree_node_last.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_last(GTree *tree)
     * }
     */
    public static MemorySegment g_tree_node_last(MemorySegment tree) {
        var mh$ = g_tree_node_last.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_node_last", tree);
            }
            return (MemorySegment)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_node_previous {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_node_previous"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_previous(GTreeNode *node)
     * }
     */
    public static FunctionDescriptor g_tree_node_previous$descriptor() {
        return g_tree_node_previous.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_previous(GTreeNode *node)
     * }
     */
    public static MethodHandle g_tree_node_previous$handle() {
        return g_tree_node_previous.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_previous(GTreeNode *node)
     * }
     */
    public static MemorySegment g_tree_node_previous(MemorySegment node) {
        var mh$ = g_tree_node_previous.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_node_previous", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_node_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_node_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_next(GTreeNode *node)
     * }
     */
    public static FunctionDescriptor g_tree_node_next$descriptor() {
        return g_tree_node_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_next(GTreeNode *node)
     * }
     */
    public static MethodHandle g_tree_node_next$handle() {
        return g_tree_node_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_node_next(GTreeNode *node)
     * }
     */
    public static MemorySegment g_tree_node_next(MemorySegment node) {
        var mh$ = g_tree_node_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_node_next", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTree *g_tree_ref(GTree *tree)
     * }
     */
    public static FunctionDescriptor g_tree_ref$descriptor() {
        return g_tree_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTree *g_tree_ref(GTree *tree)
     * }
     */
    public static MethodHandle g_tree_ref$handle() {
        return g_tree_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTree *g_tree_ref(GTree *tree)
     * }
     */
    public static MemorySegment g_tree_ref(MemorySegment tree) {
        var mh$ = g_tree_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_ref", tree);
            }
            return (MemorySegment)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tree_unref(GTree *tree)
     * }
     */
    public static FunctionDescriptor g_tree_unref$descriptor() {
        return g_tree_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tree_unref(GTree *tree)
     * }
     */
    public static MethodHandle g_tree_unref$handle() {
        return g_tree_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tree_unref(GTree *tree)
     * }
     */
    public static void g_tree_unref(MemorySegment tree) {
        var mh$ = g_tree_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_unref", tree);
            }
            mh$.invokeExact(tree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tree_destroy(GTree *tree)
     * }
     */
    public static FunctionDescriptor g_tree_destroy$descriptor() {
        return g_tree_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tree_destroy(GTree *tree)
     * }
     */
    public static MethodHandle g_tree_destroy$handle() {
        return g_tree_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tree_destroy(GTree *tree)
     * }
     */
    public static void g_tree_destroy(MemorySegment tree) {
        var mh$ = g_tree_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_destroy", tree);
            }
            mh$.invokeExact(tree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_insert_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_insert_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_insert_node(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static FunctionDescriptor g_tree_insert_node$descriptor() {
        return g_tree_insert_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_insert_node(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static MethodHandle g_tree_insert_node$handle() {
        return g_tree_insert_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_insert_node(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static MemorySegment g_tree_insert_node(MemorySegment tree, MemorySegment key, MemorySegment value) {
        var mh$ = g_tree_insert_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_insert_node", tree, key, value);
            }
            return (MemorySegment)mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tree_insert(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static FunctionDescriptor g_tree_insert$descriptor() {
        return g_tree_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tree_insert(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static MethodHandle g_tree_insert$handle() {
        return g_tree_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tree_insert(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static void g_tree_insert(MemorySegment tree, MemorySegment key, MemorySegment value) {
        var mh$ = g_tree_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_insert", tree, key, value);
            }
            mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_replace_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_replace_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_replace_node(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static FunctionDescriptor g_tree_replace_node$descriptor() {
        return g_tree_replace_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_replace_node(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static MethodHandle g_tree_replace_node$handle() {
        return g_tree_replace_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_replace_node(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static MemorySegment g_tree_replace_node(MemorySegment tree, MemorySegment key, MemorySegment value) {
        var mh$ = g_tree_replace_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_replace_node", tree, key, value);
            }
            return (MemorySegment)mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_replace {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_replace"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tree_replace(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static FunctionDescriptor g_tree_replace$descriptor() {
        return g_tree_replace.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tree_replace(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static MethodHandle g_tree_replace$handle() {
        return g_tree_replace.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tree_replace(GTree *tree, gpointer key, gpointer value)
     * }
     */
    public static void g_tree_replace(MemorySegment tree, MemorySegment key, MemorySegment value) {
        var mh$ = g_tree_replace.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_replace", tree, key, value);
            }
            mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tree_remove(GTree *tree, gconstpointer key)
     * }
     */
    public static FunctionDescriptor g_tree_remove$descriptor() {
        return g_tree_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tree_remove(GTree *tree, gconstpointer key)
     * }
     */
    public static MethodHandle g_tree_remove$handle() {
        return g_tree_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tree_remove(GTree *tree, gconstpointer key)
     * }
     */
    public static int g_tree_remove(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_remove", tree, key);
            }
            return (int)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_remove_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_remove_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tree_remove_all(GTree *tree)
     * }
     */
    public static FunctionDescriptor g_tree_remove_all$descriptor() {
        return g_tree_remove_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tree_remove_all(GTree *tree)
     * }
     */
    public static MethodHandle g_tree_remove_all$handle() {
        return g_tree_remove_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tree_remove_all(GTree *tree)
     * }
     */
    public static void g_tree_remove_all(MemorySegment tree) {
        var mh$ = g_tree_remove_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_remove_all", tree);
            }
            mh$.invokeExact(tree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_steal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_steal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tree_steal(GTree *tree, gconstpointer key)
     * }
     */
    public static FunctionDescriptor g_tree_steal$descriptor() {
        return g_tree_steal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tree_steal(GTree *tree, gconstpointer key)
     * }
     */
    public static MethodHandle g_tree_steal$handle() {
        return g_tree_steal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tree_steal(GTree *tree, gconstpointer key)
     * }
     */
    public static int g_tree_steal(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_steal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_steal", tree, key);
            }
            return (int)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_node_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_node_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_tree_node_key(GTreeNode *node)
     * }
     */
    public static FunctionDescriptor g_tree_node_key$descriptor() {
        return g_tree_node_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_tree_node_key(GTreeNode *node)
     * }
     */
    public static MethodHandle g_tree_node_key$handle() {
        return g_tree_node_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_tree_node_key(GTreeNode *node)
     * }
     */
    public static MemorySegment g_tree_node_key(MemorySegment node) {
        var mh$ = g_tree_node_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_node_key", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_node_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_node_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_tree_node_value(GTreeNode *node)
     * }
     */
    public static FunctionDescriptor g_tree_node_value$descriptor() {
        return g_tree_node_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_tree_node_value(GTreeNode *node)
     * }
     */
    public static MethodHandle g_tree_node_value$handle() {
        return g_tree_node_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_tree_node_value(GTreeNode *node)
     * }
     */
    public static MemorySegment g_tree_node_value(MemorySegment node) {
        var mh$ = g_tree_node_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_node_value", node);
            }
            return (MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_lookup_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_lookup_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_lookup_node(GTree *tree, gconstpointer key)
     * }
     */
    public static FunctionDescriptor g_tree_lookup_node$descriptor() {
        return g_tree_lookup_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_lookup_node(GTree *tree, gconstpointer key)
     * }
     */
    public static MethodHandle g_tree_lookup_node$handle() {
        return g_tree_lookup_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_lookup_node(GTree *tree, gconstpointer key)
     * }
     */
    public static MemorySegment g_tree_lookup_node(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_lookup_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_lookup_node", tree, key);
            }
            return (MemorySegment)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_lookup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_lookup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_tree_lookup(GTree *tree, gconstpointer key)
     * }
     */
    public static FunctionDescriptor g_tree_lookup$descriptor() {
        return g_tree_lookup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_tree_lookup(GTree *tree, gconstpointer key)
     * }
     */
    public static MethodHandle g_tree_lookup$handle() {
        return g_tree_lookup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_tree_lookup(GTree *tree, gconstpointer key)
     * }
     */
    public static MemorySegment g_tree_lookup(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_lookup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_lookup", tree, key);
            }
            return (MemorySegment)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_lookup_extended {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_lookup_extended"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_tree_lookup_extended(GTree *tree, gconstpointer lookup_key, gpointer *orig_key, gpointer *value)
     * }
     */
    public static FunctionDescriptor g_tree_lookup_extended$descriptor() {
        return g_tree_lookup_extended.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_tree_lookup_extended(GTree *tree, gconstpointer lookup_key, gpointer *orig_key, gpointer *value)
     * }
     */
    public static MethodHandle g_tree_lookup_extended$handle() {
        return g_tree_lookup_extended.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_tree_lookup_extended(GTree *tree, gconstpointer lookup_key, gpointer *orig_key, gpointer *value)
     * }
     */
    public static int g_tree_lookup_extended(MemorySegment tree, MemorySegment lookup_key, MemorySegment orig_key, MemorySegment value) {
        var mh$ = g_tree_lookup_extended.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_lookup_extended", tree, lookup_key, orig_key, value);
            }
            return (int)mh$.invokeExact(tree, lookup_key, orig_key, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tree_foreach(GTree *tree, GTraverseFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tree_foreach$descriptor() {
        return g_tree_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tree_foreach(GTree *tree, GTraverseFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_tree_foreach$handle() {
        return g_tree_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tree_foreach(GTree *tree, GTraverseFunc func, gpointer user_data)
     * }
     */
    public static void g_tree_foreach(MemorySegment tree, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_tree_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_foreach", tree, func, user_data);
            }
            mh$.invokeExact(tree, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_foreach_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_foreach_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tree_foreach_node(GTree *tree, GTraverseNodeFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tree_foreach_node$descriptor() {
        return g_tree_foreach_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tree_foreach_node(GTree *tree, GTraverseNodeFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_tree_foreach_node$handle() {
        return g_tree_foreach_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tree_foreach_node(GTree *tree, GTraverseNodeFunc func, gpointer user_data)
     * }
     */
    public static void g_tree_foreach_node(MemorySegment tree, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_tree_foreach_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_foreach_node", tree, func, user_data);
            }
            mh$.invokeExact(tree, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_traverse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_traverse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tree_traverse(GTree *tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tree_traverse$descriptor() {
        return g_tree_traverse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tree_traverse(GTree *tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer user_data)
     * }
     */
    public static MethodHandle g_tree_traverse$handle() {
        return g_tree_traverse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tree_traverse(GTree *tree, GTraverseFunc traverse_func, GTraverseType traverse_type, gpointer user_data)
     * }
     */
    public static void g_tree_traverse(MemorySegment tree, MemorySegment traverse_func, int traverse_type, MemorySegment user_data) {
        var mh$ = g_tree_traverse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_traverse", tree, traverse_func, traverse_type, user_data);
            }
            mh$.invokeExact(tree, traverse_func, traverse_type, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_search_node {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_search_node"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_search_node(GTree *tree, GCompareFunc search_func, gconstpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tree_search_node$descriptor() {
        return g_tree_search_node.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_search_node(GTree *tree, GCompareFunc search_func, gconstpointer user_data)
     * }
     */
    public static MethodHandle g_tree_search_node$handle() {
        return g_tree_search_node.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_search_node(GTree *tree, GCompareFunc search_func, gconstpointer user_data)
     * }
     */
    public static MemorySegment g_tree_search_node(MemorySegment tree, MemorySegment search_func, MemorySegment user_data) {
        var mh$ = g_tree_search_node.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_search_node", tree, search_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(tree, search_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_search {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_search"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_tree_search(GTree *tree, GCompareFunc search_func, gconstpointer user_data)
     * }
     */
    public static FunctionDescriptor g_tree_search$descriptor() {
        return g_tree_search.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_tree_search(GTree *tree, GCompareFunc search_func, gconstpointer user_data)
     * }
     */
    public static MethodHandle g_tree_search$handle() {
        return g_tree_search.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_tree_search(GTree *tree, GCompareFunc search_func, gconstpointer user_data)
     * }
     */
    public static MemorySegment g_tree_search(MemorySegment tree, MemorySegment search_func, MemorySegment user_data) {
        var mh$ = g_tree_search.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_search", tree, search_func, user_data);
            }
            return (MemorySegment)mh$.invokeExact(tree, search_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_lower_bound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_lower_bound"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_lower_bound(GTree *tree, gconstpointer key)
     * }
     */
    public static FunctionDescriptor g_tree_lower_bound$descriptor() {
        return g_tree_lower_bound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_lower_bound(GTree *tree, gconstpointer key)
     * }
     */
    public static MethodHandle g_tree_lower_bound$handle() {
        return g_tree_lower_bound.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_lower_bound(GTree *tree, gconstpointer key)
     * }
     */
    public static MemorySegment g_tree_lower_bound(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_lower_bound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_lower_bound", tree, key);
            }
            return (MemorySegment)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_upper_bound {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_upper_bound"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_upper_bound(GTree *tree, gconstpointer key)
     * }
     */
    public static FunctionDescriptor g_tree_upper_bound$descriptor() {
        return g_tree_upper_bound.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_upper_bound(GTree *tree, gconstpointer key)
     * }
     */
    public static MethodHandle g_tree_upper_bound$handle() {
        return g_tree_upper_bound.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTreeNode *g_tree_upper_bound(GTree *tree, gconstpointer key)
     * }
     */
    public static MemorySegment g_tree_upper_bound(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_upper_bound.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_upper_bound", tree, key);
            }
            return (MemorySegment)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_tree_height(GTree *tree)
     * }
     */
    public static FunctionDescriptor g_tree_height$descriptor() {
        return g_tree_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_tree_height(GTree *tree)
     * }
     */
    public static MethodHandle g_tree_height$handle() {
        return g_tree_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_tree_height(GTree *tree)
     * }
     */
    public static int g_tree_height(MemorySegment tree) {
        var mh$ = g_tree_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_height", tree);
            }
            return (int)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tree_nnodes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tree_nnodes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_tree_nnodes(GTree *tree)
     * }
     */
    public static FunctionDescriptor g_tree_nnodes$descriptor() {
        return g_tree_nnodes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_tree_nnodes(GTree *tree)
     * }
     */
    public static MethodHandle g_tree_nnodes$handle() {
        return g_tree_nnodes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_tree_nnodes(GTree *tree)
     * }
     */
    public static int g_tree_nnodes(MemorySegment tree) {
        var mh$ = g_tree_nnodes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tree_nnodes", tree);
            }
            return (int)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_ref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_ref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUri *g_uri_ref(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_ref$descriptor() {
        return g_uri_ref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUri *g_uri_ref(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_ref$handle() {
        return g_uri_ref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUri *g_uri_ref(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_ref(MemorySegment uri) {
        var mh$ = g_uri_ref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_ref", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_unref {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_unref"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_uri_unref(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_unref$descriptor() {
        return g_uri_unref.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_uri_unref(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_unref$handle() {
        return g_uri_unref.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_uri_unref(GUri *uri)
     * }
     */
    public static void g_uri_unref(MemorySegment uri) {
        var mh$ = g_uri_unref.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_unref", uri);
            }
            mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_URI_FLAGS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_FLAGS_NONE = 0
     * }
     */
    public static int G_URI_FLAGS_NONE() {
        return G_URI_FLAGS_NONE;
    }
    private static final int G_URI_FLAGS_PARSE_RELAXED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_FLAGS_PARSE_RELAXED = 1
     * }
     */
    public static int G_URI_FLAGS_PARSE_RELAXED() {
        return G_URI_FLAGS_PARSE_RELAXED;
    }
    private static final int G_URI_FLAGS_HAS_PASSWORD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_FLAGS_HAS_PASSWORD = 2
     * }
     */
    public static int G_URI_FLAGS_HAS_PASSWORD() {
        return G_URI_FLAGS_HAS_PASSWORD;
    }
    private static final int G_URI_FLAGS_HAS_AUTH_PARAMS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_FLAGS_HAS_AUTH_PARAMS = 4
     * }
     */
    public static int G_URI_FLAGS_HAS_AUTH_PARAMS() {
        return G_URI_FLAGS_HAS_AUTH_PARAMS;
    }
    private static final int G_URI_FLAGS_ENCODED = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_FLAGS_ENCODED = 8
     * }
     */
    public static int G_URI_FLAGS_ENCODED() {
        return G_URI_FLAGS_ENCODED;
    }
    private static final int G_URI_FLAGS_NON_DNS = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_FLAGS_NON_DNS = 16
     * }
     */
    public static int G_URI_FLAGS_NON_DNS() {
        return G_URI_FLAGS_NON_DNS;
    }
    private static final int G_URI_FLAGS_ENCODED_QUERY = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_FLAGS_ENCODED_QUERY = 32
     * }
     */
    public static int G_URI_FLAGS_ENCODED_QUERY() {
        return G_URI_FLAGS_ENCODED_QUERY;
    }
    private static final int G_URI_FLAGS_ENCODED_PATH = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_FLAGS_ENCODED_PATH = 64
     * }
     */
    public static int G_URI_FLAGS_ENCODED_PATH() {
        return G_URI_FLAGS_ENCODED_PATH;
    }
    private static final int G_URI_FLAGS_ENCODED_FRAGMENT = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_FLAGS_ENCODED_FRAGMENT = 128
     * }
     */
    public static int G_URI_FLAGS_ENCODED_FRAGMENT() {
        return G_URI_FLAGS_ENCODED_FRAGMENT;
    }
    private static final int G_URI_FLAGS_SCHEME_NORMALIZE = (int)256L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_FLAGS_SCHEME_NORMALIZE = 256
     * }
     */
    public static int G_URI_FLAGS_SCHEME_NORMALIZE() {
        return G_URI_FLAGS_SCHEME_NORMALIZE;
    }

    private static class g_uri_split {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_split"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_uri_split(const gchar *uri_ref, GUriFlags flags, gchar **scheme, gchar **userinfo, gchar **host, gint *port, gchar **path, gchar **query, gchar **fragment, GError **error)
     * }
     */
    public static FunctionDescriptor g_uri_split$descriptor() {
        return g_uri_split.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_uri_split(const gchar *uri_ref, GUriFlags flags, gchar **scheme, gchar **userinfo, gchar **host, gint *port, gchar **path, gchar **query, gchar **fragment, GError **error)
     * }
     */
    public static MethodHandle g_uri_split$handle() {
        return g_uri_split.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_uri_split(const gchar *uri_ref, GUriFlags flags, gchar **scheme, gchar **userinfo, gchar **host, gint *port, gchar **path, gchar **query, gchar **fragment, GError **error)
     * }
     */
    public static int g_uri_split(MemorySegment uri_ref, int flags, MemorySegment scheme, MemorySegment userinfo, MemorySegment host, MemorySegment port, MemorySegment path, MemorySegment query, MemorySegment fragment, MemorySegment error) {
        var mh$ = g_uri_split.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_split", uri_ref, flags, scheme, userinfo, host, port, path, query, fragment, error);
            }
            return (int)mh$.invokeExact(uri_ref, flags, scheme, userinfo, host, port, path, query, fragment, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_split_with_user {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_split_with_user"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_uri_split_with_user(const gchar *uri_ref, GUriFlags flags, gchar **scheme, gchar **user, gchar **password, gchar **auth_params, gchar **host, gint *port, gchar **path, gchar **query, gchar **fragment, GError **error)
     * }
     */
    public static FunctionDescriptor g_uri_split_with_user$descriptor() {
        return g_uri_split_with_user.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_uri_split_with_user(const gchar *uri_ref, GUriFlags flags, gchar **scheme, gchar **user, gchar **password, gchar **auth_params, gchar **host, gint *port, gchar **path, gchar **query, gchar **fragment, GError **error)
     * }
     */
    public static MethodHandle g_uri_split_with_user$handle() {
        return g_uri_split_with_user.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_uri_split_with_user(const gchar *uri_ref, GUriFlags flags, gchar **scheme, gchar **user, gchar **password, gchar **auth_params, gchar **host, gint *port, gchar **path, gchar **query, gchar **fragment, GError **error)
     * }
     */
    public static int g_uri_split_with_user(MemorySegment uri_ref, int flags, MemorySegment scheme, MemorySegment user, MemorySegment password, MemorySegment auth_params, MemorySegment host, MemorySegment port, MemorySegment path, MemorySegment query, MemorySegment fragment, MemorySegment error) {
        var mh$ = g_uri_split_with_user.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_split_with_user", uri_ref, flags, scheme, user, password, auth_params, host, port, path, query, fragment, error);
            }
            return (int)mh$.invokeExact(uri_ref, flags, scheme, user, password, auth_params, host, port, path, query, fragment, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_split_network {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_split_network"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_uri_split_network(const gchar *uri_string, GUriFlags flags, gchar **scheme, gchar **host, gint *port, GError **error)
     * }
     */
    public static FunctionDescriptor g_uri_split_network$descriptor() {
        return g_uri_split_network.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_uri_split_network(const gchar *uri_string, GUriFlags flags, gchar **scheme, gchar **host, gint *port, GError **error)
     * }
     */
    public static MethodHandle g_uri_split_network$handle() {
        return g_uri_split_network.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_uri_split_network(const gchar *uri_string, GUriFlags flags, gchar **scheme, gchar **host, gint *port, GError **error)
     * }
     */
    public static int g_uri_split_network(MemorySegment uri_string, int flags, MemorySegment scheme, MemorySegment host, MemorySegment port, MemorySegment error) {
        var mh$ = g_uri_split_network.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_split_network", uri_string, flags, scheme, host, port, error);
            }
            return (int)mh$.invokeExact(uri_string, flags, scheme, host, port, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_uri_is_valid(const gchar *uri_string, GUriFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_uri_is_valid$descriptor() {
        return g_uri_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_uri_is_valid(const gchar *uri_string, GUriFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_uri_is_valid$handle() {
        return g_uri_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_uri_is_valid(const gchar *uri_string, GUriFlags flags, GError **error)
     * }
     */
    public static int g_uri_is_valid(MemorySegment uri_string, int flags, MemorySegment error) {
        var mh$ = g_uri_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_is_valid", uri_string, flags, error);
            }
            return (int)mh$.invokeExact(uri_string, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_join {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_join"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_uri_join(GUriFlags flags, const gchar *scheme, const gchar *userinfo, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static FunctionDescriptor g_uri_join$descriptor() {
        return g_uri_join.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_uri_join(GUriFlags flags, const gchar *scheme, const gchar *userinfo, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static MethodHandle g_uri_join$handle() {
        return g_uri_join.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_uri_join(GUriFlags flags, const gchar *scheme, const gchar *userinfo, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static MemorySegment g_uri_join(int flags, MemorySegment scheme, MemorySegment userinfo, MemorySegment host, int port, MemorySegment path, MemorySegment query, MemorySegment fragment) {
        var mh$ = g_uri_join.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_join", flags, scheme, userinfo, host, port, path, query, fragment);
            }
            return (MemorySegment)mh$.invokeExact(flags, scheme, userinfo, host, port, path, query, fragment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_join_with_user {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_join_with_user"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_uri_join_with_user(GUriFlags flags, const gchar *scheme, const gchar *user, const gchar *password, const gchar *auth_params, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static FunctionDescriptor g_uri_join_with_user$descriptor() {
        return g_uri_join_with_user.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_uri_join_with_user(GUriFlags flags, const gchar *scheme, const gchar *user, const gchar *password, const gchar *auth_params, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static MethodHandle g_uri_join_with_user$handle() {
        return g_uri_join_with_user.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_uri_join_with_user(GUriFlags flags, const gchar *scheme, const gchar *user, const gchar *password, const gchar *auth_params, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static MemorySegment g_uri_join_with_user(int flags, MemorySegment scheme, MemorySegment user, MemorySegment password, MemorySegment auth_params, MemorySegment host, int port, MemorySegment path, MemorySegment query, MemorySegment fragment) {
        var mh$ = g_uri_join_with_user.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_join_with_user", flags, scheme, user, password, auth_params, host, port, path, query, fragment);
            }
            return (MemorySegment)mh$.invokeExact(flags, scheme, user, password, auth_params, host, port, path, query, fragment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUri *g_uri_parse(const gchar *uri_string, GUriFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_uri_parse$descriptor() {
        return g_uri_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUri *g_uri_parse(const gchar *uri_string, GUriFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_uri_parse$handle() {
        return g_uri_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUri *g_uri_parse(const gchar *uri_string, GUriFlags flags, GError **error)
     * }
     */
    public static MemorySegment g_uri_parse(MemorySegment uri_string, int flags, MemorySegment error) {
        var mh$ = g_uri_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_parse", uri_string, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(uri_string, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_parse_relative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_parse_relative"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUri *g_uri_parse_relative(GUri *base_uri, const gchar *uri_ref, GUriFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_uri_parse_relative$descriptor() {
        return g_uri_parse_relative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUri *g_uri_parse_relative(GUri *base_uri, const gchar *uri_ref, GUriFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_uri_parse_relative$handle() {
        return g_uri_parse_relative.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUri *g_uri_parse_relative(GUri *base_uri, const gchar *uri_ref, GUriFlags flags, GError **error)
     * }
     */
    public static MemorySegment g_uri_parse_relative(MemorySegment base_uri, MemorySegment uri_ref, int flags, MemorySegment error) {
        var mh$ = g_uri_parse_relative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_parse_relative", base_uri, uri_ref, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(base_uri, uri_ref, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_resolve_relative {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_resolve_relative"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_uri_resolve_relative(const gchar *base_uri_string, const gchar *uri_ref, GUriFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_uri_resolve_relative$descriptor() {
        return g_uri_resolve_relative.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_uri_resolve_relative(const gchar *base_uri_string, const gchar *uri_ref, GUriFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_uri_resolve_relative$handle() {
        return g_uri_resolve_relative.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_uri_resolve_relative(const gchar *base_uri_string, const gchar *uri_ref, GUriFlags flags, GError **error)
     * }
     */
    public static MemorySegment g_uri_resolve_relative(MemorySegment base_uri_string, MemorySegment uri_ref, int flags, MemorySegment error) {
        var mh$ = g_uri_resolve_relative.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_resolve_relative", base_uri_string, uri_ref, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(base_uri_string, uri_ref, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_build {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_build"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUri *g_uri_build(GUriFlags flags, const gchar *scheme, const gchar *userinfo, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static FunctionDescriptor g_uri_build$descriptor() {
        return g_uri_build.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUri *g_uri_build(GUriFlags flags, const gchar *scheme, const gchar *userinfo, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static MethodHandle g_uri_build$handle() {
        return g_uri_build.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUri *g_uri_build(GUriFlags flags, const gchar *scheme, const gchar *userinfo, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static MemorySegment g_uri_build(int flags, MemorySegment scheme, MemorySegment userinfo, MemorySegment host, int port, MemorySegment path, MemorySegment query, MemorySegment fragment) {
        var mh$ = g_uri_build.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_build", flags, scheme, userinfo, host, port, path, query, fragment);
            }
            return (MemorySegment)mh$.invokeExact(flags, scheme, userinfo, host, port, path, query, fragment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_build_with_user {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_build_with_user"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUri *g_uri_build_with_user(GUriFlags flags, const gchar *scheme, const gchar *user, const gchar *password, const gchar *auth_params, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static FunctionDescriptor g_uri_build_with_user$descriptor() {
        return g_uri_build_with_user.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUri *g_uri_build_with_user(GUriFlags flags, const gchar *scheme, const gchar *user, const gchar *password, const gchar *auth_params, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static MethodHandle g_uri_build_with_user$handle() {
        return g_uri_build_with_user.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUri *g_uri_build_with_user(GUriFlags flags, const gchar *scheme, const gchar *user, const gchar *password, const gchar *auth_params, const gchar *host, gint port, const gchar *path, const gchar *query, const gchar *fragment)
     * }
     */
    public static MemorySegment g_uri_build_with_user(int flags, MemorySegment scheme, MemorySegment user, MemorySegment password, MemorySegment auth_params, MemorySegment host, int port, MemorySegment path, MemorySegment query, MemorySegment fragment) {
        var mh$ = g_uri_build_with_user.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_build_with_user", flags, scheme, user, password, auth_params, host, port, path, query, fragment);
            }
            return (MemorySegment)mh$.invokeExact(flags, scheme, user, password, auth_params, host, port, path, query, fragment);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_URI_HIDE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_HIDE_NONE = 0
     * }
     */
    public static int G_URI_HIDE_NONE() {
        return G_URI_HIDE_NONE;
    }
    private static final int G_URI_HIDE_USERINFO = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_HIDE_USERINFO = 1
     * }
     */
    public static int G_URI_HIDE_USERINFO() {
        return G_URI_HIDE_USERINFO;
    }
    private static final int G_URI_HIDE_PASSWORD = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_HIDE_PASSWORD = 2
     * }
     */
    public static int G_URI_HIDE_PASSWORD() {
        return G_URI_HIDE_PASSWORD;
    }
    private static final int G_URI_HIDE_AUTH_PARAMS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_HIDE_AUTH_PARAMS = 4
     * }
     */
    public static int G_URI_HIDE_AUTH_PARAMS() {
        return G_URI_HIDE_AUTH_PARAMS;
    }
    private static final int G_URI_HIDE_QUERY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_HIDE_QUERY = 8
     * }
     */
    public static int G_URI_HIDE_QUERY() {
        return G_URI_HIDE_QUERY;
    }
    private static final int G_URI_HIDE_FRAGMENT = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_HIDE_FRAGMENT = 16
     * }
     */
    public static int G_URI_HIDE_FRAGMENT() {
        return G_URI_HIDE_FRAGMENT;
    }

    private static class g_uri_to_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_to_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_uri_to_string(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_to_string$descriptor() {
        return g_uri_to_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_uri_to_string(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_to_string$handle() {
        return g_uri_to_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_uri_to_string(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_to_string(MemorySegment uri) {
        var mh$ = g_uri_to_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_to_string", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_to_string_partial {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_to_string_partial"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_uri_to_string_partial(GUri *uri, GUriHideFlags flags)
     * }
     */
    public static FunctionDescriptor g_uri_to_string_partial$descriptor() {
        return g_uri_to_string_partial.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_uri_to_string_partial(GUri *uri, GUriHideFlags flags)
     * }
     */
    public static MethodHandle g_uri_to_string_partial$handle() {
        return g_uri_to_string_partial.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_uri_to_string_partial(GUri *uri, GUriHideFlags flags)
     * }
     */
    public static MemorySegment g_uri_to_string_partial(MemorySegment uri, int flags) {
        var mh$ = g_uri_to_string_partial.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_to_string_partial", uri, flags);
            }
            return (MemorySegment)mh$.invokeExact(uri, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_scheme(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_scheme$descriptor() {
        return g_uri_get_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_scheme(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_scheme$handle() {
        return g_uri_get_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_scheme(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_get_scheme(MemorySegment uri) {
        var mh$ = g_uri_get_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_scheme", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_userinfo {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_userinfo"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_userinfo(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_userinfo$descriptor() {
        return g_uri_get_userinfo.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_userinfo(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_userinfo$handle() {
        return g_uri_get_userinfo.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_userinfo(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_get_userinfo(MemorySegment uri) {
        var mh$ = g_uri_get_userinfo.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_userinfo", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_user {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_user"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_user(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_user$descriptor() {
        return g_uri_get_user.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_user(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_user$handle() {
        return g_uri_get_user.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_user(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_get_user(MemorySegment uri) {
        var mh$ = g_uri_get_user.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_user", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_password {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_password"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_password(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_password$descriptor() {
        return g_uri_get_password.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_password(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_password$handle() {
        return g_uri_get_password.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_password(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_get_password(MemorySegment uri) {
        var mh$ = g_uri_get_password.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_password", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_auth_params {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_auth_params"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_auth_params(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_auth_params$descriptor() {
        return g_uri_get_auth_params.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_auth_params(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_auth_params$handle() {
        return g_uri_get_auth_params.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_auth_params(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_get_auth_params(MemorySegment uri) {
        var mh$ = g_uri_get_auth_params.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_auth_params", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_host {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_host"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_host(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_host$descriptor() {
        return g_uri_get_host.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_host(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_host$handle() {
        return g_uri_get_host.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_host(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_get_host(MemorySegment uri) {
        var mh$ = g_uri_get_host.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_host", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_port {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_port"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_uri_get_port(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_port$descriptor() {
        return g_uri_get_port.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_uri_get_port(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_port$handle() {
        return g_uri_get_port.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_uri_get_port(GUri *uri)
     * }
     */
    public static int g_uri_get_port(MemorySegment uri) {
        var mh$ = g_uri_get_port.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_port", uri);
            }
            return (int)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_path(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_path$descriptor() {
        return g_uri_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_path(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_path$handle() {
        return g_uri_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_path(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_get_path(MemorySegment uri) {
        var mh$ = g_uri_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_path", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_query"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_query(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_query$descriptor() {
        return g_uri_get_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_query(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_query$handle() {
        return g_uri_get_query.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_query(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_get_query(MemorySegment uri) {
        var mh$ = g_uri_get_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_query", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_fragment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_fragment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_fragment(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_fragment$descriptor() {
        return g_uri_get_fragment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_fragment(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_fragment$handle() {
        return g_uri_get_fragment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *g_uri_get_fragment(GUri *uri)
     * }
     */
    public static MemorySegment g_uri_get_fragment(MemorySegment uri) {
        var mh$ = g_uri_get_fragment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_fragment", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_get_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_get_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GUriFlags g_uri_get_flags(GUri *uri)
     * }
     */
    public static FunctionDescriptor g_uri_get_flags$descriptor() {
        return g_uri_get_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GUriFlags g_uri_get_flags(GUri *uri)
     * }
     */
    public static MethodHandle g_uri_get_flags$handle() {
        return g_uri_get_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GUriFlags g_uri_get_flags(GUri *uri)
     * }
     */
    public static int g_uri_get_flags(MemorySegment uri) {
        var mh$ = g_uri_get_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_get_flags", uri);
            }
            return (int)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_URI_PARAMS_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_PARAMS_NONE = 0
     * }
     */
    public static int G_URI_PARAMS_NONE() {
        return G_URI_PARAMS_NONE;
    }
    private static final int G_URI_PARAMS_CASE_INSENSITIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_PARAMS_CASE_INSENSITIVE = 1
     * }
     */
    public static int G_URI_PARAMS_CASE_INSENSITIVE() {
        return G_URI_PARAMS_CASE_INSENSITIVE;
    }
    private static final int G_URI_PARAMS_WWW_FORM = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_PARAMS_WWW_FORM = 2
     * }
     */
    public static int G_URI_PARAMS_WWW_FORM() {
        return G_URI_PARAMS_WWW_FORM;
    }
    private static final int G_URI_PARAMS_PARSE_RELAXED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_PARAMS_PARSE_RELAXED = 4
     * }
     */
    public static int G_URI_PARAMS_PARSE_RELAXED() {
        return G_URI_PARAMS_PARSE_RELAXED;
    }

    private static class g_uri_parse_params {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_parse_params"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GHashTable *g_uri_parse_params(const gchar *params, gssize length, const gchar *separators, GUriParamsFlags flags, GError **error)
     * }
     */
    public static FunctionDescriptor g_uri_parse_params$descriptor() {
        return g_uri_parse_params.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GHashTable *g_uri_parse_params(const gchar *params, gssize length, const gchar *separators, GUriParamsFlags flags, GError **error)
     * }
     */
    public static MethodHandle g_uri_parse_params$handle() {
        return g_uri_parse_params.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GHashTable *g_uri_parse_params(const gchar *params, gssize length, const gchar *separators, GUriParamsFlags flags, GError **error)
     * }
     */
    public static MemorySegment g_uri_parse_params(MemorySegment params, long length, MemorySegment separators, int flags, MemorySegment error) {
        var mh$ = g_uri_parse_params.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_parse_params", params, length, separators, flags, error);
            }
            return (MemorySegment)mh$.invokeExact(params, length, separators, flags, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_params_iter_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_params_iter_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_uri_params_iter_init(GUriParamsIter *iter, const gchar *params, gssize length, const gchar *separators, GUriParamsFlags flags)
     * }
     */
    public static FunctionDescriptor g_uri_params_iter_init$descriptor() {
        return g_uri_params_iter_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_uri_params_iter_init(GUriParamsIter *iter, const gchar *params, gssize length, const gchar *separators, GUriParamsFlags flags)
     * }
     */
    public static MethodHandle g_uri_params_iter_init$handle() {
        return g_uri_params_iter_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_uri_params_iter_init(GUriParamsIter *iter, const gchar *params, gssize length, const gchar *separators, GUriParamsFlags flags)
     * }
     */
    public static void g_uri_params_iter_init(MemorySegment iter, MemorySegment params, long length, MemorySegment separators, int flags) {
        var mh$ = g_uri_params_iter_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_params_iter_init", iter, params, length, separators, flags);
            }
            mh$.invokeExact(iter, params, length, separators, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_params_iter_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_params_iter_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_uri_params_iter_next(GUriParamsIter *iter, gchar **attribute, gchar **value, GError **error)
     * }
     */
    public static FunctionDescriptor g_uri_params_iter_next$descriptor() {
        return g_uri_params_iter_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_uri_params_iter_next(GUriParamsIter *iter, gchar **attribute, gchar **value, GError **error)
     * }
     */
    public static MethodHandle g_uri_params_iter_next$handle() {
        return g_uri_params_iter_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_uri_params_iter_next(GUriParamsIter *iter, gchar **attribute, gchar **value, GError **error)
     * }
     */
    public static int g_uri_params_iter_next(MemorySegment iter, MemorySegment attribute, MemorySegment value, MemorySegment error) {
        var mh$ = g_uri_params_iter_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_params_iter_next", iter, attribute, value, error);
            }
            return (int)mh$.invokeExact(iter, attribute, value, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_error_quark {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_error_quark"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GQuark g_uri_error_quark()
     * }
     */
    public static FunctionDescriptor g_uri_error_quark$descriptor() {
        return g_uri_error_quark.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GQuark g_uri_error_quark()
     * }
     */
    public static MethodHandle g_uri_error_quark$handle() {
        return g_uri_error_quark.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GQuark g_uri_error_quark()
     * }
     */
    public static int g_uri_error_quark() {
        var mh$ = g_uri_error_quark.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_error_quark");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_URI_ERROR_FAILED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_ERROR_FAILED = 0
     * }
     */
    public static int G_URI_ERROR_FAILED() {
        return G_URI_ERROR_FAILED;
    }
    private static final int G_URI_ERROR_BAD_SCHEME = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_ERROR_BAD_SCHEME = 1
     * }
     */
    public static int G_URI_ERROR_BAD_SCHEME() {
        return G_URI_ERROR_BAD_SCHEME;
    }
    private static final int G_URI_ERROR_BAD_USER = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_ERROR_BAD_USER = 2
     * }
     */
    public static int G_URI_ERROR_BAD_USER() {
        return G_URI_ERROR_BAD_USER;
    }
    private static final int G_URI_ERROR_BAD_PASSWORD = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_ERROR_BAD_PASSWORD = 3
     * }
     */
    public static int G_URI_ERROR_BAD_PASSWORD() {
        return G_URI_ERROR_BAD_PASSWORD;
    }
    private static final int G_URI_ERROR_BAD_AUTH_PARAMS = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_ERROR_BAD_AUTH_PARAMS = 4
     * }
     */
    public static int G_URI_ERROR_BAD_AUTH_PARAMS() {
        return G_URI_ERROR_BAD_AUTH_PARAMS;
    }
    private static final int G_URI_ERROR_BAD_HOST = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_ERROR_BAD_HOST = 5
     * }
     */
    public static int G_URI_ERROR_BAD_HOST() {
        return G_URI_ERROR_BAD_HOST;
    }
    private static final int G_URI_ERROR_BAD_PORT = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_ERROR_BAD_PORT = 6
     * }
     */
    public static int G_URI_ERROR_BAD_PORT() {
        return G_URI_ERROR_BAD_PORT;
    }
    private static final int G_URI_ERROR_BAD_PATH = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_ERROR_BAD_PATH = 7
     * }
     */
    public static int G_URI_ERROR_BAD_PATH() {
        return G_URI_ERROR_BAD_PATH;
    }
    private static final int G_URI_ERROR_BAD_QUERY = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_ERROR_BAD_QUERY = 8
     * }
     */
    public static int G_URI_ERROR_BAD_QUERY() {
        return G_URI_ERROR_BAD_QUERY;
    }
    private static final int G_URI_ERROR_BAD_FRAGMENT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_URI_ERROR_BAD_FRAGMENT = 9
     * }
     */
    public static int G_URI_ERROR_BAD_FRAGMENT() {
        return G_URI_ERROR_BAD_FRAGMENT;
    }

    private static class g_uri_unescape_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_unescape_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_uri_unescape_string(const char *escaped_string, const char *illegal_characters)
     * }
     */
    public static FunctionDescriptor g_uri_unescape_string$descriptor() {
        return g_uri_unescape_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_uri_unescape_string(const char *escaped_string, const char *illegal_characters)
     * }
     */
    public static MethodHandle g_uri_unescape_string$handle() {
        return g_uri_unescape_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_uri_unescape_string(const char *escaped_string, const char *illegal_characters)
     * }
     */
    public static MemorySegment g_uri_unescape_string(MemorySegment escaped_string, MemorySegment illegal_characters) {
        var mh$ = g_uri_unescape_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_unescape_string", escaped_string, illegal_characters);
            }
            return (MemorySegment)mh$.invokeExact(escaped_string, illegal_characters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_unescape_segment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_unescape_segment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_uri_unescape_segment(const char *escaped_string, const char *escaped_string_end, const char *illegal_characters)
     * }
     */
    public static FunctionDescriptor g_uri_unescape_segment$descriptor() {
        return g_uri_unescape_segment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_uri_unescape_segment(const char *escaped_string, const char *escaped_string_end, const char *illegal_characters)
     * }
     */
    public static MethodHandle g_uri_unescape_segment$handle() {
        return g_uri_unescape_segment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_uri_unescape_segment(const char *escaped_string, const char *escaped_string_end, const char *illegal_characters)
     * }
     */
    public static MemorySegment g_uri_unescape_segment(MemorySegment escaped_string, MemorySegment escaped_string_end, MemorySegment illegal_characters) {
        var mh$ = g_uri_unescape_segment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_unescape_segment", escaped_string, escaped_string_end, illegal_characters);
            }
            return (MemorySegment)mh$.invokeExact(escaped_string, escaped_string_end, illegal_characters);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_parse_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_parse_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_uri_parse_scheme(const char *uri)
     * }
     */
    public static FunctionDescriptor g_uri_parse_scheme$descriptor() {
        return g_uri_parse_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_uri_parse_scheme(const char *uri)
     * }
     */
    public static MethodHandle g_uri_parse_scheme$handle() {
        return g_uri_parse_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_uri_parse_scheme(const char *uri)
     * }
     */
    public static MemorySegment g_uri_parse_scheme(MemorySegment uri) {
        var mh$ = g_uri_parse_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_parse_scheme", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_peek_scheme {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_peek_scheme"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *g_uri_peek_scheme(const char *uri)
     * }
     */
    public static FunctionDescriptor g_uri_peek_scheme$descriptor() {
        return g_uri_peek_scheme.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *g_uri_peek_scheme(const char *uri)
     * }
     */
    public static MethodHandle g_uri_peek_scheme$handle() {
        return g_uri_peek_scheme.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *g_uri_peek_scheme(const char *uri)
     * }
     */
    public static MemorySegment g_uri_peek_scheme(MemorySegment uri) {
        var mh$ = g_uri_peek_scheme.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_peek_scheme", uri);
            }
            return (MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_escape_string {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_escape_string"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_uri_escape_string(const char *unescaped, const char *reserved_chars_allowed, gboolean allow_utf8)
     * }
     */
    public static FunctionDescriptor g_uri_escape_string$descriptor() {
        return g_uri_escape_string.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_uri_escape_string(const char *unescaped, const char *reserved_chars_allowed, gboolean allow_utf8)
     * }
     */
    public static MethodHandle g_uri_escape_string$handle() {
        return g_uri_escape_string.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_uri_escape_string(const char *unescaped, const char *reserved_chars_allowed, gboolean allow_utf8)
     * }
     */
    public static MemorySegment g_uri_escape_string(MemorySegment unescaped, MemorySegment reserved_chars_allowed, int allow_utf8) {
        var mh$ = g_uri_escape_string.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_escape_string", unescaped, reserved_chars_allowed, allow_utf8);
            }
            return (MemorySegment)mh$.invokeExact(unescaped, reserved_chars_allowed, allow_utf8);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_unescape_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_unescape_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GBytes *g_uri_unescape_bytes(const char *escaped_string, gssize length, const char *illegal_characters, GError **error)
     * }
     */
    public static FunctionDescriptor g_uri_unescape_bytes$descriptor() {
        return g_uri_unescape_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GBytes *g_uri_unescape_bytes(const char *escaped_string, gssize length, const char *illegal_characters, GError **error)
     * }
     */
    public static MethodHandle g_uri_unescape_bytes$handle() {
        return g_uri_unescape_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GBytes *g_uri_unescape_bytes(const char *escaped_string, gssize length, const char *illegal_characters, GError **error)
     * }
     */
    public static MemorySegment g_uri_unescape_bytes(MemorySegment escaped_string, long length, MemorySegment illegal_characters, MemorySegment error) {
        var mh$ = g_uri_unescape_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_unescape_bytes", escaped_string, length, illegal_characters, error);
            }
            return (MemorySegment)mh$.invokeExact(escaped_string, length, illegal_characters, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uri_escape_bytes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uri_escape_bytes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern char *g_uri_escape_bytes(const guint8 *unescaped, gsize length, const char *reserved_chars_allowed)
     * }
     */
    public static FunctionDescriptor g_uri_escape_bytes$descriptor() {
        return g_uri_escape_bytes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern char *g_uri_escape_bytes(const guint8 *unescaped, gsize length, const char *reserved_chars_allowed)
     * }
     */
    public static MethodHandle g_uri_escape_bytes$handle() {
        return g_uri_escape_bytes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern char *g_uri_escape_bytes(const guint8 *unescaped, gsize length, const char *reserved_chars_allowed)
     * }
     */
    public static MemorySegment g_uri_escape_bytes(MemorySegment unescaped, long length, MemorySegment reserved_chars_allowed) {
        var mh$ = g_uri_escape_bytes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uri_escape_bytes", unescaped, length, reserved_chars_allowed);
            }
            return (MemorySegment)mh$.invokeExact(unescaped, length, reserved_chars_allowed);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uuid_string_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uuid_string_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean g_uuid_string_is_valid(const gchar *str)
     * }
     */
    public static FunctionDescriptor g_uuid_string_is_valid$descriptor() {
        return g_uuid_string_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean g_uuid_string_is_valid(const gchar *str)
     * }
     */
    public static MethodHandle g_uuid_string_is_valid$handle() {
        return g_uuid_string_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean g_uuid_string_is_valid(const gchar *str)
     * }
     */
    public static int g_uuid_string_is_valid(MemorySegment str) {
        var mh$ = g_uuid_string_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uuid_string_is_valid", str);
            }
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_uuid_string_random {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_uuid_string_random"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *g_uuid_string_random()
     * }
     */
    public static FunctionDescriptor g_uuid_string_random$descriptor() {
        return g_uuid_string_random.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *g_uuid_string_random()
     * }
     */
    public static MethodHandle g_uuid_string_random$handle() {
        return g_uuid_string_random.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *g_uuid_string_random()
     * }
     */
    public static MemorySegment g_uuid_string_random() {
        var mh$ = g_uuid_string_random.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_uuid_string_random");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class glib_major_version$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("glib_major_version").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const guint glib_major_version
     * }
     */
    public static OfInt glib_major_version$layout() {
        return glib_major_version$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const guint glib_major_version
     * }
     */
    public static MemorySegment glib_major_version$segment() {
        return glib_major_version$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const guint glib_major_version
     * }
     */
    public static int glib_major_version() {
        return glib_major_version$constants.SEGMENT.get(glib_major_version$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const guint glib_major_version
     * }
     */
    public static void glib_major_version(int varValue) {
        glib_major_version$constants.SEGMENT.set(glib_major_version$constants.LAYOUT, 0L, varValue);
    }

    private static class glib_minor_version$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("glib_minor_version").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const guint glib_minor_version
     * }
     */
    public static OfInt glib_minor_version$layout() {
        return glib_minor_version$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const guint glib_minor_version
     * }
     */
    public static MemorySegment glib_minor_version$segment() {
        return glib_minor_version$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const guint glib_minor_version
     * }
     */
    public static int glib_minor_version() {
        return glib_minor_version$constants.SEGMENT.get(glib_minor_version$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const guint glib_minor_version
     * }
     */
    public static void glib_minor_version(int varValue) {
        glib_minor_version$constants.SEGMENT.set(glib_minor_version$constants.LAYOUT, 0L, varValue);
    }

    private static class glib_micro_version$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("glib_micro_version").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const guint glib_micro_version
     * }
     */
    public static OfInt glib_micro_version$layout() {
        return glib_micro_version$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const guint glib_micro_version
     * }
     */
    public static MemorySegment glib_micro_version$segment() {
        return glib_micro_version$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const guint glib_micro_version
     * }
     */
    public static int glib_micro_version() {
        return glib_micro_version$constants.SEGMENT.get(glib_micro_version$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const guint glib_micro_version
     * }
     */
    public static void glib_micro_version(int varValue) {
        glib_micro_version$constants.SEGMENT.set(glib_micro_version$constants.LAYOUT, 0L, varValue);
    }

    private static class glib_interface_age$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("glib_interface_age").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const guint glib_interface_age
     * }
     */
    public static OfInt glib_interface_age$layout() {
        return glib_interface_age$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const guint glib_interface_age
     * }
     */
    public static MemorySegment glib_interface_age$segment() {
        return glib_interface_age$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const guint glib_interface_age
     * }
     */
    public static int glib_interface_age() {
        return glib_interface_age$constants.SEGMENT.get(glib_interface_age$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const guint glib_interface_age
     * }
     */
    public static void glib_interface_age(int varValue) {
        glib_interface_age$constants.SEGMENT.set(glib_interface_age$constants.LAYOUT, 0L, varValue);
    }

    private static class glib_binary_age$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("glib_binary_age").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern const guint glib_binary_age
     * }
     */
    public static OfInt glib_binary_age$layout() {
        return glib_binary_age$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern const guint glib_binary_age
     * }
     */
    public static MemorySegment glib_binary_age$segment() {
        return glib_binary_age$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern const guint glib_binary_age
     * }
     */
    public static int glib_binary_age() {
        return glib_binary_age$constants.SEGMENT.get(glib_binary_age$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern const guint glib_binary_age
     * }
     */
    public static void glib_binary_age(int varValue) {
        glib_binary_age$constants.SEGMENT.set(glib_binary_age$constants.LAYOUT, 0L, varValue);
    }

    private static class glib_check_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("glib_check_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *glib_check_version(guint required_major, guint required_minor, guint required_micro)
     * }
     */
    public static FunctionDescriptor glib_check_version$descriptor() {
        return glib_check_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *glib_check_version(guint required_major, guint required_minor, guint required_micro)
     * }
     */
    public static MethodHandle glib_check_version$handle() {
        return glib_check_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *glib_check_version(guint required_major, guint required_minor, guint required_micro)
     * }
     */
    public static MemorySegment glib_check_version(int required_major, int required_minor, int required_micro) {
        var mh$ = glib_check_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("glib_check_version", required_major, required_minor, required_micro);
            }
            return (MemorySegment)mh$.invokeExact(required_major, required_minor, required_micro);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_chunk_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_chunk_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMemChunk *g_mem_chunk_new(const gchar *name, gint atom_size, gsize area_size, gint type)
     * }
     */
    public static FunctionDescriptor g_mem_chunk_new$descriptor() {
        return g_mem_chunk_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMemChunk *g_mem_chunk_new(const gchar *name, gint atom_size, gsize area_size, gint type)
     * }
     */
    public static MethodHandle g_mem_chunk_new$handle() {
        return g_mem_chunk_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMemChunk *g_mem_chunk_new(const gchar *name, gint atom_size, gsize area_size, gint type)
     * }
     */
    public static MemorySegment g_mem_chunk_new(MemorySegment name, int atom_size, long area_size, int type) {
        var mh$ = g_mem_chunk_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_chunk_new", name, atom_size, area_size, type);
            }
            return (MemorySegment)mh$.invokeExact(name, atom_size, area_size, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_chunk_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_chunk_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_destroy(GMemChunk *mem_chunk)
     * }
     */
    public static FunctionDescriptor g_mem_chunk_destroy$descriptor() {
        return g_mem_chunk_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_destroy(GMemChunk *mem_chunk)
     * }
     */
    public static MethodHandle g_mem_chunk_destroy$handle() {
        return g_mem_chunk_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mem_chunk_destroy(GMemChunk *mem_chunk)
     * }
     */
    public static void g_mem_chunk_destroy(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_chunk_destroy", mem_chunk);
            }
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_chunk_alloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_chunk_alloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_mem_chunk_alloc(GMemChunk *mem_chunk)
     * }
     */
    public static FunctionDescriptor g_mem_chunk_alloc$descriptor() {
        return g_mem_chunk_alloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_mem_chunk_alloc(GMemChunk *mem_chunk)
     * }
     */
    public static MethodHandle g_mem_chunk_alloc$handle() {
        return g_mem_chunk_alloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_mem_chunk_alloc(GMemChunk *mem_chunk)
     * }
     */
    public static MemorySegment g_mem_chunk_alloc(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_alloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_chunk_alloc", mem_chunk);
            }
            return (MemorySegment)mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_chunk_alloc0 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_chunk_alloc0"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_mem_chunk_alloc0(GMemChunk *mem_chunk)
     * }
     */
    public static FunctionDescriptor g_mem_chunk_alloc0$descriptor() {
        return g_mem_chunk_alloc0.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_mem_chunk_alloc0(GMemChunk *mem_chunk)
     * }
     */
    public static MethodHandle g_mem_chunk_alloc0$handle() {
        return g_mem_chunk_alloc0.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_mem_chunk_alloc0(GMemChunk *mem_chunk)
     * }
     */
    public static MemorySegment g_mem_chunk_alloc0(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_alloc0.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_chunk_alloc0", mem_chunk);
            }
            return (MemorySegment)mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_chunk_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_chunk_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_free(GMemChunk *mem_chunk, gpointer mem)
     * }
     */
    public static FunctionDescriptor g_mem_chunk_free$descriptor() {
        return g_mem_chunk_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_free(GMemChunk *mem_chunk, gpointer mem)
     * }
     */
    public static MethodHandle g_mem_chunk_free$handle() {
        return g_mem_chunk_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mem_chunk_free(GMemChunk *mem_chunk, gpointer mem)
     * }
     */
    public static void g_mem_chunk_free(MemorySegment mem_chunk, MemorySegment mem) {
        var mh$ = g_mem_chunk_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_chunk_free", mem_chunk, mem);
            }
            mh$.invokeExact(mem_chunk, mem);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_chunk_clean {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_chunk_clean"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_clean(GMemChunk *mem_chunk)
     * }
     */
    public static FunctionDescriptor g_mem_chunk_clean$descriptor() {
        return g_mem_chunk_clean.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_clean(GMemChunk *mem_chunk)
     * }
     */
    public static MethodHandle g_mem_chunk_clean$handle() {
        return g_mem_chunk_clean.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mem_chunk_clean(GMemChunk *mem_chunk)
     * }
     */
    public static void g_mem_chunk_clean(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_clean.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_chunk_clean", mem_chunk);
            }
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_chunk_reset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_chunk_reset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_reset(GMemChunk *mem_chunk)
     * }
     */
    public static FunctionDescriptor g_mem_chunk_reset$descriptor() {
        return g_mem_chunk_reset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_reset(GMemChunk *mem_chunk)
     * }
     */
    public static MethodHandle g_mem_chunk_reset$handle() {
        return g_mem_chunk_reset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mem_chunk_reset(GMemChunk *mem_chunk)
     * }
     */
    public static void g_mem_chunk_reset(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_reset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_chunk_reset", mem_chunk);
            }
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_chunk_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_chunk_print"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_print(GMemChunk *mem_chunk)
     * }
     */
    public static FunctionDescriptor g_mem_chunk_print$descriptor() {
        return g_mem_chunk_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_print(GMemChunk *mem_chunk)
     * }
     */
    public static MethodHandle g_mem_chunk_print$handle() {
        return g_mem_chunk_print.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mem_chunk_print(GMemChunk *mem_chunk)
     * }
     */
    public static void g_mem_chunk_print(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_chunk_print", mem_chunk);
            }
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_mem_chunk_info {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_mem_chunk_info"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_info()
     * }
     */
    public static FunctionDescriptor g_mem_chunk_info$descriptor() {
        return g_mem_chunk_info.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_mem_chunk_info()
     * }
     */
    public static MethodHandle g_mem_chunk_info$handle() {
        return g_mem_chunk_info.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_mem_chunk_info()
     * }
     */
    public static void g_mem_chunk_info() {
        var mh$ = g_mem_chunk_info.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_mem_chunk_info");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_blow_chunks {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_blow_chunks"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_blow_chunks()
     * }
     */
    public static FunctionDescriptor g_blow_chunks$descriptor() {
        return g_blow_chunks.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_blow_chunks()
     * }
     */
    public static MethodHandle g_blow_chunks$handle() {
        return g_blow_chunks.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_blow_chunks()
     * }
     */
    public static void g_blow_chunks() {
        var mh$ = g_blow_chunks.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_blow_chunks");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_allocator_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_allocator_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GAllocator *g_allocator_new(const gchar *name, guint n_preallocs)
     * }
     */
    public static FunctionDescriptor g_allocator_new$descriptor() {
        return g_allocator_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GAllocator *g_allocator_new(const gchar *name, guint n_preallocs)
     * }
     */
    public static MethodHandle g_allocator_new$handle() {
        return g_allocator_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GAllocator *g_allocator_new(const gchar *name, guint n_preallocs)
     * }
     */
    public static MemorySegment g_allocator_new(MemorySegment name, int n_preallocs) {
        var mh$ = g_allocator_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_allocator_new", name, n_preallocs);
            }
            return (MemorySegment)mh$.invokeExact(name, n_preallocs);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_allocator_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_allocator_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_allocator_free(GAllocator *allocator)
     * }
     */
    public static FunctionDescriptor g_allocator_free$descriptor() {
        return g_allocator_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_allocator_free(GAllocator *allocator)
     * }
     */
    public static MethodHandle g_allocator_free$handle() {
        return g_allocator_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_allocator_free(GAllocator *allocator)
     * }
     */
    public static void g_allocator_free(MemorySegment allocator) {
        var mh$ = g_allocator_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_allocator_free", allocator);
            }
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_push_allocator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_push_allocator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_push_allocator(GAllocator *allocator)
     * }
     */
    public static FunctionDescriptor g_list_push_allocator$descriptor() {
        return g_list_push_allocator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_push_allocator(GAllocator *allocator)
     * }
     */
    public static MethodHandle g_list_push_allocator$handle() {
        return g_list_push_allocator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_push_allocator(GAllocator *allocator)
     * }
     */
    public static void g_list_push_allocator(MemorySegment allocator) {
        var mh$ = g_list_push_allocator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_push_allocator", allocator);
            }
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_list_pop_allocator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_list_pop_allocator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_list_pop_allocator()
     * }
     */
    public static FunctionDescriptor g_list_pop_allocator$descriptor() {
        return g_list_pop_allocator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_list_pop_allocator()
     * }
     */
    public static MethodHandle g_list_pop_allocator$handle() {
        return g_list_pop_allocator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_list_pop_allocator()
     * }
     */
    public static void g_list_pop_allocator() {
        var mh$ = g_list_pop_allocator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_list_pop_allocator");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_push_allocator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_push_allocator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_slist_push_allocator(GAllocator *allocator)
     * }
     */
    public static FunctionDescriptor g_slist_push_allocator$descriptor() {
        return g_slist_push_allocator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_slist_push_allocator(GAllocator *allocator)
     * }
     */
    public static MethodHandle g_slist_push_allocator$handle() {
        return g_slist_push_allocator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_slist_push_allocator(GAllocator *allocator)
     * }
     */
    public static void g_slist_push_allocator(MemorySegment allocator) {
        var mh$ = g_slist_push_allocator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_push_allocator", allocator);
            }
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_slist_pop_allocator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_slist_pop_allocator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_slist_pop_allocator()
     * }
     */
    public static FunctionDescriptor g_slist_pop_allocator$descriptor() {
        return g_slist_pop_allocator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_slist_pop_allocator()
     * }
     */
    public static MethodHandle g_slist_pop_allocator$handle() {
        return g_slist_pop_allocator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_slist_pop_allocator()
     * }
     */
    public static void g_slist_pop_allocator() {
        var mh$ = g_slist_pop_allocator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_slist_pop_allocator");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_push_allocator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_push_allocator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_node_push_allocator(GAllocator *allocator)
     * }
     */
    public static FunctionDescriptor g_node_push_allocator$descriptor() {
        return g_node_push_allocator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_node_push_allocator(GAllocator *allocator)
     * }
     */
    public static MethodHandle g_node_push_allocator$handle() {
        return g_node_push_allocator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_node_push_allocator(GAllocator *allocator)
     * }
     */
    public static void g_node_push_allocator(MemorySegment allocator) {
        var mh$ = g_node_push_allocator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_push_allocator", allocator);
            }
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_node_pop_allocator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_node_pop_allocator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_node_pop_allocator()
     * }
     */
    public static FunctionDescriptor g_node_pop_allocator$descriptor() {
        return g_node_pop_allocator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_node_pop_allocator()
     * }
     */
    public static MethodHandle g_node_pop_allocator$handle() {
        return g_node_pop_allocator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_node_pop_allocator()
     * }
     */
    public static void g_node_pop_allocator() {
        var mh$ = g_node_pop_allocator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_node_pop_allocator");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cache_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cache_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCache *g_cache_new(GCacheNewFunc value_new_func, GCacheDestroyFunc value_destroy_func, GCacheDupFunc key_dup_func, GCacheDestroyFunc key_destroy_func, GHashFunc hash_key_func, GHashFunc hash_value_func, GEqualFunc key_equal_func)
     * }
     */
    public static FunctionDescriptor g_cache_new$descriptor() {
        return g_cache_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCache *g_cache_new(GCacheNewFunc value_new_func, GCacheDestroyFunc value_destroy_func, GCacheDupFunc key_dup_func, GCacheDestroyFunc key_destroy_func, GHashFunc hash_key_func, GHashFunc hash_value_func, GEqualFunc key_equal_func)
     * }
     */
    public static MethodHandle g_cache_new$handle() {
        return g_cache_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCache *g_cache_new(GCacheNewFunc value_new_func, GCacheDestroyFunc value_destroy_func, GCacheDupFunc key_dup_func, GCacheDestroyFunc key_destroy_func, GHashFunc hash_key_func, GHashFunc hash_value_func, GEqualFunc key_equal_func)
     * }
     */
    public static MemorySegment g_cache_new(MemorySegment value_new_func, MemorySegment value_destroy_func, MemorySegment key_dup_func, MemorySegment key_destroy_func, MemorySegment hash_key_func, MemorySegment hash_value_func, MemorySegment key_equal_func) {
        var mh$ = g_cache_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cache_new", value_new_func, value_destroy_func, key_dup_func, key_destroy_func, hash_key_func, hash_value_func, key_equal_func);
            }
            return (MemorySegment)mh$.invokeExact(value_new_func, value_destroy_func, key_dup_func, key_destroy_func, hash_key_func, hash_value_func, key_equal_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cache_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cache_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cache_destroy(GCache *cache)
     * }
     */
    public static FunctionDescriptor g_cache_destroy$descriptor() {
        return g_cache_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cache_destroy(GCache *cache)
     * }
     */
    public static MethodHandle g_cache_destroy$handle() {
        return g_cache_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cache_destroy(GCache *cache)
     * }
     */
    public static void g_cache_destroy(MemorySegment cache) {
        var mh$ = g_cache_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cache_destroy", cache);
            }
            mh$.invokeExact(cache);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cache_insert {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cache_insert"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_cache_insert(GCache *cache, gpointer key)
     * }
     */
    public static FunctionDescriptor g_cache_insert$descriptor() {
        return g_cache_insert.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_cache_insert(GCache *cache, gpointer key)
     * }
     */
    public static MethodHandle g_cache_insert$handle() {
        return g_cache_insert.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_cache_insert(GCache *cache, gpointer key)
     * }
     */
    public static MemorySegment g_cache_insert(MemorySegment cache, MemorySegment key) {
        var mh$ = g_cache_insert.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cache_insert", cache, key);
            }
            return (MemorySegment)mh$.invokeExact(cache, key);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cache_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cache_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cache_remove(GCache *cache, gconstpointer value)
     * }
     */
    public static FunctionDescriptor g_cache_remove$descriptor() {
        return g_cache_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cache_remove(GCache *cache, gconstpointer value)
     * }
     */
    public static MethodHandle g_cache_remove$handle() {
        return g_cache_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cache_remove(GCache *cache, gconstpointer value)
     * }
     */
    public static void g_cache_remove(MemorySegment cache, MemorySegment value) {
        var mh$ = g_cache_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cache_remove", cache, value);
            }
            mh$.invokeExact(cache, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cache_key_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cache_key_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cache_key_foreach(GCache *cache, GHFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_cache_key_foreach$descriptor() {
        return g_cache_key_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cache_key_foreach(GCache *cache, GHFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_cache_key_foreach$handle() {
        return g_cache_key_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cache_key_foreach(GCache *cache, GHFunc func, gpointer user_data)
     * }
     */
    public static void g_cache_key_foreach(MemorySegment cache, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_cache_key_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cache_key_foreach", cache, func, user_data);
            }
            mh$.invokeExact(cache, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_cache_value_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_cache_value_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_cache_value_foreach(GCache *cache, GHFunc func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_cache_value_foreach$descriptor() {
        return g_cache_value_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_cache_value_foreach(GCache *cache, GHFunc func, gpointer user_data)
     * }
     */
    public static MethodHandle g_cache_value_foreach$handle() {
        return g_cache_value_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_cache_value_foreach(GCache *cache, GHFunc func, gpointer user_data)
     * }
     */
    public static void g_cache_value_foreach(MemorySegment cache, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_cache_value_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_cache_value_foreach", cache, func, user_data);
            }
            mh$.invokeExact(cache, func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_completion_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_completion_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GCompletion *g_completion_new(GCompletionFunc func)
     * }
     */
    public static FunctionDescriptor g_completion_new$descriptor() {
        return g_completion_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GCompletion *g_completion_new(GCompletionFunc func)
     * }
     */
    public static MethodHandle g_completion_new$handle() {
        return g_completion_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GCompletion *g_completion_new(GCompletionFunc func)
     * }
     */
    public static MemorySegment g_completion_new(MemorySegment func) {
        var mh$ = g_completion_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_completion_new", func);
            }
            return (MemorySegment)mh$.invokeExact(func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_completion_add_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_completion_add_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_completion_add_items(GCompletion *cmp, GList *items)
     * }
     */
    public static FunctionDescriptor g_completion_add_items$descriptor() {
        return g_completion_add_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_completion_add_items(GCompletion *cmp, GList *items)
     * }
     */
    public static MethodHandle g_completion_add_items$handle() {
        return g_completion_add_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_completion_add_items(GCompletion *cmp, GList *items)
     * }
     */
    public static void g_completion_add_items(MemorySegment cmp, MemorySegment items) {
        var mh$ = g_completion_add_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_completion_add_items", cmp, items);
            }
            mh$.invokeExact(cmp, items);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_completion_remove_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_completion_remove_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_completion_remove_items(GCompletion *cmp, GList *items)
     * }
     */
    public static FunctionDescriptor g_completion_remove_items$descriptor() {
        return g_completion_remove_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_completion_remove_items(GCompletion *cmp, GList *items)
     * }
     */
    public static MethodHandle g_completion_remove_items$handle() {
        return g_completion_remove_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_completion_remove_items(GCompletion *cmp, GList *items)
     * }
     */
    public static void g_completion_remove_items(MemorySegment cmp, MemorySegment items) {
        var mh$ = g_completion_remove_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_completion_remove_items", cmp, items);
            }
            mh$.invokeExact(cmp, items);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_completion_clear_items {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_completion_clear_items"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_completion_clear_items(GCompletion *cmp)
     * }
     */
    public static FunctionDescriptor g_completion_clear_items$descriptor() {
        return g_completion_clear_items.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_completion_clear_items(GCompletion *cmp)
     * }
     */
    public static MethodHandle g_completion_clear_items$handle() {
        return g_completion_clear_items.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_completion_clear_items(GCompletion *cmp)
     * }
     */
    public static void g_completion_clear_items(MemorySegment cmp) {
        var mh$ = g_completion_clear_items.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_completion_clear_items", cmp);
            }
            mh$.invokeExact(cmp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_completion_complete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_completion_complete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_completion_complete(GCompletion *cmp, const gchar *prefix, gchar **new_prefix)
     * }
     */
    public static FunctionDescriptor g_completion_complete$descriptor() {
        return g_completion_complete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_completion_complete(GCompletion *cmp, const gchar *prefix, gchar **new_prefix)
     * }
     */
    public static MethodHandle g_completion_complete$handle() {
        return g_completion_complete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_completion_complete(GCompletion *cmp, const gchar *prefix, gchar **new_prefix)
     * }
     */
    public static MemorySegment g_completion_complete(MemorySegment cmp, MemorySegment prefix, MemorySegment new_prefix) {
        var mh$ = g_completion_complete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_completion_complete", cmp, prefix, new_prefix);
            }
            return (MemorySegment)mh$.invokeExact(cmp, prefix, new_prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_completion_complete_utf8 {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_completion_complete_utf8"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *g_completion_complete_utf8(GCompletion *cmp, const gchar *prefix, gchar **new_prefix)
     * }
     */
    public static FunctionDescriptor g_completion_complete_utf8$descriptor() {
        return g_completion_complete_utf8.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *g_completion_complete_utf8(GCompletion *cmp, const gchar *prefix, gchar **new_prefix)
     * }
     */
    public static MethodHandle g_completion_complete_utf8$handle() {
        return g_completion_complete_utf8.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *g_completion_complete_utf8(GCompletion *cmp, const gchar *prefix, gchar **new_prefix)
     * }
     */
    public static MemorySegment g_completion_complete_utf8(MemorySegment cmp, MemorySegment prefix, MemorySegment new_prefix) {
        var mh$ = g_completion_complete_utf8.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_completion_complete_utf8", cmp, prefix, new_prefix);
            }
            return (MemorySegment)mh$.invokeExact(cmp, prefix, new_prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_completion_set_compare {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_completion_set_compare"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_completion_set_compare(GCompletion *cmp, GCompletionStrncmpFunc strncmp_func)
     * }
     */
    public static FunctionDescriptor g_completion_set_compare$descriptor() {
        return g_completion_set_compare.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_completion_set_compare(GCompletion *cmp, GCompletionStrncmpFunc strncmp_func)
     * }
     */
    public static MethodHandle g_completion_set_compare$handle() {
        return g_completion_set_compare.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_completion_set_compare(GCompletion *cmp, GCompletionStrncmpFunc strncmp_func)
     * }
     */
    public static void g_completion_set_compare(MemorySegment cmp, MemorySegment strncmp_func) {
        var mh$ = g_completion_set_compare.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_completion_set_compare", cmp, strncmp_func);
            }
            mh$.invokeExact(cmp, strncmp_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_completion_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_completion_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_completion_free(GCompletion *cmp)
     * }
     */
    public static FunctionDescriptor g_completion_free$descriptor() {
        return g_completion_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_completion_free(GCompletion *cmp)
     * }
     */
    public static MethodHandle g_completion_free$handle() {
        return g_completion_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_completion_free(GCompletion *cmp)
     * }
     */
    public static void g_completion_free(MemorySegment cmp) {
        var mh$ = g_completion_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_completion_free", cmp);
            }
            mh$.invokeExact(cmp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_relation_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_relation_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GRelation *g_relation_new(gint fields)
     * }
     */
    public static FunctionDescriptor g_relation_new$descriptor() {
        return g_relation_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GRelation *g_relation_new(gint fields)
     * }
     */
    public static MethodHandle g_relation_new$handle() {
        return g_relation_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GRelation *g_relation_new(gint fields)
     * }
     */
    public static MemorySegment g_relation_new(int fields) {
        var mh$ = g_relation_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_relation_new", fields);
            }
            return (MemorySegment)mh$.invokeExact(fields);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_relation_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_relation_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_relation_destroy(GRelation *relation)
     * }
     */
    public static FunctionDescriptor g_relation_destroy$descriptor() {
        return g_relation_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_relation_destroy(GRelation *relation)
     * }
     */
    public static MethodHandle g_relation_destroy$handle() {
        return g_relation_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_relation_destroy(GRelation *relation)
     * }
     */
    public static void g_relation_destroy(MemorySegment relation) {
        var mh$ = g_relation_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_relation_destroy", relation);
            }
            mh$.invokeExact(relation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_relation_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_relation_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_relation_index(GRelation *relation, gint field, GHashFunc hash_func, GEqualFunc key_equal_func)
     * }
     */
    public static FunctionDescriptor g_relation_index$descriptor() {
        return g_relation_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_relation_index(GRelation *relation, gint field, GHashFunc hash_func, GEqualFunc key_equal_func)
     * }
     */
    public static MethodHandle g_relation_index$handle() {
        return g_relation_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_relation_index(GRelation *relation, gint field, GHashFunc hash_func, GEqualFunc key_equal_func)
     * }
     */
    public static void g_relation_index(MemorySegment relation, int field, MemorySegment hash_func, MemorySegment key_equal_func) {
        var mh$ = g_relation_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_relation_index", relation, field, hash_func, key_equal_func);
            }
            mh$.invokeExact(relation, field, hash_func, key_equal_func);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void g_relation_insert(GRelation *relation, ...)
     * }
     */
    public static class g_relation_insert {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_relation_insert");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_relation_insert(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void g_relation_insert(GRelation *relation, ...)
         * }
         */
        public static g_relation_insert makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_relation_insert(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment relation, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_relation_insert", relation, x1);
                }
                spreader.invokeExact(relation, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_relation_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_relation_delete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_relation_delete(GRelation *relation, gconstpointer key, gint field)
     * }
     */
    public static FunctionDescriptor g_relation_delete$descriptor() {
        return g_relation_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_relation_delete(GRelation *relation, gconstpointer key, gint field)
     * }
     */
    public static MethodHandle g_relation_delete$handle() {
        return g_relation_delete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_relation_delete(GRelation *relation, gconstpointer key, gint field)
     * }
     */
    public static int g_relation_delete(MemorySegment relation, MemorySegment key, int field) {
        var mh$ = g_relation_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_relation_delete", relation, key, field);
            }
            return (int)mh$.invokeExact(relation, key, field);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_relation_select {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_relation_select"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GTuples *g_relation_select(GRelation *relation, gconstpointer key, gint field)
     * }
     */
    public static FunctionDescriptor g_relation_select$descriptor() {
        return g_relation_select.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GTuples *g_relation_select(GRelation *relation, gconstpointer key, gint field)
     * }
     */
    public static MethodHandle g_relation_select$handle() {
        return g_relation_select.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GTuples *g_relation_select(GRelation *relation, gconstpointer key, gint field)
     * }
     */
    public static MemorySegment g_relation_select(MemorySegment relation, MemorySegment key, int field) {
        var mh$ = g_relation_select.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_relation_select", relation, key, field);
            }
            return (MemorySegment)mh$.invokeExact(relation, key, field);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_relation_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_relation_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint g_relation_count(GRelation *relation, gconstpointer key, gint field)
     * }
     */
    public static FunctionDescriptor g_relation_count$descriptor() {
        return g_relation_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint g_relation_count(GRelation *relation, gconstpointer key, gint field)
     * }
     */
    public static MethodHandle g_relation_count$handle() {
        return g_relation_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint g_relation_count(GRelation *relation, gconstpointer key, gint field)
     * }
     */
    public static int g_relation_count(MemorySegment relation, MemorySegment key, int field) {
        var mh$ = g_relation_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_relation_count", relation, key, field);
            }
            return (int)mh$.invokeExact(relation, key, field);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern gboolean g_relation_exists(GRelation *relation, ...)
     * }
     */
    public static class g_relation_exists {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_INT,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("g_relation_exists");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private g_relation_exists(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern gboolean g_relation_exists(GRelation *relation, ...)
         * }
         */
        public static g_relation_exists makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new g_relation_exists(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public int apply(MemorySegment relation, Object... x1) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("g_relation_exists", relation, x1);
                }
                return (int)spreader.invokeExact(relation, x1);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class g_relation_print {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_relation_print"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_relation_print(GRelation *relation)
     * }
     */
    public static FunctionDescriptor g_relation_print$descriptor() {
        return g_relation_print.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_relation_print(GRelation *relation)
     * }
     */
    public static MethodHandle g_relation_print$handle() {
        return g_relation_print.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_relation_print(GRelation *relation)
     * }
     */
    public static void g_relation_print(MemorySegment relation) {
        var mh$ = g_relation_print.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_relation_print", relation);
            }
            mh$.invokeExact(relation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tuples_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tuples_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_tuples_destroy(GTuples *tuples)
     * }
     */
    public static FunctionDescriptor g_tuples_destroy$descriptor() {
        return g_tuples_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_tuples_destroy(GTuples *tuples)
     * }
     */
    public static MethodHandle g_tuples_destroy$handle() {
        return g_tuples_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_tuples_destroy(GTuples *tuples)
     * }
     */
    public static void g_tuples_destroy(MemorySegment tuples) {
        var mh$ = g_tuples_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tuples_destroy", tuples);
            }
            mh$.invokeExact(tuples);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_tuples_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_tuples_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer g_tuples_index(GTuples *tuples, gint index_, gint field)
     * }
     */
    public static FunctionDescriptor g_tuples_index$descriptor() {
        return g_tuples_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer g_tuples_index(GTuples *tuples, gint index_, gint field)
     * }
     */
    public static MethodHandle g_tuples_index$handle() {
        return g_tuples_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer g_tuples_index(GTuples *tuples, gint index_, gint field)
     * }
     */
    public static MemorySegment g_tuples_index(MemorySegment tuples, int index_, int field) {
        var mh$ = g_tuples_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_tuples_index", tuples, index_, field);
            }
            return (MemorySegment)mh$.invokeExact(tuples, index_, field);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int G_THREAD_PRIORITY_LOW = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_THREAD_PRIORITY_LOW = 0
     * }
     */
    public static int G_THREAD_PRIORITY_LOW() {
        return G_THREAD_PRIORITY_LOW;
    }
    private static final int G_THREAD_PRIORITY_NORMAL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_THREAD_PRIORITY_NORMAL = 1
     * }
     */
    public static int G_THREAD_PRIORITY_NORMAL() {
        return G_THREAD_PRIORITY_NORMAL;
    }
    private static final int G_THREAD_PRIORITY_HIGH = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_THREAD_PRIORITY_HIGH = 2
     * }
     */
    public static int G_THREAD_PRIORITY_HIGH() {
        return G_THREAD_PRIORITY_HIGH;
    }
    private static final int G_THREAD_PRIORITY_URGENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.G_THREAD_PRIORITY_URGENT = 3
     * }
     */
    public static int G_THREAD_PRIORITY_URGENT() {
        return G_THREAD_PRIORITY_URGENT;
    }

    private static class g_thread_functions_for_glib_use$constants {
        public static final GroupLayout LAYOUT = _GThreadFunctions.layout();
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_thread_functions_for_glib_use").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern GThreadFunctions g_thread_functions_for_glib_use
     * }
     */
    public static GroupLayout g_thread_functions_for_glib_use$layout() {
        return g_thread_functions_for_glib_use$constants.LAYOUT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern GThreadFunctions g_thread_functions_for_glib_use
     * }
     */
    public static MemorySegment g_thread_functions_for_glib_use() {
        return g_thread_functions_for_glib_use$constants.SEGMENT;
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern GThreadFunctions g_thread_functions_for_glib_use
     * }
     */
    public static void g_thread_functions_for_glib_use(MemorySegment varValue) {
        MemorySegment.copy(varValue, 0L, g_thread_functions_for_glib_use$constants.SEGMENT, 0L, g_thread_functions_for_glib_use$constants.LAYOUT.byteSize());
    }

    private static class g_thread_use_default_impl$constants {
        public static final OfInt LAYOUT = app_indicator_h.C_INT;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_thread_use_default_impl").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern gboolean g_thread_use_default_impl
     * }
     */
    public static OfInt g_thread_use_default_impl$layout() {
        return g_thread_use_default_impl$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern gboolean g_thread_use_default_impl
     * }
     */
    public static MemorySegment g_thread_use_default_impl$segment() {
        return g_thread_use_default_impl$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern gboolean g_thread_use_default_impl
     * }
     */
    public static int g_thread_use_default_impl() {
        return g_thread_use_default_impl$constants.SEGMENT.get(g_thread_use_default_impl$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern gboolean g_thread_use_default_impl
     * }
     */
    public static void g_thread_use_default_impl(int varValue) {
        g_thread_use_default_impl$constants.SEGMENT.set(g_thread_use_default_impl$constants.LAYOUT, 0L, varValue);
    }

    private static class g_thread_gettime$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("g_thread_gettime").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern guint64 (*g_thread_gettime)(void)
     * }
     */
    public static AddressLayout g_thread_gettime$layout() {
        return g_thread_gettime$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern guint64 (*g_thread_gettime)(void)
     * }
     */
    public static MemorySegment g_thread_gettime$segment() {
        return g_thread_gettime$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern guint64 (*g_thread_gettime)(void)
     * }
     */
    public static MemorySegment g_thread_gettime() {
        return g_thread_gettime$constants.SEGMENT.get(g_thread_gettime$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern guint64 (*g_thread_gettime)(void)
     * }
     */
    public static void g_thread_gettime(MemorySegment varValue) {
        g_thread_gettime$constants.SEGMENT.set(g_thread_gettime$constants.LAYOUT, 0L, varValue);
    }

    private static class g_thread_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GThread *g_thread_create(GThreadFunc func, gpointer data, gboolean joinable, GError **error)
     * }
     */
    public static FunctionDescriptor g_thread_create$descriptor() {
        return g_thread_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GThread *g_thread_create(GThreadFunc func, gpointer data, gboolean joinable, GError **error)
     * }
     */
    public static MethodHandle g_thread_create$handle() {
        return g_thread_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GThread *g_thread_create(GThreadFunc func, gpointer data, gboolean joinable, GError **error)
     * }
     */
    public static MemorySegment g_thread_create(MemorySegment func, MemorySegment data, int joinable, MemorySegment error) {
        var mh$ = g_thread_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_create", func, data, joinable, error);
            }
            return (MemorySegment)mh$.invokeExact(func, data, joinable, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_create_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_create_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GThread *g_thread_create_full(GThreadFunc func, gpointer data, gulong stack_size, gboolean joinable, gboolean bound, GThreadPriority priority, GError **error)
     * }
     */
    public static FunctionDescriptor g_thread_create_full$descriptor() {
        return g_thread_create_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GThread *g_thread_create_full(GThreadFunc func, gpointer data, gulong stack_size, gboolean joinable, gboolean bound, GThreadPriority priority, GError **error)
     * }
     */
    public static MethodHandle g_thread_create_full$handle() {
        return g_thread_create_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GThread *g_thread_create_full(GThreadFunc func, gpointer data, gulong stack_size, gboolean joinable, gboolean bound, GThreadPriority priority, GError **error)
     * }
     */
    public static MemorySegment g_thread_create_full(MemorySegment func, MemorySegment data, long stack_size, int joinable, int bound, int priority, MemorySegment error) {
        var mh$ = g_thread_create_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_create_full", func, data, stack_size, joinable, bound, priority, error);
            }
            return (MemorySegment)mh$.invokeExact(func, data, stack_size, joinable, bound, priority, error);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_set_priority {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_set_priority"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_set_priority(GThread *thread, GThreadPriority priority)
     * }
     */
    public static FunctionDescriptor g_thread_set_priority$descriptor() {
        return g_thread_set_priority.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_set_priority(GThread *thread, GThreadPriority priority)
     * }
     */
    public static MethodHandle g_thread_set_priority$handle() {
        return g_thread_set_priority.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_set_priority(GThread *thread, GThreadPriority priority)
     * }
     */
    public static void g_thread_set_priority(MemorySegment thread, int priority) {
        var mh$ = g_thread_set_priority.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_set_priority", thread, priority);
            }
            mh$.invokeExact(thread, priority);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class g_thread_foreach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("g_thread_foreach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void g_thread_foreach(GFunc thread_func, gpointer user_data)
     * }
     */
    public static FunctionDescriptor g_thread_foreach$descriptor() {
        return g_thread_foreach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void g_thread_foreach(GFunc thread_func, gpointer user_data)
     * }
     */
    public static MethodHandle g_thread_foreach$handle() {
        return g_thread_foreach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void g_thread_foreach(GFunc thread_func, gpointer user_data)
     * }
     */
    public static void g_thread_foreach(MemorySegment thread_func, MemorySegment user_data) {
        var mh$ = g_thread_foreach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("g_thread_foreach", thread_func, user_data);
            }
            mh$.invokeExact(thread_func, user_data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef unsigned long __cpu_mask
     * }
     */
    public static final OfLong __cpu_mask = app_indicator_h.C_LONG;

    private static class __sched_cpucount {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__sched_cpucount"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __sched_cpucount(size_t __setsize, const cpu_set_t *__setp)
     * }
     */
    public static FunctionDescriptor __sched_cpucount$descriptor() {
        return __sched_cpucount.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __sched_cpucount(size_t __setsize, const cpu_set_t *__setp)
     * }
     */
    public static MethodHandle __sched_cpucount$handle() {
        return __sched_cpucount.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int __sched_cpucount(size_t __setsize, const cpu_set_t *__setp)
     * }
     */
    public static int __sched_cpucount(long __setsize, MemorySegment __setp) {
        var mh$ = __sched_cpucount.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sched_cpucount", __setsize, __setp);
            }
            return (int)mh$.invokeExact(__setsize, __setp);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sched_cpualloc {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__sched_cpualloc"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cpu_set_t *__sched_cpualloc(size_t __count)
     * }
     */
    public static FunctionDescriptor __sched_cpualloc$descriptor() {
        return __sched_cpualloc.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cpu_set_t *__sched_cpualloc(size_t __count)
     * }
     */
    public static MethodHandle __sched_cpualloc$handle() {
        return __sched_cpualloc.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cpu_set_t *__sched_cpualloc(size_t __count)
     * }
     */
    public static MemorySegment __sched_cpualloc(long __count) {
        var mh$ = __sched_cpualloc.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sched_cpualloc", __count);
            }
            return (MemorySegment)mh$.invokeExact(__count);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sched_cpufree {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__sched_cpufree"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void __sched_cpufree(cpu_set_t *__set)
     * }
     */
    public static FunctionDescriptor __sched_cpufree$descriptor() {
        return __sched_cpufree.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void __sched_cpufree(cpu_set_t *__set)
     * }
     */
    public static MethodHandle __sched_cpufree$handle() {
        return __sched_cpufree.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void __sched_cpufree(cpu_set_t *__set)
     * }
     */
    public static void __sched_cpufree(MemorySegment __set) {
        var mh$ = __sched_cpufree.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sched_cpufree", __set);
            }
            mh$.invokeExact(__set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sched_setparam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sched_setparam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sched_setparam(__pid_t __pid, const struct sched_param *__param)
     * }
     */
    public static FunctionDescriptor sched_setparam$descriptor() {
        return sched_setparam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sched_setparam(__pid_t __pid, const struct sched_param *__param)
     * }
     */
    public static MethodHandle sched_setparam$handle() {
        return sched_setparam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sched_setparam(__pid_t __pid, const struct sched_param *__param)
     * }
     */
    public static int sched_setparam(int __pid, MemorySegment __param) {
        var mh$ = sched_setparam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sched_setparam", __pid, __param);
            }
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sched_getparam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sched_getparam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sched_getparam(__pid_t __pid, struct sched_param *__param)
     * }
     */
    public static FunctionDescriptor sched_getparam$descriptor() {
        return sched_getparam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sched_getparam(__pid_t __pid, struct sched_param *__param)
     * }
     */
    public static MethodHandle sched_getparam$handle() {
        return sched_getparam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sched_getparam(__pid_t __pid, struct sched_param *__param)
     * }
     */
    public static int sched_getparam(int __pid, MemorySegment __param) {
        var mh$ = sched_getparam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sched_getparam", __pid, __param);
            }
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sched_setscheduler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sched_setscheduler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sched_setscheduler(__pid_t __pid, int __policy, const struct sched_param *__param)
     * }
     */
    public static FunctionDescriptor sched_setscheduler$descriptor() {
        return sched_setscheduler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sched_setscheduler(__pid_t __pid, int __policy, const struct sched_param *__param)
     * }
     */
    public static MethodHandle sched_setscheduler$handle() {
        return sched_setscheduler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sched_setscheduler(__pid_t __pid, int __policy, const struct sched_param *__param)
     * }
     */
    public static int sched_setscheduler(int __pid, int __policy, MemorySegment __param) {
        var mh$ = sched_setscheduler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sched_setscheduler", __pid, __policy, __param);
            }
            return (int)mh$.invokeExact(__pid, __policy, __param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sched_getscheduler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sched_getscheduler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sched_getscheduler(__pid_t __pid)
     * }
     */
    public static FunctionDescriptor sched_getscheduler$descriptor() {
        return sched_getscheduler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sched_getscheduler(__pid_t __pid)
     * }
     */
    public static MethodHandle sched_getscheduler$handle() {
        return sched_getscheduler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sched_getscheduler(__pid_t __pid)
     * }
     */
    public static int sched_getscheduler(int __pid) {
        var mh$ = sched_getscheduler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sched_getscheduler", __pid);
            }
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sched_yield {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sched_yield"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sched_yield()
     * }
     */
    public static FunctionDescriptor sched_yield$descriptor() {
        return sched_yield.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sched_yield()
     * }
     */
    public static MethodHandle sched_yield$handle() {
        return sched_yield.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sched_yield()
     * }
     */
    public static int sched_yield() {
        var mh$ = sched_yield.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sched_yield");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sched_get_priority_max {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sched_get_priority_max"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sched_get_priority_max(int __algorithm)
     * }
     */
    public static FunctionDescriptor sched_get_priority_max$descriptor() {
        return sched_get_priority_max.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sched_get_priority_max(int __algorithm)
     * }
     */
    public static MethodHandle sched_get_priority_max$handle() {
        return sched_get_priority_max.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sched_get_priority_max(int __algorithm)
     * }
     */
    public static int sched_get_priority_max(int __algorithm) {
        var mh$ = sched_get_priority_max.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sched_get_priority_max", __algorithm);
            }
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sched_get_priority_min {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sched_get_priority_min"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sched_get_priority_min(int __algorithm)
     * }
     */
    public static FunctionDescriptor sched_get_priority_min$descriptor() {
        return sched_get_priority_min.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sched_get_priority_min(int __algorithm)
     * }
     */
    public static MethodHandle sched_get_priority_min$handle() {
        return sched_get_priority_min.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sched_get_priority_min(int __algorithm)
     * }
     */
    public static int sched_get_priority_min(int __algorithm) {
        var mh$ = sched_get_priority_min.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sched_get_priority_min", __algorithm);
            }
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class sched_rr_get_interval {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("sched_rr_get_interval"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int sched_rr_get_interval(__pid_t __pid, struct timespec *__t)
     * }
     */
    public static FunctionDescriptor sched_rr_get_interval$descriptor() {
        return sched_rr_get_interval.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int sched_rr_get_interval(__pid_t __pid, struct timespec *__t)
     * }
     */
    public static MethodHandle sched_rr_get_interval$handle() {
        return sched_rr_get_interval.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int sched_rr_get_interval(__pid_t __pid, struct timespec *__t)
     * }
     */
    public static int sched_rr_get_interval(int __pid, MemorySegment __t) {
        var mh$ = sched_rr_get_interval.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("sched_rr_get_interval", __pid, __t);
            }
            return (int)mh$.invokeExact(__pid, __t);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int PTHREAD_CREATE_JOINABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_CREATE_JOINABLE = 0
     * }
     */
    public static int PTHREAD_CREATE_JOINABLE() {
        return PTHREAD_CREATE_JOINABLE;
    }
    private static final int PTHREAD_CREATE_DETACHED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_CREATE_DETACHED = 1
     * }
     */
    public static int PTHREAD_CREATE_DETACHED() {
        return PTHREAD_CREATE_DETACHED;
    }
    private static final int PTHREAD_MUTEX_TIMED_NP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_TIMED_NP = 0
     * }
     */
    public static int PTHREAD_MUTEX_TIMED_NP() {
        return PTHREAD_MUTEX_TIMED_NP;
    }
    private static final int PTHREAD_MUTEX_RECURSIVE_NP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_RECURSIVE_NP = 1
     * }
     */
    public static int PTHREAD_MUTEX_RECURSIVE_NP() {
        return PTHREAD_MUTEX_RECURSIVE_NP;
    }
    private static final int PTHREAD_MUTEX_ERRORCHECK_NP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_ERRORCHECK_NP = 2
     * }
     */
    public static int PTHREAD_MUTEX_ERRORCHECK_NP() {
        return PTHREAD_MUTEX_ERRORCHECK_NP;
    }
    private static final int PTHREAD_MUTEX_ADAPTIVE_NP = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_ADAPTIVE_NP = 3
     * }
     */
    public static int PTHREAD_MUTEX_ADAPTIVE_NP() {
        return PTHREAD_MUTEX_ADAPTIVE_NP;
    }
    private static final int PTHREAD_MUTEX_NORMAL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_NORMAL = 0
     * }
     */
    public static int PTHREAD_MUTEX_NORMAL() {
        return PTHREAD_MUTEX_NORMAL;
    }
    private static final int PTHREAD_MUTEX_RECURSIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_RECURSIVE = 1
     * }
     */
    public static int PTHREAD_MUTEX_RECURSIVE() {
        return PTHREAD_MUTEX_RECURSIVE;
    }
    private static final int PTHREAD_MUTEX_ERRORCHECK = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_ERRORCHECK = 2
     * }
     */
    public static int PTHREAD_MUTEX_ERRORCHECK() {
        return PTHREAD_MUTEX_ERRORCHECK;
    }
    private static final int PTHREAD_MUTEX_DEFAULT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_DEFAULT = 0
     * }
     */
    public static int PTHREAD_MUTEX_DEFAULT() {
        return PTHREAD_MUTEX_DEFAULT;
    }
    private static final int PTHREAD_MUTEX_STALLED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_STALLED = 0
     * }
     */
    public static int PTHREAD_MUTEX_STALLED() {
        return PTHREAD_MUTEX_STALLED;
    }
    private static final int PTHREAD_MUTEX_STALLED_NP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_STALLED_NP = 0
     * }
     */
    public static int PTHREAD_MUTEX_STALLED_NP() {
        return PTHREAD_MUTEX_STALLED_NP;
    }
    private static final int PTHREAD_MUTEX_ROBUST = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_ROBUST = 1
     * }
     */
    public static int PTHREAD_MUTEX_ROBUST() {
        return PTHREAD_MUTEX_ROBUST;
    }
    private static final int PTHREAD_MUTEX_ROBUST_NP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_MUTEX_ROBUST_NP = 1
     * }
     */
    public static int PTHREAD_MUTEX_ROBUST_NP() {
        return PTHREAD_MUTEX_ROBUST_NP;
    }
    private static final int PTHREAD_PRIO_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_PRIO_NONE = 0
     * }
     */
    public static int PTHREAD_PRIO_NONE() {
        return PTHREAD_PRIO_NONE;
    }
    private static final int PTHREAD_PRIO_INHERIT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_PRIO_INHERIT = 1
     * }
     */
    public static int PTHREAD_PRIO_INHERIT() {
        return PTHREAD_PRIO_INHERIT;
    }
    private static final int PTHREAD_PRIO_PROTECT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_PRIO_PROTECT = 2
     * }
     */
    public static int PTHREAD_PRIO_PROTECT() {
        return PTHREAD_PRIO_PROTECT;
    }
    private static final int PTHREAD_RWLOCK_PREFER_READER_NP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_RWLOCK_PREFER_READER_NP = 0
     * }
     */
    public static int PTHREAD_RWLOCK_PREFER_READER_NP() {
        return PTHREAD_RWLOCK_PREFER_READER_NP;
    }
    private static final int PTHREAD_RWLOCK_PREFER_WRITER_NP = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_RWLOCK_PREFER_WRITER_NP = 1
     * }
     */
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NP() {
        return PTHREAD_RWLOCK_PREFER_WRITER_NP;
    }
    private static final int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2
     * }
     */
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP() {
        return PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP;
    }
    private static final int PTHREAD_RWLOCK_DEFAULT_NP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_RWLOCK_DEFAULT_NP = 0
     * }
     */
    public static int PTHREAD_RWLOCK_DEFAULT_NP() {
        return PTHREAD_RWLOCK_DEFAULT_NP;
    }
    private static final int PTHREAD_INHERIT_SCHED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_INHERIT_SCHED = 0
     * }
     */
    public static int PTHREAD_INHERIT_SCHED() {
        return PTHREAD_INHERIT_SCHED;
    }
    private static final int PTHREAD_EXPLICIT_SCHED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_EXPLICIT_SCHED = 1
     * }
     */
    public static int PTHREAD_EXPLICIT_SCHED() {
        return PTHREAD_EXPLICIT_SCHED;
    }
    private static final int PTHREAD_SCOPE_SYSTEM = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_SCOPE_SYSTEM = 0
     * }
     */
    public static int PTHREAD_SCOPE_SYSTEM() {
        return PTHREAD_SCOPE_SYSTEM;
    }
    private static final int PTHREAD_SCOPE_PROCESS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_SCOPE_PROCESS = 1
     * }
     */
    public static int PTHREAD_SCOPE_PROCESS() {
        return PTHREAD_SCOPE_PROCESS;
    }
    private static final int PTHREAD_PROCESS_PRIVATE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_PROCESS_PRIVATE = 0
     * }
     */
    public static int PTHREAD_PROCESS_PRIVATE() {
        return PTHREAD_PROCESS_PRIVATE;
    }
    private static final int PTHREAD_PROCESS_SHARED = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_PROCESS_SHARED = 1
     * }
     */
    public static int PTHREAD_PROCESS_SHARED() {
        return PTHREAD_PROCESS_SHARED;
    }
    private static final int PTHREAD_CANCEL_ENABLE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_CANCEL_ENABLE = 0
     * }
     */
    public static int PTHREAD_CANCEL_ENABLE() {
        return PTHREAD_CANCEL_ENABLE;
    }
    private static final int PTHREAD_CANCEL_DISABLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_CANCEL_DISABLE = 1
     * }
     */
    public static int PTHREAD_CANCEL_DISABLE() {
        return PTHREAD_CANCEL_DISABLE;
    }
    private static final int PTHREAD_CANCEL_DEFERRED = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_CANCEL_DEFERRED = 0
     * }
     */
    public static int PTHREAD_CANCEL_DEFERRED() {
        return PTHREAD_CANCEL_DEFERRED;
    }
    private static final int PTHREAD_CANCEL_ASYNCHRONOUS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.PTHREAD_CANCEL_ASYNCHRONOUS = 1
     * }
     */
    public static int PTHREAD_CANCEL_ASYNCHRONOUS() {
        return PTHREAD_CANCEL_ASYNCHRONOUS;
    }

    private static class pthread_create {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_create"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_create(pthread_t *restrict __newthread, const pthread_attr_t *restrict __attr, void *(*__start_routine)(void *), void *restrict __arg)
     * }
     */
    public static FunctionDescriptor pthread_create$descriptor() {
        return pthread_create.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_create(pthread_t *restrict __newthread, const pthread_attr_t *restrict __attr, void *(*__start_routine)(void *), void *restrict __arg)
     * }
     */
    public static MethodHandle pthread_create$handle() {
        return pthread_create.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_create(pthread_t *restrict __newthread, const pthread_attr_t *restrict __attr, void *(*__start_routine)(void *), void *restrict __arg)
     * }
     */
    public static int pthread_create(MemorySegment __newthread, MemorySegment __attr, MemorySegment __start_routine, MemorySegment __arg) {
        var mh$ = pthread_create.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_create", __newthread, __attr, __start_routine, __arg);
            }
            return (int)mh$.invokeExact(__newthread, __attr, __start_routine, __arg);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_exit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_exit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pthread_exit(void *__retval)
     * }
     */
    public static FunctionDescriptor pthread_exit$descriptor() {
        return pthread_exit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pthread_exit(void *__retval)
     * }
     */
    public static MethodHandle pthread_exit$handle() {
        return pthread_exit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pthread_exit(void *__retval)
     * }
     */
    public static void pthread_exit(MemorySegment __retval) {
        var mh$ = pthread_exit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_exit", __retval);
            }
            mh$.invokeExact(__retval);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_join {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_join"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_join(pthread_t __th, void **__thread_return)
     * }
     */
    public static FunctionDescriptor pthread_join$descriptor() {
        return pthread_join.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_join(pthread_t __th, void **__thread_return)
     * }
     */
    public static MethodHandle pthread_join$handle() {
        return pthread_join.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_join(pthread_t __th, void **__thread_return)
     * }
     */
    public static int pthread_join(long __th, MemorySegment __thread_return) {
        var mh$ = pthread_join.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_join", __th, __thread_return);
            }
            return (int)mh$.invokeExact(__th, __thread_return);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_detach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_detach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_detach(pthread_t __th)
     * }
     */
    public static FunctionDescriptor pthread_detach$descriptor() {
        return pthread_detach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_detach(pthread_t __th)
     * }
     */
    public static MethodHandle pthread_detach$handle() {
        return pthread_detach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_detach(pthread_t __th)
     * }
     */
    public static int pthread_detach(long __th) {
        var mh$ = pthread_detach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_detach", __th);
            }
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_self {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_self"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern pthread_t pthread_self()
     * }
     */
    public static FunctionDescriptor pthread_self$descriptor() {
        return pthread_self.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern pthread_t pthread_self()
     * }
     */
    public static MethodHandle pthread_self$handle() {
        return pthread_self.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern pthread_t pthread_self()
     * }
     */
    public static long pthread_self() {
        var mh$ = pthread_self.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_self");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_equal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_equal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_equal(pthread_t __thread1, pthread_t __thread2)
     * }
     */
    public static FunctionDescriptor pthread_equal$descriptor() {
        return pthread_equal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_equal(pthread_t __thread1, pthread_t __thread2)
     * }
     */
    public static MethodHandle pthread_equal$handle() {
        return pthread_equal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_equal(pthread_t __thread1, pthread_t __thread2)
     * }
     */
    public static int pthread_equal(long __thread1, long __thread2) {
        var mh$ = pthread_equal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_equal", __thread1, __thread2);
            }
            return (int)mh$.invokeExact(__thread1, __thread2);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_init(pthread_attr_t *__attr)
     * }
     */
    public static FunctionDescriptor pthread_attr_init$descriptor() {
        return pthread_attr_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_init(pthread_attr_t *__attr)
     * }
     */
    public static MethodHandle pthread_attr_init$handle() {
        return pthread_attr_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_init(pthread_attr_t *__attr)
     * }
     */
    public static int pthread_attr_init(MemorySegment __attr) {
        var mh$ = pthread_attr_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_init", __attr);
            }
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_destroy(pthread_attr_t *__attr)
     * }
     */
    public static FunctionDescriptor pthread_attr_destroy$descriptor() {
        return pthread_attr_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_destroy(pthread_attr_t *__attr)
     * }
     */
    public static MethodHandle pthread_attr_destroy$handle() {
        return pthread_attr_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_destroy(pthread_attr_t *__attr)
     * }
     */
    public static int pthread_attr_destroy(MemorySegment __attr) {
        var mh$ = pthread_attr_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_destroy", __attr);
            }
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_getdetachstate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_getdetachstate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_getdetachstate(const pthread_attr_t *__attr, int *__detachstate)
     * }
     */
    public static FunctionDescriptor pthread_attr_getdetachstate$descriptor() {
        return pthread_attr_getdetachstate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_getdetachstate(const pthread_attr_t *__attr, int *__detachstate)
     * }
     */
    public static MethodHandle pthread_attr_getdetachstate$handle() {
        return pthread_attr_getdetachstate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_getdetachstate(const pthread_attr_t *__attr, int *__detachstate)
     * }
     */
    public static int pthread_attr_getdetachstate(MemorySegment __attr, MemorySegment __detachstate) {
        var mh$ = pthread_attr_getdetachstate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_getdetachstate", __attr, __detachstate);
            }
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_setdetachstate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_setdetachstate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_setdetachstate(pthread_attr_t *__attr, int __detachstate)
     * }
     */
    public static FunctionDescriptor pthread_attr_setdetachstate$descriptor() {
        return pthread_attr_setdetachstate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_setdetachstate(pthread_attr_t *__attr, int __detachstate)
     * }
     */
    public static MethodHandle pthread_attr_setdetachstate$handle() {
        return pthread_attr_setdetachstate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_setdetachstate(pthread_attr_t *__attr, int __detachstate)
     * }
     */
    public static int pthread_attr_setdetachstate(MemorySegment __attr, int __detachstate) {
        var mh$ = pthread_attr_setdetachstate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_setdetachstate", __attr, __detachstate);
            }
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_getguardsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_getguardsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_getguardsize(const pthread_attr_t *__attr, size_t *__guardsize)
     * }
     */
    public static FunctionDescriptor pthread_attr_getguardsize$descriptor() {
        return pthread_attr_getguardsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_getguardsize(const pthread_attr_t *__attr, size_t *__guardsize)
     * }
     */
    public static MethodHandle pthread_attr_getguardsize$handle() {
        return pthread_attr_getguardsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_getguardsize(const pthread_attr_t *__attr, size_t *__guardsize)
     * }
     */
    public static int pthread_attr_getguardsize(MemorySegment __attr, MemorySegment __guardsize) {
        var mh$ = pthread_attr_getguardsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_getguardsize", __attr, __guardsize);
            }
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_setguardsize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_setguardsize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_setguardsize(pthread_attr_t *__attr, size_t __guardsize)
     * }
     */
    public static FunctionDescriptor pthread_attr_setguardsize$descriptor() {
        return pthread_attr_setguardsize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_setguardsize(pthread_attr_t *__attr, size_t __guardsize)
     * }
     */
    public static MethodHandle pthread_attr_setguardsize$handle() {
        return pthread_attr_setguardsize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_setguardsize(pthread_attr_t *__attr, size_t __guardsize)
     * }
     */
    public static int pthread_attr_setguardsize(MemorySegment __attr, long __guardsize) {
        var mh$ = pthread_attr_setguardsize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_setguardsize", __attr, __guardsize);
            }
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_getschedparam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_getschedparam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_getschedparam(const pthread_attr_t *restrict __attr, struct sched_param *restrict __param)
     * }
     */
    public static FunctionDescriptor pthread_attr_getschedparam$descriptor() {
        return pthread_attr_getschedparam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_getschedparam(const pthread_attr_t *restrict __attr, struct sched_param *restrict __param)
     * }
     */
    public static MethodHandle pthread_attr_getschedparam$handle() {
        return pthread_attr_getschedparam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_getschedparam(const pthread_attr_t *restrict __attr, struct sched_param *restrict __param)
     * }
     */
    public static int pthread_attr_getschedparam(MemorySegment __attr, MemorySegment __param) {
        var mh$ = pthread_attr_getschedparam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_getschedparam", __attr, __param);
            }
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_setschedparam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_setschedparam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_setschedparam(pthread_attr_t *restrict __attr, const struct sched_param *restrict __param)
     * }
     */
    public static FunctionDescriptor pthread_attr_setschedparam$descriptor() {
        return pthread_attr_setschedparam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_setschedparam(pthread_attr_t *restrict __attr, const struct sched_param *restrict __param)
     * }
     */
    public static MethodHandle pthread_attr_setschedparam$handle() {
        return pthread_attr_setschedparam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_setschedparam(pthread_attr_t *restrict __attr, const struct sched_param *restrict __param)
     * }
     */
    public static int pthread_attr_setschedparam(MemorySegment __attr, MemorySegment __param) {
        var mh$ = pthread_attr_setschedparam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_setschedparam", __attr, __param);
            }
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_getschedpolicy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_getschedpolicy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_getschedpolicy(const pthread_attr_t *restrict __attr, int *restrict __policy)
     * }
     */
    public static FunctionDescriptor pthread_attr_getschedpolicy$descriptor() {
        return pthread_attr_getschedpolicy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_getschedpolicy(const pthread_attr_t *restrict __attr, int *restrict __policy)
     * }
     */
    public static MethodHandle pthread_attr_getschedpolicy$handle() {
        return pthread_attr_getschedpolicy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_getschedpolicy(const pthread_attr_t *restrict __attr, int *restrict __policy)
     * }
     */
    public static int pthread_attr_getschedpolicy(MemorySegment __attr, MemorySegment __policy) {
        var mh$ = pthread_attr_getschedpolicy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_getschedpolicy", __attr, __policy);
            }
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_setschedpolicy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_setschedpolicy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_setschedpolicy(pthread_attr_t *__attr, int __policy)
     * }
     */
    public static FunctionDescriptor pthread_attr_setschedpolicy$descriptor() {
        return pthread_attr_setschedpolicy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_setschedpolicy(pthread_attr_t *__attr, int __policy)
     * }
     */
    public static MethodHandle pthread_attr_setschedpolicy$handle() {
        return pthread_attr_setschedpolicy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_setschedpolicy(pthread_attr_t *__attr, int __policy)
     * }
     */
    public static int pthread_attr_setschedpolicy(MemorySegment __attr, int __policy) {
        var mh$ = pthread_attr_setschedpolicy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_setschedpolicy", __attr, __policy);
            }
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_getinheritsched {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_getinheritsched"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_getinheritsched(const pthread_attr_t *restrict __attr, int *restrict __inherit)
     * }
     */
    public static FunctionDescriptor pthread_attr_getinheritsched$descriptor() {
        return pthread_attr_getinheritsched.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_getinheritsched(const pthread_attr_t *restrict __attr, int *restrict __inherit)
     * }
     */
    public static MethodHandle pthread_attr_getinheritsched$handle() {
        return pthread_attr_getinheritsched.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_getinheritsched(const pthread_attr_t *restrict __attr, int *restrict __inherit)
     * }
     */
    public static int pthread_attr_getinheritsched(MemorySegment __attr, MemorySegment __inherit) {
        var mh$ = pthread_attr_getinheritsched.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_getinheritsched", __attr, __inherit);
            }
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_setinheritsched {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_setinheritsched"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_setinheritsched(pthread_attr_t *__attr, int __inherit)
     * }
     */
    public static FunctionDescriptor pthread_attr_setinheritsched$descriptor() {
        return pthread_attr_setinheritsched.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_setinheritsched(pthread_attr_t *__attr, int __inherit)
     * }
     */
    public static MethodHandle pthread_attr_setinheritsched$handle() {
        return pthread_attr_setinheritsched.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_setinheritsched(pthread_attr_t *__attr, int __inherit)
     * }
     */
    public static int pthread_attr_setinheritsched(MemorySegment __attr, int __inherit) {
        var mh$ = pthread_attr_setinheritsched.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_setinheritsched", __attr, __inherit);
            }
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_getscope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_getscope"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_getscope(const pthread_attr_t *restrict __attr, int *restrict __scope)
     * }
     */
    public static FunctionDescriptor pthread_attr_getscope$descriptor() {
        return pthread_attr_getscope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_getscope(const pthread_attr_t *restrict __attr, int *restrict __scope)
     * }
     */
    public static MethodHandle pthread_attr_getscope$handle() {
        return pthread_attr_getscope.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_getscope(const pthread_attr_t *restrict __attr, int *restrict __scope)
     * }
     */
    public static int pthread_attr_getscope(MemorySegment __attr, MemorySegment __scope) {
        var mh$ = pthread_attr_getscope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_getscope", __attr, __scope);
            }
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_setscope {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_setscope"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_setscope(pthread_attr_t *__attr, int __scope)
     * }
     */
    public static FunctionDescriptor pthread_attr_setscope$descriptor() {
        return pthread_attr_setscope.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_setscope(pthread_attr_t *__attr, int __scope)
     * }
     */
    public static MethodHandle pthread_attr_setscope$handle() {
        return pthread_attr_setscope.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_setscope(pthread_attr_t *__attr, int __scope)
     * }
     */
    public static int pthread_attr_setscope(MemorySegment __attr, int __scope) {
        var mh$ = pthread_attr_setscope.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_setscope", __attr, __scope);
            }
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_getstackaddr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_getstackaddr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_getstackaddr(const pthread_attr_t *restrict __attr, void **restrict __stackaddr)
     * }
     */
    public static FunctionDescriptor pthread_attr_getstackaddr$descriptor() {
        return pthread_attr_getstackaddr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_getstackaddr(const pthread_attr_t *restrict __attr, void **restrict __stackaddr)
     * }
     */
    public static MethodHandle pthread_attr_getstackaddr$handle() {
        return pthread_attr_getstackaddr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_getstackaddr(const pthread_attr_t *restrict __attr, void **restrict __stackaddr)
     * }
     */
    public static int pthread_attr_getstackaddr(MemorySegment __attr, MemorySegment __stackaddr) {
        var mh$ = pthread_attr_getstackaddr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_getstackaddr", __attr, __stackaddr);
            }
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_setstackaddr {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_setstackaddr"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_setstackaddr(pthread_attr_t *__attr, void *__stackaddr)
     * }
     */
    public static FunctionDescriptor pthread_attr_setstackaddr$descriptor() {
        return pthread_attr_setstackaddr.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_setstackaddr(pthread_attr_t *__attr, void *__stackaddr)
     * }
     */
    public static MethodHandle pthread_attr_setstackaddr$handle() {
        return pthread_attr_setstackaddr.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_setstackaddr(pthread_attr_t *__attr, void *__stackaddr)
     * }
     */
    public static int pthread_attr_setstackaddr(MemorySegment __attr, MemorySegment __stackaddr) {
        var mh$ = pthread_attr_setstackaddr.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_setstackaddr", __attr, __stackaddr);
            }
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_getstacksize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_getstacksize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_getstacksize(const pthread_attr_t *restrict __attr, size_t *restrict __stacksize)
     * }
     */
    public static FunctionDescriptor pthread_attr_getstacksize$descriptor() {
        return pthread_attr_getstacksize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_getstacksize(const pthread_attr_t *restrict __attr, size_t *restrict __stacksize)
     * }
     */
    public static MethodHandle pthread_attr_getstacksize$handle() {
        return pthread_attr_getstacksize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_getstacksize(const pthread_attr_t *restrict __attr, size_t *restrict __stacksize)
     * }
     */
    public static int pthread_attr_getstacksize(MemorySegment __attr, MemorySegment __stacksize) {
        var mh$ = pthread_attr_getstacksize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_getstacksize", __attr, __stacksize);
            }
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_setstacksize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_setstacksize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_setstacksize(pthread_attr_t *__attr, size_t __stacksize)
     * }
     */
    public static FunctionDescriptor pthread_attr_setstacksize$descriptor() {
        return pthread_attr_setstacksize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_setstacksize(pthread_attr_t *__attr, size_t __stacksize)
     * }
     */
    public static MethodHandle pthread_attr_setstacksize$handle() {
        return pthread_attr_setstacksize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_setstacksize(pthread_attr_t *__attr, size_t __stacksize)
     * }
     */
    public static int pthread_attr_setstacksize(MemorySegment __attr, long __stacksize) {
        var mh$ = pthread_attr_setstacksize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_setstacksize", __attr, __stacksize);
            }
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_getstack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_getstack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_getstack(const pthread_attr_t *restrict __attr, void **restrict __stackaddr, size_t *restrict __stacksize)
     * }
     */
    public static FunctionDescriptor pthread_attr_getstack$descriptor() {
        return pthread_attr_getstack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_getstack(const pthread_attr_t *restrict __attr, void **restrict __stackaddr, size_t *restrict __stacksize)
     * }
     */
    public static MethodHandle pthread_attr_getstack$handle() {
        return pthread_attr_getstack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_getstack(const pthread_attr_t *restrict __attr, void **restrict __stackaddr, size_t *restrict __stacksize)
     * }
     */
    public static int pthread_attr_getstack(MemorySegment __attr, MemorySegment __stackaddr, MemorySegment __stacksize) {
        var mh$ = pthread_attr_getstack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_getstack", __attr, __stackaddr, __stacksize);
            }
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_attr_setstack {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_attr_setstack"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_attr_setstack(pthread_attr_t *__attr, void *__stackaddr, size_t __stacksize)
     * }
     */
    public static FunctionDescriptor pthread_attr_setstack$descriptor() {
        return pthread_attr_setstack.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_attr_setstack(pthread_attr_t *__attr, void *__stackaddr, size_t __stacksize)
     * }
     */
    public static MethodHandle pthread_attr_setstack$handle() {
        return pthread_attr_setstack.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_attr_setstack(pthread_attr_t *__attr, void *__stackaddr, size_t __stacksize)
     * }
     */
    public static int pthread_attr_setstack(MemorySegment __attr, MemorySegment __stackaddr, long __stacksize) {
        var mh$ = pthread_attr_setstack.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_attr_setstack", __attr, __stackaddr, __stacksize);
            }
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_setschedparam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_setschedparam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const struct sched_param *__param)
     * }
     */
    public static FunctionDescriptor pthread_setschedparam$descriptor() {
        return pthread_setschedparam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const struct sched_param *__param)
     * }
     */
    public static MethodHandle pthread_setschedparam$handle() {
        return pthread_setschedparam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_setschedparam(pthread_t __target_thread, int __policy, const struct sched_param *__param)
     * }
     */
    public static int pthread_setschedparam(long __target_thread, int __policy, MemorySegment __param) {
        var mh$ = pthread_setschedparam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_setschedparam", __target_thread, __policy, __param);
            }
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_getschedparam {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_getschedparam"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_getschedparam(pthread_t __target_thread, int *restrict __policy, struct sched_param *restrict __param)
     * }
     */
    public static FunctionDescriptor pthread_getschedparam$descriptor() {
        return pthread_getschedparam.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_getschedparam(pthread_t __target_thread, int *restrict __policy, struct sched_param *restrict __param)
     * }
     */
    public static MethodHandle pthread_getschedparam$handle() {
        return pthread_getschedparam.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_getschedparam(pthread_t __target_thread, int *restrict __policy, struct sched_param *restrict __param)
     * }
     */
    public static int pthread_getschedparam(long __target_thread, MemorySegment __policy, MemorySegment __param) {
        var mh$ = pthread_getschedparam.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_getschedparam", __target_thread, __policy, __param);
            }
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_setschedprio {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_setschedprio"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_setschedprio(pthread_t __target_thread, int __prio)
     * }
     */
    public static FunctionDescriptor pthread_setschedprio$descriptor() {
        return pthread_setschedprio.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_setschedprio(pthread_t __target_thread, int __prio)
     * }
     */
    public static MethodHandle pthread_setschedprio$handle() {
        return pthread_setschedprio.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_setschedprio(pthread_t __target_thread, int __prio)
     * }
     */
    public static int pthread_setschedprio(long __target_thread, int __prio) {
        var mh$ = pthread_setschedprio.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_setschedprio", __target_thread, __prio);
            }
            return (int)mh$.invokeExact(__target_thread, __prio);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_once {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_once"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_once(pthread_once_t *__once_control, void (*__init_routine)(void))
     * }
     */
    public static FunctionDescriptor pthread_once$descriptor() {
        return pthread_once.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_once(pthread_once_t *__once_control, void (*__init_routine)(void))
     * }
     */
    public static MethodHandle pthread_once$handle() {
        return pthread_once.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_once(pthread_once_t *__once_control, void (*__init_routine)(void))
     * }
     */
    public static int pthread_once(MemorySegment __once_control, MemorySegment __init_routine) {
        var mh$ = pthread_once.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_once", __once_control, __init_routine);
            }
            return (int)mh$.invokeExact(__once_control, __init_routine);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_setcancelstate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_setcancelstate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_setcancelstate(int __state, int *__oldstate)
     * }
     */
    public static FunctionDescriptor pthread_setcancelstate$descriptor() {
        return pthread_setcancelstate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_setcancelstate(int __state, int *__oldstate)
     * }
     */
    public static MethodHandle pthread_setcancelstate$handle() {
        return pthread_setcancelstate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_setcancelstate(int __state, int *__oldstate)
     * }
     */
    public static int pthread_setcancelstate(int __state, MemorySegment __oldstate) {
        var mh$ = pthread_setcancelstate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_setcancelstate", __state, __oldstate);
            }
            return (int)mh$.invokeExact(__state, __oldstate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_setcanceltype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_setcanceltype"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_setcanceltype(int __type, int *__oldtype)
     * }
     */
    public static FunctionDescriptor pthread_setcanceltype$descriptor() {
        return pthread_setcanceltype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_setcanceltype(int __type, int *__oldtype)
     * }
     */
    public static MethodHandle pthread_setcanceltype$handle() {
        return pthread_setcanceltype.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_setcanceltype(int __type, int *__oldtype)
     * }
     */
    public static int pthread_setcanceltype(int __type, MemorySegment __oldtype) {
        var mh$ = pthread_setcanceltype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_setcanceltype", __type, __oldtype);
            }
            return (int)mh$.invokeExact(__type, __oldtype);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_cancel(pthread_t __th)
     * }
     */
    public static FunctionDescriptor pthread_cancel$descriptor() {
        return pthread_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_cancel(pthread_t __th)
     * }
     */
    public static MethodHandle pthread_cancel$handle() {
        return pthread_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_cancel(pthread_t __th)
     * }
     */
    public static int pthread_cancel(long __th) {
        var mh$ = pthread_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_cancel", __th);
            }
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_testcancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_testcancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void pthread_testcancel()
     * }
     */
    public static FunctionDescriptor pthread_testcancel$descriptor() {
        return pthread_testcancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void pthread_testcancel()
     * }
     */
    public static MethodHandle pthread_testcancel$handle() {
        return pthread_testcancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void pthread_testcancel()
     * }
     */
    public static void pthread_testcancel() {
        var mh$ = pthread_testcancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_testcancel");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __pthread_register_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__pthread_register_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf)
     * }
     */
    public static FunctionDescriptor __pthread_register_cancel$descriptor() {
        return __pthread_register_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf)
     * }
     */
    public static MethodHandle __pthread_register_cancel$handle() {
        return __pthread_register_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void __pthread_register_cancel(__pthread_unwind_buf_t *__buf)
     * }
     */
    public static void __pthread_register_cancel(MemorySegment __buf) {
        var mh$ = __pthread_register_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__pthread_register_cancel", __buf);
            }
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __pthread_unregister_cancel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__pthread_unregister_cancel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf)
     * }
     */
    public static FunctionDescriptor __pthread_unregister_cancel$descriptor() {
        return __pthread_unregister_cancel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf)
     * }
     */
    public static MethodHandle __pthread_unregister_cancel$handle() {
        return __pthread_unregister_cancel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void __pthread_unregister_cancel(__pthread_unwind_buf_t *__buf)
     * }
     */
    public static void __pthread_unregister_cancel(MemorySegment __buf) {
        var mh$ = __pthread_unregister_cancel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__pthread_unregister_cancel", __buf);
            }
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __pthread_unwind_next {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__pthread_unwind_next"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf)
     * }
     */
    public static FunctionDescriptor __pthread_unwind_next$descriptor() {
        return __pthread_unwind_next.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf)
     * }
     */
    public static MethodHandle __pthread_unwind_next$handle() {
        return __pthread_unwind_next.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void __pthread_unwind_next(__pthread_unwind_buf_t *__buf)
     * }
     */
    public static void __pthread_unwind_next(MemorySegment __buf) {
        var mh$ = __pthread_unwind_next.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__pthread_unwind_next", __buf);
            }
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class __sigsetjmp {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("__sigsetjmp"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int __sigsetjmp(struct __jmp_buf_tag __env[1], int __savemask)
     * }
     */
    public static FunctionDescriptor __sigsetjmp$descriptor() {
        return __sigsetjmp.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int __sigsetjmp(struct __jmp_buf_tag __env[1], int __savemask)
     * }
     */
    public static MethodHandle __sigsetjmp$handle() {
        return __sigsetjmp.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int __sigsetjmp(struct __jmp_buf_tag __env[1], int __savemask)
     * }
     */
    public static int __sigsetjmp(MemorySegment __env, int __savemask) {
        var mh$ = __sigsetjmp.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("__sigsetjmp", __env, __savemask);
            }
            return (int)mh$.invokeExact(__env, __savemask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutex_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutex_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutex_init(pthread_mutex_t *__mutex, const pthread_mutexattr_t *__mutexattr)
     * }
     */
    public static FunctionDescriptor pthread_mutex_init$descriptor() {
        return pthread_mutex_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutex_init(pthread_mutex_t *__mutex, const pthread_mutexattr_t *__mutexattr)
     * }
     */
    public static MethodHandle pthread_mutex_init$handle() {
        return pthread_mutex_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutex_init(pthread_mutex_t *__mutex, const pthread_mutexattr_t *__mutexattr)
     * }
     */
    public static int pthread_mutex_init(MemorySegment __mutex, MemorySegment __mutexattr) {
        var mh$ = pthread_mutex_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutex_init", __mutex, __mutexattr);
            }
            return (int)mh$.invokeExact(__mutex, __mutexattr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutex_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutex_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutex_destroy(pthread_mutex_t *__mutex)
     * }
     */
    public static FunctionDescriptor pthread_mutex_destroy$descriptor() {
        return pthread_mutex_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutex_destroy(pthread_mutex_t *__mutex)
     * }
     */
    public static MethodHandle pthread_mutex_destroy$handle() {
        return pthread_mutex_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutex_destroy(pthread_mutex_t *__mutex)
     * }
     */
    public static int pthread_mutex_destroy(MemorySegment __mutex) {
        var mh$ = pthread_mutex_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutex_destroy", __mutex);
            }
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutex_trylock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutex_trylock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutex_trylock(pthread_mutex_t *__mutex)
     * }
     */
    public static FunctionDescriptor pthread_mutex_trylock$descriptor() {
        return pthread_mutex_trylock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutex_trylock(pthread_mutex_t *__mutex)
     * }
     */
    public static MethodHandle pthread_mutex_trylock$handle() {
        return pthread_mutex_trylock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutex_trylock(pthread_mutex_t *__mutex)
     * }
     */
    public static int pthread_mutex_trylock(MemorySegment __mutex) {
        var mh$ = pthread_mutex_trylock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutex_trylock", __mutex);
            }
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutex_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutex_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutex_lock(pthread_mutex_t *__mutex)
     * }
     */
    public static FunctionDescriptor pthread_mutex_lock$descriptor() {
        return pthread_mutex_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutex_lock(pthread_mutex_t *__mutex)
     * }
     */
    public static MethodHandle pthread_mutex_lock$handle() {
        return pthread_mutex_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutex_lock(pthread_mutex_t *__mutex)
     * }
     */
    public static int pthread_mutex_lock(MemorySegment __mutex) {
        var mh$ = pthread_mutex_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutex_lock", __mutex);
            }
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutex_timedlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutex_timedlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutex_timedlock(pthread_mutex_t *restrict __mutex, const struct timespec *restrict __abstime)
     * }
     */
    public static FunctionDescriptor pthread_mutex_timedlock$descriptor() {
        return pthread_mutex_timedlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutex_timedlock(pthread_mutex_t *restrict __mutex, const struct timespec *restrict __abstime)
     * }
     */
    public static MethodHandle pthread_mutex_timedlock$handle() {
        return pthread_mutex_timedlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutex_timedlock(pthread_mutex_t *restrict __mutex, const struct timespec *restrict __abstime)
     * }
     */
    public static int pthread_mutex_timedlock(MemorySegment __mutex, MemorySegment __abstime) {
        var mh$ = pthread_mutex_timedlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutex_timedlock", __mutex, __abstime);
            }
            return (int)mh$.invokeExact(__mutex, __abstime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutex_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutex_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutex_unlock(pthread_mutex_t *__mutex)
     * }
     */
    public static FunctionDescriptor pthread_mutex_unlock$descriptor() {
        return pthread_mutex_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutex_unlock(pthread_mutex_t *__mutex)
     * }
     */
    public static MethodHandle pthread_mutex_unlock$handle() {
        return pthread_mutex_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutex_unlock(pthread_mutex_t *__mutex)
     * }
     */
    public static int pthread_mutex_unlock(MemorySegment __mutex) {
        var mh$ = pthread_mutex_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutex_unlock", __mutex);
            }
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutex_getprioceiling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutex_getprioceiling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutex_getprioceiling(const pthread_mutex_t *restrict __mutex, int *restrict __prioceiling)
     * }
     */
    public static FunctionDescriptor pthread_mutex_getprioceiling$descriptor() {
        return pthread_mutex_getprioceiling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutex_getprioceiling(const pthread_mutex_t *restrict __mutex, int *restrict __prioceiling)
     * }
     */
    public static MethodHandle pthread_mutex_getprioceiling$handle() {
        return pthread_mutex_getprioceiling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutex_getprioceiling(const pthread_mutex_t *restrict __mutex, int *restrict __prioceiling)
     * }
     */
    public static int pthread_mutex_getprioceiling(MemorySegment __mutex, MemorySegment __prioceiling) {
        var mh$ = pthread_mutex_getprioceiling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutex_getprioceiling", __mutex, __prioceiling);
            }
            return (int)mh$.invokeExact(__mutex, __prioceiling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutex_setprioceiling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutex_setprioceiling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutex_setprioceiling(pthread_mutex_t *restrict __mutex, int __prioceiling, int *restrict __old_ceiling)
     * }
     */
    public static FunctionDescriptor pthread_mutex_setprioceiling$descriptor() {
        return pthread_mutex_setprioceiling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutex_setprioceiling(pthread_mutex_t *restrict __mutex, int __prioceiling, int *restrict __old_ceiling)
     * }
     */
    public static MethodHandle pthread_mutex_setprioceiling$handle() {
        return pthread_mutex_setprioceiling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutex_setprioceiling(pthread_mutex_t *restrict __mutex, int __prioceiling, int *restrict __old_ceiling)
     * }
     */
    public static int pthread_mutex_setprioceiling(MemorySegment __mutex, int __prioceiling, MemorySegment __old_ceiling) {
        var mh$ = pthread_mutex_setprioceiling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutex_setprioceiling", __mutex, __prioceiling, __old_ceiling);
            }
            return (int)mh$.invokeExact(__mutex, __prioceiling, __old_ceiling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutex_consistent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutex_consistent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutex_consistent(pthread_mutex_t *__mutex)
     * }
     */
    public static FunctionDescriptor pthread_mutex_consistent$descriptor() {
        return pthread_mutex_consistent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutex_consistent(pthread_mutex_t *__mutex)
     * }
     */
    public static MethodHandle pthread_mutex_consistent$handle() {
        return pthread_mutex_consistent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutex_consistent(pthread_mutex_t *__mutex)
     * }
     */
    public static int pthread_mutex_consistent(MemorySegment __mutex) {
        var mh$ = pthread_mutex_consistent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutex_consistent", __mutex);
            }
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_init(pthread_mutexattr_t *__attr)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_init$descriptor() {
        return pthread_mutexattr_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_init(pthread_mutexattr_t *__attr)
     * }
     */
    public static MethodHandle pthread_mutexattr_init$handle() {
        return pthread_mutexattr_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_init(pthread_mutexattr_t *__attr)
     * }
     */
    public static int pthread_mutexattr_init(MemorySegment __attr) {
        var mh$ = pthread_mutexattr_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_init", __attr);
            }
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_destroy(pthread_mutexattr_t *__attr)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_destroy$descriptor() {
        return pthread_mutexattr_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_destroy(pthread_mutexattr_t *__attr)
     * }
     */
    public static MethodHandle pthread_mutexattr_destroy$handle() {
        return pthread_mutexattr_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_destroy(pthread_mutexattr_t *__attr)
     * }
     */
    public static int pthread_mutexattr_destroy(MemorySegment __attr) {
        var mh$ = pthread_mutexattr_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_destroy", __attr);
            }
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_getpshared {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_getpshared"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_getpshared$descriptor() {
        return pthread_mutexattr_getpshared.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static MethodHandle pthread_mutexattr_getpshared$handle() {
        return pthread_mutexattr_getpshared.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getpshared(const pthread_mutexattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static int pthread_mutexattr_getpshared(MemorySegment __attr, MemorySegment __pshared) {
        var mh$ = pthread_mutexattr_getpshared.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_getpshared", __attr, __pshared);
            }
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_setpshared {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_setpshared"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setpshared(pthread_mutexattr_t *__attr, int __pshared)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_setpshared$descriptor() {
        return pthread_mutexattr_setpshared.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setpshared(pthread_mutexattr_t *__attr, int __pshared)
     * }
     */
    public static MethodHandle pthread_mutexattr_setpshared$handle() {
        return pthread_mutexattr_setpshared.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setpshared(pthread_mutexattr_t *__attr, int __pshared)
     * }
     */
    public static int pthread_mutexattr_setpshared(MemorySegment __attr, int __pshared) {
        var mh$ = pthread_mutexattr_setpshared.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_setpshared", __attr, __pshared);
            }
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_gettype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_gettype"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *restrict __attr, int *restrict __kind)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_gettype$descriptor() {
        return pthread_mutexattr_gettype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *restrict __attr, int *restrict __kind)
     * }
     */
    public static MethodHandle pthread_mutexattr_gettype$handle() {
        return pthread_mutexattr_gettype.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_gettype(const pthread_mutexattr_t *restrict __attr, int *restrict __kind)
     * }
     */
    public static int pthread_mutexattr_gettype(MemorySegment __attr, MemorySegment __kind) {
        var mh$ = pthread_mutexattr_gettype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_gettype", __attr, __kind);
            }
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_settype {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_settype"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_settype(pthread_mutexattr_t *__attr, int __kind)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_settype$descriptor() {
        return pthread_mutexattr_settype.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_settype(pthread_mutexattr_t *__attr, int __kind)
     * }
     */
    public static MethodHandle pthread_mutexattr_settype$handle() {
        return pthread_mutexattr_settype.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_settype(pthread_mutexattr_t *__attr, int __kind)
     * }
     */
    public static int pthread_mutexattr_settype(MemorySegment __attr, int __kind) {
        var mh$ = pthread_mutexattr_settype.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_settype", __attr, __kind);
            }
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_getprotocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_getprotocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *restrict __attr, int *restrict __protocol)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_getprotocol$descriptor() {
        return pthread_mutexattr_getprotocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *restrict __attr, int *restrict __protocol)
     * }
     */
    public static MethodHandle pthread_mutexattr_getprotocol$handle() {
        return pthread_mutexattr_getprotocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getprotocol(const pthread_mutexattr_t *restrict __attr, int *restrict __protocol)
     * }
     */
    public static int pthread_mutexattr_getprotocol(MemorySegment __attr, MemorySegment __protocol) {
        var mh$ = pthread_mutexattr_getprotocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_getprotocol", __attr, __protocol);
            }
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_setprotocol {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_setprotocol"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t *__attr, int __protocol)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_setprotocol$descriptor() {
        return pthread_mutexattr_setprotocol.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t *__attr, int __protocol)
     * }
     */
    public static MethodHandle pthread_mutexattr_setprotocol$handle() {
        return pthread_mutexattr_setprotocol.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setprotocol(pthread_mutexattr_t *__attr, int __protocol)
     * }
     */
    public static int pthread_mutexattr_setprotocol(MemorySegment __attr, int __protocol) {
        var mh$ = pthread_mutexattr_setprotocol.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_setprotocol", __attr, __protocol);
            }
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_getprioceiling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_getprioceiling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *restrict __attr, int *restrict __prioceiling)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_getprioceiling$descriptor() {
        return pthread_mutexattr_getprioceiling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *restrict __attr, int *restrict __prioceiling)
     * }
     */
    public static MethodHandle pthread_mutexattr_getprioceiling$handle() {
        return pthread_mutexattr_getprioceiling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getprioceiling(const pthread_mutexattr_t *restrict __attr, int *restrict __prioceiling)
     * }
     */
    public static int pthread_mutexattr_getprioceiling(MemorySegment __attr, MemorySegment __prioceiling) {
        var mh$ = pthread_mutexattr_getprioceiling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_getprioceiling", __attr, __prioceiling);
            }
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_setprioceiling {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_setprioceiling"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *__attr, int __prioceiling)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_setprioceiling$descriptor() {
        return pthread_mutexattr_setprioceiling.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *__attr, int __prioceiling)
     * }
     */
    public static MethodHandle pthread_mutexattr_setprioceiling$handle() {
        return pthread_mutexattr_setprioceiling.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setprioceiling(pthread_mutexattr_t *__attr, int __prioceiling)
     * }
     */
    public static int pthread_mutexattr_setprioceiling(MemorySegment __attr, int __prioceiling) {
        var mh$ = pthread_mutexattr_setprioceiling.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_setprioceiling", __attr, __prioceiling);
            }
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_getrobust {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_getrobust"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t *__attr, int *__robustness)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_getrobust$descriptor() {
        return pthread_mutexattr_getrobust.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t *__attr, int *__robustness)
     * }
     */
    public static MethodHandle pthread_mutexattr_getrobust$handle() {
        return pthread_mutexattr_getrobust.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_getrobust(const pthread_mutexattr_t *__attr, int *__robustness)
     * }
     */
    public static int pthread_mutexattr_getrobust(MemorySegment __attr, MemorySegment __robustness) {
        var mh$ = pthread_mutexattr_getrobust.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_getrobust", __attr, __robustness);
            }
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_mutexattr_setrobust {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_mutexattr_setrobust"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setrobust(pthread_mutexattr_t *__attr, int __robustness)
     * }
     */
    public static FunctionDescriptor pthread_mutexattr_setrobust$descriptor() {
        return pthread_mutexattr_setrobust.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setrobust(pthread_mutexattr_t *__attr, int __robustness)
     * }
     */
    public static MethodHandle pthread_mutexattr_setrobust$handle() {
        return pthread_mutexattr_setrobust.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_mutexattr_setrobust(pthread_mutexattr_t *__attr, int __robustness)
     * }
     */
    public static int pthread_mutexattr_setrobust(MemorySegment __attr, int __robustness) {
        var mh$ = pthread_mutexattr_setrobust.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_mutexattr_setrobust", __attr, __robustness);
            }
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlock_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlock_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_init(pthread_rwlock_t *restrict __rwlock, const pthread_rwlockattr_t *restrict __attr)
     * }
     */
    public static FunctionDescriptor pthread_rwlock_init$descriptor() {
        return pthread_rwlock_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_init(pthread_rwlock_t *restrict __rwlock, const pthread_rwlockattr_t *restrict __attr)
     * }
     */
    public static MethodHandle pthread_rwlock_init$handle() {
        return pthread_rwlock_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlock_init(pthread_rwlock_t *restrict __rwlock, const pthread_rwlockattr_t *restrict __attr)
     * }
     */
    public static int pthread_rwlock_init(MemorySegment __rwlock, MemorySegment __attr) {
        var mh$ = pthread_rwlock_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlock_init", __rwlock, __attr);
            }
            return (int)mh$.invokeExact(__rwlock, __attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlock_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlock_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_destroy(pthread_rwlock_t *__rwlock)
     * }
     */
    public static FunctionDescriptor pthread_rwlock_destroy$descriptor() {
        return pthread_rwlock_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_destroy(pthread_rwlock_t *__rwlock)
     * }
     */
    public static MethodHandle pthread_rwlock_destroy$handle() {
        return pthread_rwlock_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlock_destroy(pthread_rwlock_t *__rwlock)
     * }
     */
    public static int pthread_rwlock_destroy(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlock_destroy", __rwlock);
            }
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlock_rdlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlock_rdlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_rdlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static FunctionDescriptor pthread_rwlock_rdlock$descriptor() {
        return pthread_rwlock_rdlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_rdlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static MethodHandle pthread_rwlock_rdlock$handle() {
        return pthread_rwlock_rdlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlock_rdlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static int pthread_rwlock_rdlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_rdlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlock_rdlock", __rwlock);
            }
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlock_tryrdlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlock_tryrdlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_tryrdlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static FunctionDescriptor pthread_rwlock_tryrdlock$descriptor() {
        return pthread_rwlock_tryrdlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_tryrdlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static MethodHandle pthread_rwlock_tryrdlock$handle() {
        return pthread_rwlock_tryrdlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlock_tryrdlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static int pthread_rwlock_tryrdlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_tryrdlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlock_tryrdlock", __rwlock);
            }
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlock_timedrdlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlock_timedrdlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict __rwlock, const struct timespec *restrict __abstime)
     * }
     */
    public static FunctionDescriptor pthread_rwlock_timedrdlock$descriptor() {
        return pthread_rwlock_timedrdlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict __rwlock, const struct timespec *restrict __abstime)
     * }
     */
    public static MethodHandle pthread_rwlock_timedrdlock$handle() {
        return pthread_rwlock_timedrdlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlock_timedrdlock(pthread_rwlock_t *restrict __rwlock, const struct timespec *restrict __abstime)
     * }
     */
    public static int pthread_rwlock_timedrdlock(MemorySegment __rwlock, MemorySegment __abstime) {
        var mh$ = pthread_rwlock_timedrdlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlock_timedrdlock", __rwlock, __abstime);
            }
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlock_wrlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlock_wrlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_wrlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static FunctionDescriptor pthread_rwlock_wrlock$descriptor() {
        return pthread_rwlock_wrlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_wrlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static MethodHandle pthread_rwlock_wrlock$handle() {
        return pthread_rwlock_wrlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlock_wrlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static int pthread_rwlock_wrlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_wrlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlock_wrlock", __rwlock);
            }
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlock_trywrlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlock_trywrlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_trywrlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static FunctionDescriptor pthread_rwlock_trywrlock$descriptor() {
        return pthread_rwlock_trywrlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_trywrlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static MethodHandle pthread_rwlock_trywrlock$handle() {
        return pthread_rwlock_trywrlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlock_trywrlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static int pthread_rwlock_trywrlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_trywrlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlock_trywrlock", __rwlock);
            }
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlock_timedwrlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlock_timedwrlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict __rwlock, const struct timespec *restrict __abstime)
     * }
     */
    public static FunctionDescriptor pthread_rwlock_timedwrlock$descriptor() {
        return pthread_rwlock_timedwrlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict __rwlock, const struct timespec *restrict __abstime)
     * }
     */
    public static MethodHandle pthread_rwlock_timedwrlock$handle() {
        return pthread_rwlock_timedwrlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlock_timedwrlock(pthread_rwlock_t *restrict __rwlock, const struct timespec *restrict __abstime)
     * }
     */
    public static int pthread_rwlock_timedwrlock(MemorySegment __rwlock, MemorySegment __abstime) {
        var mh$ = pthread_rwlock_timedwrlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlock_timedwrlock", __rwlock, __abstime);
            }
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlock_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlock_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_unlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static FunctionDescriptor pthread_rwlock_unlock$descriptor() {
        return pthread_rwlock_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlock_unlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static MethodHandle pthread_rwlock_unlock$handle() {
        return pthread_rwlock_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlock_unlock(pthread_rwlock_t *__rwlock)
     * }
     */
    public static int pthread_rwlock_unlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlock_unlock", __rwlock);
            }
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlockattr_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlockattr_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_init(pthread_rwlockattr_t *__attr)
     * }
     */
    public static FunctionDescriptor pthread_rwlockattr_init$descriptor() {
        return pthread_rwlockattr_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_init(pthread_rwlockattr_t *__attr)
     * }
     */
    public static MethodHandle pthread_rwlockattr_init$handle() {
        return pthread_rwlockattr_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_init(pthread_rwlockattr_t *__attr)
     * }
     */
    public static int pthread_rwlockattr_init(MemorySegment __attr) {
        var mh$ = pthread_rwlockattr_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlockattr_init", __attr);
            }
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlockattr_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlockattr_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t *__attr)
     * }
     */
    public static FunctionDescriptor pthread_rwlockattr_destroy$descriptor() {
        return pthread_rwlockattr_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t *__attr)
     * }
     */
    public static MethodHandle pthread_rwlockattr_destroy$handle() {
        return pthread_rwlockattr_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_destroy(pthread_rwlockattr_t *__attr)
     * }
     */
    public static int pthread_rwlockattr_destroy(MemorySegment __attr) {
        var mh$ = pthread_rwlockattr_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlockattr_destroy", __attr);
            }
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlockattr_getpshared {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlockattr_getpshared"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static FunctionDescriptor pthread_rwlockattr_getpshared$descriptor() {
        return pthread_rwlockattr_getpshared.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static MethodHandle pthread_rwlockattr_getpshared$handle() {
        return pthread_rwlockattr_getpshared.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_getpshared(const pthread_rwlockattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static int pthread_rwlockattr_getpshared(MemorySegment __attr, MemorySegment __pshared) {
        var mh$ = pthread_rwlockattr_getpshared.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlockattr_getpshared", __attr, __pshared);
            }
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlockattr_setpshared {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlockattr_setpshared"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *__attr, int __pshared)
     * }
     */
    public static FunctionDescriptor pthread_rwlockattr_setpshared$descriptor() {
        return pthread_rwlockattr_setpshared.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *__attr, int __pshared)
     * }
     */
    public static MethodHandle pthread_rwlockattr_setpshared$handle() {
        return pthread_rwlockattr_setpshared.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_setpshared(pthread_rwlockattr_t *__attr, int __pshared)
     * }
     */
    public static int pthread_rwlockattr_setpshared(MemorySegment __attr, int __pshared) {
        var mh$ = pthread_rwlockattr_setpshared.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlockattr_setpshared", __attr, __pshared);
            }
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlockattr_getkind_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlockattr_getkind_np"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *restrict __attr, int *restrict __pref)
     * }
     */
    public static FunctionDescriptor pthread_rwlockattr_getkind_np$descriptor() {
        return pthread_rwlockattr_getkind_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *restrict __attr, int *restrict __pref)
     * }
     */
    public static MethodHandle pthread_rwlockattr_getkind_np$handle() {
        return pthread_rwlockattr_getkind_np.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_getkind_np(const pthread_rwlockattr_t *restrict __attr, int *restrict __pref)
     * }
     */
    public static int pthread_rwlockattr_getkind_np(MemorySegment __attr, MemorySegment __pref) {
        var mh$ = pthread_rwlockattr_getkind_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlockattr_getkind_np", __attr, __pref);
            }
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_rwlockattr_setkind_np {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_rwlockattr_setkind_np"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *__attr, int __pref)
     * }
     */
    public static FunctionDescriptor pthread_rwlockattr_setkind_np$descriptor() {
        return pthread_rwlockattr_setkind_np.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *__attr, int __pref)
     * }
     */
    public static MethodHandle pthread_rwlockattr_setkind_np$handle() {
        return pthread_rwlockattr_setkind_np.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_rwlockattr_setkind_np(pthread_rwlockattr_t *__attr, int __pref)
     * }
     */
    public static int pthread_rwlockattr_setkind_np(MemorySegment __attr, int __pref) {
        var mh$ = pthread_rwlockattr_setkind_np.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_rwlockattr_setkind_np", __attr, __pref);
            }
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_cond_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_cond_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_cond_init(pthread_cond_t *restrict __cond, const pthread_condattr_t *restrict __cond_attr)
     * }
     */
    public static FunctionDescriptor pthread_cond_init$descriptor() {
        return pthread_cond_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_cond_init(pthread_cond_t *restrict __cond, const pthread_condattr_t *restrict __cond_attr)
     * }
     */
    public static MethodHandle pthread_cond_init$handle() {
        return pthread_cond_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_cond_init(pthread_cond_t *restrict __cond, const pthread_condattr_t *restrict __cond_attr)
     * }
     */
    public static int pthread_cond_init(MemorySegment __cond, MemorySegment __cond_attr) {
        var mh$ = pthread_cond_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_cond_init", __cond, __cond_attr);
            }
            return (int)mh$.invokeExact(__cond, __cond_attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_cond_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_cond_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_cond_destroy(pthread_cond_t *__cond)
     * }
     */
    public static FunctionDescriptor pthread_cond_destroy$descriptor() {
        return pthread_cond_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_cond_destroy(pthread_cond_t *__cond)
     * }
     */
    public static MethodHandle pthread_cond_destroy$handle() {
        return pthread_cond_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_cond_destroy(pthread_cond_t *__cond)
     * }
     */
    public static int pthread_cond_destroy(MemorySegment __cond) {
        var mh$ = pthread_cond_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_cond_destroy", __cond);
            }
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_cond_signal {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_cond_signal"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_cond_signal(pthread_cond_t *__cond)
     * }
     */
    public static FunctionDescriptor pthread_cond_signal$descriptor() {
        return pthread_cond_signal.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_cond_signal(pthread_cond_t *__cond)
     * }
     */
    public static MethodHandle pthread_cond_signal$handle() {
        return pthread_cond_signal.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_cond_signal(pthread_cond_t *__cond)
     * }
     */
    public static int pthread_cond_signal(MemorySegment __cond) {
        var mh$ = pthread_cond_signal.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_cond_signal", __cond);
            }
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_cond_broadcast {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_cond_broadcast"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_cond_broadcast(pthread_cond_t *__cond)
     * }
     */
    public static FunctionDescriptor pthread_cond_broadcast$descriptor() {
        return pthread_cond_broadcast.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_cond_broadcast(pthread_cond_t *__cond)
     * }
     */
    public static MethodHandle pthread_cond_broadcast$handle() {
        return pthread_cond_broadcast.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_cond_broadcast(pthread_cond_t *__cond)
     * }
     */
    public static int pthread_cond_broadcast(MemorySegment __cond) {
        var mh$ = pthread_cond_broadcast.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_cond_broadcast", __cond);
            }
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_cond_wait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_cond_wait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_cond_wait(pthread_cond_t *restrict __cond, pthread_mutex_t *restrict __mutex)
     * }
     */
    public static FunctionDescriptor pthread_cond_wait$descriptor() {
        return pthread_cond_wait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_cond_wait(pthread_cond_t *restrict __cond, pthread_mutex_t *restrict __mutex)
     * }
     */
    public static MethodHandle pthread_cond_wait$handle() {
        return pthread_cond_wait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_cond_wait(pthread_cond_t *restrict __cond, pthread_mutex_t *restrict __mutex)
     * }
     */
    public static int pthread_cond_wait(MemorySegment __cond, MemorySegment __mutex) {
        var mh$ = pthread_cond_wait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_cond_wait", __cond, __mutex);
            }
            return (int)mh$.invokeExact(__cond, __mutex);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_cond_timedwait {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_cond_timedwait"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_cond_timedwait(pthread_cond_t *restrict __cond, pthread_mutex_t *restrict __mutex, const struct timespec *restrict __abstime)
     * }
     */
    public static FunctionDescriptor pthread_cond_timedwait$descriptor() {
        return pthread_cond_timedwait.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_cond_timedwait(pthread_cond_t *restrict __cond, pthread_mutex_t *restrict __mutex, const struct timespec *restrict __abstime)
     * }
     */
    public static MethodHandle pthread_cond_timedwait$handle() {
        return pthread_cond_timedwait.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_cond_timedwait(pthread_cond_t *restrict __cond, pthread_mutex_t *restrict __mutex, const struct timespec *restrict __abstime)
     * }
     */
    public static int pthread_cond_timedwait(MemorySegment __cond, MemorySegment __mutex, MemorySegment __abstime) {
        var mh$ = pthread_cond_timedwait.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_cond_timedwait", __cond, __mutex, __abstime);
            }
            return (int)mh$.invokeExact(__cond, __mutex, __abstime);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_condattr_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_condattr_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_condattr_init(pthread_condattr_t *__attr)
     * }
     */
    public static FunctionDescriptor pthread_condattr_init$descriptor() {
        return pthread_condattr_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_condattr_init(pthread_condattr_t *__attr)
     * }
     */
    public static MethodHandle pthread_condattr_init$handle() {
        return pthread_condattr_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_condattr_init(pthread_condattr_t *__attr)
     * }
     */
    public static int pthread_condattr_init(MemorySegment __attr) {
        var mh$ = pthread_condattr_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_condattr_init", __attr);
            }
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_condattr_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_condattr_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_condattr_destroy(pthread_condattr_t *__attr)
     * }
     */
    public static FunctionDescriptor pthread_condattr_destroy$descriptor() {
        return pthread_condattr_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_condattr_destroy(pthread_condattr_t *__attr)
     * }
     */
    public static MethodHandle pthread_condattr_destroy$handle() {
        return pthread_condattr_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_condattr_destroy(pthread_condattr_t *__attr)
     * }
     */
    public static int pthread_condattr_destroy(MemorySegment __attr) {
        var mh$ = pthread_condattr_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_condattr_destroy", __attr);
            }
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_condattr_getpshared {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_condattr_getpshared"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_condattr_getpshared(const pthread_condattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static FunctionDescriptor pthread_condattr_getpshared$descriptor() {
        return pthread_condattr_getpshared.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_condattr_getpshared(const pthread_condattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static MethodHandle pthread_condattr_getpshared$handle() {
        return pthread_condattr_getpshared.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_condattr_getpshared(const pthread_condattr_t *restrict __attr, int *restrict __pshared)
     * }
     */
    public static int pthread_condattr_getpshared(MemorySegment __attr, MemorySegment __pshared) {
        var mh$ = pthread_condattr_getpshared.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_condattr_getpshared", __attr, __pshared);
            }
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class pthread_condattr_setpshared {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("pthread_condattr_setpshared"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int pthread_condattr_setpshared(pthread_condattr_t *__attr, int __pshared)
     * }
     */
    public static FunctionDescriptor pthread_condattr_setpshared$descriptor() {
        return pthread_condattr_setpshared.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int pthread_condattr_setpshared(pthread_condattr_t *__attr, int __pshared)
     * }
     */
    public static MethodHandle pthread_condattr_setpshared$handle() {
        return pthread_condattr_setpshared.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int pthread_condattr_setpshared(pthread_condattr_t *__attr, int __pshared)
     * }
     */
    public static int pthread_condattr_setpshared(MemorySegment __attr, int __pshared) {
        var mh$ = pthread_condattr_setpshared.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("pthread_condattr_setpshared", __attr, __pshared);
            }
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

