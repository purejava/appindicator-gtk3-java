// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * union _GdkEvent {
 *     enum GdkEventType type;
 *     struct _GdkEventAny any;
 *     struct _GdkEventExpose expose;
 *     struct _GdkEventVisibility visibility;
 *     struct _GdkEventMotion motion;
 *     struct _GdkEventButton button;
 *     struct _GdkEventTouch touch;
 *     struct _GdkEventScroll scroll;
 *     struct _GdkEventKey key;
 *     struct _GdkEventCrossing crossing;
 *     struct _GdkEventFocus focus_change;
 *     struct _GdkEventConfigure configure;
 *     struct _GdkEventProperty property;
 *     struct _GdkEventSelection selection;
 *     struct _GdkEventOwnerChange owner_change;
 *     struct _GdkEventProximity proximity;
 *     struct _GdkEventDND dnd;
 *     struct _GdkEventWindowState window_state;
 *     struct _GdkEventSetting setting;
 *     struct _GdkEventGrabBroken grab_broken;
 *     struct _GdkEventTouchpadSwipe touchpad_swipe;
 *     struct _GdkEventTouchpadPinch touchpad_pinch;
 *     struct _GdkEventPadButton pad_button;
 *     struct _GdkEventPadAxis pad_axis;
 *     struct _GdkEventPadGroupMode pad_group_mode;
 * };
 * }
 */
public class _GdkEvent {

    public static MemoryLayout $LAYOUT() {
        return constants$1803.const$4;
    }
    public static VarHandle type$VH() {
        return constants$1803.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GdkEventType type;
     * }
     */
    public static int type$get(MemorySegment seg) {
        return (int)constants$1803.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GdkEventType type;
     * }
     */
    public static void type$set(MemorySegment seg, int x) {
        constants$1803.const$5.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)constants$1803.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        constants$1803.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment any$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment expose$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment visibility$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment motion$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    public static MemorySegment button$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    public static MemorySegment touch$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment scroll$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment key$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment crossing$slice(MemorySegment seg) {
        return seg.asSlice(0, 88);
    }
    public static MemorySegment focus_change$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment configure$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment property$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment selection$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static MemorySegment owner_change$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment proximity$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static MemorySegment dnd$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment window_state$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static MemorySegment setting$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static MemorySegment grab_broken$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment touchpad_swipe$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    public static MemorySegment touchpad_pinch$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment pad_button$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment pad_axis$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment pad_group_mode$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


