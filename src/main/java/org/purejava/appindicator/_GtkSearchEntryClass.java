// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkSearchEntryClass {
 *     struct _GtkEntryClass parent_class;
 *     void (*search_changed)(struct _GtkSearchEntry*);
 *     void (*next_match)(struct _GtkSearchEntry*);
 *     void (*previous_match)(struct _GtkSearchEntry*);
 *     void (*stop_search)(struct _GtkSearchEntry*);
 * };
 * }
 */
public class _GtkSearchEntryClass {

    public static MemoryLayout $LAYOUT() {
        return constants$3072.const$3;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 976);
    }
    /**
     * {@snippet :
 * void (*search_changed)(struct _GtkSearchEntry*);
     * }
     */
    public interface search_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(search_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3072.const$4, fi, constants$13.const$1, scope);
        }
        static search_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle search_changed$VH() {
        return constants$3072.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*search_changed)(struct _GtkSearchEntry*);
     * }
     */
    public static MemorySegment search_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3072.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*search_changed)(struct _GtkSearchEntry*);
     * }
     */
    public static void search_changed$set(MemorySegment seg, MemorySegment x) {
        constants$3072.const$5.set(seg, x);
    }
    public static MemorySegment search_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3072.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void search_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3072.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static search_changed search_changed(MemorySegment segment, Arena scope) {
        return search_changed.ofAddress(search_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*next_match)(struct _GtkSearchEntry*);
     * }
     */
    public interface next_match {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(next_match fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3073.const$0, fi, constants$13.const$1, scope);
        }
        static next_match ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle next_match$VH() {
        return constants$3073.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*next_match)(struct _GtkSearchEntry*);
     * }
     */
    public static MemorySegment next_match$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*next_match)(struct _GtkSearchEntry*);
     * }
     */
    public static void next_match$set(MemorySegment seg, MemorySegment x) {
        constants$3073.const$1.set(seg, x);
    }
    public static MemorySegment next_match$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void next_match$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3073.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static next_match next_match(MemorySegment segment, Arena scope) {
        return next_match.ofAddress(next_match$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*previous_match)(struct _GtkSearchEntry*);
     * }
     */
    public interface previous_match {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(previous_match fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3073.const$2, fi, constants$13.const$1, scope);
        }
        static previous_match ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle previous_match$VH() {
        return constants$3073.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*previous_match)(struct _GtkSearchEntry*);
     * }
     */
    public static MemorySegment previous_match$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*previous_match)(struct _GtkSearchEntry*);
     * }
     */
    public static void previous_match$set(MemorySegment seg, MemorySegment x) {
        constants$3073.const$3.set(seg, x);
    }
    public static MemorySegment previous_match$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void previous_match$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3073.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static previous_match previous_match(MemorySegment segment, Arena scope) {
        return previous_match.ofAddress(previous_match$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*stop_search)(struct _GtkSearchEntry*);
     * }
     */
    public interface stop_search {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(stop_search fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3073.const$4, fi, constants$13.const$1, scope);
        }
        static stop_search ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle stop_search$VH() {
        return constants$3073.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*stop_search)(struct _GtkSearchEntry*);
     * }
     */
    public static MemorySegment stop_search$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*stop_search)(struct _GtkSearchEntry*);
     * }
     */
    public static void stop_search$set(MemorySegment seg, MemorySegment x) {
        constants$3073.const$5.set(seg, x);
    }
    public static MemorySegment stop_search$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3073.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void stop_search$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3073.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static stop_search stop_search(MemorySegment segment, Arena scope) {
        return stop_search.ofAddress(stop_search$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


