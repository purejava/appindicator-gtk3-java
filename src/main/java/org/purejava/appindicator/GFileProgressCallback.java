// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * void (*GFileProgressCallback)(long current_num_bytes,long total_num_bytes,void* data);
 * }
 */
public interface GFileProgressCallback {

    void apply(long current_num_bytes, long total_num_bytes, java.lang.foreign.MemorySegment data);
    static MemorySegment allocate(GFileProgressCallback fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$696.const$0, fi, constants$564.const$0, scope);
    }
    static GFileProgressCallback ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (long _current_num_bytes, long _total_num_bytes, java.lang.foreign.MemorySegment _data) -> {
            try {
                constants$696.const$1.invokeExact(symbol, _current_num_bytes, _total_num_bytes, _data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


