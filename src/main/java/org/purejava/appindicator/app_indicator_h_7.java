// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

public class app_indicator_h_7 extends app_indicator_h_8 {

    app_indicator_h_7() {
        // Should not be called directly
    }
    private static final int GTK_EVENT_SEQUENCE_DENIED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_EVENT_SEQUENCE_DENIED = 2
     * }
     */
    public static int GTK_EVENT_SEQUENCE_DENIED() {
        return GTK_EVENT_SEQUENCE_DENIED;
    }
    private static final int GTK_PAN_DIRECTION_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAN_DIRECTION_LEFT = 0
     * }
     */
    public static int GTK_PAN_DIRECTION_LEFT() {
        return GTK_PAN_DIRECTION_LEFT;
    }
    private static final int GTK_PAN_DIRECTION_RIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAN_DIRECTION_RIGHT = 1
     * }
     */
    public static int GTK_PAN_DIRECTION_RIGHT() {
        return GTK_PAN_DIRECTION_RIGHT;
    }
    private static final int GTK_PAN_DIRECTION_UP = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAN_DIRECTION_UP = 2
     * }
     */
    public static int GTK_PAN_DIRECTION_UP() {
        return GTK_PAN_DIRECTION_UP;
    }
    private static final int GTK_PAN_DIRECTION_DOWN = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_PAN_DIRECTION_DOWN = 3
     * }
     */
    public static int GTK_PAN_DIRECTION_DOWN() {
        return GTK_PAN_DIRECTION_DOWN;
    }
    private static final int GTK_POPOVER_CONSTRAINT_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_POPOVER_CONSTRAINT_NONE = 0
     * }
     */
    public static int GTK_POPOVER_CONSTRAINT_NONE() {
        return GTK_POPOVER_CONSTRAINT_NONE;
    }
    private static final int GTK_POPOVER_CONSTRAINT_WINDOW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_POPOVER_CONSTRAINT_WINDOW = 1
     * }
     */
    public static int GTK_POPOVER_CONSTRAINT_WINDOW() {
        return GTK_POPOVER_CONSTRAINT_WINDOW;
    }
    private static final int GTK_ACCEL_VISIBLE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ACCEL_VISIBLE = 1
     * }
     */
    public static int GTK_ACCEL_VISIBLE() {
        return GTK_ACCEL_VISIBLE;
    }
    private static final int GTK_ACCEL_LOCKED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ACCEL_LOCKED = 2
     * }
     */
    public static int GTK_ACCEL_LOCKED() {
        return GTK_ACCEL_LOCKED;
    }
    private static final int GTK_ACCEL_MASK = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_ACCEL_MASK = 7
     * }
     */
    public static int GTK_ACCEL_MASK() {
        return GTK_ACCEL_MASK;
    }

    private static class gtk_accel_group_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_accel_group_get_type()
     * }
     */
    public static FunctionDescriptor gtk_accel_group_get_type$descriptor() {
        return gtk_accel_group_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_accel_group_get_type()
     * }
     */
    public static MethodHandle gtk_accel_group_get_type$handle() {
        return gtk_accel_group_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_accel_group_get_type()
     * }
     */
    public static long gtk_accel_group_get_type() {
        var mh$ = gtk_accel_group_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_accel_group_new()
     * }
     */
    public static FunctionDescriptor gtk_accel_group_new$descriptor() {
        return gtk_accel_group_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_accel_group_new()
     * }
     */
    public static MethodHandle gtk_accel_group_new$handle() {
        return gtk_accel_group_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_accel_group_new()
     * }
     */
    public static MemorySegment gtk_accel_group_new() {
        var mh$ = gtk_accel_group_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_get_is_locked {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_get_is_locked"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_get_is_locked(GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_get_is_locked$descriptor() {
        return gtk_accel_group_get_is_locked.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_get_is_locked(GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_accel_group_get_is_locked$handle() {
        return gtk_accel_group_get_is_locked.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_get_is_locked(GtkAccelGroup *accel_group)
     * }
     */
    public static int gtk_accel_group_get_is_locked(MemorySegment accel_group) {
        var mh$ = gtk_accel_group_get_is_locked.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_get_is_locked", accel_group);
            }
            return (int)mh$.invokeExact(accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_get_modifier_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_get_modifier_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkModifierType gtk_accel_group_get_modifier_mask(GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_get_modifier_mask$descriptor() {
        return gtk_accel_group_get_modifier_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkModifierType gtk_accel_group_get_modifier_mask(GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_accel_group_get_modifier_mask$handle() {
        return gtk_accel_group_get_modifier_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkModifierType gtk_accel_group_get_modifier_mask(GtkAccelGroup *accel_group)
     * }
     */
    public static int gtk_accel_group_get_modifier_mask(MemorySegment accel_group) {
        var mh$ = gtk_accel_group_get_modifier_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_get_modifier_mask", accel_group);
            }
            return (int)mh$.invokeExact(accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_lock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_lock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_group_lock(GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_lock$descriptor() {
        return gtk_accel_group_lock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_group_lock(GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_accel_group_lock$handle() {
        return gtk_accel_group_lock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_group_lock(GtkAccelGroup *accel_group)
     * }
     */
    public static void gtk_accel_group_lock(MemorySegment accel_group) {
        var mh$ = gtk_accel_group_lock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_lock", accel_group);
            }
            mh$.invokeExact(accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_unlock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_unlock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_group_unlock(GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_unlock$descriptor() {
        return gtk_accel_group_unlock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_group_unlock(GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_accel_group_unlock$handle() {
        return gtk_accel_group_unlock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_group_unlock(GtkAccelGroup *accel_group)
     * }
     */
    public static void gtk_accel_group_unlock(MemorySegment accel_group) {
        var mh$ = gtk_accel_group_unlock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_unlock", accel_group);
            }
            mh$.invokeExact(accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_connect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_connect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_group_connect(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags, GClosure *closure)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_connect$descriptor() {
        return gtk_accel_group_connect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_group_connect(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags, GClosure *closure)
     * }
     */
    public static MethodHandle gtk_accel_group_connect$handle() {
        return gtk_accel_group_connect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_group_connect(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags, GClosure *closure)
     * }
     */
    public static void gtk_accel_group_connect(MemorySegment accel_group, int accel_key, int accel_mods, int accel_flags, MemorySegment closure) {
        var mh$ = gtk_accel_group_connect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_connect", accel_group, accel_key, accel_mods, accel_flags, closure);
            }
            mh$.invokeExact(accel_group, accel_key, accel_mods, accel_flags, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_connect_by_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_connect_by_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accel_group_connect_by_path(GtkAccelGroup *accel_group, const gchar *accel_path, GClosure *closure)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_connect_by_path$descriptor() {
        return gtk_accel_group_connect_by_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accel_group_connect_by_path(GtkAccelGroup *accel_group, const gchar *accel_path, GClosure *closure)
     * }
     */
    public static MethodHandle gtk_accel_group_connect_by_path$handle() {
        return gtk_accel_group_connect_by_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accel_group_connect_by_path(GtkAccelGroup *accel_group, const gchar *accel_path, GClosure *closure)
     * }
     */
    public static void gtk_accel_group_connect_by_path(MemorySegment accel_group, MemorySegment accel_path, MemorySegment closure) {
        var mh$ = gtk_accel_group_connect_by_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_connect_by_path", accel_group, accel_path, closure);
            }
            mh$.invokeExact(accel_group, accel_path, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_disconnect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_disconnect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_disconnect(GtkAccelGroup *accel_group, GClosure *closure)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_disconnect$descriptor() {
        return gtk_accel_group_disconnect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_disconnect(GtkAccelGroup *accel_group, GClosure *closure)
     * }
     */
    public static MethodHandle gtk_accel_group_disconnect$handle() {
        return gtk_accel_group_disconnect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_disconnect(GtkAccelGroup *accel_group, GClosure *closure)
     * }
     */
    public static int gtk_accel_group_disconnect(MemorySegment accel_group, MemorySegment closure) {
        var mh$ = gtk_accel_group_disconnect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_disconnect", accel_group, closure);
            }
            return (int)mh$.invokeExact(accel_group, closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_disconnect_key {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_disconnect_key"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_disconnect_key(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_disconnect_key$descriptor() {
        return gtk_accel_group_disconnect_key.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_disconnect_key(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static MethodHandle gtk_accel_group_disconnect_key$handle() {
        return gtk_accel_group_disconnect_key.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_disconnect_key(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static int gtk_accel_group_disconnect_key(MemorySegment accel_group, int accel_key, int accel_mods) {
        var mh$ = gtk_accel_group_disconnect_key.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_disconnect_key", accel_group, accel_key, accel_mods);
            }
            return (int)mh$.invokeExact(accel_group, accel_key, accel_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_activate(GtkAccelGroup *accel_group, GQuark accel_quark, GObject *acceleratable, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_activate$descriptor() {
        return gtk_accel_group_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_activate(GtkAccelGroup *accel_group, GQuark accel_quark, GObject *acceleratable, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static MethodHandle gtk_accel_group_activate$handle() {
        return gtk_accel_group_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_accel_group_activate(GtkAccelGroup *accel_group, GQuark accel_quark, GObject *acceleratable, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static int gtk_accel_group_activate(MemorySegment accel_group, int accel_quark, MemorySegment acceleratable, int accel_key, int accel_mods) {
        var mh$ = gtk_accel_group_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_activate", accel_group, accel_quark, acceleratable, accel_key, accel_mods);
            }
            return (int)mh$.invokeExact(accel_group, accel_quark, acceleratable, accel_key, accel_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_accel_group_attach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_accel_group_attach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_accel_group_attach(GtkAccelGroup *accel_group, GObject *object)
     * }
     */
    public static FunctionDescriptor _gtk_accel_group_attach$descriptor() {
        return _gtk_accel_group_attach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_accel_group_attach(GtkAccelGroup *accel_group, GObject *object)
     * }
     */
    public static MethodHandle _gtk_accel_group_attach$handle() {
        return _gtk_accel_group_attach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_accel_group_attach(GtkAccelGroup *accel_group, GObject *object)
     * }
     */
    public static void _gtk_accel_group_attach(MemorySegment accel_group, MemorySegment object) {
        var mh$ = _gtk_accel_group_attach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_accel_group_attach", accel_group, object);
            }
            mh$.invokeExact(accel_group, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class _gtk_accel_group_detach {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("_gtk_accel_group_detach"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * void _gtk_accel_group_detach(GtkAccelGroup *accel_group, GObject *object)
     * }
     */
    public static FunctionDescriptor _gtk_accel_group_detach$descriptor() {
        return _gtk_accel_group_detach.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * void _gtk_accel_group_detach(GtkAccelGroup *accel_group, GObject *object)
     * }
     */
    public static MethodHandle _gtk_accel_group_detach$handle() {
        return _gtk_accel_group_detach.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * void _gtk_accel_group_detach(GtkAccelGroup *accel_group, GObject *object)
     * }
     */
    public static void _gtk_accel_group_detach(MemorySegment accel_group, MemorySegment object) {
        var mh$ = _gtk_accel_group_detach.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("_gtk_accel_group_detach", accel_group, object);
            }
            mh$.invokeExact(accel_group, object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_groups_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_groups_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_groups_activate(GObject *object, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static FunctionDescriptor gtk_accel_groups_activate$descriptor() {
        return gtk_accel_groups_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_accel_groups_activate(GObject *object, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static MethodHandle gtk_accel_groups_activate$handle() {
        return gtk_accel_groups_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_accel_groups_activate(GObject *object, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static int gtk_accel_groups_activate(MemorySegment object, int accel_key, int accel_mods) {
        var mh$ = gtk_accel_groups_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_groups_activate", object, accel_key, accel_mods);
            }
            return (int)mh$.invokeExact(object, accel_key, accel_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_groups_from_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_groups_from_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *gtk_accel_groups_from_object(GObject *object)
     * }
     */
    public static FunctionDescriptor gtk_accel_groups_from_object$descriptor() {
        return gtk_accel_groups_from_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *gtk_accel_groups_from_object(GObject *object)
     * }
     */
    public static MethodHandle gtk_accel_groups_from_object$handle() {
        return gtk_accel_groups_from_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *gtk_accel_groups_from_object(GObject *object)
     * }
     */
    public static MemorySegment gtk_accel_groups_from_object(MemorySegment object) {
        var mh$ = gtk_accel_groups_from_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_groups_from_object", object);
            }
            return (MemorySegment)mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_find {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_find"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAccelKey *gtk_accel_group_find(GtkAccelGroup *accel_group, GtkAccelGroupFindFunc find_func, gpointer data)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_find$descriptor() {
        return gtk_accel_group_find.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAccelKey *gtk_accel_group_find(GtkAccelGroup *accel_group, GtkAccelGroupFindFunc find_func, gpointer data)
     * }
     */
    public static MethodHandle gtk_accel_group_find$handle() {
        return gtk_accel_group_find.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAccelKey *gtk_accel_group_find(GtkAccelGroup *accel_group, GtkAccelGroupFindFunc find_func, gpointer data)
     * }
     */
    public static MemorySegment gtk_accel_group_find(MemorySegment accel_group, MemorySegment find_func, MemorySegment data) {
        var mh$ = gtk_accel_group_find.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_find", accel_group, find_func, data);
            }
            return (MemorySegment)mh$.invokeExact(accel_group, find_func, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_from_accel_closure {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_from_accel_closure"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_accel_group_from_accel_closure(GClosure *closure)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_from_accel_closure$descriptor() {
        return gtk_accel_group_from_accel_closure.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_accel_group_from_accel_closure(GClosure *closure)
     * }
     */
    public static MethodHandle gtk_accel_group_from_accel_closure$handle() {
        return gtk_accel_group_from_accel_closure.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAccelGroup *gtk_accel_group_from_accel_closure(GClosure *closure)
     * }
     */
    public static MemorySegment gtk_accel_group_from_accel_closure(MemorySegment closure) {
        var mh$ = gtk_accel_group_from_accel_closure.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_from_accel_closure", closure);
            }
            return (MemorySegment)mh$.invokeExact(closure);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accelerator_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accelerator_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_accelerator_valid(guint keyval, GdkModifierType modifiers)
     * }
     */
    public static FunctionDescriptor gtk_accelerator_valid$descriptor() {
        return gtk_accelerator_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_accelerator_valid(guint keyval, GdkModifierType modifiers)
     * }
     */
    public static MethodHandle gtk_accelerator_valid$handle() {
        return gtk_accelerator_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_accelerator_valid(guint keyval, GdkModifierType modifiers)
     * }
     */
    public static int gtk_accelerator_valid(int keyval, int modifiers) {
        var mh$ = gtk_accelerator_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accelerator_valid", keyval, modifiers);
            }
            return (int)mh$.invokeExact(keyval, modifiers);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accelerator_parse {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accelerator_parse"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accelerator_parse(const gchar *accelerator, guint *accelerator_key, GdkModifierType *accelerator_mods)
     * }
     */
    public static FunctionDescriptor gtk_accelerator_parse$descriptor() {
        return gtk_accelerator_parse.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accelerator_parse(const gchar *accelerator, guint *accelerator_key, GdkModifierType *accelerator_mods)
     * }
     */
    public static MethodHandle gtk_accelerator_parse$handle() {
        return gtk_accelerator_parse.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accelerator_parse(const gchar *accelerator, guint *accelerator_key, GdkModifierType *accelerator_mods)
     * }
     */
    public static void gtk_accelerator_parse(MemorySegment accelerator, MemorySegment accelerator_key, MemorySegment accelerator_mods) {
        var mh$ = gtk_accelerator_parse.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accelerator_parse", accelerator, accelerator_key, accelerator_mods);
            }
            mh$.invokeExact(accelerator, accelerator_key, accelerator_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accelerator_parse_with_keycode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accelerator_parse_with_keycode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accelerator_parse_with_keycode(const gchar *accelerator, guint *accelerator_key, guint **accelerator_codes, GdkModifierType *accelerator_mods)
     * }
     */
    public static FunctionDescriptor gtk_accelerator_parse_with_keycode$descriptor() {
        return gtk_accelerator_parse_with_keycode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accelerator_parse_with_keycode(const gchar *accelerator, guint *accelerator_key, guint **accelerator_codes, GdkModifierType *accelerator_mods)
     * }
     */
    public static MethodHandle gtk_accelerator_parse_with_keycode$handle() {
        return gtk_accelerator_parse_with_keycode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accelerator_parse_with_keycode(const gchar *accelerator, guint *accelerator_key, guint **accelerator_codes, GdkModifierType *accelerator_mods)
     * }
     */
    public static void gtk_accelerator_parse_with_keycode(MemorySegment accelerator, MemorySegment accelerator_key, MemorySegment accelerator_codes, MemorySegment accelerator_mods) {
        var mh$ = gtk_accelerator_parse_with_keycode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accelerator_parse_with_keycode", accelerator, accelerator_key, accelerator_codes, accelerator_mods);
            }
            mh$.invokeExact(accelerator, accelerator_key, accelerator_codes, accelerator_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accelerator_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accelerator_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_name(guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static FunctionDescriptor gtk_accelerator_name$descriptor() {
        return gtk_accelerator_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_name(guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static MethodHandle gtk_accelerator_name$handle() {
        return gtk_accelerator_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_name(guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static MemorySegment gtk_accelerator_name(int accelerator_key, int accelerator_mods) {
        var mh$ = gtk_accelerator_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accelerator_name", accelerator_key, accelerator_mods);
            }
            return (MemorySegment)mh$.invokeExact(accelerator_key, accelerator_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accelerator_name_with_keycode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accelerator_name_with_keycode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_name_with_keycode(GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods)
     * }
     */
    public static FunctionDescriptor gtk_accelerator_name_with_keycode$descriptor() {
        return gtk_accelerator_name_with_keycode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_name_with_keycode(GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods)
     * }
     */
    public static MethodHandle gtk_accelerator_name_with_keycode$handle() {
        return gtk_accelerator_name_with_keycode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_name_with_keycode(GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods)
     * }
     */
    public static MemorySegment gtk_accelerator_name_with_keycode(MemorySegment display, int accelerator_key, int keycode, int accelerator_mods) {
        var mh$ = gtk_accelerator_name_with_keycode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accelerator_name_with_keycode", display, accelerator_key, keycode, accelerator_mods);
            }
            return (MemorySegment)mh$.invokeExact(display, accelerator_key, keycode, accelerator_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accelerator_get_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accelerator_get_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_get_label(guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static FunctionDescriptor gtk_accelerator_get_label$descriptor() {
        return gtk_accelerator_get_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_get_label(guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static MethodHandle gtk_accelerator_get_label$handle() {
        return gtk_accelerator_get_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_get_label(guint accelerator_key, GdkModifierType accelerator_mods)
     * }
     */
    public static MemorySegment gtk_accelerator_get_label(int accelerator_key, int accelerator_mods) {
        var mh$ = gtk_accelerator_get_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accelerator_get_label", accelerator_key, accelerator_mods);
            }
            return (MemorySegment)mh$.invokeExact(accelerator_key, accelerator_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accelerator_get_label_with_keycode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accelerator_get_label_with_keycode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_get_label_with_keycode(GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods)
     * }
     */
    public static FunctionDescriptor gtk_accelerator_get_label_with_keycode$descriptor() {
        return gtk_accelerator_get_label_with_keycode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_get_label_with_keycode(GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods)
     * }
     */
    public static MethodHandle gtk_accelerator_get_label_with_keycode$handle() {
        return gtk_accelerator_get_label_with_keycode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_accelerator_get_label_with_keycode(GdkDisplay *display, guint accelerator_key, guint keycode, GdkModifierType accelerator_mods)
     * }
     */
    public static MemorySegment gtk_accelerator_get_label_with_keycode(MemorySegment display, int accelerator_key, int keycode, int accelerator_mods) {
        var mh$ = gtk_accelerator_get_label_with_keycode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accelerator_get_label_with_keycode", display, accelerator_key, keycode, accelerator_mods);
            }
            return (MemorySegment)mh$.invokeExact(display, accelerator_key, keycode, accelerator_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accelerator_set_default_mod_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accelerator_set_default_mod_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_accelerator_set_default_mod_mask(GdkModifierType default_mod_mask)
     * }
     */
    public static FunctionDescriptor gtk_accelerator_set_default_mod_mask$descriptor() {
        return gtk_accelerator_set_default_mod_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_accelerator_set_default_mod_mask(GdkModifierType default_mod_mask)
     * }
     */
    public static MethodHandle gtk_accelerator_set_default_mod_mask$handle() {
        return gtk_accelerator_set_default_mod_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_accelerator_set_default_mod_mask(GdkModifierType default_mod_mask)
     * }
     */
    public static void gtk_accelerator_set_default_mod_mask(int default_mod_mask) {
        var mh$ = gtk_accelerator_set_default_mod_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accelerator_set_default_mod_mask", default_mod_mask);
            }
            mh$.invokeExact(default_mod_mask);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accelerator_get_default_mod_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accelerator_get_default_mod_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkModifierType gtk_accelerator_get_default_mod_mask()
     * }
     */
    public static FunctionDescriptor gtk_accelerator_get_default_mod_mask$descriptor() {
        return gtk_accelerator_get_default_mod_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkModifierType gtk_accelerator_get_default_mod_mask()
     * }
     */
    public static MethodHandle gtk_accelerator_get_default_mod_mask$handle() {
        return gtk_accelerator_get_default_mod_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkModifierType gtk_accelerator_get_default_mod_mask()
     * }
     */
    public static int gtk_accelerator_get_default_mod_mask() {
        var mh$ = gtk_accelerator_get_default_mod_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accelerator_get_default_mod_mask");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_accel_group_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_accel_group_query"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAccelGroupEntry *gtk_accel_group_query(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, guint *n_entries)
     * }
     */
    public static FunctionDescriptor gtk_accel_group_query$descriptor() {
        return gtk_accel_group_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAccelGroupEntry *gtk_accel_group_query(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, guint *n_entries)
     * }
     */
    public static MethodHandle gtk_accel_group_query$handle() {
        return gtk_accel_group_query.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAccelGroupEntry *gtk_accel_group_query(GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, guint *n_entries)
     * }
     */
    public static MemorySegment gtk_accel_group_query(MemorySegment accel_group, int accel_key, int accel_mods, MemorySegment n_entries) {
        var mh$ = gtk_accel_group_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_accel_group_query", accel_group, accel_key, accel_mods, n_entries);
            }
            return (MemorySegment)mh$.invokeExact(accel_group, accel_key, accel_mods, n_entries);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkAccelGroup *GtkAccelGroup_autoptr
     * }
     */
    public static final AddressLayout GtkAccelGroup_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkAccelGroup_listautoptr
     * }
     */
    public static final AddressLayout GtkAccelGroup_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkAccelGroup_slistautoptr
     * }
     */
    public static final AddressLayout GtkAccelGroup_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkAccelGroup_queueautoptr
     * }
     */
    public static final AddressLayout GtkAccelGroup_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_border_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_border_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_border_get_type()
     * }
     */
    public static FunctionDescriptor gtk_border_get_type$descriptor() {
        return gtk_border_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_border_get_type()
     * }
     */
    public static MethodHandle gtk_border_get_type$handle() {
        return gtk_border_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_border_get_type()
     * }
     */
    public static long gtk_border_get_type() {
        var mh$ = gtk_border_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_border_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_border_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_border_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBorder *gtk_border_new()
     * }
     */
    public static FunctionDescriptor gtk_border_new$descriptor() {
        return gtk_border_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBorder *gtk_border_new()
     * }
     */
    public static MethodHandle gtk_border_new$handle() {
        return gtk_border_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBorder *gtk_border_new()
     * }
     */
    public static MemorySegment gtk_border_new() {
        var mh$ = gtk_border_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_border_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_border_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_border_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkBorder *gtk_border_copy(const GtkBorder *border_)
     * }
     */
    public static FunctionDescriptor gtk_border_copy$descriptor() {
        return gtk_border_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkBorder *gtk_border_copy(const GtkBorder *border_)
     * }
     */
    public static MethodHandle gtk_border_copy$handle() {
        return gtk_border_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkBorder *gtk_border_copy(const GtkBorder *border_)
     * }
     */
    public static MemorySegment gtk_border_copy(MemorySegment border_) {
        var mh$ = gtk_border_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_border_copy", border_);
            }
            return (MemorySegment)mh$.invokeExact(border_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_border_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_border_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_border_free(GtkBorder *border_)
     * }
     */
    public static FunctionDescriptor gtk_border_free$descriptor() {
        return gtk_border_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_border_free(GtkBorder *border_)
     * }
     */
    public static MethodHandle gtk_border_free$handle() {
        return gtk_border_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_border_free(GtkBorder *border_)
     * }
     */
    public static void gtk_border_free(MemorySegment border_) {
        var mh$ = gtk_border_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_border_free", border_);
            }
            mh$.invokeExact(border_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkBorder *GtkBorder_autoptr
     * }
     */
    public static final AddressLayout GtkBorder_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkBorder_listautoptr
     * }
     */
    public static final AddressLayout GtkBorder_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkBorder_slistautoptr
     * }
     */
    public static final AddressLayout GtkBorder_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkBorder_queueautoptr
     * }
     */
    public static final AddressLayout GtkBorder_queueautoptr = app_indicator_h.C_POINTER;

    private static class atk_get_major_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_major_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint atk_get_major_version()
     * }
     */
    public static FunctionDescriptor atk_get_major_version$descriptor() {
        return atk_get_major_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint atk_get_major_version()
     * }
     */
    public static MethodHandle atk_get_major_version$handle() {
        return atk_get_major_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint atk_get_major_version()
     * }
     */
    public static int atk_get_major_version() {
        var mh$ = atk_get_major_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_major_version");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_get_minor_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_minor_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint atk_get_minor_version()
     * }
     */
    public static FunctionDescriptor atk_get_minor_version$descriptor() {
        return atk_get_minor_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint atk_get_minor_version()
     * }
     */
    public static MethodHandle atk_get_minor_version$handle() {
        return atk_get_minor_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint atk_get_minor_version()
     * }
     */
    public static int atk_get_minor_version() {
        var mh$ = atk_get_minor_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_minor_version");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_get_micro_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_micro_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint atk_get_micro_version()
     * }
     */
    public static FunctionDescriptor atk_get_micro_version$descriptor() {
        return atk_get_micro_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint atk_get_micro_version()
     * }
     */
    public static MethodHandle atk_get_micro_version$handle() {
        return atk_get_micro_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint atk_get_micro_version()
     * }
     */
    public static int atk_get_micro_version() {
        var mh$ = atk_get_micro_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_micro_version");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_get_binary_age {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_binary_age"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint atk_get_binary_age()
     * }
     */
    public static FunctionDescriptor atk_get_binary_age$descriptor() {
        return atk_get_binary_age.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint atk_get_binary_age()
     * }
     */
    public static MethodHandle atk_get_binary_age$handle() {
        return atk_get_binary_age.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint atk_get_binary_age()
     * }
     */
    public static int atk_get_binary_age() {
        var mh$ = atk_get_binary_age.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_binary_age");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_get_interface_age {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_interface_age"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint atk_get_interface_age()
     * }
     */
    public static FunctionDescriptor atk_get_interface_age$descriptor() {
        return atk_get_interface_age.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint atk_get_interface_age()
     * }
     */
    public static MethodHandle atk_get_interface_age$handle() {
        return atk_get_interface_age.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint atk_get_interface_age()
     * }
     */
    public static int atk_get_interface_age() {
        var mh$ = atk_get_interface_age.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_interface_age");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_scroll_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_scroll_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_scroll_type_get_type()
     * }
     */
    public static FunctionDescriptor atk_scroll_type_get_type$descriptor() {
        return atk_scroll_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_scroll_type_get_type()
     * }
     */
    public static MethodHandle atk_scroll_type_get_type$handle() {
        return atk_scroll_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_scroll_type_get_type()
     * }
     */
    public static long atk_scroll_type_get_type() {
        var mh$ = atk_scroll_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_scroll_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_state_flags_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_state_flags_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_hyperlink_state_flags_get_type()
     * }
     */
    public static FunctionDescriptor atk_hyperlink_state_flags_get_type$descriptor() {
        return atk_hyperlink_state_flags_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_hyperlink_state_flags_get_type()
     * }
     */
    public static MethodHandle atk_hyperlink_state_flags_get_type$handle() {
        return atk_hyperlink_state_flags_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_hyperlink_state_flags_get_type()
     * }
     */
    public static long atk_hyperlink_state_flags_get_type() {
        var mh$ = atk_hyperlink_state_flags_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_state_flags_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_role_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_role_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_role_get_type()
     * }
     */
    public static FunctionDescriptor atk_role_get_type$descriptor() {
        return atk_role_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_role_get_type()
     * }
     */
    public static MethodHandle atk_role_get_type$handle() {
        return atk_role_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_role_get_type()
     * }
     */
    public static long atk_role_get_type() {
        var mh$ = atk_role_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_role_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_layer_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_layer_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_layer_get_type()
     * }
     */
    public static FunctionDescriptor atk_layer_get_type$descriptor() {
        return atk_layer_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_layer_get_type()
     * }
     */
    public static MethodHandle atk_layer_get_type$handle() {
        return atk_layer_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_layer_get_type()
     * }
     */
    public static long atk_layer_get_type() {
        var mh$ = atk_layer_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_layer_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_live_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_live_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_live_get_type()
     * }
     */
    public static FunctionDescriptor atk_live_get_type$descriptor() {
        return atk_live_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_live_get_type()
     * }
     */
    public static MethodHandle atk_live_get_type$handle() {
        return atk_live_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_live_get_type()
     * }
     */
    public static long atk_live_get_type() {
        var mh$ = atk_live_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_live_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_relation_type_get_type()
     * }
     */
    public static FunctionDescriptor atk_relation_type_get_type$descriptor() {
        return atk_relation_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_relation_type_get_type()
     * }
     */
    public static MethodHandle atk_relation_type_get_type$handle() {
        return atk_relation_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_relation_type_get_type()
     * }
     */
    public static long atk_relation_type_get_type() {
        var mh$ = atk_relation_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_state_type_get_type()
     * }
     */
    public static FunctionDescriptor atk_state_type_get_type$descriptor() {
        return atk_state_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_state_type_get_type()
     * }
     */
    public static MethodHandle atk_state_type_get_type$handle() {
        return atk_state_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_state_type_get_type()
     * }
     */
    public static long atk_state_type_get_type() {
        var mh$ = atk_state_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_attribute_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_attribute_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_text_attribute_get_type()
     * }
     */
    public static FunctionDescriptor atk_text_attribute_get_type$descriptor() {
        return atk_text_attribute_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_text_attribute_get_type()
     * }
     */
    public static MethodHandle atk_text_attribute_get_type$handle() {
        return atk_text_attribute_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_text_attribute_get_type()
     * }
     */
    public static long atk_text_attribute_get_type() {
        var mh$ = atk_text_attribute_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_attribute_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_boundary_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_boundary_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_text_boundary_get_type()
     * }
     */
    public static FunctionDescriptor atk_text_boundary_get_type$descriptor() {
        return atk_text_boundary_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_text_boundary_get_type()
     * }
     */
    public static MethodHandle atk_text_boundary_get_type$handle() {
        return atk_text_boundary_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_text_boundary_get_type()
     * }
     */
    public static long atk_text_boundary_get_type() {
        var mh$ = atk_text_boundary_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_boundary_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_granularity_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_granularity_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_text_granularity_get_type()
     * }
     */
    public static FunctionDescriptor atk_text_granularity_get_type$descriptor() {
        return atk_text_granularity_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_text_granularity_get_type()
     * }
     */
    public static MethodHandle atk_text_granularity_get_type$handle() {
        return atk_text_granularity_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_text_granularity_get_type()
     * }
     */
    public static long atk_text_granularity_get_type() {
        var mh$ = atk_text_granularity_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_granularity_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_clip_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_clip_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_text_clip_type_get_type()
     * }
     */
    public static FunctionDescriptor atk_text_clip_type_get_type$descriptor() {
        return atk_text_clip_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_text_clip_type_get_type()
     * }
     */
    public static MethodHandle atk_text_clip_type_get_type$handle() {
        return atk_text_clip_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_text_clip_type_get_type()
     * }
     */
    public static long atk_text_clip_type_get_type() {
        var mh$ = atk_text_clip_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_clip_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_key_event_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_key_event_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_key_event_type_get_type()
     * }
     */
    public static FunctionDescriptor atk_key_event_type_get_type$descriptor() {
        return atk_key_event_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_key_event_type_get_type()
     * }
     */
    public static MethodHandle atk_key_event_type_get_type$handle() {
        return atk_key_event_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_key_event_type_get_type()
     * }
     */
    public static long atk_key_event_type_get_type() {
        var mh$ = atk_key_event_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_key_event_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_coord_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_coord_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_coord_type_get_type()
     * }
     */
    public static FunctionDescriptor atk_coord_type_get_type$descriptor() {
        return atk_coord_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_coord_type_get_type()
     * }
     */
    public static MethodHandle atk_coord_type_get_type$handle() {
        return atk_coord_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_coord_type_get_type()
     * }
     */
    public static long atk_coord_type_get_type() {
        var mh$ = atk_coord_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_coord_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_type_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_type_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_value_type_get_type()
     * }
     */
    public static FunctionDescriptor atk_value_type_get_type$descriptor() {
        return atk_value_type_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_value_type_get_type()
     * }
     */
    public static MethodHandle atk_value_type_get_type$handle() {
        return atk_value_type_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_value_type_get_type()
     * }
     */
    public static long atk_value_type_get_type() {
        var mh$ = atk_value_type_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_type_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ATK_RELATION_NULL = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_NULL = 0
     * }
     */
    public static int ATK_RELATION_NULL() {
        return ATK_RELATION_NULL;
    }
    private static final int ATK_RELATION_CONTROLLED_BY = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_CONTROLLED_BY = 1
     * }
     */
    public static int ATK_RELATION_CONTROLLED_BY() {
        return ATK_RELATION_CONTROLLED_BY;
    }
    private static final int ATK_RELATION_CONTROLLER_FOR = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_CONTROLLER_FOR = 2
     * }
     */
    public static int ATK_RELATION_CONTROLLER_FOR() {
        return ATK_RELATION_CONTROLLER_FOR;
    }
    private static final int ATK_RELATION_LABEL_FOR = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_LABEL_FOR = 3
     * }
     */
    public static int ATK_RELATION_LABEL_FOR() {
        return ATK_RELATION_LABEL_FOR;
    }
    private static final int ATK_RELATION_LABELLED_BY = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_LABELLED_BY = 4
     * }
     */
    public static int ATK_RELATION_LABELLED_BY() {
        return ATK_RELATION_LABELLED_BY;
    }
    private static final int ATK_RELATION_MEMBER_OF = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_MEMBER_OF = 5
     * }
     */
    public static int ATK_RELATION_MEMBER_OF() {
        return ATK_RELATION_MEMBER_OF;
    }
    private static final int ATK_RELATION_NODE_CHILD_OF = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_NODE_CHILD_OF = 6
     * }
     */
    public static int ATK_RELATION_NODE_CHILD_OF() {
        return ATK_RELATION_NODE_CHILD_OF;
    }
    private static final int ATK_RELATION_FLOWS_TO = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_FLOWS_TO = 7
     * }
     */
    public static int ATK_RELATION_FLOWS_TO() {
        return ATK_RELATION_FLOWS_TO;
    }
    private static final int ATK_RELATION_FLOWS_FROM = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_FLOWS_FROM = 8
     * }
     */
    public static int ATK_RELATION_FLOWS_FROM() {
        return ATK_RELATION_FLOWS_FROM;
    }
    private static final int ATK_RELATION_SUBWINDOW_OF = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_SUBWINDOW_OF = 9
     * }
     */
    public static int ATK_RELATION_SUBWINDOW_OF() {
        return ATK_RELATION_SUBWINDOW_OF;
    }
    private static final int ATK_RELATION_EMBEDS = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_EMBEDS = 10
     * }
     */
    public static int ATK_RELATION_EMBEDS() {
        return ATK_RELATION_EMBEDS;
    }
    private static final int ATK_RELATION_EMBEDDED_BY = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_EMBEDDED_BY = 11
     * }
     */
    public static int ATK_RELATION_EMBEDDED_BY() {
        return ATK_RELATION_EMBEDDED_BY;
    }
    private static final int ATK_RELATION_POPUP_FOR = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_POPUP_FOR = 12
     * }
     */
    public static int ATK_RELATION_POPUP_FOR() {
        return ATK_RELATION_POPUP_FOR;
    }
    private static final int ATK_RELATION_PARENT_WINDOW_OF = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_PARENT_WINDOW_OF = 13
     * }
     */
    public static int ATK_RELATION_PARENT_WINDOW_OF() {
        return ATK_RELATION_PARENT_WINDOW_OF;
    }
    private static final int ATK_RELATION_DESCRIBED_BY = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_DESCRIBED_BY = 14
     * }
     */
    public static int ATK_RELATION_DESCRIBED_BY() {
        return ATK_RELATION_DESCRIBED_BY;
    }
    private static final int ATK_RELATION_DESCRIPTION_FOR = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_DESCRIPTION_FOR = 15
     * }
     */
    public static int ATK_RELATION_DESCRIPTION_FOR() {
        return ATK_RELATION_DESCRIPTION_FOR;
    }
    private static final int ATK_RELATION_NODE_PARENT_OF = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_NODE_PARENT_OF = 16
     * }
     */
    public static int ATK_RELATION_NODE_PARENT_OF() {
        return ATK_RELATION_NODE_PARENT_OF;
    }
    private static final int ATK_RELATION_DETAILS = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_DETAILS = 17
     * }
     */
    public static int ATK_RELATION_DETAILS() {
        return ATK_RELATION_DETAILS;
    }
    private static final int ATK_RELATION_DETAILS_FOR = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_DETAILS_FOR = 18
     * }
     */
    public static int ATK_RELATION_DETAILS_FOR() {
        return ATK_RELATION_DETAILS_FOR;
    }
    private static final int ATK_RELATION_ERROR_MESSAGE = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_ERROR_MESSAGE = 19
     * }
     */
    public static int ATK_RELATION_ERROR_MESSAGE() {
        return ATK_RELATION_ERROR_MESSAGE;
    }
    private static final int ATK_RELATION_ERROR_FOR = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_ERROR_FOR = 20
     * }
     */
    public static int ATK_RELATION_ERROR_FOR() {
        return ATK_RELATION_ERROR_FOR;
    }
    private static final int ATK_RELATION_LAST_DEFINED = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_RELATION_LAST_DEFINED = 21
     * }
     */
    public static int ATK_RELATION_LAST_DEFINED() {
        return ATK_RELATION_LAST_DEFINED;
    }
    private static final int ATK_STATE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_INVALID = 0
     * }
     */
    public static int ATK_STATE_INVALID() {
        return ATK_STATE_INVALID;
    }
    private static final int ATK_STATE_ACTIVE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_ACTIVE = 1
     * }
     */
    public static int ATK_STATE_ACTIVE() {
        return ATK_STATE_ACTIVE;
    }
    private static final int ATK_STATE_ARMED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_ARMED = 2
     * }
     */
    public static int ATK_STATE_ARMED() {
        return ATK_STATE_ARMED;
    }
    private static final int ATK_STATE_BUSY = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_BUSY = 3
     * }
     */
    public static int ATK_STATE_BUSY() {
        return ATK_STATE_BUSY;
    }
    private static final int ATK_STATE_CHECKED = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_CHECKED = 4
     * }
     */
    public static int ATK_STATE_CHECKED() {
        return ATK_STATE_CHECKED;
    }
    private static final int ATK_STATE_DEFUNCT = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_DEFUNCT = 5
     * }
     */
    public static int ATK_STATE_DEFUNCT() {
        return ATK_STATE_DEFUNCT;
    }
    private static final int ATK_STATE_EDITABLE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_EDITABLE = 6
     * }
     */
    public static int ATK_STATE_EDITABLE() {
        return ATK_STATE_EDITABLE;
    }
    private static final int ATK_STATE_ENABLED = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_ENABLED = 7
     * }
     */
    public static int ATK_STATE_ENABLED() {
        return ATK_STATE_ENABLED;
    }
    private static final int ATK_STATE_EXPANDABLE = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_EXPANDABLE = 8
     * }
     */
    public static int ATK_STATE_EXPANDABLE() {
        return ATK_STATE_EXPANDABLE;
    }
    private static final int ATK_STATE_EXPANDED = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_EXPANDED = 9
     * }
     */
    public static int ATK_STATE_EXPANDED() {
        return ATK_STATE_EXPANDED;
    }
    private static final int ATK_STATE_FOCUSABLE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_FOCUSABLE = 10
     * }
     */
    public static int ATK_STATE_FOCUSABLE() {
        return ATK_STATE_FOCUSABLE;
    }
    private static final int ATK_STATE_FOCUSED = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_FOCUSED = 11
     * }
     */
    public static int ATK_STATE_FOCUSED() {
        return ATK_STATE_FOCUSED;
    }
    private static final int ATK_STATE_HORIZONTAL = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_HORIZONTAL = 12
     * }
     */
    public static int ATK_STATE_HORIZONTAL() {
        return ATK_STATE_HORIZONTAL;
    }
    private static final int ATK_STATE_ICONIFIED = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_ICONIFIED = 13
     * }
     */
    public static int ATK_STATE_ICONIFIED() {
        return ATK_STATE_ICONIFIED;
    }
    private static final int ATK_STATE_MODAL = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_MODAL = 14
     * }
     */
    public static int ATK_STATE_MODAL() {
        return ATK_STATE_MODAL;
    }
    private static final int ATK_STATE_MULTI_LINE = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_MULTI_LINE = 15
     * }
     */
    public static int ATK_STATE_MULTI_LINE() {
        return ATK_STATE_MULTI_LINE;
    }
    private static final int ATK_STATE_MULTISELECTABLE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_MULTISELECTABLE = 16
     * }
     */
    public static int ATK_STATE_MULTISELECTABLE() {
        return ATK_STATE_MULTISELECTABLE;
    }
    private static final int ATK_STATE_OPAQUE = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_OPAQUE = 17
     * }
     */
    public static int ATK_STATE_OPAQUE() {
        return ATK_STATE_OPAQUE;
    }
    private static final int ATK_STATE_PRESSED = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_PRESSED = 18
     * }
     */
    public static int ATK_STATE_PRESSED() {
        return ATK_STATE_PRESSED;
    }
    private static final int ATK_STATE_RESIZABLE = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_RESIZABLE = 19
     * }
     */
    public static int ATK_STATE_RESIZABLE() {
        return ATK_STATE_RESIZABLE;
    }
    private static final int ATK_STATE_SELECTABLE = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_SELECTABLE = 20
     * }
     */
    public static int ATK_STATE_SELECTABLE() {
        return ATK_STATE_SELECTABLE;
    }
    private static final int ATK_STATE_SELECTED = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_SELECTED = 21
     * }
     */
    public static int ATK_STATE_SELECTED() {
        return ATK_STATE_SELECTED;
    }
    private static final int ATK_STATE_SENSITIVE = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_SENSITIVE = 22
     * }
     */
    public static int ATK_STATE_SENSITIVE() {
        return ATK_STATE_SENSITIVE;
    }
    private static final int ATK_STATE_SHOWING = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_SHOWING = 23
     * }
     */
    public static int ATK_STATE_SHOWING() {
        return ATK_STATE_SHOWING;
    }
    private static final int ATK_STATE_SINGLE_LINE = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_SINGLE_LINE = 24
     * }
     */
    public static int ATK_STATE_SINGLE_LINE() {
        return ATK_STATE_SINGLE_LINE;
    }
    private static final int ATK_STATE_STALE = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_STALE = 25
     * }
     */
    public static int ATK_STATE_STALE() {
        return ATK_STATE_STALE;
    }
    private static final int ATK_STATE_TRANSIENT = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_TRANSIENT = 26
     * }
     */
    public static int ATK_STATE_TRANSIENT() {
        return ATK_STATE_TRANSIENT;
    }
    private static final int ATK_STATE_VERTICAL = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_VERTICAL = 27
     * }
     */
    public static int ATK_STATE_VERTICAL() {
        return ATK_STATE_VERTICAL;
    }
    private static final int ATK_STATE_VISIBLE = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_VISIBLE = 28
     * }
     */
    public static int ATK_STATE_VISIBLE() {
        return ATK_STATE_VISIBLE;
    }
    private static final int ATK_STATE_MANAGES_DESCENDANTS = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_MANAGES_DESCENDANTS = 29
     * }
     */
    public static int ATK_STATE_MANAGES_DESCENDANTS() {
        return ATK_STATE_MANAGES_DESCENDANTS;
    }
    private static final int ATK_STATE_INDETERMINATE = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_INDETERMINATE = 30
     * }
     */
    public static int ATK_STATE_INDETERMINATE() {
        return ATK_STATE_INDETERMINATE;
    }
    private static final int ATK_STATE_TRUNCATED = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_TRUNCATED = 31
     * }
     */
    public static int ATK_STATE_TRUNCATED() {
        return ATK_STATE_TRUNCATED;
    }
    private static final int ATK_STATE_REQUIRED = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_REQUIRED = 32
     * }
     */
    public static int ATK_STATE_REQUIRED() {
        return ATK_STATE_REQUIRED;
    }
    private static final int ATK_STATE_INVALID_ENTRY = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_INVALID_ENTRY = 33
     * }
     */
    public static int ATK_STATE_INVALID_ENTRY() {
        return ATK_STATE_INVALID_ENTRY;
    }
    private static final int ATK_STATE_SUPPORTS_AUTOCOMPLETION = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_SUPPORTS_AUTOCOMPLETION = 34
     * }
     */
    public static int ATK_STATE_SUPPORTS_AUTOCOMPLETION() {
        return ATK_STATE_SUPPORTS_AUTOCOMPLETION;
    }
    private static final int ATK_STATE_SELECTABLE_TEXT = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_SELECTABLE_TEXT = 35
     * }
     */
    public static int ATK_STATE_SELECTABLE_TEXT() {
        return ATK_STATE_SELECTABLE_TEXT;
    }
    private static final int ATK_STATE_DEFAULT = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_DEFAULT = 36
     * }
     */
    public static int ATK_STATE_DEFAULT() {
        return ATK_STATE_DEFAULT;
    }
    private static final int ATK_STATE_ANIMATED = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_ANIMATED = 37
     * }
     */
    public static int ATK_STATE_ANIMATED() {
        return ATK_STATE_ANIMATED;
    }
    private static final int ATK_STATE_VISITED = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_VISITED = 38
     * }
     */
    public static int ATK_STATE_VISITED() {
        return ATK_STATE_VISITED;
    }
    private static final int ATK_STATE_CHECKABLE = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_CHECKABLE = 39
     * }
     */
    public static int ATK_STATE_CHECKABLE() {
        return ATK_STATE_CHECKABLE;
    }
    private static final int ATK_STATE_HAS_POPUP = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_HAS_POPUP = 40
     * }
     */
    public static int ATK_STATE_HAS_POPUP() {
        return ATK_STATE_HAS_POPUP;
    }
    private static final int ATK_STATE_HAS_TOOLTIP = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_HAS_TOOLTIP = 41
     * }
     */
    public static int ATK_STATE_HAS_TOOLTIP() {
        return ATK_STATE_HAS_TOOLTIP;
    }
    private static final int ATK_STATE_READ_ONLY = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_READ_ONLY = 42
     * }
     */
    public static int ATK_STATE_READ_ONLY() {
        return ATK_STATE_READ_ONLY;
    }
    private static final int ATK_STATE_COLLAPSED = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_COLLAPSED = 43
     * }
     */
    public static int ATK_STATE_COLLAPSED() {
        return ATK_STATE_COLLAPSED;
    }
    private static final int ATK_STATE_LAST_DEFINED = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_STATE_LAST_DEFINED = 44
     * }
     */
    public static int ATK_STATE_LAST_DEFINED() {
        return ATK_STATE_LAST_DEFINED;
    }
    /**
     * {@snippet lang=c :
     * typedef guint64 AtkState
     * }
     */
    public static final OfLong AtkState = app_indicator_h.C_LONG;

    private static class atk_state_type_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_type_register"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkStateType atk_state_type_register(const gchar *name)
     * }
     */
    public static FunctionDescriptor atk_state_type_register$descriptor() {
        return atk_state_type_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkStateType atk_state_type_register(const gchar *name)
     * }
     */
    public static MethodHandle atk_state_type_register$handle() {
        return atk_state_type_register.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkStateType atk_state_type_register(const gchar *name)
     * }
     */
    public static int atk_state_type_register(MemorySegment name) {
        var mh$ = atk_state_type_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_type_register", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_type_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_type_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_state_type_get_name(AtkStateType type)
     * }
     */
    public static FunctionDescriptor atk_state_type_get_name$descriptor() {
        return atk_state_type_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_state_type_get_name(AtkStateType type)
     * }
     */
    public static MethodHandle atk_state_type_get_name$handle() {
        return atk_state_type_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_state_type_get_name(AtkStateType type)
     * }
     */
    public static MemorySegment atk_state_type_get_name(int type) {
        var mh$ = atk_state_type_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_type_get_name", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_type_for_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_type_for_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkStateType atk_state_type_for_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor atk_state_type_for_name$descriptor() {
        return atk_state_type_for_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkStateType atk_state_type_for_name(const gchar *name)
     * }
     */
    public static MethodHandle atk_state_type_for_name$handle() {
        return atk_state_type_for_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkStateType atk_state_type_for_name(const gchar *name)
     * }
     */
    public static int atk_state_type_for_name(MemorySegment name) {
        var mh$ = atk_state_type_for_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_type_for_name", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ATK_ROLE_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_INVALID = 0
     * }
     */
    public static int ATK_ROLE_INVALID() {
        return ATK_ROLE_INVALID;
    }
    private static final int ATK_ROLE_ACCEL_LABEL = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_ACCEL_LABEL = 1
     * }
     */
    public static int ATK_ROLE_ACCEL_LABEL() {
        return ATK_ROLE_ACCEL_LABEL;
    }
    private static final int ATK_ROLE_ALERT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_ALERT = 2
     * }
     */
    public static int ATK_ROLE_ALERT() {
        return ATK_ROLE_ALERT;
    }
    private static final int ATK_ROLE_ANIMATION = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_ANIMATION = 3
     * }
     */
    public static int ATK_ROLE_ANIMATION() {
        return ATK_ROLE_ANIMATION;
    }
    private static final int ATK_ROLE_ARROW = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_ARROW = 4
     * }
     */
    public static int ATK_ROLE_ARROW() {
        return ATK_ROLE_ARROW;
    }
    private static final int ATK_ROLE_CALENDAR = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_CALENDAR = 5
     * }
     */
    public static int ATK_ROLE_CALENDAR() {
        return ATK_ROLE_CALENDAR;
    }
    private static final int ATK_ROLE_CANVAS = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_CANVAS = 6
     * }
     */
    public static int ATK_ROLE_CANVAS() {
        return ATK_ROLE_CANVAS;
    }
    private static final int ATK_ROLE_CHECK_BOX = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_CHECK_BOX = 7
     * }
     */
    public static int ATK_ROLE_CHECK_BOX() {
        return ATK_ROLE_CHECK_BOX;
    }
    private static final int ATK_ROLE_CHECK_MENU_ITEM = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_CHECK_MENU_ITEM = 8
     * }
     */
    public static int ATK_ROLE_CHECK_MENU_ITEM() {
        return ATK_ROLE_CHECK_MENU_ITEM;
    }
    private static final int ATK_ROLE_COLOR_CHOOSER = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_COLOR_CHOOSER = 9
     * }
     */
    public static int ATK_ROLE_COLOR_CHOOSER() {
        return ATK_ROLE_COLOR_CHOOSER;
    }
    private static final int ATK_ROLE_COLUMN_HEADER = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_COLUMN_HEADER = 10
     * }
     */
    public static int ATK_ROLE_COLUMN_HEADER() {
        return ATK_ROLE_COLUMN_HEADER;
    }
    private static final int ATK_ROLE_COMBO_BOX = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_COMBO_BOX = 11
     * }
     */
    public static int ATK_ROLE_COMBO_BOX() {
        return ATK_ROLE_COMBO_BOX;
    }
    private static final int ATK_ROLE_DATE_EDITOR = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DATE_EDITOR = 12
     * }
     */
    public static int ATK_ROLE_DATE_EDITOR() {
        return ATK_ROLE_DATE_EDITOR;
    }
    private static final int ATK_ROLE_DESKTOP_ICON = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DESKTOP_ICON = 13
     * }
     */
    public static int ATK_ROLE_DESKTOP_ICON() {
        return ATK_ROLE_DESKTOP_ICON;
    }
    private static final int ATK_ROLE_DESKTOP_FRAME = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DESKTOP_FRAME = 14
     * }
     */
    public static int ATK_ROLE_DESKTOP_FRAME() {
        return ATK_ROLE_DESKTOP_FRAME;
    }
    private static final int ATK_ROLE_DIAL = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DIAL = 15
     * }
     */
    public static int ATK_ROLE_DIAL() {
        return ATK_ROLE_DIAL;
    }
    private static final int ATK_ROLE_DIALOG = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DIALOG = 16
     * }
     */
    public static int ATK_ROLE_DIALOG() {
        return ATK_ROLE_DIALOG;
    }
    private static final int ATK_ROLE_DIRECTORY_PANE = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DIRECTORY_PANE = 17
     * }
     */
    public static int ATK_ROLE_DIRECTORY_PANE() {
        return ATK_ROLE_DIRECTORY_PANE;
    }
    private static final int ATK_ROLE_DRAWING_AREA = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DRAWING_AREA = 18
     * }
     */
    public static int ATK_ROLE_DRAWING_AREA() {
        return ATK_ROLE_DRAWING_AREA;
    }
    private static final int ATK_ROLE_FILE_CHOOSER = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_FILE_CHOOSER = 19
     * }
     */
    public static int ATK_ROLE_FILE_CHOOSER() {
        return ATK_ROLE_FILE_CHOOSER;
    }
    private static final int ATK_ROLE_FILLER = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_FILLER = 20
     * }
     */
    public static int ATK_ROLE_FILLER() {
        return ATK_ROLE_FILLER;
    }
    private static final int ATK_ROLE_FONT_CHOOSER = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_FONT_CHOOSER = 21
     * }
     */
    public static int ATK_ROLE_FONT_CHOOSER() {
        return ATK_ROLE_FONT_CHOOSER;
    }
    private static final int ATK_ROLE_FRAME = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_FRAME = 22
     * }
     */
    public static int ATK_ROLE_FRAME() {
        return ATK_ROLE_FRAME;
    }
    private static final int ATK_ROLE_GLASS_PANE = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_GLASS_PANE = 23
     * }
     */
    public static int ATK_ROLE_GLASS_PANE() {
        return ATK_ROLE_GLASS_PANE;
    }
    private static final int ATK_ROLE_HTML_CONTAINER = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_HTML_CONTAINER = 24
     * }
     */
    public static int ATK_ROLE_HTML_CONTAINER() {
        return ATK_ROLE_HTML_CONTAINER;
    }
    private static final int ATK_ROLE_ICON = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_ICON = 25
     * }
     */
    public static int ATK_ROLE_ICON() {
        return ATK_ROLE_ICON;
    }
    private static final int ATK_ROLE_IMAGE = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_IMAGE = 26
     * }
     */
    public static int ATK_ROLE_IMAGE() {
        return ATK_ROLE_IMAGE;
    }
    private static final int ATK_ROLE_INTERNAL_FRAME = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_INTERNAL_FRAME = 27
     * }
     */
    public static int ATK_ROLE_INTERNAL_FRAME() {
        return ATK_ROLE_INTERNAL_FRAME;
    }
    private static final int ATK_ROLE_LABEL = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_LABEL = 28
     * }
     */
    public static int ATK_ROLE_LABEL() {
        return ATK_ROLE_LABEL;
    }
    private static final int ATK_ROLE_LAYERED_PANE = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_LAYERED_PANE = 29
     * }
     */
    public static int ATK_ROLE_LAYERED_PANE() {
        return ATK_ROLE_LAYERED_PANE;
    }
    private static final int ATK_ROLE_LIST = (int)30L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_LIST = 30
     * }
     */
    public static int ATK_ROLE_LIST() {
        return ATK_ROLE_LIST;
    }
    private static final int ATK_ROLE_LIST_ITEM = (int)31L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_LIST_ITEM = 31
     * }
     */
    public static int ATK_ROLE_LIST_ITEM() {
        return ATK_ROLE_LIST_ITEM;
    }
    private static final int ATK_ROLE_MENU = (int)32L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_MENU = 32
     * }
     */
    public static int ATK_ROLE_MENU() {
        return ATK_ROLE_MENU;
    }
    private static final int ATK_ROLE_MENU_BAR = (int)33L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_MENU_BAR = 33
     * }
     */
    public static int ATK_ROLE_MENU_BAR() {
        return ATK_ROLE_MENU_BAR;
    }
    private static final int ATK_ROLE_MENU_ITEM = (int)34L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_MENU_ITEM = 34
     * }
     */
    public static int ATK_ROLE_MENU_ITEM() {
        return ATK_ROLE_MENU_ITEM;
    }
    private static final int ATK_ROLE_OPTION_PANE = (int)35L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_OPTION_PANE = 35
     * }
     */
    public static int ATK_ROLE_OPTION_PANE() {
        return ATK_ROLE_OPTION_PANE;
    }
    private static final int ATK_ROLE_PAGE_TAB = (int)36L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_PAGE_TAB = 36
     * }
     */
    public static int ATK_ROLE_PAGE_TAB() {
        return ATK_ROLE_PAGE_TAB;
    }
    private static final int ATK_ROLE_PAGE_TAB_LIST = (int)37L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_PAGE_TAB_LIST = 37
     * }
     */
    public static int ATK_ROLE_PAGE_TAB_LIST() {
        return ATK_ROLE_PAGE_TAB_LIST;
    }
    private static final int ATK_ROLE_PANEL = (int)38L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_PANEL = 38
     * }
     */
    public static int ATK_ROLE_PANEL() {
        return ATK_ROLE_PANEL;
    }
    private static final int ATK_ROLE_PASSWORD_TEXT = (int)39L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_PASSWORD_TEXT = 39
     * }
     */
    public static int ATK_ROLE_PASSWORD_TEXT() {
        return ATK_ROLE_PASSWORD_TEXT;
    }
    private static final int ATK_ROLE_POPUP_MENU = (int)40L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_POPUP_MENU = 40
     * }
     */
    public static int ATK_ROLE_POPUP_MENU() {
        return ATK_ROLE_POPUP_MENU;
    }
    private static final int ATK_ROLE_PROGRESS_BAR = (int)41L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_PROGRESS_BAR = 41
     * }
     */
    public static int ATK_ROLE_PROGRESS_BAR() {
        return ATK_ROLE_PROGRESS_BAR;
    }
    private static final int ATK_ROLE_PUSH_BUTTON = (int)42L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_PUSH_BUTTON = 42
     * }
     */
    public static int ATK_ROLE_PUSH_BUTTON() {
        return ATK_ROLE_PUSH_BUTTON;
    }
    private static final int ATK_ROLE_RADIO_BUTTON = (int)43L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_RADIO_BUTTON = 43
     * }
     */
    public static int ATK_ROLE_RADIO_BUTTON() {
        return ATK_ROLE_RADIO_BUTTON;
    }
    private static final int ATK_ROLE_RADIO_MENU_ITEM = (int)44L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_RADIO_MENU_ITEM = 44
     * }
     */
    public static int ATK_ROLE_RADIO_MENU_ITEM() {
        return ATK_ROLE_RADIO_MENU_ITEM;
    }
    private static final int ATK_ROLE_ROOT_PANE = (int)45L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_ROOT_PANE = 45
     * }
     */
    public static int ATK_ROLE_ROOT_PANE() {
        return ATK_ROLE_ROOT_PANE;
    }
    private static final int ATK_ROLE_ROW_HEADER = (int)46L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_ROW_HEADER = 46
     * }
     */
    public static int ATK_ROLE_ROW_HEADER() {
        return ATK_ROLE_ROW_HEADER;
    }
    private static final int ATK_ROLE_SCROLL_BAR = (int)47L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_SCROLL_BAR = 47
     * }
     */
    public static int ATK_ROLE_SCROLL_BAR() {
        return ATK_ROLE_SCROLL_BAR;
    }
    private static final int ATK_ROLE_SCROLL_PANE = (int)48L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_SCROLL_PANE = 48
     * }
     */
    public static int ATK_ROLE_SCROLL_PANE() {
        return ATK_ROLE_SCROLL_PANE;
    }
    private static final int ATK_ROLE_SEPARATOR = (int)49L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_SEPARATOR = 49
     * }
     */
    public static int ATK_ROLE_SEPARATOR() {
        return ATK_ROLE_SEPARATOR;
    }
    private static final int ATK_ROLE_SLIDER = (int)50L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_SLIDER = 50
     * }
     */
    public static int ATK_ROLE_SLIDER() {
        return ATK_ROLE_SLIDER;
    }
    private static final int ATK_ROLE_SPLIT_PANE = (int)51L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_SPLIT_PANE = 51
     * }
     */
    public static int ATK_ROLE_SPLIT_PANE() {
        return ATK_ROLE_SPLIT_PANE;
    }
    private static final int ATK_ROLE_SPIN_BUTTON = (int)52L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_SPIN_BUTTON = 52
     * }
     */
    public static int ATK_ROLE_SPIN_BUTTON() {
        return ATK_ROLE_SPIN_BUTTON;
    }
    private static final int ATK_ROLE_STATUSBAR = (int)53L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_STATUSBAR = 53
     * }
     */
    public static int ATK_ROLE_STATUSBAR() {
        return ATK_ROLE_STATUSBAR;
    }
    private static final int ATK_ROLE_TABLE = (int)54L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TABLE = 54
     * }
     */
    public static int ATK_ROLE_TABLE() {
        return ATK_ROLE_TABLE;
    }
    private static final int ATK_ROLE_TABLE_CELL = (int)55L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TABLE_CELL = 55
     * }
     */
    public static int ATK_ROLE_TABLE_CELL() {
        return ATK_ROLE_TABLE_CELL;
    }
    private static final int ATK_ROLE_TABLE_COLUMN_HEADER = (int)56L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TABLE_COLUMN_HEADER = 56
     * }
     */
    public static int ATK_ROLE_TABLE_COLUMN_HEADER() {
        return ATK_ROLE_TABLE_COLUMN_HEADER;
    }
    private static final int ATK_ROLE_TABLE_ROW_HEADER = (int)57L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TABLE_ROW_HEADER = 57
     * }
     */
    public static int ATK_ROLE_TABLE_ROW_HEADER() {
        return ATK_ROLE_TABLE_ROW_HEADER;
    }
    private static final int ATK_ROLE_TEAR_OFF_MENU_ITEM = (int)58L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TEAR_OFF_MENU_ITEM = 58
     * }
     */
    public static int ATK_ROLE_TEAR_OFF_MENU_ITEM() {
        return ATK_ROLE_TEAR_OFF_MENU_ITEM;
    }
    private static final int ATK_ROLE_TERMINAL = (int)59L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TERMINAL = 59
     * }
     */
    public static int ATK_ROLE_TERMINAL() {
        return ATK_ROLE_TERMINAL;
    }
    private static final int ATK_ROLE_TEXT = (int)60L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TEXT = 60
     * }
     */
    public static int ATK_ROLE_TEXT() {
        return ATK_ROLE_TEXT;
    }
    private static final int ATK_ROLE_TOGGLE_BUTTON = (int)61L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TOGGLE_BUTTON = 61
     * }
     */
    public static int ATK_ROLE_TOGGLE_BUTTON() {
        return ATK_ROLE_TOGGLE_BUTTON;
    }
    private static final int ATK_ROLE_TOOL_BAR = (int)62L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TOOL_BAR = 62
     * }
     */
    public static int ATK_ROLE_TOOL_BAR() {
        return ATK_ROLE_TOOL_BAR;
    }
    private static final int ATK_ROLE_TOOL_TIP = (int)63L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TOOL_TIP = 63
     * }
     */
    public static int ATK_ROLE_TOOL_TIP() {
        return ATK_ROLE_TOOL_TIP;
    }
    private static final int ATK_ROLE_TREE = (int)64L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TREE = 64
     * }
     */
    public static int ATK_ROLE_TREE() {
        return ATK_ROLE_TREE;
    }
    private static final int ATK_ROLE_TREE_TABLE = (int)65L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TREE_TABLE = 65
     * }
     */
    public static int ATK_ROLE_TREE_TABLE() {
        return ATK_ROLE_TREE_TABLE;
    }
    private static final int ATK_ROLE_UNKNOWN = (int)66L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_UNKNOWN = 66
     * }
     */
    public static int ATK_ROLE_UNKNOWN() {
        return ATK_ROLE_UNKNOWN;
    }
    private static final int ATK_ROLE_VIEWPORT = (int)67L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_VIEWPORT = 67
     * }
     */
    public static int ATK_ROLE_VIEWPORT() {
        return ATK_ROLE_VIEWPORT;
    }
    private static final int ATK_ROLE_WINDOW = (int)68L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_WINDOW = 68
     * }
     */
    public static int ATK_ROLE_WINDOW() {
        return ATK_ROLE_WINDOW;
    }
    private static final int ATK_ROLE_HEADER = (int)69L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_HEADER = 69
     * }
     */
    public static int ATK_ROLE_HEADER() {
        return ATK_ROLE_HEADER;
    }
    private static final int ATK_ROLE_FOOTER = (int)70L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_FOOTER = 70
     * }
     */
    public static int ATK_ROLE_FOOTER() {
        return ATK_ROLE_FOOTER;
    }
    private static final int ATK_ROLE_PARAGRAPH = (int)71L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_PARAGRAPH = 71
     * }
     */
    public static int ATK_ROLE_PARAGRAPH() {
        return ATK_ROLE_PARAGRAPH;
    }
    private static final int ATK_ROLE_RULER = (int)72L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_RULER = 72
     * }
     */
    public static int ATK_ROLE_RULER() {
        return ATK_ROLE_RULER;
    }
    private static final int ATK_ROLE_APPLICATION = (int)73L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_APPLICATION = 73
     * }
     */
    public static int ATK_ROLE_APPLICATION() {
        return ATK_ROLE_APPLICATION;
    }
    private static final int ATK_ROLE_AUTOCOMPLETE = (int)74L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_AUTOCOMPLETE = 74
     * }
     */
    public static int ATK_ROLE_AUTOCOMPLETE() {
        return ATK_ROLE_AUTOCOMPLETE;
    }
    private static final int ATK_ROLE_EDITBAR = (int)75L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_EDITBAR = 75
     * }
     */
    public static int ATK_ROLE_EDITBAR() {
        return ATK_ROLE_EDITBAR;
    }
    private static final int ATK_ROLE_EMBEDDED = (int)76L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_EMBEDDED = 76
     * }
     */
    public static int ATK_ROLE_EMBEDDED() {
        return ATK_ROLE_EMBEDDED;
    }
    private static final int ATK_ROLE_ENTRY = (int)77L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_ENTRY = 77
     * }
     */
    public static int ATK_ROLE_ENTRY() {
        return ATK_ROLE_ENTRY;
    }
    private static final int ATK_ROLE_CHART = (int)78L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_CHART = 78
     * }
     */
    public static int ATK_ROLE_CHART() {
        return ATK_ROLE_CHART;
    }
    private static final int ATK_ROLE_CAPTION = (int)79L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_CAPTION = 79
     * }
     */
    public static int ATK_ROLE_CAPTION() {
        return ATK_ROLE_CAPTION;
    }
    private static final int ATK_ROLE_DOCUMENT_FRAME = (int)80L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DOCUMENT_FRAME = 80
     * }
     */
    public static int ATK_ROLE_DOCUMENT_FRAME() {
        return ATK_ROLE_DOCUMENT_FRAME;
    }
    private static final int ATK_ROLE_HEADING = (int)81L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_HEADING = 81
     * }
     */
    public static int ATK_ROLE_HEADING() {
        return ATK_ROLE_HEADING;
    }
    private static final int ATK_ROLE_PAGE = (int)82L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_PAGE = 82
     * }
     */
    public static int ATK_ROLE_PAGE() {
        return ATK_ROLE_PAGE;
    }
    private static final int ATK_ROLE_SECTION = (int)83L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_SECTION = 83
     * }
     */
    public static int ATK_ROLE_SECTION() {
        return ATK_ROLE_SECTION;
    }
    private static final int ATK_ROLE_REDUNDANT_OBJECT = (int)84L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_REDUNDANT_OBJECT = 84
     * }
     */
    public static int ATK_ROLE_REDUNDANT_OBJECT() {
        return ATK_ROLE_REDUNDANT_OBJECT;
    }
    private static final int ATK_ROLE_FORM = (int)85L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_FORM = 85
     * }
     */
    public static int ATK_ROLE_FORM() {
        return ATK_ROLE_FORM;
    }
    private static final int ATK_ROLE_LINK = (int)86L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_LINK = 86
     * }
     */
    public static int ATK_ROLE_LINK() {
        return ATK_ROLE_LINK;
    }
    private static final int ATK_ROLE_INPUT_METHOD_WINDOW = (int)87L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_INPUT_METHOD_WINDOW = 87
     * }
     */
    public static int ATK_ROLE_INPUT_METHOD_WINDOW() {
        return ATK_ROLE_INPUT_METHOD_WINDOW;
    }
    private static final int ATK_ROLE_TABLE_ROW = (int)88L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TABLE_ROW = 88
     * }
     */
    public static int ATK_ROLE_TABLE_ROW() {
        return ATK_ROLE_TABLE_ROW;
    }
    private static final int ATK_ROLE_TREE_ITEM = (int)89L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TREE_ITEM = 89
     * }
     */
    public static int ATK_ROLE_TREE_ITEM() {
        return ATK_ROLE_TREE_ITEM;
    }
    private static final int ATK_ROLE_DOCUMENT_SPREADSHEET = (int)90L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DOCUMENT_SPREADSHEET = 90
     * }
     */
    public static int ATK_ROLE_DOCUMENT_SPREADSHEET() {
        return ATK_ROLE_DOCUMENT_SPREADSHEET;
    }
    private static final int ATK_ROLE_DOCUMENT_PRESENTATION = (int)91L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DOCUMENT_PRESENTATION = 91
     * }
     */
    public static int ATK_ROLE_DOCUMENT_PRESENTATION() {
        return ATK_ROLE_DOCUMENT_PRESENTATION;
    }
    private static final int ATK_ROLE_DOCUMENT_TEXT = (int)92L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DOCUMENT_TEXT = 92
     * }
     */
    public static int ATK_ROLE_DOCUMENT_TEXT() {
        return ATK_ROLE_DOCUMENT_TEXT;
    }
    private static final int ATK_ROLE_DOCUMENT_WEB = (int)93L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DOCUMENT_WEB = 93
     * }
     */
    public static int ATK_ROLE_DOCUMENT_WEB() {
        return ATK_ROLE_DOCUMENT_WEB;
    }
    private static final int ATK_ROLE_DOCUMENT_EMAIL = (int)94L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DOCUMENT_EMAIL = 94
     * }
     */
    public static int ATK_ROLE_DOCUMENT_EMAIL() {
        return ATK_ROLE_DOCUMENT_EMAIL;
    }
    private static final int ATK_ROLE_COMMENT = (int)95L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_COMMENT = 95
     * }
     */
    public static int ATK_ROLE_COMMENT() {
        return ATK_ROLE_COMMENT;
    }
    private static final int ATK_ROLE_LIST_BOX = (int)96L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_LIST_BOX = 96
     * }
     */
    public static int ATK_ROLE_LIST_BOX() {
        return ATK_ROLE_LIST_BOX;
    }
    private static final int ATK_ROLE_GROUPING = (int)97L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_GROUPING = 97
     * }
     */
    public static int ATK_ROLE_GROUPING() {
        return ATK_ROLE_GROUPING;
    }
    private static final int ATK_ROLE_IMAGE_MAP = (int)98L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_IMAGE_MAP = 98
     * }
     */
    public static int ATK_ROLE_IMAGE_MAP() {
        return ATK_ROLE_IMAGE_MAP;
    }
    private static final int ATK_ROLE_NOTIFICATION = (int)99L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_NOTIFICATION = 99
     * }
     */
    public static int ATK_ROLE_NOTIFICATION() {
        return ATK_ROLE_NOTIFICATION;
    }
    private static final int ATK_ROLE_INFO_BAR = (int)100L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_INFO_BAR = 100
     * }
     */
    public static int ATK_ROLE_INFO_BAR() {
        return ATK_ROLE_INFO_BAR;
    }
    private static final int ATK_ROLE_LEVEL_BAR = (int)101L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_LEVEL_BAR = 101
     * }
     */
    public static int ATK_ROLE_LEVEL_BAR() {
        return ATK_ROLE_LEVEL_BAR;
    }
    private static final int ATK_ROLE_TITLE_BAR = (int)102L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TITLE_BAR = 102
     * }
     */
    public static int ATK_ROLE_TITLE_BAR() {
        return ATK_ROLE_TITLE_BAR;
    }
    private static final int ATK_ROLE_BLOCK_QUOTE = (int)103L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_BLOCK_QUOTE = 103
     * }
     */
    public static int ATK_ROLE_BLOCK_QUOTE() {
        return ATK_ROLE_BLOCK_QUOTE;
    }
    private static final int ATK_ROLE_AUDIO = (int)104L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_AUDIO = 104
     * }
     */
    public static int ATK_ROLE_AUDIO() {
        return ATK_ROLE_AUDIO;
    }
    private static final int ATK_ROLE_VIDEO = (int)105L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_VIDEO = 105
     * }
     */
    public static int ATK_ROLE_VIDEO() {
        return ATK_ROLE_VIDEO;
    }
    private static final int ATK_ROLE_DEFINITION = (int)106L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DEFINITION = 106
     * }
     */
    public static int ATK_ROLE_DEFINITION() {
        return ATK_ROLE_DEFINITION;
    }
    private static final int ATK_ROLE_ARTICLE = (int)107L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_ARTICLE = 107
     * }
     */
    public static int ATK_ROLE_ARTICLE() {
        return ATK_ROLE_ARTICLE;
    }
    private static final int ATK_ROLE_LANDMARK = (int)108L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_LANDMARK = 108
     * }
     */
    public static int ATK_ROLE_LANDMARK() {
        return ATK_ROLE_LANDMARK;
    }
    private static final int ATK_ROLE_LOG = (int)109L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_LOG = 109
     * }
     */
    public static int ATK_ROLE_LOG() {
        return ATK_ROLE_LOG;
    }
    private static final int ATK_ROLE_MARQUEE = (int)110L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_MARQUEE = 110
     * }
     */
    public static int ATK_ROLE_MARQUEE() {
        return ATK_ROLE_MARQUEE;
    }
    private static final int ATK_ROLE_MATH = (int)111L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_MATH = 111
     * }
     */
    public static int ATK_ROLE_MATH() {
        return ATK_ROLE_MATH;
    }
    private static final int ATK_ROLE_RATING = (int)112L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_RATING = 112
     * }
     */
    public static int ATK_ROLE_RATING() {
        return ATK_ROLE_RATING;
    }
    private static final int ATK_ROLE_TIMER = (int)113L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_TIMER = 113
     * }
     */
    public static int ATK_ROLE_TIMER() {
        return ATK_ROLE_TIMER;
    }
    private static final int ATK_ROLE_DESCRIPTION_LIST = (int)114L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DESCRIPTION_LIST = 114
     * }
     */
    public static int ATK_ROLE_DESCRIPTION_LIST() {
        return ATK_ROLE_DESCRIPTION_LIST;
    }
    private static final int ATK_ROLE_DESCRIPTION_TERM = (int)115L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DESCRIPTION_TERM = 115
     * }
     */
    public static int ATK_ROLE_DESCRIPTION_TERM() {
        return ATK_ROLE_DESCRIPTION_TERM;
    }
    private static final int ATK_ROLE_DESCRIPTION_VALUE = (int)116L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_DESCRIPTION_VALUE = 116
     * }
     */
    public static int ATK_ROLE_DESCRIPTION_VALUE() {
        return ATK_ROLE_DESCRIPTION_VALUE;
    }
    private static final int ATK_ROLE_STATIC = (int)117L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_STATIC = 117
     * }
     */
    public static int ATK_ROLE_STATIC() {
        return ATK_ROLE_STATIC;
    }
    private static final int ATK_ROLE_MATH_FRACTION = (int)118L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_MATH_FRACTION = 118
     * }
     */
    public static int ATK_ROLE_MATH_FRACTION() {
        return ATK_ROLE_MATH_FRACTION;
    }
    private static final int ATK_ROLE_MATH_ROOT = (int)119L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_MATH_ROOT = 119
     * }
     */
    public static int ATK_ROLE_MATH_ROOT() {
        return ATK_ROLE_MATH_ROOT;
    }
    private static final int ATK_ROLE_SUBSCRIPT = (int)120L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_SUBSCRIPT = 120
     * }
     */
    public static int ATK_ROLE_SUBSCRIPT() {
        return ATK_ROLE_SUBSCRIPT;
    }
    private static final int ATK_ROLE_SUPERSCRIPT = (int)121L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_SUPERSCRIPT = 121
     * }
     */
    public static int ATK_ROLE_SUPERSCRIPT() {
        return ATK_ROLE_SUPERSCRIPT;
    }
    private static final int ATK_ROLE_FOOTNOTE = (int)122L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_FOOTNOTE = 122
     * }
     */
    public static int ATK_ROLE_FOOTNOTE() {
        return ATK_ROLE_FOOTNOTE;
    }
    private static final int ATK_ROLE_CONTENT_DELETION = (int)123L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_CONTENT_DELETION = 123
     * }
     */
    public static int ATK_ROLE_CONTENT_DELETION() {
        return ATK_ROLE_CONTENT_DELETION;
    }
    private static final int ATK_ROLE_CONTENT_INSERTION = (int)124L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_CONTENT_INSERTION = 124
     * }
     */
    public static int ATK_ROLE_CONTENT_INSERTION() {
        return ATK_ROLE_CONTENT_INSERTION;
    }
    private static final int ATK_ROLE_MARK = (int)125L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_MARK = 125
     * }
     */
    public static int ATK_ROLE_MARK() {
        return ATK_ROLE_MARK;
    }
    private static final int ATK_ROLE_SUGGESTION = (int)126L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_SUGGESTION = 126
     * }
     */
    public static int ATK_ROLE_SUGGESTION() {
        return ATK_ROLE_SUGGESTION;
    }
    private static final int ATK_ROLE_PUSH_BUTTON_MENU = (int)127L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_PUSH_BUTTON_MENU = 127
     * }
     */
    public static int ATK_ROLE_PUSH_BUTTON_MENU() {
        return ATK_ROLE_PUSH_BUTTON_MENU;
    }
    private static final int ATK_ROLE_LAST_DEFINED = (int)128L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_ROLE_LAST_DEFINED = 128
     * }
     */
    public static int ATK_ROLE_LAST_DEFINED() {
        return ATK_ROLE_LAST_DEFINED;
    }
    private static final int ATK_LAYER_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LAYER_INVALID = 0
     * }
     */
    public static int ATK_LAYER_INVALID() {
        return ATK_LAYER_INVALID;
    }
    private static final int ATK_LAYER_BACKGROUND = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LAYER_BACKGROUND = 1
     * }
     */
    public static int ATK_LAYER_BACKGROUND() {
        return ATK_LAYER_BACKGROUND;
    }
    private static final int ATK_LAYER_CANVAS = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LAYER_CANVAS = 2
     * }
     */
    public static int ATK_LAYER_CANVAS() {
        return ATK_LAYER_CANVAS;
    }
    private static final int ATK_LAYER_WIDGET = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LAYER_WIDGET = 3
     * }
     */
    public static int ATK_LAYER_WIDGET() {
        return ATK_LAYER_WIDGET;
    }
    private static final int ATK_LAYER_MDI = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LAYER_MDI = 4
     * }
     */
    public static int ATK_LAYER_MDI() {
        return ATK_LAYER_MDI;
    }
    private static final int ATK_LAYER_POPUP = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LAYER_POPUP = 5
     * }
     */
    public static int ATK_LAYER_POPUP() {
        return ATK_LAYER_POPUP;
    }
    private static final int ATK_LAYER_OVERLAY = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LAYER_OVERLAY = 6
     * }
     */
    public static int ATK_LAYER_OVERLAY() {
        return ATK_LAYER_OVERLAY;
    }
    private static final int ATK_LAYER_WINDOW = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LAYER_WINDOW = 7
     * }
     */
    public static int ATK_LAYER_WINDOW() {
        return ATK_LAYER_WINDOW;
    }
    private static final int ATK_LIVE_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LIVE_NONE = 0
     * }
     */
    public static int ATK_LIVE_NONE() {
        return ATK_LIVE_NONE;
    }
    private static final int ATK_LIVE_POLITE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LIVE_POLITE = 1
     * }
     */
    public static int ATK_LIVE_POLITE() {
        return ATK_LIVE_POLITE;
    }
    private static final int ATK_LIVE_ASSERTIVE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_LIVE_ASSERTIVE = 2
     * }
     */
    public static int ATK_LIVE_ASSERTIVE() {
        return ATK_LIVE_ASSERTIVE;
    }

    private static class atk_object_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_object_get_type()
     * }
     */
    public static FunctionDescriptor atk_object_get_type$descriptor() {
        return atk_object_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_object_get_type()
     * }
     */
    public static MethodHandle atk_object_get_type$handle() {
        return atk_object_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_object_get_type()
     * }
     */
    public static long atk_object_get_type() {
        var mh$ = atk_object_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_implementor_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_implementor_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_implementor_get_type()
     * }
     */
    public static FunctionDescriptor atk_implementor_get_type$descriptor() {
        return atk_implementor_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_implementor_get_type()
     * }
     */
    public static MethodHandle atk_implementor_get_type$handle() {
        return atk_implementor_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_implementor_get_type()
     * }
     */
    public static long atk_implementor_get_type() {
        var mh$ = atk_implementor_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_implementor_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_implementor_ref_accessible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_implementor_ref_accessible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_implementor_ref_accessible(AtkImplementor *implementor)
     * }
     */
    public static FunctionDescriptor atk_implementor_ref_accessible$descriptor() {
        return atk_implementor_ref_accessible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_implementor_ref_accessible(AtkImplementor *implementor)
     * }
     */
    public static MethodHandle atk_implementor_ref_accessible$handle() {
        return atk_implementor_ref_accessible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_implementor_ref_accessible(AtkImplementor *implementor)
     * }
     */
    public static MemorySegment atk_implementor_ref_accessible(MemorySegment implementor) {
        var mh$ = atk_implementor_ref_accessible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_implementor_ref_accessible", implementor);
            }
            return (MemorySegment)mh$.invokeExact(implementor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_name(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_name$descriptor() {
        return atk_object_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_name(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_name$handle() {
        return atk_object_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_name(AtkObject *accessible)
     * }
     */
    public static MemorySegment atk_object_get_name(MemorySegment accessible) {
        var mh$ = atk_object_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_name", accessible);
            }
            return (MemorySegment)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_description(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_description$descriptor() {
        return atk_object_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_description(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_description$handle() {
        return atk_object_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_description(AtkObject *accessible)
     * }
     */
    public static MemorySegment atk_object_get_description(MemorySegment accessible) {
        var mh$ = atk_object_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_description", accessible);
            }
            return (MemorySegment)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_object_get_parent(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_parent$descriptor() {
        return atk_object_get_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_object_get_parent(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_parent$handle() {
        return atk_object_get_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_object_get_parent(AtkObject *accessible)
     * }
     */
    public static MemorySegment atk_object_get_parent(MemorySegment accessible) {
        var mh$ = atk_object_get_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_parent", accessible);
            }
            return (MemorySegment)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_peek_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_peek_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_object_peek_parent(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_peek_parent$descriptor() {
        return atk_object_peek_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_object_peek_parent(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_peek_parent$handle() {
        return atk_object_peek_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_object_peek_parent(AtkObject *accessible)
     * }
     */
    public static MemorySegment atk_object_peek_parent(MemorySegment accessible) {
        var mh$ = atk_object_peek_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_peek_parent", accessible);
            }
            return (MemorySegment)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_n_accessible_children {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_n_accessible_children"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_object_get_n_accessible_children(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_n_accessible_children$descriptor() {
        return atk_object_get_n_accessible_children.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_object_get_n_accessible_children(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_n_accessible_children$handle() {
        return atk_object_get_n_accessible_children.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_object_get_n_accessible_children(AtkObject *accessible)
     * }
     */
    public static int atk_object_get_n_accessible_children(MemorySegment accessible) {
        var mh$ = atk_object_get_n_accessible_children.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_n_accessible_children", accessible);
            }
            return (int)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_ref_accessible_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_ref_accessible_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_object_ref_accessible_child(AtkObject *accessible, gint i)
     * }
     */
    public static FunctionDescriptor atk_object_ref_accessible_child$descriptor() {
        return atk_object_ref_accessible_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_object_ref_accessible_child(AtkObject *accessible, gint i)
     * }
     */
    public static MethodHandle atk_object_ref_accessible_child$handle() {
        return atk_object_ref_accessible_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_object_ref_accessible_child(AtkObject *accessible, gint i)
     * }
     */
    public static MemorySegment atk_object_ref_accessible_child(MemorySegment accessible, int i) {
        var mh$ = atk_object_ref_accessible_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_ref_accessible_child", accessible, i);
            }
            return (MemorySegment)mh$.invokeExact(accessible, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_ref_relation_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_ref_relation_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRelationSet *atk_object_ref_relation_set(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_ref_relation_set$descriptor() {
        return atk_object_ref_relation_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRelationSet *atk_object_ref_relation_set(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_ref_relation_set$handle() {
        return atk_object_ref_relation_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRelationSet *atk_object_ref_relation_set(AtkObject *accessible)
     * }
     */
    public static MemorySegment atk_object_ref_relation_set(MemorySegment accessible) {
        var mh$ = atk_object_ref_relation_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_ref_relation_set", accessible);
            }
            return (MemorySegment)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_role {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_role"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRole atk_object_get_role(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_role$descriptor() {
        return atk_object_get_role.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRole atk_object_get_role(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_role$handle() {
        return atk_object_get_role.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRole atk_object_get_role(AtkObject *accessible)
     * }
     */
    public static int atk_object_get_role(MemorySegment accessible) {
        var mh$ = atk_object_get_role.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_role", accessible);
            }
            return (int)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_layer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_layer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkLayer atk_object_get_layer(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_layer$descriptor() {
        return atk_object_get_layer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkLayer atk_object_get_layer(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_layer$handle() {
        return atk_object_get_layer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkLayer atk_object_get_layer(AtkObject *accessible)
     * }
     */
    public static int atk_object_get_layer(MemorySegment accessible) {
        var mh$ = atk_object_get_layer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_layer", accessible);
            }
            return (int)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_mdi_zorder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_mdi_zorder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_object_get_mdi_zorder(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_mdi_zorder$descriptor() {
        return atk_object_get_mdi_zorder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_object_get_mdi_zorder(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_mdi_zorder$handle() {
        return atk_object_get_mdi_zorder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_object_get_mdi_zorder(AtkObject *accessible)
     * }
     */
    public static int atk_object_get_mdi_zorder(MemorySegment accessible) {
        var mh$ = atk_object_get_mdi_zorder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_mdi_zorder", accessible);
            }
            return (int)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_object_get_attributes(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_attributes$descriptor() {
        return atk_object_get_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_object_get_attributes(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_attributes$handle() {
        return atk_object_get_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_object_get_attributes(AtkObject *accessible)
     * }
     */
    public static MemorySegment atk_object_get_attributes(MemorySegment accessible) {
        var mh$ = atk_object_get_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_attributes", accessible);
            }
            return (MemorySegment)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_ref_state_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_ref_state_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkStateSet *atk_object_ref_state_set(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_ref_state_set$descriptor() {
        return atk_object_ref_state_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkStateSet *atk_object_ref_state_set(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_ref_state_set$handle() {
        return atk_object_ref_state_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkStateSet *atk_object_ref_state_set(AtkObject *accessible)
     * }
     */
    public static MemorySegment atk_object_ref_state_set(MemorySegment accessible) {
        var mh$ = atk_object_ref_state_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_ref_state_set", accessible);
            }
            return (MemorySegment)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_index_in_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_index_in_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_object_get_index_in_parent(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_index_in_parent$descriptor() {
        return atk_object_get_index_in_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_object_get_index_in_parent(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_index_in_parent$handle() {
        return atk_object_get_index_in_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_object_get_index_in_parent(AtkObject *accessible)
     * }
     */
    public static int atk_object_get_index_in_parent(MemorySegment accessible) {
        var mh$ = atk_object_get_index_in_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_index_in_parent", accessible);
            }
            return (int)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_object_set_name(AtkObject *accessible, const gchar *name)
     * }
     */
    public static FunctionDescriptor atk_object_set_name$descriptor() {
        return atk_object_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_object_set_name(AtkObject *accessible, const gchar *name)
     * }
     */
    public static MethodHandle atk_object_set_name$handle() {
        return atk_object_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_object_set_name(AtkObject *accessible, const gchar *name)
     * }
     */
    public static void atk_object_set_name(MemorySegment accessible, MemorySegment name) {
        var mh$ = atk_object_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_set_name", accessible, name);
            }
            mh$.invokeExact(accessible, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_set_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_set_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_object_set_description(AtkObject *accessible, const gchar *description)
     * }
     */
    public static FunctionDescriptor atk_object_set_description$descriptor() {
        return atk_object_set_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_object_set_description(AtkObject *accessible, const gchar *description)
     * }
     */
    public static MethodHandle atk_object_set_description$handle() {
        return atk_object_set_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_object_set_description(AtkObject *accessible, const gchar *description)
     * }
     */
    public static void atk_object_set_description(MemorySegment accessible, MemorySegment description) {
        var mh$ = atk_object_set_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_set_description", accessible, description);
            }
            mh$.invokeExact(accessible, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_set_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_set_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_object_set_parent(AtkObject *accessible, AtkObject *parent)
     * }
     */
    public static FunctionDescriptor atk_object_set_parent$descriptor() {
        return atk_object_set_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_object_set_parent(AtkObject *accessible, AtkObject *parent)
     * }
     */
    public static MethodHandle atk_object_set_parent$handle() {
        return atk_object_set_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_object_set_parent(AtkObject *accessible, AtkObject *parent)
     * }
     */
    public static void atk_object_set_parent(MemorySegment accessible, MemorySegment parent) {
        var mh$ = atk_object_set_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_set_parent", accessible, parent);
            }
            mh$.invokeExact(accessible, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_set_role {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_set_role"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_object_set_role(AtkObject *accessible, AtkRole role)
     * }
     */
    public static FunctionDescriptor atk_object_set_role$descriptor() {
        return atk_object_set_role.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_object_set_role(AtkObject *accessible, AtkRole role)
     * }
     */
    public static MethodHandle atk_object_set_role$handle() {
        return atk_object_set_role.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_object_set_role(AtkObject *accessible, AtkRole role)
     * }
     */
    public static void atk_object_set_role(MemorySegment accessible, int role) {
        var mh$ = atk_object_set_role.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_set_role", accessible, role);
            }
            mh$.invokeExact(accessible, role);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_connect_property_change_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_connect_property_change_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint atk_object_connect_property_change_handler(AtkObject *accessible, AtkPropertyChangeHandler *handler)
     * }
     */
    public static FunctionDescriptor atk_object_connect_property_change_handler$descriptor() {
        return atk_object_connect_property_change_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint atk_object_connect_property_change_handler(AtkObject *accessible, AtkPropertyChangeHandler *handler)
     * }
     */
    public static MethodHandle atk_object_connect_property_change_handler$handle() {
        return atk_object_connect_property_change_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint atk_object_connect_property_change_handler(AtkObject *accessible, AtkPropertyChangeHandler *handler)
     * }
     */
    public static int atk_object_connect_property_change_handler(MemorySegment accessible, MemorySegment handler) {
        var mh$ = atk_object_connect_property_change_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_connect_property_change_handler", accessible, handler);
            }
            return (int)mh$.invokeExact(accessible, handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_remove_property_change_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_remove_property_change_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_object_remove_property_change_handler(AtkObject *accessible, guint handler_id)
     * }
     */
    public static FunctionDescriptor atk_object_remove_property_change_handler$descriptor() {
        return atk_object_remove_property_change_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_object_remove_property_change_handler(AtkObject *accessible, guint handler_id)
     * }
     */
    public static MethodHandle atk_object_remove_property_change_handler$handle() {
        return atk_object_remove_property_change_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_object_remove_property_change_handler(AtkObject *accessible, guint handler_id)
     * }
     */
    public static void atk_object_remove_property_change_handler(MemorySegment accessible, int handler_id) {
        var mh$ = atk_object_remove_property_change_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_remove_property_change_handler", accessible, handler_id);
            }
            mh$.invokeExact(accessible, handler_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_notify_state_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_notify_state_change"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_object_notify_state_change(AtkObject *accessible, AtkState state, gboolean value)
     * }
     */
    public static FunctionDescriptor atk_object_notify_state_change$descriptor() {
        return atk_object_notify_state_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_object_notify_state_change(AtkObject *accessible, AtkState state, gboolean value)
     * }
     */
    public static MethodHandle atk_object_notify_state_change$handle() {
        return atk_object_notify_state_change.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_object_notify_state_change(AtkObject *accessible, AtkState state, gboolean value)
     * }
     */
    public static void atk_object_notify_state_change(MemorySegment accessible, long state, int value) {
        var mh$ = atk_object_notify_state_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_notify_state_change", accessible, state, value);
            }
            mh$.invokeExact(accessible, state, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_initialize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_initialize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_object_initialize(AtkObject *accessible, gpointer data)
     * }
     */
    public static FunctionDescriptor atk_object_initialize$descriptor() {
        return atk_object_initialize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_object_initialize(AtkObject *accessible, gpointer data)
     * }
     */
    public static MethodHandle atk_object_initialize$handle() {
        return atk_object_initialize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_object_initialize(AtkObject *accessible, gpointer data)
     * }
     */
    public static void atk_object_initialize(MemorySegment accessible, MemorySegment data) {
        var mh$ = atk_object_initialize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_initialize", accessible, data);
            }
            mh$.invokeExact(accessible, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_role_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_role_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_role_get_name(AtkRole role)
     * }
     */
    public static FunctionDescriptor atk_role_get_name$descriptor() {
        return atk_role_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_role_get_name(AtkRole role)
     * }
     */
    public static MethodHandle atk_role_get_name$handle() {
        return atk_role_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_role_get_name(AtkRole role)
     * }
     */
    public static MemorySegment atk_role_get_name(int role) {
        var mh$ = atk_role_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_role_get_name", role);
            }
            return (MemorySegment)mh$.invokeExact(role);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_role_for_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_role_for_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRole atk_role_for_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor atk_role_for_name$descriptor() {
        return atk_role_for_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRole atk_role_for_name(const gchar *name)
     * }
     */
    public static MethodHandle atk_role_for_name$handle() {
        return atk_role_for_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRole atk_role_for_name(const gchar *name)
     * }
     */
    public static int atk_role_for_name(MemorySegment name) {
        var mh$ = atk_role_for_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_role_for_name", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_add_relationship {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_add_relationship"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_object_add_relationship(AtkObject *object, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static FunctionDescriptor atk_object_add_relationship$descriptor() {
        return atk_object_add_relationship.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_object_add_relationship(AtkObject *object, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static MethodHandle atk_object_add_relationship$handle() {
        return atk_object_add_relationship.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_object_add_relationship(AtkObject *object, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static int atk_object_add_relationship(MemorySegment object, int relationship, MemorySegment target) {
        var mh$ = atk_object_add_relationship.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_add_relationship", object, relationship, target);
            }
            return (int)mh$.invokeExact(object, relationship, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_remove_relationship {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_remove_relationship"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_object_remove_relationship(AtkObject *object, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static FunctionDescriptor atk_object_remove_relationship$descriptor() {
        return atk_object_remove_relationship.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_object_remove_relationship(AtkObject *object, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static MethodHandle atk_object_remove_relationship$handle() {
        return atk_object_remove_relationship.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_object_remove_relationship(AtkObject *object, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static int atk_object_remove_relationship(MemorySegment object, int relationship, MemorySegment target) {
        var mh$ = atk_object_remove_relationship.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_remove_relationship", object, relationship, target);
            }
            return (int)mh$.invokeExact(object, relationship, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_role_get_localized_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_role_get_localized_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_role_get_localized_name(AtkRole role)
     * }
     */
    public static FunctionDescriptor atk_role_get_localized_name$descriptor() {
        return atk_role_get_localized_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_role_get_localized_name(AtkRole role)
     * }
     */
    public static MethodHandle atk_role_get_localized_name$handle() {
        return atk_role_get_localized_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_role_get_localized_name(AtkRole role)
     * }
     */
    public static MemorySegment atk_role_get_localized_name(int role) {
        var mh$ = atk_role_get_localized_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_role_get_localized_name", role);
            }
            return (MemorySegment)mh$.invokeExact(role);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_role_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_role_register"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRole atk_role_register(const gchar *name)
     * }
     */
    public static FunctionDescriptor atk_role_register$descriptor() {
        return atk_role_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRole atk_role_register(const gchar *name)
     * }
     */
    public static MethodHandle atk_role_register$handle() {
        return atk_role_register.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRole atk_role_register(const gchar *name)
     * }
     */
    public static int atk_role_register(MemorySegment name) {
        var mh$ = atk_role_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_role_register", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_object_locale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_object_locale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_object_locale(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_object_locale$descriptor() {
        return atk_object_get_object_locale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_object_locale(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_object_locale$handle() {
        return atk_object_get_object_locale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_object_locale(AtkObject *accessible)
     * }
     */
    public static MemorySegment atk_object_get_object_locale(MemorySegment accessible) {
        var mh$ = atk_object_get_object_locale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_object_locale", accessible);
            }
            return (MemorySegment)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_get_accessible_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_get_accessible_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_accessible_id(AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_object_get_accessible_id$descriptor() {
        return atk_object_get_accessible_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_accessible_id(AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_object_get_accessible_id$handle() {
        return atk_object_get_accessible_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_object_get_accessible_id(AtkObject *accessible)
     * }
     */
    public static MemorySegment atk_object_get_accessible_id(MemorySegment accessible) {
        var mh$ = atk_object_get_accessible_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_get_accessible_id", accessible);
            }
            return (MemorySegment)mh$.invokeExact(accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_set_accessible_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_set_accessible_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_object_set_accessible_id(AtkObject *accessible, const gchar *name)
     * }
     */
    public static FunctionDescriptor atk_object_set_accessible_id$descriptor() {
        return atk_object_set_accessible_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_object_set_accessible_id(AtkObject *accessible, const gchar *name)
     * }
     */
    public static MethodHandle atk_object_set_accessible_id$handle() {
        return atk_object_set_accessible_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_object_set_accessible_id(AtkObject *accessible, const gchar *name)
     * }
     */
    public static void atk_object_set_accessible_id(MemorySegment accessible, MemorySegment name) {
        var mh$ = atk_object_set_accessible_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_set_accessible_id", accessible, name);
            }
            mh$.invokeExact(accessible, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_action_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_action_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_action_get_type()
     * }
     */
    public static FunctionDescriptor atk_action_get_type$descriptor() {
        return atk_action_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_action_get_type()
     * }
     */
    public static MethodHandle atk_action_get_type$handle() {
        return atk_action_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_action_get_type()
     * }
     */
    public static long atk_action_get_type() {
        var mh$ = atk_action_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_action_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_action_do_action {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_action_do_action"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_action_do_action(AtkAction *action, gint i)
     * }
     */
    public static FunctionDescriptor atk_action_do_action$descriptor() {
        return atk_action_do_action.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_action_do_action(AtkAction *action, gint i)
     * }
     */
    public static MethodHandle atk_action_do_action$handle() {
        return atk_action_do_action.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_action_do_action(AtkAction *action, gint i)
     * }
     */
    public static int atk_action_do_action(MemorySegment action, int i) {
        var mh$ = atk_action_do_action.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_action_do_action", action, i);
            }
            return (int)mh$.invokeExact(action, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_action_get_n_actions {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_action_get_n_actions"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_action_get_n_actions(AtkAction *action)
     * }
     */
    public static FunctionDescriptor atk_action_get_n_actions$descriptor() {
        return atk_action_get_n_actions.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_action_get_n_actions(AtkAction *action)
     * }
     */
    public static MethodHandle atk_action_get_n_actions$handle() {
        return atk_action_get_n_actions.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_action_get_n_actions(AtkAction *action)
     * }
     */
    public static int atk_action_get_n_actions(MemorySegment action) {
        var mh$ = atk_action_get_n_actions.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_action_get_n_actions", action);
            }
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_action_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_action_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_description(AtkAction *action, gint i)
     * }
     */
    public static FunctionDescriptor atk_action_get_description$descriptor() {
        return atk_action_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_description(AtkAction *action, gint i)
     * }
     */
    public static MethodHandle atk_action_get_description$handle() {
        return atk_action_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_description(AtkAction *action, gint i)
     * }
     */
    public static MemorySegment atk_action_get_description(MemorySegment action, int i) {
        var mh$ = atk_action_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_action_get_description", action, i);
            }
            return (MemorySegment)mh$.invokeExact(action, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_action_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_action_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_name(AtkAction *action, gint i)
     * }
     */
    public static FunctionDescriptor atk_action_get_name$descriptor() {
        return atk_action_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_name(AtkAction *action, gint i)
     * }
     */
    public static MethodHandle atk_action_get_name$handle() {
        return atk_action_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_name(AtkAction *action, gint i)
     * }
     */
    public static MemorySegment atk_action_get_name(MemorySegment action, int i) {
        var mh$ = atk_action_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_action_get_name", action, i);
            }
            return (MemorySegment)mh$.invokeExact(action, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_action_get_keybinding {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_action_get_keybinding"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_keybinding(AtkAction *action, gint i)
     * }
     */
    public static FunctionDescriptor atk_action_get_keybinding$descriptor() {
        return atk_action_get_keybinding.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_keybinding(AtkAction *action, gint i)
     * }
     */
    public static MethodHandle atk_action_get_keybinding$handle() {
        return atk_action_get_keybinding.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_keybinding(AtkAction *action, gint i)
     * }
     */
    public static MemorySegment atk_action_get_keybinding(MemorySegment action, int i) {
        var mh$ = atk_action_get_keybinding.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_action_get_keybinding", action, i);
            }
            return (MemorySegment)mh$.invokeExact(action, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_action_set_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_action_set_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_action_set_description(AtkAction *action, gint i, const gchar *desc)
     * }
     */
    public static FunctionDescriptor atk_action_set_description$descriptor() {
        return atk_action_set_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_action_set_description(AtkAction *action, gint i, const gchar *desc)
     * }
     */
    public static MethodHandle atk_action_set_description$handle() {
        return atk_action_set_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_action_set_description(AtkAction *action, gint i, const gchar *desc)
     * }
     */
    public static int atk_action_set_description(MemorySegment action, int i, MemorySegment desc) {
        var mh$ = atk_action_set_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_action_set_description", action, i, desc);
            }
            return (int)mh$.invokeExact(action, i, desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_action_get_localized_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_action_get_localized_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_localized_name(AtkAction *action, gint i)
     * }
     */
    public static FunctionDescriptor atk_action_get_localized_name$descriptor() {
        return atk_action_get_localized_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_localized_name(AtkAction *action, gint i)
     * }
     */
    public static MethodHandle atk_action_get_localized_name$handle() {
        return atk_action_get_localized_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_action_get_localized_name(AtkAction *action, gint i)
     * }
     */
    public static MemorySegment atk_action_get_localized_name(MemorySegment action, int i) {
        var mh$ = atk_action_get_localized_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_action_get_localized_name", action, i);
            }
            return (MemorySegment)mh$.invokeExact(action, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ATK_KEY_EVENT_PRESS = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_KEY_EVENT_PRESS = 0
     * }
     */
    public static int ATK_KEY_EVENT_PRESS() {
        return ATK_KEY_EVENT_PRESS;
    }
    private static final int ATK_KEY_EVENT_RELEASE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_KEY_EVENT_RELEASE = 1
     * }
     */
    public static int ATK_KEY_EVENT_RELEASE() {
        return ATK_KEY_EVENT_RELEASE;
    }
    private static final int ATK_KEY_EVENT_LAST_DEFINED = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_KEY_EVENT_LAST_DEFINED = 2
     * }
     */
    public static int ATK_KEY_EVENT_LAST_DEFINED() {
        return ATK_KEY_EVENT_LAST_DEFINED;
    }

    private static class atk_util_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_util_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_util_get_type()
     * }
     */
    public static FunctionDescriptor atk_util_get_type$descriptor() {
        return atk_util_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_util_get_type()
     * }
     */
    public static MethodHandle atk_util_get_type$handle() {
        return atk_util_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_util_get_type()
     * }
     */
    public static long atk_util_get_type() {
        var mh$ = atk_util_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_util_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ATK_XY_SCREEN = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_XY_SCREEN = 0
     * }
     */
    public static int ATK_XY_SCREEN() {
        return ATK_XY_SCREEN;
    }
    private static final int ATK_XY_WINDOW = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_XY_WINDOW = 1
     * }
     */
    public static int ATK_XY_WINDOW() {
        return ATK_XY_WINDOW;
    }
    private static final int ATK_XY_PARENT = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_XY_PARENT = 2
     * }
     */
    public static int ATK_XY_PARENT() {
        return ATK_XY_PARENT;
    }

    private static class atk_add_focus_tracker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_add_focus_tracker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint atk_add_focus_tracker(AtkEventListener focus_tracker)
     * }
     */
    public static FunctionDescriptor atk_add_focus_tracker$descriptor() {
        return atk_add_focus_tracker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint atk_add_focus_tracker(AtkEventListener focus_tracker)
     * }
     */
    public static MethodHandle atk_add_focus_tracker$handle() {
        return atk_add_focus_tracker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint atk_add_focus_tracker(AtkEventListener focus_tracker)
     * }
     */
    public static int atk_add_focus_tracker(MemorySegment focus_tracker) {
        var mh$ = atk_add_focus_tracker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_add_focus_tracker", focus_tracker);
            }
            return (int)mh$.invokeExact(focus_tracker);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_remove_focus_tracker {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_remove_focus_tracker"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_remove_focus_tracker(guint tracker_id)
     * }
     */
    public static FunctionDescriptor atk_remove_focus_tracker$descriptor() {
        return atk_remove_focus_tracker.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_remove_focus_tracker(guint tracker_id)
     * }
     */
    public static MethodHandle atk_remove_focus_tracker$handle() {
        return atk_remove_focus_tracker.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_remove_focus_tracker(guint tracker_id)
     * }
     */
    public static void atk_remove_focus_tracker(int tracker_id) {
        var mh$ = atk_remove_focus_tracker.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_remove_focus_tracker", tracker_id);
            }
            mh$.invokeExact(tracker_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_focus_tracker_init {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_focus_tracker_init"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_focus_tracker_init(AtkEventListenerInit init)
     * }
     */
    public static FunctionDescriptor atk_focus_tracker_init$descriptor() {
        return atk_focus_tracker_init.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_focus_tracker_init(AtkEventListenerInit init)
     * }
     */
    public static MethodHandle atk_focus_tracker_init$handle() {
        return atk_focus_tracker_init.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_focus_tracker_init(AtkEventListenerInit init)
     * }
     */
    public static void atk_focus_tracker_init(MemorySegment init) {
        var mh$ = atk_focus_tracker_init.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_focus_tracker_init", init);
            }
            mh$.invokeExact(init);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_focus_tracker_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_focus_tracker_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_focus_tracker_notify(AtkObject *object)
     * }
     */
    public static FunctionDescriptor atk_focus_tracker_notify$descriptor() {
        return atk_focus_tracker_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_focus_tracker_notify(AtkObject *object)
     * }
     */
    public static MethodHandle atk_focus_tracker_notify$handle() {
        return atk_focus_tracker_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_focus_tracker_notify(AtkObject *object)
     * }
     */
    public static void atk_focus_tracker_notify(MemorySegment object) {
        var mh$ = atk_focus_tracker_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_focus_tracker_notify", object);
            }
            mh$.invokeExact(object);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_add_global_event_listener {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_add_global_event_listener"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint atk_add_global_event_listener(GSignalEmissionHook listener, const gchar *event_type)
     * }
     */
    public static FunctionDescriptor atk_add_global_event_listener$descriptor() {
        return atk_add_global_event_listener.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint atk_add_global_event_listener(GSignalEmissionHook listener, const gchar *event_type)
     * }
     */
    public static MethodHandle atk_add_global_event_listener$handle() {
        return atk_add_global_event_listener.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint atk_add_global_event_listener(GSignalEmissionHook listener, const gchar *event_type)
     * }
     */
    public static int atk_add_global_event_listener(MemorySegment listener, MemorySegment event_type) {
        var mh$ = atk_add_global_event_listener.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_add_global_event_listener", listener, event_type);
            }
            return (int)mh$.invokeExact(listener, event_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_remove_global_event_listener {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_remove_global_event_listener"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_remove_global_event_listener(guint listener_id)
     * }
     */
    public static FunctionDescriptor atk_remove_global_event_listener$descriptor() {
        return atk_remove_global_event_listener.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_remove_global_event_listener(guint listener_id)
     * }
     */
    public static MethodHandle atk_remove_global_event_listener$handle() {
        return atk_remove_global_event_listener.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_remove_global_event_listener(guint listener_id)
     * }
     */
    public static void atk_remove_global_event_listener(int listener_id) {
        var mh$ = atk_remove_global_event_listener.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_remove_global_event_listener", listener_id);
            }
            mh$.invokeExact(listener_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_add_key_event_listener {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_add_key_event_listener"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint atk_add_key_event_listener(AtkKeySnoopFunc listener, gpointer data)
     * }
     */
    public static FunctionDescriptor atk_add_key_event_listener$descriptor() {
        return atk_add_key_event_listener.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint atk_add_key_event_listener(AtkKeySnoopFunc listener, gpointer data)
     * }
     */
    public static MethodHandle atk_add_key_event_listener$handle() {
        return atk_add_key_event_listener.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint atk_add_key_event_listener(AtkKeySnoopFunc listener, gpointer data)
     * }
     */
    public static int atk_add_key_event_listener(MemorySegment listener, MemorySegment data) {
        var mh$ = atk_add_key_event_listener.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_add_key_event_listener", listener, data);
            }
            return (int)mh$.invokeExact(listener, data);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_remove_key_event_listener {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_remove_key_event_listener"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_remove_key_event_listener(guint listener_id)
     * }
     */
    public static FunctionDescriptor atk_remove_key_event_listener$descriptor() {
        return atk_remove_key_event_listener.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_remove_key_event_listener(guint listener_id)
     * }
     */
    public static MethodHandle atk_remove_key_event_listener$handle() {
        return atk_remove_key_event_listener.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_remove_key_event_listener(guint listener_id)
     * }
     */
    public static void atk_remove_key_event_listener(int listener_id) {
        var mh$ = atk_remove_key_event_listener.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_remove_key_event_listener", listener_id);
            }
            mh$.invokeExact(listener_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_get_root {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_root"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_get_root()
     * }
     */
    public static FunctionDescriptor atk_get_root$descriptor() {
        return atk_get_root.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_get_root()
     * }
     */
    public static MethodHandle atk_get_root$handle() {
        return atk_get_root.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_get_root()
     * }
     */
    public static MemorySegment atk_get_root() {
        var mh$ = atk_get_root.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_root");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_get_focus_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_focus_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_get_focus_object()
     * }
     */
    public static FunctionDescriptor atk_get_focus_object$descriptor() {
        return atk_get_focus_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_get_focus_object()
     * }
     */
    public static MethodHandle atk_get_focus_object$handle() {
        return atk_get_focus_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_get_focus_object()
     * }
     */
    public static MemorySegment atk_get_focus_object() {
        var mh$ = atk_get_focus_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_focus_object");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_get_toolkit_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_toolkit_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_get_toolkit_name()
     * }
     */
    public static FunctionDescriptor atk_get_toolkit_name$descriptor() {
        return atk_get_toolkit_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_get_toolkit_name()
     * }
     */
    public static MethodHandle atk_get_toolkit_name$handle() {
        return atk_get_toolkit_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_get_toolkit_name()
     * }
     */
    public static MemorySegment atk_get_toolkit_name() {
        var mh$ = atk_get_toolkit_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_toolkit_name");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_get_toolkit_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_toolkit_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_get_toolkit_version()
     * }
     */
    public static FunctionDescriptor atk_get_toolkit_version$descriptor() {
        return atk_get_toolkit_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_get_toolkit_version()
     * }
     */
    public static MethodHandle atk_get_toolkit_version$handle() {
        return atk_get_toolkit_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_get_toolkit_version()
     * }
     */
    public static MemorySegment atk_get_toolkit_version() {
        var mh$ = atk_get_toolkit_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_toolkit_version");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_get_version {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_version"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_get_version()
     * }
     */
    public static FunctionDescriptor atk_get_version$descriptor() {
        return atk_get_version.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_get_version()
     * }
     */
    public static MethodHandle atk_get_version$handle() {
        return atk_get_version.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_get_version()
     * }
     */
    public static MemorySegment atk_get_version() {
        var mh$ = atk_get_version.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_version");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ATK_SCROLL_TOP_LEFT = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_SCROLL_TOP_LEFT = 0
     * }
     */
    public static int ATK_SCROLL_TOP_LEFT() {
        return ATK_SCROLL_TOP_LEFT;
    }
    private static final int ATK_SCROLL_BOTTOM_RIGHT = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_SCROLL_BOTTOM_RIGHT = 1
     * }
     */
    public static int ATK_SCROLL_BOTTOM_RIGHT() {
        return ATK_SCROLL_BOTTOM_RIGHT;
    }
    private static final int ATK_SCROLL_TOP_EDGE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_SCROLL_TOP_EDGE = 2
     * }
     */
    public static int ATK_SCROLL_TOP_EDGE() {
        return ATK_SCROLL_TOP_EDGE;
    }
    private static final int ATK_SCROLL_BOTTOM_EDGE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_SCROLL_BOTTOM_EDGE = 3
     * }
     */
    public static int ATK_SCROLL_BOTTOM_EDGE() {
        return ATK_SCROLL_BOTTOM_EDGE;
    }
    private static final int ATK_SCROLL_LEFT_EDGE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_SCROLL_LEFT_EDGE = 4
     * }
     */
    public static int ATK_SCROLL_LEFT_EDGE() {
        return ATK_SCROLL_LEFT_EDGE;
    }
    private static final int ATK_SCROLL_RIGHT_EDGE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_SCROLL_RIGHT_EDGE = 5
     * }
     */
    public static int ATK_SCROLL_RIGHT_EDGE() {
        return ATK_SCROLL_RIGHT_EDGE;
    }
    private static final int ATK_SCROLL_ANYWHERE = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_SCROLL_ANYWHERE = 6
     * }
     */
    public static int ATK_SCROLL_ANYWHERE() {
        return ATK_SCROLL_ANYWHERE;
    }

    private static class atk_rectangle_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_rectangle_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_rectangle_get_type()
     * }
     */
    public static FunctionDescriptor atk_rectangle_get_type$descriptor() {
        return atk_rectangle_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_rectangle_get_type()
     * }
     */
    public static MethodHandle atk_rectangle_get_type$handle() {
        return atk_rectangle_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_rectangle_get_type()
     * }
     */
    public static long atk_rectangle_get_type() {
        var mh$ = atk_rectangle_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_rectangle_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_component_get_type()
     * }
     */
    public static FunctionDescriptor atk_component_get_type$descriptor() {
        return atk_component_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_component_get_type()
     * }
     */
    public static MethodHandle atk_component_get_type$handle() {
        return atk_component_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_component_get_type()
     * }
     */
    public static long atk_component_get_type() {
        var mh$ = atk_component_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_add_focus_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_add_focus_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint atk_component_add_focus_handler(AtkComponent *component, AtkFocusHandler handler)
     * }
     */
    public static FunctionDescriptor atk_component_add_focus_handler$descriptor() {
        return atk_component_add_focus_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint atk_component_add_focus_handler(AtkComponent *component, AtkFocusHandler handler)
     * }
     */
    public static MethodHandle atk_component_add_focus_handler$handle() {
        return atk_component_add_focus_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint atk_component_add_focus_handler(AtkComponent *component, AtkFocusHandler handler)
     * }
     */
    public static int atk_component_add_focus_handler(MemorySegment component, MemorySegment handler) {
        var mh$ = atk_component_add_focus_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_add_focus_handler", component, handler);
            }
            return (int)mh$.invokeExact(component, handler);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_contains {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_contains"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_component_contains(AtkComponent *component, gint x, gint y, AtkCoordType coord_type)
     * }
     */
    public static FunctionDescriptor atk_component_contains$descriptor() {
        return atk_component_contains.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_component_contains(AtkComponent *component, gint x, gint y, AtkCoordType coord_type)
     * }
     */
    public static MethodHandle atk_component_contains$handle() {
        return atk_component_contains.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_component_contains(AtkComponent *component, gint x, gint y, AtkCoordType coord_type)
     * }
     */
    public static int atk_component_contains(MemorySegment component, int x, int y, int coord_type) {
        var mh$ = atk_component_contains.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_contains", component, x, y, coord_type);
            }
            return (int)mh$.invokeExact(component, x, y, coord_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_ref_accessible_at_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_ref_accessible_at_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_component_ref_accessible_at_point(AtkComponent *component, gint x, gint y, AtkCoordType coord_type)
     * }
     */
    public static FunctionDescriptor atk_component_ref_accessible_at_point$descriptor() {
        return atk_component_ref_accessible_at_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_component_ref_accessible_at_point(AtkComponent *component, gint x, gint y, AtkCoordType coord_type)
     * }
     */
    public static MethodHandle atk_component_ref_accessible_at_point$handle() {
        return atk_component_ref_accessible_at_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_component_ref_accessible_at_point(AtkComponent *component, gint x, gint y, AtkCoordType coord_type)
     * }
     */
    public static MemorySegment atk_component_ref_accessible_at_point(MemorySegment component, int x, int y, int coord_type) {
        var mh$ = atk_component_ref_accessible_at_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_ref_accessible_at_point", component, x, y, coord_type);
            }
            return (MemorySegment)mh$.invokeExact(component, x, y, coord_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_get_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_get_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_component_get_extents(AtkComponent *component, gint *x, gint *y, gint *width, gint *height, AtkCoordType coord_type)
     * }
     */
    public static FunctionDescriptor atk_component_get_extents$descriptor() {
        return atk_component_get_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_component_get_extents(AtkComponent *component, gint *x, gint *y, gint *width, gint *height, AtkCoordType coord_type)
     * }
     */
    public static MethodHandle atk_component_get_extents$handle() {
        return atk_component_get_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_component_get_extents(AtkComponent *component, gint *x, gint *y, gint *width, gint *height, AtkCoordType coord_type)
     * }
     */
    public static void atk_component_get_extents(MemorySegment component, MemorySegment x, MemorySegment y, MemorySegment width, MemorySegment height, int coord_type) {
        var mh$ = atk_component_get_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_get_extents", component, x, y, width, height, coord_type);
            }
            mh$.invokeExact(component, x, y, width, height, coord_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_component_get_position(AtkComponent *component, gint *x, gint *y, AtkCoordType coord_type)
     * }
     */
    public static FunctionDescriptor atk_component_get_position$descriptor() {
        return atk_component_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_component_get_position(AtkComponent *component, gint *x, gint *y, AtkCoordType coord_type)
     * }
     */
    public static MethodHandle atk_component_get_position$handle() {
        return atk_component_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_component_get_position(AtkComponent *component, gint *x, gint *y, AtkCoordType coord_type)
     * }
     */
    public static void atk_component_get_position(MemorySegment component, MemorySegment x, MemorySegment y, int coord_type) {
        var mh$ = atk_component_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_get_position", component, x, y, coord_type);
            }
            mh$.invokeExact(component, x, y, coord_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_get_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_get_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_component_get_size(AtkComponent *component, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor atk_component_get_size$descriptor() {
        return atk_component_get_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_component_get_size(AtkComponent *component, gint *width, gint *height)
     * }
     */
    public static MethodHandle atk_component_get_size$handle() {
        return atk_component_get_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_component_get_size(AtkComponent *component, gint *width, gint *height)
     * }
     */
    public static void atk_component_get_size(MemorySegment component, MemorySegment width, MemorySegment height) {
        var mh$ = atk_component_get_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_get_size", component, width, height);
            }
            mh$.invokeExact(component, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_get_layer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_get_layer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkLayer atk_component_get_layer(AtkComponent *component)
     * }
     */
    public static FunctionDescriptor atk_component_get_layer$descriptor() {
        return atk_component_get_layer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkLayer atk_component_get_layer(AtkComponent *component)
     * }
     */
    public static MethodHandle atk_component_get_layer$handle() {
        return atk_component_get_layer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkLayer atk_component_get_layer(AtkComponent *component)
     * }
     */
    public static int atk_component_get_layer(MemorySegment component) {
        var mh$ = atk_component_get_layer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_get_layer", component);
            }
            return (int)mh$.invokeExact(component);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_get_mdi_zorder {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_get_mdi_zorder"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_component_get_mdi_zorder(AtkComponent *component)
     * }
     */
    public static FunctionDescriptor atk_component_get_mdi_zorder$descriptor() {
        return atk_component_get_mdi_zorder.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_component_get_mdi_zorder(AtkComponent *component)
     * }
     */
    public static MethodHandle atk_component_get_mdi_zorder$handle() {
        return atk_component_get_mdi_zorder.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_component_get_mdi_zorder(AtkComponent *component)
     * }
     */
    public static int atk_component_get_mdi_zorder(MemorySegment component) {
        var mh$ = atk_component_get_mdi_zorder.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_get_mdi_zorder", component);
            }
            return (int)mh$.invokeExact(component);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_grab_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_grab_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_component_grab_focus(AtkComponent *component)
     * }
     */
    public static FunctionDescriptor atk_component_grab_focus$descriptor() {
        return atk_component_grab_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_component_grab_focus(AtkComponent *component)
     * }
     */
    public static MethodHandle atk_component_grab_focus$handle() {
        return atk_component_grab_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_component_grab_focus(AtkComponent *component)
     * }
     */
    public static int atk_component_grab_focus(MemorySegment component) {
        var mh$ = atk_component_grab_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_grab_focus", component);
            }
            return (int)mh$.invokeExact(component);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_remove_focus_handler {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_remove_focus_handler"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_component_remove_focus_handler(AtkComponent *component, guint handler_id)
     * }
     */
    public static FunctionDescriptor atk_component_remove_focus_handler$descriptor() {
        return atk_component_remove_focus_handler.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_component_remove_focus_handler(AtkComponent *component, guint handler_id)
     * }
     */
    public static MethodHandle atk_component_remove_focus_handler$handle() {
        return atk_component_remove_focus_handler.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_component_remove_focus_handler(AtkComponent *component, guint handler_id)
     * }
     */
    public static void atk_component_remove_focus_handler(MemorySegment component, int handler_id) {
        var mh$ = atk_component_remove_focus_handler.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_remove_focus_handler", component, handler_id);
            }
            mh$.invokeExact(component, handler_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_set_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_set_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_component_set_extents(AtkComponent *component, gint x, gint y, gint width, gint height, AtkCoordType coord_type)
     * }
     */
    public static FunctionDescriptor atk_component_set_extents$descriptor() {
        return atk_component_set_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_component_set_extents(AtkComponent *component, gint x, gint y, gint width, gint height, AtkCoordType coord_type)
     * }
     */
    public static MethodHandle atk_component_set_extents$handle() {
        return atk_component_set_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_component_set_extents(AtkComponent *component, gint x, gint y, gint width, gint height, AtkCoordType coord_type)
     * }
     */
    public static int atk_component_set_extents(MemorySegment component, int x, int y, int width, int height, int coord_type) {
        var mh$ = atk_component_set_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_set_extents", component, x, y, width, height, coord_type);
            }
            return (int)mh$.invokeExact(component, x, y, width, height, coord_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_set_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_set_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_component_set_position(AtkComponent *component, gint x, gint y, AtkCoordType coord_type)
     * }
     */
    public static FunctionDescriptor atk_component_set_position$descriptor() {
        return atk_component_set_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_component_set_position(AtkComponent *component, gint x, gint y, AtkCoordType coord_type)
     * }
     */
    public static MethodHandle atk_component_set_position$handle() {
        return atk_component_set_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_component_set_position(AtkComponent *component, gint x, gint y, AtkCoordType coord_type)
     * }
     */
    public static int atk_component_set_position(MemorySegment component, int x, int y, int coord_type) {
        var mh$ = atk_component_set_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_set_position", component, x, y, coord_type);
            }
            return (int)mh$.invokeExact(component, x, y, coord_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_set_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_set_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_component_set_size(AtkComponent *component, gint width, gint height)
     * }
     */
    public static FunctionDescriptor atk_component_set_size$descriptor() {
        return atk_component_set_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_component_set_size(AtkComponent *component, gint width, gint height)
     * }
     */
    public static MethodHandle atk_component_set_size$handle() {
        return atk_component_set_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_component_set_size(AtkComponent *component, gint width, gint height)
     * }
     */
    public static int atk_component_set_size(MemorySegment component, int width, int height) {
        var mh$ = atk_component_set_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_set_size", component, width, height);
            }
            return (int)mh$.invokeExact(component, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_get_alpha {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_get_alpha"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble atk_component_get_alpha(AtkComponent *component)
     * }
     */
    public static FunctionDescriptor atk_component_get_alpha$descriptor() {
        return atk_component_get_alpha.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble atk_component_get_alpha(AtkComponent *component)
     * }
     */
    public static MethodHandle atk_component_get_alpha$handle() {
        return atk_component_get_alpha.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble atk_component_get_alpha(AtkComponent *component)
     * }
     */
    public static double atk_component_get_alpha(MemorySegment component) {
        var mh$ = atk_component_get_alpha.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_get_alpha", component);
            }
            return (double)mh$.invokeExact(component);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_scroll_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_scroll_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_component_scroll_to(AtkComponent *component, AtkScrollType type)
     * }
     */
    public static FunctionDescriptor atk_component_scroll_to$descriptor() {
        return atk_component_scroll_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_component_scroll_to(AtkComponent *component, AtkScrollType type)
     * }
     */
    public static MethodHandle atk_component_scroll_to$handle() {
        return atk_component_scroll_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_component_scroll_to(AtkComponent *component, AtkScrollType type)
     * }
     */
    public static int atk_component_scroll_to(MemorySegment component, int type) {
        var mh$ = atk_component_scroll_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_scroll_to", component, type);
            }
            return (int)mh$.invokeExact(component, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_component_scroll_to_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_component_scroll_to_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_component_scroll_to_point(AtkComponent *component, AtkCoordType coords, gint x, gint y)
     * }
     */
    public static FunctionDescriptor atk_component_scroll_to_point$descriptor() {
        return atk_component_scroll_to_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_component_scroll_to_point(AtkComponent *component, AtkCoordType coords, gint x, gint y)
     * }
     */
    public static MethodHandle atk_component_scroll_to_point$handle() {
        return atk_component_scroll_to_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_component_scroll_to_point(AtkComponent *component, AtkCoordType coords, gint x, gint y)
     * }
     */
    public static int atk_component_scroll_to_point(MemorySegment component, int coords, int x, int y) {
        var mh$ = atk_component_scroll_to_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_component_scroll_to_point", component, coords, x, y);
            }
            return (int)mh$.invokeExact(component, coords, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_document_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_document_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_document_get_type()
     * }
     */
    public static FunctionDescriptor atk_document_get_type$descriptor() {
        return atk_document_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_document_get_type()
     * }
     */
    public static MethodHandle atk_document_get_type$handle() {
        return atk_document_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_document_get_type()
     * }
     */
    public static long atk_document_get_type() {
        var mh$ = atk_document_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_document_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_document_get_document_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_document_get_document_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_document_get_document_type(AtkDocument *document)
     * }
     */
    public static FunctionDescriptor atk_document_get_document_type$descriptor() {
        return atk_document_get_document_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_document_get_document_type(AtkDocument *document)
     * }
     */
    public static MethodHandle atk_document_get_document_type$handle() {
        return atk_document_get_document_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_document_get_document_type(AtkDocument *document)
     * }
     */
    public static MemorySegment atk_document_get_document_type(MemorySegment document) {
        var mh$ = atk_document_get_document_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_document_get_document_type", document);
            }
            return (MemorySegment)mh$.invokeExact(document);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_document_get_document {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_document_get_document"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gpointer atk_document_get_document(AtkDocument *document)
     * }
     */
    public static FunctionDescriptor atk_document_get_document$descriptor() {
        return atk_document_get_document.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gpointer atk_document_get_document(AtkDocument *document)
     * }
     */
    public static MethodHandle atk_document_get_document$handle() {
        return atk_document_get_document.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gpointer atk_document_get_document(AtkDocument *document)
     * }
     */
    public static MemorySegment atk_document_get_document(MemorySegment document) {
        var mh$ = atk_document_get_document.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_document_get_document", document);
            }
            return (MemorySegment)mh$.invokeExact(document);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_document_get_locale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_document_get_locale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_document_get_locale(AtkDocument *document)
     * }
     */
    public static FunctionDescriptor atk_document_get_locale$descriptor() {
        return atk_document_get_locale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_document_get_locale(AtkDocument *document)
     * }
     */
    public static MethodHandle atk_document_get_locale$handle() {
        return atk_document_get_locale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_document_get_locale(AtkDocument *document)
     * }
     */
    public static MemorySegment atk_document_get_locale(MemorySegment document) {
        var mh$ = atk_document_get_locale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_document_get_locale", document);
            }
            return (MemorySegment)mh$.invokeExact(document);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_document_get_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_document_get_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_document_get_attributes(AtkDocument *document)
     * }
     */
    public static FunctionDescriptor atk_document_get_attributes$descriptor() {
        return atk_document_get_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_document_get_attributes(AtkDocument *document)
     * }
     */
    public static MethodHandle atk_document_get_attributes$handle() {
        return atk_document_get_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_document_get_attributes(AtkDocument *document)
     * }
     */
    public static MemorySegment atk_document_get_attributes(MemorySegment document) {
        var mh$ = atk_document_get_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_document_get_attributes", document);
            }
            return (MemorySegment)mh$.invokeExact(document);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_document_get_attribute_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_document_get_attribute_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_document_get_attribute_value(AtkDocument *document, const gchar *attribute_name)
     * }
     */
    public static FunctionDescriptor atk_document_get_attribute_value$descriptor() {
        return atk_document_get_attribute_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_document_get_attribute_value(AtkDocument *document, const gchar *attribute_name)
     * }
     */
    public static MethodHandle atk_document_get_attribute_value$handle() {
        return atk_document_get_attribute_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_document_get_attribute_value(AtkDocument *document, const gchar *attribute_name)
     * }
     */
    public static MemorySegment atk_document_get_attribute_value(MemorySegment document, MemorySegment attribute_name) {
        var mh$ = atk_document_get_attribute_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_document_get_attribute_value", document, attribute_name);
            }
            return (MemorySegment)mh$.invokeExact(document, attribute_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_document_set_attribute_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_document_set_attribute_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_document_set_attribute_value(AtkDocument *document, const gchar *attribute_name, const gchar *attribute_value)
     * }
     */
    public static FunctionDescriptor atk_document_set_attribute_value$descriptor() {
        return atk_document_set_attribute_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_document_set_attribute_value(AtkDocument *document, const gchar *attribute_name, const gchar *attribute_value)
     * }
     */
    public static MethodHandle atk_document_set_attribute_value$handle() {
        return atk_document_set_attribute_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_document_set_attribute_value(AtkDocument *document, const gchar *attribute_name, const gchar *attribute_value)
     * }
     */
    public static int atk_document_set_attribute_value(MemorySegment document, MemorySegment attribute_name, MemorySegment attribute_value) {
        var mh$ = atk_document_set_attribute_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_document_set_attribute_value", document, attribute_name, attribute_value);
            }
            return (int)mh$.invokeExact(document, attribute_name, attribute_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_document_get_current_page_number {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_document_get_current_page_number"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_document_get_current_page_number(AtkDocument *document)
     * }
     */
    public static FunctionDescriptor atk_document_get_current_page_number$descriptor() {
        return atk_document_get_current_page_number.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_document_get_current_page_number(AtkDocument *document)
     * }
     */
    public static MethodHandle atk_document_get_current_page_number$handle() {
        return atk_document_get_current_page_number.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_document_get_current_page_number(AtkDocument *document)
     * }
     */
    public static int atk_document_get_current_page_number(MemorySegment document) {
        var mh$ = atk_document_get_current_page_number.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_document_get_current_page_number", document);
            }
            return (int)mh$.invokeExact(document);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_document_get_page_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_document_get_page_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_document_get_page_count(AtkDocument *document)
     * }
     */
    public static FunctionDescriptor atk_document_get_page_count$descriptor() {
        return atk_document_get_page_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_document_get_page_count(AtkDocument *document)
     * }
     */
    public static MethodHandle atk_document_get_page_count$handle() {
        return atk_document_get_page_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_document_get_page_count(AtkDocument *document)
     * }
     */
    public static int atk_document_get_page_count(MemorySegment document) {
        var mh$ = atk_document_get_page_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_document_get_page_count", document);
            }
            return (int)mh$.invokeExact(document);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ATK_TEXT_ATTR_INVALID = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_INVALID = 0
     * }
     */
    public static int ATK_TEXT_ATTR_INVALID() {
        return ATK_TEXT_ATTR_INVALID;
    }
    private static final int ATK_TEXT_ATTR_LEFT_MARGIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_LEFT_MARGIN = 1
     * }
     */
    public static int ATK_TEXT_ATTR_LEFT_MARGIN() {
        return ATK_TEXT_ATTR_LEFT_MARGIN;
    }
    private static final int ATK_TEXT_ATTR_RIGHT_MARGIN = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_RIGHT_MARGIN = 2
     * }
     */
    public static int ATK_TEXT_ATTR_RIGHT_MARGIN() {
        return ATK_TEXT_ATTR_RIGHT_MARGIN;
    }
    private static final int ATK_TEXT_ATTR_INDENT = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_INDENT = 3
     * }
     */
    public static int ATK_TEXT_ATTR_INDENT() {
        return ATK_TEXT_ATTR_INDENT;
    }
    private static final int ATK_TEXT_ATTR_INVISIBLE = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_INVISIBLE = 4
     * }
     */
    public static int ATK_TEXT_ATTR_INVISIBLE() {
        return ATK_TEXT_ATTR_INVISIBLE;
    }
    private static final int ATK_TEXT_ATTR_EDITABLE = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_EDITABLE = 5
     * }
     */
    public static int ATK_TEXT_ATTR_EDITABLE() {
        return ATK_TEXT_ATTR_EDITABLE;
    }
    private static final int ATK_TEXT_ATTR_PIXELS_ABOVE_LINES = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_PIXELS_ABOVE_LINES = 6
     * }
     */
    public static int ATK_TEXT_ATTR_PIXELS_ABOVE_LINES() {
        return ATK_TEXT_ATTR_PIXELS_ABOVE_LINES;
    }
    private static final int ATK_TEXT_ATTR_PIXELS_BELOW_LINES = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_PIXELS_BELOW_LINES = 7
     * }
     */
    public static int ATK_TEXT_ATTR_PIXELS_BELOW_LINES() {
        return ATK_TEXT_ATTR_PIXELS_BELOW_LINES;
    }
    private static final int ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP = 8
     * }
     */
    public static int ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP() {
        return ATK_TEXT_ATTR_PIXELS_INSIDE_WRAP;
    }
    private static final int ATK_TEXT_ATTR_BG_FULL_HEIGHT = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_BG_FULL_HEIGHT = 9
     * }
     */
    public static int ATK_TEXT_ATTR_BG_FULL_HEIGHT() {
        return ATK_TEXT_ATTR_BG_FULL_HEIGHT;
    }
    private static final int ATK_TEXT_ATTR_RISE = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_RISE = 10
     * }
     */
    public static int ATK_TEXT_ATTR_RISE() {
        return ATK_TEXT_ATTR_RISE;
    }
    private static final int ATK_TEXT_ATTR_UNDERLINE = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_UNDERLINE = 11
     * }
     */
    public static int ATK_TEXT_ATTR_UNDERLINE() {
        return ATK_TEXT_ATTR_UNDERLINE;
    }
    private static final int ATK_TEXT_ATTR_STRIKETHROUGH = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_STRIKETHROUGH = 12
     * }
     */
    public static int ATK_TEXT_ATTR_STRIKETHROUGH() {
        return ATK_TEXT_ATTR_STRIKETHROUGH;
    }
    private static final int ATK_TEXT_ATTR_SIZE = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_SIZE = 13
     * }
     */
    public static int ATK_TEXT_ATTR_SIZE() {
        return ATK_TEXT_ATTR_SIZE;
    }
    private static final int ATK_TEXT_ATTR_SCALE = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_SCALE = 14
     * }
     */
    public static int ATK_TEXT_ATTR_SCALE() {
        return ATK_TEXT_ATTR_SCALE;
    }
    private static final int ATK_TEXT_ATTR_WEIGHT = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_WEIGHT = 15
     * }
     */
    public static int ATK_TEXT_ATTR_WEIGHT() {
        return ATK_TEXT_ATTR_WEIGHT;
    }
    private static final int ATK_TEXT_ATTR_LANGUAGE = (int)16L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_LANGUAGE = 16
     * }
     */
    public static int ATK_TEXT_ATTR_LANGUAGE() {
        return ATK_TEXT_ATTR_LANGUAGE;
    }
    private static final int ATK_TEXT_ATTR_FAMILY_NAME = (int)17L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_FAMILY_NAME = 17
     * }
     */
    public static int ATK_TEXT_ATTR_FAMILY_NAME() {
        return ATK_TEXT_ATTR_FAMILY_NAME;
    }
    private static final int ATK_TEXT_ATTR_BG_COLOR = (int)18L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_BG_COLOR = 18
     * }
     */
    public static int ATK_TEXT_ATTR_BG_COLOR() {
        return ATK_TEXT_ATTR_BG_COLOR;
    }
    private static final int ATK_TEXT_ATTR_FG_COLOR = (int)19L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_FG_COLOR = 19
     * }
     */
    public static int ATK_TEXT_ATTR_FG_COLOR() {
        return ATK_TEXT_ATTR_FG_COLOR;
    }
    private static final int ATK_TEXT_ATTR_BG_STIPPLE = (int)20L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_BG_STIPPLE = 20
     * }
     */
    public static int ATK_TEXT_ATTR_BG_STIPPLE() {
        return ATK_TEXT_ATTR_BG_STIPPLE;
    }
    private static final int ATK_TEXT_ATTR_FG_STIPPLE = (int)21L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_FG_STIPPLE = 21
     * }
     */
    public static int ATK_TEXT_ATTR_FG_STIPPLE() {
        return ATK_TEXT_ATTR_FG_STIPPLE;
    }
    private static final int ATK_TEXT_ATTR_WRAP_MODE = (int)22L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_WRAP_MODE = 22
     * }
     */
    public static int ATK_TEXT_ATTR_WRAP_MODE() {
        return ATK_TEXT_ATTR_WRAP_MODE;
    }
    private static final int ATK_TEXT_ATTR_DIRECTION = (int)23L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_DIRECTION = 23
     * }
     */
    public static int ATK_TEXT_ATTR_DIRECTION() {
        return ATK_TEXT_ATTR_DIRECTION;
    }
    private static final int ATK_TEXT_ATTR_JUSTIFICATION = (int)24L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_JUSTIFICATION = 24
     * }
     */
    public static int ATK_TEXT_ATTR_JUSTIFICATION() {
        return ATK_TEXT_ATTR_JUSTIFICATION;
    }
    private static final int ATK_TEXT_ATTR_STRETCH = (int)25L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_STRETCH = 25
     * }
     */
    public static int ATK_TEXT_ATTR_STRETCH() {
        return ATK_TEXT_ATTR_STRETCH;
    }
    private static final int ATK_TEXT_ATTR_VARIANT = (int)26L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_VARIANT = 26
     * }
     */
    public static int ATK_TEXT_ATTR_VARIANT() {
        return ATK_TEXT_ATTR_VARIANT;
    }
    private static final int ATK_TEXT_ATTR_STYLE = (int)27L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_STYLE = 27
     * }
     */
    public static int ATK_TEXT_ATTR_STYLE() {
        return ATK_TEXT_ATTR_STYLE;
    }
    private static final int ATK_TEXT_ATTR_TEXT_POSITION = (int)28L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_TEXT_POSITION = 28
     * }
     */
    public static int ATK_TEXT_ATTR_TEXT_POSITION() {
        return ATK_TEXT_ATTR_TEXT_POSITION;
    }
    private static final int ATK_TEXT_ATTR_LAST_DEFINED = (int)29L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_ATTR_LAST_DEFINED = 29
     * }
     */
    public static int ATK_TEXT_ATTR_LAST_DEFINED() {
        return ATK_TEXT_ATTR_LAST_DEFINED;
    }

    private static class atk_text_attribute_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_attribute_register"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkTextAttribute atk_text_attribute_register(const gchar *name)
     * }
     */
    public static FunctionDescriptor atk_text_attribute_register$descriptor() {
        return atk_text_attribute_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkTextAttribute atk_text_attribute_register(const gchar *name)
     * }
     */
    public static MethodHandle atk_text_attribute_register$handle() {
        return atk_text_attribute_register.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkTextAttribute atk_text_attribute_register(const gchar *name)
     * }
     */
    public static int atk_text_attribute_register(MemorySegment name) {
        var mh$ = atk_text_attribute_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_attribute_register", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ATK_TEXT_BOUNDARY_CHAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_BOUNDARY_CHAR = 0
     * }
     */
    public static int ATK_TEXT_BOUNDARY_CHAR() {
        return ATK_TEXT_BOUNDARY_CHAR;
    }
    private static final int ATK_TEXT_BOUNDARY_WORD_START = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_BOUNDARY_WORD_START = 1
     * }
     */
    public static int ATK_TEXT_BOUNDARY_WORD_START() {
        return ATK_TEXT_BOUNDARY_WORD_START;
    }
    private static final int ATK_TEXT_BOUNDARY_WORD_END = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_BOUNDARY_WORD_END = 2
     * }
     */
    public static int ATK_TEXT_BOUNDARY_WORD_END() {
        return ATK_TEXT_BOUNDARY_WORD_END;
    }
    private static final int ATK_TEXT_BOUNDARY_SENTENCE_START = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_BOUNDARY_SENTENCE_START = 3
     * }
     */
    public static int ATK_TEXT_BOUNDARY_SENTENCE_START() {
        return ATK_TEXT_BOUNDARY_SENTENCE_START;
    }
    private static final int ATK_TEXT_BOUNDARY_SENTENCE_END = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_BOUNDARY_SENTENCE_END = 4
     * }
     */
    public static int ATK_TEXT_BOUNDARY_SENTENCE_END() {
        return ATK_TEXT_BOUNDARY_SENTENCE_END;
    }
    private static final int ATK_TEXT_BOUNDARY_LINE_START = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_BOUNDARY_LINE_START = 5
     * }
     */
    public static int ATK_TEXT_BOUNDARY_LINE_START() {
        return ATK_TEXT_BOUNDARY_LINE_START;
    }
    private static final int ATK_TEXT_BOUNDARY_LINE_END = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_BOUNDARY_LINE_END = 6
     * }
     */
    public static int ATK_TEXT_BOUNDARY_LINE_END() {
        return ATK_TEXT_BOUNDARY_LINE_END;
    }
    private static final int ATK_TEXT_GRANULARITY_CHAR = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_GRANULARITY_CHAR = 0
     * }
     */
    public static int ATK_TEXT_GRANULARITY_CHAR() {
        return ATK_TEXT_GRANULARITY_CHAR;
    }
    private static final int ATK_TEXT_GRANULARITY_WORD = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_GRANULARITY_WORD = 1
     * }
     */
    public static int ATK_TEXT_GRANULARITY_WORD() {
        return ATK_TEXT_GRANULARITY_WORD;
    }
    private static final int ATK_TEXT_GRANULARITY_SENTENCE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_GRANULARITY_SENTENCE = 2
     * }
     */
    public static int ATK_TEXT_GRANULARITY_SENTENCE() {
        return ATK_TEXT_GRANULARITY_SENTENCE;
    }
    private static final int ATK_TEXT_GRANULARITY_LINE = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_GRANULARITY_LINE = 3
     * }
     */
    public static int ATK_TEXT_GRANULARITY_LINE() {
        return ATK_TEXT_GRANULARITY_LINE;
    }
    private static final int ATK_TEXT_GRANULARITY_PARAGRAPH = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_GRANULARITY_PARAGRAPH = 4
     * }
     */
    public static int ATK_TEXT_GRANULARITY_PARAGRAPH() {
        return ATK_TEXT_GRANULARITY_PARAGRAPH;
    }

    private static class atk_text_range_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_range_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_text_range_get_type()
     * }
     */
    public static FunctionDescriptor atk_text_range_get_type$descriptor() {
        return atk_text_range_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_text_range_get_type()
     * }
     */
    public static MethodHandle atk_text_range_get_type$handle() {
        return atk_text_range_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_text_range_get_type()
     * }
     */
    public static long atk_text_range_get_type() {
        var mh$ = atk_text_range_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_range_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ATK_TEXT_CLIP_NONE = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_CLIP_NONE = 0
     * }
     */
    public static int ATK_TEXT_CLIP_NONE() {
        return ATK_TEXT_CLIP_NONE;
    }
    private static final int ATK_TEXT_CLIP_MIN = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_CLIP_MIN = 1
     * }
     */
    public static int ATK_TEXT_CLIP_MIN() {
        return ATK_TEXT_CLIP_MIN;
    }
    private static final int ATK_TEXT_CLIP_MAX = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_CLIP_MAX = 2
     * }
     */
    public static int ATK_TEXT_CLIP_MAX() {
        return ATK_TEXT_CLIP_MAX;
    }
    private static final int ATK_TEXT_CLIP_BOTH = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_TEXT_CLIP_BOTH = 3
     * }
     */
    public static int ATK_TEXT_CLIP_BOTH() {
        return ATK_TEXT_CLIP_BOTH;
    }

    private static class atk_text_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_text_get_type()
     * }
     */
    public static FunctionDescriptor atk_text_get_type$descriptor() {
        return atk_text_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_text_get_type()
     * }
     */
    public static MethodHandle atk_text_get_type$handle() {
        return atk_text_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_text_get_type()
     * }
     */
    public static long atk_text_get_type() {
        var mh$ = atk_text_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text(AtkText *text, gint start_offset, gint end_offset)
     * }
     */
    public static FunctionDescriptor atk_text_get_text$descriptor() {
        return atk_text_get_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text(AtkText *text, gint start_offset, gint end_offset)
     * }
     */
    public static MethodHandle atk_text_get_text$handle() {
        return atk_text_get_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text(AtkText *text, gint start_offset, gint end_offset)
     * }
     */
    public static MemorySegment atk_text_get_text(MemorySegment text, int start_offset, int end_offset) {
        var mh$ = atk_text_get_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_text", text, start_offset, end_offset);
            }
            return (MemorySegment)mh$.invokeExact(text, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_character_at_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_character_at_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gunichar atk_text_get_character_at_offset(AtkText *text, gint offset)
     * }
     */
    public static FunctionDescriptor atk_text_get_character_at_offset$descriptor() {
        return atk_text_get_character_at_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gunichar atk_text_get_character_at_offset(AtkText *text, gint offset)
     * }
     */
    public static MethodHandle atk_text_get_character_at_offset$handle() {
        return atk_text_get_character_at_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gunichar atk_text_get_character_at_offset(AtkText *text, gint offset)
     * }
     */
    public static int atk_text_get_character_at_offset(MemorySegment text, int offset) {
        var mh$ = atk_text_get_character_at_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_character_at_offset", text, offset);
            }
            return (int)mh$.invokeExact(text, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_text_after_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_text_after_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text_after_offset(AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset)
     * }
     */
    public static FunctionDescriptor atk_text_get_text_after_offset$descriptor() {
        return atk_text_get_text_after_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text_after_offset(AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset)
     * }
     */
    public static MethodHandle atk_text_get_text_after_offset$handle() {
        return atk_text_get_text_after_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text_after_offset(AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset)
     * }
     */
    public static MemorySegment atk_text_get_text_after_offset(MemorySegment text, int offset, int boundary_type, MemorySegment start_offset, MemorySegment end_offset) {
        var mh$ = atk_text_get_text_after_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_text_after_offset", text, offset, boundary_type, start_offset, end_offset);
            }
            return (MemorySegment)mh$.invokeExact(text, offset, boundary_type, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_text_at_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_text_at_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text_at_offset(AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset)
     * }
     */
    public static FunctionDescriptor atk_text_get_text_at_offset$descriptor() {
        return atk_text_get_text_at_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text_at_offset(AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset)
     * }
     */
    public static MethodHandle atk_text_get_text_at_offset$handle() {
        return atk_text_get_text_at_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text_at_offset(AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset)
     * }
     */
    public static MemorySegment atk_text_get_text_at_offset(MemorySegment text, int offset, int boundary_type, MemorySegment start_offset, MemorySegment end_offset) {
        var mh$ = atk_text_get_text_at_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_text_at_offset", text, offset, boundary_type, start_offset, end_offset);
            }
            return (MemorySegment)mh$.invokeExact(text, offset, boundary_type, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_text_before_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_text_before_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text_before_offset(AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset)
     * }
     */
    public static FunctionDescriptor atk_text_get_text_before_offset$descriptor() {
        return atk_text_get_text_before_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text_before_offset(AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset)
     * }
     */
    public static MethodHandle atk_text_get_text_before_offset$handle() {
        return atk_text_get_text_before_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *atk_text_get_text_before_offset(AtkText *text, gint offset, AtkTextBoundary boundary_type, gint *start_offset, gint *end_offset)
     * }
     */
    public static MemorySegment atk_text_get_text_before_offset(MemorySegment text, int offset, int boundary_type, MemorySegment start_offset, MemorySegment end_offset) {
        var mh$ = atk_text_get_text_before_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_text_before_offset", text, offset, boundary_type, start_offset, end_offset);
            }
            return (MemorySegment)mh$.invokeExact(text, offset, boundary_type, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_string_at_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_string_at_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_string_at_offset(AtkText *text, gint offset, AtkTextGranularity granularity, gint *start_offset, gint *end_offset)
     * }
     */
    public static FunctionDescriptor atk_text_get_string_at_offset$descriptor() {
        return atk_text_get_string_at_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_string_at_offset(AtkText *text, gint offset, AtkTextGranularity granularity, gint *start_offset, gint *end_offset)
     * }
     */
    public static MethodHandle atk_text_get_string_at_offset$handle() {
        return atk_text_get_string_at_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *atk_text_get_string_at_offset(AtkText *text, gint offset, AtkTextGranularity granularity, gint *start_offset, gint *end_offset)
     * }
     */
    public static MemorySegment atk_text_get_string_at_offset(MemorySegment text, int offset, int granularity, MemorySegment start_offset, MemorySegment end_offset) {
        var mh$ = atk_text_get_string_at_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_string_at_offset", text, offset, granularity, start_offset, end_offset);
            }
            return (MemorySegment)mh$.invokeExact(text, offset, granularity, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_caret_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_caret_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_text_get_caret_offset(AtkText *text)
     * }
     */
    public static FunctionDescriptor atk_text_get_caret_offset$descriptor() {
        return atk_text_get_caret_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_text_get_caret_offset(AtkText *text)
     * }
     */
    public static MethodHandle atk_text_get_caret_offset$handle() {
        return atk_text_get_caret_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_text_get_caret_offset(AtkText *text)
     * }
     */
    public static int atk_text_get_caret_offset(MemorySegment text) {
        var mh$ = atk_text_get_caret_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_caret_offset", text);
            }
            return (int)mh$.invokeExact(text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_character_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_character_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_text_get_character_extents(AtkText *text, gint offset, gint *x, gint *y, gint *width, gint *height, AtkCoordType coords)
     * }
     */
    public static FunctionDescriptor atk_text_get_character_extents$descriptor() {
        return atk_text_get_character_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_text_get_character_extents(AtkText *text, gint offset, gint *x, gint *y, gint *width, gint *height, AtkCoordType coords)
     * }
     */
    public static MethodHandle atk_text_get_character_extents$handle() {
        return atk_text_get_character_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_text_get_character_extents(AtkText *text, gint offset, gint *x, gint *y, gint *width, gint *height, AtkCoordType coords)
     * }
     */
    public static void atk_text_get_character_extents(MemorySegment text, int offset, MemorySegment x, MemorySegment y, MemorySegment width, MemorySegment height, int coords) {
        var mh$ = atk_text_get_character_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_character_extents", text, offset, x, y, width, height, coords);
            }
            mh$.invokeExact(text, offset, x, y, width, height, coords);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_run_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_run_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_text_get_run_attributes(AtkText *text, gint offset, gint *start_offset, gint *end_offset)
     * }
     */
    public static FunctionDescriptor atk_text_get_run_attributes$descriptor() {
        return atk_text_get_run_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_text_get_run_attributes(AtkText *text, gint offset, gint *start_offset, gint *end_offset)
     * }
     */
    public static MethodHandle atk_text_get_run_attributes$handle() {
        return atk_text_get_run_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_text_get_run_attributes(AtkText *text, gint offset, gint *start_offset, gint *end_offset)
     * }
     */
    public static MemorySegment atk_text_get_run_attributes(MemorySegment text, int offset, MemorySegment start_offset, MemorySegment end_offset) {
        var mh$ = atk_text_get_run_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_run_attributes", text, offset, start_offset, end_offset);
            }
            return (MemorySegment)mh$.invokeExact(text, offset, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_default_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_default_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_text_get_default_attributes(AtkText *text)
     * }
     */
    public static FunctionDescriptor atk_text_get_default_attributes$descriptor() {
        return atk_text_get_default_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_text_get_default_attributes(AtkText *text)
     * }
     */
    public static MethodHandle atk_text_get_default_attributes$handle() {
        return atk_text_get_default_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkAttributeSet *atk_text_get_default_attributes(AtkText *text)
     * }
     */
    public static MemorySegment atk_text_get_default_attributes(MemorySegment text) {
        var mh$ = atk_text_get_default_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_default_attributes", text);
            }
            return (MemorySegment)mh$.invokeExact(text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_character_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_character_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_text_get_character_count(AtkText *text)
     * }
     */
    public static FunctionDescriptor atk_text_get_character_count$descriptor() {
        return atk_text_get_character_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_text_get_character_count(AtkText *text)
     * }
     */
    public static MethodHandle atk_text_get_character_count$handle() {
        return atk_text_get_character_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_text_get_character_count(AtkText *text)
     * }
     */
    public static int atk_text_get_character_count(MemorySegment text) {
        var mh$ = atk_text_get_character_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_character_count", text);
            }
            return (int)mh$.invokeExact(text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_offset_at_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_offset_at_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_text_get_offset_at_point(AtkText *text, gint x, gint y, AtkCoordType coords)
     * }
     */
    public static FunctionDescriptor atk_text_get_offset_at_point$descriptor() {
        return atk_text_get_offset_at_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_text_get_offset_at_point(AtkText *text, gint x, gint y, AtkCoordType coords)
     * }
     */
    public static MethodHandle atk_text_get_offset_at_point$handle() {
        return atk_text_get_offset_at_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_text_get_offset_at_point(AtkText *text, gint x, gint y, AtkCoordType coords)
     * }
     */
    public static int atk_text_get_offset_at_point(MemorySegment text, int x, int y, int coords) {
        var mh$ = atk_text_get_offset_at_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_offset_at_point", text, x, y, coords);
            }
            return (int)mh$.invokeExact(text, x, y, coords);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_n_selections {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_n_selections"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_text_get_n_selections(AtkText *text)
     * }
     */
    public static FunctionDescriptor atk_text_get_n_selections$descriptor() {
        return atk_text_get_n_selections.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_text_get_n_selections(AtkText *text)
     * }
     */
    public static MethodHandle atk_text_get_n_selections$handle() {
        return atk_text_get_n_selections.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_text_get_n_selections(AtkText *text)
     * }
     */
    public static int atk_text_get_n_selections(MemorySegment text) {
        var mh$ = atk_text_get_n_selections.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_n_selections", text);
            }
            return (int)mh$.invokeExact(text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_selection(AtkText *text, gint selection_num, gint *start_offset, gint *end_offset)
     * }
     */
    public static FunctionDescriptor atk_text_get_selection$descriptor() {
        return atk_text_get_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *atk_text_get_selection(AtkText *text, gint selection_num, gint *start_offset, gint *end_offset)
     * }
     */
    public static MethodHandle atk_text_get_selection$handle() {
        return atk_text_get_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *atk_text_get_selection(AtkText *text, gint selection_num, gint *start_offset, gint *end_offset)
     * }
     */
    public static MemorySegment atk_text_get_selection(MemorySegment text, int selection_num, MemorySegment start_offset, MemorySegment end_offset) {
        var mh$ = atk_text_get_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_selection", text, selection_num, start_offset, end_offset);
            }
            return (MemorySegment)mh$.invokeExact(text, selection_num, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_add_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_add_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_text_add_selection(AtkText *text, gint start_offset, gint end_offset)
     * }
     */
    public static FunctionDescriptor atk_text_add_selection$descriptor() {
        return atk_text_add_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_text_add_selection(AtkText *text, gint start_offset, gint end_offset)
     * }
     */
    public static MethodHandle atk_text_add_selection$handle() {
        return atk_text_add_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_text_add_selection(AtkText *text, gint start_offset, gint end_offset)
     * }
     */
    public static int atk_text_add_selection(MemorySegment text, int start_offset, int end_offset) {
        var mh$ = atk_text_add_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_add_selection", text, start_offset, end_offset);
            }
            return (int)mh$.invokeExact(text, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_remove_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_remove_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_text_remove_selection(AtkText *text, gint selection_num)
     * }
     */
    public static FunctionDescriptor atk_text_remove_selection$descriptor() {
        return atk_text_remove_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_text_remove_selection(AtkText *text, gint selection_num)
     * }
     */
    public static MethodHandle atk_text_remove_selection$handle() {
        return atk_text_remove_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_text_remove_selection(AtkText *text, gint selection_num)
     * }
     */
    public static int atk_text_remove_selection(MemorySegment text, int selection_num) {
        var mh$ = atk_text_remove_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_remove_selection", text, selection_num);
            }
            return (int)mh$.invokeExact(text, selection_num);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_set_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_set_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_text_set_selection(AtkText *text, gint selection_num, gint start_offset, gint end_offset)
     * }
     */
    public static FunctionDescriptor atk_text_set_selection$descriptor() {
        return atk_text_set_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_text_set_selection(AtkText *text, gint selection_num, gint start_offset, gint end_offset)
     * }
     */
    public static MethodHandle atk_text_set_selection$handle() {
        return atk_text_set_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_text_set_selection(AtkText *text, gint selection_num, gint start_offset, gint end_offset)
     * }
     */
    public static int atk_text_set_selection(MemorySegment text, int selection_num, int start_offset, int end_offset) {
        var mh$ = atk_text_set_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_set_selection", text, selection_num, start_offset, end_offset);
            }
            return (int)mh$.invokeExact(text, selection_num, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_set_caret_offset {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_set_caret_offset"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_text_set_caret_offset(AtkText *text, gint offset)
     * }
     */
    public static FunctionDescriptor atk_text_set_caret_offset$descriptor() {
        return atk_text_set_caret_offset.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_text_set_caret_offset(AtkText *text, gint offset)
     * }
     */
    public static MethodHandle atk_text_set_caret_offset$handle() {
        return atk_text_set_caret_offset.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_text_set_caret_offset(AtkText *text, gint offset)
     * }
     */
    public static int atk_text_set_caret_offset(MemorySegment text, int offset) {
        var mh$ = atk_text_set_caret_offset.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_set_caret_offset", text, offset);
            }
            return (int)mh$.invokeExact(text, offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_range_extents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_range_extents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_text_get_range_extents(AtkText *text, gint start_offset, gint end_offset, AtkCoordType coord_type, AtkTextRectangle *rect)
     * }
     */
    public static FunctionDescriptor atk_text_get_range_extents$descriptor() {
        return atk_text_get_range_extents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_text_get_range_extents(AtkText *text, gint start_offset, gint end_offset, AtkCoordType coord_type, AtkTextRectangle *rect)
     * }
     */
    public static MethodHandle atk_text_get_range_extents$handle() {
        return atk_text_get_range_extents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_text_get_range_extents(AtkText *text, gint start_offset, gint end_offset, AtkCoordType coord_type, AtkTextRectangle *rect)
     * }
     */
    public static void atk_text_get_range_extents(MemorySegment text, int start_offset, int end_offset, int coord_type, MemorySegment rect) {
        var mh$ = atk_text_get_range_extents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_range_extents", text, start_offset, end_offset, coord_type, rect);
            }
            mh$.invokeExact(text, start_offset, end_offset, coord_type, rect);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_get_bounded_ranges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_get_bounded_ranges"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkTextRange **atk_text_get_bounded_ranges(AtkText *text, AtkTextRectangle *rect, AtkCoordType coord_type, AtkTextClipType x_clip_type, AtkTextClipType y_clip_type)
     * }
     */
    public static FunctionDescriptor atk_text_get_bounded_ranges$descriptor() {
        return atk_text_get_bounded_ranges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkTextRange **atk_text_get_bounded_ranges(AtkText *text, AtkTextRectangle *rect, AtkCoordType coord_type, AtkTextClipType x_clip_type, AtkTextClipType y_clip_type)
     * }
     */
    public static MethodHandle atk_text_get_bounded_ranges$handle() {
        return atk_text_get_bounded_ranges.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkTextRange **atk_text_get_bounded_ranges(AtkText *text, AtkTextRectangle *rect, AtkCoordType coord_type, AtkTextClipType x_clip_type, AtkTextClipType y_clip_type)
     * }
     */
    public static MemorySegment atk_text_get_bounded_ranges(MemorySegment text, MemorySegment rect, int coord_type, int x_clip_type, int y_clip_type) {
        var mh$ = atk_text_get_bounded_ranges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_get_bounded_ranges", text, rect, coord_type, x_clip_type, y_clip_type);
            }
            return (MemorySegment)mh$.invokeExact(text, rect, coord_type, x_clip_type, y_clip_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_free_ranges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_free_ranges"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_text_free_ranges(AtkTextRange **ranges)
     * }
     */
    public static FunctionDescriptor atk_text_free_ranges$descriptor() {
        return atk_text_free_ranges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_text_free_ranges(AtkTextRange **ranges)
     * }
     */
    public static MethodHandle atk_text_free_ranges$handle() {
        return atk_text_free_ranges.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_text_free_ranges(AtkTextRange **ranges)
     * }
     */
    public static void atk_text_free_ranges(MemorySegment ranges) {
        var mh$ = atk_text_free_ranges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_free_ranges", ranges);
            }
            mh$.invokeExact(ranges);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_attribute_set_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_attribute_set_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_attribute_set_free(AtkAttributeSet *attrib_set)
     * }
     */
    public static FunctionDescriptor atk_attribute_set_free$descriptor() {
        return atk_attribute_set_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_attribute_set_free(AtkAttributeSet *attrib_set)
     * }
     */
    public static MethodHandle atk_attribute_set_free$handle() {
        return atk_attribute_set_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_attribute_set_free(AtkAttributeSet *attrib_set)
     * }
     */
    public static void atk_attribute_set_free(MemorySegment attrib_set) {
        var mh$ = atk_attribute_set_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_attribute_set_free", attrib_set);
            }
            mh$.invokeExact(attrib_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_attribute_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_attribute_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_text_attribute_get_name(AtkTextAttribute attr)
     * }
     */
    public static FunctionDescriptor atk_text_attribute_get_name$descriptor() {
        return atk_text_attribute_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_text_attribute_get_name(AtkTextAttribute attr)
     * }
     */
    public static MethodHandle atk_text_attribute_get_name$handle() {
        return atk_text_attribute_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_text_attribute_get_name(AtkTextAttribute attr)
     * }
     */
    public static MemorySegment atk_text_attribute_get_name(int attr) {
        var mh$ = atk_text_attribute_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_attribute_get_name", attr);
            }
            return (MemorySegment)mh$.invokeExact(attr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_attribute_for_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_attribute_for_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkTextAttribute atk_text_attribute_for_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor atk_text_attribute_for_name$descriptor() {
        return atk_text_attribute_for_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkTextAttribute atk_text_attribute_for_name(const gchar *name)
     * }
     */
    public static MethodHandle atk_text_attribute_for_name$handle() {
        return atk_text_attribute_for_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkTextAttribute atk_text_attribute_for_name(const gchar *name)
     * }
     */
    public static int atk_text_attribute_for_name(MemorySegment name) {
        var mh$ = atk_text_attribute_for_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_attribute_for_name", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_attribute_get_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_attribute_get_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_text_attribute_get_value(AtkTextAttribute attr, gint index_)
     * }
     */
    public static FunctionDescriptor atk_text_attribute_get_value$descriptor() {
        return atk_text_attribute_get_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_text_attribute_get_value(AtkTextAttribute attr, gint index_)
     * }
     */
    public static MethodHandle atk_text_attribute_get_value$handle() {
        return atk_text_attribute_get_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_text_attribute_get_value(AtkTextAttribute attr, gint index_)
     * }
     */
    public static MemorySegment atk_text_attribute_get_value(int attr, int index_) {
        var mh$ = atk_text_attribute_get_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_attribute_get_value", attr, index_);
            }
            return (MemorySegment)mh$.invokeExact(attr, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_scroll_substring_to {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_scroll_substring_to"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_text_scroll_substring_to(AtkText *text, gint start_offset, gint end_offset, AtkScrollType type)
     * }
     */
    public static FunctionDescriptor atk_text_scroll_substring_to$descriptor() {
        return atk_text_scroll_substring_to.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_text_scroll_substring_to(AtkText *text, gint start_offset, gint end_offset, AtkScrollType type)
     * }
     */
    public static MethodHandle atk_text_scroll_substring_to$handle() {
        return atk_text_scroll_substring_to.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_text_scroll_substring_to(AtkText *text, gint start_offset, gint end_offset, AtkScrollType type)
     * }
     */
    public static int atk_text_scroll_substring_to(MemorySegment text, int start_offset, int end_offset, int type) {
        var mh$ = atk_text_scroll_substring_to.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_scroll_substring_to", text, start_offset, end_offset, type);
            }
            return (int)mh$.invokeExact(text, start_offset, end_offset, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_text_scroll_substring_to_point {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_text_scroll_substring_to_point"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_text_scroll_substring_to_point(AtkText *text, gint start_offset, gint end_offset, AtkCoordType coords, gint x, gint y)
     * }
     */
    public static FunctionDescriptor atk_text_scroll_substring_to_point$descriptor() {
        return atk_text_scroll_substring_to_point.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_text_scroll_substring_to_point(AtkText *text, gint start_offset, gint end_offset, AtkCoordType coords, gint x, gint y)
     * }
     */
    public static MethodHandle atk_text_scroll_substring_to_point$handle() {
        return atk_text_scroll_substring_to_point.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_text_scroll_substring_to_point(AtkText *text, gint start_offset, gint end_offset, AtkCoordType coords, gint x, gint y)
     * }
     */
    public static int atk_text_scroll_substring_to_point(MemorySegment text, int start_offset, int end_offset, int coords, int x, int y) {
        var mh$ = atk_text_scroll_substring_to_point.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_text_scroll_substring_to_point", text, start_offset, end_offset, coords, x, y);
            }
            return (int)mh$.invokeExact(text, start_offset, end_offset, coords, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_editable_text_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_editable_text_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_editable_text_get_type()
     * }
     */
    public static FunctionDescriptor atk_editable_text_get_type$descriptor() {
        return atk_editable_text_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_editable_text_get_type()
     * }
     */
    public static MethodHandle atk_editable_text_get_type$handle() {
        return atk_editable_text_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_editable_text_get_type()
     * }
     */
    public static long atk_editable_text_get_type() {
        var mh$ = atk_editable_text_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_editable_text_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_editable_text_set_run_attributes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_editable_text_set_run_attributes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_editable_text_set_run_attributes(AtkEditableText *text, AtkAttributeSet *attrib_set, gint start_offset, gint end_offset)
     * }
     */
    public static FunctionDescriptor atk_editable_text_set_run_attributes$descriptor() {
        return atk_editable_text_set_run_attributes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_editable_text_set_run_attributes(AtkEditableText *text, AtkAttributeSet *attrib_set, gint start_offset, gint end_offset)
     * }
     */
    public static MethodHandle atk_editable_text_set_run_attributes$handle() {
        return atk_editable_text_set_run_attributes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_editable_text_set_run_attributes(AtkEditableText *text, AtkAttributeSet *attrib_set, gint start_offset, gint end_offset)
     * }
     */
    public static int atk_editable_text_set_run_attributes(MemorySegment text, MemorySegment attrib_set, int start_offset, int end_offset) {
        var mh$ = atk_editable_text_set_run_attributes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_editable_text_set_run_attributes", text, attrib_set, start_offset, end_offset);
            }
            return (int)mh$.invokeExact(text, attrib_set, start_offset, end_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_editable_text_set_text_contents {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_editable_text_set_text_contents"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_editable_text_set_text_contents(AtkEditableText *text, const gchar *string)
     * }
     */
    public static FunctionDescriptor atk_editable_text_set_text_contents$descriptor() {
        return atk_editable_text_set_text_contents.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_editable_text_set_text_contents(AtkEditableText *text, const gchar *string)
     * }
     */
    public static MethodHandle atk_editable_text_set_text_contents$handle() {
        return atk_editable_text_set_text_contents.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_editable_text_set_text_contents(AtkEditableText *text, const gchar *string)
     * }
     */
    public static void atk_editable_text_set_text_contents(MemorySegment text, MemorySegment string) {
        var mh$ = atk_editable_text_set_text_contents.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_editable_text_set_text_contents", text, string);
            }
            mh$.invokeExact(text, string);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_editable_text_insert_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_editable_text_insert_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_editable_text_insert_text(AtkEditableText *text, const gchar *string, gint length, gint *position)
     * }
     */
    public static FunctionDescriptor atk_editable_text_insert_text$descriptor() {
        return atk_editable_text_insert_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_editable_text_insert_text(AtkEditableText *text, const gchar *string, gint length, gint *position)
     * }
     */
    public static MethodHandle atk_editable_text_insert_text$handle() {
        return atk_editable_text_insert_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_editable_text_insert_text(AtkEditableText *text, const gchar *string, gint length, gint *position)
     * }
     */
    public static void atk_editable_text_insert_text(MemorySegment text, MemorySegment string, int length, MemorySegment position) {
        var mh$ = atk_editable_text_insert_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_editable_text_insert_text", text, string, length, position);
            }
            mh$.invokeExact(text, string, length, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_editable_text_copy_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_editable_text_copy_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_editable_text_copy_text(AtkEditableText *text, gint start_pos, gint end_pos)
     * }
     */
    public static FunctionDescriptor atk_editable_text_copy_text$descriptor() {
        return atk_editable_text_copy_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_editable_text_copy_text(AtkEditableText *text, gint start_pos, gint end_pos)
     * }
     */
    public static MethodHandle atk_editable_text_copy_text$handle() {
        return atk_editable_text_copy_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_editable_text_copy_text(AtkEditableText *text, gint start_pos, gint end_pos)
     * }
     */
    public static void atk_editable_text_copy_text(MemorySegment text, int start_pos, int end_pos) {
        var mh$ = atk_editable_text_copy_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_editable_text_copy_text", text, start_pos, end_pos);
            }
            mh$.invokeExact(text, start_pos, end_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_editable_text_cut_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_editable_text_cut_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_editable_text_cut_text(AtkEditableText *text, gint start_pos, gint end_pos)
     * }
     */
    public static FunctionDescriptor atk_editable_text_cut_text$descriptor() {
        return atk_editable_text_cut_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_editable_text_cut_text(AtkEditableText *text, gint start_pos, gint end_pos)
     * }
     */
    public static MethodHandle atk_editable_text_cut_text$handle() {
        return atk_editable_text_cut_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_editable_text_cut_text(AtkEditableText *text, gint start_pos, gint end_pos)
     * }
     */
    public static void atk_editable_text_cut_text(MemorySegment text, int start_pos, int end_pos) {
        var mh$ = atk_editable_text_cut_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_editable_text_cut_text", text, start_pos, end_pos);
            }
            mh$.invokeExact(text, start_pos, end_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_editable_text_delete_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_editable_text_delete_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_editable_text_delete_text(AtkEditableText *text, gint start_pos, gint end_pos)
     * }
     */
    public static FunctionDescriptor atk_editable_text_delete_text$descriptor() {
        return atk_editable_text_delete_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_editable_text_delete_text(AtkEditableText *text, gint start_pos, gint end_pos)
     * }
     */
    public static MethodHandle atk_editable_text_delete_text$handle() {
        return atk_editable_text_delete_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_editable_text_delete_text(AtkEditableText *text, gint start_pos, gint end_pos)
     * }
     */
    public static void atk_editable_text_delete_text(MemorySegment text, int start_pos, int end_pos) {
        var mh$ = atk_editable_text_delete_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_editable_text_delete_text", text, start_pos, end_pos);
            }
            mh$.invokeExact(text, start_pos, end_pos);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_editable_text_paste_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_editable_text_paste_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_editable_text_paste_text(AtkEditableText *text, gint position)
     * }
     */
    public static FunctionDescriptor atk_editable_text_paste_text$descriptor() {
        return atk_editable_text_paste_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_editable_text_paste_text(AtkEditableText *text, gint position)
     * }
     */
    public static MethodHandle atk_editable_text_paste_text$handle() {
        return atk_editable_text_paste_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_editable_text_paste_text(AtkEditableText *text, gint position)
     * }
     */
    public static void atk_editable_text_paste_text(MemorySegment text, int position) {
        var mh$ = atk_editable_text_paste_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_editable_text_paste_text", text, position);
            }
            mh$.invokeExact(text, position);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_gobject_accessible_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_gobject_accessible_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_gobject_accessible_get_type()
     * }
     */
    public static FunctionDescriptor atk_gobject_accessible_get_type$descriptor() {
        return atk_gobject_accessible_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_gobject_accessible_get_type()
     * }
     */
    public static MethodHandle atk_gobject_accessible_get_type$handle() {
        return atk_gobject_accessible_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_gobject_accessible_get_type()
     * }
     */
    public static long atk_gobject_accessible_get_type() {
        var mh$ = atk_gobject_accessible_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_gobject_accessible_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_gobject_accessible_for_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_gobject_accessible_for_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_gobject_accessible_for_object(GObject *obj)
     * }
     */
    public static FunctionDescriptor atk_gobject_accessible_for_object$descriptor() {
        return atk_gobject_accessible_for_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_gobject_accessible_for_object(GObject *obj)
     * }
     */
    public static MethodHandle atk_gobject_accessible_for_object$handle() {
        return atk_gobject_accessible_for_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_gobject_accessible_for_object(GObject *obj)
     * }
     */
    public static MemorySegment atk_gobject_accessible_for_object(MemorySegment obj) {
        var mh$ = atk_gobject_accessible_for_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_gobject_accessible_for_object", obj);
            }
            return (MemorySegment)mh$.invokeExact(obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_gobject_accessible_get_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_gobject_accessible_get_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *atk_gobject_accessible_get_object(AtkGObjectAccessible *obj)
     * }
     */
    public static FunctionDescriptor atk_gobject_accessible_get_object$descriptor() {
        return atk_gobject_accessible_get_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *atk_gobject_accessible_get_object(AtkGObjectAccessible *obj)
     * }
     */
    public static MethodHandle atk_gobject_accessible_get_object$handle() {
        return atk_gobject_accessible_get_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *atk_gobject_accessible_get_object(AtkGObjectAccessible *obj)
     * }
     */
    public static MemorySegment atk_gobject_accessible_get_object(MemorySegment obj) {
        var mh$ = atk_gobject_accessible_get_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_gobject_accessible_get_object", obj);
            }
            return (MemorySegment)mh$.invokeExact(obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ATK_HYPERLINK_IS_INLINE = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_HYPERLINK_IS_INLINE = 1
     * }
     */
    public static int ATK_HYPERLINK_IS_INLINE() {
        return ATK_HYPERLINK_IS_INLINE;
    }

    private static class atk_hyperlink_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_hyperlink_get_type()
     * }
     */
    public static FunctionDescriptor atk_hyperlink_get_type$descriptor() {
        return atk_hyperlink_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_hyperlink_get_type()
     * }
     */
    public static MethodHandle atk_hyperlink_get_type$handle() {
        return atk_hyperlink_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_hyperlink_get_type()
     * }
     */
    public static long atk_hyperlink_get_type() {
        var mh$ = atk_hyperlink_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_get_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_get_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *atk_hyperlink_get_uri(AtkHyperlink *link_, gint i)
     * }
     */
    public static FunctionDescriptor atk_hyperlink_get_uri$descriptor() {
        return atk_hyperlink_get_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *atk_hyperlink_get_uri(AtkHyperlink *link_, gint i)
     * }
     */
    public static MethodHandle atk_hyperlink_get_uri$handle() {
        return atk_hyperlink_get_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *atk_hyperlink_get_uri(AtkHyperlink *link_, gint i)
     * }
     */
    public static MemorySegment atk_hyperlink_get_uri(MemorySegment link_, int i) {
        var mh$ = atk_hyperlink_get_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_get_uri", link_, i);
            }
            return (MemorySegment)mh$.invokeExact(link_, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_get_object {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_get_object"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_hyperlink_get_object(AtkHyperlink *link_, gint i)
     * }
     */
    public static FunctionDescriptor atk_hyperlink_get_object$descriptor() {
        return atk_hyperlink_get_object.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_hyperlink_get_object(AtkHyperlink *link_, gint i)
     * }
     */
    public static MethodHandle atk_hyperlink_get_object$handle() {
        return atk_hyperlink_get_object.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_hyperlink_get_object(AtkHyperlink *link_, gint i)
     * }
     */
    public static MemorySegment atk_hyperlink_get_object(MemorySegment link_, int i) {
        var mh$ = atk_hyperlink_get_object.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_get_object", link_, i);
            }
            return (MemorySegment)mh$.invokeExact(link_, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_get_end_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_get_end_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_hyperlink_get_end_index(AtkHyperlink *link_)
     * }
     */
    public static FunctionDescriptor atk_hyperlink_get_end_index$descriptor() {
        return atk_hyperlink_get_end_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_hyperlink_get_end_index(AtkHyperlink *link_)
     * }
     */
    public static MethodHandle atk_hyperlink_get_end_index$handle() {
        return atk_hyperlink_get_end_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_hyperlink_get_end_index(AtkHyperlink *link_)
     * }
     */
    public static int atk_hyperlink_get_end_index(MemorySegment link_) {
        var mh$ = atk_hyperlink_get_end_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_get_end_index", link_);
            }
            return (int)mh$.invokeExact(link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_get_start_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_get_start_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_hyperlink_get_start_index(AtkHyperlink *link_)
     * }
     */
    public static FunctionDescriptor atk_hyperlink_get_start_index$descriptor() {
        return atk_hyperlink_get_start_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_hyperlink_get_start_index(AtkHyperlink *link_)
     * }
     */
    public static MethodHandle atk_hyperlink_get_start_index$handle() {
        return atk_hyperlink_get_start_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_hyperlink_get_start_index(AtkHyperlink *link_)
     * }
     */
    public static int atk_hyperlink_get_start_index(MemorySegment link_) {
        var mh$ = atk_hyperlink_get_start_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_get_start_index", link_);
            }
            return (int)mh$.invokeExact(link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_is_valid {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_is_valid"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_hyperlink_is_valid(AtkHyperlink *link_)
     * }
     */
    public static FunctionDescriptor atk_hyperlink_is_valid$descriptor() {
        return atk_hyperlink_is_valid.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_hyperlink_is_valid(AtkHyperlink *link_)
     * }
     */
    public static MethodHandle atk_hyperlink_is_valid$handle() {
        return atk_hyperlink_is_valid.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_hyperlink_is_valid(AtkHyperlink *link_)
     * }
     */
    public static int atk_hyperlink_is_valid(MemorySegment link_) {
        var mh$ = atk_hyperlink_is_valid.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_is_valid", link_);
            }
            return (int)mh$.invokeExact(link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_is_inline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_is_inline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_hyperlink_is_inline(AtkHyperlink *link_)
     * }
     */
    public static FunctionDescriptor atk_hyperlink_is_inline$descriptor() {
        return atk_hyperlink_is_inline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_hyperlink_is_inline(AtkHyperlink *link_)
     * }
     */
    public static MethodHandle atk_hyperlink_is_inline$handle() {
        return atk_hyperlink_is_inline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_hyperlink_is_inline(AtkHyperlink *link_)
     * }
     */
    public static int atk_hyperlink_is_inline(MemorySegment link_) {
        var mh$ = atk_hyperlink_is_inline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_is_inline", link_);
            }
            return (int)mh$.invokeExact(link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_get_n_anchors {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_get_n_anchors"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_hyperlink_get_n_anchors(AtkHyperlink *link_)
     * }
     */
    public static FunctionDescriptor atk_hyperlink_get_n_anchors$descriptor() {
        return atk_hyperlink_get_n_anchors.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_hyperlink_get_n_anchors(AtkHyperlink *link_)
     * }
     */
    public static MethodHandle atk_hyperlink_get_n_anchors$handle() {
        return atk_hyperlink_get_n_anchors.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_hyperlink_get_n_anchors(AtkHyperlink *link_)
     * }
     */
    public static int atk_hyperlink_get_n_anchors(MemorySegment link_) {
        var mh$ = atk_hyperlink_get_n_anchors.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_get_n_anchors", link_);
            }
            return (int)mh$.invokeExact(link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_is_selected_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_is_selected_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_hyperlink_is_selected_link(AtkHyperlink *link_)
     * }
     */
    public static FunctionDescriptor atk_hyperlink_is_selected_link$descriptor() {
        return atk_hyperlink_is_selected_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_hyperlink_is_selected_link(AtkHyperlink *link_)
     * }
     */
    public static MethodHandle atk_hyperlink_is_selected_link$handle() {
        return atk_hyperlink_is_selected_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_hyperlink_is_selected_link(AtkHyperlink *link_)
     * }
     */
    public static int atk_hyperlink_is_selected_link(MemorySegment link_) {
        var mh$ = atk_hyperlink_is_selected_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_is_selected_link", link_);
            }
            return (int)mh$.invokeExact(link_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_impl_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_impl_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_hyperlink_impl_get_type()
     * }
     */
    public static FunctionDescriptor atk_hyperlink_impl_get_type$descriptor() {
        return atk_hyperlink_impl_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_hyperlink_impl_get_type()
     * }
     */
    public static MethodHandle atk_hyperlink_impl_get_type$handle() {
        return atk_hyperlink_impl_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_hyperlink_impl_get_type()
     * }
     */
    public static long atk_hyperlink_impl_get_type() {
        var mh$ = atk_hyperlink_impl_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_impl_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hyperlink_impl_get_hyperlink {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hyperlink_impl_get_hyperlink"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkHyperlink *atk_hyperlink_impl_get_hyperlink(AtkHyperlinkImpl *impl)
     * }
     */
    public static FunctionDescriptor atk_hyperlink_impl_get_hyperlink$descriptor() {
        return atk_hyperlink_impl_get_hyperlink.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkHyperlink *atk_hyperlink_impl_get_hyperlink(AtkHyperlinkImpl *impl)
     * }
     */
    public static MethodHandle atk_hyperlink_impl_get_hyperlink$handle() {
        return atk_hyperlink_impl_get_hyperlink.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkHyperlink *atk_hyperlink_impl_get_hyperlink(AtkHyperlinkImpl *impl)
     * }
     */
    public static MemorySegment atk_hyperlink_impl_get_hyperlink(MemorySegment impl) {
        var mh$ = atk_hyperlink_impl_get_hyperlink.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hyperlink_impl_get_hyperlink", impl);
            }
            return (MemorySegment)mh$.invokeExact(impl);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hypertext_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hypertext_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_hypertext_get_type()
     * }
     */
    public static FunctionDescriptor atk_hypertext_get_type$descriptor() {
        return atk_hypertext_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_hypertext_get_type()
     * }
     */
    public static MethodHandle atk_hypertext_get_type$handle() {
        return atk_hypertext_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_hypertext_get_type()
     * }
     */
    public static long atk_hypertext_get_type() {
        var mh$ = atk_hypertext_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hypertext_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hypertext_get_link {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hypertext_get_link"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkHyperlink *atk_hypertext_get_link(AtkHypertext *hypertext, gint link_index)
     * }
     */
    public static FunctionDescriptor atk_hypertext_get_link$descriptor() {
        return atk_hypertext_get_link.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkHyperlink *atk_hypertext_get_link(AtkHypertext *hypertext, gint link_index)
     * }
     */
    public static MethodHandle atk_hypertext_get_link$handle() {
        return atk_hypertext_get_link.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkHyperlink *atk_hypertext_get_link(AtkHypertext *hypertext, gint link_index)
     * }
     */
    public static MemorySegment atk_hypertext_get_link(MemorySegment hypertext, int link_index) {
        var mh$ = atk_hypertext_get_link.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hypertext_get_link", hypertext, link_index);
            }
            return (MemorySegment)mh$.invokeExact(hypertext, link_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hypertext_get_n_links {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hypertext_get_n_links"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_hypertext_get_n_links(AtkHypertext *hypertext)
     * }
     */
    public static FunctionDescriptor atk_hypertext_get_n_links$descriptor() {
        return atk_hypertext_get_n_links.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_hypertext_get_n_links(AtkHypertext *hypertext)
     * }
     */
    public static MethodHandle atk_hypertext_get_n_links$handle() {
        return atk_hypertext_get_n_links.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_hypertext_get_n_links(AtkHypertext *hypertext)
     * }
     */
    public static int atk_hypertext_get_n_links(MemorySegment hypertext) {
        var mh$ = atk_hypertext_get_n_links.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hypertext_get_n_links", hypertext);
            }
            return (int)mh$.invokeExact(hypertext);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_hypertext_get_link_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_hypertext_get_link_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_hypertext_get_link_index(AtkHypertext *hypertext, gint char_index)
     * }
     */
    public static FunctionDescriptor atk_hypertext_get_link_index$descriptor() {
        return atk_hypertext_get_link_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_hypertext_get_link_index(AtkHypertext *hypertext, gint char_index)
     * }
     */
    public static MethodHandle atk_hypertext_get_link_index$handle() {
        return atk_hypertext_get_link_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_hypertext_get_link_index(AtkHypertext *hypertext, gint char_index)
     * }
     */
    public static int atk_hypertext_get_link_index(MemorySegment hypertext, int char_index) {
        var mh$ = atk_hypertext_get_link_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_hypertext_get_link_index", hypertext, char_index);
            }
            return (int)mh$.invokeExact(hypertext, char_index);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_image_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_image_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_image_get_type()
     * }
     */
    public static FunctionDescriptor atk_image_get_type$descriptor() {
        return atk_image_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_image_get_type()
     * }
     */
    public static MethodHandle atk_image_get_type$handle() {
        return atk_image_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_image_get_type()
     * }
     */
    public static long atk_image_get_type() {
        var mh$ = atk_image_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_image_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_image_get_image_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_image_get_image_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_image_get_image_description(AtkImage *image)
     * }
     */
    public static FunctionDescriptor atk_image_get_image_description$descriptor() {
        return atk_image_get_image_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_image_get_image_description(AtkImage *image)
     * }
     */
    public static MethodHandle atk_image_get_image_description$handle() {
        return atk_image_get_image_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_image_get_image_description(AtkImage *image)
     * }
     */
    public static MemorySegment atk_image_get_image_description(MemorySegment image) {
        var mh$ = atk_image_get_image_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_image_get_image_description", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_image_get_image_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_image_get_image_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_image_get_image_size(AtkImage *image, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor atk_image_get_image_size$descriptor() {
        return atk_image_get_image_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_image_get_image_size(AtkImage *image, gint *width, gint *height)
     * }
     */
    public static MethodHandle atk_image_get_image_size$handle() {
        return atk_image_get_image_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_image_get_image_size(AtkImage *image, gint *width, gint *height)
     * }
     */
    public static void atk_image_get_image_size(MemorySegment image, MemorySegment width, MemorySegment height) {
        var mh$ = atk_image_get_image_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_image_get_image_size", image, width, height);
            }
            mh$.invokeExact(image, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_image_set_image_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_image_set_image_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_image_set_image_description(AtkImage *image, const gchar *description)
     * }
     */
    public static FunctionDescriptor atk_image_set_image_description$descriptor() {
        return atk_image_set_image_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_image_set_image_description(AtkImage *image, const gchar *description)
     * }
     */
    public static MethodHandle atk_image_set_image_description$handle() {
        return atk_image_set_image_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_image_set_image_description(AtkImage *image, const gchar *description)
     * }
     */
    public static int atk_image_set_image_description(MemorySegment image, MemorySegment description) {
        var mh$ = atk_image_set_image_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_image_set_image_description", image, description);
            }
            return (int)mh$.invokeExact(image, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_image_get_image_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_image_get_image_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_image_get_image_position(AtkImage *image, gint *x, gint *y, AtkCoordType coord_type)
     * }
     */
    public static FunctionDescriptor atk_image_get_image_position$descriptor() {
        return atk_image_get_image_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_image_get_image_position(AtkImage *image, gint *x, gint *y, AtkCoordType coord_type)
     * }
     */
    public static MethodHandle atk_image_get_image_position$handle() {
        return atk_image_get_image_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_image_get_image_position(AtkImage *image, gint *x, gint *y, AtkCoordType coord_type)
     * }
     */
    public static void atk_image_get_image_position(MemorySegment image, MemorySegment x, MemorySegment y, int coord_type) {
        var mh$ = atk_image_get_image_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_image_get_image_position", image, x, y, coord_type);
            }
            mh$.invokeExact(image, x, y, coord_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_image_get_image_locale {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_image_get_image_locale"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_image_get_image_locale(AtkImage *image)
     * }
     */
    public static FunctionDescriptor atk_image_get_image_locale$descriptor() {
        return atk_image_get_image_locale.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_image_get_image_locale(AtkImage *image)
     * }
     */
    public static MethodHandle atk_image_get_image_locale$handle() {
        return atk_image_get_image_locale.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_image_get_image_locale(AtkImage *image)
     * }
     */
    public static MemorySegment atk_image_get_image_locale(MemorySegment image) {
        var mh$ = atk_image_get_image_locale.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_image_get_image_locale", image);
            }
            return (MemorySegment)mh$.invokeExact(image);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_misc_instance$constants {
        public static final AddressLayout LAYOUT = app_indicator_h.C_POINTER;
        public static final MemorySegment SEGMENT = app_indicator_h.findOrThrow("atk_misc_instance").reinterpret(LAYOUT.byteSize());
    }

    /**
     * Layout for variable:
     * {@snippet lang=c :
     * extern AtkMisc *atk_misc_instance
     * }
     */
    public static AddressLayout atk_misc_instance$layout() {
        return atk_misc_instance$constants.LAYOUT;
    }

    /**
     * Segment for variable:
     * {@snippet lang=c :
     * extern AtkMisc *atk_misc_instance
     * }
     */
    public static MemorySegment atk_misc_instance$segment() {
        return atk_misc_instance$constants.SEGMENT;
    }

    /**
     * Getter for variable:
     * {@snippet lang=c :
     * extern AtkMisc *atk_misc_instance
     * }
     */
    public static MemorySegment atk_misc_instance() {
        return atk_misc_instance$constants.SEGMENT.get(atk_misc_instance$constants.LAYOUT, 0L);
    }

    /**
     * Setter for variable:
     * {@snippet lang=c :
     * extern AtkMisc *atk_misc_instance
     * }
     */
    public static void atk_misc_instance(MemorySegment varValue) {
        atk_misc_instance$constants.SEGMENT.set(atk_misc_instance$constants.LAYOUT, 0L, varValue);
    }

    private static class atk_misc_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_misc_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_misc_get_type()
     * }
     */
    public static FunctionDescriptor atk_misc_get_type$descriptor() {
        return atk_misc_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_misc_get_type()
     * }
     */
    public static MethodHandle atk_misc_get_type$handle() {
        return atk_misc_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_misc_get_type()
     * }
     */
    public static long atk_misc_get_type() {
        var mh$ = atk_misc_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_misc_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_misc_threads_enter {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_misc_threads_enter"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_misc_threads_enter(AtkMisc *misc)
     * }
     */
    public static FunctionDescriptor atk_misc_threads_enter$descriptor() {
        return atk_misc_threads_enter.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_misc_threads_enter(AtkMisc *misc)
     * }
     */
    public static MethodHandle atk_misc_threads_enter$handle() {
        return atk_misc_threads_enter.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_misc_threads_enter(AtkMisc *misc)
     * }
     */
    public static void atk_misc_threads_enter(MemorySegment misc) {
        var mh$ = atk_misc_threads_enter.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_misc_threads_enter", misc);
            }
            mh$.invokeExact(misc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_misc_threads_leave {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_misc_threads_leave"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_misc_threads_leave(AtkMisc *misc)
     * }
     */
    public static FunctionDescriptor atk_misc_threads_leave$descriptor() {
        return atk_misc_threads_leave.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_misc_threads_leave(AtkMisc *misc)
     * }
     */
    public static MethodHandle atk_misc_threads_leave$handle() {
        return atk_misc_threads_leave.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_misc_threads_leave(AtkMisc *misc)
     * }
     */
    public static void atk_misc_threads_leave(MemorySegment misc) {
        var mh$ = atk_misc_threads_leave.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_misc_threads_leave", misc);
            }
            mh$.invokeExact(misc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_misc_get_instance {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_misc_get_instance"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const AtkMisc *atk_misc_get_instance()
     * }
     */
    public static FunctionDescriptor atk_misc_get_instance$descriptor() {
        return atk_misc_get_instance.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const AtkMisc *atk_misc_get_instance()
     * }
     */
    public static MethodHandle atk_misc_get_instance$handle() {
        return atk_misc_get_instance.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const AtkMisc *atk_misc_get_instance()
     * }
     */
    public static MemorySegment atk_misc_get_instance() {
        var mh$ = atk_misc_get_instance.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_misc_get_instance");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_no_op_object_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_no_op_object_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_no_op_object_get_type()
     * }
     */
    public static FunctionDescriptor atk_no_op_object_get_type$descriptor() {
        return atk_no_op_object_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_no_op_object_get_type()
     * }
     */
    public static MethodHandle atk_no_op_object_get_type$handle() {
        return atk_no_op_object_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_no_op_object_get_type()
     * }
     */
    public static long atk_no_op_object_get_type() {
        var mh$ = atk_no_op_object_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_no_op_object_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_no_op_object_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_no_op_object_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_no_op_object_new(GObject *obj)
     * }
     */
    public static FunctionDescriptor atk_no_op_object_new$descriptor() {
        return atk_no_op_object_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_no_op_object_new(GObject *obj)
     * }
     */
    public static MethodHandle atk_no_op_object_new$handle() {
        return atk_no_op_object_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_no_op_object_new(GObject *obj)
     * }
     */
    public static MemorySegment atk_no_op_object_new(MemorySegment obj) {
        var mh$ = atk_no_op_object_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_no_op_object_new", obj);
            }
            return (MemorySegment)mh$.invokeExact(obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_factory_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_factory_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_object_factory_get_type()
     * }
     */
    public static FunctionDescriptor atk_object_factory_get_type$descriptor() {
        return atk_object_factory_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_object_factory_get_type()
     * }
     */
    public static MethodHandle atk_object_factory_get_type$handle() {
        return atk_object_factory_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_object_factory_get_type()
     * }
     */
    public static long atk_object_factory_get_type() {
        var mh$ = atk_object_factory_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_factory_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_factory_create_accessible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_factory_create_accessible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_object_factory_create_accessible(AtkObjectFactory *factory, GObject *obj)
     * }
     */
    public static FunctionDescriptor atk_object_factory_create_accessible$descriptor() {
        return atk_object_factory_create_accessible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_object_factory_create_accessible(AtkObjectFactory *factory, GObject *obj)
     * }
     */
    public static MethodHandle atk_object_factory_create_accessible$handle() {
        return atk_object_factory_create_accessible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_object_factory_create_accessible(AtkObjectFactory *factory, GObject *obj)
     * }
     */
    public static MemorySegment atk_object_factory_create_accessible(MemorySegment factory, MemorySegment obj) {
        var mh$ = atk_object_factory_create_accessible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_factory_create_accessible", factory, obj);
            }
            return (MemorySegment)mh$.invokeExact(factory, obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_factory_invalidate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_factory_invalidate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_object_factory_invalidate(AtkObjectFactory *factory)
     * }
     */
    public static FunctionDescriptor atk_object_factory_invalidate$descriptor() {
        return atk_object_factory_invalidate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_object_factory_invalidate(AtkObjectFactory *factory)
     * }
     */
    public static MethodHandle atk_object_factory_invalidate$handle() {
        return atk_object_factory_invalidate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_object_factory_invalidate(AtkObjectFactory *factory)
     * }
     */
    public static void atk_object_factory_invalidate(MemorySegment factory) {
        var mh$ = atk_object_factory_invalidate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_factory_invalidate", factory);
            }
            mh$.invokeExact(factory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_object_factory_get_accessible_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_object_factory_get_accessible_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_object_factory_get_accessible_type(AtkObjectFactory *factory)
     * }
     */
    public static FunctionDescriptor atk_object_factory_get_accessible_type$descriptor() {
        return atk_object_factory_get_accessible_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_object_factory_get_accessible_type(AtkObjectFactory *factory)
     * }
     */
    public static MethodHandle atk_object_factory_get_accessible_type$handle() {
        return atk_object_factory_get_accessible_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_object_factory_get_accessible_type(AtkObjectFactory *factory)
     * }
     */
    public static long atk_object_factory_get_accessible_type(MemorySegment factory) {
        var mh$ = atk_object_factory_get_accessible_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_object_factory_get_accessible_type", factory);
            }
            return (long)mh$.invokeExact(factory);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_no_op_object_factory_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_no_op_object_factory_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_no_op_object_factory_get_type()
     * }
     */
    public static FunctionDescriptor atk_no_op_object_factory_get_type$descriptor() {
        return atk_no_op_object_factory_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_no_op_object_factory_get_type()
     * }
     */
    public static MethodHandle atk_no_op_object_factory_get_type$handle() {
        return atk_no_op_object_factory_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_no_op_object_factory_get_type()
     * }
     */
    public static long atk_no_op_object_factory_get_type() {
        var mh$ = atk_no_op_object_factory_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_no_op_object_factory_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_no_op_object_factory_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_no_op_object_factory_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObjectFactory *atk_no_op_object_factory_new()
     * }
     */
    public static FunctionDescriptor atk_no_op_object_factory_new$descriptor() {
        return atk_no_op_object_factory_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObjectFactory *atk_no_op_object_factory_new()
     * }
     */
    public static MethodHandle atk_no_op_object_factory_new$handle() {
        return atk_no_op_object_factory_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObjectFactory *atk_no_op_object_factory_new()
     * }
     */
    public static MemorySegment atk_no_op_object_factory_new() {
        var mh$ = atk_no_op_object_factory_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_no_op_object_factory_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_plug_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_plug_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_plug_get_type()
     * }
     */
    public static FunctionDescriptor atk_plug_get_type$descriptor() {
        return atk_plug_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_plug_get_type()
     * }
     */
    public static MethodHandle atk_plug_get_type$handle() {
        return atk_plug_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_plug_get_type()
     * }
     */
    public static long atk_plug_get_type() {
        var mh$ = atk_plug_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_plug_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_plug_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_plug_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_plug_new()
     * }
     */
    public static FunctionDescriptor atk_plug_new$descriptor() {
        return atk_plug_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_plug_new()
     * }
     */
    public static MethodHandle atk_plug_new$handle() {
        return atk_plug_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_plug_new()
     * }
     */
    public static MemorySegment atk_plug_new() {
        var mh$ = atk_plug_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_plug_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_plug_set_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_plug_set_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_plug_set_child(AtkPlug *plug, AtkObject *child)
     * }
     */
    public static FunctionDescriptor atk_plug_set_child$descriptor() {
        return atk_plug_set_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_plug_set_child(AtkPlug *plug, AtkObject *child)
     * }
     */
    public static MethodHandle atk_plug_set_child$handle() {
        return atk_plug_set_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_plug_set_child(AtkPlug *plug, AtkObject *child)
     * }
     */
    public static void atk_plug_set_child(MemorySegment plug, MemorySegment child) {
        var mh$ = atk_plug_set_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_plug_set_child", plug, child);
            }
            mh$.invokeExact(plug, child);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_plug_get_id {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_plug_get_id"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *atk_plug_get_id(AtkPlug *plug)
     * }
     */
    public static FunctionDescriptor atk_plug_get_id$descriptor() {
        return atk_plug_get_id.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *atk_plug_get_id(AtkPlug *plug)
     * }
     */
    public static MethodHandle atk_plug_get_id$handle() {
        return atk_plug_get_id.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *atk_plug_get_id(AtkPlug *plug)
     * }
     */
    public static MemorySegment atk_plug_get_id(MemorySegment plug) {
        var mh$ = atk_plug_get_id.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_plug_get_id", plug);
            }
            return (MemorySegment)mh$.invokeExact(plug);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_range_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_range_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_range_get_type()
     * }
     */
    public static FunctionDescriptor atk_range_get_type$descriptor() {
        return atk_range_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_range_get_type()
     * }
     */
    public static MethodHandle atk_range_get_type$handle() {
        return atk_range_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_range_get_type()
     * }
     */
    public static long atk_range_get_type() {
        var mh$ = atk_range_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_range_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_range_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_range_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRange *atk_range_copy(AtkRange *src)
     * }
     */
    public static FunctionDescriptor atk_range_copy$descriptor() {
        return atk_range_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRange *atk_range_copy(AtkRange *src)
     * }
     */
    public static MethodHandle atk_range_copy$handle() {
        return atk_range_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRange *atk_range_copy(AtkRange *src)
     * }
     */
    public static MemorySegment atk_range_copy(MemorySegment src) {
        var mh$ = atk_range_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_range_copy", src);
            }
            return (MemorySegment)mh$.invokeExact(src);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_range_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_range_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_range_free(AtkRange *range)
     * }
     */
    public static FunctionDescriptor atk_range_free$descriptor() {
        return atk_range_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_range_free(AtkRange *range)
     * }
     */
    public static MethodHandle atk_range_free$handle() {
        return atk_range_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_range_free(AtkRange *range)
     * }
     */
    public static void atk_range_free(MemorySegment range) {
        var mh$ = atk_range_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_range_free", range);
            }
            mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_range_get_lower_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_range_get_lower_limit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble atk_range_get_lower_limit(AtkRange *range)
     * }
     */
    public static FunctionDescriptor atk_range_get_lower_limit$descriptor() {
        return atk_range_get_lower_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble atk_range_get_lower_limit(AtkRange *range)
     * }
     */
    public static MethodHandle atk_range_get_lower_limit$handle() {
        return atk_range_get_lower_limit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble atk_range_get_lower_limit(AtkRange *range)
     * }
     */
    public static double atk_range_get_lower_limit(MemorySegment range) {
        var mh$ = atk_range_get_lower_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_range_get_lower_limit", range);
            }
            return (double)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_range_get_upper_limit {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_range_get_upper_limit"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble atk_range_get_upper_limit(AtkRange *range)
     * }
     */
    public static FunctionDescriptor atk_range_get_upper_limit$descriptor() {
        return atk_range_get_upper_limit.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble atk_range_get_upper_limit(AtkRange *range)
     * }
     */
    public static MethodHandle atk_range_get_upper_limit$handle() {
        return atk_range_get_upper_limit.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble atk_range_get_upper_limit(AtkRange *range)
     * }
     */
    public static double atk_range_get_upper_limit(MemorySegment range) {
        var mh$ = atk_range_get_upper_limit.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_range_get_upper_limit", range);
            }
            return (double)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_range_get_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_range_get_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_range_get_description(AtkRange *range)
     * }
     */
    public static FunctionDescriptor atk_range_get_description$descriptor() {
        return atk_range_get_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_range_get_description(AtkRange *range)
     * }
     */
    public static MethodHandle atk_range_get_description$handle() {
        return atk_range_get_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_range_get_description(AtkRange *range)
     * }
     */
    public static MemorySegment atk_range_get_description(MemorySegment range) {
        var mh$ = atk_range_get_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_range_get_description", range);
            }
            return (MemorySegment)mh$.invokeExact(range);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_range_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_range_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRange *atk_range_new(gdouble lower_limit, gdouble upper_limit, const gchar *description)
     * }
     */
    public static FunctionDescriptor atk_range_new$descriptor() {
        return atk_range_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRange *atk_range_new(gdouble lower_limit, gdouble upper_limit, const gchar *description)
     * }
     */
    public static MethodHandle atk_range_new$handle() {
        return atk_range_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRange *atk_range_new(gdouble lower_limit, gdouble upper_limit, const gchar *description)
     * }
     */
    public static MemorySegment atk_range_new(double lower_limit, double upper_limit, MemorySegment description) {
        var mh$ = atk_range_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_range_new", lower_limit, upper_limit, description);
            }
            return (MemorySegment)mh$.invokeExact(lower_limit, upper_limit, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_registry_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_registry_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_registry_get_type()
     * }
     */
    public static FunctionDescriptor atk_registry_get_type$descriptor() {
        return atk_registry_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_registry_get_type()
     * }
     */
    public static MethodHandle atk_registry_get_type$handle() {
        return atk_registry_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_registry_get_type()
     * }
     */
    public static long atk_registry_get_type() {
        var mh$ = atk_registry_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_registry_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_registry_set_factory_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_registry_set_factory_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_registry_set_factory_type(AtkRegistry *registry, GType type, GType factory_type)
     * }
     */
    public static FunctionDescriptor atk_registry_set_factory_type$descriptor() {
        return atk_registry_set_factory_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_registry_set_factory_type(AtkRegistry *registry, GType type, GType factory_type)
     * }
     */
    public static MethodHandle atk_registry_set_factory_type$handle() {
        return atk_registry_set_factory_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_registry_set_factory_type(AtkRegistry *registry, GType type, GType factory_type)
     * }
     */
    public static void atk_registry_set_factory_type(MemorySegment registry, long type, long factory_type) {
        var mh$ = atk_registry_set_factory_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_registry_set_factory_type", registry, type, factory_type);
            }
            mh$.invokeExact(registry, type, factory_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_registry_get_factory_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_registry_get_factory_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_registry_get_factory_type(AtkRegistry *registry, GType type)
     * }
     */
    public static FunctionDescriptor atk_registry_get_factory_type$descriptor() {
        return atk_registry_get_factory_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_registry_get_factory_type(AtkRegistry *registry, GType type)
     * }
     */
    public static MethodHandle atk_registry_get_factory_type$handle() {
        return atk_registry_get_factory_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_registry_get_factory_type(AtkRegistry *registry, GType type)
     * }
     */
    public static long atk_registry_get_factory_type(MemorySegment registry, long type) {
        var mh$ = atk_registry_get_factory_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_registry_get_factory_type", registry, type);
            }
            return (long)mh$.invokeExact(registry, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_registry_get_factory {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_registry_get_factory"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObjectFactory *atk_registry_get_factory(AtkRegistry *registry, GType type)
     * }
     */
    public static FunctionDescriptor atk_registry_get_factory$descriptor() {
        return atk_registry_get_factory.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObjectFactory *atk_registry_get_factory(AtkRegistry *registry, GType type)
     * }
     */
    public static MethodHandle atk_registry_get_factory$handle() {
        return atk_registry_get_factory.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObjectFactory *atk_registry_get_factory(AtkRegistry *registry, GType type)
     * }
     */
    public static MemorySegment atk_registry_get_factory(MemorySegment registry, long type) {
        var mh$ = atk_registry_get_factory.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_registry_get_factory", registry, type);
            }
            return (MemorySegment)mh$.invokeExact(registry, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_get_default_registry {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_get_default_registry"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRegistry *atk_get_default_registry()
     * }
     */
    public static FunctionDescriptor atk_get_default_registry$descriptor() {
        return atk_get_default_registry.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRegistry *atk_get_default_registry()
     * }
     */
    public static MethodHandle atk_get_default_registry$handle() {
        return atk_get_default_registry.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRegistry *atk_get_default_registry()
     * }
     */
    public static MemorySegment atk_get_default_registry() {
        var mh$ = atk_get_default_registry.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_get_default_registry");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_relation_get_type()
     * }
     */
    public static FunctionDescriptor atk_relation_get_type$descriptor() {
        return atk_relation_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_relation_get_type()
     * }
     */
    public static MethodHandle atk_relation_get_type$handle() {
        return atk_relation_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_relation_get_type()
     * }
     */
    public static long atk_relation_get_type() {
        var mh$ = atk_relation_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_type_register {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_type_register"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRelationType atk_relation_type_register(const gchar *name)
     * }
     */
    public static FunctionDescriptor atk_relation_type_register$descriptor() {
        return atk_relation_type_register.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRelationType atk_relation_type_register(const gchar *name)
     * }
     */
    public static MethodHandle atk_relation_type_register$handle() {
        return atk_relation_type_register.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRelationType atk_relation_type_register(const gchar *name)
     * }
     */
    public static int atk_relation_type_register(MemorySegment name) {
        var mh$ = atk_relation_type_register.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_type_register", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_type_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_type_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_relation_type_get_name(AtkRelationType type)
     * }
     */
    public static FunctionDescriptor atk_relation_type_get_name$descriptor() {
        return atk_relation_type_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_relation_type_get_name(AtkRelationType type)
     * }
     */
    public static MethodHandle atk_relation_type_get_name$handle() {
        return atk_relation_type_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_relation_type_get_name(AtkRelationType type)
     * }
     */
    public static MemorySegment atk_relation_type_get_name(int type) {
        var mh$ = atk_relation_type_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_type_get_name", type);
            }
            return (MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_type_for_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_type_for_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRelationType atk_relation_type_for_name(const gchar *name)
     * }
     */
    public static FunctionDescriptor atk_relation_type_for_name$descriptor() {
        return atk_relation_type_for_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRelationType atk_relation_type_for_name(const gchar *name)
     * }
     */
    public static MethodHandle atk_relation_type_for_name$handle() {
        return atk_relation_type_for_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRelationType atk_relation_type_for_name(const gchar *name)
     * }
     */
    public static int atk_relation_type_for_name(MemorySegment name) {
        var mh$ = atk_relation_type_for_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_type_for_name", name);
            }
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRelation *atk_relation_new(AtkObject **targets, gint n_targets, AtkRelationType relationship)
     * }
     */
    public static FunctionDescriptor atk_relation_new$descriptor() {
        return atk_relation_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRelation *atk_relation_new(AtkObject **targets, gint n_targets, AtkRelationType relationship)
     * }
     */
    public static MethodHandle atk_relation_new$handle() {
        return atk_relation_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRelation *atk_relation_new(AtkObject **targets, gint n_targets, AtkRelationType relationship)
     * }
     */
    public static MemorySegment atk_relation_new(MemorySegment targets, int n_targets, int relationship) {
        var mh$ = atk_relation_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_new", targets, n_targets, relationship);
            }
            return (MemorySegment)mh$.invokeExact(targets, n_targets, relationship);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_get_relation_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_get_relation_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRelationType atk_relation_get_relation_type(AtkRelation *relation)
     * }
     */
    public static FunctionDescriptor atk_relation_get_relation_type$descriptor() {
        return atk_relation_get_relation_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRelationType atk_relation_get_relation_type(AtkRelation *relation)
     * }
     */
    public static MethodHandle atk_relation_get_relation_type$handle() {
        return atk_relation_get_relation_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRelationType atk_relation_get_relation_type(AtkRelation *relation)
     * }
     */
    public static int atk_relation_get_relation_type(MemorySegment relation) {
        var mh$ = atk_relation_get_relation_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_get_relation_type", relation);
            }
            return (int)mh$.invokeExact(relation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_get_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_get_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *atk_relation_get_target(AtkRelation *relation)
     * }
     */
    public static FunctionDescriptor atk_relation_get_target$descriptor() {
        return atk_relation_get_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *atk_relation_get_target(AtkRelation *relation)
     * }
     */
    public static MethodHandle atk_relation_get_target$handle() {
        return atk_relation_get_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *atk_relation_get_target(AtkRelation *relation)
     * }
     */
    public static MemorySegment atk_relation_get_target(MemorySegment relation) {
        var mh$ = atk_relation_get_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_get_target", relation);
            }
            return (MemorySegment)mh$.invokeExact(relation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_add_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_add_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_relation_add_target(AtkRelation *relation, AtkObject *target)
     * }
     */
    public static FunctionDescriptor atk_relation_add_target$descriptor() {
        return atk_relation_add_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_relation_add_target(AtkRelation *relation, AtkObject *target)
     * }
     */
    public static MethodHandle atk_relation_add_target$handle() {
        return atk_relation_add_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_relation_add_target(AtkRelation *relation, AtkObject *target)
     * }
     */
    public static void atk_relation_add_target(MemorySegment relation, MemorySegment target) {
        var mh$ = atk_relation_add_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_add_target", relation, target);
            }
            mh$.invokeExact(relation, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_remove_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_remove_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_relation_remove_target(AtkRelation *relation, AtkObject *target)
     * }
     */
    public static FunctionDescriptor atk_relation_remove_target$descriptor() {
        return atk_relation_remove_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_relation_remove_target(AtkRelation *relation, AtkObject *target)
     * }
     */
    public static MethodHandle atk_relation_remove_target$handle() {
        return atk_relation_remove_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_relation_remove_target(AtkRelation *relation, AtkObject *target)
     * }
     */
    public static int atk_relation_remove_target(MemorySegment relation, MemorySegment target) {
        var mh$ = atk_relation_remove_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_remove_target", relation, target);
            }
            return (int)mh$.invokeExact(relation, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_set_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_set_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_relation_set_get_type()
     * }
     */
    public static FunctionDescriptor atk_relation_set_get_type$descriptor() {
        return atk_relation_set_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_relation_set_get_type()
     * }
     */
    public static MethodHandle atk_relation_set_get_type$handle() {
        return atk_relation_set_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_relation_set_get_type()
     * }
     */
    public static long atk_relation_set_get_type() {
        var mh$ = atk_relation_set_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_set_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_set_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_set_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRelationSet *atk_relation_set_new()
     * }
     */
    public static FunctionDescriptor atk_relation_set_new$descriptor() {
        return atk_relation_set_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRelationSet *atk_relation_set_new()
     * }
     */
    public static MethodHandle atk_relation_set_new$handle() {
        return atk_relation_set_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRelationSet *atk_relation_set_new()
     * }
     */
    public static MemorySegment atk_relation_set_new() {
        var mh$ = atk_relation_set_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_set_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_set_contains {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_set_contains"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_relation_set_contains(AtkRelationSet *set, AtkRelationType relationship)
     * }
     */
    public static FunctionDescriptor atk_relation_set_contains$descriptor() {
        return atk_relation_set_contains.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_relation_set_contains(AtkRelationSet *set, AtkRelationType relationship)
     * }
     */
    public static MethodHandle atk_relation_set_contains$handle() {
        return atk_relation_set_contains.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_relation_set_contains(AtkRelationSet *set, AtkRelationType relationship)
     * }
     */
    public static int atk_relation_set_contains(MemorySegment set, int relationship) {
        var mh$ = atk_relation_set_contains.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_set_contains", set, relationship);
            }
            return (int)mh$.invokeExact(set, relationship);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_set_contains_target {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_set_contains_target"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_relation_set_contains_target(AtkRelationSet *set, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static FunctionDescriptor atk_relation_set_contains_target$descriptor() {
        return atk_relation_set_contains_target.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_relation_set_contains_target(AtkRelationSet *set, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static MethodHandle atk_relation_set_contains_target$handle() {
        return atk_relation_set_contains_target.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_relation_set_contains_target(AtkRelationSet *set, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static int atk_relation_set_contains_target(MemorySegment set, int relationship, MemorySegment target) {
        var mh$ = atk_relation_set_contains_target.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_set_contains_target", set, relationship, target);
            }
            return (int)mh$.invokeExact(set, relationship, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_set_remove {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_set_remove"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_relation_set_remove(AtkRelationSet *set, AtkRelation *relation)
     * }
     */
    public static FunctionDescriptor atk_relation_set_remove$descriptor() {
        return atk_relation_set_remove.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_relation_set_remove(AtkRelationSet *set, AtkRelation *relation)
     * }
     */
    public static MethodHandle atk_relation_set_remove$handle() {
        return atk_relation_set_remove.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_relation_set_remove(AtkRelationSet *set, AtkRelation *relation)
     * }
     */
    public static void atk_relation_set_remove(MemorySegment set, MemorySegment relation) {
        var mh$ = atk_relation_set_remove.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_set_remove", set, relation);
            }
            mh$.invokeExact(set, relation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_set_add {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_set_add"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_relation_set_add(AtkRelationSet *set, AtkRelation *relation)
     * }
     */
    public static FunctionDescriptor atk_relation_set_add$descriptor() {
        return atk_relation_set_add.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_relation_set_add(AtkRelationSet *set, AtkRelation *relation)
     * }
     */
    public static MethodHandle atk_relation_set_add$handle() {
        return atk_relation_set_add.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_relation_set_add(AtkRelationSet *set, AtkRelation *relation)
     * }
     */
    public static void atk_relation_set_add(MemorySegment set, MemorySegment relation) {
        var mh$ = atk_relation_set_add.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_set_add", set, relation);
            }
            mh$.invokeExact(set, relation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_set_get_n_relations {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_set_get_n_relations"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_relation_set_get_n_relations(AtkRelationSet *set)
     * }
     */
    public static FunctionDescriptor atk_relation_set_get_n_relations$descriptor() {
        return atk_relation_set_get_n_relations.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_relation_set_get_n_relations(AtkRelationSet *set)
     * }
     */
    public static MethodHandle atk_relation_set_get_n_relations$handle() {
        return atk_relation_set_get_n_relations.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_relation_set_get_n_relations(AtkRelationSet *set)
     * }
     */
    public static int atk_relation_set_get_n_relations(MemorySegment set) {
        var mh$ = atk_relation_set_get_n_relations.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_set_get_n_relations", set);
            }
            return (int)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_set_get_relation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_set_get_relation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRelation *atk_relation_set_get_relation(AtkRelationSet *set, gint i)
     * }
     */
    public static FunctionDescriptor atk_relation_set_get_relation$descriptor() {
        return atk_relation_set_get_relation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRelation *atk_relation_set_get_relation(AtkRelationSet *set, gint i)
     * }
     */
    public static MethodHandle atk_relation_set_get_relation$handle() {
        return atk_relation_set_get_relation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRelation *atk_relation_set_get_relation(AtkRelationSet *set, gint i)
     * }
     */
    public static MemorySegment atk_relation_set_get_relation(MemorySegment set, int i) {
        var mh$ = atk_relation_set_get_relation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_set_get_relation", set, i);
            }
            return (MemorySegment)mh$.invokeExact(set, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_set_get_relation_by_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_set_get_relation_by_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRelation *atk_relation_set_get_relation_by_type(AtkRelationSet *set, AtkRelationType relationship)
     * }
     */
    public static FunctionDescriptor atk_relation_set_get_relation_by_type$descriptor() {
        return atk_relation_set_get_relation_by_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRelation *atk_relation_set_get_relation_by_type(AtkRelationSet *set, AtkRelationType relationship)
     * }
     */
    public static MethodHandle atk_relation_set_get_relation_by_type$handle() {
        return atk_relation_set_get_relation_by_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRelation *atk_relation_set_get_relation_by_type(AtkRelationSet *set, AtkRelationType relationship)
     * }
     */
    public static MemorySegment atk_relation_set_get_relation_by_type(MemorySegment set, int relationship) {
        var mh$ = atk_relation_set_get_relation_by_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_set_get_relation_by_type", set, relationship);
            }
            return (MemorySegment)mh$.invokeExact(set, relationship);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_relation_set_add_relation_by_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_relation_set_add_relation_by_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_relation_set_add_relation_by_type(AtkRelationSet *set, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static FunctionDescriptor atk_relation_set_add_relation_by_type$descriptor() {
        return atk_relation_set_add_relation_by_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_relation_set_add_relation_by_type(AtkRelationSet *set, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static MethodHandle atk_relation_set_add_relation_by_type$handle() {
        return atk_relation_set_add_relation_by_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_relation_set_add_relation_by_type(AtkRelationSet *set, AtkRelationType relationship, AtkObject *target)
     * }
     */
    public static void atk_relation_set_add_relation_by_type(MemorySegment set, int relationship, MemorySegment target) {
        var mh$ = atk_relation_set_add_relation_by_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_relation_set_add_relation_by_type", set, relationship, target);
            }
            mh$.invokeExact(set, relationship, target);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_selection_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_selection_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_selection_get_type()
     * }
     */
    public static FunctionDescriptor atk_selection_get_type$descriptor() {
        return atk_selection_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_selection_get_type()
     * }
     */
    public static MethodHandle atk_selection_get_type$handle() {
        return atk_selection_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_selection_get_type()
     * }
     */
    public static long atk_selection_get_type() {
        var mh$ = atk_selection_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_selection_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_selection_add_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_selection_add_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_selection_add_selection(AtkSelection *selection, gint i)
     * }
     */
    public static FunctionDescriptor atk_selection_add_selection$descriptor() {
        return atk_selection_add_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_selection_add_selection(AtkSelection *selection, gint i)
     * }
     */
    public static MethodHandle atk_selection_add_selection$handle() {
        return atk_selection_add_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_selection_add_selection(AtkSelection *selection, gint i)
     * }
     */
    public static int atk_selection_add_selection(MemorySegment selection, int i) {
        var mh$ = atk_selection_add_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_selection_add_selection", selection, i);
            }
            return (int)mh$.invokeExact(selection, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_selection_clear_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_selection_clear_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_selection_clear_selection(AtkSelection *selection)
     * }
     */
    public static FunctionDescriptor atk_selection_clear_selection$descriptor() {
        return atk_selection_clear_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_selection_clear_selection(AtkSelection *selection)
     * }
     */
    public static MethodHandle atk_selection_clear_selection$handle() {
        return atk_selection_clear_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_selection_clear_selection(AtkSelection *selection)
     * }
     */
    public static int atk_selection_clear_selection(MemorySegment selection) {
        var mh$ = atk_selection_clear_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_selection_clear_selection", selection);
            }
            return (int)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_selection_ref_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_selection_ref_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_selection_ref_selection(AtkSelection *selection, gint i)
     * }
     */
    public static FunctionDescriptor atk_selection_ref_selection$descriptor() {
        return atk_selection_ref_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_selection_ref_selection(AtkSelection *selection, gint i)
     * }
     */
    public static MethodHandle atk_selection_ref_selection$handle() {
        return atk_selection_ref_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_selection_ref_selection(AtkSelection *selection, gint i)
     * }
     */
    public static MemorySegment atk_selection_ref_selection(MemorySegment selection, int i) {
        var mh$ = atk_selection_ref_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_selection_ref_selection", selection, i);
            }
            return (MemorySegment)mh$.invokeExact(selection, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_selection_get_selection_count {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_selection_get_selection_count"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_selection_get_selection_count(AtkSelection *selection)
     * }
     */
    public static FunctionDescriptor atk_selection_get_selection_count$descriptor() {
        return atk_selection_get_selection_count.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_selection_get_selection_count(AtkSelection *selection)
     * }
     */
    public static MethodHandle atk_selection_get_selection_count$handle() {
        return atk_selection_get_selection_count.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_selection_get_selection_count(AtkSelection *selection)
     * }
     */
    public static int atk_selection_get_selection_count(MemorySegment selection) {
        var mh$ = atk_selection_get_selection_count.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_selection_get_selection_count", selection);
            }
            return (int)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_selection_is_child_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_selection_is_child_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_selection_is_child_selected(AtkSelection *selection, gint i)
     * }
     */
    public static FunctionDescriptor atk_selection_is_child_selected$descriptor() {
        return atk_selection_is_child_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_selection_is_child_selected(AtkSelection *selection, gint i)
     * }
     */
    public static MethodHandle atk_selection_is_child_selected$handle() {
        return atk_selection_is_child_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_selection_is_child_selected(AtkSelection *selection, gint i)
     * }
     */
    public static int atk_selection_is_child_selected(MemorySegment selection, int i) {
        var mh$ = atk_selection_is_child_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_selection_is_child_selected", selection, i);
            }
            return (int)mh$.invokeExact(selection, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_selection_remove_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_selection_remove_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_selection_remove_selection(AtkSelection *selection, gint i)
     * }
     */
    public static FunctionDescriptor atk_selection_remove_selection$descriptor() {
        return atk_selection_remove_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_selection_remove_selection(AtkSelection *selection, gint i)
     * }
     */
    public static MethodHandle atk_selection_remove_selection$handle() {
        return atk_selection_remove_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_selection_remove_selection(AtkSelection *selection, gint i)
     * }
     */
    public static int atk_selection_remove_selection(MemorySegment selection, int i) {
        var mh$ = atk_selection_remove_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_selection_remove_selection", selection, i);
            }
            return (int)mh$.invokeExact(selection, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_selection_select_all_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_selection_select_all_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_selection_select_all_selection(AtkSelection *selection)
     * }
     */
    public static FunctionDescriptor atk_selection_select_all_selection$descriptor() {
        return atk_selection_select_all_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_selection_select_all_selection(AtkSelection *selection)
     * }
     */
    public static MethodHandle atk_selection_select_all_selection$handle() {
        return atk_selection_select_all_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_selection_select_all_selection(AtkSelection *selection)
     * }
     */
    public static int atk_selection_select_all_selection(MemorySegment selection) {
        var mh$ = atk_selection_select_all_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_selection_select_all_selection", selection);
            }
            return (int)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_socket_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_socket_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_socket_get_type()
     * }
     */
    public static FunctionDescriptor atk_socket_get_type$descriptor() {
        return atk_socket_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_socket_get_type()
     * }
     */
    public static MethodHandle atk_socket_get_type$handle() {
        return atk_socket_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_socket_get_type()
     * }
     */
    public static long atk_socket_get_type() {
        var mh$ = atk_socket_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_socket_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_socket_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_socket_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_socket_new()
     * }
     */
    public static FunctionDescriptor atk_socket_new$descriptor() {
        return atk_socket_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_socket_new()
     * }
     */
    public static MethodHandle atk_socket_new$handle() {
        return atk_socket_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_socket_new()
     * }
     */
    public static MemorySegment atk_socket_new() {
        var mh$ = atk_socket_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_socket_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_socket_embed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_socket_embed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_socket_embed(AtkSocket *obj, const gchar *plug_id)
     * }
     */
    public static FunctionDescriptor atk_socket_embed$descriptor() {
        return atk_socket_embed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_socket_embed(AtkSocket *obj, const gchar *plug_id)
     * }
     */
    public static MethodHandle atk_socket_embed$handle() {
        return atk_socket_embed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_socket_embed(AtkSocket *obj, const gchar *plug_id)
     * }
     */
    public static void atk_socket_embed(MemorySegment obj, MemorySegment plug_id) {
        var mh$ = atk_socket_embed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_socket_embed", obj, plug_id);
            }
            mh$.invokeExact(obj, plug_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_socket_is_occupied {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_socket_is_occupied"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_socket_is_occupied(AtkSocket *obj)
     * }
     */
    public static FunctionDescriptor atk_socket_is_occupied$descriptor() {
        return atk_socket_is_occupied.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_socket_is_occupied(AtkSocket *obj)
     * }
     */
    public static MethodHandle atk_socket_is_occupied$handle() {
        return atk_socket_is_occupied.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_socket_is_occupied(AtkSocket *obj)
     * }
     */
    public static int atk_socket_is_occupied(MemorySegment obj) {
        var mh$ = atk_socket_is_occupied.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_socket_is_occupied", obj);
            }
            return (int)mh$.invokeExact(obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_state_set_get_type()
     * }
     */
    public static FunctionDescriptor atk_state_set_get_type$descriptor() {
        return atk_state_set_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_state_set_get_type()
     * }
     */
    public static MethodHandle atk_state_set_get_type$handle() {
        return atk_state_set_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_state_set_get_type()
     * }
     */
    public static long atk_state_set_get_type() {
        var mh$ = atk_state_set_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_new()
     * }
     */
    public static FunctionDescriptor atk_state_set_new$descriptor() {
        return atk_state_set_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_new()
     * }
     */
    public static MethodHandle atk_state_set_new$handle() {
        return atk_state_set_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_new()
     * }
     */
    public static MemorySegment atk_state_set_new() {
        var mh$ = atk_state_set_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_is_empty {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_is_empty"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_state_set_is_empty(AtkStateSet *set)
     * }
     */
    public static FunctionDescriptor atk_state_set_is_empty$descriptor() {
        return atk_state_set_is_empty.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_state_set_is_empty(AtkStateSet *set)
     * }
     */
    public static MethodHandle atk_state_set_is_empty$handle() {
        return atk_state_set_is_empty.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_state_set_is_empty(AtkStateSet *set)
     * }
     */
    public static int atk_state_set_is_empty(MemorySegment set) {
        var mh$ = atk_state_set_is_empty.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_is_empty", set);
            }
            return (int)mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_add_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_add_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_state_set_add_state(AtkStateSet *set, AtkStateType type)
     * }
     */
    public static FunctionDescriptor atk_state_set_add_state$descriptor() {
        return atk_state_set_add_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_state_set_add_state(AtkStateSet *set, AtkStateType type)
     * }
     */
    public static MethodHandle atk_state_set_add_state$handle() {
        return atk_state_set_add_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_state_set_add_state(AtkStateSet *set, AtkStateType type)
     * }
     */
    public static int atk_state_set_add_state(MemorySegment set, int type) {
        var mh$ = atk_state_set_add_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_add_state", set, type);
            }
            return (int)mh$.invokeExact(set, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_add_states {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_add_states"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_state_set_add_states(AtkStateSet *set, AtkStateType *types, gint n_types)
     * }
     */
    public static FunctionDescriptor atk_state_set_add_states$descriptor() {
        return atk_state_set_add_states.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_state_set_add_states(AtkStateSet *set, AtkStateType *types, gint n_types)
     * }
     */
    public static MethodHandle atk_state_set_add_states$handle() {
        return atk_state_set_add_states.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_state_set_add_states(AtkStateSet *set, AtkStateType *types, gint n_types)
     * }
     */
    public static void atk_state_set_add_states(MemorySegment set, MemorySegment types, int n_types) {
        var mh$ = atk_state_set_add_states.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_add_states", set, types, n_types);
            }
            mh$.invokeExact(set, types, n_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_clear_states {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_clear_states"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_state_set_clear_states(AtkStateSet *set)
     * }
     */
    public static FunctionDescriptor atk_state_set_clear_states$descriptor() {
        return atk_state_set_clear_states.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_state_set_clear_states(AtkStateSet *set)
     * }
     */
    public static MethodHandle atk_state_set_clear_states$handle() {
        return atk_state_set_clear_states.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_state_set_clear_states(AtkStateSet *set)
     * }
     */
    public static void atk_state_set_clear_states(MemorySegment set) {
        var mh$ = atk_state_set_clear_states.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_clear_states", set);
            }
            mh$.invokeExact(set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_contains_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_contains_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_state_set_contains_state(AtkStateSet *set, AtkStateType type)
     * }
     */
    public static FunctionDescriptor atk_state_set_contains_state$descriptor() {
        return atk_state_set_contains_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_state_set_contains_state(AtkStateSet *set, AtkStateType type)
     * }
     */
    public static MethodHandle atk_state_set_contains_state$handle() {
        return atk_state_set_contains_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_state_set_contains_state(AtkStateSet *set, AtkStateType type)
     * }
     */
    public static int atk_state_set_contains_state(MemorySegment set, int type) {
        var mh$ = atk_state_set_contains_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_contains_state", set, type);
            }
            return (int)mh$.invokeExact(set, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_contains_states {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_contains_states"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_state_set_contains_states(AtkStateSet *set, AtkStateType *types, gint n_types)
     * }
     */
    public static FunctionDescriptor atk_state_set_contains_states$descriptor() {
        return atk_state_set_contains_states.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_state_set_contains_states(AtkStateSet *set, AtkStateType *types, gint n_types)
     * }
     */
    public static MethodHandle atk_state_set_contains_states$handle() {
        return atk_state_set_contains_states.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_state_set_contains_states(AtkStateSet *set, AtkStateType *types, gint n_types)
     * }
     */
    public static int atk_state_set_contains_states(MemorySegment set, MemorySegment types, int n_types) {
        var mh$ = atk_state_set_contains_states.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_contains_states", set, types, n_types);
            }
            return (int)mh$.invokeExact(set, types, n_types);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_remove_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_remove_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_state_set_remove_state(AtkStateSet *set, AtkStateType type)
     * }
     */
    public static FunctionDescriptor atk_state_set_remove_state$descriptor() {
        return atk_state_set_remove_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_state_set_remove_state(AtkStateSet *set, AtkStateType type)
     * }
     */
    public static MethodHandle atk_state_set_remove_state$handle() {
        return atk_state_set_remove_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_state_set_remove_state(AtkStateSet *set, AtkStateType type)
     * }
     */
    public static int atk_state_set_remove_state(MemorySegment set, int type) {
        var mh$ = atk_state_set_remove_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_remove_state", set, type);
            }
            return (int)mh$.invokeExact(set, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_and_sets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_and_sets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_and_sets(AtkStateSet *set, AtkStateSet *compare_set)
     * }
     */
    public static FunctionDescriptor atk_state_set_and_sets$descriptor() {
        return atk_state_set_and_sets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_and_sets(AtkStateSet *set, AtkStateSet *compare_set)
     * }
     */
    public static MethodHandle atk_state_set_and_sets$handle() {
        return atk_state_set_and_sets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_and_sets(AtkStateSet *set, AtkStateSet *compare_set)
     * }
     */
    public static MemorySegment atk_state_set_and_sets(MemorySegment set, MemorySegment compare_set) {
        var mh$ = atk_state_set_and_sets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_and_sets", set, compare_set);
            }
            return (MemorySegment)mh$.invokeExact(set, compare_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_or_sets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_or_sets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_or_sets(AtkStateSet *set, AtkStateSet *compare_set)
     * }
     */
    public static FunctionDescriptor atk_state_set_or_sets$descriptor() {
        return atk_state_set_or_sets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_or_sets(AtkStateSet *set, AtkStateSet *compare_set)
     * }
     */
    public static MethodHandle atk_state_set_or_sets$handle() {
        return atk_state_set_or_sets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_or_sets(AtkStateSet *set, AtkStateSet *compare_set)
     * }
     */
    public static MemorySegment atk_state_set_or_sets(MemorySegment set, MemorySegment compare_set) {
        var mh$ = atk_state_set_or_sets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_or_sets", set, compare_set);
            }
            return (MemorySegment)mh$.invokeExact(set, compare_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_state_set_xor_sets {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_state_set_xor_sets"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_xor_sets(AtkStateSet *set, AtkStateSet *compare_set)
     * }
     */
    public static FunctionDescriptor atk_state_set_xor_sets$descriptor() {
        return atk_state_set_xor_sets.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_xor_sets(AtkStateSet *set, AtkStateSet *compare_set)
     * }
     */
    public static MethodHandle atk_state_set_xor_sets$handle() {
        return atk_state_set_xor_sets.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkStateSet *atk_state_set_xor_sets(AtkStateSet *set, AtkStateSet *compare_set)
     * }
     */
    public static MemorySegment atk_state_set_xor_sets(MemorySegment set, MemorySegment compare_set) {
        var mh$ = atk_state_set_xor_sets.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_state_set_xor_sets", set, compare_set);
            }
            return (MemorySegment)mh$.invokeExact(set, compare_set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_streamable_content_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_streamable_content_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_streamable_content_get_type()
     * }
     */
    public static FunctionDescriptor atk_streamable_content_get_type$descriptor() {
        return atk_streamable_content_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_streamable_content_get_type()
     * }
     */
    public static MethodHandle atk_streamable_content_get_type$handle() {
        return atk_streamable_content_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_streamable_content_get_type()
     * }
     */
    public static long atk_streamable_content_get_type() {
        var mh$ = atk_streamable_content_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_streamable_content_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_streamable_content_get_n_mime_types {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_streamable_content_get_n_mime_types"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_streamable_content_get_n_mime_types(AtkStreamableContent *streamable)
     * }
     */
    public static FunctionDescriptor atk_streamable_content_get_n_mime_types$descriptor() {
        return atk_streamable_content_get_n_mime_types.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_streamable_content_get_n_mime_types(AtkStreamableContent *streamable)
     * }
     */
    public static MethodHandle atk_streamable_content_get_n_mime_types$handle() {
        return atk_streamable_content_get_n_mime_types.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_streamable_content_get_n_mime_types(AtkStreamableContent *streamable)
     * }
     */
    public static int atk_streamable_content_get_n_mime_types(MemorySegment streamable) {
        var mh$ = atk_streamable_content_get_n_mime_types.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_streamable_content_get_n_mime_types", streamable);
            }
            return (int)mh$.invokeExact(streamable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_streamable_content_get_mime_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_streamable_content_get_mime_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_streamable_content_get_mime_type(AtkStreamableContent *streamable, gint i)
     * }
     */
    public static FunctionDescriptor atk_streamable_content_get_mime_type$descriptor() {
        return atk_streamable_content_get_mime_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_streamable_content_get_mime_type(AtkStreamableContent *streamable, gint i)
     * }
     */
    public static MethodHandle atk_streamable_content_get_mime_type$handle() {
        return atk_streamable_content_get_mime_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_streamable_content_get_mime_type(AtkStreamableContent *streamable, gint i)
     * }
     */
    public static MemorySegment atk_streamable_content_get_mime_type(MemorySegment streamable, int i) {
        var mh$ = atk_streamable_content_get_mime_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_streamable_content_get_mime_type", streamable, i);
            }
            return (MemorySegment)mh$.invokeExact(streamable, i);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_streamable_content_get_stream {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_streamable_content_get_stream"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GIOChannel *atk_streamable_content_get_stream(AtkStreamableContent *streamable, const gchar *mime_type)
     * }
     */
    public static FunctionDescriptor atk_streamable_content_get_stream$descriptor() {
        return atk_streamable_content_get_stream.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GIOChannel *atk_streamable_content_get_stream(AtkStreamableContent *streamable, const gchar *mime_type)
     * }
     */
    public static MethodHandle atk_streamable_content_get_stream$handle() {
        return atk_streamable_content_get_stream.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GIOChannel *atk_streamable_content_get_stream(AtkStreamableContent *streamable, const gchar *mime_type)
     * }
     */
    public static MemorySegment atk_streamable_content_get_stream(MemorySegment streamable, MemorySegment mime_type) {
        var mh$ = atk_streamable_content_get_stream.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_streamable_content_get_stream", streamable, mime_type);
            }
            return (MemorySegment)mh$.invokeExact(streamable, mime_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_streamable_content_get_uri {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_streamable_content_get_uri"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_streamable_content_get_uri(AtkStreamableContent *streamable, const gchar *mime_type)
     * }
     */
    public static FunctionDescriptor atk_streamable_content_get_uri$descriptor() {
        return atk_streamable_content_get_uri.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_streamable_content_get_uri(AtkStreamableContent *streamable, const gchar *mime_type)
     * }
     */
    public static MethodHandle atk_streamable_content_get_uri$handle() {
        return atk_streamable_content_get_uri.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_streamable_content_get_uri(AtkStreamableContent *streamable, const gchar *mime_type)
     * }
     */
    public static MemorySegment atk_streamable_content_get_uri(MemorySegment streamable, MemorySegment mime_type) {
        var mh$ = atk_streamable_content_get_uri.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_streamable_content_get_uri", streamable, mime_type);
            }
            return (MemorySegment)mh$.invokeExact(streamable, mime_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_table_get_type()
     * }
     */
    public static FunctionDescriptor atk_table_get_type$descriptor() {
        return atk_table_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_table_get_type()
     * }
     */
    public static MethodHandle atk_table_get_type$handle() {
        return atk_table_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_table_get_type()
     * }
     */
    public static long atk_table_get_type() {
        var mh$ = atk_table_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_ref_at {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_ref_at"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_ref_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static FunctionDescriptor atk_table_ref_at$descriptor() {
        return atk_table_ref_at.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_ref_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static MethodHandle atk_table_ref_at$handle() {
        return atk_table_ref_at.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_table_ref_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static MemorySegment atk_table_ref_at(MemorySegment table, int row, int column) {
        var mh$ = atk_table_ref_at.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_ref_at", table, row, column);
            }
            return (MemorySegment)mh$.invokeExact(table, row, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_index_at {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_index_at"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_get_index_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static FunctionDescriptor atk_table_get_index_at$descriptor() {
        return atk_table_get_index_at.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_get_index_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static MethodHandle atk_table_get_index_at$handle() {
        return atk_table_get_index_at.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_get_index_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static int atk_table_get_index_at(MemorySegment table, int row, int column) {
        var mh$ = atk_table_get_index_at.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_index_at", table, row, column);
            }
            return (int)mh$.invokeExact(table, row, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_column_at_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_column_at_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_get_column_at_index(AtkTable *table, gint index_)
     * }
     */
    public static FunctionDescriptor atk_table_get_column_at_index$descriptor() {
        return atk_table_get_column_at_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_get_column_at_index(AtkTable *table, gint index_)
     * }
     */
    public static MethodHandle atk_table_get_column_at_index$handle() {
        return atk_table_get_column_at_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_get_column_at_index(AtkTable *table, gint index_)
     * }
     */
    public static int atk_table_get_column_at_index(MemorySegment table, int index_) {
        var mh$ = atk_table_get_column_at_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_column_at_index", table, index_);
            }
            return (int)mh$.invokeExact(table, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_row_at_index {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_row_at_index"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_get_row_at_index(AtkTable *table, gint index_)
     * }
     */
    public static FunctionDescriptor atk_table_get_row_at_index$descriptor() {
        return atk_table_get_row_at_index.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_get_row_at_index(AtkTable *table, gint index_)
     * }
     */
    public static MethodHandle atk_table_get_row_at_index$handle() {
        return atk_table_get_row_at_index.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_get_row_at_index(AtkTable *table, gint index_)
     * }
     */
    public static int atk_table_get_row_at_index(MemorySegment table, int index_) {
        var mh$ = atk_table_get_row_at_index.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_row_at_index", table, index_);
            }
            return (int)mh$.invokeExact(table, index_);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_n_columns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_n_columns"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_get_n_columns(AtkTable *table)
     * }
     */
    public static FunctionDescriptor atk_table_get_n_columns$descriptor() {
        return atk_table_get_n_columns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_get_n_columns(AtkTable *table)
     * }
     */
    public static MethodHandle atk_table_get_n_columns$handle() {
        return atk_table_get_n_columns.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_get_n_columns(AtkTable *table)
     * }
     */
    public static int atk_table_get_n_columns(MemorySegment table) {
        var mh$ = atk_table_get_n_columns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_n_columns", table);
            }
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_n_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_n_rows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_get_n_rows(AtkTable *table)
     * }
     */
    public static FunctionDescriptor atk_table_get_n_rows$descriptor() {
        return atk_table_get_n_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_get_n_rows(AtkTable *table)
     * }
     */
    public static MethodHandle atk_table_get_n_rows$handle() {
        return atk_table_get_n_rows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_get_n_rows(AtkTable *table)
     * }
     */
    public static int atk_table_get_n_rows(MemorySegment table) {
        var mh$ = atk_table_get_n_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_n_rows", table);
            }
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_column_extent_at {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_column_extent_at"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_get_column_extent_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static FunctionDescriptor atk_table_get_column_extent_at$descriptor() {
        return atk_table_get_column_extent_at.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_get_column_extent_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static MethodHandle atk_table_get_column_extent_at$handle() {
        return atk_table_get_column_extent_at.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_get_column_extent_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static int atk_table_get_column_extent_at(MemorySegment table, int row, int column) {
        var mh$ = atk_table_get_column_extent_at.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_column_extent_at", table, row, column);
            }
            return (int)mh$.invokeExact(table, row, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_row_extent_at {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_row_extent_at"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_get_row_extent_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static FunctionDescriptor atk_table_get_row_extent_at$descriptor() {
        return atk_table_get_row_extent_at.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_get_row_extent_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static MethodHandle atk_table_get_row_extent_at$handle() {
        return atk_table_get_row_extent_at.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_get_row_extent_at(AtkTable *table, gint row, gint column)
     * }
     */
    public static int atk_table_get_row_extent_at(MemorySegment table, int row, int column) {
        var mh$ = atk_table_get_row_extent_at.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_row_extent_at", table, row, column);
            }
            return (int)mh$.invokeExact(table, row, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_caption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_caption"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_caption(AtkTable *table)
     * }
     */
    public static FunctionDescriptor atk_table_get_caption$descriptor() {
        return atk_table_get_caption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_caption(AtkTable *table)
     * }
     */
    public static MethodHandle atk_table_get_caption$handle() {
        return atk_table_get_caption.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_caption(AtkTable *table)
     * }
     */
    public static MemorySegment atk_table_get_caption(MemorySegment table) {
        var mh$ = atk_table_get_caption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_caption", table);
            }
            return (MemorySegment)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_column_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_column_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_table_get_column_description(AtkTable *table, gint column)
     * }
     */
    public static FunctionDescriptor atk_table_get_column_description$descriptor() {
        return atk_table_get_column_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_table_get_column_description(AtkTable *table, gint column)
     * }
     */
    public static MethodHandle atk_table_get_column_description$handle() {
        return atk_table_get_column_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_table_get_column_description(AtkTable *table, gint column)
     * }
     */
    public static MemorySegment atk_table_get_column_description(MemorySegment table, int column) {
        var mh$ = atk_table_get_column_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_column_description", table, column);
            }
            return (MemorySegment)mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_column_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_column_header"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_column_header(AtkTable *table, gint column)
     * }
     */
    public static FunctionDescriptor atk_table_get_column_header$descriptor() {
        return atk_table_get_column_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_column_header(AtkTable *table, gint column)
     * }
     */
    public static MethodHandle atk_table_get_column_header$handle() {
        return atk_table_get_column_header.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_column_header(AtkTable *table, gint column)
     * }
     */
    public static MemorySegment atk_table_get_column_header(MemorySegment table, int column) {
        var mh$ = atk_table_get_column_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_column_header", table, column);
            }
            return (MemorySegment)mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_row_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_row_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_table_get_row_description(AtkTable *table, gint row)
     * }
     */
    public static FunctionDescriptor atk_table_get_row_description$descriptor() {
        return atk_table_get_row_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_table_get_row_description(AtkTable *table, gint row)
     * }
     */
    public static MethodHandle atk_table_get_row_description$handle() {
        return atk_table_get_row_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_table_get_row_description(AtkTable *table, gint row)
     * }
     */
    public static MemorySegment atk_table_get_row_description(MemorySegment table, int row) {
        var mh$ = atk_table_get_row_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_row_description", table, row);
            }
            return (MemorySegment)mh$.invokeExact(table, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_row_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_row_header"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_row_header(AtkTable *table, gint row)
     * }
     */
    public static FunctionDescriptor atk_table_get_row_header$descriptor() {
        return atk_table_get_row_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_row_header(AtkTable *table, gint row)
     * }
     */
    public static MethodHandle atk_table_get_row_header$handle() {
        return atk_table_get_row_header.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_row_header(AtkTable *table, gint row)
     * }
     */
    public static MemorySegment atk_table_get_row_header(MemorySegment table, int row) {
        var mh$ = atk_table_get_row_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_row_header", table, row);
            }
            return (MemorySegment)mh$.invokeExact(table, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_summary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_summary(AtkTable *table)
     * }
     */
    public static FunctionDescriptor atk_table_get_summary$descriptor() {
        return atk_table_get_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_summary(AtkTable *table)
     * }
     */
    public static MethodHandle atk_table_get_summary$handle() {
        return atk_table_get_summary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_table_get_summary(AtkTable *table)
     * }
     */
    public static MemorySegment atk_table_get_summary(MemorySegment table) {
        var mh$ = atk_table_get_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_summary", table);
            }
            return (MemorySegment)mh$.invokeExact(table);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_set_caption {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_set_caption"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_table_set_caption(AtkTable *table, AtkObject *caption)
     * }
     */
    public static FunctionDescriptor atk_table_set_caption$descriptor() {
        return atk_table_set_caption.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_table_set_caption(AtkTable *table, AtkObject *caption)
     * }
     */
    public static MethodHandle atk_table_set_caption$handle() {
        return atk_table_set_caption.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_table_set_caption(AtkTable *table, AtkObject *caption)
     * }
     */
    public static void atk_table_set_caption(MemorySegment table, MemorySegment caption) {
        var mh$ = atk_table_set_caption.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_set_caption", table, caption);
            }
            mh$.invokeExact(table, caption);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_set_column_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_set_column_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_table_set_column_description(AtkTable *table, gint column, const gchar *description)
     * }
     */
    public static FunctionDescriptor atk_table_set_column_description$descriptor() {
        return atk_table_set_column_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_table_set_column_description(AtkTable *table, gint column, const gchar *description)
     * }
     */
    public static MethodHandle atk_table_set_column_description$handle() {
        return atk_table_set_column_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_table_set_column_description(AtkTable *table, gint column, const gchar *description)
     * }
     */
    public static void atk_table_set_column_description(MemorySegment table, int column, MemorySegment description) {
        var mh$ = atk_table_set_column_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_set_column_description", table, column, description);
            }
            mh$.invokeExact(table, column, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_set_column_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_set_column_header"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_table_set_column_header(AtkTable *table, gint column, AtkObject *header)
     * }
     */
    public static FunctionDescriptor atk_table_set_column_header$descriptor() {
        return atk_table_set_column_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_table_set_column_header(AtkTable *table, gint column, AtkObject *header)
     * }
     */
    public static MethodHandle atk_table_set_column_header$handle() {
        return atk_table_set_column_header.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_table_set_column_header(AtkTable *table, gint column, AtkObject *header)
     * }
     */
    public static void atk_table_set_column_header(MemorySegment table, int column, MemorySegment header) {
        var mh$ = atk_table_set_column_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_set_column_header", table, column, header);
            }
            mh$.invokeExact(table, column, header);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_set_row_description {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_set_row_description"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_table_set_row_description(AtkTable *table, gint row, const gchar *description)
     * }
     */
    public static FunctionDescriptor atk_table_set_row_description$descriptor() {
        return atk_table_set_row_description.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_table_set_row_description(AtkTable *table, gint row, const gchar *description)
     * }
     */
    public static MethodHandle atk_table_set_row_description$handle() {
        return atk_table_set_row_description.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_table_set_row_description(AtkTable *table, gint row, const gchar *description)
     * }
     */
    public static void atk_table_set_row_description(MemorySegment table, int row, MemorySegment description) {
        var mh$ = atk_table_set_row_description.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_set_row_description", table, row, description);
            }
            mh$.invokeExact(table, row, description);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_set_row_header {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_set_row_header"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_table_set_row_header(AtkTable *table, gint row, AtkObject *header)
     * }
     */
    public static FunctionDescriptor atk_table_set_row_header$descriptor() {
        return atk_table_set_row_header.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_table_set_row_header(AtkTable *table, gint row, AtkObject *header)
     * }
     */
    public static MethodHandle atk_table_set_row_header$handle() {
        return atk_table_set_row_header.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_table_set_row_header(AtkTable *table, gint row, AtkObject *header)
     * }
     */
    public static void atk_table_set_row_header(MemorySegment table, int row, MemorySegment header) {
        var mh$ = atk_table_set_row_header.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_set_row_header", table, row, header);
            }
            mh$.invokeExact(table, row, header);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_set_summary {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_set_summary"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_table_set_summary(AtkTable *table, AtkObject *accessible)
     * }
     */
    public static FunctionDescriptor atk_table_set_summary$descriptor() {
        return atk_table_set_summary.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_table_set_summary(AtkTable *table, AtkObject *accessible)
     * }
     */
    public static MethodHandle atk_table_set_summary$handle() {
        return atk_table_set_summary.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_table_set_summary(AtkTable *table, AtkObject *accessible)
     * }
     */
    public static void atk_table_set_summary(MemorySegment table, MemorySegment accessible) {
        var mh$ = atk_table_set_summary.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_set_summary", table, accessible);
            }
            mh$.invokeExact(table, accessible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_selected_columns {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_selected_columns"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_get_selected_columns(AtkTable *table, gint **selected)
     * }
     */
    public static FunctionDescriptor atk_table_get_selected_columns$descriptor() {
        return atk_table_get_selected_columns.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_get_selected_columns(AtkTable *table, gint **selected)
     * }
     */
    public static MethodHandle atk_table_get_selected_columns$handle() {
        return atk_table_get_selected_columns.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_get_selected_columns(AtkTable *table, gint **selected)
     * }
     */
    public static int atk_table_get_selected_columns(MemorySegment table, MemorySegment selected) {
        var mh$ = atk_table_get_selected_columns.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_selected_columns", table, selected);
            }
            return (int)mh$.invokeExact(table, selected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_get_selected_rows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_get_selected_rows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_get_selected_rows(AtkTable *table, gint **selected)
     * }
     */
    public static FunctionDescriptor atk_table_get_selected_rows$descriptor() {
        return atk_table_get_selected_rows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_get_selected_rows(AtkTable *table, gint **selected)
     * }
     */
    public static MethodHandle atk_table_get_selected_rows$handle() {
        return atk_table_get_selected_rows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_get_selected_rows(AtkTable *table, gint **selected)
     * }
     */
    public static int atk_table_get_selected_rows(MemorySegment table, MemorySegment selected) {
        var mh$ = atk_table_get_selected_rows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_get_selected_rows", table, selected);
            }
            return (int)mh$.invokeExact(table, selected);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_is_column_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_is_column_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_table_is_column_selected(AtkTable *table, gint column)
     * }
     */
    public static FunctionDescriptor atk_table_is_column_selected$descriptor() {
        return atk_table_is_column_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_table_is_column_selected(AtkTable *table, gint column)
     * }
     */
    public static MethodHandle atk_table_is_column_selected$handle() {
        return atk_table_is_column_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_table_is_column_selected(AtkTable *table, gint column)
     * }
     */
    public static int atk_table_is_column_selected(MemorySegment table, int column) {
        var mh$ = atk_table_is_column_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_is_column_selected", table, column);
            }
            return (int)mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_is_row_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_is_row_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_table_is_row_selected(AtkTable *table, gint row)
     * }
     */
    public static FunctionDescriptor atk_table_is_row_selected$descriptor() {
        return atk_table_is_row_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_table_is_row_selected(AtkTable *table, gint row)
     * }
     */
    public static MethodHandle atk_table_is_row_selected$handle() {
        return atk_table_is_row_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_table_is_row_selected(AtkTable *table, gint row)
     * }
     */
    public static int atk_table_is_row_selected(MemorySegment table, int row) {
        var mh$ = atk_table_is_row_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_is_row_selected", table, row);
            }
            return (int)mh$.invokeExact(table, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_is_selected {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_is_selected"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_table_is_selected(AtkTable *table, gint row, gint column)
     * }
     */
    public static FunctionDescriptor atk_table_is_selected$descriptor() {
        return atk_table_is_selected.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_table_is_selected(AtkTable *table, gint row, gint column)
     * }
     */
    public static MethodHandle atk_table_is_selected$handle() {
        return atk_table_is_selected.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_table_is_selected(AtkTable *table, gint row, gint column)
     * }
     */
    public static int atk_table_is_selected(MemorySegment table, int row, int column) {
        var mh$ = atk_table_is_selected.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_is_selected", table, row, column);
            }
            return (int)mh$.invokeExact(table, row, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_add_row_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_add_row_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_table_add_row_selection(AtkTable *table, gint row)
     * }
     */
    public static FunctionDescriptor atk_table_add_row_selection$descriptor() {
        return atk_table_add_row_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_table_add_row_selection(AtkTable *table, gint row)
     * }
     */
    public static MethodHandle atk_table_add_row_selection$handle() {
        return atk_table_add_row_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_table_add_row_selection(AtkTable *table, gint row)
     * }
     */
    public static int atk_table_add_row_selection(MemorySegment table, int row) {
        var mh$ = atk_table_add_row_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_add_row_selection", table, row);
            }
            return (int)mh$.invokeExact(table, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_remove_row_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_remove_row_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_table_remove_row_selection(AtkTable *table, gint row)
     * }
     */
    public static FunctionDescriptor atk_table_remove_row_selection$descriptor() {
        return atk_table_remove_row_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_table_remove_row_selection(AtkTable *table, gint row)
     * }
     */
    public static MethodHandle atk_table_remove_row_selection$handle() {
        return atk_table_remove_row_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_table_remove_row_selection(AtkTable *table, gint row)
     * }
     */
    public static int atk_table_remove_row_selection(MemorySegment table, int row) {
        var mh$ = atk_table_remove_row_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_remove_row_selection", table, row);
            }
            return (int)mh$.invokeExact(table, row);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_add_column_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_add_column_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_table_add_column_selection(AtkTable *table, gint column)
     * }
     */
    public static FunctionDescriptor atk_table_add_column_selection$descriptor() {
        return atk_table_add_column_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_table_add_column_selection(AtkTable *table, gint column)
     * }
     */
    public static MethodHandle atk_table_add_column_selection$handle() {
        return atk_table_add_column_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_table_add_column_selection(AtkTable *table, gint column)
     * }
     */
    public static int atk_table_add_column_selection(MemorySegment table, int column) {
        var mh$ = atk_table_add_column_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_add_column_selection", table, column);
            }
            return (int)mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_remove_column_selection {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_remove_column_selection"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_table_remove_column_selection(AtkTable *table, gint column)
     * }
     */
    public static FunctionDescriptor atk_table_remove_column_selection$descriptor() {
        return atk_table_remove_column_selection.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_table_remove_column_selection(AtkTable *table, gint column)
     * }
     */
    public static MethodHandle atk_table_remove_column_selection$handle() {
        return atk_table_remove_column_selection.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_table_remove_column_selection(AtkTable *table, gint column)
     * }
     */
    public static int atk_table_remove_column_selection(MemorySegment table, int column) {
        var mh$ = atk_table_remove_column_selection.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_remove_column_selection", table, column);
            }
            return (int)mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_cell_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_cell_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_table_cell_get_type()
     * }
     */
    public static FunctionDescriptor atk_table_cell_get_type$descriptor() {
        return atk_table_cell_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_table_cell_get_type()
     * }
     */
    public static MethodHandle atk_table_cell_get_type$handle() {
        return atk_table_cell_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_table_cell_get_type()
     * }
     */
    public static long atk_table_cell_get_type() {
        var mh$ = atk_table_cell_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_cell_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_cell_get_column_span {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_cell_get_column_span"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_cell_get_column_span(AtkTableCell *cell)
     * }
     */
    public static FunctionDescriptor atk_table_cell_get_column_span$descriptor() {
        return atk_table_cell_get_column_span.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_cell_get_column_span(AtkTableCell *cell)
     * }
     */
    public static MethodHandle atk_table_cell_get_column_span$handle() {
        return atk_table_cell_get_column_span.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_cell_get_column_span(AtkTableCell *cell)
     * }
     */
    public static int atk_table_cell_get_column_span(MemorySegment cell) {
        var mh$ = atk_table_cell_get_column_span.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_cell_get_column_span", cell);
            }
            return (int)mh$.invokeExact(cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_cell_get_column_header_cells {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_cell_get_column_header_cells"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *atk_table_cell_get_column_header_cells(AtkTableCell *cell)
     * }
     */
    public static FunctionDescriptor atk_table_cell_get_column_header_cells$descriptor() {
        return atk_table_cell_get_column_header_cells.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *atk_table_cell_get_column_header_cells(AtkTableCell *cell)
     * }
     */
    public static MethodHandle atk_table_cell_get_column_header_cells$handle() {
        return atk_table_cell_get_column_header_cells.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *atk_table_cell_get_column_header_cells(AtkTableCell *cell)
     * }
     */
    public static MemorySegment atk_table_cell_get_column_header_cells(MemorySegment cell) {
        var mh$ = atk_table_cell_get_column_header_cells.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_cell_get_column_header_cells", cell);
            }
            return (MemorySegment)mh$.invokeExact(cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_cell_get_position {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_cell_get_position"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_table_cell_get_position(AtkTableCell *cell, gint *row, gint *column)
     * }
     */
    public static FunctionDescriptor atk_table_cell_get_position$descriptor() {
        return atk_table_cell_get_position.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_table_cell_get_position(AtkTableCell *cell, gint *row, gint *column)
     * }
     */
    public static MethodHandle atk_table_cell_get_position$handle() {
        return atk_table_cell_get_position.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_table_cell_get_position(AtkTableCell *cell, gint *row, gint *column)
     * }
     */
    public static int atk_table_cell_get_position(MemorySegment cell, MemorySegment row, MemorySegment column) {
        var mh$ = atk_table_cell_get_position.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_cell_get_position", cell, row, column);
            }
            return (int)mh$.invokeExact(cell, row, column);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_cell_get_row_span {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_cell_get_row_span"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint atk_table_cell_get_row_span(AtkTableCell *cell)
     * }
     */
    public static FunctionDescriptor atk_table_cell_get_row_span$descriptor() {
        return atk_table_cell_get_row_span.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint atk_table_cell_get_row_span(AtkTableCell *cell)
     * }
     */
    public static MethodHandle atk_table_cell_get_row_span$handle() {
        return atk_table_cell_get_row_span.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint atk_table_cell_get_row_span(AtkTableCell *cell)
     * }
     */
    public static int atk_table_cell_get_row_span(MemorySegment cell) {
        var mh$ = atk_table_cell_get_row_span.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_cell_get_row_span", cell);
            }
            return (int)mh$.invokeExact(cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_cell_get_row_header_cells {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_cell_get_row_header_cells"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GPtrArray *atk_table_cell_get_row_header_cells(AtkTableCell *cell)
     * }
     */
    public static FunctionDescriptor atk_table_cell_get_row_header_cells$descriptor() {
        return atk_table_cell_get_row_header_cells.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GPtrArray *atk_table_cell_get_row_header_cells(AtkTableCell *cell)
     * }
     */
    public static MethodHandle atk_table_cell_get_row_header_cells$handle() {
        return atk_table_cell_get_row_header_cells.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GPtrArray *atk_table_cell_get_row_header_cells(AtkTableCell *cell)
     * }
     */
    public static MemorySegment atk_table_cell_get_row_header_cells(MemorySegment cell) {
        var mh$ = atk_table_cell_get_row_header_cells.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_cell_get_row_header_cells", cell);
            }
            return (MemorySegment)mh$.invokeExact(cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_cell_get_row_column_span {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_cell_get_row_column_span"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_table_cell_get_row_column_span(AtkTableCell *cell, gint *row, gint *column, gint *row_span, gint *column_span)
     * }
     */
    public static FunctionDescriptor atk_table_cell_get_row_column_span$descriptor() {
        return atk_table_cell_get_row_column_span.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_table_cell_get_row_column_span(AtkTableCell *cell, gint *row, gint *column, gint *row_span, gint *column_span)
     * }
     */
    public static MethodHandle atk_table_cell_get_row_column_span$handle() {
        return atk_table_cell_get_row_column_span.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_table_cell_get_row_column_span(AtkTableCell *cell, gint *row, gint *column, gint *row_span, gint *column_span)
     * }
     */
    public static int atk_table_cell_get_row_column_span(MemorySegment cell, MemorySegment row, MemorySegment column, MemorySegment row_span, MemorySegment column_span) {
        var mh$ = atk_table_cell_get_row_column_span.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_cell_get_row_column_span", cell, row, column, row_span, column_span);
            }
            return (int)mh$.invokeExact(cell, row, column, row_span, column_span);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_table_cell_get_table {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_table_cell_get_table"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_cell_get_table(AtkTableCell *cell)
     * }
     */
    public static FunctionDescriptor atk_table_cell_get_table$descriptor() {
        return atk_table_cell_get_table.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *atk_table_cell_get_table(AtkTableCell *cell)
     * }
     */
    public static MethodHandle atk_table_cell_get_table$handle() {
        return atk_table_cell_get_table.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *atk_table_cell_get_table(AtkTableCell *cell)
     * }
     */
    public static MemorySegment atk_table_cell_get_table(MemorySegment cell) {
        var mh$ = atk_table_cell_get_table.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_table_cell_get_table", cell);
            }
            return (MemorySegment)mh$.invokeExact(cell);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    private static final int ATK_VALUE_VERY_WEAK = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_VERY_WEAK = 0
     * }
     */
    public static int ATK_VALUE_VERY_WEAK() {
        return ATK_VALUE_VERY_WEAK;
    }
    private static final int ATK_VALUE_WEAK = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_WEAK = 1
     * }
     */
    public static int ATK_VALUE_WEAK() {
        return ATK_VALUE_WEAK;
    }
    private static final int ATK_VALUE_ACCEPTABLE = (int)2L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_ACCEPTABLE = 2
     * }
     */
    public static int ATK_VALUE_ACCEPTABLE() {
        return ATK_VALUE_ACCEPTABLE;
    }
    private static final int ATK_VALUE_STRONG = (int)3L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_STRONG = 3
     * }
     */
    public static int ATK_VALUE_STRONG() {
        return ATK_VALUE_STRONG;
    }
    private static final int ATK_VALUE_VERY_STRONG = (int)4L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_VERY_STRONG = 4
     * }
     */
    public static int ATK_VALUE_VERY_STRONG() {
        return ATK_VALUE_VERY_STRONG;
    }
    private static final int ATK_VALUE_VERY_LOW = (int)5L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_VERY_LOW = 5
     * }
     */
    public static int ATK_VALUE_VERY_LOW() {
        return ATK_VALUE_VERY_LOW;
    }
    private static final int ATK_VALUE_LOW = (int)6L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_LOW = 6
     * }
     */
    public static int ATK_VALUE_LOW() {
        return ATK_VALUE_LOW;
    }
    private static final int ATK_VALUE_MEDIUM = (int)7L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_MEDIUM = 7
     * }
     */
    public static int ATK_VALUE_MEDIUM() {
        return ATK_VALUE_MEDIUM;
    }
    private static final int ATK_VALUE_HIGH = (int)8L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_HIGH = 8
     * }
     */
    public static int ATK_VALUE_HIGH() {
        return ATK_VALUE_HIGH;
    }
    private static final int ATK_VALUE_VERY_HIGH = (int)9L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_VERY_HIGH = 9
     * }
     */
    public static int ATK_VALUE_VERY_HIGH() {
        return ATK_VALUE_VERY_HIGH;
    }
    private static final int ATK_VALUE_VERY_BAD = (int)10L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_VERY_BAD = 10
     * }
     */
    public static int ATK_VALUE_VERY_BAD() {
        return ATK_VALUE_VERY_BAD;
    }
    private static final int ATK_VALUE_BAD = (int)11L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_BAD = 11
     * }
     */
    public static int ATK_VALUE_BAD() {
        return ATK_VALUE_BAD;
    }
    private static final int ATK_VALUE_GOOD = (int)12L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_GOOD = 12
     * }
     */
    public static int ATK_VALUE_GOOD() {
        return ATK_VALUE_GOOD;
    }
    private static final int ATK_VALUE_VERY_GOOD = (int)13L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_VERY_GOOD = 13
     * }
     */
    public static int ATK_VALUE_VERY_GOOD() {
        return ATK_VALUE_VERY_GOOD;
    }
    private static final int ATK_VALUE_BEST = (int)14L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_BEST = 14
     * }
     */
    public static int ATK_VALUE_BEST() {
        return ATK_VALUE_BEST;
    }
    private static final int ATK_VALUE_LAST_DEFINED = (int)15L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.ATK_VALUE_LAST_DEFINED = 15
     * }
     */
    public static int ATK_VALUE_LAST_DEFINED() {
        return ATK_VALUE_LAST_DEFINED;
    }

    private static class atk_value_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_value_get_type()
     * }
     */
    public static FunctionDescriptor atk_value_get_type$descriptor() {
        return atk_value_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_value_get_type()
     * }
     */
    public static MethodHandle atk_value_get_type$handle() {
        return atk_value_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_value_get_type()
     * }
     */
    public static long atk_value_get_type() {
        var mh$ = atk_value_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_get_current_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_get_current_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_value_get_current_value(AtkValue *obj, GValue *value)
     * }
     */
    public static FunctionDescriptor atk_value_get_current_value$descriptor() {
        return atk_value_get_current_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_value_get_current_value(AtkValue *obj, GValue *value)
     * }
     */
    public static MethodHandle atk_value_get_current_value$handle() {
        return atk_value_get_current_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_value_get_current_value(AtkValue *obj, GValue *value)
     * }
     */
    public static void atk_value_get_current_value(MemorySegment obj, MemorySegment value) {
        var mh$ = atk_value_get_current_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_get_current_value", obj, value);
            }
            mh$.invokeExact(obj, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_get_maximum_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_get_maximum_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_value_get_maximum_value(AtkValue *obj, GValue *value)
     * }
     */
    public static FunctionDescriptor atk_value_get_maximum_value$descriptor() {
        return atk_value_get_maximum_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_value_get_maximum_value(AtkValue *obj, GValue *value)
     * }
     */
    public static MethodHandle atk_value_get_maximum_value$handle() {
        return atk_value_get_maximum_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_value_get_maximum_value(AtkValue *obj, GValue *value)
     * }
     */
    public static void atk_value_get_maximum_value(MemorySegment obj, MemorySegment value) {
        var mh$ = atk_value_get_maximum_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_get_maximum_value", obj, value);
            }
            mh$.invokeExact(obj, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_get_minimum_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_get_minimum_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_value_get_minimum_value(AtkValue *obj, GValue *value)
     * }
     */
    public static FunctionDescriptor atk_value_get_minimum_value$descriptor() {
        return atk_value_get_minimum_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_value_get_minimum_value(AtkValue *obj, GValue *value)
     * }
     */
    public static MethodHandle atk_value_get_minimum_value$handle() {
        return atk_value_get_minimum_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_value_get_minimum_value(AtkValue *obj, GValue *value)
     * }
     */
    public static void atk_value_get_minimum_value(MemorySegment obj, MemorySegment value) {
        var mh$ = atk_value_get_minimum_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_get_minimum_value", obj, value);
            }
            mh$.invokeExact(obj, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_set_current_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_set_current_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean atk_value_set_current_value(AtkValue *obj, const GValue *value)
     * }
     */
    public static FunctionDescriptor atk_value_set_current_value$descriptor() {
        return atk_value_set_current_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean atk_value_set_current_value(AtkValue *obj, const GValue *value)
     * }
     */
    public static MethodHandle atk_value_set_current_value$handle() {
        return atk_value_set_current_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean atk_value_set_current_value(AtkValue *obj, const GValue *value)
     * }
     */
    public static int atk_value_set_current_value(MemorySegment obj, MemorySegment value) {
        var mh$ = atk_value_set_current_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_set_current_value", obj, value);
            }
            return (int)mh$.invokeExact(obj, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_get_minimum_increment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_get_minimum_increment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_value_get_minimum_increment(AtkValue *obj, GValue *value)
     * }
     */
    public static FunctionDescriptor atk_value_get_minimum_increment$descriptor() {
        return atk_value_get_minimum_increment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_value_get_minimum_increment(AtkValue *obj, GValue *value)
     * }
     */
    public static MethodHandle atk_value_get_minimum_increment$handle() {
        return atk_value_get_minimum_increment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_value_get_minimum_increment(AtkValue *obj, GValue *value)
     * }
     */
    public static void atk_value_get_minimum_increment(MemorySegment obj, MemorySegment value) {
        var mh$ = atk_value_get_minimum_increment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_get_minimum_increment", obj, value);
            }
            mh$.invokeExact(obj, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_get_value_and_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_get_value_and_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_value_get_value_and_text(AtkValue *obj, gdouble *value, gchar **text)
     * }
     */
    public static FunctionDescriptor atk_value_get_value_and_text$descriptor() {
        return atk_value_get_value_and_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_value_get_value_and_text(AtkValue *obj, gdouble *value, gchar **text)
     * }
     */
    public static MethodHandle atk_value_get_value_and_text$handle() {
        return atk_value_get_value_and_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_value_get_value_and_text(AtkValue *obj, gdouble *value, gchar **text)
     * }
     */
    public static void atk_value_get_value_and_text(MemorySegment obj, MemorySegment value, MemorySegment text) {
        var mh$ = atk_value_get_value_and_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_get_value_and_text", obj, value, text);
            }
            mh$.invokeExact(obj, value, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_get_range {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_get_range"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkRange *atk_value_get_range(AtkValue *obj)
     * }
     */
    public static FunctionDescriptor atk_value_get_range$descriptor() {
        return atk_value_get_range.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkRange *atk_value_get_range(AtkValue *obj)
     * }
     */
    public static MethodHandle atk_value_get_range$handle() {
        return atk_value_get_range.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkRange *atk_value_get_range(AtkValue *obj)
     * }
     */
    public static MemorySegment atk_value_get_range(MemorySegment obj) {
        var mh$ = atk_value_get_range.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_get_range", obj);
            }
            return (MemorySegment)mh$.invokeExact(obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_get_increment {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_get_increment"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gdouble atk_value_get_increment(AtkValue *obj)
     * }
     */
    public static FunctionDescriptor atk_value_get_increment$descriptor() {
        return atk_value_get_increment.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gdouble atk_value_get_increment(AtkValue *obj)
     * }
     */
    public static MethodHandle atk_value_get_increment$handle() {
        return atk_value_get_increment.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gdouble atk_value_get_increment(AtkValue *obj)
     * }
     */
    public static double atk_value_get_increment(MemorySegment obj) {
        var mh$ = atk_value_get_increment.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_get_increment", obj);
            }
            return (double)mh$.invokeExact(obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_get_sub_ranges {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_get_sub_ranges"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GSList *atk_value_get_sub_ranges(AtkValue *obj)
     * }
     */
    public static FunctionDescriptor atk_value_get_sub_ranges$descriptor() {
        return atk_value_get_sub_ranges.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GSList *atk_value_get_sub_ranges(AtkValue *obj)
     * }
     */
    public static MethodHandle atk_value_get_sub_ranges$handle() {
        return atk_value_get_sub_ranges.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GSList *atk_value_get_sub_ranges(AtkValue *obj)
     * }
     */
    public static MemorySegment atk_value_get_sub_ranges(MemorySegment obj) {
        var mh$ = atk_value_get_sub_ranges.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_get_sub_ranges", obj);
            }
            return (MemorySegment)mh$.invokeExact(obj);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_set_value {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_set_value"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void atk_value_set_value(AtkValue *obj, const gdouble new_value)
     * }
     */
    public static FunctionDescriptor atk_value_set_value$descriptor() {
        return atk_value_set_value.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void atk_value_set_value(AtkValue *obj, const gdouble new_value)
     * }
     */
    public static MethodHandle atk_value_set_value$handle() {
        return atk_value_set_value.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void atk_value_set_value(AtkValue *obj, const gdouble new_value)
     * }
     */
    public static void atk_value_set_value(MemorySegment obj, double new_value) {
        var mh$ = atk_value_set_value.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_set_value", obj, new_value);
            }
            mh$.invokeExact(obj, new_value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_type_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_type_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_value_type_get_name(AtkValueType value_type)
     * }
     */
    public static FunctionDescriptor atk_value_type_get_name$descriptor() {
        return atk_value_type_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_value_type_get_name(AtkValueType value_type)
     * }
     */
    public static MethodHandle atk_value_type_get_name$handle() {
        return atk_value_type_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_value_type_get_name(AtkValueType value_type)
     * }
     */
    public static MemorySegment atk_value_type_get_name(int value_type) {
        var mh$ = atk_value_type_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_type_get_name", value_type);
            }
            return (MemorySegment)mh$.invokeExact(value_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_value_type_get_localized_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_value_type_get_localized_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *atk_value_type_get_localized_name(AtkValueType value_type)
     * }
     */
    public static FunctionDescriptor atk_value_type_get_localized_name$descriptor() {
        return atk_value_type_get_localized_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *atk_value_type_get_localized_name(AtkValueType value_type)
     * }
     */
    public static MethodHandle atk_value_type_get_localized_name$handle() {
        return atk_value_type_get_localized_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *atk_value_type_get_localized_name(AtkValueType value_type)
     * }
     */
    public static MemorySegment atk_value_type_get_localized_name(int value_type) {
        var mh$ = atk_value_type_get_localized_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_value_type_get_localized_name", value_type);
            }
            return (MemorySegment)mh$.invokeExact(value_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class atk_window_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("atk_window_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType atk_window_get_type()
     * }
     */
    public static FunctionDescriptor atk_window_get_type$descriptor() {
        return atk_window_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType atk_window_get_type()
     * }
     */
    public static MethodHandle atk_window_get_type$handle() {
        return atk_window_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType atk_window_get_type()
     * }
     */
    public static long atk_window_get_type() {
        var mh$ = atk_window_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("atk_window_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef AtkAction *AtkAction_autoptr
     * }
     */
    public static final AddressLayout AtkAction_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkAction_listautoptr
     * }
     */
    public static final AddressLayout AtkAction_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkAction_slistautoptr
     * }
     */
    public static final AddressLayout AtkAction_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkAction_queueautoptr
     * }
     */
    public static final AddressLayout AtkAction_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkComponent *AtkComponent_autoptr
     * }
     */
    public static final AddressLayout AtkComponent_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkComponent_listautoptr
     * }
     */
    public static final AddressLayout AtkComponent_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkComponent_slistautoptr
     * }
     */
    public static final AddressLayout AtkComponent_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkComponent_queueautoptr
     * }
     */
    public static final AddressLayout AtkComponent_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkDocument *AtkDocument_autoptr
     * }
     */
    public static final AddressLayout AtkDocument_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkDocument_listautoptr
     * }
     */
    public static final AddressLayout AtkDocument_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkDocument_slistautoptr
     * }
     */
    public static final AddressLayout AtkDocument_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkDocument_queueautoptr
     * }
     */
    public static final AddressLayout AtkDocument_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkEditableText *AtkEditableText_autoptr
     * }
     */
    public static final AddressLayout AtkEditableText_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkEditableText_listautoptr
     * }
     */
    public static final AddressLayout AtkEditableText_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkEditableText_slistautoptr
     * }
     */
    public static final AddressLayout AtkEditableText_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkEditableText_queueautoptr
     * }
     */
    public static final AddressLayout AtkEditableText_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkGObjectAccessible *AtkGObjectAccessible_autoptr
     * }
     */
    public static final AddressLayout AtkGObjectAccessible_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkGObjectAccessible_listautoptr
     * }
     */
    public static final AddressLayout AtkGObjectAccessible_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkGObjectAccessible_slistautoptr
     * }
     */
    public static final AddressLayout AtkGObjectAccessible_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkGObjectAccessible_queueautoptr
     * }
     */
    public static final AddressLayout AtkGObjectAccessible_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkHyperlink *AtkHyperlink_autoptr
     * }
     */
    public static final AddressLayout AtkHyperlink_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkHyperlink_listautoptr
     * }
     */
    public static final AddressLayout AtkHyperlink_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkHyperlink_slistautoptr
     * }
     */
    public static final AddressLayout AtkHyperlink_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkHyperlink_queueautoptr
     * }
     */
    public static final AddressLayout AtkHyperlink_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkHyperlinkImpl *AtkHyperlinkImpl_autoptr
     * }
     */
    public static final AddressLayout AtkHyperlinkImpl_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkHyperlinkImpl_listautoptr
     * }
     */
    public static final AddressLayout AtkHyperlinkImpl_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkHyperlinkImpl_slistautoptr
     * }
     */
    public static final AddressLayout AtkHyperlinkImpl_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkHyperlinkImpl_queueautoptr
     * }
     */
    public static final AddressLayout AtkHyperlinkImpl_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkHypertext *AtkHypertext_autoptr
     * }
     */
    public static final AddressLayout AtkHypertext_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkHypertext_listautoptr
     * }
     */
    public static final AddressLayout AtkHypertext_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkHypertext_slistautoptr
     * }
     */
    public static final AddressLayout AtkHypertext_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkHypertext_queueautoptr
     * }
     */
    public static final AddressLayout AtkHypertext_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkImage *AtkImage_autoptr
     * }
     */
    public static final AddressLayout AtkImage_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkImage_listautoptr
     * }
     */
    public static final AddressLayout AtkImage_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkImage_slistautoptr
     * }
     */
    public static final AddressLayout AtkImage_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkImage_queueautoptr
     * }
     */
    public static final AddressLayout AtkImage_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkImplementor *AtkImplementor_autoptr
     * }
     */
    public static final AddressLayout AtkImplementor_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkImplementor_listautoptr
     * }
     */
    public static final AddressLayout AtkImplementor_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkImplementor_slistautoptr
     * }
     */
    public static final AddressLayout AtkImplementor_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkImplementor_queueautoptr
     * }
     */
    public static final AddressLayout AtkImplementor_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkMisc *AtkMisc_autoptr
     * }
     */
    public static final AddressLayout AtkMisc_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkMisc_listautoptr
     * }
     */
    public static final AddressLayout AtkMisc_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkMisc_slistautoptr
     * }
     */
    public static final AddressLayout AtkMisc_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkMisc_queueautoptr
     * }
     */
    public static final AddressLayout AtkMisc_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkNoOpObjectFactory *AtkNoOpObjectFactory_autoptr
     * }
     */
    public static final AddressLayout AtkNoOpObjectFactory_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkNoOpObjectFactory_listautoptr
     * }
     */
    public static final AddressLayout AtkNoOpObjectFactory_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkNoOpObjectFactory_slistautoptr
     * }
     */
    public static final AddressLayout AtkNoOpObjectFactory_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkNoOpObjectFactory_queueautoptr
     * }
     */
    public static final AddressLayout AtkNoOpObjectFactory_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkNoOpObject *AtkNoOpObject_autoptr
     * }
     */
    public static final AddressLayout AtkNoOpObject_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkNoOpObject_listautoptr
     * }
     */
    public static final AddressLayout AtkNoOpObject_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkNoOpObject_slistautoptr
     * }
     */
    public static final AddressLayout AtkNoOpObject_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkNoOpObject_queueautoptr
     * }
     */
    public static final AddressLayout AtkNoOpObject_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkObjectFactory *AtkObjectFactory_autoptr
     * }
     */
    public static final AddressLayout AtkObjectFactory_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkObjectFactory_listautoptr
     * }
     */
    public static final AddressLayout AtkObjectFactory_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkObjectFactory_slistautoptr
     * }
     */
    public static final AddressLayout AtkObjectFactory_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkObjectFactory_queueautoptr
     * }
     */
    public static final AddressLayout AtkObjectFactory_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkObject *AtkObject_autoptr
     * }
     */
    public static final AddressLayout AtkObject_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkObject_listautoptr
     * }
     */
    public static final AddressLayout AtkObject_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkObject_slistautoptr
     * }
     */
    public static final AddressLayout AtkObject_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkObject_queueautoptr
     * }
     */
    public static final AddressLayout AtkObject_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkPlug *AtkPlug_autoptr
     * }
     */
    public static final AddressLayout AtkPlug_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkPlug_listautoptr
     * }
     */
    public static final AddressLayout AtkPlug_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkPlug_slistautoptr
     * }
     */
    public static final AddressLayout AtkPlug_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkPlug_queueautoptr
     * }
     */
    public static final AddressLayout AtkPlug_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkRegistry *AtkRegistry_autoptr
     * }
     */
    public static final AddressLayout AtkRegistry_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkRegistry_listautoptr
     * }
     */
    public static final AddressLayout AtkRegistry_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkRegistry_slistautoptr
     * }
     */
    public static final AddressLayout AtkRegistry_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkRegistry_queueautoptr
     * }
     */
    public static final AddressLayout AtkRegistry_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkRelationSet *AtkRelationSet_autoptr
     * }
     */
    public static final AddressLayout AtkRelationSet_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkRelationSet_listautoptr
     * }
     */
    public static final AddressLayout AtkRelationSet_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkRelationSet_slistautoptr
     * }
     */
    public static final AddressLayout AtkRelationSet_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkRelationSet_queueautoptr
     * }
     */
    public static final AddressLayout AtkRelationSet_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkRelation *AtkRelation_autoptr
     * }
     */
    public static final AddressLayout AtkRelation_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkRelation_listautoptr
     * }
     */
    public static final AddressLayout AtkRelation_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkRelation_slistautoptr
     * }
     */
    public static final AddressLayout AtkRelation_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkRelation_queueautoptr
     * }
     */
    public static final AddressLayout AtkRelation_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkSelection *AtkSelection_autoptr
     * }
     */
    public static final AddressLayout AtkSelection_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkSelection_listautoptr
     * }
     */
    public static final AddressLayout AtkSelection_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkSelection_slistautoptr
     * }
     */
    public static final AddressLayout AtkSelection_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkSelection_queueautoptr
     * }
     */
    public static final AddressLayout AtkSelection_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkSocket *AtkSocket_autoptr
     * }
     */
    public static final AddressLayout AtkSocket_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkSocket_listautoptr
     * }
     */
    public static final AddressLayout AtkSocket_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkSocket_slistautoptr
     * }
     */
    public static final AddressLayout AtkSocket_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkSocket_queueautoptr
     * }
     */
    public static final AddressLayout AtkSocket_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkStateSet *AtkStateSet_autoptr
     * }
     */
    public static final AddressLayout AtkStateSet_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkStateSet_listautoptr
     * }
     */
    public static final AddressLayout AtkStateSet_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkStateSet_slistautoptr
     * }
     */
    public static final AddressLayout AtkStateSet_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkStateSet_queueautoptr
     * }
     */
    public static final AddressLayout AtkStateSet_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkStreamableContent *AtkStreamableContent_autoptr
     * }
     */
    public static final AddressLayout AtkStreamableContent_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkStreamableContent_listautoptr
     * }
     */
    public static final AddressLayout AtkStreamableContent_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkStreamableContent_slistautoptr
     * }
     */
    public static final AddressLayout AtkStreamableContent_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkStreamableContent_queueautoptr
     * }
     */
    public static final AddressLayout AtkStreamableContent_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkTableCell *AtkTableCell_autoptr
     * }
     */
    public static final AddressLayout AtkTableCell_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkTableCell_listautoptr
     * }
     */
    public static final AddressLayout AtkTableCell_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkTableCell_slistautoptr
     * }
     */
    public static final AddressLayout AtkTableCell_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkTableCell_queueautoptr
     * }
     */
    public static final AddressLayout AtkTableCell_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkTable *AtkTable_autoptr
     * }
     */
    public static final AddressLayout AtkTable_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkTable_listautoptr
     * }
     */
    public static final AddressLayout AtkTable_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkTable_slistautoptr
     * }
     */
    public static final AddressLayout AtkTable_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkTable_queueautoptr
     * }
     */
    public static final AddressLayout AtkTable_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkText *AtkText_autoptr
     * }
     */
    public static final AddressLayout AtkText_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkText_listautoptr
     * }
     */
    public static final AddressLayout AtkText_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkText_slistautoptr
     * }
     */
    public static final AddressLayout AtkText_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkText_queueautoptr
     * }
     */
    public static final AddressLayout AtkText_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkUtil *AtkUtil_autoptr
     * }
     */
    public static final AddressLayout AtkUtil_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkUtil_listautoptr
     * }
     */
    public static final AddressLayout AtkUtil_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkUtil_slistautoptr
     * }
     */
    public static final AddressLayout AtkUtil_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkUtil_queueautoptr
     * }
     */
    public static final AddressLayout AtkUtil_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkValue *AtkValue_autoptr
     * }
     */
    public static final AddressLayout AtkValue_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkValue_listautoptr
     * }
     */
    public static final AddressLayout AtkValue_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkValue_slistautoptr
     * }
     */
    public static final AddressLayout AtkValue_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkValue_queueautoptr
     * }
     */
    public static final AddressLayout AtkValue_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef AtkWindow *AtkWindow_autoptr
     * }
     */
    public static final AddressLayout AtkWindow_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *AtkWindow_listautoptr
     * }
     */
    public static final AddressLayout AtkWindow_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *AtkWindow_slistautoptr
     * }
     */
    public static final AddressLayout AtkWindow_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *AtkWindow_queueautoptr
     * }
     */
    public static final AddressLayout AtkWindow_queueautoptr = app_indicator_h.C_POINTER;
    private static final int GTK_WIDGET_HELP_TOOLTIP = (int)0L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WIDGET_HELP_TOOLTIP = 0
     * }
     */
    public static int GTK_WIDGET_HELP_TOOLTIP() {
        return GTK_WIDGET_HELP_TOOLTIP;
    }
    private static final int GTK_WIDGET_HELP_WHATS_THIS = (int)1L;
    /**
     * {@snippet lang=c :
     * enum <anonymous>.GTK_WIDGET_HELP_WHATS_THIS = 1
     * }
     */
    public static int GTK_WIDGET_HELP_WHATS_THIS() {
        return GTK_WIDGET_HELP_WHATS_THIS;
    }

    private static class gtk_widget_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_widget_get_type()
     * }
     */
    public static FunctionDescriptor gtk_widget_get_type$descriptor() {
        return gtk_widget_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_widget_get_type()
     * }
     */
    public static MethodHandle gtk_widget_get_type$handle() {
        return gtk_widget_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_widget_get_type()
     * }
     */
    public static long gtk_widget_get_type() {
        var mh$ = gtk_widget_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_widget_new(GType type, const gchar *first_property_name, ...)
     * }
     */
    public static class gtk_widget_new {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.of(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_LONG,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_widget_new");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_widget_new(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern GtkWidget *gtk_widget_new(GType type, const gchar *first_property_name, ...)
         * }
         */
        public static gtk_widget_new makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_widget_new(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public MemorySegment apply(long type, MemorySegment first_property_name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_widget_new", type, first_property_name, x2);
                }
                return (MemorySegment)spreader.invokeExact(type, first_property_name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_widget_destroy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_destroy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_destroy(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_destroy$descriptor() {
        return gtk_widget_destroy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_destroy(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_destroy$handle() {
        return gtk_widget_destroy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_destroy(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_destroy(MemorySegment widget) {
        var mh$ = gtk_widget_destroy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_destroy", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_destroyed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_destroyed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_destroyed(GtkWidget *widget, GtkWidget **widget_pointer)
     * }
     */
    public static FunctionDescriptor gtk_widget_destroyed$descriptor() {
        return gtk_widget_destroyed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_destroyed(GtkWidget *widget, GtkWidget **widget_pointer)
     * }
     */
    public static MethodHandle gtk_widget_destroyed$handle() {
        return gtk_widget_destroyed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_destroyed(GtkWidget *widget, GtkWidget **widget_pointer)
     * }
     */
    public static void gtk_widget_destroyed(MemorySegment widget, MemorySegment widget_pointer) {
        var mh$ = gtk_widget_destroyed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_destroyed", widget, widget_pointer);
            }
            mh$.invokeExact(widget, widget_pointer);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_unparent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_unparent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_unparent(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_unparent$descriptor() {
        return gtk_widget_unparent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_unparent(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_unparent$handle() {
        return gtk_widget_unparent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_unparent(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_unparent(MemorySegment widget) {
        var mh$ = gtk_widget_unparent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_unparent", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_show {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_show"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_show(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_show$descriptor() {
        return gtk_widget_show.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_show(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_show$handle() {
        return gtk_widget_show.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_show(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_show(MemorySegment widget) {
        var mh$ = gtk_widget_show.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_show", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_hide {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_hide"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_hide(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_hide$descriptor() {
        return gtk_widget_hide.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_hide(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_hide$handle() {
        return gtk_widget_hide.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_hide(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_hide(MemorySegment widget) {
        var mh$ = gtk_widget_hide.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_hide", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_show_now {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_show_now"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_show_now(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_show_now$descriptor() {
        return gtk_widget_show_now.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_show_now(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_show_now$handle() {
        return gtk_widget_show_now.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_show_now(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_show_now(MemorySegment widget) {
        var mh$ = gtk_widget_show_now.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_show_now", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_show_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_show_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_show_all(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_show_all$descriptor() {
        return gtk_widget_show_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_show_all(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_show_all$handle() {
        return gtk_widget_show_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_show_all(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_show_all(MemorySegment widget) {
        var mh$ = gtk_widget_show_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_show_all", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_no_show_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_no_show_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_no_show_all(GtkWidget *widget, gboolean no_show_all)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_no_show_all$descriptor() {
        return gtk_widget_set_no_show_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_no_show_all(GtkWidget *widget, gboolean no_show_all)
     * }
     */
    public static MethodHandle gtk_widget_set_no_show_all$handle() {
        return gtk_widget_set_no_show_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_no_show_all(GtkWidget *widget, gboolean no_show_all)
     * }
     */
    public static void gtk_widget_set_no_show_all(MemorySegment widget, int no_show_all) {
        var mh$ = gtk_widget_set_no_show_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_no_show_all", widget, no_show_all);
            }
            mh$.invokeExact(widget, no_show_all);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_no_show_all {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_no_show_all"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_no_show_all(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_no_show_all$descriptor() {
        return gtk_widget_get_no_show_all.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_no_show_all(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_no_show_all$handle() {
        return gtk_widget_get_no_show_all.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_no_show_all(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_no_show_all(MemorySegment widget) {
        var mh$ = gtk_widget_get_no_show_all.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_no_show_all", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_map(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_map$descriptor() {
        return gtk_widget_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_map(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_map$handle() {
        return gtk_widget_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_map(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_map(MemorySegment widget) {
        var mh$ = gtk_widget_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_map", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_unmap {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_unmap"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_unmap(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_unmap$descriptor() {
        return gtk_widget_unmap.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_unmap(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_unmap$handle() {
        return gtk_widget_unmap.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_unmap(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_unmap(MemorySegment widget) {
        var mh$ = gtk_widget_unmap.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_unmap", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_realize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_realize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_realize(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_realize$descriptor() {
        return gtk_widget_realize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_realize(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_realize$handle() {
        return gtk_widget_realize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_realize(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_realize(MemorySegment widget) {
        var mh$ = gtk_widget_realize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_realize", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_unrealize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_unrealize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_unrealize(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_unrealize$descriptor() {
        return gtk_widget_unrealize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_unrealize(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_unrealize$handle() {
        return gtk_widget_unrealize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_unrealize(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_unrealize(MemorySegment widget) {
        var mh$ = gtk_widget_unrealize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_unrealize", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_draw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_draw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_draw(GtkWidget *widget, cairo_t *cr)
     * }
     */
    public static FunctionDescriptor gtk_widget_draw$descriptor() {
        return gtk_widget_draw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_draw(GtkWidget *widget, cairo_t *cr)
     * }
     */
    public static MethodHandle gtk_widget_draw$handle() {
        return gtk_widget_draw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_draw(GtkWidget *widget, cairo_t *cr)
     * }
     */
    public static void gtk_widget_draw(MemorySegment widget, MemorySegment cr) {
        var mh$ = gtk_widget_draw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_draw", widget, cr);
            }
            mh$.invokeExact(widget, cr);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_queue_draw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_queue_draw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_draw(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_queue_draw$descriptor() {
        return gtk_widget_queue_draw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_draw(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_queue_draw$handle() {
        return gtk_widget_queue_draw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_queue_draw(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_queue_draw(MemorySegment widget) {
        var mh$ = gtk_widget_queue_draw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_queue_draw", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_queue_draw_area {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_queue_draw_area"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_draw_area(GtkWidget *widget, gint x, gint y, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_widget_queue_draw_area$descriptor() {
        return gtk_widget_queue_draw_area.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_draw_area(GtkWidget *widget, gint x, gint y, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_widget_queue_draw_area$handle() {
        return gtk_widget_queue_draw_area.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_queue_draw_area(GtkWidget *widget, gint x, gint y, gint width, gint height)
     * }
     */
    public static void gtk_widget_queue_draw_area(MemorySegment widget, int x, int y, int width, int height) {
        var mh$ = gtk_widget_queue_draw_area.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_queue_draw_area", widget, x, y, width, height);
            }
            mh$.invokeExact(widget, x, y, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_queue_draw_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_queue_draw_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_draw_region(GtkWidget *widget, const cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor gtk_widget_queue_draw_region$descriptor() {
        return gtk_widget_queue_draw_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_draw_region(GtkWidget *widget, const cairo_region_t *region)
     * }
     */
    public static MethodHandle gtk_widget_queue_draw_region$handle() {
        return gtk_widget_queue_draw_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_queue_draw_region(GtkWidget *widget, const cairo_region_t *region)
     * }
     */
    public static void gtk_widget_queue_draw_region(MemorySegment widget, MemorySegment region) {
        var mh$ = gtk_widget_queue_draw_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_queue_draw_region", widget, region);
            }
            mh$.invokeExact(widget, region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_queue_resize {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_queue_resize"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_resize(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_queue_resize$descriptor() {
        return gtk_widget_queue_resize.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_resize(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_queue_resize$handle() {
        return gtk_widget_queue_resize.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_queue_resize(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_queue_resize(MemorySegment widget) {
        var mh$ = gtk_widget_queue_resize.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_queue_resize", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_queue_resize_no_redraw {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_queue_resize_no_redraw"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_resize_no_redraw(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_queue_resize_no_redraw$descriptor() {
        return gtk_widget_queue_resize_no_redraw.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_resize_no_redraw(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_queue_resize_no_redraw$handle() {
        return gtk_widget_queue_resize_no_redraw.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_queue_resize_no_redraw(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_queue_resize_no_redraw(MemorySegment widget) {
        var mh$ = gtk_widget_queue_resize_no_redraw.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_queue_resize_no_redraw", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_queue_allocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_queue_allocate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_allocate(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_queue_allocate$descriptor() {
        return gtk_widget_queue_allocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_allocate(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_queue_allocate$handle() {
        return gtk_widget_queue_allocate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_queue_allocate(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_queue_allocate(MemorySegment widget) {
        var mh$ = gtk_widget_queue_allocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_queue_allocate", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_frame_clock {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_frame_clock"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkFrameClock *gtk_widget_get_frame_clock(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_frame_clock$descriptor() {
        return gtk_widget_get_frame_clock.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkFrameClock *gtk_widget_get_frame_clock(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_frame_clock$handle() {
        return gtk_widget_get_frame_clock.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkFrameClock *gtk_widget_get_frame_clock(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_frame_clock(MemorySegment widget) {
        var mh$ = gtk_widget_get_frame_clock.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_frame_clock", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_size_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_size_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_size_request(GtkWidget *widget, GtkRequisition *requisition)
     * }
     */
    public static FunctionDescriptor gtk_widget_size_request$descriptor() {
        return gtk_widget_size_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_size_request(GtkWidget *widget, GtkRequisition *requisition)
     * }
     */
    public static MethodHandle gtk_widget_size_request$handle() {
        return gtk_widget_size_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_size_request(GtkWidget *widget, GtkRequisition *requisition)
     * }
     */
    public static void gtk_widget_size_request(MemorySegment widget, MemorySegment requisition) {
        var mh$ = gtk_widget_size_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_size_request", widget, requisition);
            }
            mh$.invokeExact(widget, requisition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_size_allocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_size_allocate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_size_allocate(GtkWidget *widget, GtkAllocation *allocation)
     * }
     */
    public static FunctionDescriptor gtk_widget_size_allocate$descriptor() {
        return gtk_widget_size_allocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_size_allocate(GtkWidget *widget, GtkAllocation *allocation)
     * }
     */
    public static MethodHandle gtk_widget_size_allocate$handle() {
        return gtk_widget_size_allocate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_size_allocate(GtkWidget *widget, GtkAllocation *allocation)
     * }
     */
    public static void gtk_widget_size_allocate(MemorySegment widget, MemorySegment allocation) {
        var mh$ = gtk_widget_size_allocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_size_allocate", widget, allocation);
            }
            mh$.invokeExact(widget, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_size_allocate_with_baseline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_size_allocate_with_baseline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_size_allocate_with_baseline(GtkWidget *widget, GtkAllocation *allocation, gint baseline)
     * }
     */
    public static FunctionDescriptor gtk_widget_size_allocate_with_baseline$descriptor() {
        return gtk_widget_size_allocate_with_baseline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_size_allocate_with_baseline(GtkWidget *widget, GtkAllocation *allocation, gint baseline)
     * }
     */
    public static MethodHandle gtk_widget_size_allocate_with_baseline$handle() {
        return gtk_widget_size_allocate_with_baseline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_size_allocate_with_baseline(GtkWidget *widget, GtkAllocation *allocation, gint baseline)
     * }
     */
    public static void gtk_widget_size_allocate_with_baseline(MemorySegment widget, MemorySegment allocation, int baseline) {
        var mh$ = gtk_widget_size_allocate_with_baseline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_size_allocate_with_baseline", widget, allocation, baseline);
            }
            mh$.invokeExact(widget, allocation, baseline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_request_mode {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_request_mode"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSizeRequestMode gtk_widget_get_request_mode(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_request_mode$descriptor() {
        return gtk_widget_get_request_mode.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSizeRequestMode gtk_widget_get_request_mode(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_request_mode$handle() {
        return gtk_widget_get_request_mode.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSizeRequestMode gtk_widget_get_request_mode(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_request_mode(MemorySegment widget) {
        var mh$ = gtk_widget_get_request_mode.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_request_mode", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_preferred_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_preferred_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_width(GtkWidget *widget, gint *minimum_width, gint *natural_width)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_preferred_width$descriptor() {
        return gtk_widget_get_preferred_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_width(GtkWidget *widget, gint *minimum_width, gint *natural_width)
     * }
     */
    public static MethodHandle gtk_widget_get_preferred_width$handle() {
        return gtk_widget_get_preferred_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_width(GtkWidget *widget, gint *minimum_width, gint *natural_width)
     * }
     */
    public static void gtk_widget_get_preferred_width(MemorySegment widget, MemorySegment minimum_width, MemorySegment natural_width) {
        var mh$ = gtk_widget_get_preferred_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_preferred_width", widget, minimum_width, natural_width);
            }
            mh$.invokeExact(widget, minimum_width, natural_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_preferred_height_for_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_preferred_height_for_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_height_for_width(GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_preferred_height_for_width$descriptor() {
        return gtk_widget_get_preferred_height_for_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_height_for_width(GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static MethodHandle gtk_widget_get_preferred_height_for_width$handle() {
        return gtk_widget_get_preferred_height_for_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_height_for_width(GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height)
     * }
     */
    public static void gtk_widget_get_preferred_height_for_width(MemorySegment widget, int width, MemorySegment minimum_height, MemorySegment natural_height) {
        var mh$ = gtk_widget_get_preferred_height_for_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_preferred_height_for_width", widget, width, minimum_height, natural_height);
            }
            mh$.invokeExact(widget, width, minimum_height, natural_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_preferred_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_preferred_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_height(GtkWidget *widget, gint *minimum_height, gint *natural_height)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_preferred_height$descriptor() {
        return gtk_widget_get_preferred_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_height(GtkWidget *widget, gint *minimum_height, gint *natural_height)
     * }
     */
    public static MethodHandle gtk_widget_get_preferred_height$handle() {
        return gtk_widget_get_preferred_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_height(GtkWidget *widget, gint *minimum_height, gint *natural_height)
     * }
     */
    public static void gtk_widget_get_preferred_height(MemorySegment widget, MemorySegment minimum_height, MemorySegment natural_height) {
        var mh$ = gtk_widget_get_preferred_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_preferred_height", widget, minimum_height, natural_height);
            }
            mh$.invokeExact(widget, minimum_height, natural_height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_preferred_width_for_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_preferred_width_for_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_width_for_height(GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_preferred_width_for_height$descriptor() {
        return gtk_widget_get_preferred_width_for_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_width_for_height(GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static MethodHandle gtk_widget_get_preferred_width_for_height$handle() {
        return gtk_widget_get_preferred_width_for_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_width_for_height(GtkWidget *widget, gint height, gint *minimum_width, gint *natural_width)
     * }
     */
    public static void gtk_widget_get_preferred_width_for_height(MemorySegment widget, int height, MemorySegment minimum_width, MemorySegment natural_width) {
        var mh$ = gtk_widget_get_preferred_width_for_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_preferred_width_for_height", widget, height, minimum_width, natural_width);
            }
            mh$.invokeExact(widget, height, minimum_width, natural_width);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_preferred_height_and_baseline_for_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_preferred_height_and_baseline_for_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_height_and_baseline_for_width(GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height, gint *minimum_baseline, gint *natural_baseline)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_preferred_height_and_baseline_for_width$descriptor() {
        return gtk_widget_get_preferred_height_and_baseline_for_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_height_and_baseline_for_width(GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height, gint *minimum_baseline, gint *natural_baseline)
     * }
     */
    public static MethodHandle gtk_widget_get_preferred_height_and_baseline_for_width$handle() {
        return gtk_widget_get_preferred_height_and_baseline_for_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_height_and_baseline_for_width(GtkWidget *widget, gint width, gint *minimum_height, gint *natural_height, gint *minimum_baseline, gint *natural_baseline)
     * }
     */
    public static void gtk_widget_get_preferred_height_and_baseline_for_width(MemorySegment widget, int width, MemorySegment minimum_height, MemorySegment natural_height, MemorySegment minimum_baseline, MemorySegment natural_baseline) {
        var mh$ = gtk_widget_get_preferred_height_and_baseline_for_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_preferred_height_and_baseline_for_width", widget, width, minimum_height, natural_height, minimum_baseline, natural_baseline);
            }
            mh$.invokeExact(widget, width, minimum_height, natural_height, minimum_baseline, natural_baseline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_preferred_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_preferred_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_size(GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_preferred_size$descriptor() {
        return gtk_widget_get_preferred_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_size(GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size)
     * }
     */
    public static MethodHandle gtk_widget_get_preferred_size$handle() {
        return gtk_widget_get_preferred_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_preferred_size(GtkWidget *widget, GtkRequisition *minimum_size, GtkRequisition *natural_size)
     * }
     */
    public static void gtk_widget_get_preferred_size(MemorySegment widget, MemorySegment minimum_size, MemorySegment natural_size) {
        var mh$ = gtk_widget_get_preferred_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_preferred_size", widget, minimum_size, natural_size);
            }
            mh$.invokeExact(widget, minimum_size, natural_size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_child_requisition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_child_requisition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_child_requisition(GtkWidget *widget, GtkRequisition *requisition)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_child_requisition$descriptor() {
        return gtk_widget_get_child_requisition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_child_requisition(GtkWidget *widget, GtkRequisition *requisition)
     * }
     */
    public static MethodHandle gtk_widget_get_child_requisition$handle() {
        return gtk_widget_get_child_requisition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_child_requisition(GtkWidget *widget, GtkRequisition *requisition)
     * }
     */
    public static void gtk_widget_get_child_requisition(MemorySegment widget, MemorySegment requisition) {
        var mh$ = gtk_widget_get_child_requisition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_child_requisition", widget, requisition);
            }
            mh$.invokeExact(widget, requisition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_add_accelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_add_accelerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_add_accelerator(GtkWidget *widget, const gchar *accel_signal, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags)
     * }
     */
    public static FunctionDescriptor gtk_widget_add_accelerator$descriptor() {
        return gtk_widget_add_accelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_add_accelerator(GtkWidget *widget, const gchar *accel_signal, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags)
     * }
     */
    public static MethodHandle gtk_widget_add_accelerator$handle() {
        return gtk_widget_add_accelerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_add_accelerator(GtkWidget *widget, const gchar *accel_signal, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods, GtkAccelFlags accel_flags)
     * }
     */
    public static void gtk_widget_add_accelerator(MemorySegment widget, MemorySegment accel_signal, MemorySegment accel_group, int accel_key, int accel_mods, int accel_flags) {
        var mh$ = gtk_widget_add_accelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_add_accelerator", widget, accel_signal, accel_group, accel_key, accel_mods, accel_flags);
            }
            mh$.invokeExact(widget, accel_signal, accel_group, accel_key, accel_mods, accel_flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_remove_accelerator {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_remove_accelerator"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_remove_accelerator(GtkWidget *widget, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static FunctionDescriptor gtk_widget_remove_accelerator$descriptor() {
        return gtk_widget_remove_accelerator.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_remove_accelerator(GtkWidget *widget, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static MethodHandle gtk_widget_remove_accelerator$handle() {
        return gtk_widget_remove_accelerator.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_remove_accelerator(GtkWidget *widget, GtkAccelGroup *accel_group, guint accel_key, GdkModifierType accel_mods)
     * }
     */
    public static int gtk_widget_remove_accelerator(MemorySegment widget, MemorySegment accel_group, int accel_key, int accel_mods) {
        var mh$ = gtk_widget_remove_accelerator.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_remove_accelerator", widget, accel_group, accel_key, accel_mods);
            }
            return (int)mh$.invokeExact(widget, accel_group, accel_key, accel_mods);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_accel_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_accel_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_accel_path(GtkWidget *widget, const gchar *accel_path, GtkAccelGroup *accel_group)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_accel_path$descriptor() {
        return gtk_widget_set_accel_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_accel_path(GtkWidget *widget, const gchar *accel_path, GtkAccelGroup *accel_group)
     * }
     */
    public static MethodHandle gtk_widget_set_accel_path$handle() {
        return gtk_widget_set_accel_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_accel_path(GtkWidget *widget, const gchar *accel_path, GtkAccelGroup *accel_group)
     * }
     */
    public static void gtk_widget_set_accel_path(MemorySegment widget, MemorySegment accel_path, MemorySegment accel_group) {
        var mh$ = gtk_widget_set_accel_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_accel_path", widget, accel_path, accel_group);
            }
            mh$.invokeExact(widget, accel_path, accel_group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_list_accel_closures {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_list_accel_closures"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_widget_list_accel_closures(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_list_accel_closures$descriptor() {
        return gtk_widget_list_accel_closures.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_widget_list_accel_closures(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_list_accel_closures$handle() {
        return gtk_widget_list_accel_closures.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_widget_list_accel_closures(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_list_accel_closures(MemorySegment widget) {
        var mh$ = gtk_widget_list_accel_closures.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_list_accel_closures", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_can_activate_accel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_can_activate_accel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_can_activate_accel(GtkWidget *widget, guint signal_id)
     * }
     */
    public static FunctionDescriptor gtk_widget_can_activate_accel$descriptor() {
        return gtk_widget_can_activate_accel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_can_activate_accel(GtkWidget *widget, guint signal_id)
     * }
     */
    public static MethodHandle gtk_widget_can_activate_accel$handle() {
        return gtk_widget_can_activate_accel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_can_activate_accel(GtkWidget *widget, guint signal_id)
     * }
     */
    public static int gtk_widget_can_activate_accel(MemorySegment widget, int signal_id) {
        var mh$ = gtk_widget_can_activate_accel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_can_activate_accel", widget, signal_id);
            }
            return (int)mh$.invokeExact(widget, signal_id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_mnemonic_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_mnemonic_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_mnemonic_activate(GtkWidget *widget, gboolean group_cycling)
     * }
     */
    public static FunctionDescriptor gtk_widget_mnemonic_activate$descriptor() {
        return gtk_widget_mnemonic_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_mnemonic_activate(GtkWidget *widget, gboolean group_cycling)
     * }
     */
    public static MethodHandle gtk_widget_mnemonic_activate$handle() {
        return gtk_widget_mnemonic_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_mnemonic_activate(GtkWidget *widget, gboolean group_cycling)
     * }
     */
    public static int gtk_widget_mnemonic_activate(MemorySegment widget, int group_cycling) {
        var mh$ = gtk_widget_mnemonic_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_mnemonic_activate", widget, group_cycling);
            }
            return (int)mh$.invokeExact(widget, group_cycling);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_event {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_event"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_event(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_widget_event$descriptor() {
        return gtk_widget_event.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_event(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_widget_event$handle() {
        return gtk_widget_event.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_event(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static int gtk_widget_event(MemorySegment widget, MemorySegment event) {
        var mh$ = gtk_widget_event.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_event", widget, event);
            }
            return (int)mh$.invokeExact(widget, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_send_expose {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_send_expose"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_send_expose(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_widget_send_expose$descriptor() {
        return gtk_widget_send_expose.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_send_expose(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_widget_send_expose$handle() {
        return gtk_widget_send_expose.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_send_expose(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static int gtk_widget_send_expose(MemorySegment widget, MemorySegment event) {
        var mh$ = gtk_widget_send_expose.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_send_expose", widget, event);
            }
            return (int)mh$.invokeExact(widget, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_send_focus_change {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_send_focus_change"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_send_focus_change(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static FunctionDescriptor gtk_widget_send_focus_change$descriptor() {
        return gtk_widget_send_focus_change.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_send_focus_change(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static MethodHandle gtk_widget_send_focus_change$handle() {
        return gtk_widget_send_focus_change.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_send_focus_change(GtkWidget *widget, GdkEvent *event)
     * }
     */
    public static int gtk_widget_send_focus_change(MemorySegment widget, MemorySegment event) {
        var mh$ = gtk_widget_send_focus_change.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_send_focus_change", widget, event);
            }
            return (int)mh$.invokeExact(widget, event);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_activate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_activate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_activate(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_activate$descriptor() {
        return gtk_widget_activate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_activate(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_activate$handle() {
        return gtk_widget_activate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_activate(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_activate(MemorySegment widget) {
        var mh$ = gtk_widget_activate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_activate", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_reparent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_reparent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_reparent(GtkWidget *widget, GtkWidget *new_parent)
     * }
     */
    public static FunctionDescriptor gtk_widget_reparent$descriptor() {
        return gtk_widget_reparent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_reparent(GtkWidget *widget, GtkWidget *new_parent)
     * }
     */
    public static MethodHandle gtk_widget_reparent$handle() {
        return gtk_widget_reparent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_reparent(GtkWidget *widget, GtkWidget *new_parent)
     * }
     */
    public static void gtk_widget_reparent(MemorySegment widget, MemorySegment new_parent) {
        var mh$ = gtk_widget_reparent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_reparent", widget, new_parent);
            }
            mh$.invokeExact(widget, new_parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_intersect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_intersect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_intersect(GtkWidget *widget, const GdkRectangle *area, GdkRectangle *intersection)
     * }
     */
    public static FunctionDescriptor gtk_widget_intersect$descriptor() {
        return gtk_widget_intersect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_intersect(GtkWidget *widget, const GdkRectangle *area, GdkRectangle *intersection)
     * }
     */
    public static MethodHandle gtk_widget_intersect$handle() {
        return gtk_widget_intersect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_intersect(GtkWidget *widget, const GdkRectangle *area, GdkRectangle *intersection)
     * }
     */
    public static int gtk_widget_intersect(MemorySegment widget, MemorySegment area, MemorySegment intersection) {
        var mh$ = gtk_widget_intersect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_intersect", widget, area, intersection);
            }
            return (int)mh$.invokeExact(widget, area, intersection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_region_intersect {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_region_intersect"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern cairo_region_t *gtk_widget_region_intersect(GtkWidget *widget, const cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor gtk_widget_region_intersect$descriptor() {
        return gtk_widget_region_intersect.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern cairo_region_t *gtk_widget_region_intersect(GtkWidget *widget, const cairo_region_t *region)
     * }
     */
    public static MethodHandle gtk_widget_region_intersect$handle() {
        return gtk_widget_region_intersect.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern cairo_region_t *gtk_widget_region_intersect(GtkWidget *widget, const cairo_region_t *region)
     * }
     */
    public static MemorySegment gtk_widget_region_intersect(MemorySegment widget, MemorySegment region) {
        var mh$ = gtk_widget_region_intersect.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_region_intersect", widget, region);
            }
            return (MemorySegment)mh$.invokeExact(widget, region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_freeze_child_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_freeze_child_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_freeze_child_notify(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_freeze_child_notify$descriptor() {
        return gtk_widget_freeze_child_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_freeze_child_notify(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_freeze_child_notify$handle() {
        return gtk_widget_freeze_child_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_freeze_child_notify(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_freeze_child_notify(MemorySegment widget) {
        var mh$ = gtk_widget_freeze_child_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_freeze_child_notify", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_child_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_child_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_child_notify(GtkWidget *widget, const gchar *child_property)
     * }
     */
    public static FunctionDescriptor gtk_widget_child_notify$descriptor() {
        return gtk_widget_child_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_child_notify(GtkWidget *widget, const gchar *child_property)
     * }
     */
    public static MethodHandle gtk_widget_child_notify$handle() {
        return gtk_widget_child_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_child_notify(GtkWidget *widget, const gchar *child_property)
     * }
     */
    public static void gtk_widget_child_notify(MemorySegment widget, MemorySegment child_property) {
        var mh$ = gtk_widget_child_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_child_notify", widget, child_property);
            }
            mh$.invokeExact(widget, child_property);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_thaw_child_notify {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_thaw_child_notify"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_thaw_child_notify(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_thaw_child_notify$descriptor() {
        return gtk_widget_thaw_child_notify.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_thaw_child_notify(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_thaw_child_notify$handle() {
        return gtk_widget_thaw_child_notify.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_thaw_child_notify(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_thaw_child_notify(MemorySegment widget) {
        var mh$ = gtk_widget_thaw_child_notify.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_thaw_child_notify", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_can_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_can_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_can_focus(GtkWidget *widget, gboolean can_focus)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_can_focus$descriptor() {
        return gtk_widget_set_can_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_can_focus(GtkWidget *widget, gboolean can_focus)
     * }
     */
    public static MethodHandle gtk_widget_set_can_focus$handle() {
        return gtk_widget_set_can_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_can_focus(GtkWidget *widget, gboolean can_focus)
     * }
     */
    public static void gtk_widget_set_can_focus(MemorySegment widget, int can_focus) {
        var mh$ = gtk_widget_set_can_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_can_focus", widget, can_focus);
            }
            mh$.invokeExact(widget, can_focus);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_can_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_can_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_can_focus(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_can_focus$descriptor() {
        return gtk_widget_get_can_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_can_focus(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_can_focus$handle() {
        return gtk_widget_get_can_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_can_focus(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_can_focus(MemorySegment widget) {
        var mh$ = gtk_widget_get_can_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_can_focus", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_has_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_has_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_focus(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_has_focus$descriptor() {
        return gtk_widget_has_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_focus(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_has_focus$handle() {
        return gtk_widget_has_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_focus(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_has_focus(MemorySegment widget) {
        var mh$ = gtk_widget_has_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_has_focus", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_is_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_is_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_focus(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_is_focus$descriptor() {
        return gtk_widget_is_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_focus(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_is_focus$handle() {
        return gtk_widget_is_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_focus(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_is_focus(MemorySegment widget) {
        var mh$ = gtk_widget_is_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_is_focus", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_has_visible_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_has_visible_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_visible_focus(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_has_visible_focus$descriptor() {
        return gtk_widget_has_visible_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_visible_focus(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_has_visible_focus$handle() {
        return gtk_widget_has_visible_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_visible_focus(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_has_visible_focus(MemorySegment widget) {
        var mh$ = gtk_widget_has_visible_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_has_visible_focus", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_grab_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_grab_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_grab_focus(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_grab_focus$descriptor() {
        return gtk_widget_grab_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_grab_focus(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_grab_focus$handle() {
        return gtk_widget_grab_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_grab_focus(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_grab_focus(MemorySegment widget) {
        var mh$ = gtk_widget_grab_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_grab_focus", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_focus_on_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_focus_on_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_focus_on_click(GtkWidget *widget, gboolean focus_on_click)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_focus_on_click$descriptor() {
        return gtk_widget_set_focus_on_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_focus_on_click(GtkWidget *widget, gboolean focus_on_click)
     * }
     */
    public static MethodHandle gtk_widget_set_focus_on_click$handle() {
        return gtk_widget_set_focus_on_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_focus_on_click(GtkWidget *widget, gboolean focus_on_click)
     * }
     */
    public static void gtk_widget_set_focus_on_click(MemorySegment widget, int focus_on_click) {
        var mh$ = gtk_widget_set_focus_on_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_focus_on_click", widget, focus_on_click);
            }
            mh$.invokeExact(widget, focus_on_click);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_focus_on_click {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_focus_on_click"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_focus_on_click(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_focus_on_click$descriptor() {
        return gtk_widget_get_focus_on_click.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_focus_on_click(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_focus_on_click$handle() {
        return gtk_widget_get_focus_on_click.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_focus_on_click(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_focus_on_click(MemorySegment widget) {
        var mh$ = gtk_widget_get_focus_on_click.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_focus_on_click", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_can_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_can_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_can_default(GtkWidget *widget, gboolean can_default)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_can_default$descriptor() {
        return gtk_widget_set_can_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_can_default(GtkWidget *widget, gboolean can_default)
     * }
     */
    public static MethodHandle gtk_widget_set_can_default$handle() {
        return gtk_widget_set_can_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_can_default(GtkWidget *widget, gboolean can_default)
     * }
     */
    public static void gtk_widget_set_can_default(MemorySegment widget, int can_default) {
        var mh$ = gtk_widget_set_can_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_can_default", widget, can_default);
            }
            mh$.invokeExact(widget, can_default);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_can_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_can_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_can_default(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_can_default$descriptor() {
        return gtk_widget_get_can_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_can_default(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_can_default$handle() {
        return gtk_widget_get_can_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_can_default(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_can_default(MemorySegment widget) {
        var mh$ = gtk_widget_get_can_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_can_default", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_has_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_has_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_default(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_has_default$descriptor() {
        return gtk_widget_has_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_default(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_has_default$handle() {
        return gtk_widget_has_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_default(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_has_default(MemorySegment widget) {
        var mh$ = gtk_widget_has_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_has_default", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_grab_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_grab_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_grab_default(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_grab_default$descriptor() {
        return gtk_widget_grab_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_grab_default(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_grab_default$handle() {
        return gtk_widget_grab_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_grab_default(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_grab_default(MemorySegment widget) {
        var mh$ = gtk_widget_grab_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_grab_default", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_receives_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_receives_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_receives_default(GtkWidget *widget, gboolean receives_default)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_receives_default$descriptor() {
        return gtk_widget_set_receives_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_receives_default(GtkWidget *widget, gboolean receives_default)
     * }
     */
    public static MethodHandle gtk_widget_set_receives_default$handle() {
        return gtk_widget_set_receives_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_receives_default(GtkWidget *widget, gboolean receives_default)
     * }
     */
    public static void gtk_widget_set_receives_default(MemorySegment widget, int receives_default) {
        var mh$ = gtk_widget_set_receives_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_receives_default", widget, receives_default);
            }
            mh$.invokeExact(widget, receives_default);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_receives_default {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_receives_default"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_receives_default(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_receives_default$descriptor() {
        return gtk_widget_get_receives_default.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_receives_default(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_receives_default$handle() {
        return gtk_widget_get_receives_default.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_receives_default(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_receives_default(MemorySegment widget) {
        var mh$ = gtk_widget_get_receives_default.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_receives_default", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_has_grab {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_has_grab"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_grab(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_has_grab$descriptor() {
        return gtk_widget_has_grab.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_grab(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_has_grab$handle() {
        return gtk_widget_has_grab.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_grab(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_has_grab(MemorySegment widget) {
        var mh$ = gtk_widget_has_grab.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_has_grab", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_device_is_shadowed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_device_is_shadowed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_device_is_shadowed(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gtk_widget_device_is_shadowed$descriptor() {
        return gtk_widget_device_is_shadowed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_device_is_shadowed(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static MethodHandle gtk_widget_device_is_shadowed$handle() {
        return gtk_widget_device_is_shadowed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_device_is_shadowed(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static int gtk_widget_device_is_shadowed(MemorySegment widget, MemorySegment device) {
        var mh$ = gtk_widget_device_is_shadowed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_device_is_shadowed", widget, device);
            }
            return (int)mh$.invokeExact(widget, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_name(GtkWidget *widget, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_name$descriptor() {
        return gtk_widget_set_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_name(GtkWidget *widget, const gchar *name)
     * }
     */
    public static MethodHandle gtk_widget_set_name$handle() {
        return gtk_widget_set_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_name(GtkWidget *widget, const gchar *name)
     * }
     */
    public static void gtk_widget_set_name(MemorySegment widget, MemorySegment name) {
        var mh$ = gtk_widget_set_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_name", widget, name);
            }
            mh$.invokeExact(widget, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar *gtk_widget_get_name(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_name$descriptor() {
        return gtk_widget_get_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar *gtk_widget_get_name(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_name$handle() {
        return gtk_widget_get_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar *gtk_widget_get_name(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_name(MemorySegment widget) {
        var mh$ = gtk_widget_get_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_name", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_state(GtkWidget *widget, GtkStateType state)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_state$descriptor() {
        return gtk_widget_set_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_state(GtkWidget *widget, GtkStateType state)
     * }
     */
    public static MethodHandle gtk_widget_set_state$handle() {
        return gtk_widget_set_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_state(GtkWidget *widget, GtkStateType state)
     * }
     */
    public static void gtk_widget_set_state(MemorySegment widget, int state) {
        var mh$ = gtk_widget_set_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_state", widget, state);
            }
            mh$.invokeExact(widget, state);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_state {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_state"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStateType gtk_widget_get_state(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_state$descriptor() {
        return gtk_widget_get_state.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStateType gtk_widget_get_state(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_state$handle() {
        return gtk_widget_get_state.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStateType gtk_widget_get_state(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_state(MemorySegment widget) {
        var mh$ = gtk_widget_get_state.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_state", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_state_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_state_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_state_flags(GtkWidget *widget, GtkStateFlags flags, gboolean clear)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_state_flags$descriptor() {
        return gtk_widget_set_state_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_state_flags(GtkWidget *widget, GtkStateFlags flags, gboolean clear)
     * }
     */
    public static MethodHandle gtk_widget_set_state_flags$handle() {
        return gtk_widget_set_state_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_state_flags(GtkWidget *widget, GtkStateFlags flags, gboolean clear)
     * }
     */
    public static void gtk_widget_set_state_flags(MemorySegment widget, int flags, int clear) {
        var mh$ = gtk_widget_set_state_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_state_flags", widget, flags, clear);
            }
            mh$.invokeExact(widget, flags, clear);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_unset_state_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_unset_state_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_unset_state_flags(GtkWidget *widget, GtkStateFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_widget_unset_state_flags$descriptor() {
        return gtk_widget_unset_state_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_unset_state_flags(GtkWidget *widget, GtkStateFlags flags)
     * }
     */
    public static MethodHandle gtk_widget_unset_state_flags$handle() {
        return gtk_widget_unset_state_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_unset_state_flags(GtkWidget *widget, GtkStateFlags flags)
     * }
     */
    public static void gtk_widget_unset_state_flags(MemorySegment widget, int flags) {
        var mh$ = gtk_widget_unset_state_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_unset_state_flags", widget, flags);
            }
            mh$.invokeExact(widget, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_state_flags {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_state_flags"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_widget_get_state_flags(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_state_flags$descriptor() {
        return gtk_widget_get_state_flags.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_widget_get_state_flags(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_state_flags$handle() {
        return gtk_widget_get_state_flags.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStateFlags gtk_widget_get_state_flags(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_state_flags(MemorySegment widget) {
        var mh$ = gtk_widget_get_state_flags.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_state_flags", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_sensitive(GtkWidget *widget, gboolean sensitive)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_sensitive$descriptor() {
        return gtk_widget_set_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_sensitive(GtkWidget *widget, gboolean sensitive)
     * }
     */
    public static MethodHandle gtk_widget_set_sensitive$handle() {
        return gtk_widget_set_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_sensitive(GtkWidget *widget, gboolean sensitive)
     * }
     */
    public static void gtk_widget_set_sensitive(MemorySegment widget, int sensitive) {
        var mh$ = gtk_widget_set_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_sensitive", widget, sensitive);
            }
            mh$.invokeExact(widget, sensitive);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_sensitive(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_sensitive$descriptor() {
        return gtk_widget_get_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_sensitive(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_sensitive$handle() {
        return gtk_widget_get_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_sensitive(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_sensitive(MemorySegment widget) {
        var mh$ = gtk_widget_get_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_sensitive", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_is_sensitive {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_is_sensitive"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_sensitive(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_is_sensitive$descriptor() {
        return gtk_widget_is_sensitive.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_sensitive(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_is_sensitive$handle() {
        return gtk_widget_is_sensitive.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_sensitive(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_is_sensitive(MemorySegment widget) {
        var mh$ = gtk_widget_is_sensitive.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_is_sensitive", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_visible(GtkWidget *widget, gboolean visible)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_visible$descriptor() {
        return gtk_widget_set_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_visible(GtkWidget *widget, gboolean visible)
     * }
     */
    public static MethodHandle gtk_widget_set_visible$handle() {
        return gtk_widget_set_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_visible(GtkWidget *widget, gboolean visible)
     * }
     */
    public static void gtk_widget_set_visible(MemorySegment widget, int visible) {
        var mh$ = gtk_widget_set_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_visible", widget, visible);
            }
            mh$.invokeExact(widget, visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_visible(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_visible$descriptor() {
        return gtk_widget_get_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_visible(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_visible$handle() {
        return gtk_widget_get_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_visible(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_visible(MemorySegment widget) {
        var mh$ = gtk_widget_get_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_visible", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_is_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_is_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_visible(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_is_visible$descriptor() {
        return gtk_widget_is_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_visible(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_is_visible$handle() {
        return gtk_widget_is_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_visible(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_is_visible(MemorySegment widget) {
        var mh$ = gtk_widget_is_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_is_visible", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_has_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_has_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_has_window(GtkWidget *widget, gboolean has_window)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_has_window$descriptor() {
        return gtk_widget_set_has_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_has_window(GtkWidget *widget, gboolean has_window)
     * }
     */
    public static MethodHandle gtk_widget_set_has_window$handle() {
        return gtk_widget_set_has_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_has_window(GtkWidget *widget, gboolean has_window)
     * }
     */
    public static void gtk_widget_set_has_window(MemorySegment widget, int has_window) {
        var mh$ = gtk_widget_set_has_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_has_window", widget, has_window);
            }
            mh$.invokeExact(widget, has_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_has_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_has_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_has_window(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_has_window$descriptor() {
        return gtk_widget_get_has_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_has_window(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_has_window$handle() {
        return gtk_widget_get_has_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_has_window(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_has_window(MemorySegment widget) {
        var mh$ = gtk_widget_get_has_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_has_window", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_is_toplevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_is_toplevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_toplevel(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_is_toplevel$descriptor() {
        return gtk_widget_is_toplevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_toplevel(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_is_toplevel$handle() {
        return gtk_widget_is_toplevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_toplevel(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_is_toplevel(MemorySegment widget) {
        var mh$ = gtk_widget_is_toplevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_is_toplevel", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_is_drawable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_is_drawable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_drawable(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_is_drawable$descriptor() {
        return gtk_widget_is_drawable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_drawable(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_is_drawable$handle() {
        return gtk_widget_is_drawable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_drawable(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_is_drawable(MemorySegment widget) {
        var mh$ = gtk_widget_is_drawable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_is_drawable", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_realized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_realized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_realized(GtkWidget *widget, gboolean realized)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_realized$descriptor() {
        return gtk_widget_set_realized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_realized(GtkWidget *widget, gboolean realized)
     * }
     */
    public static MethodHandle gtk_widget_set_realized$handle() {
        return gtk_widget_set_realized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_realized(GtkWidget *widget, gboolean realized)
     * }
     */
    public static void gtk_widget_set_realized(MemorySegment widget, int realized) {
        var mh$ = gtk_widget_set_realized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_realized", widget, realized);
            }
            mh$.invokeExact(widget, realized);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_realized {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_realized"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_realized(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_realized$descriptor() {
        return gtk_widget_get_realized.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_realized(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_realized$handle() {
        return gtk_widget_get_realized.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_realized(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_realized(MemorySegment widget) {
        var mh$ = gtk_widget_get_realized.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_realized", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_mapped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_mapped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_mapped(GtkWidget *widget, gboolean mapped)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_mapped$descriptor() {
        return gtk_widget_set_mapped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_mapped(GtkWidget *widget, gboolean mapped)
     * }
     */
    public static MethodHandle gtk_widget_set_mapped$handle() {
        return gtk_widget_set_mapped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_mapped(GtkWidget *widget, gboolean mapped)
     * }
     */
    public static void gtk_widget_set_mapped(MemorySegment widget, int mapped) {
        var mh$ = gtk_widget_set_mapped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_mapped", widget, mapped);
            }
            mh$.invokeExact(widget, mapped);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_mapped {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_mapped"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_mapped(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_mapped$descriptor() {
        return gtk_widget_get_mapped.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_mapped(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_mapped$handle() {
        return gtk_widget_get_mapped.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_mapped(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_mapped(MemorySegment widget) {
        var mh$ = gtk_widget_get_mapped.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_mapped", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_app_paintable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_app_paintable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_app_paintable(GtkWidget *widget, gboolean app_paintable)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_app_paintable$descriptor() {
        return gtk_widget_set_app_paintable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_app_paintable(GtkWidget *widget, gboolean app_paintable)
     * }
     */
    public static MethodHandle gtk_widget_set_app_paintable$handle() {
        return gtk_widget_set_app_paintable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_app_paintable(GtkWidget *widget, gboolean app_paintable)
     * }
     */
    public static void gtk_widget_set_app_paintable(MemorySegment widget, int app_paintable) {
        var mh$ = gtk_widget_set_app_paintable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_app_paintable", widget, app_paintable);
            }
            mh$.invokeExact(widget, app_paintable);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_app_paintable {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_app_paintable"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_app_paintable(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_app_paintable$descriptor() {
        return gtk_widget_get_app_paintable.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_app_paintable(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_app_paintable$handle() {
        return gtk_widget_get_app_paintable.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_app_paintable(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_app_paintable(MemorySegment widget) {
        var mh$ = gtk_widget_get_app_paintable.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_app_paintable", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_double_buffered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_double_buffered"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_double_buffered(GtkWidget *widget, gboolean double_buffered)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_double_buffered$descriptor() {
        return gtk_widget_set_double_buffered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_double_buffered(GtkWidget *widget, gboolean double_buffered)
     * }
     */
    public static MethodHandle gtk_widget_set_double_buffered$handle() {
        return gtk_widget_set_double_buffered.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_double_buffered(GtkWidget *widget, gboolean double_buffered)
     * }
     */
    public static void gtk_widget_set_double_buffered(MemorySegment widget, int double_buffered) {
        var mh$ = gtk_widget_set_double_buffered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_double_buffered", widget, double_buffered);
            }
            mh$.invokeExact(widget, double_buffered);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_double_buffered {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_double_buffered"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_double_buffered(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_double_buffered$descriptor() {
        return gtk_widget_get_double_buffered.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_double_buffered(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_double_buffered$handle() {
        return gtk_widget_get_double_buffered.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_double_buffered(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_double_buffered(MemorySegment widget) {
        var mh$ = gtk_widget_get_double_buffered.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_double_buffered", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_redraw_on_allocate {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_redraw_on_allocate"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_redraw_on_allocate(GtkWidget *widget, gboolean redraw_on_allocate)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_redraw_on_allocate$descriptor() {
        return gtk_widget_set_redraw_on_allocate.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_redraw_on_allocate(GtkWidget *widget, gboolean redraw_on_allocate)
     * }
     */
    public static MethodHandle gtk_widget_set_redraw_on_allocate$handle() {
        return gtk_widget_set_redraw_on_allocate.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_redraw_on_allocate(GtkWidget *widget, gboolean redraw_on_allocate)
     * }
     */
    public static void gtk_widget_set_redraw_on_allocate(MemorySegment widget, int redraw_on_allocate) {
        var mh$ = gtk_widget_set_redraw_on_allocate.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_redraw_on_allocate", widget, redraw_on_allocate);
            }
            mh$.invokeExact(widget, redraw_on_allocate);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_parent(GtkWidget *widget, GtkWidget *parent)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_parent$descriptor() {
        return gtk_widget_set_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_parent(GtkWidget *widget, GtkWidget *parent)
     * }
     */
    public static MethodHandle gtk_widget_set_parent$handle() {
        return gtk_widget_set_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_parent(GtkWidget *widget, GtkWidget *parent)
     * }
     */
    public static void gtk_widget_set_parent(MemorySegment widget, MemorySegment parent) {
        var mh$ = gtk_widget_set_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_parent", widget, parent);
            }
            mh$.invokeExact(widget, parent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_parent {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_parent"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_widget_get_parent(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_parent$descriptor() {
        return gtk_widget_get_parent.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_widget_get_parent(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_parent$handle() {
        return gtk_widget_get_parent.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_widget_get_parent(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_parent(MemorySegment widget) {
        var mh$ = gtk_widget_get_parent.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_parent", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_parent_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_parent_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_parent_window(GtkWidget *widget, GdkWindow *parent_window)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_parent_window$descriptor() {
        return gtk_widget_set_parent_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_parent_window(GtkWidget *widget, GdkWindow *parent_window)
     * }
     */
    public static MethodHandle gtk_widget_set_parent_window$handle() {
        return gtk_widget_set_parent_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_parent_window(GtkWidget *widget, GdkWindow *parent_window)
     * }
     */
    public static void gtk_widget_set_parent_window(MemorySegment widget, MemorySegment parent_window) {
        var mh$ = gtk_widget_set_parent_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_parent_window", widget, parent_window);
            }
            mh$.invokeExact(widget, parent_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_parent_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_parent_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_widget_get_parent_window(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_parent_window$descriptor() {
        return gtk_widget_get_parent_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_widget_get_parent_window(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_parent_window$handle() {
        return gtk_widget_get_parent_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_widget_get_parent_window(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_parent_window(MemorySegment widget) {
        var mh$ = gtk_widget_get_parent_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_parent_window", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_child_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_child_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_child_visible(GtkWidget *widget, gboolean is_visible)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_child_visible$descriptor() {
        return gtk_widget_set_child_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_child_visible(GtkWidget *widget, gboolean is_visible)
     * }
     */
    public static MethodHandle gtk_widget_set_child_visible$handle() {
        return gtk_widget_set_child_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_child_visible(GtkWidget *widget, gboolean is_visible)
     * }
     */
    public static void gtk_widget_set_child_visible(MemorySegment widget, int is_visible) {
        var mh$ = gtk_widget_set_child_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_child_visible", widget, is_visible);
            }
            mh$.invokeExact(widget, is_visible);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_child_visible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_child_visible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_child_visible(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_child_visible$descriptor() {
        return gtk_widget_get_child_visible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_child_visible(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_child_visible$handle() {
        return gtk_widget_get_child_visible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_child_visible(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_child_visible(MemorySegment widget) {
        var mh$ = gtk_widget_get_child_visible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_child_visible", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_window(GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_window$descriptor() {
        return gtk_widget_set_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_window(GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static MethodHandle gtk_widget_set_window$handle() {
        return gtk_widget_set_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_window(GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static void gtk_widget_set_window(MemorySegment widget, MemorySegment window) {
        var mh$ = gtk_widget_set_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_window", widget, window);
            }
            mh$.invokeExact(widget, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_widget_get_window(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_window$descriptor() {
        return gtk_widget_get_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_widget_get_window(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_window$handle() {
        return gtk_widget_get_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_widget_get_window(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_window(MemorySegment widget) {
        var mh$ = gtk_widget_get_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_window", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_register_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_register_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_register_window(GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_widget_register_window$descriptor() {
        return gtk_widget_register_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_register_window(GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static MethodHandle gtk_widget_register_window$handle() {
        return gtk_widget_register_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_register_window(GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static void gtk_widget_register_window(MemorySegment widget, MemorySegment window) {
        var mh$ = gtk_widget_register_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_register_window", widget, window);
            }
            mh$.invokeExact(widget, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_unregister_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_unregister_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_unregister_window(GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_widget_unregister_window$descriptor() {
        return gtk_widget_unregister_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_unregister_window(GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static MethodHandle gtk_widget_unregister_window$handle() {
        return gtk_widget_unregister_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_unregister_window(GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static void gtk_widget_unregister_window(MemorySegment widget, MemorySegment window) {
        var mh$ = gtk_widget_unregister_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_unregister_window", widget, window);
            }
            mh$.invokeExact(widget, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_allocated_width {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_allocated_width"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gtk_widget_get_allocated_width(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_allocated_width$descriptor() {
        return gtk_widget_get_allocated_width.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gtk_widget_get_allocated_width(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_allocated_width$handle() {
        return gtk_widget_get_allocated_width.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gtk_widget_get_allocated_width(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_allocated_width(MemorySegment widget) {
        var mh$ = gtk_widget_get_allocated_width.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_allocated_width", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_allocated_height {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_allocated_height"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gtk_widget_get_allocated_height(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_allocated_height$descriptor() {
        return gtk_widget_get_allocated_height.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gtk_widget_get_allocated_height(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_allocated_height$handle() {
        return gtk_widget_get_allocated_height.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gtk_widget_get_allocated_height(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_allocated_height(MemorySegment widget) {
        var mh$ = gtk_widget_get_allocated_height.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_allocated_height", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_allocated_baseline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_allocated_baseline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern int gtk_widget_get_allocated_baseline(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_allocated_baseline$descriptor() {
        return gtk_widget_get_allocated_baseline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern int gtk_widget_get_allocated_baseline(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_allocated_baseline$handle() {
        return gtk_widget_get_allocated_baseline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern int gtk_widget_get_allocated_baseline(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_allocated_baseline(MemorySegment widget) {
        var mh$ = gtk_widget_get_allocated_baseline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_allocated_baseline", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_allocated_size {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_allocated_size"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_allocated_size(GtkWidget *widget, GtkAllocation *allocation, int *baseline)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_allocated_size$descriptor() {
        return gtk_widget_get_allocated_size.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_allocated_size(GtkWidget *widget, GtkAllocation *allocation, int *baseline)
     * }
     */
    public static MethodHandle gtk_widget_get_allocated_size$handle() {
        return gtk_widget_get_allocated_size.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_allocated_size(GtkWidget *widget, GtkAllocation *allocation, int *baseline)
     * }
     */
    public static void gtk_widget_get_allocated_size(MemorySegment widget, MemorySegment allocation, MemorySegment baseline) {
        var mh$ = gtk_widget_get_allocated_size.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_allocated_size", widget, allocation, baseline);
            }
            mh$.invokeExact(widget, allocation, baseline);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_allocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_allocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_allocation(GtkWidget *widget, GtkAllocation *allocation)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_allocation$descriptor() {
        return gtk_widget_get_allocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_allocation(GtkWidget *widget, GtkAllocation *allocation)
     * }
     */
    public static MethodHandle gtk_widget_get_allocation$handle() {
        return gtk_widget_get_allocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_allocation(GtkWidget *widget, GtkAllocation *allocation)
     * }
     */
    public static void gtk_widget_get_allocation(MemorySegment widget, MemorySegment allocation) {
        var mh$ = gtk_widget_get_allocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_allocation", widget, allocation);
            }
            mh$.invokeExact(widget, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_allocation {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_allocation"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_allocation(GtkWidget *widget, const GtkAllocation *allocation)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_allocation$descriptor() {
        return gtk_widget_set_allocation.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_allocation(GtkWidget *widget, const GtkAllocation *allocation)
     * }
     */
    public static MethodHandle gtk_widget_set_allocation$handle() {
        return gtk_widget_set_allocation.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_allocation(GtkWidget *widget, const GtkAllocation *allocation)
     * }
     */
    public static void gtk_widget_set_allocation(MemorySegment widget, MemorySegment allocation) {
        var mh$ = gtk_widget_set_allocation.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_allocation", widget, allocation);
            }
            mh$.invokeExact(widget, allocation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_clip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_clip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_clip(GtkWidget *widget, const GtkAllocation *clip)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_clip$descriptor() {
        return gtk_widget_set_clip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_clip(GtkWidget *widget, const GtkAllocation *clip)
     * }
     */
    public static MethodHandle gtk_widget_set_clip$handle() {
        return gtk_widget_set_clip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_clip(GtkWidget *widget, const GtkAllocation *clip)
     * }
     */
    public static void gtk_widget_set_clip(MemorySegment widget, MemorySegment clip) {
        var mh$ = gtk_widget_set_clip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_clip", widget, clip);
            }
            mh$.invokeExact(widget, clip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_clip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_clip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_clip(GtkWidget *widget, GtkAllocation *clip)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_clip$descriptor() {
        return gtk_widget_get_clip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_clip(GtkWidget *widget, GtkAllocation *clip)
     * }
     */
    public static MethodHandle gtk_widget_get_clip$handle() {
        return gtk_widget_get_clip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_clip(GtkWidget *widget, GtkAllocation *clip)
     * }
     */
    public static void gtk_widget_get_clip(MemorySegment widget, MemorySegment clip) {
        var mh$ = gtk_widget_get_clip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_clip", widget, clip);
            }
            mh$.invokeExact(widget, clip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_requisition {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_requisition"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_requisition(GtkWidget *widget, GtkRequisition *requisition)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_requisition$descriptor() {
        return gtk_widget_get_requisition.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_requisition(GtkWidget *widget, GtkRequisition *requisition)
     * }
     */
    public static MethodHandle gtk_widget_get_requisition$handle() {
        return gtk_widget_get_requisition.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_requisition(GtkWidget *widget, GtkRequisition *requisition)
     * }
     */
    public static void gtk_widget_get_requisition(MemorySegment widget, MemorySegment requisition) {
        var mh$ = gtk_widget_get_requisition.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_requisition", widget, requisition);
            }
            mh$.invokeExact(widget, requisition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_child_focus {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_child_focus"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_child_focus(GtkWidget *widget, GtkDirectionType direction)
     * }
     */
    public static FunctionDescriptor gtk_widget_child_focus$descriptor() {
        return gtk_widget_child_focus.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_child_focus(GtkWidget *widget, GtkDirectionType direction)
     * }
     */
    public static MethodHandle gtk_widget_child_focus$handle() {
        return gtk_widget_child_focus.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_child_focus(GtkWidget *widget, GtkDirectionType direction)
     * }
     */
    public static int gtk_widget_child_focus(MemorySegment widget, int direction) {
        var mh$ = gtk_widget_child_focus.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_child_focus", widget, direction);
            }
            return (int)mh$.invokeExact(widget, direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_keynav_failed {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_keynav_failed"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_keynav_failed(GtkWidget *widget, GtkDirectionType direction)
     * }
     */
    public static FunctionDescriptor gtk_widget_keynav_failed$descriptor() {
        return gtk_widget_keynav_failed.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_keynav_failed(GtkWidget *widget, GtkDirectionType direction)
     * }
     */
    public static MethodHandle gtk_widget_keynav_failed$handle() {
        return gtk_widget_keynav_failed.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_keynav_failed(GtkWidget *widget, GtkDirectionType direction)
     * }
     */
    public static int gtk_widget_keynav_failed(MemorySegment widget, int direction) {
        var mh$ = gtk_widget_keynav_failed.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_keynav_failed", widget, direction);
            }
            return (int)mh$.invokeExact(widget, direction);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_error_bell {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_error_bell"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_error_bell(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_error_bell$descriptor() {
        return gtk_widget_error_bell.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_error_bell(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_error_bell$handle() {
        return gtk_widget_error_bell.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_error_bell(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_error_bell(MemorySegment widget) {
        var mh$ = gtk_widget_error_bell.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_error_bell", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_size_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_size_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_size_request(GtkWidget *widget, gint width, gint height)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_size_request$descriptor() {
        return gtk_widget_set_size_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_size_request(GtkWidget *widget, gint width, gint height)
     * }
     */
    public static MethodHandle gtk_widget_set_size_request$handle() {
        return gtk_widget_set_size_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_size_request(GtkWidget *widget, gint width, gint height)
     * }
     */
    public static void gtk_widget_set_size_request(MemorySegment widget, int width, int height) {
        var mh$ = gtk_widget_set_size_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_size_request", widget, width, height);
            }
            mh$.invokeExact(widget, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_size_request {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_size_request"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_size_request(GtkWidget *widget, gint *width, gint *height)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_size_request$descriptor() {
        return gtk_widget_get_size_request.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_size_request(GtkWidget *widget, gint *width, gint *height)
     * }
     */
    public static MethodHandle gtk_widget_get_size_request$handle() {
        return gtk_widget_get_size_request.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_size_request(GtkWidget *widget, gint *width, gint *height)
     * }
     */
    public static void gtk_widget_get_size_request(MemorySegment widget, MemorySegment width, MemorySegment height) {
        var mh$ = gtk_widget_get_size_request.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_size_request", widget, width, height);
            }
            mh$.invokeExact(widget, width, height);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_events(GtkWidget *widget, gint events)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_events$descriptor() {
        return gtk_widget_set_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_events(GtkWidget *widget, gint events)
     * }
     */
    public static MethodHandle gtk_widget_set_events$handle() {
        return gtk_widget_set_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_events(GtkWidget *widget, gint events)
     * }
     */
    public static void gtk_widget_set_events(MemorySegment widget, int events) {
        var mh$ = gtk_widget_set_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_events", widget, events);
            }
            mh$.invokeExact(widget, events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_add_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_add_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_add_events(GtkWidget *widget, gint events)
     * }
     */
    public static FunctionDescriptor gtk_widget_add_events$descriptor() {
        return gtk_widget_add_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_add_events(GtkWidget *widget, gint events)
     * }
     */
    public static MethodHandle gtk_widget_add_events$handle() {
        return gtk_widget_add_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_add_events(GtkWidget *widget, gint events)
     * }
     */
    public static void gtk_widget_add_events(MemorySegment widget, int events) {
        var mh$ = gtk_widget_add_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_add_events", widget, events);
            }
            mh$.invokeExact(widget, events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_device_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_device_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_device_events(GtkWidget *widget, GdkDevice *device, GdkEventMask events)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_device_events$descriptor() {
        return gtk_widget_set_device_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_device_events(GtkWidget *widget, GdkDevice *device, GdkEventMask events)
     * }
     */
    public static MethodHandle gtk_widget_set_device_events$handle() {
        return gtk_widget_set_device_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_device_events(GtkWidget *widget, GdkDevice *device, GdkEventMask events)
     * }
     */
    public static void gtk_widget_set_device_events(MemorySegment widget, MemorySegment device, int events) {
        var mh$ = gtk_widget_set_device_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_device_events", widget, device, events);
            }
            mh$.invokeExact(widget, device, events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_add_device_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_add_device_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_add_device_events(GtkWidget *widget, GdkDevice *device, GdkEventMask events)
     * }
     */
    public static FunctionDescriptor gtk_widget_add_device_events$descriptor() {
        return gtk_widget_add_device_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_add_device_events(GtkWidget *widget, GdkDevice *device, GdkEventMask events)
     * }
     */
    public static MethodHandle gtk_widget_add_device_events$handle() {
        return gtk_widget_add_device_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_add_device_events(GtkWidget *widget, GdkDevice *device, GdkEventMask events)
     * }
     */
    public static void gtk_widget_add_device_events(MemorySegment widget, MemorySegment device, int events) {
        var mh$ = gtk_widget_add_device_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_add_device_events", widget, device, events);
            }
            mh$.invokeExact(widget, device, events);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_opacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_DOUBLE
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_opacity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_opacity(GtkWidget *widget, double opacity)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_opacity$descriptor() {
        return gtk_widget_set_opacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_opacity(GtkWidget *widget, double opacity)
     * }
     */
    public static MethodHandle gtk_widget_set_opacity$handle() {
        return gtk_widget_set_opacity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_opacity(GtkWidget *widget, double opacity)
     * }
     */
    public static void gtk_widget_set_opacity(MemorySegment widget, double opacity) {
        var mh$ = gtk_widget_set_opacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_opacity", widget, opacity);
            }
            mh$.invokeExact(widget, opacity);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_opacity {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_DOUBLE,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_opacity"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern double gtk_widget_get_opacity(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_opacity$descriptor() {
        return gtk_widget_get_opacity.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern double gtk_widget_get_opacity(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_opacity$handle() {
        return gtk_widget_get_opacity.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern double gtk_widget_get_opacity(GtkWidget *widget)
     * }
     */
    public static double gtk_widget_get_opacity(MemorySegment widget) {
        var mh$ = gtk_widget_get_opacity.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_opacity", widget);
            }
            return (double)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_device_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_device_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_device_enabled(GtkWidget *widget, GdkDevice *device, gboolean enabled)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_device_enabled$descriptor() {
        return gtk_widget_set_device_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_device_enabled(GtkWidget *widget, GdkDevice *device, gboolean enabled)
     * }
     */
    public static MethodHandle gtk_widget_set_device_enabled$handle() {
        return gtk_widget_set_device_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_device_enabled(GtkWidget *widget, GdkDevice *device, gboolean enabled)
     * }
     */
    public static void gtk_widget_set_device_enabled(MemorySegment widget, MemorySegment device, int enabled) {
        var mh$ = gtk_widget_set_device_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_device_enabled", widget, device, enabled);
            }
            mh$.invokeExact(widget, device, enabled);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_device_enabled {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_device_enabled"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_device_enabled(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_device_enabled$descriptor() {
        return gtk_widget_get_device_enabled.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_device_enabled(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static MethodHandle gtk_widget_get_device_enabled$handle() {
        return gtk_widget_get_device_enabled.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_device_enabled(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static int gtk_widget_get_device_enabled(MemorySegment widget, MemorySegment device) {
        var mh$ = gtk_widget_get_device_enabled.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_device_enabled", widget, device);
            }
            return (int)mh$.invokeExact(widget, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_toplevel {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_toplevel"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_widget_get_toplevel(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_toplevel$descriptor() {
        return gtk_widget_get_toplevel.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_widget_get_toplevel(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_toplevel$handle() {
        return gtk_widget_get_toplevel.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_widget_get_toplevel(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_toplevel(MemorySegment widget) {
        var mh$ = gtk_widget_get_toplevel.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_toplevel", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_ancestor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_ancestor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_widget_get_ancestor(GtkWidget *widget, GType widget_type)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_ancestor$descriptor() {
        return gtk_widget_get_ancestor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidget *gtk_widget_get_ancestor(GtkWidget *widget, GType widget_type)
     * }
     */
    public static MethodHandle gtk_widget_get_ancestor$handle() {
        return gtk_widget_get_ancestor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidget *gtk_widget_get_ancestor(GtkWidget *widget, GType widget_type)
     * }
     */
    public static MemorySegment gtk_widget_get_ancestor(MemorySegment widget, long widget_type) {
        var mh$ = gtk_widget_get_ancestor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_ancestor", widget, widget_type);
            }
            return (MemorySegment)mh$.invokeExact(widget, widget_type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_visual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_visual"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkVisual *gtk_widget_get_visual(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_visual$descriptor() {
        return gtk_widget_get_visual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkVisual *gtk_widget_get_visual(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_visual$handle() {
        return gtk_widget_get_visual.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkVisual *gtk_widget_get_visual(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_visual(MemorySegment widget) {
        var mh$ = gtk_widget_get_visual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_visual", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_visual {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_visual"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_visual(GtkWidget *widget, GdkVisual *visual)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_visual$descriptor() {
        return gtk_widget_set_visual.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_visual(GtkWidget *widget, GdkVisual *visual)
     * }
     */
    public static MethodHandle gtk_widget_set_visual$handle() {
        return gtk_widget_set_visual.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_visual(GtkWidget *widget, GdkVisual *visual)
     * }
     */
    public static void gtk_widget_set_visual(MemorySegment widget, MemorySegment visual) {
        var mh$ = gtk_widget_set_visual.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_visual", widget, visual);
            }
            mh$.invokeExact(widget, visual);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_widget_get_screen(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_screen$descriptor() {
        return gtk_widget_get_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkScreen *gtk_widget_get_screen(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_screen$handle() {
        return gtk_widget_get_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkScreen *gtk_widget_get_screen(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_screen(MemorySegment widget) {
        var mh$ = gtk_widget_get_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_screen", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_has_screen {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_has_screen"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_screen(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_has_screen$descriptor() {
        return gtk_widget_has_screen.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_screen(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_has_screen$handle() {
        return gtk_widget_has_screen.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_has_screen(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_has_screen(MemorySegment widget) {
        var mh$ = gtk_widget_has_screen.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_has_screen", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_scale_factor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_scale_factor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_scale_factor(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_scale_factor$descriptor() {
        return gtk_widget_get_scale_factor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_scale_factor(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_scale_factor$handle() {
        return gtk_widget_get_scale_factor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_get_scale_factor(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_scale_factor(MemorySegment widget) {
        var mh$ = gtk_widget_get_scale_factor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_scale_factor", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_display {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_display"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkDisplay *gtk_widget_get_display(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_display$descriptor() {
        return gtk_widget_get_display.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkDisplay *gtk_widget_get_display(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_display$handle() {
        return gtk_widget_get_display.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkDisplay *gtk_widget_get_display(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_display(MemorySegment widget) {
        var mh$ = gtk_widget_get_display.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_display", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_root_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_root_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_widget_get_root_window(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_root_window$descriptor() {
        return gtk_widget_get_root_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkWindow *gtk_widget_get_root_window(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_root_window$handle() {
        return gtk_widget_get_root_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkWindow *gtk_widget_get_root_window(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_root_window(MemorySegment widget) {
        var mh$ = gtk_widget_get_root_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_root_window", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_settings {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_settings"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkSettings *gtk_widget_get_settings(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_settings$descriptor() {
        return gtk_widget_get_settings.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkSettings *gtk_widget_get_settings(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_settings$handle() {
        return gtk_widget_get_settings.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkSettings *gtk_widget_get_settings(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_settings(MemorySegment widget) {
        var mh$ = gtk_widget_get_settings.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_settings", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_clipboard {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_clipboard"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_widget_get_clipboard(GtkWidget *widget, GdkAtom selection)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_clipboard$descriptor() {
        return gtk_widget_get_clipboard.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_widget_get_clipboard(GtkWidget *widget, GdkAtom selection)
     * }
     */
    public static MethodHandle gtk_widget_get_clipboard$handle() {
        return gtk_widget_get_clipboard.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkClipboard *gtk_widget_get_clipboard(GtkWidget *widget, GdkAtom selection)
     * }
     */
    public static MemorySegment gtk_widget_get_clipboard(MemorySegment widget, MemorySegment selection) {
        var mh$ = gtk_widget_get_clipboard.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_clipboard", widget, selection);
            }
            return (MemorySegment)mh$.invokeExact(widget, selection);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_hexpand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_hexpand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_hexpand(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_hexpand$descriptor() {
        return gtk_widget_get_hexpand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_hexpand(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_hexpand$handle() {
        return gtk_widget_get_hexpand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_hexpand(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_hexpand(MemorySegment widget) {
        var mh$ = gtk_widget_get_hexpand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_hexpand", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_hexpand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_hexpand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_hexpand(GtkWidget *widget, gboolean expand)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_hexpand$descriptor() {
        return gtk_widget_set_hexpand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_hexpand(GtkWidget *widget, gboolean expand)
     * }
     */
    public static MethodHandle gtk_widget_set_hexpand$handle() {
        return gtk_widget_set_hexpand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_hexpand(GtkWidget *widget, gboolean expand)
     * }
     */
    public static void gtk_widget_set_hexpand(MemorySegment widget, int expand) {
        var mh$ = gtk_widget_set_hexpand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_hexpand", widget, expand);
            }
            mh$.invokeExact(widget, expand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_hexpand_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_hexpand_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_hexpand_set(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_hexpand_set$descriptor() {
        return gtk_widget_get_hexpand_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_hexpand_set(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_hexpand_set$handle() {
        return gtk_widget_get_hexpand_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_hexpand_set(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_hexpand_set(MemorySegment widget) {
        var mh$ = gtk_widget_get_hexpand_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_hexpand_set", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_hexpand_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_hexpand_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_hexpand_set(GtkWidget *widget, gboolean set)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_hexpand_set$descriptor() {
        return gtk_widget_set_hexpand_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_hexpand_set(GtkWidget *widget, gboolean set)
     * }
     */
    public static MethodHandle gtk_widget_set_hexpand_set$handle() {
        return gtk_widget_set_hexpand_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_hexpand_set(GtkWidget *widget, gboolean set)
     * }
     */
    public static void gtk_widget_set_hexpand_set(MemorySegment widget, int set) {
        var mh$ = gtk_widget_set_hexpand_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_hexpand_set", widget, set);
            }
            mh$.invokeExact(widget, set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_vexpand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_vexpand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_vexpand(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_vexpand$descriptor() {
        return gtk_widget_get_vexpand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_vexpand(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_vexpand$handle() {
        return gtk_widget_get_vexpand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_vexpand(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_vexpand(MemorySegment widget) {
        var mh$ = gtk_widget_get_vexpand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_vexpand", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_vexpand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_vexpand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_vexpand(GtkWidget *widget, gboolean expand)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_vexpand$descriptor() {
        return gtk_widget_set_vexpand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_vexpand(GtkWidget *widget, gboolean expand)
     * }
     */
    public static MethodHandle gtk_widget_set_vexpand$handle() {
        return gtk_widget_set_vexpand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_vexpand(GtkWidget *widget, gboolean expand)
     * }
     */
    public static void gtk_widget_set_vexpand(MemorySegment widget, int expand) {
        var mh$ = gtk_widget_set_vexpand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_vexpand", widget, expand);
            }
            mh$.invokeExact(widget, expand);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_vexpand_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_vexpand_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_vexpand_set(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_vexpand_set$descriptor() {
        return gtk_widget_get_vexpand_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_vexpand_set(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_vexpand_set$handle() {
        return gtk_widget_get_vexpand_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_vexpand_set(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_vexpand_set(MemorySegment widget) {
        var mh$ = gtk_widget_get_vexpand_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_vexpand_set", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_vexpand_set {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_vexpand_set"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_vexpand_set(GtkWidget *widget, gboolean set)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_vexpand_set$descriptor() {
        return gtk_widget_set_vexpand_set.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_vexpand_set(GtkWidget *widget, gboolean set)
     * }
     */
    public static MethodHandle gtk_widget_set_vexpand_set$handle() {
        return gtk_widget_set_vexpand_set.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_vexpand_set(GtkWidget *widget, gboolean set)
     * }
     */
    public static void gtk_widget_set_vexpand_set(MemorySegment widget, int set) {
        var mh$ = gtk_widget_set_vexpand_set.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_vexpand_set", widget, set);
            }
            mh$.invokeExact(widget, set);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_queue_compute_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_queue_compute_expand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_compute_expand(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_queue_compute_expand$descriptor() {
        return gtk_widget_queue_compute_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_queue_compute_expand(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_queue_compute_expand$handle() {
        return gtk_widget_queue_compute_expand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_queue_compute_expand(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_queue_compute_expand(MemorySegment widget) {
        var mh$ = gtk_widget_queue_compute_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_queue_compute_expand", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_compute_expand {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_compute_expand"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_compute_expand(GtkWidget *widget, GtkOrientation orientation)
     * }
     */
    public static FunctionDescriptor gtk_widget_compute_expand$descriptor() {
        return gtk_widget_compute_expand.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_compute_expand(GtkWidget *widget, GtkOrientation orientation)
     * }
     */
    public static MethodHandle gtk_widget_compute_expand$handle() {
        return gtk_widget_compute_expand.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_compute_expand(GtkWidget *widget, GtkOrientation orientation)
     * }
     */
    public static int gtk_widget_compute_expand(MemorySegment widget, int orientation) {
        var mh$ = gtk_widget_compute_expand.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_compute_expand", widget, orientation);
            }
            return (int)mh$.invokeExact(widget, orientation);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_support_multidevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_support_multidevice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_support_multidevice(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_support_multidevice$descriptor() {
        return gtk_widget_get_support_multidevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_support_multidevice(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_support_multidevice$handle() {
        return gtk_widget_get_support_multidevice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_support_multidevice(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_support_multidevice(MemorySegment widget) {
        var mh$ = gtk_widget_get_support_multidevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_support_multidevice", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_support_multidevice {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_support_multidevice"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_support_multidevice(GtkWidget *widget, gboolean support_multidevice)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_support_multidevice$descriptor() {
        return gtk_widget_set_support_multidevice.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_support_multidevice(GtkWidget *widget, gboolean support_multidevice)
     * }
     */
    public static MethodHandle gtk_widget_set_support_multidevice$handle() {
        return gtk_widget_set_support_multidevice.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_support_multidevice(GtkWidget *widget, gboolean support_multidevice)
     * }
     */
    public static void gtk_widget_set_support_multidevice(MemorySegment widget, int support_multidevice) {
        var mh$ = gtk_widget_set_support_multidevice.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_support_multidevice", widget, support_multidevice);
            }
            mh$.invokeExact(widget, support_multidevice);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_set_accessible_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_set_accessible_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_accessible_type(GtkWidgetClass *widget_class, GType type)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_set_accessible_type$descriptor() {
        return gtk_widget_class_set_accessible_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_accessible_type(GtkWidgetClass *widget_class, GType type)
     * }
     */
    public static MethodHandle gtk_widget_class_set_accessible_type$handle() {
        return gtk_widget_class_set_accessible_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_accessible_type(GtkWidgetClass *widget_class, GType type)
     * }
     */
    public static void gtk_widget_class_set_accessible_type(MemorySegment widget_class, long type) {
        var mh$ = gtk_widget_class_set_accessible_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_set_accessible_type", widget_class, type);
            }
            mh$.invokeExact(widget_class, type);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_set_accessible_role {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_set_accessible_role"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_accessible_role(GtkWidgetClass *widget_class, AtkRole role)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_set_accessible_role$descriptor() {
        return gtk_widget_class_set_accessible_role.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_accessible_role(GtkWidgetClass *widget_class, AtkRole role)
     * }
     */
    public static MethodHandle gtk_widget_class_set_accessible_role$handle() {
        return gtk_widget_class_set_accessible_role.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_accessible_role(GtkWidgetClass *widget_class, AtkRole role)
     * }
     */
    public static void gtk_widget_class_set_accessible_role(MemorySegment widget_class, int role) {
        var mh$ = gtk_widget_class_set_accessible_role.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_set_accessible_role", widget_class, role);
            }
            mh$.invokeExact(widget_class, role);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_accessible {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_accessible"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern AtkObject *gtk_widget_get_accessible(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_accessible$descriptor() {
        return gtk_widget_get_accessible.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern AtkObject *gtk_widget_get_accessible(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_accessible$handle() {
        return gtk_widget_get_accessible.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern AtkObject *gtk_widget_get_accessible(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_accessible(MemorySegment widget) {
        var mh$ = gtk_widget_get_accessible.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_accessible", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_halign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_halign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAlign gtk_widget_get_halign(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_halign$descriptor() {
        return gtk_widget_get_halign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAlign gtk_widget_get_halign(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_halign$handle() {
        return gtk_widget_get_halign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAlign gtk_widget_get_halign(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_halign(MemorySegment widget) {
        var mh$ = gtk_widget_get_halign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_halign", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_halign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_halign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_halign(GtkWidget *widget, GtkAlign align)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_halign$descriptor() {
        return gtk_widget_set_halign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_halign(GtkWidget *widget, GtkAlign align)
     * }
     */
    public static MethodHandle gtk_widget_set_halign$handle() {
        return gtk_widget_set_halign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_halign(GtkWidget *widget, GtkAlign align)
     * }
     */
    public static void gtk_widget_set_halign(MemorySegment widget, int align) {
        var mh$ = gtk_widget_set_halign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_halign", widget, align);
            }
            mh$.invokeExact(widget, align);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_valign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_valign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAlign gtk_widget_get_valign(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_valign$descriptor() {
        return gtk_widget_get_valign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAlign gtk_widget_get_valign(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_valign$handle() {
        return gtk_widget_get_valign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAlign gtk_widget_get_valign(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_valign(MemorySegment widget) {
        var mh$ = gtk_widget_get_valign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_valign", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_valign_with_baseline {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_valign_with_baseline"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkAlign gtk_widget_get_valign_with_baseline(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_valign_with_baseline$descriptor() {
        return gtk_widget_get_valign_with_baseline.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkAlign gtk_widget_get_valign_with_baseline(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_valign_with_baseline$handle() {
        return gtk_widget_get_valign_with_baseline.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkAlign gtk_widget_get_valign_with_baseline(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_valign_with_baseline(MemorySegment widget) {
        var mh$ = gtk_widget_get_valign_with_baseline.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_valign_with_baseline", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_valign {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_valign"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_valign(GtkWidget *widget, GtkAlign align)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_valign$descriptor() {
        return gtk_widget_set_valign.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_valign(GtkWidget *widget, GtkAlign align)
     * }
     */
    public static MethodHandle gtk_widget_set_valign$handle() {
        return gtk_widget_set_valign.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_valign(GtkWidget *widget, GtkAlign align)
     * }
     */
    public static void gtk_widget_set_valign(MemorySegment widget, int align) {
        var mh$ = gtk_widget_set_valign.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_valign", widget, align);
            }
            mh$.invokeExact(widget, align);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_margin_left {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_margin_left"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_left(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_margin_left$descriptor() {
        return gtk_widget_get_margin_left.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_left(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_margin_left$handle() {
        return gtk_widget_get_margin_left.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_left(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_margin_left(MemorySegment widget) {
        var mh$ = gtk_widget_get_margin_left.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_margin_left", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_margin_left {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_margin_left"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_left(GtkWidget *widget, gint margin)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_margin_left$descriptor() {
        return gtk_widget_set_margin_left.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_left(GtkWidget *widget, gint margin)
     * }
     */
    public static MethodHandle gtk_widget_set_margin_left$handle() {
        return gtk_widget_set_margin_left.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_left(GtkWidget *widget, gint margin)
     * }
     */
    public static void gtk_widget_set_margin_left(MemorySegment widget, int margin) {
        var mh$ = gtk_widget_set_margin_left.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_margin_left", widget, margin);
            }
            mh$.invokeExact(widget, margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_margin_right {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_margin_right"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_right(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_margin_right$descriptor() {
        return gtk_widget_get_margin_right.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_right(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_margin_right$handle() {
        return gtk_widget_get_margin_right.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_right(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_margin_right(MemorySegment widget) {
        var mh$ = gtk_widget_get_margin_right.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_margin_right", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_margin_right {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_margin_right"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_right(GtkWidget *widget, gint margin)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_margin_right$descriptor() {
        return gtk_widget_set_margin_right.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_right(GtkWidget *widget, gint margin)
     * }
     */
    public static MethodHandle gtk_widget_set_margin_right$handle() {
        return gtk_widget_set_margin_right.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_right(GtkWidget *widget, gint margin)
     * }
     */
    public static void gtk_widget_set_margin_right(MemorySegment widget, int margin) {
        var mh$ = gtk_widget_set_margin_right.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_margin_right", widget, margin);
            }
            mh$.invokeExact(widget, margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_margin_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_margin_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_start(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_margin_start$descriptor() {
        return gtk_widget_get_margin_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_start(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_margin_start$handle() {
        return gtk_widget_get_margin_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_start(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_margin_start(MemorySegment widget) {
        var mh$ = gtk_widget_get_margin_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_margin_start", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_margin_start {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_margin_start"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_start(GtkWidget *widget, gint margin)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_margin_start$descriptor() {
        return gtk_widget_set_margin_start.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_start(GtkWidget *widget, gint margin)
     * }
     */
    public static MethodHandle gtk_widget_set_margin_start$handle() {
        return gtk_widget_set_margin_start.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_start(GtkWidget *widget, gint margin)
     * }
     */
    public static void gtk_widget_set_margin_start(MemorySegment widget, int margin) {
        var mh$ = gtk_widget_set_margin_start.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_margin_start", widget, margin);
            }
            mh$.invokeExact(widget, margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_margin_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_margin_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_end(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_margin_end$descriptor() {
        return gtk_widget_get_margin_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_end(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_margin_end$handle() {
        return gtk_widget_get_margin_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_end(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_margin_end(MemorySegment widget) {
        var mh$ = gtk_widget_get_margin_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_margin_end", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_margin_end {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_margin_end"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_end(GtkWidget *widget, gint margin)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_margin_end$descriptor() {
        return gtk_widget_set_margin_end.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_end(GtkWidget *widget, gint margin)
     * }
     */
    public static MethodHandle gtk_widget_set_margin_end$handle() {
        return gtk_widget_set_margin_end.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_end(GtkWidget *widget, gint margin)
     * }
     */
    public static void gtk_widget_set_margin_end(MemorySegment widget, int margin) {
        var mh$ = gtk_widget_set_margin_end.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_margin_end", widget, margin);
            }
            mh$.invokeExact(widget, margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_margin_top {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_margin_top"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_top(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_margin_top$descriptor() {
        return gtk_widget_get_margin_top.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_top(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_margin_top$handle() {
        return gtk_widget_get_margin_top.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_top(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_margin_top(MemorySegment widget) {
        var mh$ = gtk_widget_get_margin_top.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_margin_top", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_margin_top {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_margin_top"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_top(GtkWidget *widget, gint margin)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_margin_top$descriptor() {
        return gtk_widget_set_margin_top.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_top(GtkWidget *widget, gint margin)
     * }
     */
    public static MethodHandle gtk_widget_set_margin_top$handle() {
        return gtk_widget_set_margin_top.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_top(GtkWidget *widget, gint margin)
     * }
     */
    public static void gtk_widget_set_margin_top(MemorySegment widget, int margin) {
        var mh$ = gtk_widget_set_margin_top.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_margin_top", widget, margin);
            }
            mh$.invokeExact(widget, margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_margin_bottom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_margin_bottom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_bottom(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_margin_bottom$descriptor() {
        return gtk_widget_get_margin_bottom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_bottom(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_margin_bottom$handle() {
        return gtk_widget_get_margin_bottom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_get_margin_bottom(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_margin_bottom(MemorySegment widget) {
        var mh$ = gtk_widget_get_margin_bottom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_margin_bottom", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_margin_bottom {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_margin_bottom"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_bottom(GtkWidget *widget, gint margin)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_margin_bottom$descriptor() {
        return gtk_widget_set_margin_bottom.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_bottom(GtkWidget *widget, gint margin)
     * }
     */
    public static MethodHandle gtk_widget_set_margin_bottom$handle() {
        return gtk_widget_set_margin_bottom.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_margin_bottom(GtkWidget *widget, gint margin)
     * }
     */
    public static void gtk_widget_set_margin_bottom(MemorySegment widget, int margin) {
        var mh$ = gtk_widget_set_margin_bottom.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_margin_bottom", widget, margin);
            }
            mh$.invokeExact(widget, margin);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_events(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_events$descriptor() {
        return gtk_widget_get_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gint gtk_widget_get_events(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_events$handle() {
        return gtk_widget_get_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gint gtk_widget_get_events(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_events(MemorySegment widget) {
        var mh$ = gtk_widget_get_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_events", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_device_events {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_device_events"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkEventMask gtk_widget_get_device_events(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_device_events$descriptor() {
        return gtk_widget_get_device_events.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkEventMask gtk_widget_get_device_events(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static MethodHandle gtk_widget_get_device_events$handle() {
        return gtk_widget_get_device_events.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkEventMask gtk_widget_get_device_events(GtkWidget *widget, GdkDevice *device)
     * }
     */
    public static int gtk_widget_get_device_events(MemorySegment widget, MemorySegment device) {
        var mh$ = gtk_widget_get_device_events.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_device_events", widget, device);
            }
            return (int)mh$.invokeExact(widget, device);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_pointer {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_pointer"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_pointer(GtkWidget *widget, gint *x, gint *y)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_pointer$descriptor() {
        return gtk_widget_get_pointer.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_get_pointer(GtkWidget *widget, gint *x, gint *y)
     * }
     */
    public static MethodHandle gtk_widget_get_pointer$handle() {
        return gtk_widget_get_pointer.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_get_pointer(GtkWidget *widget, gint *x, gint *y)
     * }
     */
    public static void gtk_widget_get_pointer(MemorySegment widget, MemorySegment x, MemorySegment y) {
        var mh$ = gtk_widget_get_pointer.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_pointer", widget, x, y);
            }
            mh$.invokeExact(widget, x, y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_is_ancestor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_is_ancestor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_ancestor(GtkWidget *widget, GtkWidget *ancestor)
     * }
     */
    public static FunctionDescriptor gtk_widget_is_ancestor$descriptor() {
        return gtk_widget_is_ancestor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_ancestor(GtkWidget *widget, GtkWidget *ancestor)
     * }
     */
    public static MethodHandle gtk_widget_is_ancestor$handle() {
        return gtk_widget_is_ancestor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_ancestor(GtkWidget *widget, GtkWidget *ancestor)
     * }
     */
    public static int gtk_widget_is_ancestor(MemorySegment widget, MemorySegment ancestor) {
        var mh$ = gtk_widget_is_ancestor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_is_ancestor", widget, ancestor);
            }
            return (int)mh$.invokeExact(widget, ancestor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_translate_coordinates {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_translate_coordinates"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_translate_coordinates(GtkWidget *src_widget, GtkWidget *dest_widget, gint src_x, gint src_y, gint *dest_x, gint *dest_y)
     * }
     */
    public static FunctionDescriptor gtk_widget_translate_coordinates$descriptor() {
        return gtk_widget_translate_coordinates.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_translate_coordinates(GtkWidget *src_widget, GtkWidget *dest_widget, gint src_x, gint src_y, gint *dest_x, gint *dest_y)
     * }
     */
    public static MethodHandle gtk_widget_translate_coordinates$handle() {
        return gtk_widget_translate_coordinates.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_translate_coordinates(GtkWidget *src_widget, GtkWidget *dest_widget, gint src_x, gint src_y, gint *dest_x, gint *dest_y)
     * }
     */
    public static int gtk_widget_translate_coordinates(MemorySegment src_widget, MemorySegment dest_widget, int src_x, int src_y, MemorySegment dest_x, MemorySegment dest_y) {
        var mh$ = gtk_widget_translate_coordinates.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_translate_coordinates", src_widget, dest_widget, src_x, src_y, dest_x, dest_y);
            }
            return (int)mh$.invokeExact(src_widget, dest_widget, src_x, src_y, dest_x, dest_y);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_hide_on_delete {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_hide_on_delete"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_hide_on_delete(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_hide_on_delete$descriptor() {
        return gtk_widget_hide_on_delete.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_hide_on_delete(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_hide_on_delete$handle() {
        return gtk_widget_hide_on_delete.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_hide_on_delete(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_hide_on_delete(MemorySegment widget) {
        var mh$ = gtk_widget_hide_on_delete.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_hide_on_delete", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_override_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_override_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_override_color(GtkWidget *widget, GtkStateFlags state, const GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_widget_override_color$descriptor() {
        return gtk_widget_override_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_override_color(GtkWidget *widget, GtkStateFlags state, const GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_widget_override_color$handle() {
        return gtk_widget_override_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_override_color(GtkWidget *widget, GtkStateFlags state, const GdkRGBA *color)
     * }
     */
    public static void gtk_widget_override_color(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_override_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_override_color", widget, state, color);
            }
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_override_background_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_override_background_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_override_background_color(GtkWidget *widget, GtkStateFlags state, const GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_widget_override_background_color$descriptor() {
        return gtk_widget_override_background_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_override_background_color(GtkWidget *widget, GtkStateFlags state, const GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_widget_override_background_color$handle() {
        return gtk_widget_override_background_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_override_background_color(GtkWidget *widget, GtkStateFlags state, const GdkRGBA *color)
     * }
     */
    public static void gtk_widget_override_background_color(MemorySegment widget, int state, MemorySegment color) {
        var mh$ = gtk_widget_override_background_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_override_background_color", widget, state, color);
            }
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_override_font {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_override_font"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_override_font(GtkWidget *widget, const PangoFontDescription *font_desc)
     * }
     */
    public static FunctionDescriptor gtk_widget_override_font$descriptor() {
        return gtk_widget_override_font.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_override_font(GtkWidget *widget, const PangoFontDescription *font_desc)
     * }
     */
    public static MethodHandle gtk_widget_override_font$handle() {
        return gtk_widget_override_font.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_override_font(GtkWidget *widget, const PangoFontDescription *font_desc)
     * }
     */
    public static void gtk_widget_override_font(MemorySegment widget, MemorySegment font_desc) {
        var mh$ = gtk_widget_override_font.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_override_font", widget, font_desc);
            }
            mh$.invokeExact(widget, font_desc);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_override_symbolic_color {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_override_symbolic_color"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_override_symbolic_color(GtkWidget *widget, const gchar *name, const GdkRGBA *color)
     * }
     */
    public static FunctionDescriptor gtk_widget_override_symbolic_color$descriptor() {
        return gtk_widget_override_symbolic_color.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_override_symbolic_color(GtkWidget *widget, const gchar *name, const GdkRGBA *color)
     * }
     */
    public static MethodHandle gtk_widget_override_symbolic_color$handle() {
        return gtk_widget_override_symbolic_color.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_override_symbolic_color(GtkWidget *widget, const gchar *name, const GdkRGBA *color)
     * }
     */
    public static void gtk_widget_override_symbolic_color(MemorySegment widget, MemorySegment name, MemorySegment color) {
        var mh$ = gtk_widget_override_symbolic_color.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_override_symbolic_color", widget, name, color);
            }
            mh$.invokeExact(widget, name, color);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_override_cursor {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_override_cursor"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_override_cursor(GtkWidget *widget, const GdkRGBA *cursor, const GdkRGBA *secondary_cursor)
     * }
     */
    public static FunctionDescriptor gtk_widget_override_cursor$descriptor() {
        return gtk_widget_override_cursor.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_override_cursor(GtkWidget *widget, const GdkRGBA *cursor, const GdkRGBA *secondary_cursor)
     * }
     */
    public static MethodHandle gtk_widget_override_cursor$handle() {
        return gtk_widget_override_cursor.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_override_cursor(GtkWidget *widget, const GdkRGBA *cursor, const GdkRGBA *secondary_cursor)
     * }
     */
    public static void gtk_widget_override_cursor(MemorySegment widget, MemorySegment cursor, MemorySegment secondary_cursor) {
        var mh$ = gtk_widget_override_cursor.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_override_cursor", widget, cursor, secondary_cursor);
            }
            mh$.invokeExact(widget, cursor, secondary_cursor);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_reset_style {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_reset_style"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_reset_style(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_reset_style$descriptor() {
        return gtk_widget_reset_style.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_reset_style(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_reset_style$handle() {
        return gtk_widget_reset_style.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_reset_style(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_reset_style(MemorySegment widget) {
        var mh$ = gtk_widget_reset_style.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_reset_style", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_create_pango_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_create_pango_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *gtk_widget_create_pango_context(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_create_pango_context$descriptor() {
        return gtk_widget_create_pango_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *gtk_widget_create_pango_context(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_create_pango_context$handle() {
        return gtk_widget_create_pango_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *gtk_widget_create_pango_context(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_create_pango_context(MemorySegment widget) {
        var mh$ = gtk_widget_create_pango_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_create_pango_context", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_pango_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_pango_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoContext *gtk_widget_get_pango_context(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_pango_context$descriptor() {
        return gtk_widget_get_pango_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoContext *gtk_widget_get_pango_context(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_pango_context$handle() {
        return gtk_widget_get_pango_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoContext *gtk_widget_get_pango_context(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_pango_context(MemorySegment widget) {
        var mh$ = gtk_widget_get_pango_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_pango_context", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_font_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_font_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_font_options(GtkWidget *widget, const cairo_font_options_t *options)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_font_options$descriptor() {
        return gtk_widget_set_font_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_font_options(GtkWidget *widget, const cairo_font_options_t *options)
     * }
     */
    public static MethodHandle gtk_widget_set_font_options$handle() {
        return gtk_widget_set_font_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_font_options(GtkWidget *widget, const cairo_font_options_t *options)
     * }
     */
    public static void gtk_widget_set_font_options(MemorySegment widget, MemorySegment options) {
        var mh$ = gtk_widget_set_font_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_font_options", widget, options);
            }
            mh$.invokeExact(widget, options);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_font_options {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_font_options"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const cairo_font_options_t *gtk_widget_get_font_options(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_font_options$descriptor() {
        return gtk_widget_get_font_options.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const cairo_font_options_t *gtk_widget_get_font_options(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_font_options$handle() {
        return gtk_widget_get_font_options.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const cairo_font_options_t *gtk_widget_get_font_options(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_font_options(MemorySegment widget) {
        var mh$ = gtk_widget_get_font_options.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_font_options", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_create_pango_layout {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_create_pango_layout"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoLayout *gtk_widget_create_pango_layout(GtkWidget *widget, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_widget_create_pango_layout$descriptor() {
        return gtk_widget_create_pango_layout.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoLayout *gtk_widget_create_pango_layout(GtkWidget *widget, const gchar *text)
     * }
     */
    public static MethodHandle gtk_widget_create_pango_layout$handle() {
        return gtk_widget_create_pango_layout.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoLayout *gtk_widget_create_pango_layout(GtkWidget *widget, const gchar *text)
     * }
     */
    public static MemorySegment gtk_widget_create_pango_layout(MemorySegment widget, MemorySegment text) {
        var mh$ = gtk_widget_create_pango_layout.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_create_pango_layout", widget, text);
            }
            return (MemorySegment)mh$.invokeExact(widget, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_render_icon_pixbuf {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_render_icon_pixbuf"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_widget_render_icon_pixbuf(GtkWidget *widget, const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static FunctionDescriptor gtk_widget_render_icon_pixbuf$descriptor() {
        return gtk_widget_render_icon_pixbuf.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_widget_render_icon_pixbuf(GtkWidget *widget, const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static MethodHandle gtk_widget_render_icon_pixbuf$handle() {
        return gtk_widget_render_icon_pixbuf.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkPixbuf *gtk_widget_render_icon_pixbuf(GtkWidget *widget, const gchar *stock_id, GtkIconSize size)
     * }
     */
    public static MemorySegment gtk_widget_render_icon_pixbuf(MemorySegment widget, MemorySegment stock_id, int size) {
        var mh$ = gtk_widget_render_icon_pixbuf.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_render_icon_pixbuf", widget, stock_id, size);
            }
            return (MemorySegment)mh$.invokeExact(widget, stock_id, size);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_composite_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_composite_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_composite_name(GtkWidget *widget, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_composite_name$descriptor() {
        return gtk_widget_set_composite_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_composite_name(GtkWidget *widget, const gchar *name)
     * }
     */
    public static MethodHandle gtk_widget_set_composite_name$handle() {
        return gtk_widget_set_composite_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_composite_name(GtkWidget *widget, const gchar *name)
     * }
     */
    public static void gtk_widget_set_composite_name(MemorySegment widget, MemorySegment name) {
        var mh$ = gtk_widget_set_composite_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_composite_name", widget, name);
            }
            mh$.invokeExact(widget, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_composite_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_composite_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_widget_get_composite_name(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_composite_name$descriptor() {
        return gtk_widget_get_composite_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_widget_get_composite_name(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_composite_name$handle() {
        return gtk_widget_get_composite_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_widget_get_composite_name(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_composite_name(MemorySegment widget) {
        var mh$ = gtk_widget_get_composite_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_composite_name", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_push_composite_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_push_composite_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_push_composite_child()
     * }
     */
    public static FunctionDescriptor gtk_widget_push_composite_child$descriptor() {
        return gtk_widget_push_composite_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_push_composite_child()
     * }
     */
    public static MethodHandle gtk_widget_push_composite_child$handle() {
        return gtk_widget_push_composite_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_push_composite_child()
     * }
     */
    public static void gtk_widget_push_composite_child() {
        var mh$ = gtk_widget_push_composite_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_push_composite_child");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_pop_composite_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_pop_composite_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_pop_composite_child()
     * }
     */
    public static FunctionDescriptor gtk_widget_pop_composite_child$descriptor() {
        return gtk_widget_pop_composite_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_pop_composite_child()
     * }
     */
    public static MethodHandle gtk_widget_pop_composite_child$handle() {
        return gtk_widget_pop_composite_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_pop_composite_child()
     * }
     */
    public static void gtk_widget_pop_composite_child() {
        var mh$ = gtk_widget_pop_composite_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_pop_composite_child");
            }
            mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_install_style_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_install_style_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_install_style_property(GtkWidgetClass *klass, GParamSpec *pspec)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_install_style_property$descriptor() {
        return gtk_widget_class_install_style_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_install_style_property(GtkWidgetClass *klass, GParamSpec *pspec)
     * }
     */
    public static MethodHandle gtk_widget_class_install_style_property$handle() {
        return gtk_widget_class_install_style_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_install_style_property(GtkWidgetClass *klass, GParamSpec *pspec)
     * }
     */
    public static void gtk_widget_class_install_style_property(MemorySegment klass, MemorySegment pspec) {
        var mh$ = gtk_widget_class_install_style_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_install_style_property", klass, pspec);
            }
            mh$.invokeExact(klass, pspec);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_install_style_property_parser {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_install_style_property_parser"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_install_style_property_parser(GtkWidgetClass *klass, GParamSpec *pspec, GtkRcPropertyParser parser)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_install_style_property_parser$descriptor() {
        return gtk_widget_class_install_style_property_parser.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_install_style_property_parser(GtkWidgetClass *klass, GParamSpec *pspec, GtkRcPropertyParser parser)
     * }
     */
    public static MethodHandle gtk_widget_class_install_style_property_parser$handle() {
        return gtk_widget_class_install_style_property_parser.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_install_style_property_parser(GtkWidgetClass *klass, GParamSpec *pspec, GtkRcPropertyParser parser)
     * }
     */
    public static void gtk_widget_class_install_style_property_parser(MemorySegment klass, MemorySegment pspec, MemorySegment parser) {
        var mh$ = gtk_widget_class_install_style_property_parser.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_install_style_property_parser", klass, pspec, parser);
            }
            mh$.invokeExact(klass, pspec, parser);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_find_style_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_find_style_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec *gtk_widget_class_find_style_property(GtkWidgetClass *klass, const gchar *property_name)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_find_style_property$descriptor() {
        return gtk_widget_class_find_style_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec *gtk_widget_class_find_style_property(GtkWidgetClass *klass, const gchar *property_name)
     * }
     */
    public static MethodHandle gtk_widget_class_find_style_property$handle() {
        return gtk_widget_class_find_style_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec *gtk_widget_class_find_style_property(GtkWidgetClass *klass, const gchar *property_name)
     * }
     */
    public static MemorySegment gtk_widget_class_find_style_property(MemorySegment klass, MemorySegment property_name) {
        var mh$ = gtk_widget_class_find_style_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_find_style_property", klass, property_name);
            }
            return (MemorySegment)mh$.invokeExact(klass, property_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_list_style_properties {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_list_style_properties"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GParamSpec **gtk_widget_class_list_style_properties(GtkWidgetClass *klass, guint *n_properties)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_list_style_properties$descriptor() {
        return gtk_widget_class_list_style_properties.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GParamSpec **gtk_widget_class_list_style_properties(GtkWidgetClass *klass, guint *n_properties)
     * }
     */
    public static MethodHandle gtk_widget_class_list_style_properties$handle() {
        return gtk_widget_class_list_style_properties.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GParamSpec **gtk_widget_class_list_style_properties(GtkWidgetClass *klass, guint *n_properties)
     * }
     */
    public static MemorySegment gtk_widget_class_list_style_properties(MemorySegment klass, MemorySegment n_properties) {
        var mh$ = gtk_widget_class_list_style_properties.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_list_style_properties", klass, n_properties);
            }
            return (MemorySegment)mh$.invokeExact(klass, n_properties);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_style_get_property {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_style_get_property"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_style_get_property(GtkWidget *widget, const gchar *property_name, GValue *value)
     * }
     */
    public static FunctionDescriptor gtk_widget_style_get_property$descriptor() {
        return gtk_widget_style_get_property.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_style_get_property(GtkWidget *widget, const gchar *property_name, GValue *value)
     * }
     */
    public static MethodHandle gtk_widget_style_get_property$handle() {
        return gtk_widget_style_get_property.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_style_get_property(GtkWidget *widget, const gchar *property_name, GValue *value)
     * }
     */
    public static void gtk_widget_style_get_property(MemorySegment widget, MemorySegment property_name, MemorySegment value) {
        var mh$ = gtk_widget_style_get_property.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_style_get_property", widget, property_name, value);
            }
            mh$.invokeExact(widget, property_name, value);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    /**
     * Variadic invoker class for:
     * {@snippet lang=c :
     * extern void gtk_widget_style_get(GtkWidget *widget, const gchar *first_property_name, ...)
     * }
     */
    public static class gtk_widget_style_get {
        private static final FunctionDescriptor BASE_DESC = FunctionDescriptor.ofVoid(
                app_indicator_h.C_POINTER,
                app_indicator_h.C_POINTER
            );
        private static final MemorySegment ADDR = app_indicator_h.findOrThrow("gtk_widget_style_get");

        private final MethodHandle handle;
        private final FunctionDescriptor descriptor;
        private final MethodHandle spreader;

        private gtk_widget_style_get(MethodHandle handle, FunctionDescriptor descriptor, MethodHandle spreader) {
            this.handle = handle;
            this.descriptor = descriptor;
            this.spreader = spreader;
        }

        /**
         * Variadic invoker factory for:
         * {@snippet lang=c :
         * extern void gtk_widget_style_get(GtkWidget *widget, const gchar *first_property_name, ...)
         * }
         */
        public static gtk_widget_style_get makeInvoker(MemoryLayout... layouts) {
            FunctionDescriptor desc$ = BASE_DESC.appendArgumentLayouts(layouts);
            Linker.Option fva$ = Linker.Option.firstVariadicArg(BASE_DESC.argumentLayouts().size());
            var mh$ = Linker.nativeLinker().downcallHandle(ADDR, desc$, fva$);
            var spreader$ = mh$.asSpreader(Object[].class, layouts.length);
            return new gtk_widget_style_get(mh$, desc$, spreader$);
        }

        /**
         * {@return the specialized method handle}
         */
        public MethodHandle handle() {
            return handle;
        }

        /**
         * {@return the specialized descriptor}
         */
        public FunctionDescriptor descriptor() {
            return descriptor;
        }

        public void apply(MemorySegment widget, MemorySegment first_property_name, Object... x2) {
            try {
                if (TRACE_DOWNCALLS) {
                    traceDowncall("gtk_widget_style_get", widget, first_property_name, x2);
                }
                spreader.invokeExact(widget, first_property_name, x2);
            } catch(IllegalArgumentException | ClassCastException ex$)  {
                throw ex$; // rethrow IAE from passing wrong number/type of args
            } catch (Throwable ex$) {
               throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static class gtk_widget_set_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_direction(GtkWidget *widget, GtkTextDirection dir)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_direction$descriptor() {
        return gtk_widget_set_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_direction(GtkWidget *widget, GtkTextDirection dir)
     * }
     */
    public static MethodHandle gtk_widget_set_direction$handle() {
        return gtk_widget_set_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_direction(GtkWidget *widget, GtkTextDirection dir)
     * }
     */
    public static void gtk_widget_set_direction(MemorySegment widget, int dir) {
        var mh$ = gtk_widget_set_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_direction", widget, dir);
            }
            mh$.invokeExact(widget, dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_widget_get_direction(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_direction$descriptor() {
        return gtk_widget_get_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_widget_get_direction(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_direction$handle() {
        return gtk_widget_get_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_widget_get_direction(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_direction(MemorySegment widget) {
        var mh$ = gtk_widget_get_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_direction", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_default_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_default_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_default_direction(GtkTextDirection dir)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_default_direction$descriptor() {
        return gtk_widget_set_default_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_default_direction(GtkTextDirection dir)
     * }
     */
    public static MethodHandle gtk_widget_set_default_direction$handle() {
        return gtk_widget_set_default_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_default_direction(GtkTextDirection dir)
     * }
     */
    public static void gtk_widget_set_default_direction(int dir) {
        var mh$ = gtk_widget_set_default_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_default_direction", dir);
            }
            mh$.invokeExact(dir);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_default_direction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_default_direction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_widget_get_default_direction()
     * }
     */
    public static FunctionDescriptor gtk_widget_get_default_direction$descriptor() {
        return gtk_widget_get_default_direction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_widget_get_default_direction()
     * }
     */
    public static MethodHandle gtk_widget_get_default_direction$handle() {
        return gtk_widget_get_default_direction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkTextDirection gtk_widget_get_default_direction()
     * }
     */
    public static int gtk_widget_get_default_direction() {
        var mh$ = gtk_widget_get_default_direction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_default_direction");
            }
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_is_composited {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_is_composited"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_composited(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_is_composited$descriptor() {
        return gtk_widget_is_composited.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_composited(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_is_composited$handle() {
        return gtk_widget_is_composited.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_is_composited(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_is_composited(MemorySegment widget) {
        var mh$ = gtk_widget_is_composited.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_is_composited", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_shape_combine_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_shape_combine_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_shape_combine_region(GtkWidget *widget, cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor gtk_widget_shape_combine_region$descriptor() {
        return gtk_widget_shape_combine_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_shape_combine_region(GtkWidget *widget, cairo_region_t *region)
     * }
     */
    public static MethodHandle gtk_widget_shape_combine_region$handle() {
        return gtk_widget_shape_combine_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_shape_combine_region(GtkWidget *widget, cairo_region_t *region)
     * }
     */
    public static void gtk_widget_shape_combine_region(MemorySegment widget, MemorySegment region) {
        var mh$ = gtk_widget_shape_combine_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_shape_combine_region", widget, region);
            }
            mh$.invokeExact(widget, region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_input_shape_combine_region {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_input_shape_combine_region"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_input_shape_combine_region(GtkWidget *widget, cairo_region_t *region)
     * }
     */
    public static FunctionDescriptor gtk_widget_input_shape_combine_region$descriptor() {
        return gtk_widget_input_shape_combine_region.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_input_shape_combine_region(GtkWidget *widget, cairo_region_t *region)
     * }
     */
    public static MethodHandle gtk_widget_input_shape_combine_region$handle() {
        return gtk_widget_input_shape_combine_region.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_input_shape_combine_region(GtkWidget *widget, cairo_region_t *region)
     * }
     */
    public static void gtk_widget_input_shape_combine_region(MemorySegment widget, MemorySegment region) {
        var mh$ = gtk_widget_input_shape_combine_region.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_input_shape_combine_region", widget, region);
            }
            mh$.invokeExact(widget, region);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_list_mnemonic_labels {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_list_mnemonic_labels"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_widget_list_mnemonic_labels(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_list_mnemonic_labels$descriptor() {
        return gtk_widget_list_mnemonic_labels.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_widget_list_mnemonic_labels(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_list_mnemonic_labels$handle() {
        return gtk_widget_list_mnemonic_labels.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_widget_list_mnemonic_labels(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_list_mnemonic_labels(MemorySegment widget) {
        var mh$ = gtk_widget_list_mnemonic_labels.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_list_mnemonic_labels", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_add_mnemonic_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_add_mnemonic_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_add_mnemonic_label(GtkWidget *widget, GtkWidget *label)
     * }
     */
    public static FunctionDescriptor gtk_widget_add_mnemonic_label$descriptor() {
        return gtk_widget_add_mnemonic_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_add_mnemonic_label(GtkWidget *widget, GtkWidget *label)
     * }
     */
    public static MethodHandle gtk_widget_add_mnemonic_label$handle() {
        return gtk_widget_add_mnemonic_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_add_mnemonic_label(GtkWidget *widget, GtkWidget *label)
     * }
     */
    public static void gtk_widget_add_mnemonic_label(MemorySegment widget, MemorySegment label) {
        var mh$ = gtk_widget_add_mnemonic_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_add_mnemonic_label", widget, label);
            }
            mh$.invokeExact(widget, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_remove_mnemonic_label {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_remove_mnemonic_label"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_remove_mnemonic_label(GtkWidget *widget, GtkWidget *label)
     * }
     */
    public static FunctionDescriptor gtk_widget_remove_mnemonic_label$descriptor() {
        return gtk_widget_remove_mnemonic_label.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_remove_mnemonic_label(GtkWidget *widget, GtkWidget *label)
     * }
     */
    public static MethodHandle gtk_widget_remove_mnemonic_label$handle() {
        return gtk_widget_remove_mnemonic_label.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_remove_mnemonic_label(GtkWidget *widget, GtkWidget *label)
     * }
     */
    public static void gtk_widget_remove_mnemonic_label(MemorySegment widget, MemorySegment label) {
        var mh$ = gtk_widget_remove_mnemonic_label.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_remove_mnemonic_label", widget, label);
            }
            mh$.invokeExact(widget, label);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_tooltip_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_tooltip_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_tooltip_window(GtkWidget *widget, GtkWindow *custom_window)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_tooltip_window$descriptor() {
        return gtk_widget_set_tooltip_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_tooltip_window(GtkWidget *widget, GtkWindow *custom_window)
     * }
     */
    public static MethodHandle gtk_widget_set_tooltip_window$handle() {
        return gtk_widget_set_tooltip_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_tooltip_window(GtkWidget *widget, GtkWindow *custom_window)
     * }
     */
    public static void gtk_widget_set_tooltip_window(MemorySegment widget, MemorySegment custom_window) {
        var mh$ = gtk_widget_set_tooltip_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_tooltip_window", widget, custom_window);
            }
            mh$.invokeExact(widget, custom_window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_tooltip_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_tooltip_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_widget_get_tooltip_window(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_tooltip_window$descriptor() {
        return gtk_widget_get_tooltip_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWindow *gtk_widget_get_tooltip_window(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_tooltip_window$handle() {
        return gtk_widget_get_tooltip_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWindow *gtk_widget_get_tooltip_window(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_tooltip_window(MemorySegment widget) {
        var mh$ = gtk_widget_get_tooltip_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_tooltip_window", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_trigger_tooltip_query {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_trigger_tooltip_query"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_trigger_tooltip_query(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_trigger_tooltip_query$descriptor() {
        return gtk_widget_trigger_tooltip_query.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_trigger_tooltip_query(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_trigger_tooltip_query$handle() {
        return gtk_widget_trigger_tooltip_query.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_trigger_tooltip_query(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_trigger_tooltip_query(MemorySegment widget) {
        var mh$ = gtk_widget_trigger_tooltip_query.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_trigger_tooltip_query", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_tooltip_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_tooltip_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_tooltip_text(GtkWidget *widget, const gchar *text)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_tooltip_text$descriptor() {
        return gtk_widget_set_tooltip_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_tooltip_text(GtkWidget *widget, const gchar *text)
     * }
     */
    public static MethodHandle gtk_widget_set_tooltip_text$handle() {
        return gtk_widget_set_tooltip_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_tooltip_text(GtkWidget *widget, const gchar *text)
     * }
     */
    public static void gtk_widget_set_tooltip_text(MemorySegment widget, MemorySegment text) {
        var mh$ = gtk_widget_set_tooltip_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_tooltip_text", widget, text);
            }
            mh$.invokeExact(widget, text);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_tooltip_text {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_tooltip_text"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_widget_get_tooltip_text(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_tooltip_text$descriptor() {
        return gtk_widget_get_tooltip_text.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_widget_get_tooltip_text(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_tooltip_text$handle() {
        return gtk_widget_get_tooltip_text.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_widget_get_tooltip_text(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_tooltip_text(MemorySegment widget) {
        var mh$ = gtk_widget_get_tooltip_text.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_tooltip_text", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_tooltip_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_tooltip_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_tooltip_markup(GtkWidget *widget, const gchar *markup)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_tooltip_markup$descriptor() {
        return gtk_widget_set_tooltip_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_tooltip_markup(GtkWidget *widget, const gchar *markup)
     * }
     */
    public static MethodHandle gtk_widget_set_tooltip_markup$handle() {
        return gtk_widget_set_tooltip_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_tooltip_markup(GtkWidget *widget, const gchar *markup)
     * }
     */
    public static void gtk_widget_set_tooltip_markup(MemorySegment widget, MemorySegment markup) {
        var mh$ = gtk_widget_set_tooltip_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_tooltip_markup", widget, markup);
            }
            mh$.invokeExact(widget, markup);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_tooltip_markup {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_tooltip_markup"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gchar *gtk_widget_get_tooltip_markup(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_tooltip_markup$descriptor() {
        return gtk_widget_get_tooltip_markup.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gchar *gtk_widget_get_tooltip_markup(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_tooltip_markup$handle() {
        return gtk_widget_get_tooltip_markup.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gchar *gtk_widget_get_tooltip_markup(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_tooltip_markup(MemorySegment widget) {
        var mh$ = gtk_widget_get_tooltip_markup.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_tooltip_markup", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_has_tooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_has_tooltip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_has_tooltip(GtkWidget *widget, gboolean has_tooltip)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_has_tooltip$descriptor() {
        return gtk_widget_set_has_tooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_has_tooltip(GtkWidget *widget, gboolean has_tooltip)
     * }
     */
    public static MethodHandle gtk_widget_set_has_tooltip$handle() {
        return gtk_widget_set_has_tooltip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_has_tooltip(GtkWidget *widget, gboolean has_tooltip)
     * }
     */
    public static void gtk_widget_set_has_tooltip(MemorySegment widget, int has_tooltip) {
        var mh$ = gtk_widget_set_has_tooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_has_tooltip", widget, has_tooltip);
            }
            mh$.invokeExact(widget, has_tooltip);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_has_tooltip {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_has_tooltip"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_has_tooltip(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_has_tooltip$descriptor() {
        return gtk_widget_get_has_tooltip.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_has_tooltip(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_has_tooltip$handle() {
        return gtk_widget_get_has_tooltip.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_get_has_tooltip(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_get_has_tooltip(MemorySegment widget) {
        var mh$ = gtk_widget_get_has_tooltip.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_has_tooltip", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cairo_should_draw_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cairo_should_draw_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_cairo_should_draw_window(cairo_t *cr, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_cairo_should_draw_window$descriptor() {
        return gtk_cairo_should_draw_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_cairo_should_draw_window(cairo_t *cr, GdkWindow *window)
     * }
     */
    public static MethodHandle gtk_cairo_should_draw_window$handle() {
        return gtk_cairo_should_draw_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_cairo_should_draw_window(cairo_t *cr, GdkWindow *window)
     * }
     */
    public static int gtk_cairo_should_draw_window(MemorySegment cr, MemorySegment window) {
        var mh$ = gtk_cairo_should_draw_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cairo_should_draw_window", cr, window);
            }
            return (int)mh$.invokeExact(cr, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_cairo_transform_to_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_cairo_transform_to_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_cairo_transform_to_window(cairo_t *cr, GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_cairo_transform_to_window$descriptor() {
        return gtk_cairo_transform_to_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_cairo_transform_to_window(cairo_t *cr, GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static MethodHandle gtk_cairo_transform_to_window$handle() {
        return gtk_cairo_transform_to_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_cairo_transform_to_window(cairo_t *cr, GtkWidget *widget, GdkWindow *window)
     * }
     */
    public static void gtk_cairo_transform_to_window(MemorySegment cr, MemorySegment widget, MemorySegment window) {
        var mh$ = gtk_cairo_transform_to_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_cairo_transform_to_window", cr, widget, window);
            }
            mh$.invokeExact(cr, widget, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_requisition_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_requisition_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_requisition_get_type()
     * }
     */
    public static FunctionDescriptor gtk_requisition_get_type$descriptor() {
        return gtk_requisition_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_requisition_get_type()
     * }
     */
    public static MethodHandle gtk_requisition_get_type$handle() {
        return gtk_requisition_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_requisition_get_type()
     * }
     */
    public static long gtk_requisition_get_type() {
        var mh$ = gtk_requisition_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_requisition_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_requisition_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_requisition_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRequisition *gtk_requisition_new()
     * }
     */
    public static FunctionDescriptor gtk_requisition_new$descriptor() {
        return gtk_requisition_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRequisition *gtk_requisition_new()
     * }
     */
    public static MethodHandle gtk_requisition_new$handle() {
        return gtk_requisition_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRequisition *gtk_requisition_new()
     * }
     */
    public static MemorySegment gtk_requisition_new() {
        var mh$ = gtk_requisition_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_requisition_new");
            }
            return (MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_requisition_copy {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_requisition_copy"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkRequisition *gtk_requisition_copy(const GtkRequisition *requisition)
     * }
     */
    public static FunctionDescriptor gtk_requisition_copy$descriptor() {
        return gtk_requisition_copy.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkRequisition *gtk_requisition_copy(const GtkRequisition *requisition)
     * }
     */
    public static MethodHandle gtk_requisition_copy$handle() {
        return gtk_requisition_copy.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkRequisition *gtk_requisition_copy(const GtkRequisition *requisition)
     * }
     */
    public static MemorySegment gtk_requisition_copy(MemorySegment requisition) {
        var mh$ = gtk_requisition_copy.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_requisition_copy", requisition);
            }
            return (MemorySegment)mh$.invokeExact(requisition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_requisition_free {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_requisition_free"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_requisition_free(GtkRequisition *requisition)
     * }
     */
    public static FunctionDescriptor gtk_requisition_free$descriptor() {
        return gtk_requisition_free.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_requisition_free(GtkRequisition *requisition)
     * }
     */
    public static MethodHandle gtk_requisition_free$handle() {
        return gtk_requisition_free.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_requisition_free(GtkRequisition *requisition)
     * }
     */
    public static void gtk_requisition_free(MemorySegment requisition) {
        var mh$ = gtk_requisition_free.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_requisition_free", requisition);
            }
            mh$.invokeExact(requisition);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_in_destruction {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_in_destruction"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_in_destruction(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_in_destruction$descriptor() {
        return gtk_widget_in_destruction.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern gboolean gtk_widget_in_destruction(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_in_destruction$handle() {
        return gtk_widget_in_destruction.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern gboolean gtk_widget_in_destruction(GtkWidget *widget)
     * }
     */
    public static int gtk_widget_in_destruction(MemorySegment widget) {
        var mh$ = gtk_widget_in_destruction.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_in_destruction", widget);
            }
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_style_context {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_style_context"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_widget_get_style_context(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_style_context$descriptor() {
        return gtk_widget_get_style_context.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_widget_get_style_context(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_style_context$handle() {
        return gtk_widget_get_style_context.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkStyleContext *gtk_widget_get_style_context(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_style_context(MemorySegment widget) {
        var mh$ = gtk_widget_get_style_context.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_style_context", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_path {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_path"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_get_path(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_path$descriptor() {
        return gtk_widget_get_path.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_get_path(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_path$handle() {
        return gtk_widget_get_path.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkWidgetPath *gtk_widget_get_path(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_path(MemorySegment widget) {
        var mh$ = gtk_widget_get_path.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_path", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_set_css_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_set_css_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_css_name(GtkWidgetClass *widget_class, const char *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_set_css_name$descriptor() {
        return gtk_widget_class_set_css_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_css_name(GtkWidgetClass *widget_class, const char *name)
     * }
     */
    public static MethodHandle gtk_widget_class_set_css_name$handle() {
        return gtk_widget_class_set_css_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_css_name(GtkWidgetClass *widget_class, const char *name)
     * }
     */
    public static void gtk_widget_class_set_css_name(MemorySegment widget_class, MemorySegment name) {
        var mh$ = gtk_widget_class_set_css_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_set_css_name", widget_class, name);
            }
            mh$.invokeExact(widget_class, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_get_css_name {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_get_css_name"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const char *gtk_widget_class_get_css_name(GtkWidgetClass *widget_class)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_get_css_name$descriptor() {
        return gtk_widget_class_get_css_name.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const char *gtk_widget_class_get_css_name(GtkWidgetClass *widget_class)
     * }
     */
    public static MethodHandle gtk_widget_class_get_css_name$handle() {
        return gtk_widget_class_get_css_name.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const char *gtk_widget_class_get_css_name(GtkWidgetClass *widget_class)
     * }
     */
    public static MemorySegment gtk_widget_class_get_css_name(MemorySegment widget_class) {
        var mh$ = gtk_widget_class_get_css_name.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_get_css_name", widget_class);
            }
            return (MemorySegment)mh$.invokeExact(widget_class);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_modifier_mask {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_modifier_mask"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GdkModifierType gtk_widget_get_modifier_mask(GtkWidget *widget, GdkModifierIntent intent)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_modifier_mask$descriptor() {
        return gtk_widget_get_modifier_mask.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GdkModifierType gtk_widget_get_modifier_mask(GtkWidget *widget, GdkModifierIntent intent)
     * }
     */
    public static MethodHandle gtk_widget_get_modifier_mask$handle() {
        return gtk_widget_get_modifier_mask.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GdkModifierType gtk_widget_get_modifier_mask(GtkWidget *widget, GdkModifierIntent intent)
     * }
     */
    public static int gtk_widget_get_modifier_mask(MemorySegment widget, int intent) {
        var mh$ = gtk_widget_get_modifier_mask.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_modifier_mask", widget, intent);
            }
            return (int)mh$.invokeExact(widget, intent);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_insert_action_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_insert_action_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_insert_action_group(GtkWidget *widget, const gchar *name, GActionGroup *group)
     * }
     */
    public static FunctionDescriptor gtk_widget_insert_action_group$descriptor() {
        return gtk_widget_insert_action_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_insert_action_group(GtkWidget *widget, const gchar *name, GActionGroup *group)
     * }
     */
    public static MethodHandle gtk_widget_insert_action_group$handle() {
        return gtk_widget_insert_action_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_insert_action_group(GtkWidget *widget, const gchar *name, GActionGroup *group)
     * }
     */
    public static void gtk_widget_insert_action_group(MemorySegment widget, MemorySegment name, MemorySegment group) {
        var mh$ = gtk_widget_insert_action_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_insert_action_group", widget, name, group);
            }
            mh$.invokeExact(widget, name, group);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_add_tick_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_add_tick_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern guint gtk_widget_add_tick_callback(GtkWidget *widget, GtkTickCallback callback, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static FunctionDescriptor gtk_widget_add_tick_callback$descriptor() {
        return gtk_widget_add_tick_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern guint gtk_widget_add_tick_callback(GtkWidget *widget, GtkTickCallback callback, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static MethodHandle gtk_widget_add_tick_callback$handle() {
        return gtk_widget_add_tick_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern guint gtk_widget_add_tick_callback(GtkWidget *widget, GtkTickCallback callback, gpointer user_data, GDestroyNotify notify)
     * }
     */
    public static int gtk_widget_add_tick_callback(MemorySegment widget, MemorySegment callback, MemorySegment user_data, MemorySegment notify) {
        var mh$ = gtk_widget_add_tick_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_add_tick_callback", widget, callback, user_data, notify);
            }
            return (int)mh$.invokeExact(widget, callback, user_data, notify);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_remove_tick_callback {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_remove_tick_callback"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_remove_tick_callback(GtkWidget *widget, guint id)
     * }
     */
    public static FunctionDescriptor gtk_widget_remove_tick_callback$descriptor() {
        return gtk_widget_remove_tick_callback.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_remove_tick_callback(GtkWidget *widget, guint id)
     * }
     */
    public static MethodHandle gtk_widget_remove_tick_callback$handle() {
        return gtk_widget_remove_tick_callback.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_remove_tick_callback(GtkWidget *widget, guint id)
     * }
     */
    public static void gtk_widget_remove_tick_callback(MemorySegment widget, int id) {
        var mh$ = gtk_widget_remove_tick_callback.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_remove_tick_callback", widget, id);
            }
            mh$.invokeExact(widget, id);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_init_template {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_init_template"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_init_template(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_init_template$descriptor() {
        return gtk_widget_init_template.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_init_template(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_init_template$handle() {
        return gtk_widget_init_template.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_init_template(GtkWidget *widget)
     * }
     */
    public static void gtk_widget_init_template(MemorySegment widget) {
        var mh$ = gtk_widget_init_template.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_init_template", widget);
            }
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_template_child {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_LONG,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_template_child"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GObject *gtk_widget_get_template_child(GtkWidget *widget, GType widget_type, const gchar *name)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_template_child$descriptor() {
        return gtk_widget_get_template_child.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GObject *gtk_widget_get_template_child(GtkWidget *widget, GType widget_type, const gchar *name)
     * }
     */
    public static MethodHandle gtk_widget_get_template_child$handle() {
        return gtk_widget_get_template_child.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GObject *gtk_widget_get_template_child(GtkWidget *widget, GType widget_type, const gchar *name)
     * }
     */
    public static MemorySegment gtk_widget_get_template_child(MemorySegment widget, long widget_type, MemorySegment name) {
        var mh$ = gtk_widget_get_template_child.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_template_child", widget, widget_type, name);
            }
            return (MemorySegment)mh$.invokeExact(widget, widget_type, name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_set_template {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_set_template"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_template(GtkWidgetClass *widget_class, GBytes *template_bytes)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_set_template$descriptor() {
        return gtk_widget_class_set_template.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_template(GtkWidgetClass *widget_class, GBytes *template_bytes)
     * }
     */
    public static MethodHandle gtk_widget_class_set_template$handle() {
        return gtk_widget_class_set_template.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_template(GtkWidgetClass *widget_class, GBytes *template_bytes)
     * }
     */
    public static void gtk_widget_class_set_template(MemorySegment widget_class, MemorySegment template_bytes) {
        var mh$ = gtk_widget_class_set_template.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_set_template", widget_class, template_bytes);
            }
            mh$.invokeExact(widget_class, template_bytes);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_set_template_from_resource {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_set_template_from_resource"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_template_from_resource(GtkWidgetClass *widget_class, const gchar *resource_name)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_set_template_from_resource$descriptor() {
        return gtk_widget_class_set_template_from_resource.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_template_from_resource(GtkWidgetClass *widget_class, const gchar *resource_name)
     * }
     */
    public static MethodHandle gtk_widget_class_set_template_from_resource$handle() {
        return gtk_widget_class_set_template_from_resource.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_template_from_resource(GtkWidgetClass *widget_class, const gchar *resource_name)
     * }
     */
    public static void gtk_widget_class_set_template_from_resource(MemorySegment widget_class, MemorySegment resource_name) {
        var mh$ = gtk_widget_class_set_template_from_resource.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_set_template_from_resource", widget_class, resource_name);
            }
            mh$.invokeExact(widget_class, resource_name);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_bind_template_callback_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_bind_template_callback_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_bind_template_callback_full(GtkWidgetClass *widget_class, const gchar *callback_name, GCallback callback_symbol)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_bind_template_callback_full$descriptor() {
        return gtk_widget_class_bind_template_callback_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_bind_template_callback_full(GtkWidgetClass *widget_class, const gchar *callback_name, GCallback callback_symbol)
     * }
     */
    public static MethodHandle gtk_widget_class_bind_template_callback_full$handle() {
        return gtk_widget_class_bind_template_callback_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_bind_template_callback_full(GtkWidgetClass *widget_class, const gchar *callback_name, GCallback callback_symbol)
     * }
     */
    public static void gtk_widget_class_bind_template_callback_full(MemorySegment widget_class, MemorySegment callback_name, MemorySegment callback_symbol) {
        var mh$ = gtk_widget_class_bind_template_callback_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_bind_template_callback_full", widget_class, callback_name, callback_symbol);
            }
            mh$.invokeExact(widget_class, callback_name, callback_symbol);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_set_connect_func {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_set_connect_func"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_connect_func(GtkWidgetClass *widget_class, GtkBuilderConnectFunc connect_func, gpointer connect_data, GDestroyNotify connect_data_destroy)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_set_connect_func$descriptor() {
        return gtk_widget_class_set_connect_func.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_connect_func(GtkWidgetClass *widget_class, GtkBuilderConnectFunc connect_func, gpointer connect_data, GDestroyNotify connect_data_destroy)
     * }
     */
    public static MethodHandle gtk_widget_class_set_connect_func$handle() {
        return gtk_widget_class_set_connect_func.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_set_connect_func(GtkWidgetClass *widget_class, GtkBuilderConnectFunc connect_func, gpointer connect_data, GDestroyNotify connect_data_destroy)
     * }
     */
    public static void gtk_widget_class_set_connect_func(MemorySegment widget_class, MemorySegment connect_func, MemorySegment connect_data, MemorySegment connect_data_destroy) {
        var mh$ = gtk_widget_class_set_connect_func.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_set_connect_func", widget_class, connect_func, connect_data, connect_data_destroy);
            }
            mh$.invokeExact(widget_class, connect_func, connect_data, connect_data_destroy);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_class_bind_template_child_full {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT,
            app_indicator_h.C_LONG
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_class_bind_template_child_full"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_bind_template_child_full(GtkWidgetClass *widget_class, const gchar *name, gboolean internal_child, gssize struct_offset)
     * }
     */
    public static FunctionDescriptor gtk_widget_class_bind_template_child_full$descriptor() {
        return gtk_widget_class_bind_template_child_full.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_class_bind_template_child_full(GtkWidgetClass *widget_class, const gchar *name, gboolean internal_child, gssize struct_offset)
     * }
     */
    public static MethodHandle gtk_widget_class_bind_template_child_full$handle() {
        return gtk_widget_class_bind_template_child_full.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_class_bind_template_child_full(GtkWidgetClass *widget_class, const gchar *name, gboolean internal_child, gssize struct_offset)
     * }
     */
    public static void gtk_widget_class_bind_template_child_full(MemorySegment widget_class, MemorySegment name, int internal_child, long struct_offset) {
        var mh$ = gtk_widget_class_bind_template_child_full.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_class_bind_template_child_full", widget_class, name, internal_child, struct_offset);
            }
            mh$.invokeExact(widget_class, name, internal_child, struct_offset);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_action_group {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_action_group"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GActionGroup *gtk_widget_get_action_group(GtkWidget *widget, const gchar *prefix)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_action_group$descriptor() {
        return gtk_widget_get_action_group.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GActionGroup *gtk_widget_get_action_group(GtkWidget *widget, const gchar *prefix)
     * }
     */
    public static MethodHandle gtk_widget_get_action_group$handle() {
        return gtk_widget_get_action_group.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GActionGroup *gtk_widget_get_action_group(GtkWidget *widget, const gchar *prefix)
     * }
     */
    public static MemorySegment gtk_widget_get_action_group(MemorySegment widget, MemorySegment prefix) {
        var mh$ = gtk_widget_get_action_group.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_action_group", widget, prefix);
            }
            return (MemorySegment)mh$.invokeExact(widget, prefix);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_list_action_prefixes {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_list_action_prefixes"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern const gchar **gtk_widget_list_action_prefixes(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_list_action_prefixes$descriptor() {
        return gtk_widget_list_action_prefixes.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern const gchar **gtk_widget_list_action_prefixes(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_list_action_prefixes$handle() {
        return gtk_widget_list_action_prefixes.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern const gchar **gtk_widget_list_action_prefixes(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_list_action_prefixes(MemorySegment widget) {
        var mh$ = gtk_widget_list_action_prefixes.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_list_action_prefixes", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_set_font_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_set_font_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_font_map(GtkWidget *widget, PangoFontMap *font_map)
     * }
     */
    public static FunctionDescriptor gtk_widget_set_font_map$descriptor() {
        return gtk_widget_set_font_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_widget_set_font_map(GtkWidget *widget, PangoFontMap *font_map)
     * }
     */
    public static MethodHandle gtk_widget_set_font_map$handle() {
        return gtk_widget_set_font_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_widget_set_font_map(GtkWidget *widget, PangoFontMap *font_map)
     * }
     */
    public static void gtk_widget_set_font_map(MemorySegment widget, MemorySegment font_map) {
        var mh$ = gtk_widget_set_font_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_set_font_map", widget, font_map);
            }
            mh$.invokeExact(widget, font_map);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_widget_get_font_map {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_widget_get_font_map"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern PangoFontMap *gtk_widget_get_font_map(GtkWidget *widget)
     * }
     */
    public static FunctionDescriptor gtk_widget_get_font_map$descriptor() {
        return gtk_widget_get_font_map.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern PangoFontMap *gtk_widget_get_font_map(GtkWidget *widget)
     * }
     */
    public static MethodHandle gtk_widget_get_font_map$handle() {
        return gtk_widget_get_font_map.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern PangoFontMap *gtk_widget_get_font_map(GtkWidget *widget)
     * }
     */
    public static MemorySegment gtk_widget_get_font_map(MemorySegment widget) {
        var mh$ = gtk_widget_get_font_map.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_widget_get_font_map", widget);
            }
            return (MemorySegment)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet lang=c :
     * typedef GtkWidget *GtkWidget_autoptr
     * }
     */
    public static final AddressLayout GtkWidget_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkWidget_listautoptr
     * }
     */
    public static final AddressLayout GtkWidget_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkWidget_slistautoptr
     * }
     */
    public static final AddressLayout GtkWidget_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkWidget_queueautoptr
     * }
     */
    public static final AddressLayout GtkWidget_queueautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GtkRequisition *GtkRequisition_autoptr
     * }
     */
    public static final AddressLayout GtkRequisition_autoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GList *GtkRequisition_listautoptr
     * }
     */
    public static final AddressLayout GtkRequisition_listautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GSList *GtkRequisition_slistautoptr
     * }
     */
    public static final AddressLayout GtkRequisition_slistautoptr = app_indicator_h.C_POINTER;
    /**
     * {@snippet lang=c :
     * typedef GQueue *GtkRequisition_queueautoptr
     * }
     */
    public static final AddressLayout GtkRequisition_queueautoptr = app_indicator_h.C_POINTER;

    private static class gtk_application_get_type {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_LONG    );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_get_type"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GType gtk_application_get_type()
     * }
     */
    public static FunctionDescriptor gtk_application_get_type$descriptor() {
        return gtk_application_get_type.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GType gtk_application_get_type()
     * }
     */
    public static MethodHandle gtk_application_get_type$handle() {
        return gtk_application_get_type.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GType gtk_application_get_type()
     * }
     */
    public static long gtk_application_get_type() {
        var mh$ = gtk_application_get_type.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_get_type");
            }
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_new {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_INT
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_new"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GtkApplication *gtk_application_new(const gchar *application_id, GApplicationFlags flags)
     * }
     */
    public static FunctionDescriptor gtk_application_new$descriptor() {
        return gtk_application_new.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GtkApplication *gtk_application_new(const gchar *application_id, GApplicationFlags flags)
     * }
     */
    public static MethodHandle gtk_application_new$handle() {
        return gtk_application_new.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GtkApplication *gtk_application_new(const gchar *application_id, GApplicationFlags flags)
     * }
     */
    public static MemorySegment gtk_application_new(MemorySegment application_id, int flags) {
        var mh$ = gtk_application_new.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_new", application_id, flags);
            }
            return (MemorySegment)mh$.invokeExact(application_id, flags);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_add_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_add_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_application_add_window(GtkApplication *application, GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_application_add_window$descriptor() {
        return gtk_application_add_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_application_add_window(GtkApplication *application, GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_application_add_window$handle() {
        return gtk_application_add_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_application_add_window(GtkApplication *application, GtkWindow *window)
     * }
     */
    public static void gtk_application_add_window(MemorySegment application, MemorySegment window) {
        var mh$ = gtk_application_add_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_add_window", application, window);
            }
            mh$.invokeExact(application, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_remove_window {
        public static final FunctionDescriptor DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_remove_window"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern void gtk_application_remove_window(GtkApplication *application, GtkWindow *window)
     * }
     */
    public static FunctionDescriptor gtk_application_remove_window$descriptor() {
        return gtk_application_remove_window.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern void gtk_application_remove_window(GtkApplication *application, GtkWindow *window)
     * }
     */
    public static MethodHandle gtk_application_remove_window$handle() {
        return gtk_application_remove_window.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern void gtk_application_remove_window(GtkApplication *application, GtkWindow *window)
     * }
     */
    public static void gtk_application_remove_window(MemorySegment application, MemorySegment window) {
        var mh$ = gtk_application_remove_window.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_remove_window", application, window);
            }
            mh$.invokeExact(application, window);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_get_windows {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_get_windows"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GList *gtk_application_get_windows(GtkApplication *application)
     * }
     */
    public static FunctionDescriptor gtk_application_get_windows$descriptor() {
        return gtk_application_get_windows.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GList *gtk_application_get_windows(GtkApplication *application)
     * }
     */
    public static MethodHandle gtk_application_get_windows$handle() {
        return gtk_application_get_windows.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GList *gtk_application_get_windows(GtkApplication *application)
     * }
     */
    public static MemorySegment gtk_application_get_windows(MemorySegment application) {
        var mh$ = gtk_application_get_windows.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_get_windows", application);
            }
            return (MemorySegment)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }

    private static class gtk_application_get_app_menu {
        public static final FunctionDescriptor DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        public static final MethodHandle HANDLE = Linker.nativeLinker().downcallHandle(
                    app_indicator_h.findOrThrow("gtk_application_get_app_menu"),
                    DESC);
    }

    /**
     * Function descriptor for:
     * {@snippet lang=c :
     * extern GMenuModel *gtk_application_get_app_menu(GtkApplication *application)
     * }
     */
    public static FunctionDescriptor gtk_application_get_app_menu$descriptor() {
        return gtk_application_get_app_menu.DESC;
    }

    /**
     * Downcall method handle for:
     * {@snippet lang=c :
     * extern GMenuModel *gtk_application_get_app_menu(GtkApplication *application)
     * }
     */
    public static MethodHandle gtk_application_get_app_menu$handle() {
        return gtk_application_get_app_menu.HANDLE;
    }
    /**
     * {@snippet lang=c :
     * extern GMenuModel *gtk_application_get_app_menu(GtkApplication *application)
     * }
     */
    public static MemorySegment gtk_application_get_app_menu(MemorySegment application) {
        var mh$ = gtk_application_get_app_menu.HANDLE;
        try {
            if (TRACE_DOWNCALLS) {
                traceDowncall("gtk_application_get_app_menu", application);
            }
            return (MemorySegment)mh$.invokeExact(application);
        } catch (Throwable ex$) {
           throw new AssertionError("should not reach here", ex$);
        }
    }
}

