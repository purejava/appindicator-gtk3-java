// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * struct _AtkTextIface {
 *     GTypeInterface parent;
 *     gchar* (*get_text)(AtkText*,gint,gint);
 *     gchar* (*get_text_after_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
 *     gchar* (*get_text_at_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
 *     gunichar (*get_character_at_offset)(AtkText*,gint);
 *     gchar* (*get_text_before_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
 *     gint (*get_caret_offset)(AtkText*);
 *     AtkAttributeSet* (*get_run_attributes)(AtkText*,gint,gint*,gint*);
 *     AtkAttributeSet* (*get_default_attributes)(AtkText*);
 *     void (*get_character_extents)(AtkText*,gint,gint*,gint*,gint*,gint*,AtkCoordType);
 *     gint (*get_character_count)(AtkText*);
 *     gint (*get_offset_at_point)(AtkText*,gint,gint,AtkCoordType);
 *     gint (*get_n_selections)(AtkText*);
 *     gchar* (*get_selection)(AtkText*,gint,gint*,gint*);
 *     gboolean (*add_selection)(AtkText*,gint,gint);
 *     gboolean (*remove_selection)(AtkText*,gint);
 *     gboolean (*set_selection)(AtkText*,gint,gint,gint);
 *     gboolean (*set_caret_offset)(AtkText*,gint);
 *     void (*text_changed)(AtkText*,gint,gint);
 *     void (*text_caret_moved)(AtkText*,gint);
 *     void (*text_selection_changed)(AtkText*);
 *     void (*text_attributes_changed)(AtkText*);
 *     void (*get_range_extents)(AtkText*,gint,gint,AtkCoordType,AtkTextRectangle*);
 *     AtkTextRange** (*get_bounded_ranges)(AtkText*,AtkTextRectangle*,AtkCoordType,AtkTextClipType,AtkTextClipType);
 *     gchar* (*get_string_at_offset)(AtkText*,gint,AtkTextGranularity,gint*,gint*);
 *     gboolean (*scroll_substring_to)(AtkText*,gint,gint,AtkScrollType);
 *     gboolean (*scroll_substring_to_point)(AtkText*,gint,gint,AtkCoordType,gint,gint);
 * };
 * }
 */
public class _AtkTextIface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_text"),
        Constants$root.C_POINTER$LAYOUT.withName("get_text_after_offset"),
        Constants$root.C_POINTER$LAYOUT.withName("get_text_at_offset"),
        Constants$root.C_POINTER$LAYOUT.withName("get_character_at_offset"),
        Constants$root.C_POINTER$LAYOUT.withName("get_text_before_offset"),
        Constants$root.C_POINTER$LAYOUT.withName("get_caret_offset"),
        Constants$root.C_POINTER$LAYOUT.withName("get_run_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_default_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_character_extents"),
        Constants$root.C_POINTER$LAYOUT.withName("get_character_count"),
        Constants$root.C_POINTER$LAYOUT.withName("get_offset_at_point"),
        Constants$root.C_POINTER$LAYOUT.withName("get_n_selections"),
        Constants$root.C_POINTER$LAYOUT.withName("get_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("add_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("set_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("set_caret_offset"),
        Constants$root.C_POINTER$LAYOUT.withName("text_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("text_caret_moved"),
        Constants$root.C_POINTER$LAYOUT.withName("text_selection_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("text_attributes_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_range_extents"),
        Constants$root.C_POINTER$LAYOUT.withName("get_bounded_ranges"),
        Constants$root.C_POINTER$LAYOUT.withName("get_string_at_offset"),
        Constants$root.C_POINTER$LAYOUT.withName("scroll_substring_to"),
        Constants$root.C_POINTER$LAYOUT.withName("scroll_substring_to_point")
    ).withName("_AtkTextIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkTextIface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_text$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor get_text_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_text_UP$MH = RuntimeHelper.upcallHandle(get_text.class, "apply", _AtkTextIface.get_text_UP$FUNC);
    static final FunctionDescriptor get_text_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_text_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_text_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gchar* (*get_text)(AtkText*,gint,gint);
     * }
     */
    public interface get_text {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(get_text fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_text_UP$MH, fi, _AtkTextIface.get_text$FUNC, scope);
        }
        static get_text ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_text"));
    public static VarHandle get_text$VH() {
        return _AtkTextIface.get_text$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* (*get_text)(AtkText*,gint,gint);
     * }
     */
    public static MemorySegment get_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* (*get_text)(AtkText*,gint,gint);
     * }
     */
    public static void get_text$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_text$VH.set(seg, x);
    }
    public static MemorySegment get_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text get_text(MemorySegment segment, SegmentScope scope) {
        return get_text.ofAddress(get_text$get(segment), scope);
    }
    static final FunctionDescriptor get_text_after_offset$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_text_after_offset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_after_offset_UP$MH = RuntimeHelper.upcallHandle(get_text_after_offset.class, "apply", _AtkTextIface.get_text_after_offset_UP$FUNC);
    static final FunctionDescriptor get_text_after_offset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_after_offset_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_text_after_offset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gchar* (*get_text_after_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
     * }
     */
    public interface get_text_after_offset {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(get_text_after_offset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_text_after_offset_UP$MH, fi, _AtkTextIface.get_text_after_offset$FUNC, scope);
        }
        static get_text_after_offset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text_after_offset_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text_after_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_text_after_offset"));
    public static VarHandle get_text_after_offset$VH() {
        return _AtkTextIface.get_text_after_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* (*get_text_after_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
     * }
     */
    public static MemorySegment get_text_after_offset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text_after_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* (*get_text_after_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
     * }
     */
    public static void get_text_after_offset$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_text_after_offset$VH.set(seg, x);
    }
    public static MemorySegment get_text_after_offset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text_after_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text_after_offset$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_text_after_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text_after_offset get_text_after_offset(MemorySegment segment, SegmentScope scope) {
        return get_text_after_offset.ofAddress(get_text_after_offset$get(segment), scope);
    }
    static final FunctionDescriptor get_text_at_offset$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_text_at_offset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_at_offset_UP$MH = RuntimeHelper.upcallHandle(get_text_at_offset.class, "apply", _AtkTextIface.get_text_at_offset_UP$FUNC);
    static final FunctionDescriptor get_text_at_offset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_at_offset_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_text_at_offset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gchar* (*get_text_at_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
     * }
     */
    public interface get_text_at_offset {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(get_text_at_offset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_text_at_offset_UP$MH, fi, _AtkTextIface.get_text_at_offset$FUNC, scope);
        }
        static get_text_at_offset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text_at_offset_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text_at_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_text_at_offset"));
    public static VarHandle get_text_at_offset$VH() {
        return _AtkTextIface.get_text_at_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* (*get_text_at_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
     * }
     */
    public static MemorySegment get_text_at_offset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text_at_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* (*get_text_at_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
     * }
     */
    public static void get_text_at_offset$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_text_at_offset$VH.set(seg, x);
    }
    public static MemorySegment get_text_at_offset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text_at_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text_at_offset$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_text_at_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text_at_offset get_text_at_offset(MemorySegment segment, SegmentScope scope) {
        return get_text_at_offset.ofAddress(get_text_at_offset$get(segment), scope);
    }
    static final FunctionDescriptor get_character_at_offset$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor get_character_at_offset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_character_at_offset_UP$MH = RuntimeHelper.upcallHandle(get_character_at_offset.class, "apply", _AtkTextIface.get_character_at_offset_UP$FUNC);
    static final FunctionDescriptor get_character_at_offset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_character_at_offset_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_character_at_offset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gunichar (*get_character_at_offset)(AtkText*,gint);
     * }
     */
    public interface get_character_at_offset {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(get_character_at_offset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_character_at_offset_UP$MH, fi, _AtkTextIface.get_character_at_offset$FUNC, scope);
        }
        static get_character_at_offset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_AtkTextIface.get_character_at_offset_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_character_at_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_character_at_offset"));
    public static VarHandle get_character_at_offset$VH() {
        return _AtkTextIface.get_character_at_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gunichar (*get_character_at_offset)(AtkText*,gint);
     * }
     */
    public static MemorySegment get_character_at_offset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_character_at_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gunichar (*get_character_at_offset)(AtkText*,gint);
     * }
     */
    public static void get_character_at_offset$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_character_at_offset$VH.set(seg, x);
    }
    public static MemorySegment get_character_at_offset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_character_at_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_character_at_offset$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_character_at_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_character_at_offset get_character_at_offset(MemorySegment segment, SegmentScope scope) {
        return get_character_at_offset.ofAddress(get_character_at_offset$get(segment), scope);
    }
    static final FunctionDescriptor get_text_before_offset$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_text_before_offset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_before_offset_UP$MH = RuntimeHelper.upcallHandle(get_text_before_offset.class, "apply", _AtkTextIface.get_text_before_offset_UP$FUNC);
    static final FunctionDescriptor get_text_before_offset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_text_before_offset_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_text_before_offset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gchar* (*get_text_before_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
     * }
     */
    public interface get_text_before_offset {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(get_text_before_offset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_text_before_offset_UP$MH, fi, _AtkTextIface.get_text_before_offset$FUNC, scope);
        }
        static get_text_before_offset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text_before_offset_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_text_before_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_text_before_offset"));
    public static VarHandle get_text_before_offset$VH() {
        return _AtkTextIface.get_text_before_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* (*get_text_before_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
     * }
     */
    public static MemorySegment get_text_before_offset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text_before_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* (*get_text_before_offset)(AtkText*,gint,AtkTextBoundary,gint*,gint*);
     * }
     */
    public static void get_text_before_offset$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_text_before_offset$VH.set(seg, x);
    }
    public static MemorySegment get_text_before_offset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_text_before_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_text_before_offset$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_text_before_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_text_before_offset get_text_before_offset(MemorySegment segment, SegmentScope scope) {
        return get_text_before_offset.ofAddress(get_text_before_offset$get(segment), scope);
    }
    static final FunctionDescriptor get_caret_offset$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_caret_offset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_caret_offset_UP$MH = RuntimeHelper.upcallHandle(get_caret_offset.class, "apply", _AtkTextIface.get_caret_offset_UP$FUNC);
    static final FunctionDescriptor get_caret_offset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_caret_offset_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_caret_offset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*get_caret_offset)(AtkText*);
     * }
     */
    public interface get_caret_offset {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_caret_offset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_caret_offset_UP$MH, fi, _AtkTextIface.get_caret_offset$FUNC, scope);
        }
        static get_caret_offset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkTextIface.get_caret_offset_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_caret_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_caret_offset"));
    public static VarHandle get_caret_offset$VH() {
        return _AtkTextIface.get_caret_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*get_caret_offset)(AtkText*);
     * }
     */
    public static MemorySegment get_caret_offset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_caret_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*get_caret_offset)(AtkText*);
     * }
     */
    public static void get_caret_offset$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_caret_offset$VH.set(seg, x);
    }
    public static MemorySegment get_caret_offset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_caret_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_caret_offset$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_caret_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_caret_offset get_caret_offset(MemorySegment segment, SegmentScope scope) {
        return get_caret_offset.ofAddress(get_caret_offset$get(segment), scope);
    }
    static final FunctionDescriptor get_run_attributes$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_run_attributes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_run_attributes_UP$MH = RuntimeHelper.upcallHandle(get_run_attributes.class, "apply", _AtkTextIface.get_run_attributes_UP$FUNC);
    static final FunctionDescriptor get_run_attributes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_run_attributes_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_run_attributes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkAttributeSet* (*get_run_attributes)(AtkText*,gint,gint*,gint*);
     * }
     */
    public interface get_run_attributes {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(get_run_attributes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_run_attributes_UP$MH, fi, _AtkTextIface.get_run_attributes$FUNC, scope);
        }
        static get_run_attributes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkTextIface.get_run_attributes_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_run_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_run_attributes"));
    public static VarHandle get_run_attributes$VH() {
        return _AtkTextIface.get_run_attributes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkAttributeSet* (*get_run_attributes)(AtkText*,gint,gint*,gint*);
     * }
     */
    public static MemorySegment get_run_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_run_attributes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkAttributeSet* (*get_run_attributes)(AtkText*,gint,gint*,gint*);
     * }
     */
    public static void get_run_attributes$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_run_attributes$VH.set(seg, x);
    }
    public static MemorySegment get_run_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_run_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_run_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_run_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_run_attributes get_run_attributes(MemorySegment segment, SegmentScope scope) {
        return get_run_attributes.ofAddress(get_run_attributes$get(segment), scope);
    }
    static final FunctionDescriptor get_default_attributes$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_default_attributes_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_default_attributes_UP$MH = RuntimeHelper.upcallHandle(get_default_attributes.class, "apply", _AtkTextIface.get_default_attributes_UP$FUNC);
    static final FunctionDescriptor get_default_attributes_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_default_attributes_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_default_attributes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkAttributeSet* (*get_default_attributes)(AtkText*);
     * }
     */
    public interface get_default_attributes {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_default_attributes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_default_attributes_UP$MH, fi, _AtkTextIface.get_default_attributes$FUNC, scope);
        }
        static get_default_attributes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkTextIface.get_default_attributes_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_default_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_default_attributes"));
    public static VarHandle get_default_attributes$VH() {
        return _AtkTextIface.get_default_attributes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkAttributeSet* (*get_default_attributes)(AtkText*);
     * }
     */
    public static MemorySegment get_default_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_default_attributes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkAttributeSet* (*get_default_attributes)(AtkText*);
     * }
     */
    public static void get_default_attributes$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_default_attributes$VH.set(seg, x);
    }
    public static MemorySegment get_default_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_default_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_default_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_default_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_default_attributes get_default_attributes(MemorySegment segment, SegmentScope scope) {
        return get_default_attributes.ofAddress(get_default_attributes$get(segment), scope);
    }
    static final FunctionDescriptor get_character_extents$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor get_character_extents_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_character_extents_UP$MH = RuntimeHelper.upcallHandle(get_character_extents.class, "apply", _AtkTextIface.get_character_extents_UP$FUNC);
    static final FunctionDescriptor get_character_extents_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_character_extents_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_character_extents_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_character_extents)(AtkText*,gint,gint*,gint*,gint*,gint*,AtkCoordType);
     * }
     */
    public interface get_character_extents {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6);
        static MemorySegment allocate(get_character_extents fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_character_extents_UP$MH, fi, _AtkTextIface.get_character_extents$FUNC, scope);
        }
        static get_character_extents ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6) -> {
                try {
                    _AtkTextIface.get_character_extents_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_character_extents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_character_extents"));
    public static VarHandle get_character_extents$VH() {
        return _AtkTextIface.get_character_extents$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_character_extents)(AtkText*,gint,gint*,gint*,gint*,gint*,AtkCoordType);
     * }
     */
    public static MemorySegment get_character_extents$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_character_extents$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_character_extents)(AtkText*,gint,gint*,gint*,gint*,gint*,AtkCoordType);
     * }
     */
    public static void get_character_extents$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_character_extents$VH.set(seg, x);
    }
    public static MemorySegment get_character_extents$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_character_extents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_character_extents$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_character_extents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_character_extents get_character_extents(MemorySegment segment, SegmentScope scope) {
        return get_character_extents.ofAddress(get_character_extents$get(segment), scope);
    }
    static final FunctionDescriptor get_character_count$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_character_count_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_character_count_UP$MH = RuntimeHelper.upcallHandle(get_character_count.class, "apply", _AtkTextIface.get_character_count_UP$FUNC);
    static final FunctionDescriptor get_character_count_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_character_count_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_character_count_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*get_character_count)(AtkText*);
     * }
     */
    public interface get_character_count {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_character_count fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_character_count_UP$MH, fi, _AtkTextIface.get_character_count$FUNC, scope);
        }
        static get_character_count ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkTextIface.get_character_count_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_character_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_character_count"));
    public static VarHandle get_character_count$VH() {
        return _AtkTextIface.get_character_count$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*get_character_count)(AtkText*);
     * }
     */
    public static MemorySegment get_character_count$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_character_count$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*get_character_count)(AtkText*);
     * }
     */
    public static void get_character_count$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_character_count$VH.set(seg, x);
    }
    public static MemorySegment get_character_count$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_character_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_character_count$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_character_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_character_count get_character_count(MemorySegment segment, SegmentScope scope) {
        return get_character_count.ofAddress(get_character_count$get(segment), scope);
    }
    static final FunctionDescriptor get_offset_at_point$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor get_offset_at_point_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_offset_at_point_UP$MH = RuntimeHelper.upcallHandle(get_offset_at_point.class, "apply", _AtkTextIface.get_offset_at_point_UP$FUNC);
    static final FunctionDescriptor get_offset_at_point_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_offset_at_point_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_offset_at_point_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*get_offset_at_point)(AtkText*,gint,gint,AtkCoordType);
     * }
     */
    public interface get_offset_at_point {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(get_offset_at_point fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_offset_at_point_UP$MH, fi, _AtkTextIface.get_offset_at_point$FUNC, scope);
        }
        static get_offset_at_point ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)_AtkTextIface.get_offset_at_point_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_offset_at_point$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_offset_at_point"));
    public static VarHandle get_offset_at_point$VH() {
        return _AtkTextIface.get_offset_at_point$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*get_offset_at_point)(AtkText*,gint,gint,AtkCoordType);
     * }
     */
    public static MemorySegment get_offset_at_point$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_offset_at_point$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*get_offset_at_point)(AtkText*,gint,gint,AtkCoordType);
     * }
     */
    public static void get_offset_at_point$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_offset_at_point$VH.set(seg, x);
    }
    public static MemorySegment get_offset_at_point$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_offset_at_point$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_offset_at_point$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_offset_at_point$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_offset_at_point get_offset_at_point(MemorySegment segment, SegmentScope scope) {
        return get_offset_at_point.ofAddress(get_offset_at_point$get(segment), scope);
    }
    static final FunctionDescriptor get_n_selections$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_n_selections_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_selections_UP$MH = RuntimeHelper.upcallHandle(get_n_selections.class, "apply", _AtkTextIface.get_n_selections_UP$FUNC);
    static final FunctionDescriptor get_n_selections_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_selections_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_n_selections_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gint (*get_n_selections)(AtkText*);
     * }
     */
    public interface get_n_selections {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_n_selections fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_n_selections_UP$MH, fi, _AtkTextIface.get_n_selections$FUNC, scope);
        }
        static get_n_selections ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_AtkTextIface.get_n_selections_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_n_selections$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_n_selections"));
    public static VarHandle get_n_selections$VH() {
        return _AtkTextIface.get_n_selections$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint (*get_n_selections)(AtkText*);
     * }
     */
    public static MemorySegment get_n_selections$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_n_selections$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint (*get_n_selections)(AtkText*);
     * }
     */
    public static void get_n_selections$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_n_selections$VH.set(seg, x);
    }
    public static MemorySegment get_n_selections$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_n_selections$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_selections$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_n_selections$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_selections get_n_selections(MemorySegment segment, SegmentScope scope) {
        return get_n_selections.ofAddress(get_n_selections$get(segment), scope);
    }
    static final FunctionDescriptor get_selection$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_selection_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_selection_UP$MH = RuntimeHelper.upcallHandle(get_selection.class, "apply", _AtkTextIface.get_selection_UP$FUNC);
    static final FunctionDescriptor get_selection_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_selection_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_selection_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gchar* (*get_selection)(AtkText*,gint,gint*,gint*);
     * }
     */
    public interface get_selection {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(get_selection fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_selection_UP$MH, fi, _AtkTextIface.get_selection$FUNC, scope);
        }
        static get_selection ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkTextIface.get_selection_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_selection"));
    public static VarHandle get_selection$VH() {
        return _AtkTextIface.get_selection$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* (*get_selection)(AtkText*,gint,gint*,gint*);
     * }
     */
    public static MemorySegment get_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_selection$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* (*get_selection)(AtkText*,gint,gint*,gint*);
     * }
     */
    public static void get_selection$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_selection$VH.set(seg, x);
    }
    public static MemorySegment get_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_selection$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_selection get_selection(MemorySegment segment, SegmentScope scope) {
        return get_selection.ofAddress(get_selection$get(segment), scope);
    }
    static final FunctionDescriptor add_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor add_selection_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle add_selection_UP$MH = RuntimeHelper.upcallHandle(add_selection.class, "apply", _AtkTextIface.add_selection_UP$FUNC);
    static final FunctionDescriptor add_selection_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle add_selection_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.add_selection_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*add_selection)(AtkText*,gint,gint);
     * }
     */
    public interface add_selection {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(add_selection fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.add_selection_UP$MH, fi, _AtkTextIface.add_selection$FUNC, scope);
        }
        static add_selection ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    return (int)_AtkTextIface.add_selection_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_selection"));
    public static VarHandle add_selection$VH() {
        return _AtkTextIface.add_selection$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*add_selection)(AtkText*,gint,gint);
     * }
     */
    public static MemorySegment add_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.add_selection$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*add_selection)(AtkText*,gint,gint);
     * }
     */
    public static void add_selection$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.add_selection$VH.set(seg, x);
    }
    public static MemorySegment add_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.add_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_selection$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.add_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_selection add_selection(MemorySegment segment, SegmentScope scope) {
        return add_selection.ofAddress(add_selection$get(segment), scope);
    }
    static final FunctionDescriptor remove_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor remove_selection_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_selection_UP$MH = RuntimeHelper.upcallHandle(remove_selection.class, "apply", _AtkTextIface.remove_selection_UP$FUNC);
    static final FunctionDescriptor remove_selection_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_selection_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.remove_selection_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*remove_selection)(AtkText*,gint);
     * }
     */
    public interface remove_selection {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(remove_selection fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.remove_selection_UP$MH, fi, _AtkTextIface.remove_selection$FUNC, scope);
        }
        static remove_selection ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_AtkTextIface.remove_selection_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_selection"));
    public static VarHandle remove_selection$VH() {
        return _AtkTextIface.remove_selection$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*remove_selection)(AtkText*,gint);
     * }
     */
    public static MemorySegment remove_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.remove_selection$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*remove_selection)(AtkText*,gint);
     * }
     */
    public static void remove_selection$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.remove_selection$VH.set(seg, x);
    }
    public static MemorySegment remove_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.remove_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_selection$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.remove_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_selection remove_selection(MemorySegment segment, SegmentScope scope) {
        return remove_selection.ofAddress(remove_selection$get(segment), scope);
    }
    static final FunctionDescriptor set_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor set_selection_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_selection_UP$MH = RuntimeHelper.upcallHandle(set_selection.class, "apply", _AtkTextIface.set_selection_UP$FUNC);
    static final FunctionDescriptor set_selection_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_selection_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.set_selection_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*set_selection)(AtkText*,gint,gint,gint);
     * }
     */
    public interface set_selection {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(set_selection fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.set_selection_UP$MH, fi, _AtkTextIface.set_selection$FUNC, scope);
        }
        static set_selection ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)_AtkTextIface.set_selection_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_selection"));
    public static VarHandle set_selection$VH() {
        return _AtkTextIface.set_selection$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*set_selection)(AtkText*,gint,gint,gint);
     * }
     */
    public static MemorySegment set_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.set_selection$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*set_selection)(AtkText*,gint,gint,gint);
     * }
     */
    public static void set_selection$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.set_selection$VH.set(seg, x);
    }
    public static MemorySegment set_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.set_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_selection$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.set_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_selection set_selection(MemorySegment segment, SegmentScope scope) {
        return set_selection.ofAddress(set_selection$get(segment), scope);
    }
    static final FunctionDescriptor set_caret_offset$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor set_caret_offset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_caret_offset_UP$MH = RuntimeHelper.upcallHandle(set_caret_offset.class, "apply", _AtkTextIface.set_caret_offset_UP$FUNC);
    static final FunctionDescriptor set_caret_offset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_caret_offset_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.set_caret_offset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*set_caret_offset)(AtkText*,gint);
     * }
     */
    public interface set_caret_offset {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(set_caret_offset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.set_caret_offset_UP$MH, fi, _AtkTextIface.set_caret_offset$FUNC, scope);
        }
        static set_caret_offset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)_AtkTextIface.set_caret_offset_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_caret_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_caret_offset"));
    public static VarHandle set_caret_offset$VH() {
        return _AtkTextIface.set_caret_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*set_caret_offset)(AtkText*,gint);
     * }
     */
    public static MemorySegment set_caret_offset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.set_caret_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*set_caret_offset)(AtkText*,gint);
     * }
     */
    public static void set_caret_offset$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.set_caret_offset$VH.set(seg, x);
    }
    public static MemorySegment set_caret_offset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.set_caret_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_caret_offset$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.set_caret_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_caret_offset set_caret_offset(MemorySegment segment, SegmentScope scope) {
        return set_caret_offset.ofAddress(set_caret_offset$get(segment), scope);
    }
    static final FunctionDescriptor text_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor text_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle text_changed_UP$MH = RuntimeHelper.upcallHandle(text_changed.class, "apply", _AtkTextIface.text_changed_UP$FUNC);
    static final FunctionDescriptor text_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle text_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.text_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*text_changed)(AtkText*,gint,gint);
     * }
     */
    public interface text_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(text_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.text_changed_UP$MH, fi, _AtkTextIface.text_changed$FUNC, scope);
        }
        static text_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    _AtkTextIface.text_changed_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle text_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("text_changed"));
    public static VarHandle text_changed$VH() {
        return _AtkTextIface.text_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*text_changed)(AtkText*,gint,gint);
     * }
     */
    public static MemorySegment text_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.text_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*text_changed)(AtkText*,gint,gint);
     * }
     */
    public static void text_changed$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.text_changed$VH.set(seg, x);
    }
    public static MemorySegment text_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.text_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void text_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.text_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static text_changed text_changed(MemorySegment segment, SegmentScope scope) {
        return text_changed.ofAddress(text_changed$get(segment), scope);
    }
    static final FunctionDescriptor text_caret_moved$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor text_caret_moved_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle text_caret_moved_UP$MH = RuntimeHelper.upcallHandle(text_caret_moved.class, "apply", _AtkTextIface.text_caret_moved_UP$FUNC);
    static final FunctionDescriptor text_caret_moved_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle text_caret_moved_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.text_caret_moved_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*text_caret_moved)(AtkText*,gint);
     * }
     */
    public interface text_caret_moved {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(text_caret_moved fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.text_caret_moved_UP$MH, fi, _AtkTextIface.text_caret_moved$FUNC, scope);
        }
        static text_caret_moved ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _AtkTextIface.text_caret_moved_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle text_caret_moved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("text_caret_moved"));
    public static VarHandle text_caret_moved$VH() {
        return _AtkTextIface.text_caret_moved$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*text_caret_moved)(AtkText*,gint);
     * }
     */
    public static MemorySegment text_caret_moved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.text_caret_moved$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*text_caret_moved)(AtkText*,gint);
     * }
     */
    public static void text_caret_moved$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.text_caret_moved$VH.set(seg, x);
    }
    public static MemorySegment text_caret_moved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.text_caret_moved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void text_caret_moved$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.text_caret_moved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static text_caret_moved text_caret_moved(MemorySegment segment, SegmentScope scope) {
        return text_caret_moved.ofAddress(text_caret_moved$get(segment), scope);
    }
    static final FunctionDescriptor text_selection_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor text_selection_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle text_selection_changed_UP$MH = RuntimeHelper.upcallHandle(text_selection_changed.class, "apply", _AtkTextIface.text_selection_changed_UP$FUNC);
    static final FunctionDescriptor text_selection_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle text_selection_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.text_selection_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*text_selection_changed)(AtkText*);
     * }
     */
    public interface text_selection_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(text_selection_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.text_selection_changed_UP$MH, fi, _AtkTextIface.text_selection_changed$FUNC, scope);
        }
        static text_selection_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _AtkTextIface.text_selection_changed_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle text_selection_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("text_selection_changed"));
    public static VarHandle text_selection_changed$VH() {
        return _AtkTextIface.text_selection_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*text_selection_changed)(AtkText*);
     * }
     */
    public static MemorySegment text_selection_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.text_selection_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*text_selection_changed)(AtkText*);
     * }
     */
    public static void text_selection_changed$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.text_selection_changed$VH.set(seg, x);
    }
    public static MemorySegment text_selection_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.text_selection_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void text_selection_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.text_selection_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static text_selection_changed text_selection_changed(MemorySegment segment, SegmentScope scope) {
        return text_selection_changed.ofAddress(text_selection_changed$get(segment), scope);
    }
    static final FunctionDescriptor text_attributes_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor text_attributes_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle text_attributes_changed_UP$MH = RuntimeHelper.upcallHandle(text_attributes_changed.class, "apply", _AtkTextIface.text_attributes_changed_UP$FUNC);
    static final FunctionDescriptor text_attributes_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle text_attributes_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.text_attributes_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*text_attributes_changed)(AtkText*);
     * }
     */
    public interface text_attributes_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(text_attributes_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.text_attributes_changed_UP$MH, fi, _AtkTextIface.text_attributes_changed$FUNC, scope);
        }
        static text_attributes_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _AtkTextIface.text_attributes_changed_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle text_attributes_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("text_attributes_changed"));
    public static VarHandle text_attributes_changed$VH() {
        return _AtkTextIface.text_attributes_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*text_attributes_changed)(AtkText*);
     * }
     */
    public static MemorySegment text_attributes_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.text_attributes_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*text_attributes_changed)(AtkText*);
     * }
     */
    public static void text_attributes_changed$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.text_attributes_changed$VH.set(seg, x);
    }
    public static MemorySegment text_attributes_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.text_attributes_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void text_attributes_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.text_attributes_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static text_attributes_changed text_attributes_changed(MemorySegment segment, SegmentScope scope) {
        return text_attributes_changed.ofAddress(text_attributes_changed$get(segment), scope);
    }
    static final FunctionDescriptor get_range_extents$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_range_extents_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_range_extents_UP$MH = RuntimeHelper.upcallHandle(get_range_extents.class, "apply", _AtkTextIface.get_range_extents_UP$FUNC);
    static final FunctionDescriptor get_range_extents_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_range_extents_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_range_extents_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*get_range_extents)(AtkText*,gint,gint,AtkCoordType,AtkTextRectangle*);
     * }
     */
    public interface get_range_extents {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(get_range_extents fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_range_extents_UP$MH, fi, _AtkTextIface.get_range_extents$FUNC, scope);
        }
        static get_range_extents ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    _AtkTextIface.get_range_extents_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_range_extents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_range_extents"));
    public static VarHandle get_range_extents$VH() {
        return _AtkTextIface.get_range_extents$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_range_extents)(AtkText*,gint,gint,AtkCoordType,AtkTextRectangle*);
     * }
     */
    public static MemorySegment get_range_extents$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_range_extents$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_range_extents)(AtkText*,gint,gint,AtkCoordType,AtkTextRectangle*);
     * }
     */
    public static void get_range_extents$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_range_extents$VH.set(seg, x);
    }
    public static MemorySegment get_range_extents$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_range_extents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_range_extents$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_range_extents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_range_extents get_range_extents(MemorySegment segment, SegmentScope scope) {
        return get_range_extents.ofAddress(get_range_extents$get(segment), scope);
    }
    static final FunctionDescriptor get_bounded_ranges$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor get_bounded_ranges_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_bounded_ranges_UP$MH = RuntimeHelper.upcallHandle(get_bounded_ranges.class, "apply", _AtkTextIface.get_bounded_ranges_UP$FUNC);
    static final FunctionDescriptor get_bounded_ranges_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_bounded_ranges_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_bounded_ranges_DOWN$FUNC
    );
    /**
     * {@snippet :
 * AtkTextRange** (*get_bounded_ranges)(AtkText*,AtkTextRectangle*,AtkCoordType,AtkTextClipType,AtkTextClipType);
     * }
     */
    public interface get_bounded_ranges {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, int _x4);
        static MemorySegment allocate(get_bounded_ranges fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_bounded_ranges_UP$MH, fi, _AtkTextIface.get_bounded_ranges$FUNC, scope);
        }
        static get_bounded_ranges ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, int __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkTextIface.get_bounded_ranges_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_bounded_ranges$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_bounded_ranges"));
    public static VarHandle get_bounded_ranges$VH() {
        return _AtkTextIface.get_bounded_ranges$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * AtkTextRange** (*get_bounded_ranges)(AtkText*,AtkTextRectangle*,AtkCoordType,AtkTextClipType,AtkTextClipType);
     * }
     */
    public static MemorySegment get_bounded_ranges$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_bounded_ranges$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * AtkTextRange** (*get_bounded_ranges)(AtkText*,AtkTextRectangle*,AtkCoordType,AtkTextClipType,AtkTextClipType);
     * }
     */
    public static void get_bounded_ranges$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_bounded_ranges$VH.set(seg, x);
    }
    public static MemorySegment get_bounded_ranges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_bounded_ranges$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_bounded_ranges$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_bounded_ranges$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_bounded_ranges get_bounded_ranges(MemorySegment segment, SegmentScope scope) {
        return get_bounded_ranges.ofAddress(get_bounded_ranges$get(segment), scope);
    }
    static final FunctionDescriptor get_string_at_offset$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_string_at_offset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_string_at_offset_UP$MH = RuntimeHelper.upcallHandle(get_string_at_offset.class, "apply", _AtkTextIface.get_string_at_offset_UP$FUNC);
    static final FunctionDescriptor get_string_at_offset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_string_at_offset_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.get_string_at_offset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gchar* (*get_string_at_offset)(AtkText*,gint,AtkTextGranularity,gint*,gint*);
     * }
     */
    public interface get_string_at_offset {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(get_string_at_offset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.get_string_at_offset_UP$MH, fi, _AtkTextIface.get_string_at_offset$FUNC, scope);
        }
        static get_string_at_offset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_AtkTextIface.get_string_at_offset_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_string_at_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_string_at_offset"));
    public static VarHandle get_string_at_offset$VH() {
        return _AtkTextIface.get_string_at_offset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* (*get_string_at_offset)(AtkText*,gint,AtkTextGranularity,gint*,gint*);
     * }
     */
    public static MemorySegment get_string_at_offset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_string_at_offset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* (*get_string_at_offset)(AtkText*,gint,AtkTextGranularity,gint*,gint*);
     * }
     */
    public static void get_string_at_offset$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.get_string_at_offset$VH.set(seg, x);
    }
    public static MemorySegment get_string_at_offset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.get_string_at_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_string_at_offset$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.get_string_at_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_string_at_offset get_string_at_offset(MemorySegment segment, SegmentScope scope) {
        return get_string_at_offset.ofAddress(get_string_at_offset$get(segment), scope);
    }
    static final FunctionDescriptor scroll_substring_to$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor scroll_substring_to_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle scroll_substring_to_UP$MH = RuntimeHelper.upcallHandle(scroll_substring_to.class, "apply", _AtkTextIface.scroll_substring_to_UP$FUNC);
    static final FunctionDescriptor scroll_substring_to_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle scroll_substring_to_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.scroll_substring_to_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*scroll_substring_to)(AtkText*,gint,gint,AtkScrollType);
     * }
     */
    public interface scroll_substring_to {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(scroll_substring_to fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.scroll_substring_to_UP$MH, fi, _AtkTextIface.scroll_substring_to$FUNC, scope);
        }
        static scroll_substring_to ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)_AtkTextIface.scroll_substring_to_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle scroll_substring_to$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("scroll_substring_to"));
    public static VarHandle scroll_substring_to$VH() {
        return _AtkTextIface.scroll_substring_to$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*scroll_substring_to)(AtkText*,gint,gint,AtkScrollType);
     * }
     */
    public static MemorySegment scroll_substring_to$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.scroll_substring_to$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*scroll_substring_to)(AtkText*,gint,gint,AtkScrollType);
     * }
     */
    public static void scroll_substring_to$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.scroll_substring_to$VH.set(seg, x);
    }
    public static MemorySegment scroll_substring_to$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.scroll_substring_to$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void scroll_substring_to$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.scroll_substring_to$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static scroll_substring_to scroll_substring_to(MemorySegment segment, SegmentScope scope) {
        return scroll_substring_to.ofAddress(scroll_substring_to$get(segment), scope);
    }
    static final FunctionDescriptor scroll_substring_to_point$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor scroll_substring_to_point_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle scroll_substring_to_point_UP$MH = RuntimeHelper.upcallHandle(scroll_substring_to_point.class, "apply", _AtkTextIface.scroll_substring_to_point_UP$FUNC);
    static final FunctionDescriptor scroll_substring_to_point_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle scroll_substring_to_point_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkTextIface.scroll_substring_to_point_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*scroll_substring_to_point)(AtkText*,gint,gint,AtkCoordType,gint,gint);
     * }
     */
    public interface scroll_substring_to_point {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, int _x4, int _x5);
        static MemorySegment allocate(scroll_substring_to_point fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkTextIface.scroll_substring_to_point_UP$MH, fi, _AtkTextIface.scroll_substring_to_point$FUNC, scope);
        }
        static scroll_substring_to_point ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, int __x4, int __x5) -> {
                try {
                    return (int)_AtkTextIface.scroll_substring_to_point_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle scroll_substring_to_point$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("scroll_substring_to_point"));
    public static VarHandle scroll_substring_to_point$VH() {
        return _AtkTextIface.scroll_substring_to_point$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*scroll_substring_to_point)(AtkText*,gint,gint,AtkCoordType,gint,gint);
     * }
     */
    public static MemorySegment scroll_substring_to_point$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.scroll_substring_to_point$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*scroll_substring_to_point)(AtkText*,gint,gint,AtkCoordType,gint,gint);
     * }
     */
    public static void scroll_substring_to_point$set(MemorySegment seg, MemorySegment x) {
        _AtkTextIface.scroll_substring_to_point$VH.set(seg, x);
    }
    public static MemorySegment scroll_substring_to_point$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkTextIface.scroll_substring_to_point$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void scroll_substring_to_point$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkTextIface.scroll_substring_to_point$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static scroll_substring_to_point scroll_substring_to_point(MemorySegment segment, SegmentScope scope) {
        return scroll_substring_to_point.ofAddress(scroll_substring_to_point$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


