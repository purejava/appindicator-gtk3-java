// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PangoRenderer {
 *     GObject parent_instance;
 *     PangoUnderline underline;
 *     gboolean strikethrough;
 *     int active_count;
 *     PangoMatrix *matrix;
 *     PangoRendererPrivate *priv;
 * }
 * }
 */
public class _PangoRenderer {

    _PangoRenderer() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObject.layout().withName("parent_instance"),
        app_indicator_h.C_INT.withName("underline"),
        app_indicator_h.C_INT.withName("strikethrough"),
        app_indicator_h.C_INT.withName("active_count"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_POINTER.withName("matrix"),
        app_indicator_h.C_POINTER.withName("priv")
    ).withName("_PangoRenderer");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_instance$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_instance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObject parent_instance
     * }
     */
    public static final GroupLayout parent_instance$layout() {
        return parent_instance$LAYOUT;
    }

    private static final long parent_instance$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObject parent_instance
     * }
     */
    public static final long parent_instance$offset() {
        return parent_instance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObject parent_instance
     * }
     */
    public static MemorySegment parent_instance(MemorySegment struct) {
        return struct.asSlice(parent_instance$OFFSET, parent_instance$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObject parent_instance
     * }
     */
    public static void parent_instance(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_instance$OFFSET, parent_instance$LAYOUT.byteSize());
    }

    private static final OfInt underline$LAYOUT = (OfInt)$LAYOUT.select(groupElement("underline"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PangoUnderline underline
     * }
     */
    public static final OfInt underline$layout() {
        return underline$LAYOUT;
    }

    private static final long underline$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PangoUnderline underline
     * }
     */
    public static final long underline$offset() {
        return underline$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PangoUnderline underline
     * }
     */
    public static int underline(MemorySegment struct) {
        return struct.get(underline$LAYOUT, underline$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PangoUnderline underline
     * }
     */
    public static void underline(MemorySegment struct, int fieldValue) {
        struct.set(underline$LAYOUT, underline$OFFSET, fieldValue);
    }

    private static final OfInt strikethrough$LAYOUT = (OfInt)$LAYOUT.select(groupElement("strikethrough"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean strikethrough
     * }
     */
    public static final OfInt strikethrough$layout() {
        return strikethrough$LAYOUT;
    }

    private static final long strikethrough$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean strikethrough
     * }
     */
    public static final long strikethrough$offset() {
        return strikethrough$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean strikethrough
     * }
     */
    public static int strikethrough(MemorySegment struct) {
        return struct.get(strikethrough$LAYOUT, strikethrough$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean strikethrough
     * }
     */
    public static void strikethrough(MemorySegment struct, int fieldValue) {
        struct.set(strikethrough$LAYOUT, strikethrough$OFFSET, fieldValue);
    }

    private static final OfInt active_count$LAYOUT = (OfInt)$LAYOUT.select(groupElement("active_count"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * int active_count
     * }
     */
    public static final OfInt active_count$layout() {
        return active_count$LAYOUT;
    }

    private static final long active_count$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * int active_count
     * }
     */
    public static final long active_count$offset() {
        return active_count$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * int active_count
     * }
     */
    public static int active_count(MemorySegment struct) {
        return struct.get(active_count$LAYOUT, active_count$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * int active_count
     * }
     */
    public static void active_count(MemorySegment struct, int fieldValue) {
        struct.set(active_count$LAYOUT, active_count$OFFSET, fieldValue);
    }

    private static final AddressLayout matrix$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("matrix"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PangoMatrix *matrix
     * }
     */
    public static final AddressLayout matrix$layout() {
        return matrix$LAYOUT;
    }

    private static final long matrix$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PangoMatrix *matrix
     * }
     */
    public static final long matrix$offset() {
        return matrix$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PangoMatrix *matrix
     * }
     */
    public static MemorySegment matrix(MemorySegment struct) {
        return struct.get(matrix$LAYOUT, matrix$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PangoMatrix *matrix
     * }
     */
    public static void matrix(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(matrix$LAYOUT, matrix$OFFSET, fieldValue);
    }

    private static final AddressLayout priv$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("priv"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PangoRendererPrivate *priv
     * }
     */
    public static final AddressLayout priv$layout() {
        return priv$LAYOUT;
    }

    private static final long priv$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PangoRendererPrivate *priv
     * }
     */
    public static final long priv$offset() {
        return priv$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PangoRendererPrivate *priv
     * }
     */
    public static MemorySegment priv(MemorySegment struct) {
        return struct.get(priv$LAYOUT, priv$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PangoRendererPrivate *priv
     * }
     */
    public static void priv(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(priv$LAYOUT, priv$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

