// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * void (*GDataForeachFunc)(unsigned int key_id,void* data,void* user_data);
 * }
 */
public interface GDataForeachFunc {

    void apply(int key_id, java.lang.foreign.MemorySegment data, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(GDataForeachFunc fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$178.const$2, fi, constants$127.const$3, scope);
    }
    static GDataForeachFunc ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _key_id, java.lang.foreign.MemorySegment _data, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                constants$127.const$5.invokeExact(symbol, _key_id, _data, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


