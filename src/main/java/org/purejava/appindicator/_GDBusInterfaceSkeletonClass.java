// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GDBusInterfaceSkeletonClass {
 *     struct _GObjectClass parent_class;
 *     struct _GDBusInterfaceInfo* (*get_info)(struct _GDBusInterfaceSkeleton*);
 *     struct _GDBusInterfaceVTable* (*get_vtable)(struct _GDBusInterfaceSkeleton*);
 *     struct _GVariant* (*get_properties)(struct _GDBusInterfaceSkeleton*);
 *     void (*flush)(struct _GDBusInterfaceSkeleton*);
 *     void* vfunc_padding[8];
 *     int (*g_authorize_method)(struct _GDBusInterfaceSkeleton*,struct _GDBusMethodInvocation*);
 *     void* signal_padding[8];
 * };
 * }
 */
public class _GDBusInterfaceSkeletonClass {

    public static MemoryLayout $LAYOUT() {
        return constants$878.const$4;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * struct _GDBusInterfaceInfo* (*get_info)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public interface get_info {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_info fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$878.const$5, fi, constants$5.const$2, scope);
        }
        static get_info ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_info$VH() {
        return constants$879.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GDBusInterfaceInfo* (*get_info)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public static MemorySegment get_info$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$879.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GDBusInterfaceInfo* (*get_info)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public static void get_info$set(MemorySegment seg, MemorySegment x) {
        constants$879.const$0.set(seg, x);
    }
    public static MemorySegment get_info$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$879.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_info$set(MemorySegment seg, long index, MemorySegment x) {
        constants$879.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_info get_info(MemorySegment segment, Arena scope) {
        return get_info.ofAddress(get_info$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GDBusInterfaceVTable* (*get_vtable)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public interface get_vtable {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_vtable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$879.const$1, fi, constants$5.const$2, scope);
        }
        static get_vtable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_vtable$VH() {
        return constants$879.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GDBusInterfaceVTable* (*get_vtable)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public static MemorySegment get_vtable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$879.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GDBusInterfaceVTable* (*get_vtable)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public static void get_vtable$set(MemorySegment seg, MemorySegment x) {
        constants$879.const$2.set(seg, x);
    }
    public static MemorySegment get_vtable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$879.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_vtable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$879.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_vtable get_vtable(MemorySegment segment, Arena scope) {
        return get_vtable.ofAddress(get_vtable$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GVariant* (*get_properties)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public interface get_properties {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_properties fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$879.const$3, fi, constants$5.const$2, scope);
        }
        static get_properties ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_properties$VH() {
        return constants$879.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GVariant* (*get_properties)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public static MemorySegment get_properties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$879.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GVariant* (*get_properties)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public static void get_properties$set(MemorySegment seg, MemorySegment x) {
        constants$879.const$4.set(seg, x);
    }
    public static MemorySegment get_properties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$879.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_properties$set(MemorySegment seg, long index, MemorySegment x) {
        constants$879.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_properties get_properties(MemorySegment segment, Arena scope) {
        return get_properties.ofAddress(get_properties$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*flush)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public interface flush {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(flush fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$879.const$5, fi, constants$13.const$1, scope);
        }
        static flush ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle flush$VH() {
        return constants$880.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*flush)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public static MemorySegment flush$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$880.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*flush)(struct _GDBusInterfaceSkeleton*);
     * }
     */
    public static void flush$set(MemorySegment seg, MemorySegment x) {
        constants$880.const$0.set(seg, x);
    }
    public static MemorySegment flush$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$880.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void flush$set(MemorySegment seg, long index, MemorySegment x) {
        constants$880.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static flush flush(MemorySegment segment, Arena scope) {
        return flush.ofAddress(flush$get(segment), scope);
    }
    public static MemorySegment vfunc_padding$slice(MemorySegment seg) {
        return seg.asSlice(168, 64);
    }
    /**
     * {@snippet :
 * int (*g_authorize_method)(struct _GDBusInterfaceSkeleton*,struct _GDBusMethodInvocation*);
     * }
     */
    public interface g_authorize_method {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(g_authorize_method fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$880.const$1, fi, constants$9.const$0, scope);
        }
        static g_authorize_method ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle g_authorize_method$VH() {
        return constants$880.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*g_authorize_method)(struct _GDBusInterfaceSkeleton*,struct _GDBusMethodInvocation*);
     * }
     */
    public static MemorySegment g_authorize_method$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$880.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*g_authorize_method)(struct _GDBusInterfaceSkeleton*,struct _GDBusMethodInvocation*);
     * }
     */
    public static void g_authorize_method$set(MemorySegment seg, MemorySegment x) {
        constants$880.const$2.set(seg, x);
    }
    public static MemorySegment g_authorize_method$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$880.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void g_authorize_method$set(MemorySegment seg, long index, MemorySegment x) {
        constants$880.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static g_authorize_method g_authorize_method(MemorySegment segment, Arena scope) {
        return g_authorize_method.ofAddress(g_authorize_method$get(segment), scope);
    }
    public static MemorySegment signal_padding$slice(MemorySegment seg) {
        return seg.asSlice(240, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


