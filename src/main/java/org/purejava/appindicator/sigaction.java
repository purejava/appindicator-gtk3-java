// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct sigaction {
 *     union  __sigaction_handler;
 *     struct __sigset_t sa_mask;
 *     int sa_flags;
 *     void (*sa_restorer)();
 * };
 * }
 */
public class sigaction {

    public static MemoryLayout $LAYOUT() {
        return constants$126.const$5;
    }
    /**
     * {@snippet :
     * union {
     *     void (*sa_handler)(int);
     *     void (*sa_sigaction)(int,struct siginfo_t*,void*);
     * };
     * }
     */
    public static final class __sigaction_handler {

        // Suppresses default constructor, ensuring non-instantiability.
        private __sigaction_handler() {}
        public static MemoryLayout $LAYOUT() {
            return constants$127.const$0;
        }
        /**
         * {@snippet :
 * void (*sa_handler)(int);
         * }
         */
        public interface sa_handler {

            void apply(int _x0);
            static MemorySegment allocate(sa_handler fi, Arena scope) {
                return RuntimeHelper.upcallStub(constants$127.const$1, fi, constants$80.const$1, scope);
            }
            static sa_handler ofAddress(MemorySegment addr, Arena arena) {
                MemorySegment symbol = addr.reinterpret(arena, null);
                return (int __x0) -> {
                    try {
                        constants$122.const$4.invokeExact(symbol, __x0);
                    } catch (Throwable ex$) {
                        throw new AssertionError("should not reach here", ex$);
                    }
                };
            }
        }

        public static VarHandle sa_handler$VH() {
            return constants$127.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * void (*sa_handler)(int);
         * }
         */
        public static MemorySegment sa_handler$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$127.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * void (*sa_handler)(int);
         * }
         */
        public static void sa_handler$set(MemorySegment seg, MemorySegment x) {
            constants$127.const$2.set(seg, x);
        }
        public static MemorySegment sa_handler$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$127.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void sa_handler$set(MemorySegment seg, long index, MemorySegment x) {
            constants$127.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static sa_handler sa_handler(MemorySegment segment, Arena scope) {
            return sa_handler.ofAddress(sa_handler$get(segment), scope);
        }
        /**
         * {@snippet :
 * void (*sa_sigaction)(int,struct siginfo_t*,void*);
         * }
         */
        public interface sa_sigaction {

            void apply(int _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
            static MemorySegment allocate(sa_sigaction fi, Arena scope) {
                return RuntimeHelper.upcallStub(constants$127.const$4, fi, constants$127.const$3, scope);
            }
            static sa_sigaction ofAddress(MemorySegment addr, Arena arena) {
                MemorySegment symbol = addr.reinterpret(arena, null);
                return (int __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                    try {
                        constants$127.const$5.invokeExact(symbol, __x0, __x1, __x2);
                    } catch (Throwable ex$) {
                        throw new AssertionError("should not reach here", ex$);
                    }
                };
            }
        }

        public static VarHandle sa_sigaction$VH() {
            return constants$128.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * void (*sa_sigaction)(int,struct siginfo_t*,void*);
         * }
         */
        public static MemorySegment sa_sigaction$get(MemorySegment seg) {
            return (java.lang.foreign.MemorySegment)constants$128.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * void (*sa_sigaction)(int,struct siginfo_t*,void*);
         * }
         */
        public static void sa_sigaction$set(MemorySegment seg, MemorySegment x) {
            constants$128.const$0.set(seg, x);
        }
        public static MemorySegment sa_sigaction$get(MemorySegment seg, long index) {
            return (java.lang.foreign.MemorySegment)constants$128.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void sa_sigaction$set(MemorySegment seg, long index, MemorySegment x) {
            constants$128.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static sa_sigaction sa_sigaction(MemorySegment segment, Arena scope) {
            return sa_sigaction.ofAddress(sa_sigaction$get(segment), scope);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment __sigaction_handler$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static MemorySegment sa_mask$slice(MemorySegment seg) {
        return seg.asSlice(8, 128);
    }
    public static VarHandle sa_flags$VH() {
        return constants$128.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int sa_flags;
     * }
     */
    public static int sa_flags$get(MemorySegment seg) {
        return (int)constants$128.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int sa_flags;
     * }
     */
    public static void sa_flags$set(MemorySegment seg, int x) {
        constants$128.const$1.set(seg, x);
    }
    public static int sa_flags$get(MemorySegment seg, long index) {
        return (int)constants$128.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void sa_flags$set(MemorySegment seg, long index, int x) {
        constants$128.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*sa_restorer)();
     * }
     */
    public interface sa_restorer {

        void apply();
        static MemorySegment allocate(sa_restorer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$128.const$2, fi, constants$7.const$5, scope);
        }
        static sa_restorer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle sa_restorer$VH() {
        return constants$128.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*sa_restorer)();
     * }
     */
    public static MemorySegment sa_restorer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$128.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*sa_restorer)();
     * }
     */
    public static void sa_restorer$set(MemorySegment seg, MemorySegment x) {
        constants$128.const$3.set(seg, x);
    }
    public static MemorySegment sa_restorer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$128.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void sa_restorer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$128.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static sa_restorer sa_restorer(MemorySegment segment, Arena scope) {
        return sa_restorer.ofAddress(sa_restorer$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


