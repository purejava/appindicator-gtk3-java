// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.VarHandle;
import java.lang.foreign.*;

/**
 * {@snippet :
 * union _GFloatIEEE754 {
 *     gfloat v_float;
 *     struct  mpn;
 * };
 * }
 */
public class _GFloatIEEE754 {

    static final UnionLayout $union$LAYOUT = MemoryLayout.unionLayout(
        Constants$root.C_FLOAT$LAYOUT.withName("v_float"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(32)
        ).withName("mpn")
    ).withName("_GFloatIEEE754");
    public static MemoryLayout $LAYOUT() {
        return _GFloatIEEE754.$union$LAYOUT;
    }
    static final VarHandle v_float$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("v_float"));
    public static VarHandle v_float$VH() {
        return _GFloatIEEE754.v_float$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gfloat v_float;
     * }
     */
    public static float v_float$get(MemorySegment seg) {
        return (float)_GFloatIEEE754.v_float$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gfloat v_float;
     * }
     */
    public static void v_float$set(MemorySegment seg, float x) {
        _GFloatIEEE754.v_float$VH.set(seg, x);
    }
    public static float v_float$get(MemorySegment seg, long index) {
        return (float)_GFloatIEEE754.v_float$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void v_float$set(MemorySegment seg, long index, float x) {
        _GFloatIEEE754.v_float$VH.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * struct {
     *          *     guint mantissa;
     *     guint biased_exponent;
     *     guint sign;
     * };
     * }
     */
    public static final class mpn {

        // Suppresses default constructor, ensuring non-instantiability.
        private mpn() {}
        static final StructLayout mpn$struct$LAYOUT = MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(32)
        );
        public static MemoryLayout $LAYOUT() {
            return mpn.mpn$struct$LAYOUT;
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment mpn$slice(MemorySegment seg) {
        return seg.asSlice(0, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


