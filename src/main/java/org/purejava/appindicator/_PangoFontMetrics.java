// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _PangoFontMetrics {
 *     unsigned int ref_count;
 *     int ascent;
 *     int descent;
 *     int height;
 *     int approximate_char_width;
 *     int approximate_digit_width;
 *     int underline_position;
 *     int underline_thickness;
 *     int strikethrough_position;
 *     int strikethrough_thickness;
 * };
 * }
 */
public class _PangoFontMetrics {

    public static MemoryLayout $LAYOUT() {
        return constants$1548.const$1;
    }
    public static VarHandle ref_count$VH() {
        return constants$1548.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int ref_count;
     * }
     */
    public static int ref_count$get(MemorySegment seg) {
        return (int)constants$1548.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int ref_count;
     * }
     */
    public static void ref_count$set(MemorySegment seg, int x) {
        constants$1548.const$2.set(seg, x);
    }
    public static int ref_count$get(MemorySegment seg, long index) {
        return (int)constants$1548.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_count$set(MemorySegment seg, long index, int x) {
        constants$1548.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle ascent$VH() {
        return constants$1548.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int ascent;
     * }
     */
    public static int ascent$get(MemorySegment seg) {
        return (int)constants$1548.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int ascent;
     * }
     */
    public static void ascent$set(MemorySegment seg, int x) {
        constants$1548.const$3.set(seg, x);
    }
    public static int ascent$get(MemorySegment seg, long index) {
        return (int)constants$1548.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void ascent$set(MemorySegment seg, long index, int x) {
        constants$1548.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle descent$VH() {
        return constants$1548.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int descent;
     * }
     */
    public static int descent$get(MemorySegment seg) {
        return (int)constants$1548.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int descent;
     * }
     */
    public static void descent$set(MemorySegment seg, int x) {
        constants$1548.const$4.set(seg, x);
    }
    public static int descent$get(MemorySegment seg, long index) {
        return (int)constants$1548.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void descent$set(MemorySegment seg, long index, int x) {
        constants$1548.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle height$VH() {
        return constants$1548.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static int height$get(MemorySegment seg) {
        return (int)constants$1548.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int height;
     * }
     */
    public static void height$set(MemorySegment seg, int x) {
        constants$1548.const$5.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)constants$1548.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        constants$1548.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle approximate_char_width$VH() {
        return constants$1549.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int approximate_char_width;
     * }
     */
    public static int approximate_char_width$get(MemorySegment seg) {
        return (int)constants$1549.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int approximate_char_width;
     * }
     */
    public static void approximate_char_width$set(MemorySegment seg, int x) {
        constants$1549.const$0.set(seg, x);
    }
    public static int approximate_char_width$get(MemorySegment seg, long index) {
        return (int)constants$1549.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void approximate_char_width$set(MemorySegment seg, long index, int x) {
        constants$1549.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle approximate_digit_width$VH() {
        return constants$1549.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int approximate_digit_width;
     * }
     */
    public static int approximate_digit_width$get(MemorySegment seg) {
        return (int)constants$1549.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int approximate_digit_width;
     * }
     */
    public static void approximate_digit_width$set(MemorySegment seg, int x) {
        constants$1549.const$1.set(seg, x);
    }
    public static int approximate_digit_width$get(MemorySegment seg, long index) {
        return (int)constants$1549.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void approximate_digit_width$set(MemorySegment seg, long index, int x) {
        constants$1549.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle underline_position$VH() {
        return constants$1549.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int underline_position;
     * }
     */
    public static int underline_position$get(MemorySegment seg) {
        return (int)constants$1549.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int underline_position;
     * }
     */
    public static void underline_position$set(MemorySegment seg, int x) {
        constants$1549.const$2.set(seg, x);
    }
    public static int underline_position$get(MemorySegment seg, long index) {
        return (int)constants$1549.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void underline_position$set(MemorySegment seg, long index, int x) {
        constants$1549.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle underline_thickness$VH() {
        return constants$1549.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int underline_thickness;
     * }
     */
    public static int underline_thickness$get(MemorySegment seg) {
        return (int)constants$1549.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int underline_thickness;
     * }
     */
    public static void underline_thickness$set(MemorySegment seg, int x) {
        constants$1549.const$3.set(seg, x);
    }
    public static int underline_thickness$get(MemorySegment seg, long index) {
        return (int)constants$1549.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void underline_thickness$set(MemorySegment seg, long index, int x) {
        constants$1549.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle strikethrough_position$VH() {
        return constants$1549.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int strikethrough_position;
     * }
     */
    public static int strikethrough_position$get(MemorySegment seg) {
        return (int)constants$1549.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int strikethrough_position;
     * }
     */
    public static void strikethrough_position$set(MemorySegment seg, int x) {
        constants$1549.const$4.set(seg, x);
    }
    public static int strikethrough_position$get(MemorySegment seg, long index) {
        return (int)constants$1549.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void strikethrough_position$set(MemorySegment seg, long index, int x) {
        constants$1549.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle strikethrough_thickness$VH() {
        return constants$1549.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int strikethrough_thickness;
     * }
     */
    public static int strikethrough_thickness$get(MemorySegment seg) {
        return (int)constants$1549.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int strikethrough_thickness;
     * }
     */
    public static void strikethrough_thickness$set(MemorySegment seg, int x) {
        constants$1549.const$5.set(seg, x);
    }
    public static int strikethrough_thickness$get(MemorySegment seg, long index) {
        return (int)constants$1549.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void strikethrough_thickness$set(MemorySegment seg, long index, int x) {
        constants$1549.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


