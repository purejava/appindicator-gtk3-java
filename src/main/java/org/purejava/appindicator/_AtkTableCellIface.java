// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _AtkTableCellIface {
 *     struct _GTypeInterface parent;
 *     int (*get_column_span)(struct _AtkTableCell*);
 *     struct _GPtrArray* (*get_column_header_cells)(struct _AtkTableCell*);
 *     int (*get_position)(struct _AtkTableCell*,int*,int*);
 *     int (*get_row_span)(struct _AtkTableCell*);
 *     struct _GPtrArray* (*get_row_header_cells)(struct _AtkTableCell*);
 *     int (*get_row_column_span)(struct _AtkTableCell*,int*,int*,int*,int*);
 *     struct _AtkObject* (*get_table)(struct _AtkTableCell*);
 * };
 * }
 */
public class _AtkTableCellIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2089.const$4;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * int (*get_column_span)(struct _AtkTableCell*);
     * }
     */
    public interface get_column_span {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_column_span fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2089.const$5, fi, constants$10.const$5, scope);
        }
        static get_column_span ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_column_span$VH() {
        return constants$2090.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_column_span)(struct _AtkTableCell*);
     * }
     */
    public static MemorySegment get_column_span$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_column_span)(struct _AtkTableCell*);
     * }
     */
    public static void get_column_span$set(MemorySegment seg, MemorySegment x) {
        constants$2090.const$0.set(seg, x);
    }
    public static MemorySegment get_column_span$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_span$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2090.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_span get_column_span(MemorySegment segment, Arena scope) {
        return get_column_span.ofAddress(get_column_span$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GPtrArray* (*get_column_header_cells)(struct _AtkTableCell*);
     * }
     */
    public interface get_column_header_cells {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_column_header_cells fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2090.const$1, fi, constants$5.const$2, scope);
        }
        static get_column_header_cells ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_column_header_cells$VH() {
        return constants$2090.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GPtrArray* (*get_column_header_cells)(struct _AtkTableCell*);
     * }
     */
    public static MemorySegment get_column_header_cells$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GPtrArray* (*get_column_header_cells)(struct _AtkTableCell*);
     * }
     */
    public static void get_column_header_cells$set(MemorySegment seg, MemorySegment x) {
        constants$2090.const$2.set(seg, x);
    }
    public static MemorySegment get_column_header_cells$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_column_header_cells$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2090.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_column_header_cells get_column_header_cells(MemorySegment segment, Arena scope) {
        return get_column_header_cells.ofAddress(get_column_header_cells$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_position)(struct _AtkTableCell*,int*,int*);
     * }
     */
    public interface get_position {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_position fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2090.const$3, fi, constants$12.const$2, scope);
        }
        static get_position ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_position$VH() {
        return constants$2090.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_position)(struct _AtkTableCell*,int*,int*);
     * }
     */
    public static MemorySegment get_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_position)(struct _AtkTableCell*,int*,int*);
     * }
     */
    public static void get_position$set(MemorySegment seg, MemorySegment x) {
        constants$2090.const$4.set(seg, x);
    }
    public static MemorySegment get_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2090.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_position$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2090.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_position get_position(MemorySegment segment, Arena scope) {
        return get_position.ofAddress(get_position$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_row_span)(struct _AtkTableCell*);
     * }
     */
    public interface get_row_span {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_row_span fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2090.const$5, fi, constants$10.const$5, scope);
        }
        static get_row_span ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_row_span$VH() {
        return constants$2091.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_row_span)(struct _AtkTableCell*);
     * }
     */
    public static MemorySegment get_row_span$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2091.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_row_span)(struct _AtkTableCell*);
     * }
     */
    public static void get_row_span$set(MemorySegment seg, MemorySegment x) {
        constants$2091.const$0.set(seg, x);
    }
    public static MemorySegment get_row_span$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2091.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_span$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2091.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_span get_row_span(MemorySegment segment, Arena scope) {
        return get_row_span.ofAddress(get_row_span$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GPtrArray* (*get_row_header_cells)(struct _AtkTableCell*);
     * }
     */
    public interface get_row_header_cells {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_row_header_cells fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2091.const$1, fi, constants$5.const$2, scope);
        }
        static get_row_header_cells ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_row_header_cells$VH() {
        return constants$2091.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GPtrArray* (*get_row_header_cells)(struct _AtkTableCell*);
     * }
     */
    public static MemorySegment get_row_header_cells$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2091.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GPtrArray* (*get_row_header_cells)(struct _AtkTableCell*);
     * }
     */
    public static void get_row_header_cells$set(MemorySegment seg, MemorySegment x) {
        constants$2091.const$2.set(seg, x);
    }
    public static MemorySegment get_row_header_cells$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2091.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_header_cells$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2091.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_header_cells get_row_header_cells(MemorySegment segment, Arena scope) {
        return get_row_header_cells.ofAddress(get_row_header_cells$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_row_column_span)(struct _AtkTableCell*,int*,int*,int*,int*);
     * }
     */
    public interface get_row_column_span {

        int apply(java.lang.foreign.MemorySegment tree_view, java.lang.foreign.MemorySegment column, java.lang.foreign.MemorySegment prev_column, java.lang.foreign.MemorySegment next_column, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_row_column_span fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2091.const$3, fi, constants$165.const$2, scope);
        }
        static get_row_column_span ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tree_view, java.lang.foreign.MemorySegment _column, java.lang.foreign.MemorySegment _prev_column, java.lang.foreign.MemorySegment _next_column, java.lang.foreign.MemorySegment _data) -> {
                try {
                    return (int)constants$2091.const$4.invokeExact(symbol, _tree_view, _column, _prev_column, _next_column, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_row_column_span$VH() {
        return constants$2091.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_row_column_span)(struct _AtkTableCell*,int*,int*,int*,int*);
     * }
     */
    public static MemorySegment get_row_column_span$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2091.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_row_column_span)(struct _AtkTableCell*,int*,int*,int*,int*);
     * }
     */
    public static void get_row_column_span$set(MemorySegment seg, MemorySegment x) {
        constants$2091.const$5.set(seg, x);
    }
    public static MemorySegment get_row_column_span$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2091.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_row_column_span$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2091.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_row_column_span get_row_column_span(MemorySegment segment, Arena scope) {
        return get_row_column_span.ofAddress(get_row_column_span$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*get_table)(struct _AtkTableCell*);
     * }
     */
    public interface get_table {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_table fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2092.const$0, fi, constants$5.const$2, scope);
        }
        static get_table ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_table$VH() {
        return constants$2092.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*get_table)(struct _AtkTableCell*);
     * }
     */
    public static MemorySegment get_table$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2092.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*get_table)(struct _AtkTableCell*);
     * }
     */
    public static void get_table$set(MemorySegment seg, MemorySegment x) {
        constants$2092.const$1.set(seg, x);
    }
    public static MemorySegment get_table$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2092.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_table$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2092.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_table get_table(MemorySegment segment, Arena scope) {
        return get_table.ofAddress(get_table$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


