// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GTlsPasswordClass {
 *     struct _GObjectClass parent_class;
 *     unsigned char* (*get_value)(struct _GTlsPassword*,unsigned long*);
 *     void (*set_value)(struct _GTlsPassword*,unsigned char*,long,void (*)(void*));
 *     char* (*get_default_warning)(struct _GTlsPassword*);
 *     void* padding[4];
 * };
 * }
 */
public class _GTlsPasswordClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1382.const$3;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * unsigned char* (*get_value)(struct _GTlsPassword*,unsigned long*);
     * }
     */
    public interface get_value {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_value fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1382.const$4, fi, constants$5.const$5, scope);
        }
        static get_value ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_value$VH() {
        return constants$1382.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned char* (*get_value)(struct _GTlsPassword*,unsigned long*);
     * }
     */
    public static MemorySegment get_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1382.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned char* (*get_value)(struct _GTlsPassword*,unsigned long*);
     * }
     */
    public static void get_value$set(MemorySegment seg, MemorySegment x) {
        constants$1382.const$5.set(seg, x);
    }
    public static MemorySegment get_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1382.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_value$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1382.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_value get_value(MemorySegment segment, Arena scope) {
        return get_value.ofAddress(get_value$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_value)(struct _GTlsPassword*,unsigned char*,long,void (*)(void*));
     * }
     */
    public interface set_value {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(set_value fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1383.const$0, fi, constants$1143.const$1, scope);
        }
        static set_value ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$1383.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_value$VH() {
        return constants$1383.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_value)(struct _GTlsPassword*,unsigned char*,long,void (*)(void*));
     * }
     */
    public static MemorySegment set_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1383.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_value)(struct _GTlsPassword*,unsigned char*,long,void (*)(void*));
     * }
     */
    public static void set_value$set(MemorySegment seg, MemorySegment x) {
        constants$1383.const$2.set(seg, x);
    }
    public static MemorySegment set_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1383.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void set_value$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1383.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_value set_value(MemorySegment segment, Arena scope) {
        return set_value.ofAddress(set_value$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_default_warning)(struct _GTlsPassword*);
     * }
     */
    public interface get_default_warning {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_default_warning fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1383.const$3, fi, constants$5.const$2, scope);
        }
        static get_default_warning ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_default_warning$VH() {
        return constants$1383.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_default_warning)(struct _GTlsPassword*);
     * }
     */
    public static MemorySegment get_default_warning$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1383.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_default_warning)(struct _GTlsPassword*);
     * }
     */
    public static void get_default_warning$set(MemorySegment seg, MemorySegment x) {
        constants$1383.const$4.set(seg, x);
    }
    public static MemorySegment get_default_warning$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1383.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_default_warning$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1383.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_default_warning get_default_warning(MemorySegment segment, Arena scope) {
        return get_default_warning.ofAddress(get_default_warning$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(160, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


