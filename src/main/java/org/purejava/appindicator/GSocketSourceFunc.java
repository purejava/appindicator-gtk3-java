// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;

/**
 * {@snippet :
 * int (*GSocketSourceFunc)(struct _GSocket* socket,enum  condition,void* data);
 * }
 */
public interface GSocketSourceFunc {

    int apply(java.lang.foreign.MemorySegment datagram_based, int condition, java.lang.foreign.MemorySegment data);
    static MemorySegment allocate(GSocketSourceFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$471.GSocketSourceFunc_UP$MH, fi, constants$471.GSocketSourceFunc$FUNC, scope);
    }
    static GSocketSourceFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _datagram_based, int _condition, java.lang.foreign.MemorySegment _data) -> {
            try {
                return (int)constants$471.GSocketSourceFunc_DOWN$MH.invokeExact(symbol, _datagram_based, _condition, _data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


