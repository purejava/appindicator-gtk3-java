// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GVolumeMonitorClass {
 *     GObjectClass parent_class;
 *     void (*volume_added)(GVolumeMonitor *, GVolume *);
 *     void (*volume_removed)(GVolumeMonitor *, GVolume *);
 *     void (*volume_changed)(GVolumeMonitor *, GVolume *);
 *     void (*mount_added)(GVolumeMonitor *, GMount *);
 *     void (*mount_removed)(GVolumeMonitor *, GMount *);
 *     void (*mount_pre_unmount)(GVolumeMonitor *, GMount *);
 *     void (*mount_changed)(GVolumeMonitor *, GMount *);
 *     void (*drive_connected)(GVolumeMonitor *, GDrive *);
 *     void (*drive_disconnected)(GVolumeMonitor *, GDrive *);
 *     void (*drive_changed)(GVolumeMonitor *, GDrive *);
 *     gboolean (*is_supported)(void);
 *     GList *(*get_connected_drives)(GVolumeMonitor *);
 *     GList *(*get_volumes)(GVolumeMonitor *);
 *     GList *(*get_mounts)(GVolumeMonitor *);
 *     GVolume *(*get_volume_for_uuid)(GVolumeMonitor *, const char *);
 *     GMount *(*get_mount_for_uuid)(GVolumeMonitor *, const char *);
 *     GVolume *(*adopt_orphan_mount)(GMount *, GVolumeMonitor *);
 *     void (*drive_eject_button)(GVolumeMonitor *, GDrive *);
 *     void (*drive_stop_button)(GVolumeMonitor *, GDrive *);
 *     void (*_g_reserved1)(void);
 *     void (*_g_reserved2)(void);
 *     void (*_g_reserved3)(void);
 *     void (*_g_reserved4)(void);
 *     void (*_g_reserved5)(void);
 *     void (*_g_reserved6)(void);
 * }
 * }
 */
public class _GVolumeMonitorClass {

    _GVolumeMonitorClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("volume_added"),
        app_indicator_h.C_POINTER.withName("volume_removed"),
        app_indicator_h.C_POINTER.withName("volume_changed"),
        app_indicator_h.C_POINTER.withName("mount_added"),
        app_indicator_h.C_POINTER.withName("mount_removed"),
        app_indicator_h.C_POINTER.withName("mount_pre_unmount"),
        app_indicator_h.C_POINTER.withName("mount_changed"),
        app_indicator_h.C_POINTER.withName("drive_connected"),
        app_indicator_h.C_POINTER.withName("drive_disconnected"),
        app_indicator_h.C_POINTER.withName("drive_changed"),
        app_indicator_h.C_POINTER.withName("is_supported"),
        app_indicator_h.C_POINTER.withName("get_connected_drives"),
        app_indicator_h.C_POINTER.withName("get_volumes"),
        app_indicator_h.C_POINTER.withName("get_mounts"),
        app_indicator_h.C_POINTER.withName("get_volume_for_uuid"),
        app_indicator_h.C_POINTER.withName("get_mount_for_uuid"),
        app_indicator_h.C_POINTER.withName("adopt_orphan_mount"),
        app_indicator_h.C_POINTER.withName("drive_eject_button"),
        app_indicator_h.C_POINTER.withName("drive_stop_button"),
        app_indicator_h.C_POINTER.withName("_g_reserved1"),
        app_indicator_h.C_POINTER.withName("_g_reserved2"),
        app_indicator_h.C_POINTER.withName("_g_reserved3"),
        app_indicator_h.C_POINTER.withName("_g_reserved4"),
        app_indicator_h.C_POINTER.withName("_g_reserved5"),
        app_indicator_h.C_POINTER.withName("_g_reserved6")
    ).withName("_GVolumeMonitorClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * void (*volume_added)(GVolumeMonitor *, GVolume *)
     * }
     */
    public class volume_added {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(volume_added.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(volume_added.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout volume_added$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("volume_added"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*volume_added)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static final AddressLayout volume_added$layout() {
        return volume_added$LAYOUT;
    }

    private static final long volume_added$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*volume_added)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static final long volume_added$offset() {
        return volume_added$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*volume_added)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static MemorySegment volume_added(MemorySegment struct) {
        return struct.get(volume_added$LAYOUT, volume_added$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*volume_added)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static void volume_added(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(volume_added$LAYOUT, volume_added$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*volume_removed)(GVolumeMonitor *, GVolume *)
     * }
     */
    public class volume_removed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(volume_removed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(volume_removed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout volume_removed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("volume_removed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*volume_removed)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static final AddressLayout volume_removed$layout() {
        return volume_removed$LAYOUT;
    }

    private static final long volume_removed$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*volume_removed)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static final long volume_removed$offset() {
        return volume_removed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*volume_removed)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static MemorySegment volume_removed(MemorySegment struct) {
        return struct.get(volume_removed$LAYOUT, volume_removed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*volume_removed)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static void volume_removed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(volume_removed$LAYOUT, volume_removed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*volume_changed)(GVolumeMonitor *, GVolume *)
     * }
     */
    public class volume_changed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(volume_changed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(volume_changed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout volume_changed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("volume_changed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*volume_changed)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static final AddressLayout volume_changed$layout() {
        return volume_changed$LAYOUT;
    }

    private static final long volume_changed$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*volume_changed)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static final long volume_changed$offset() {
        return volume_changed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*volume_changed)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static MemorySegment volume_changed(MemorySegment struct) {
        return struct.get(volume_changed$LAYOUT, volume_changed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*volume_changed)(GVolumeMonitor *, GVolume *)
     * }
     */
    public static void volume_changed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(volume_changed$LAYOUT, volume_changed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*mount_added)(GVolumeMonitor *, GMount *)
     * }
     */
    public class mount_added {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(mount_added.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(mount_added.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout mount_added$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mount_added"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*mount_added)(GVolumeMonitor *, GMount *)
     * }
     */
    public static final AddressLayout mount_added$layout() {
        return mount_added$LAYOUT;
    }

    private static final long mount_added$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*mount_added)(GVolumeMonitor *, GMount *)
     * }
     */
    public static final long mount_added$offset() {
        return mount_added$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*mount_added)(GVolumeMonitor *, GMount *)
     * }
     */
    public static MemorySegment mount_added(MemorySegment struct) {
        return struct.get(mount_added$LAYOUT, mount_added$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*mount_added)(GVolumeMonitor *, GMount *)
     * }
     */
    public static void mount_added(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mount_added$LAYOUT, mount_added$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*mount_removed)(GVolumeMonitor *, GMount *)
     * }
     */
    public class mount_removed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(mount_removed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(mount_removed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout mount_removed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mount_removed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*mount_removed)(GVolumeMonitor *, GMount *)
     * }
     */
    public static final AddressLayout mount_removed$layout() {
        return mount_removed$LAYOUT;
    }

    private static final long mount_removed$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*mount_removed)(GVolumeMonitor *, GMount *)
     * }
     */
    public static final long mount_removed$offset() {
        return mount_removed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*mount_removed)(GVolumeMonitor *, GMount *)
     * }
     */
    public static MemorySegment mount_removed(MemorySegment struct) {
        return struct.get(mount_removed$LAYOUT, mount_removed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*mount_removed)(GVolumeMonitor *, GMount *)
     * }
     */
    public static void mount_removed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mount_removed$LAYOUT, mount_removed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*mount_pre_unmount)(GVolumeMonitor *, GMount *)
     * }
     */
    public class mount_pre_unmount {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(mount_pre_unmount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(mount_pre_unmount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout mount_pre_unmount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mount_pre_unmount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*mount_pre_unmount)(GVolumeMonitor *, GMount *)
     * }
     */
    public static final AddressLayout mount_pre_unmount$layout() {
        return mount_pre_unmount$LAYOUT;
    }

    private static final long mount_pre_unmount$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*mount_pre_unmount)(GVolumeMonitor *, GMount *)
     * }
     */
    public static final long mount_pre_unmount$offset() {
        return mount_pre_unmount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*mount_pre_unmount)(GVolumeMonitor *, GMount *)
     * }
     */
    public static MemorySegment mount_pre_unmount(MemorySegment struct) {
        return struct.get(mount_pre_unmount$LAYOUT, mount_pre_unmount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*mount_pre_unmount)(GVolumeMonitor *, GMount *)
     * }
     */
    public static void mount_pre_unmount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mount_pre_unmount$LAYOUT, mount_pre_unmount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*mount_changed)(GVolumeMonitor *, GMount *)
     * }
     */
    public class mount_changed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(mount_changed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(mount_changed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout mount_changed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mount_changed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*mount_changed)(GVolumeMonitor *, GMount *)
     * }
     */
    public static final AddressLayout mount_changed$layout() {
        return mount_changed$LAYOUT;
    }

    private static final long mount_changed$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*mount_changed)(GVolumeMonitor *, GMount *)
     * }
     */
    public static final long mount_changed$offset() {
        return mount_changed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*mount_changed)(GVolumeMonitor *, GMount *)
     * }
     */
    public static MemorySegment mount_changed(MemorySegment struct) {
        return struct.get(mount_changed$LAYOUT, mount_changed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*mount_changed)(GVolumeMonitor *, GMount *)
     * }
     */
    public static void mount_changed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mount_changed$LAYOUT, mount_changed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*drive_connected)(GVolumeMonitor *, GDrive *)
     * }
     */
    public class drive_connected {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(drive_connected.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(drive_connected.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout drive_connected$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("drive_connected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*drive_connected)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static final AddressLayout drive_connected$layout() {
        return drive_connected$LAYOUT;
    }

    private static final long drive_connected$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*drive_connected)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static final long drive_connected$offset() {
        return drive_connected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*drive_connected)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static MemorySegment drive_connected(MemorySegment struct) {
        return struct.get(drive_connected$LAYOUT, drive_connected$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*drive_connected)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static void drive_connected(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(drive_connected$LAYOUT, drive_connected$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*drive_disconnected)(GVolumeMonitor *, GDrive *)
     * }
     */
    public class drive_disconnected {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(drive_disconnected.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(drive_disconnected.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout drive_disconnected$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("drive_disconnected"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*drive_disconnected)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static final AddressLayout drive_disconnected$layout() {
        return drive_disconnected$LAYOUT;
    }

    private static final long drive_disconnected$OFFSET = 200;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*drive_disconnected)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static final long drive_disconnected$offset() {
        return drive_disconnected$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*drive_disconnected)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static MemorySegment drive_disconnected(MemorySegment struct) {
        return struct.get(drive_disconnected$LAYOUT, drive_disconnected$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*drive_disconnected)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static void drive_disconnected(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(drive_disconnected$LAYOUT, drive_disconnected$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*drive_changed)(GVolumeMonitor *, GDrive *)
     * }
     */
    public class drive_changed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(drive_changed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(drive_changed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout drive_changed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("drive_changed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*drive_changed)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static final AddressLayout drive_changed$layout() {
        return drive_changed$LAYOUT;
    }

    private static final long drive_changed$OFFSET = 208;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*drive_changed)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static final long drive_changed$offset() {
        return drive_changed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*drive_changed)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static MemorySegment drive_changed(MemorySegment struct) {
        return struct.get(drive_changed$LAYOUT, drive_changed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*drive_changed)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static void drive_changed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(drive_changed$LAYOUT, drive_changed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * gboolean (*is_supported)(void)
     * }
     */
    public class is_supported {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT);

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(is_supported.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(is_supported.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout is_supported$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("is_supported"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean (*is_supported)(void)
     * }
     */
    public static final AddressLayout is_supported$layout() {
        return is_supported$LAYOUT;
    }

    private static final long is_supported$OFFSET = 216;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean (*is_supported)(void)
     * }
     */
    public static final long is_supported$offset() {
        return is_supported$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean (*is_supported)(void)
     * }
     */
    public static MemorySegment is_supported(MemorySegment struct) {
        return struct.get(is_supported$LAYOUT, is_supported$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean (*is_supported)(void)
     * }
     */
    public static void is_supported(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(is_supported$LAYOUT, is_supported$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*get_connected_drives)(GVolumeMonitor *)
     * }
     */
    public class get_connected_drives {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_connected_drives.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_connected_drives.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_connected_drives$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_connected_drives"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*get_connected_drives)(GVolumeMonitor *)
     * }
     */
    public static final AddressLayout get_connected_drives$layout() {
        return get_connected_drives$LAYOUT;
    }

    private static final long get_connected_drives$OFFSET = 224;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*get_connected_drives)(GVolumeMonitor *)
     * }
     */
    public static final long get_connected_drives$offset() {
        return get_connected_drives$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*get_connected_drives)(GVolumeMonitor *)
     * }
     */
    public static MemorySegment get_connected_drives(MemorySegment struct) {
        return struct.get(get_connected_drives$LAYOUT, get_connected_drives$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*get_connected_drives)(GVolumeMonitor *)
     * }
     */
    public static void get_connected_drives(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_connected_drives$LAYOUT, get_connected_drives$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*get_volumes)(GVolumeMonitor *)
     * }
     */
    public class get_volumes {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_volumes.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_volumes.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_volumes$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_volumes"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*get_volumes)(GVolumeMonitor *)
     * }
     */
    public static final AddressLayout get_volumes$layout() {
        return get_volumes$LAYOUT;
    }

    private static final long get_volumes$OFFSET = 232;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*get_volumes)(GVolumeMonitor *)
     * }
     */
    public static final long get_volumes$offset() {
        return get_volumes$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*get_volumes)(GVolumeMonitor *)
     * }
     */
    public static MemorySegment get_volumes(MemorySegment struct) {
        return struct.get(get_volumes$LAYOUT, get_volumes$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*get_volumes)(GVolumeMonitor *)
     * }
     */
    public static void get_volumes(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_volumes$LAYOUT, get_volumes$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GList *(*get_mounts)(GVolumeMonitor *)
     * }
     */
    public class get_mounts {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_mounts.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_mounts.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_mounts$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_mounts"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GList *(*get_mounts)(GVolumeMonitor *)
     * }
     */
    public static final AddressLayout get_mounts$layout() {
        return get_mounts$LAYOUT;
    }

    private static final long get_mounts$OFFSET = 240;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GList *(*get_mounts)(GVolumeMonitor *)
     * }
     */
    public static final long get_mounts$offset() {
        return get_mounts$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GList *(*get_mounts)(GVolumeMonitor *)
     * }
     */
    public static MemorySegment get_mounts(MemorySegment struct) {
        return struct.get(get_mounts$LAYOUT, get_mounts$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GList *(*get_mounts)(GVolumeMonitor *)
     * }
     */
    public static void get_mounts(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_mounts$LAYOUT, get_mounts$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GVolume *(*get_volume_for_uuid)(GVolumeMonitor *, const char *)
     * }
     */
    public class get_volume_for_uuid {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_volume_for_uuid.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_volume_for_uuid.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_volume_for_uuid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_volume_for_uuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GVolume *(*get_volume_for_uuid)(GVolumeMonitor *, const char *)
     * }
     */
    public static final AddressLayout get_volume_for_uuid$layout() {
        return get_volume_for_uuid$LAYOUT;
    }

    private static final long get_volume_for_uuid$OFFSET = 248;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GVolume *(*get_volume_for_uuid)(GVolumeMonitor *, const char *)
     * }
     */
    public static final long get_volume_for_uuid$offset() {
        return get_volume_for_uuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GVolume *(*get_volume_for_uuid)(GVolumeMonitor *, const char *)
     * }
     */
    public static MemorySegment get_volume_for_uuid(MemorySegment struct) {
        return struct.get(get_volume_for_uuid$LAYOUT, get_volume_for_uuid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GVolume *(*get_volume_for_uuid)(GVolumeMonitor *, const char *)
     * }
     */
    public static void get_volume_for_uuid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_volume_for_uuid$LAYOUT, get_volume_for_uuid$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GMount *(*get_mount_for_uuid)(GVolumeMonitor *, const char *)
     * }
     */
    public class get_mount_for_uuid {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_mount_for_uuid.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_mount_for_uuid.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_mount_for_uuid$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_mount_for_uuid"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GMount *(*get_mount_for_uuid)(GVolumeMonitor *, const char *)
     * }
     */
    public static final AddressLayout get_mount_for_uuid$layout() {
        return get_mount_for_uuid$LAYOUT;
    }

    private static final long get_mount_for_uuid$OFFSET = 256;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GMount *(*get_mount_for_uuid)(GVolumeMonitor *, const char *)
     * }
     */
    public static final long get_mount_for_uuid$offset() {
        return get_mount_for_uuid$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GMount *(*get_mount_for_uuid)(GVolumeMonitor *, const char *)
     * }
     */
    public static MemorySegment get_mount_for_uuid(MemorySegment struct) {
        return struct.get(get_mount_for_uuid$LAYOUT, get_mount_for_uuid$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GMount *(*get_mount_for_uuid)(GVolumeMonitor *, const char *)
     * }
     */
    public static void get_mount_for_uuid(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_mount_for_uuid$LAYOUT, get_mount_for_uuid$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * GVolume *(*adopt_orphan_mount)(GMount *, GVolumeMonitor *)
     * }
     */
    public class adopt_orphan_mount {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(adopt_orphan_mount.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(adopt_orphan_mount.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout adopt_orphan_mount$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("adopt_orphan_mount"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GVolume *(*adopt_orphan_mount)(GMount *, GVolumeMonitor *)
     * }
     */
    public static final AddressLayout adopt_orphan_mount$layout() {
        return adopt_orphan_mount$LAYOUT;
    }

    private static final long adopt_orphan_mount$OFFSET = 264;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GVolume *(*adopt_orphan_mount)(GMount *, GVolumeMonitor *)
     * }
     */
    public static final long adopt_orphan_mount$offset() {
        return adopt_orphan_mount$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GVolume *(*adopt_orphan_mount)(GMount *, GVolumeMonitor *)
     * }
     */
    public static MemorySegment adopt_orphan_mount(MemorySegment struct) {
        return struct.get(adopt_orphan_mount$LAYOUT, adopt_orphan_mount$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GVolume *(*adopt_orphan_mount)(GMount *, GVolumeMonitor *)
     * }
     */
    public static void adopt_orphan_mount(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(adopt_orphan_mount$LAYOUT, adopt_orphan_mount$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*drive_eject_button)(GVolumeMonitor *, GDrive *)
     * }
     */
    public class drive_eject_button {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(drive_eject_button.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(drive_eject_button.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout drive_eject_button$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("drive_eject_button"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*drive_eject_button)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static final AddressLayout drive_eject_button$layout() {
        return drive_eject_button$LAYOUT;
    }

    private static final long drive_eject_button$OFFSET = 272;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*drive_eject_button)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static final long drive_eject_button$offset() {
        return drive_eject_button$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*drive_eject_button)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static MemorySegment drive_eject_button(MemorySegment struct) {
        return struct.get(drive_eject_button$LAYOUT, drive_eject_button$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*drive_eject_button)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static void drive_eject_button(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(drive_eject_button$LAYOUT, drive_eject_button$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*drive_stop_button)(GVolumeMonitor *, GDrive *)
     * }
     */
    public class drive_stop_button {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(drive_stop_button.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(drive_stop_button.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout drive_stop_button$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("drive_stop_button"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*drive_stop_button)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static final AddressLayout drive_stop_button$layout() {
        return drive_stop_button$LAYOUT;
    }

    private static final long drive_stop_button$OFFSET = 280;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*drive_stop_button)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static final long drive_stop_button$offset() {
        return drive_stop_button$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*drive_stop_button)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static MemorySegment drive_stop_button(MemorySegment struct) {
        return struct.get(drive_stop_button$LAYOUT, drive_stop_button$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*drive_stop_button)(GVolumeMonitor *, GDrive *)
     * }
     */
    public static void drive_stop_button(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(drive_stop_button$LAYOUT, drive_stop_button$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public class _g_reserved1 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved1.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved1.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static final AddressLayout _g_reserved1$layout() {
        return _g_reserved1$LAYOUT;
    }

    private static final long _g_reserved1$OFFSET = 288;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static final long _g_reserved1$offset() {
        return _g_reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static MemorySegment _g_reserved1(MemorySegment struct) {
        return struct.get(_g_reserved1$LAYOUT, _g_reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static void _g_reserved1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved1$LAYOUT, _g_reserved1$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public class _g_reserved2 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static final AddressLayout _g_reserved2$layout() {
        return _g_reserved2$LAYOUT;
    }

    private static final long _g_reserved2$OFFSET = 296;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static final long _g_reserved2$offset() {
        return _g_reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static MemorySegment _g_reserved2(MemorySegment struct) {
        return struct.get(_g_reserved2$LAYOUT, _g_reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static void _g_reserved2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved2$LAYOUT, _g_reserved2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public class _g_reserved3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static final AddressLayout _g_reserved3$layout() {
        return _g_reserved3$LAYOUT;
    }

    private static final long _g_reserved3$OFFSET = 304;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static final long _g_reserved3$offset() {
        return _g_reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static MemorySegment _g_reserved3(MemorySegment struct) {
        return struct.get(_g_reserved3$LAYOUT, _g_reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static void _g_reserved3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved3$LAYOUT, _g_reserved3$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved4)(void)
     * }
     */
    public class _g_reserved4 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved4.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved4.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved4$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved4"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved4)(void)
     * }
     */
    public static final AddressLayout _g_reserved4$layout() {
        return _g_reserved4$LAYOUT;
    }

    private static final long _g_reserved4$OFFSET = 312;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved4)(void)
     * }
     */
    public static final long _g_reserved4$offset() {
        return _g_reserved4$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved4)(void)
     * }
     */
    public static MemorySegment _g_reserved4(MemorySegment struct) {
        return struct.get(_g_reserved4$LAYOUT, _g_reserved4$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved4)(void)
     * }
     */
    public static void _g_reserved4(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved4$LAYOUT, _g_reserved4$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved5)(void)
     * }
     */
    public class _g_reserved5 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved5.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved5.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved5$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved5"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved5)(void)
     * }
     */
    public static final AddressLayout _g_reserved5$layout() {
        return _g_reserved5$LAYOUT;
    }

    private static final long _g_reserved5$OFFSET = 320;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved5)(void)
     * }
     */
    public static final long _g_reserved5$offset() {
        return _g_reserved5$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved5)(void)
     * }
     */
    public static MemorySegment _g_reserved5(MemorySegment struct) {
        return struct.get(_g_reserved5$LAYOUT, _g_reserved5$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved5)(void)
     * }
     */
    public static void _g_reserved5(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved5$LAYOUT, _g_reserved5$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved6)(void)
     * }
     */
    public class _g_reserved6 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved6.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved6.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved6$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved6"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved6)(void)
     * }
     */
    public static final AddressLayout _g_reserved6$layout() {
        return _g_reserved6$LAYOUT;
    }

    private static final long _g_reserved6$OFFSET = 328;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved6)(void)
     * }
     */
    public static final long _g_reserved6$offset() {
        return _g_reserved6$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved6)(void)
     * }
     */
    public static MemorySegment _g_reserved6(MemorySegment struct) {
        return struct.get(_g_reserved6$LAYOUT, _g_reserved6$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved6)(void)
     * }
     */
    public static void _g_reserved6(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved6$LAYOUT, _g_reserved6$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

