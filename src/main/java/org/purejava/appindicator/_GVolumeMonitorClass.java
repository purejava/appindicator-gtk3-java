// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GVolumeMonitorClass {
 *     struct _GObjectClass parent_class;
 *     void (*volume_added)(struct _GVolumeMonitor*,struct _GVolume*);
 *     void (*volume_removed)(struct _GVolumeMonitor*,struct _GVolume*);
 *     void (*volume_changed)(struct _GVolumeMonitor*,struct _GVolume*);
 *     void (*mount_added)(struct _GVolumeMonitor*,struct _GMount*);
 *     void (*mount_removed)(struct _GVolumeMonitor*,struct _GMount*);
 *     void (*mount_pre_unmount)(struct _GVolumeMonitor*,struct _GMount*);
 *     void (*mount_changed)(struct _GVolumeMonitor*,struct _GMount*);
 *     void (*drive_connected)(struct _GVolumeMonitor*,struct _GDrive*);
 *     void (*drive_disconnected)(struct _GVolumeMonitor*,struct _GDrive*);
 *     void (*drive_changed)(struct _GVolumeMonitor*,struct _GDrive*);
 *     int (*is_supported)();
 *     struct _GList* (*get_connected_drives)(struct _GVolumeMonitor*);
 *     struct _GList* (*get_volumes)(struct _GVolumeMonitor*);
 *     struct _GList* (*get_mounts)(struct _GVolumeMonitor*);
 *     struct _GVolume* (*get_volume_for_uuid)(struct _GVolumeMonitor*,char*);
 *     struct _GMount* (*get_mount_for_uuid)(struct _GVolumeMonitor*,char*);
 *     struct _GVolume* (*adopt_orphan_mount)(struct _GMount*,struct _GVolumeMonitor*);
 *     void (*drive_eject_button)(struct _GVolumeMonitor*,struct _GDrive*);
 *     void (*drive_stop_button)(struct _GVolumeMonitor*,struct _GDrive*);
 *     void (*_g_reserved1)();
 *     void (*_g_reserved2)();
 *     void (*_g_reserved3)();
 *     void (*_g_reserved4)();
 *     void (*_g_reserved5)();
 *     void (*_g_reserved6)();
 * };
 * }
 */
public class _GVolumeMonitorClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1184.const$4;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*volume_added)(struct _GVolumeMonitor*,struct _GVolume*);
     * }
     */
    public interface volume_added {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(volume_added fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1184.const$5, fi, constants$13.const$4, scope);
        }
        static volume_added ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle volume_added$VH() {
        return constants$1185.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*volume_added)(struct _GVolumeMonitor*,struct _GVolume*);
     * }
     */
    public static MemorySegment volume_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1185.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*volume_added)(struct _GVolumeMonitor*,struct _GVolume*);
     * }
     */
    public static void volume_added$set(MemorySegment seg, MemorySegment x) {
        constants$1185.const$0.set(seg, x);
    }
    public static MemorySegment volume_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1185.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void volume_added$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1185.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static volume_added volume_added(MemorySegment segment, Arena scope) {
        return volume_added.ofAddress(volume_added$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*volume_removed)(struct _GVolumeMonitor*,struct _GVolume*);
     * }
     */
    public interface volume_removed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(volume_removed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1185.const$1, fi, constants$13.const$4, scope);
        }
        static volume_removed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle volume_removed$VH() {
        return constants$1185.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*volume_removed)(struct _GVolumeMonitor*,struct _GVolume*);
     * }
     */
    public static MemorySegment volume_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1185.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*volume_removed)(struct _GVolumeMonitor*,struct _GVolume*);
     * }
     */
    public static void volume_removed$set(MemorySegment seg, MemorySegment x) {
        constants$1185.const$2.set(seg, x);
    }
    public static MemorySegment volume_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1185.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void volume_removed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1185.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static volume_removed volume_removed(MemorySegment segment, Arena scope) {
        return volume_removed.ofAddress(volume_removed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*volume_changed)(struct _GVolumeMonitor*,struct _GVolume*);
     * }
     */
    public interface volume_changed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(volume_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1185.const$3, fi, constants$13.const$4, scope);
        }
        static volume_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle volume_changed$VH() {
        return constants$1185.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*volume_changed)(struct _GVolumeMonitor*,struct _GVolume*);
     * }
     */
    public static MemorySegment volume_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1185.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*volume_changed)(struct _GVolumeMonitor*,struct _GVolume*);
     * }
     */
    public static void volume_changed$set(MemorySegment seg, MemorySegment x) {
        constants$1185.const$4.set(seg, x);
    }
    public static MemorySegment volume_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1185.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void volume_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1185.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static volume_changed volume_changed(MemorySegment segment, Arena scope) {
        return volume_changed.ofAddress(volume_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*mount_added)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public interface mount_added {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(mount_added fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1185.const$5, fi, constants$13.const$4, scope);
        }
        static mount_added ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mount_added$VH() {
        return constants$1186.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*mount_added)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public static MemorySegment mount_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1186.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*mount_added)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public static void mount_added$set(MemorySegment seg, MemorySegment x) {
        constants$1186.const$0.set(seg, x);
    }
    public static MemorySegment mount_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1186.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_added$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1186.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_added mount_added(MemorySegment segment, Arena scope) {
        return mount_added.ofAddress(mount_added$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*mount_removed)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public interface mount_removed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(mount_removed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1186.const$1, fi, constants$13.const$4, scope);
        }
        static mount_removed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mount_removed$VH() {
        return constants$1186.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*mount_removed)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public static MemorySegment mount_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1186.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*mount_removed)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public static void mount_removed$set(MemorySegment seg, MemorySegment x) {
        constants$1186.const$2.set(seg, x);
    }
    public static MemorySegment mount_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1186.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_removed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1186.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_removed mount_removed(MemorySegment segment, Arena scope) {
        return mount_removed.ofAddress(mount_removed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*mount_pre_unmount)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public interface mount_pre_unmount {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(mount_pre_unmount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1186.const$3, fi, constants$13.const$4, scope);
        }
        static mount_pre_unmount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mount_pre_unmount$VH() {
        return constants$1186.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*mount_pre_unmount)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public static MemorySegment mount_pre_unmount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1186.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*mount_pre_unmount)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public static void mount_pre_unmount$set(MemorySegment seg, MemorySegment x) {
        constants$1186.const$4.set(seg, x);
    }
    public static MemorySegment mount_pre_unmount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1186.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_pre_unmount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1186.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_pre_unmount mount_pre_unmount(MemorySegment segment, Arena scope) {
        return mount_pre_unmount.ofAddress(mount_pre_unmount$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*mount_changed)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public interface mount_changed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(mount_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1186.const$5, fi, constants$13.const$4, scope);
        }
        static mount_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mount_changed$VH() {
        return constants$1187.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*mount_changed)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public static MemorySegment mount_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1187.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*mount_changed)(struct _GVolumeMonitor*,struct _GMount*);
     * }
     */
    public static void mount_changed$set(MemorySegment seg, MemorySegment x) {
        constants$1187.const$0.set(seg, x);
    }
    public static MemorySegment mount_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1187.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1187.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_changed mount_changed(MemorySegment segment, Arena scope) {
        return mount_changed.ofAddress(mount_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drive_connected)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public interface drive_connected {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(drive_connected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1187.const$1, fi, constants$13.const$4, scope);
        }
        static drive_connected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drive_connected$VH() {
        return constants$1187.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drive_connected)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public static MemorySegment drive_connected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1187.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drive_connected)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public static void drive_connected$set(MemorySegment seg, MemorySegment x) {
        constants$1187.const$2.set(seg, x);
    }
    public static MemorySegment drive_connected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1187.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void drive_connected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1187.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static drive_connected drive_connected(MemorySegment segment, Arena scope) {
        return drive_connected.ofAddress(drive_connected$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drive_disconnected)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public interface drive_disconnected {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(drive_disconnected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1187.const$3, fi, constants$13.const$4, scope);
        }
        static drive_disconnected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drive_disconnected$VH() {
        return constants$1187.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drive_disconnected)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public static MemorySegment drive_disconnected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1187.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drive_disconnected)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public static void drive_disconnected$set(MemorySegment seg, MemorySegment x) {
        constants$1187.const$4.set(seg, x);
    }
    public static MemorySegment drive_disconnected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1187.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void drive_disconnected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1187.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static drive_disconnected drive_disconnected(MemorySegment segment, Arena scope) {
        return drive_disconnected.ofAddress(drive_disconnected$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drive_changed)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public interface drive_changed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(drive_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1187.const$5, fi, constants$13.const$4, scope);
        }
        static drive_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drive_changed$VH() {
        return constants$1188.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drive_changed)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public static MemorySegment drive_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1188.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drive_changed)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public static void drive_changed$set(MemorySegment seg, MemorySegment x) {
        constants$1188.const$0.set(seg, x);
    }
    public static MemorySegment drive_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1188.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void drive_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1188.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static drive_changed drive_changed(MemorySegment segment, Arena scope) {
        return drive_changed.ofAddress(drive_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*is_supported)();
     * }
     */
    public interface is_supported {

        int apply();
        static MemorySegment allocate(is_supported fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1188.const$1, fi, constants$83.const$1, scope);
        }
        static is_supported ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    return (int)constants$1188.const$2.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_supported$VH() {
        return constants$1188.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_supported)();
     * }
     */
    public static MemorySegment is_supported$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1188.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_supported)();
     * }
     */
    public static void is_supported$set(MemorySegment seg, MemorySegment x) {
        constants$1188.const$3.set(seg, x);
    }
    public static MemorySegment is_supported$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1188.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void is_supported$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1188.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_supported is_supported(MemorySegment segment, Arena scope) {
        return is_supported.ofAddress(is_supported$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*get_connected_drives)(struct _GVolumeMonitor*);
     * }
     */
    public interface get_connected_drives {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_connected_drives fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1188.const$4, fi, constants$5.const$2, scope);
        }
        static get_connected_drives ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_connected_drives$VH() {
        return constants$1188.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*get_connected_drives)(struct _GVolumeMonitor*);
     * }
     */
    public static MemorySegment get_connected_drives$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1188.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*get_connected_drives)(struct _GVolumeMonitor*);
     * }
     */
    public static void get_connected_drives$set(MemorySegment seg, MemorySegment x) {
        constants$1188.const$5.set(seg, x);
    }
    public static MemorySegment get_connected_drives$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1188.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_connected_drives$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1188.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_connected_drives get_connected_drives(MemorySegment segment, Arena scope) {
        return get_connected_drives.ofAddress(get_connected_drives$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*get_volumes)(struct _GVolumeMonitor*);
     * }
     */
    public interface get_volumes {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_volumes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1189.const$0, fi, constants$5.const$2, scope);
        }
        static get_volumes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_volumes$VH() {
        return constants$1189.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*get_volumes)(struct _GVolumeMonitor*);
     * }
     */
    public static MemorySegment get_volumes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1189.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*get_volumes)(struct _GVolumeMonitor*);
     * }
     */
    public static void get_volumes$set(MemorySegment seg, MemorySegment x) {
        constants$1189.const$1.set(seg, x);
    }
    public static MemorySegment get_volumes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1189.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_volumes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1189.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_volumes get_volumes(MemorySegment segment, Arena scope) {
        return get_volumes.ofAddress(get_volumes$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*get_mounts)(struct _GVolumeMonitor*);
     * }
     */
    public interface get_mounts {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_mounts fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1189.const$2, fi, constants$5.const$2, scope);
        }
        static get_mounts ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_mounts$VH() {
        return constants$1189.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*get_mounts)(struct _GVolumeMonitor*);
     * }
     */
    public static MemorySegment get_mounts$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1189.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*get_mounts)(struct _GVolumeMonitor*);
     * }
     */
    public static void get_mounts$set(MemorySegment seg, MemorySegment x) {
        constants$1189.const$3.set(seg, x);
    }
    public static MemorySegment get_mounts$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1189.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mounts$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1189.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mounts get_mounts(MemorySegment segment, Arena scope) {
        return get_mounts.ofAddress(get_mounts$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GVolume* (*get_volume_for_uuid)(struct _GVolumeMonitor*,char*);
     * }
     */
    public interface get_volume_for_uuid {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_volume_for_uuid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1189.const$4, fi, constants$5.const$5, scope);
        }
        static get_volume_for_uuid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_volume_for_uuid$VH() {
        return constants$1189.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GVolume* (*get_volume_for_uuid)(struct _GVolumeMonitor*,char*);
     * }
     */
    public static MemorySegment get_volume_for_uuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1189.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GVolume* (*get_volume_for_uuid)(struct _GVolumeMonitor*,char*);
     * }
     */
    public static void get_volume_for_uuid$set(MemorySegment seg, MemorySegment x) {
        constants$1189.const$5.set(seg, x);
    }
    public static MemorySegment get_volume_for_uuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1189.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_volume_for_uuid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1189.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_volume_for_uuid get_volume_for_uuid(MemorySegment segment, Arena scope) {
        return get_volume_for_uuid.ofAddress(get_volume_for_uuid$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GMount* (*get_mount_for_uuid)(struct _GVolumeMonitor*,char*);
     * }
     */
    public interface get_mount_for_uuid {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_mount_for_uuid fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1190.const$0, fi, constants$5.const$5, scope);
        }
        static get_mount_for_uuid ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_mount_for_uuid$VH() {
        return constants$1190.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GMount* (*get_mount_for_uuid)(struct _GVolumeMonitor*,char*);
     * }
     */
    public static MemorySegment get_mount_for_uuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1190.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GMount* (*get_mount_for_uuid)(struct _GVolumeMonitor*,char*);
     * }
     */
    public static void get_mount_for_uuid$set(MemorySegment seg, MemorySegment x) {
        constants$1190.const$1.set(seg, x);
    }
    public static MemorySegment get_mount_for_uuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1190.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mount_for_uuid$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1190.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mount_for_uuid get_mount_for_uuid(MemorySegment segment, Arena scope) {
        return get_mount_for_uuid.ofAddress(get_mount_for_uuid$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GVolume* (*adopt_orphan_mount)(struct _GMount*,struct _GVolumeMonitor*);
     * }
     */
    public interface adopt_orphan_mount {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(adopt_orphan_mount fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1190.const$2, fi, constants$5.const$5, scope);
        }
        static adopt_orphan_mount ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle adopt_orphan_mount$VH() {
        return constants$1190.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GVolume* (*adopt_orphan_mount)(struct _GMount*,struct _GVolumeMonitor*);
     * }
     */
    public static MemorySegment adopt_orphan_mount$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1190.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GVolume* (*adopt_orphan_mount)(struct _GMount*,struct _GVolumeMonitor*);
     * }
     */
    public static void adopt_orphan_mount$set(MemorySegment seg, MemorySegment x) {
        constants$1190.const$3.set(seg, x);
    }
    public static MemorySegment adopt_orphan_mount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1190.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void adopt_orphan_mount$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1190.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static adopt_orphan_mount adopt_orphan_mount(MemorySegment segment, Arena scope) {
        return adopt_orphan_mount.ofAddress(adopt_orphan_mount$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drive_eject_button)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public interface drive_eject_button {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(drive_eject_button fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1190.const$4, fi, constants$13.const$4, scope);
        }
        static drive_eject_button ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drive_eject_button$VH() {
        return constants$1190.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drive_eject_button)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public static MemorySegment drive_eject_button$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1190.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drive_eject_button)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public static void drive_eject_button$set(MemorySegment seg, MemorySegment x) {
        constants$1190.const$5.set(seg, x);
    }
    public static MemorySegment drive_eject_button$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1190.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void drive_eject_button$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1190.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static drive_eject_button drive_eject_button(MemorySegment segment, Arena scope) {
        return drive_eject_button.ofAddress(drive_eject_button$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drive_stop_button)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public interface drive_stop_button {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(drive_stop_button fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1191.const$0, fi, constants$13.const$4, scope);
        }
        static drive_stop_button ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drive_stop_button$VH() {
        return constants$1191.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drive_stop_button)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public static MemorySegment drive_stop_button$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1191.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drive_stop_button)(struct _GVolumeMonitor*,struct _GDrive*);
     * }
     */
    public static void drive_stop_button$set(MemorySegment seg, MemorySegment x) {
        constants$1191.const$1.set(seg, x);
    }
    public static MemorySegment drive_stop_button$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1191.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void drive_stop_button$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1191.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static drive_stop_button drive_stop_button(MemorySegment segment, Arena scope) {
        return drive_stop_button.ofAddress(drive_stop_button$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved1)();
     * }
     */
    public interface _g_reserved1 {

        void apply();
        static MemorySegment allocate(_g_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1191.const$2, fi, constants$7.const$5, scope);
        }
        static _g_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved1$VH() {
        return constants$1191.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static MemorySegment _g_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1191.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static void _g_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$1191.const$3.set(seg, x);
    }
    public static MemorySegment _g_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1191.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1191.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved1 _g_reserved1(MemorySegment segment, Arena scope) {
        return _g_reserved1.ofAddress(_g_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved2)();
     * }
     */
    public interface _g_reserved2 {

        void apply();
        static MemorySegment allocate(_g_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1191.const$4, fi, constants$7.const$5, scope);
        }
        static _g_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved2$VH() {
        return constants$1191.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static MemorySegment _g_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1191.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static void _g_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$1191.const$5.set(seg, x);
    }
    public static MemorySegment _g_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1191.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1191.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved2 _g_reserved2(MemorySegment segment, Arena scope) {
        return _g_reserved2.ofAddress(_g_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved3)();
     * }
     */
    public interface _g_reserved3 {

        void apply();
        static MemorySegment allocate(_g_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1192.const$0, fi, constants$7.const$5, scope);
        }
        static _g_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved3$VH() {
        return constants$1192.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static MemorySegment _g_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1192.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static void _g_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$1192.const$1.set(seg, x);
    }
    public static MemorySegment _g_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1192.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1192.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved3 _g_reserved3(MemorySegment segment, Arena scope) {
        return _g_reserved3.ofAddress(_g_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved4)();
     * }
     */
    public interface _g_reserved4 {

        void apply();
        static MemorySegment allocate(_g_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1192.const$2, fi, constants$7.const$5, scope);
        }
        static _g_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved4$VH() {
        return constants$1192.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static MemorySegment _g_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1192.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static void _g_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$1192.const$3.set(seg, x);
    }
    public static MemorySegment _g_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1192.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1192.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved4 _g_reserved4(MemorySegment segment, Arena scope) {
        return _g_reserved4.ofAddress(_g_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved5)();
     * }
     */
    public interface _g_reserved5 {

        void apply();
        static MemorySegment allocate(_g_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1192.const$4, fi, constants$7.const$5, scope);
        }
        static _g_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved5$VH() {
        return constants$1192.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static MemorySegment _g_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1192.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static void _g_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$1192.const$5.set(seg, x);
    }
    public static MemorySegment _g_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1192.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1192.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved5 _g_reserved5(MemorySegment segment, Arena scope) {
        return _g_reserved5.ofAddress(_g_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved6)();
     * }
     */
    public interface _g_reserved6 {

        void apply();
        static MemorySegment allocate(_g_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1193.const$0, fi, constants$7.const$5, scope);
        }
        static _g_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved6$VH() {
        return constants$1193.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved6)();
     * }
     */
    public static MemorySegment _g_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1193.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved6)();
     * }
     */
    public static void _g_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$1193.const$1.set(seg, x);
    }
    public static MemorySegment _g_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1193.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1193.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved6 _g_reserved6(MemorySegment segment, Arena scope) {
        return _g_reserved6.ofAddress(_g_reserved6$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


