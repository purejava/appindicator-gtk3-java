// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.*;

/**
 * {@snippet :
 * int (*GSettingsGetMapping)(struct _GVariant* value,void** result,void* user_data);
 * }
 */
public interface GSettingsGetMapping {

    int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(GSettingsGetMapping fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$751.GSettingsGetMapping_UP$MH, fi, constants$751.GSettingsGetMapping$FUNC, scope);
    }
    static GSettingsGetMapping ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                return (int)constants$751.GSettingsGetMapping_DOWN$MH.invokeExact(symbol, _a, _b, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


