// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct siginfo_t {
 *     int si_signo;
 *     int si_errno;
 *     int si_code;
 *     int __pad0;
 *     union  _sifields;
 * };
 * }
 */
public class siginfo_t {

    public static MemoryLayout $LAYOUT() {
        return constants$114.const$4;
    }
    public static VarHandle si_signo$VH() {
        return constants$114.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int si_signo;
     * }
     */
    public static int si_signo$get(MemorySegment seg) {
        return (int)constants$114.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int si_signo;
     * }
     */
    public static void si_signo$set(MemorySegment seg, int x) {
        constants$114.const$5.set(seg, x);
    }
    public static int si_signo$get(MemorySegment seg, long index) {
        return (int)constants$114.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void si_signo$set(MemorySegment seg, long index, int x) {
        constants$114.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle si_errno$VH() {
        return constants$115.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int si_errno;
     * }
     */
    public static int si_errno$get(MemorySegment seg) {
        return (int)constants$115.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int si_errno;
     * }
     */
    public static void si_errno$set(MemorySegment seg, int x) {
        constants$115.const$0.set(seg, x);
    }
    public static int si_errno$get(MemorySegment seg, long index) {
        return (int)constants$115.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void si_errno$set(MemorySegment seg, long index, int x) {
        constants$115.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle si_code$VH() {
        return constants$115.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int si_code;
     * }
     */
    public static int si_code$get(MemorySegment seg) {
        return (int)constants$115.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int si_code;
     * }
     */
    public static void si_code$set(MemorySegment seg, int x) {
        constants$115.const$1.set(seg, x);
    }
    public static int si_code$get(MemorySegment seg, long index) {
        return (int)constants$115.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void si_code$set(MemorySegment seg, long index, int x) {
        constants$115.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle __pad0$VH() {
        return constants$115.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int __pad0;
     * }
     */
    public static int __pad0$get(MemorySegment seg) {
        return (int)constants$115.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int __pad0;
     * }
     */
    public static void __pad0$set(MemorySegment seg, int x) {
        constants$115.const$2.set(seg, x);
    }
    public static int __pad0$get(MemorySegment seg, long index) {
        return (int)constants$115.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void __pad0$set(MemorySegment seg, long index, int x) {
        constants$115.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
     * union {
     *     int _pad[28];
     *     struct  _kill;
     *     struct  _timer;
     *     struct  _rt;
     *     struct  _sigchld;
     *     struct  _sigfault;
     *     struct  _sigpoll;
     *     struct  _sigsys;
     * };
     * }
     */
    public static final class _sifields {

        // Suppresses default constructor, ensuring non-instantiability.
        private _sifields() {}
        public static MemoryLayout $LAYOUT() {
            return constants$115.const$3;
        }
        public static MemorySegment _pad$slice(MemorySegment seg) {
            return seg.asSlice(0, 112);
        }
        /**
         * {@snippet :
         * struct {
         *     int si_pid;
         *     unsigned int si_uid;
         * };
         * }
         */
        public static final class _kill {

            // Suppresses default constructor, ensuring non-instantiability.
            private _kill() {}
            public static MemoryLayout $LAYOUT() {
                return constants$115.const$4;
            }
            public static VarHandle si_pid$VH() {
                return constants$115.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * int si_pid;
             * }
             */
            public static int si_pid$get(MemorySegment seg) {
                return (int)constants$115.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * int si_pid;
             * }
             */
            public static void si_pid$set(MemorySegment seg, int x) {
                constants$115.const$5.set(seg, x);
            }
            public static int si_pid$get(MemorySegment seg, long index) {
                return (int)constants$115.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void si_pid$set(MemorySegment seg, long index, int x) {
                constants$115.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle si_uid$VH() {
                return constants$116.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * unsigned int si_uid;
             * }
             */
            public static int si_uid$get(MemorySegment seg) {
                return (int)constants$116.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * unsigned int si_uid;
             * }
             */
            public static void si_uid$set(MemorySegment seg, int x) {
                constants$116.const$0.set(seg, x);
            }
            public static int si_uid$get(MemorySegment seg, long index) {
                return (int)constants$116.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void si_uid$set(MemorySegment seg, long index, int x) {
                constants$116.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment _kill$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        /**
         * {@snippet :
         * struct {
         *     int si_tid;
         *     int si_overrun;
         *     union sigval si_sigval;
         * };
         * }
         */
        public static final class _timer {

            // Suppresses default constructor, ensuring non-instantiability.
            private _timer() {}
            public static MemoryLayout $LAYOUT() {
                return constants$116.const$1;
            }
            public static VarHandle si_tid$VH() {
                return constants$116.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * int si_tid;
             * }
             */
            public static int si_tid$get(MemorySegment seg) {
                return (int)constants$116.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * int si_tid;
             * }
             */
            public static void si_tid$set(MemorySegment seg, int x) {
                constants$116.const$2.set(seg, x);
            }
            public static int si_tid$get(MemorySegment seg, long index) {
                return (int)constants$116.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void si_tid$set(MemorySegment seg, long index, int x) {
                constants$116.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle si_overrun$VH() {
                return constants$116.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * int si_overrun;
             * }
             */
            public static int si_overrun$get(MemorySegment seg) {
                return (int)constants$116.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * int si_overrun;
             * }
             */
            public static void si_overrun$set(MemorySegment seg, int x) {
                constants$116.const$3.set(seg, x);
            }
            public static int si_overrun$get(MemorySegment seg, long index) {
                return (int)constants$116.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void si_overrun$set(MemorySegment seg, long index, int x) {
                constants$116.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment si_sigval$slice(MemorySegment seg) {
                return seg.asSlice(8, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment _timer$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        /**
         * {@snippet :
         * struct {
         *     int si_pid;
         *     unsigned int si_uid;
         *     union sigval si_sigval;
         * };
         * }
         */
        public static final class _rt {

            // Suppresses default constructor, ensuring non-instantiability.
            private _rt() {}
            public static MemoryLayout $LAYOUT() {
                return constants$116.const$4;
            }
            public static VarHandle si_pid$VH() {
                return constants$116.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * int si_pid;
             * }
             */
            public static int si_pid$get(MemorySegment seg) {
                return (int)constants$116.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * int si_pid;
             * }
             */
            public static void si_pid$set(MemorySegment seg, int x) {
                constants$116.const$5.set(seg, x);
            }
            public static int si_pid$get(MemorySegment seg, long index) {
                return (int)constants$116.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void si_pid$set(MemorySegment seg, long index, int x) {
                constants$116.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle si_uid$VH() {
                return constants$117.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * unsigned int si_uid;
             * }
             */
            public static int si_uid$get(MemorySegment seg) {
                return (int)constants$117.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * unsigned int si_uid;
             * }
             */
            public static void si_uid$set(MemorySegment seg, int x) {
                constants$117.const$0.set(seg, x);
            }
            public static int si_uid$get(MemorySegment seg, long index) {
                return (int)constants$117.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void si_uid$set(MemorySegment seg, long index, int x) {
                constants$117.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment si_sigval$slice(MemorySegment seg) {
                return seg.asSlice(8, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment _rt$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        /**
         * {@snippet :
         * struct {
         *     int si_pid;
         *     unsigned int si_uid;
         *     int si_status;
         *     long si_utime;
         *     long si_stime;
         * };
         * }
         */
        public static final class _sigchld {

            // Suppresses default constructor, ensuring non-instantiability.
            private _sigchld() {}
            public static MemoryLayout $LAYOUT() {
                return constants$117.const$1;
            }
            public static VarHandle si_pid$VH() {
                return constants$117.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * int si_pid;
             * }
             */
            public static int si_pid$get(MemorySegment seg) {
                return (int)constants$117.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * int si_pid;
             * }
             */
            public static void si_pid$set(MemorySegment seg, int x) {
                constants$117.const$2.set(seg, x);
            }
            public static int si_pid$get(MemorySegment seg, long index) {
                return (int)constants$117.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void si_pid$set(MemorySegment seg, long index, int x) {
                constants$117.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle si_uid$VH() {
                return constants$117.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * unsigned int si_uid;
             * }
             */
            public static int si_uid$get(MemorySegment seg) {
                return (int)constants$117.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * unsigned int si_uid;
             * }
             */
            public static void si_uid$set(MemorySegment seg, int x) {
                constants$117.const$3.set(seg, x);
            }
            public static int si_uid$get(MemorySegment seg, long index) {
                return (int)constants$117.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void si_uid$set(MemorySegment seg, long index, int x) {
                constants$117.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle si_status$VH() {
                return constants$117.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * int si_status;
             * }
             */
            public static int si_status$get(MemorySegment seg) {
                return (int)constants$117.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * int si_status;
             * }
             */
            public static void si_status$set(MemorySegment seg, int x) {
                constants$117.const$4.set(seg, x);
            }
            public static int si_status$get(MemorySegment seg, long index) {
                return (int)constants$117.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void si_status$set(MemorySegment seg, long index, int x) {
                constants$117.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle si_utime$VH() {
                return constants$117.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * long si_utime;
             * }
             */
            public static long si_utime$get(MemorySegment seg) {
                return (long)constants$117.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * long si_utime;
             * }
             */
            public static void si_utime$set(MemorySegment seg, long x) {
                constants$117.const$5.set(seg, x);
            }
            public static long si_utime$get(MemorySegment seg, long index) {
                return (long)constants$117.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void si_utime$set(MemorySegment seg, long index, long x) {
                constants$117.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle si_stime$VH() {
                return constants$118.const$0;
            }
            /**
             * Getter for field:
             * {@snippet :
             * long si_stime;
             * }
             */
            public static long si_stime$get(MemorySegment seg) {
                return (long)constants$118.const$0.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * long si_stime;
             * }
             */
            public static void si_stime$set(MemorySegment seg, long x) {
                constants$118.const$0.set(seg, x);
            }
            public static long si_stime$get(MemorySegment seg, long index) {
                return (long)constants$118.const$0.get(seg.asSlice(index*sizeof()));
            }
            public static void si_stime$set(MemorySegment seg, long index, long x) {
                constants$118.const$0.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment _sigchld$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        /**
         * {@snippet :
         * struct {
         *     void* si_addr;
         *     short si_addr_lsb;
         *     union  _bounds;
         * };
         * }
         */
        public static final class _sigfault {

            // Suppresses default constructor, ensuring non-instantiability.
            private _sigfault() {}
            public static MemoryLayout $LAYOUT() {
                return constants$118.const$1;
            }
            public static VarHandle si_addr$VH() {
                return constants$118.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * void* si_addr;
             * }
             */
            public static MemorySegment si_addr$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$118.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * void* si_addr;
             * }
             */
            public static void si_addr$set(MemorySegment seg, MemorySegment x) {
                constants$118.const$2.set(seg, x);
            }
            public static MemorySegment si_addr$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$118.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void si_addr$set(MemorySegment seg, long index, MemorySegment x) {
                constants$118.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle si_addr_lsb$VH() {
                return constants$118.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * short si_addr_lsb;
             * }
             */
            public static short si_addr_lsb$get(MemorySegment seg) {
                return (short)constants$118.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * short si_addr_lsb;
             * }
             */
            public static void si_addr_lsb$set(MemorySegment seg, short x) {
                constants$118.const$3.set(seg, x);
            }
            public static short si_addr_lsb$get(MemorySegment seg, long index) {
                return (short)constants$118.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void si_addr_lsb$set(MemorySegment seg, long index, short x) {
                constants$118.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            /**
             * {@snippet :
             * union {
             *     struct  _addr_bnd;
             *     unsigned int _pkey;
             * };
             * }
             */
            public static final class _bounds {

                // Suppresses default constructor, ensuring non-instantiability.
                private _bounds() {}
                public static MemoryLayout $LAYOUT() {
                    return constants$118.const$4;
                }
                /**
                 * {@snippet :
                 * struct {
                 *     void* _lower;
                 *     void* _upper;
                 * };
                 * }
                 */
                public static final class _addr_bnd {

                    // Suppresses default constructor, ensuring non-instantiability.
                    private _addr_bnd() {}
                    public static MemoryLayout $LAYOUT() {
                        return constants$118.const$5;
                    }
                    public static VarHandle _lower$VH() {
                        return constants$119.const$0;
                    }
                    /**
                     * Getter for field:
                     * {@snippet :
                     * void* _lower;
                     * }
                     */
                    public static MemorySegment _lower$get(MemorySegment seg) {
                        return (java.lang.foreign.MemorySegment)constants$119.const$0.get(seg);
                    }
                    /**
                     * Setter for field:
                     * {@snippet :
                     * void* _lower;
                     * }
                     */
                    public static void _lower$set(MemorySegment seg, MemorySegment x) {
                        constants$119.const$0.set(seg, x);
                    }
                    public static MemorySegment _lower$get(MemorySegment seg, long index) {
                        return (java.lang.foreign.MemorySegment)constants$119.const$0.get(seg.asSlice(index*sizeof()));
                    }
                    public static void _lower$set(MemorySegment seg, long index, MemorySegment x) {
                        constants$119.const$0.set(seg.asSlice(index*sizeof()), x);
                    }
                    public static VarHandle _upper$VH() {
                        return constants$119.const$1;
                    }
                    /**
                     * Getter for field:
                     * {@snippet :
                     * void* _upper;
                     * }
                     */
                    public static MemorySegment _upper$get(MemorySegment seg) {
                        return (java.lang.foreign.MemorySegment)constants$119.const$1.get(seg);
                    }
                    /**
                     * Setter for field:
                     * {@snippet :
                     * void* _upper;
                     * }
                     */
                    public static void _upper$set(MemorySegment seg, MemorySegment x) {
                        constants$119.const$1.set(seg, x);
                    }
                    public static MemorySegment _upper$get(MemorySegment seg, long index) {
                        return (java.lang.foreign.MemorySegment)constants$119.const$1.get(seg.asSlice(index*sizeof()));
                    }
                    public static void _upper$set(MemorySegment seg, long index, MemorySegment x) {
                        constants$119.const$1.set(seg.asSlice(index*sizeof()), x);
                    }
                    public static long sizeof() { return $LAYOUT().byteSize(); }
                    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                    }
                    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
                }

                public static MemorySegment _addr_bnd$slice(MemorySegment seg) {
                    return seg.asSlice(0, 16);
                }
                public static VarHandle _pkey$VH() {
                    return constants$119.const$2;
                }
                /**
                 * Getter for field:
                 * {@snippet :
                 * unsigned int _pkey;
                 * }
                 */
                public static int _pkey$get(MemorySegment seg) {
                    return (int)constants$119.const$2.get(seg);
                }
                /**
                 * Setter for field:
                 * {@snippet :
                 * unsigned int _pkey;
                 * }
                 */
                public static void _pkey$set(MemorySegment seg, int x) {
                    constants$119.const$2.set(seg, x);
                }
                public static int _pkey$get(MemorySegment seg, long index) {
                    return (int)constants$119.const$2.get(seg.asSlice(index*sizeof()));
                }
                public static void _pkey$set(MemorySegment seg, long index, int x) {
                    constants$119.const$2.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
            }

            public static MemorySegment _bounds$slice(MemorySegment seg) {
                return seg.asSlice(16, 16);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment _sigfault$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        /**
         * {@snippet :
         * struct {
         *     long si_band;
         *     int si_fd;
         * };
         * }
         */
        public static final class _sigpoll {

            // Suppresses default constructor, ensuring non-instantiability.
            private _sigpoll() {}
            public static MemoryLayout $LAYOUT() {
                return constants$119.const$3;
            }
            public static VarHandle si_band$VH() {
                return constants$119.const$4;
            }
            /**
             * Getter for field:
             * {@snippet :
             * long si_band;
             * }
             */
            public static long si_band$get(MemorySegment seg) {
                return (long)constants$119.const$4.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * long si_band;
             * }
             */
            public static void si_band$set(MemorySegment seg, long x) {
                constants$119.const$4.set(seg, x);
            }
            public static long si_band$get(MemorySegment seg, long index) {
                return (long)constants$119.const$4.get(seg.asSlice(index*sizeof()));
            }
            public static void si_band$set(MemorySegment seg, long index, long x) {
                constants$119.const$4.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle si_fd$VH() {
                return constants$119.const$5;
            }
            /**
             * Getter for field:
             * {@snippet :
             * int si_fd;
             * }
             */
            public static int si_fd$get(MemorySegment seg) {
                return (int)constants$119.const$5.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * int si_fd;
             * }
             */
            public static void si_fd$set(MemorySegment seg, int x) {
                constants$119.const$5.set(seg, x);
            }
            public static int si_fd$get(MemorySegment seg, long index) {
                return (int)constants$119.const$5.get(seg.asSlice(index*sizeof()));
            }
            public static void si_fd$set(MemorySegment seg, long index, int x) {
                constants$119.const$5.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment _sigpoll$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        /**
         * {@snippet :
         * struct {
         *     void* _call_addr;
         *     int _syscall;
         *     unsigned int _arch;
         * };
         * }
         */
        public static final class _sigsys {

            // Suppresses default constructor, ensuring non-instantiability.
            private _sigsys() {}
            public static MemoryLayout $LAYOUT() {
                return constants$120.const$0;
            }
            public static VarHandle _call_addr$VH() {
                return constants$120.const$1;
            }
            /**
             * Getter for field:
             * {@snippet :
             * void* _call_addr;
             * }
             */
            public static MemorySegment _call_addr$get(MemorySegment seg) {
                return (java.lang.foreign.MemorySegment)constants$120.const$1.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * void* _call_addr;
             * }
             */
            public static void _call_addr$set(MemorySegment seg, MemorySegment x) {
                constants$120.const$1.set(seg, x);
            }
            public static MemorySegment _call_addr$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemorySegment)constants$120.const$1.get(seg.asSlice(index*sizeof()));
            }
            public static void _call_addr$set(MemorySegment seg, long index, MemorySegment x) {
                constants$120.const$1.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle _syscall$VH() {
                return constants$120.const$2;
            }
            /**
             * Getter for field:
             * {@snippet :
             * int _syscall;
             * }
             */
            public static int _syscall$get(MemorySegment seg) {
                return (int)constants$120.const$2.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * int _syscall;
             * }
             */
            public static void _syscall$set(MemorySegment seg, int x) {
                constants$120.const$2.set(seg, x);
            }
            public static int _syscall$get(MemorySegment seg, long index) {
                return (int)constants$120.const$2.get(seg.asSlice(index*sizeof()));
            }
            public static void _syscall$set(MemorySegment seg, long index, int x) {
                constants$120.const$2.set(seg.asSlice(index*sizeof()), x);
            }
            public static VarHandle _arch$VH() {
                return constants$120.const$3;
            }
            /**
             * Getter for field:
             * {@snippet :
             * unsigned int _arch;
             * }
             */
            public static int _arch$get(MemorySegment seg) {
                return (int)constants$120.const$3.get(seg);
            }
            /**
             * Setter for field:
             * {@snippet :
             * unsigned int _arch;
             * }
             */
            public static void _arch$set(MemorySegment seg, int x) {
                constants$120.const$3.set(seg, x);
            }
            public static int _arch$get(MemorySegment seg, long index) {
                return (int)constants$120.const$3.get(seg.asSlice(index*sizeof()));
            }
            public static void _arch$set(MemorySegment seg, long index, int x) {
                constants$120.const$3.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
        }

        public static MemorySegment _sigsys$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment _sifields$slice(MemorySegment seg) {
        return seg.asSlice(16, 112);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


