// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * void (*g_file_measure_disk_usage$progress_callback)(int,unsigned long,unsigned long,unsigned long,void*);
 * }
 */
public interface g_file_measure_disk_usage$progress_callback {

    void apply(int reporting, long current_size, long num_dirs, long num_files, java.lang.foreign.MemorySegment data);
    static MemorySegment allocate(g_file_measure_disk_usage$progress_callback fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$1034.const$3, fi, constants$694.const$0, scope);
    }
    static g_file_measure_disk_usage$progress_callback ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _reporting, long _current_size, long _num_dirs, long _num_files, java.lang.foreign.MemorySegment _data) -> {
            try {
                constants$694.const$2.invokeExact(symbol, _reporting, _current_size, _num_dirs, _num_files, _data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


