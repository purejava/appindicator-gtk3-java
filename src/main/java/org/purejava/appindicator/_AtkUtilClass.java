// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _AtkUtilClass {
 *     GObjectClass parent;
 *     guint (*add_global_event_listener)(GSignalEmissionHook, const gchar *);
 *     void (*remove_global_event_listener)(guint);
 *     guint (*add_key_event_listener)(AtkKeySnoopFunc, gpointer);
 *     void (*remove_key_event_listener)(guint);
 *     AtkObject *(*get_root)(void);
 *     const gchar *(*get_toolkit_name)(void);
 *     const gchar *(*get_toolkit_version)(void);
 * }
 * }
 */
public class _AtkUtilClass {

    _AtkUtilClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent"),
        app_indicator_h.C_POINTER.withName("add_global_event_listener"),
        app_indicator_h.C_POINTER.withName("remove_global_event_listener"),
        app_indicator_h.C_POINTER.withName("add_key_event_listener"),
        app_indicator_h.C_POINTER.withName("remove_key_event_listener"),
        app_indicator_h.C_POINTER.withName("get_root"),
        app_indicator_h.C_POINTER.withName("get_toolkit_name"),
        app_indicator_h.C_POINTER.withName("get_toolkit_version")
    ).withName("_AtkUtilClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent
     * }
     */
    public static final GroupLayout parent$layout() {
        return parent$LAYOUT;
    }

    private static final long parent$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent
     * }
     */
    public static final long parent$offset() {
        return parent$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent
     * }
     */
    public static MemorySegment parent(MemorySegment struct) {
        return struct.asSlice(parent$OFFSET, parent$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent
     * }
     */
    public static void parent(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent$OFFSET, parent$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * guint (*add_global_event_listener)(GSignalEmissionHook, const gchar *)
     * }
     */
    public class add_global_event_listener {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(add_global_event_listener.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(add_global_event_listener.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout add_global_event_listener$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("add_global_event_listener"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint (*add_global_event_listener)(GSignalEmissionHook, const gchar *)
     * }
     */
    public static final AddressLayout add_global_event_listener$layout() {
        return add_global_event_listener$LAYOUT;
    }

    private static final long add_global_event_listener$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint (*add_global_event_listener)(GSignalEmissionHook, const gchar *)
     * }
     */
    public static final long add_global_event_listener$offset() {
        return add_global_event_listener$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint (*add_global_event_listener)(GSignalEmissionHook, const gchar *)
     * }
     */
    public static MemorySegment add_global_event_listener(MemorySegment struct) {
        return struct.get(add_global_event_listener$LAYOUT, add_global_event_listener$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint (*add_global_event_listener)(GSignalEmissionHook, const gchar *)
     * }
     */
    public static void add_global_event_listener(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(add_global_event_listener$LAYOUT, add_global_event_listener$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*remove_global_event_listener)(guint)
     * }
     */
    public class remove_global_event_listener {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(remove_global_event_listener.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(remove_global_event_listener.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,int _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout remove_global_event_listener$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("remove_global_event_listener"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*remove_global_event_listener)(guint)
     * }
     */
    public static final AddressLayout remove_global_event_listener$layout() {
        return remove_global_event_listener$LAYOUT;
    }

    private static final long remove_global_event_listener$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*remove_global_event_listener)(guint)
     * }
     */
    public static final long remove_global_event_listener$offset() {
        return remove_global_event_listener$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*remove_global_event_listener)(guint)
     * }
     */
    public static MemorySegment remove_global_event_listener(MemorySegment struct) {
        return struct.get(remove_global_event_listener$LAYOUT, remove_global_event_listener$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*remove_global_event_listener)(guint)
     * }
     */
    public static void remove_global_event_listener(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(remove_global_event_listener$LAYOUT, remove_global_event_listener$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * guint (*add_key_event_listener)(AtkKeySnoopFunc, gpointer)
     * }
     */
    public class add_key_event_listener {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            int apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_INT,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(add_key_event_listener.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(add_key_event_listener.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static int invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                return (int) DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout add_key_event_listener$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("add_key_event_listener"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint (*add_key_event_listener)(AtkKeySnoopFunc, gpointer)
     * }
     */
    public static final AddressLayout add_key_event_listener$layout() {
        return add_key_event_listener$LAYOUT;
    }

    private static final long add_key_event_listener$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint (*add_key_event_listener)(AtkKeySnoopFunc, gpointer)
     * }
     */
    public static final long add_key_event_listener$offset() {
        return add_key_event_listener$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint (*add_key_event_listener)(AtkKeySnoopFunc, gpointer)
     * }
     */
    public static MemorySegment add_key_event_listener(MemorySegment struct) {
        return struct.get(add_key_event_listener$LAYOUT, add_key_event_listener$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint (*add_key_event_listener)(AtkKeySnoopFunc, gpointer)
     * }
     */
    public static void add_key_event_listener(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(add_key_event_listener$LAYOUT, add_key_event_listener$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*remove_key_event_listener)(guint)
     * }
     */
    public class remove_key_event_listener {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(int _x0);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_INT
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(remove_key_event_listener.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(remove_key_event_listener.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,int _x0) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout remove_key_event_listener$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("remove_key_event_listener"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*remove_key_event_listener)(guint)
     * }
     */
    public static final AddressLayout remove_key_event_listener$layout() {
        return remove_key_event_listener$LAYOUT;
    }

    private static final long remove_key_event_listener$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*remove_key_event_listener)(guint)
     * }
     */
    public static final long remove_key_event_listener$offset() {
        return remove_key_event_listener$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*remove_key_event_listener)(guint)
     * }
     */
    public static MemorySegment remove_key_event_listener(MemorySegment struct) {
        return struct.get(remove_key_event_listener$LAYOUT, remove_key_event_listener$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*remove_key_event_listener)(guint)
     * }
     */
    public static void remove_key_event_listener(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(remove_key_event_listener$LAYOUT, remove_key_event_listener$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * AtkObject *(*get_root)(void)
     * }
     */
    public class get_root {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER);

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_root.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_root.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_root$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_root"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * AtkObject *(*get_root)(void)
     * }
     */
    public static final AddressLayout get_root$layout() {
        return get_root$LAYOUT;
    }

    private static final long get_root$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * AtkObject *(*get_root)(void)
     * }
     */
    public static final long get_root$offset() {
        return get_root$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * AtkObject *(*get_root)(void)
     * }
     */
    public static MemorySegment get_root(MemorySegment struct) {
        return struct.get(get_root$LAYOUT, get_root$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * AtkObject *(*get_root)(void)
     * }
     */
    public static void get_root(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_root$LAYOUT, get_root$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * const gchar *(*get_toolkit_name)(void)
     * }
     */
    public class get_toolkit_name {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER);

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_toolkit_name.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_toolkit_name.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_toolkit_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_toolkit_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar *(*get_toolkit_name)(void)
     * }
     */
    public static final AddressLayout get_toolkit_name$layout() {
        return get_toolkit_name$LAYOUT;
    }

    private static final long get_toolkit_name$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar *(*get_toolkit_name)(void)
     * }
     */
    public static final long get_toolkit_name$offset() {
        return get_toolkit_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar *(*get_toolkit_name)(void)
     * }
     */
    public static MemorySegment get_toolkit_name(MemorySegment struct) {
        return struct.get(get_toolkit_name$LAYOUT, get_toolkit_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar *(*get_toolkit_name)(void)
     * }
     */
    public static void get_toolkit_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_toolkit_name$LAYOUT, get_toolkit_name$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * const gchar *(*get_toolkit_version)(void)
     * }
     */
    public class get_toolkit_version {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER);

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_toolkit_version.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_toolkit_version.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_toolkit_version$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_toolkit_version"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar *(*get_toolkit_version)(void)
     * }
     */
    public static final AddressLayout get_toolkit_version$layout() {
        return get_toolkit_version$LAYOUT;
    }

    private static final long get_toolkit_version$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar *(*get_toolkit_version)(void)
     * }
     */
    public static final long get_toolkit_version$offset() {
        return get_toolkit_version$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar *(*get_toolkit_version)(void)
     * }
     */
    public static MemorySegment get_toolkit_version(MemorySegment struct) {
        return struct.get(get_toolkit_version$LAYOUT, get_toolkit_version$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar *(*get_toolkit_version)(void)
     * }
     */
    public static void get_toolkit_version(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_toolkit_version$LAYOUT, get_toolkit_version$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

