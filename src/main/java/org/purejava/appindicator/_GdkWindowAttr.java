// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GdkWindowAttr {
 *     gchar *title;
 *     gint event_mask;
 *     gint x;
 *     gint y;
 *     gint width;
 *     gint height;
 *     GdkWindowWindowClass wclass;
 *     GdkVisual *visual;
 *     GdkWindowType window_type;
 *     GdkCursor *cursor;
 *     gchar *wmclass_name;
 *     gchar *wmclass_class;
 *     gboolean override_redirect;
 *     GdkWindowTypeHint type_hint;
 * }
 * }
 */
public class _GdkWindowAttr {

    _GdkWindowAttr() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_POINTER.withName("title"),
        app_indicator_h.C_INT.withName("event_mask"),
        app_indicator_h.C_INT.withName("x"),
        app_indicator_h.C_INT.withName("y"),
        app_indicator_h.C_INT.withName("width"),
        app_indicator_h.C_INT.withName("height"),
        app_indicator_h.C_INT.withName("wclass"),
        app_indicator_h.C_POINTER.withName("visual"),
        app_indicator_h.C_INT.withName("window_type"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_POINTER.withName("cursor"),
        app_indicator_h.C_POINTER.withName("wmclass_name"),
        app_indicator_h.C_POINTER.withName("wmclass_class"),
        app_indicator_h.C_INT.withName("override_redirect"),
        app_indicator_h.C_INT.withName("type_hint")
    ).withName("_GdkWindowAttr");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout title$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("title"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar *title
     * }
     */
    public static final AddressLayout title$layout() {
        return title$LAYOUT;
    }

    private static final long title$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar *title
     * }
     */
    public static final long title$offset() {
        return title$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar *title
     * }
     */
    public static MemorySegment title(MemorySegment struct) {
        return struct.get(title$LAYOUT, title$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar *title
     * }
     */
    public static void title(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(title$LAYOUT, title$OFFSET, fieldValue);
    }

    private static final OfInt event_mask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("event_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint event_mask
     * }
     */
    public static final OfInt event_mask$layout() {
        return event_mask$LAYOUT;
    }

    private static final long event_mask$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint event_mask
     * }
     */
    public static final long event_mask$offset() {
        return event_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint event_mask
     * }
     */
    public static int event_mask(MemorySegment struct) {
        return struct.get(event_mask$LAYOUT, event_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint event_mask
     * }
     */
    public static void event_mask(MemorySegment struct, int fieldValue) {
        struct.set(event_mask$LAYOUT, event_mask$OFFSET, fieldValue);
    }

    private static final OfInt x$LAYOUT = (OfInt)$LAYOUT.select(groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint x
     * }
     */
    public static final OfInt x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint x
     * }
     */
    public static int x(MemorySegment struct) {
        return struct.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint x
     * }
     */
    public static void x(MemorySegment struct, int fieldValue) {
        struct.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final OfInt y$LAYOUT = (OfInt)$LAYOUT.select(groupElement("y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint y
     * }
     */
    public static final OfInt y$layout() {
        return y$LAYOUT;
    }

    private static final long y$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint y
     * }
     */
    public static final long y$offset() {
        return y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint y
     * }
     */
    public static int y(MemorySegment struct) {
        return struct.get(y$LAYOUT, y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint y
     * }
     */
    public static void y(MemorySegment struct, int fieldValue) {
        struct.set(y$LAYOUT, y$OFFSET, fieldValue);
    }

    private static final OfInt width$LAYOUT = (OfInt)$LAYOUT.select(groupElement("width"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint width
     * }
     */
    public static final OfInt width$layout() {
        return width$LAYOUT;
    }

    private static final long width$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint width
     * }
     */
    public static final long width$offset() {
        return width$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint width
     * }
     */
    public static int width(MemorySegment struct) {
        return struct.get(width$LAYOUT, width$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint width
     * }
     */
    public static void width(MemorySegment struct, int fieldValue) {
        struct.set(width$LAYOUT, width$OFFSET, fieldValue);
    }

    private static final OfInt height$LAYOUT = (OfInt)$LAYOUT.select(groupElement("height"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint height
     * }
     */
    public static final OfInt height$layout() {
        return height$LAYOUT;
    }

    private static final long height$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint height
     * }
     */
    public static final long height$offset() {
        return height$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint height
     * }
     */
    public static int height(MemorySegment struct) {
        return struct.get(height$LAYOUT, height$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint height
     * }
     */
    public static void height(MemorySegment struct, int fieldValue) {
        struct.set(height$LAYOUT, height$OFFSET, fieldValue);
    }

    private static final OfInt wclass$LAYOUT = (OfInt)$LAYOUT.select(groupElement("wclass"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkWindowWindowClass wclass
     * }
     */
    public static final OfInt wclass$layout() {
        return wclass$LAYOUT;
    }

    private static final long wclass$OFFSET = 28;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkWindowWindowClass wclass
     * }
     */
    public static final long wclass$offset() {
        return wclass$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkWindowWindowClass wclass
     * }
     */
    public static int wclass(MemorySegment struct) {
        return struct.get(wclass$LAYOUT, wclass$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkWindowWindowClass wclass
     * }
     */
    public static void wclass(MemorySegment struct, int fieldValue) {
        struct.set(wclass$LAYOUT, wclass$OFFSET, fieldValue);
    }

    private static final AddressLayout visual$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("visual"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkVisual *visual
     * }
     */
    public static final AddressLayout visual$layout() {
        return visual$LAYOUT;
    }

    private static final long visual$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkVisual *visual
     * }
     */
    public static final long visual$offset() {
        return visual$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkVisual *visual
     * }
     */
    public static MemorySegment visual(MemorySegment struct) {
        return struct.get(visual$LAYOUT, visual$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkVisual *visual
     * }
     */
    public static void visual(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(visual$LAYOUT, visual$OFFSET, fieldValue);
    }

    private static final OfInt window_type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("window_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkWindowType window_type
     * }
     */
    public static final OfInt window_type$layout() {
        return window_type$LAYOUT;
    }

    private static final long window_type$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkWindowType window_type
     * }
     */
    public static final long window_type$offset() {
        return window_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkWindowType window_type
     * }
     */
    public static int window_type(MemorySegment struct) {
        return struct.get(window_type$LAYOUT, window_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkWindowType window_type
     * }
     */
    public static void window_type(MemorySegment struct, int fieldValue) {
        struct.set(window_type$LAYOUT, window_type$OFFSET, fieldValue);
    }

    private static final AddressLayout cursor$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("cursor"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkCursor *cursor
     * }
     */
    public static final AddressLayout cursor$layout() {
        return cursor$LAYOUT;
    }

    private static final long cursor$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkCursor *cursor
     * }
     */
    public static final long cursor$offset() {
        return cursor$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkCursor *cursor
     * }
     */
    public static MemorySegment cursor(MemorySegment struct) {
        return struct.get(cursor$LAYOUT, cursor$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkCursor *cursor
     * }
     */
    public static void cursor(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(cursor$LAYOUT, cursor$OFFSET, fieldValue);
    }

    private static final AddressLayout wmclass_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wmclass_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar *wmclass_name
     * }
     */
    public static final AddressLayout wmclass_name$layout() {
        return wmclass_name$LAYOUT;
    }

    private static final long wmclass_name$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar *wmclass_name
     * }
     */
    public static final long wmclass_name$offset() {
        return wmclass_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar *wmclass_name
     * }
     */
    public static MemorySegment wmclass_name(MemorySegment struct) {
        return struct.get(wmclass_name$LAYOUT, wmclass_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar *wmclass_name
     * }
     */
    public static void wmclass_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wmclass_name$LAYOUT, wmclass_name$OFFSET, fieldValue);
    }

    private static final AddressLayout wmclass_class$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("wmclass_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gchar *wmclass_class
     * }
     */
    public static final AddressLayout wmclass_class$layout() {
        return wmclass_class$LAYOUT;
    }

    private static final long wmclass_class$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gchar *wmclass_class
     * }
     */
    public static final long wmclass_class$offset() {
        return wmclass_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gchar *wmclass_class
     * }
     */
    public static MemorySegment wmclass_class(MemorySegment struct) {
        return struct.get(wmclass_class$LAYOUT, wmclass_class$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gchar *wmclass_class
     * }
     */
    public static void wmclass_class(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(wmclass_class$LAYOUT, wmclass_class$OFFSET, fieldValue);
    }

    private static final OfInt override_redirect$LAYOUT = (OfInt)$LAYOUT.select(groupElement("override_redirect"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean override_redirect
     * }
     */
    public static final OfInt override_redirect$layout() {
        return override_redirect$LAYOUT;
    }

    private static final long override_redirect$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean override_redirect
     * }
     */
    public static final long override_redirect$offset() {
        return override_redirect$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean override_redirect
     * }
     */
    public static int override_redirect(MemorySegment struct) {
        return struct.get(override_redirect$LAYOUT, override_redirect$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean override_redirect
     * }
     */
    public static void override_redirect(MemorySegment struct, int fieldValue) {
        struct.set(override_redirect$LAYOUT, override_redirect$OFFSET, fieldValue);
    }

    private static final OfInt type_hint$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type_hint"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkWindowTypeHint type_hint
     * }
     */
    public static final OfInt type_hint$layout() {
        return type_hint$LAYOUT;
    }

    private static final long type_hint$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkWindowTypeHint type_hint
     * }
     */
    public static final long type_hint$offset() {
        return type_hint$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkWindowTypeHint type_hint
     * }
     */
    public static int type_hint(MemorySegment struct) {
        return struct.get(type_hint$LAYOUT, type_hint$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkWindowTypeHint type_hint
     * }
     */
    public static void type_hint(MemorySegment struct, int fieldValue) {
        struct.set(type_hint$LAYOUT, type_hint$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

