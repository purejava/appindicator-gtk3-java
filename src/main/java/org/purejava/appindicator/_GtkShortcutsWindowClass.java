// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkShortcutsWindowClass {
 *     struct _GtkWindowClass parent_class;
 *     void (*close)(struct _GtkShortcutsWindow*);
 *     void (*search)(struct _GtkShortcutsWindow*);
 * };
 * }
 */
public class _GtkShortcutsWindowClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2507.const$2;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 1072);
    }
    /**
     * {@snippet :
 * void (*close)(struct _GtkShortcutsWindow*);
     * }
     */
    public interface close {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(close fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2507.const$3, fi, constants$13.const$1, scope);
        }
        static close ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle close$VH() {
        return constants$2507.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*close)(struct _GtkShortcutsWindow*);
     * }
     */
    public static MemorySegment close$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2507.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*close)(struct _GtkShortcutsWindow*);
     * }
     */
    public static void close$set(MemorySegment seg, MemorySegment x) {
        constants$2507.const$4.set(seg, x);
    }
    public static MemorySegment close$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2507.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void close$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2507.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static close close(MemorySegment segment, Arena scope) {
        return close.ofAddress(close$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*search)(struct _GtkShortcutsWindow*);
     * }
     */
    public interface search {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(search fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2507.const$5, fi, constants$13.const$1, scope);
        }
        static search ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle search$VH() {
        return constants$2508.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*search)(struct _GtkShortcutsWindow*);
     * }
     */
    public static MemorySegment search$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2508.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*search)(struct _GtkShortcutsWindow*);
     * }
     */
    public static void search$set(MemorySegment seg, MemorySegment x) {
        constants$2508.const$0.set(seg, x);
    }
    public static MemorySegment search$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2508.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void search$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2508.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static search search(MemorySegment segment, Arena scope) {
        return search.ofAddress(search$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


