// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GdkEventCrossing {
 *     GdkEventType type;
 *     GdkWindow *window;
 *     gint8 send_event;
 *     GdkWindow *subwindow;
 *     guint32 time;
 *     gdouble x;
 *     gdouble y;
 *     gdouble x_root;
 *     gdouble y_root;
 *     GdkCrossingMode mode;
 *     GdkNotifyType detail;
 *     gboolean focus;
 *     guint state;
 * }
 * }
 */
public class _GdkEventCrossing {

    _GdkEventCrossing() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_POINTER.withName("window"),
        app_indicator_h.C_CHAR.withName("send_event"),
        MemoryLayout.paddingLayout(7),
        app_indicator_h.C_POINTER.withName("subwindow"),
        app_indicator_h.C_INT.withName("time"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_DOUBLE.withName("x"),
        app_indicator_h.C_DOUBLE.withName("y"),
        app_indicator_h.C_DOUBLE.withName("x_root"),
        app_indicator_h.C_DOUBLE.withName("y_root"),
        app_indicator_h.C_INT.withName("mode"),
        app_indicator_h.C_INT.withName("detail"),
        app_indicator_h.C_INT.withName("focus"),
        app_indicator_h.C_INT.withName("state")
    ).withName("_GdkEventCrossing");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkEventType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkEventType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkEventType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkEventType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final AddressLayout window$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("window"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkWindow *window
     * }
     */
    public static final AddressLayout window$layout() {
        return window$LAYOUT;
    }

    private static final long window$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkWindow *window
     * }
     */
    public static final long window$offset() {
        return window$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkWindow *window
     * }
     */
    public static MemorySegment window(MemorySegment struct) {
        return struct.get(window$LAYOUT, window$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkWindow *window
     * }
     */
    public static void window(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(window$LAYOUT, window$OFFSET, fieldValue);
    }

    private static final OfByte send_event$LAYOUT = (OfByte)$LAYOUT.select(groupElement("send_event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint8 send_event
     * }
     */
    public static final OfByte send_event$layout() {
        return send_event$LAYOUT;
    }

    private static final long send_event$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint8 send_event
     * }
     */
    public static final long send_event$offset() {
        return send_event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint8 send_event
     * }
     */
    public static byte send_event(MemorySegment struct) {
        return struct.get(send_event$LAYOUT, send_event$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint8 send_event
     * }
     */
    public static void send_event(MemorySegment struct, byte fieldValue) {
        struct.set(send_event$LAYOUT, send_event$OFFSET, fieldValue);
    }

    private static final AddressLayout subwindow$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("subwindow"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkWindow *subwindow
     * }
     */
    public static final AddressLayout subwindow$layout() {
        return subwindow$LAYOUT;
    }

    private static final long subwindow$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkWindow *subwindow
     * }
     */
    public static final long subwindow$offset() {
        return subwindow$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkWindow *subwindow
     * }
     */
    public static MemorySegment subwindow(MemorySegment struct) {
        return struct.get(subwindow$LAYOUT, subwindow$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkWindow *subwindow
     * }
     */
    public static void subwindow(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(subwindow$LAYOUT, subwindow$OFFSET, fieldValue);
    }

    private static final OfInt time$LAYOUT = (OfInt)$LAYOUT.select(groupElement("time"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint32 time
     * }
     */
    public static final OfInt time$layout() {
        return time$LAYOUT;
    }

    private static final long time$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint32 time
     * }
     */
    public static final long time$offset() {
        return time$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint32 time
     * }
     */
    public static int time(MemorySegment struct) {
        return struct.get(time$LAYOUT, time$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint32 time
     * }
     */
    public static void time(MemorySegment struct, int fieldValue) {
        struct.set(time$LAYOUT, time$OFFSET, fieldValue);
    }

    private static final OfDouble x$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("x"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gdouble x
     * }
     */
    public static final OfDouble x$layout() {
        return x$LAYOUT;
    }

    private static final long x$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gdouble x
     * }
     */
    public static final long x$offset() {
        return x$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gdouble x
     * }
     */
    public static double x(MemorySegment struct) {
        return struct.get(x$LAYOUT, x$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gdouble x
     * }
     */
    public static void x(MemorySegment struct, double fieldValue) {
        struct.set(x$LAYOUT, x$OFFSET, fieldValue);
    }

    private static final OfDouble y$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("y"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gdouble y
     * }
     */
    public static final OfDouble y$layout() {
        return y$LAYOUT;
    }

    private static final long y$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gdouble y
     * }
     */
    public static final long y$offset() {
        return y$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gdouble y
     * }
     */
    public static double y(MemorySegment struct) {
        return struct.get(y$LAYOUT, y$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gdouble y
     * }
     */
    public static void y(MemorySegment struct, double fieldValue) {
        struct.set(y$LAYOUT, y$OFFSET, fieldValue);
    }

    private static final OfDouble x_root$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("x_root"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gdouble x_root
     * }
     */
    public static final OfDouble x_root$layout() {
        return x_root$LAYOUT;
    }

    private static final long x_root$OFFSET = 56;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gdouble x_root
     * }
     */
    public static final long x_root$offset() {
        return x_root$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gdouble x_root
     * }
     */
    public static double x_root(MemorySegment struct) {
        return struct.get(x_root$LAYOUT, x_root$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gdouble x_root
     * }
     */
    public static void x_root(MemorySegment struct, double fieldValue) {
        struct.set(x_root$LAYOUT, x_root$OFFSET, fieldValue);
    }

    private static final OfDouble y_root$LAYOUT = (OfDouble)$LAYOUT.select(groupElement("y_root"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gdouble y_root
     * }
     */
    public static final OfDouble y_root$layout() {
        return y_root$LAYOUT;
    }

    private static final long y_root$OFFSET = 64;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gdouble y_root
     * }
     */
    public static final long y_root$offset() {
        return y_root$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gdouble y_root
     * }
     */
    public static double y_root(MemorySegment struct) {
        return struct.get(y_root$LAYOUT, y_root$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gdouble y_root
     * }
     */
    public static void y_root(MemorySegment struct, double fieldValue) {
        struct.set(y_root$LAYOUT, y_root$OFFSET, fieldValue);
    }

    private static final OfInt mode$LAYOUT = (OfInt)$LAYOUT.select(groupElement("mode"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkCrossingMode mode
     * }
     */
    public static final OfInt mode$layout() {
        return mode$LAYOUT;
    }

    private static final long mode$OFFSET = 72;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkCrossingMode mode
     * }
     */
    public static final long mode$offset() {
        return mode$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkCrossingMode mode
     * }
     */
    public static int mode(MemorySegment struct) {
        return struct.get(mode$LAYOUT, mode$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkCrossingMode mode
     * }
     */
    public static void mode(MemorySegment struct, int fieldValue) {
        struct.set(mode$LAYOUT, mode$OFFSET, fieldValue);
    }

    private static final OfInt detail$LAYOUT = (OfInt)$LAYOUT.select(groupElement("detail"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkNotifyType detail
     * }
     */
    public static final OfInt detail$layout() {
        return detail$LAYOUT;
    }

    private static final long detail$OFFSET = 76;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkNotifyType detail
     * }
     */
    public static final long detail$offset() {
        return detail$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkNotifyType detail
     * }
     */
    public static int detail(MemorySegment struct) {
        return struct.get(detail$LAYOUT, detail$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkNotifyType detail
     * }
     */
    public static void detail(MemorySegment struct, int fieldValue) {
        struct.set(detail$LAYOUT, detail$OFFSET, fieldValue);
    }

    private static final OfInt focus$LAYOUT = (OfInt)$LAYOUT.select(groupElement("focus"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gboolean focus
     * }
     */
    public static final OfInt focus$layout() {
        return focus$LAYOUT;
    }

    private static final long focus$OFFSET = 80;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gboolean focus
     * }
     */
    public static final long focus$offset() {
        return focus$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gboolean focus
     * }
     */
    public static int focus(MemorySegment struct) {
        return struct.get(focus$LAYOUT, focus$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gboolean focus
     * }
     */
    public static void focus(MemorySegment struct, int fieldValue) {
        struct.set(focus$LAYOUT, focus$OFFSET, fieldValue);
    }

    private static final OfInt state$LAYOUT = (OfInt)$LAYOUT.select(groupElement("state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * guint state
     * }
     */
    public static final OfInt state$layout() {
        return state$LAYOUT;
    }

    private static final long state$OFFSET = 84;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * guint state
     * }
     */
    public static final long state$offset() {
        return state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * guint state
     * }
     */
    public static int state(MemorySegment struct) {
        return struct.get(state$LAYOUT, state$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * guint state
     * }
     */
    public static void state(MemorySegment struct, int fieldValue) {
        struct.set(state$LAYOUT, state$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

