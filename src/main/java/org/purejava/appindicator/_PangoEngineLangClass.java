// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _PangoEngineLangClass {
 *     struct _PangoEngineClass parent_class;
 *     void (*script_break)(struct _PangoEngineLang*,char*,int,struct _PangoAnalysis*,struct _PangoLogAttr*,int);
 * };
 * }
 */
public class _PangoEngineLangClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1609.const$2;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*script_break)(struct _PangoEngineLang*,char*,int,struct _PangoAnalysis*,struct _PangoLogAttr*,int);
     * }
     */
    public interface script_break {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(script_break fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1609.const$3, fi, constants$1608.const$2, scope);
        }
        static script_break ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    constants$1609.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle script_break$VH() {
        return constants$1609.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*script_break)(struct _PangoEngineLang*,char*,int,struct _PangoAnalysis*,struct _PangoLogAttr*,int);
     * }
     */
    public static MemorySegment script_break$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1609.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*script_break)(struct _PangoEngineLang*,char*,int,struct _PangoAnalysis*,struct _PangoLogAttr*,int);
     * }
     */
    public static void script_break$set(MemorySegment seg, MemorySegment x) {
        constants$1609.const$5.set(seg, x);
    }
    public static MemorySegment script_break$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1609.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void script_break$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1609.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static script_break script_break(MemorySegment segment, Arena scope) {
        return script_break.ofAddress(script_break$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


