// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GTlsDatabaseClass {
 *     struct _GObjectClass parent_class;
 *     enum GTlsCertificateFlags (*verify_chain)(struct _GTlsDatabase*,struct _GTlsCertificate*,char*,struct _GSocketConnectable*,struct _GTlsInteraction*,enum GTlsDatabaseVerifyFlags,struct _GCancellable*,struct _GError**);
 *     void (*verify_chain_async)(struct _GTlsDatabase*,struct _GTlsCertificate*,char*,struct _GSocketConnectable*,struct _GTlsInteraction*,enum GTlsDatabaseVerifyFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     enum GTlsCertificateFlags (*verify_chain_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
 *     char* (*create_certificate_handle)(struct _GTlsDatabase*,struct _GTlsCertificate*);
 *     struct _GTlsCertificate* (*lookup_certificate_for_handle)(struct _GTlsDatabase*,char*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
 *     void (*lookup_certificate_for_handle_async)(struct _GTlsDatabase*,char*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GTlsCertificate* (*lookup_certificate_for_handle_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
 *     struct _GTlsCertificate* (*lookup_certificate_issuer)(struct _GTlsDatabase*,struct _GTlsCertificate*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
 *     void (*lookup_certificate_issuer_async)(struct _GTlsDatabase*,struct _GTlsCertificate*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GTlsCertificate* (*lookup_certificate_issuer_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
 *     struct _GList* (*lookup_certificates_issued_by)(struct _GTlsDatabase*,struct _GByteArray*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
 *     void (*lookup_certificates_issued_by_async)(struct _GTlsDatabase*,struct _GByteArray*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
 *     struct _GList* (*lookup_certificates_issued_by_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
 *     void* padding[16];
 * };
 * }
 */
public class _GTlsDatabaseClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1364.const$2;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * enum GTlsCertificateFlags (*verify_chain)(struct _GTlsDatabase*,struct _GTlsCertificate*,char*,struct _GSocketConnectable*,struct _GTlsInteraction*,enum GTlsDatabaseVerifyFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface verify_chain {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(verify_chain fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1364.const$4, fi, constants$1364.const$3, scope);
        }
        static verify_chain ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    return (int)constants$1364.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle verify_chain$VH() {
        return constants$1365.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GTlsCertificateFlags (*verify_chain)(struct _GTlsDatabase*,struct _GTlsCertificate*,char*,struct _GSocketConnectable*,struct _GTlsInteraction*,enum GTlsDatabaseVerifyFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment verify_chain$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1365.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GTlsCertificateFlags (*verify_chain)(struct _GTlsDatabase*,struct _GTlsCertificate*,char*,struct _GSocketConnectable*,struct _GTlsInteraction*,enum GTlsDatabaseVerifyFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void verify_chain$set(MemorySegment seg, MemorySegment x) {
        constants$1365.const$0.set(seg, x);
    }
    public static MemorySegment verify_chain$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1365.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void verify_chain$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1365.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static verify_chain verify_chain(MemorySegment segment, Arena scope) {
        return verify_chain.ofAddress(verify_chain$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*verify_chain_async)(struct _GTlsDatabase*,struct _GTlsCertificate*,char*,struct _GSocketConnectable*,struct _GTlsInteraction*,enum GTlsDatabaseVerifyFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface verify_chain_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7, java.lang.foreign.MemorySegment _x8);
        static MemorySegment allocate(verify_chain_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1365.const$2, fi, constants$1365.const$1, scope);
        }
        static verify_chain_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7, java.lang.foreign.MemorySegment __x8) -> {
                try {
                    constants$1365.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle verify_chain_async$VH() {
        return constants$1365.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*verify_chain_async)(struct _GTlsDatabase*,struct _GTlsCertificate*,char*,struct _GSocketConnectable*,struct _GTlsInteraction*,enum GTlsDatabaseVerifyFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment verify_chain_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1365.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*verify_chain_async)(struct _GTlsDatabase*,struct _GTlsCertificate*,char*,struct _GSocketConnectable*,struct _GTlsInteraction*,enum GTlsDatabaseVerifyFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void verify_chain_async$set(MemorySegment seg, MemorySegment x) {
        constants$1365.const$4.set(seg, x);
    }
    public static MemorySegment verify_chain_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1365.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void verify_chain_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1365.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static verify_chain_async verify_chain_async(MemorySegment segment, Arena scope) {
        return verify_chain_async.ofAddress(verify_chain_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum GTlsCertificateFlags (*verify_chain_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface verify_chain_finish {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(verify_chain_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1365.const$5, fi, constants$12.const$2, scope);
        }
        static verify_chain_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle verify_chain_finish$VH() {
        return constants$1366.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GTlsCertificateFlags (*verify_chain_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment verify_chain_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1366.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GTlsCertificateFlags (*verify_chain_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void verify_chain_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1366.const$0.set(seg, x);
    }
    public static MemorySegment verify_chain_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1366.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void verify_chain_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1366.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static verify_chain_finish verify_chain_finish(MemorySegment segment, Arena scope) {
        return verify_chain_finish.ofAddress(verify_chain_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*create_certificate_handle)(struct _GTlsDatabase*,struct _GTlsCertificate*);
     * }
     */
    public interface create_certificate_handle {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(create_certificate_handle fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1366.const$1, fi, constants$5.const$5, scope);
        }
        static create_certificate_handle ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_certificate_handle$VH() {
        return constants$1366.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*create_certificate_handle)(struct _GTlsDatabase*,struct _GTlsCertificate*);
     * }
     */
    public static MemorySegment create_certificate_handle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1366.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*create_certificate_handle)(struct _GTlsDatabase*,struct _GTlsCertificate*);
     * }
     */
    public static void create_certificate_handle$set(MemorySegment seg, MemorySegment x) {
        constants$1366.const$2.set(seg, x);
    }
    public static MemorySegment create_certificate_handle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1366.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void create_certificate_handle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1366.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_certificate_handle create_certificate_handle(MemorySegment segment, Arena scope) {
        return create_certificate_handle.ofAddress(create_certificate_handle$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GTlsCertificate* (*lookup_certificate_for_handle)(struct _GTlsDatabase*,char*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface lookup_certificate_for_handle {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(lookup_certificate_for_handle fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1366.const$4, fi, constants$1366.const$3, scope);
        }
        static lookup_certificate_for_handle ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$1366.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_certificate_for_handle$VH() {
        return constants$1367.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GTlsCertificate* (*lookup_certificate_for_handle)(struct _GTlsDatabase*,char*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_certificate_for_handle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1367.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GTlsCertificate* (*lookup_certificate_for_handle)(struct _GTlsDatabase*,char*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void lookup_certificate_for_handle$set(MemorySegment seg, MemorySegment x) {
        constants$1367.const$0.set(seg, x);
    }
    public static MemorySegment lookup_certificate_for_handle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1367.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_for_handle$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1367.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_for_handle lookup_certificate_for_handle(MemorySegment segment, Arena scope) {
        return lookup_certificate_for_handle.ofAddress(lookup_certificate_for_handle$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*lookup_certificate_for_handle_async)(struct _GTlsDatabase*,char*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface lookup_certificate_for_handle_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(lookup_certificate_for_handle_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1367.const$2, fi, constants$1367.const$1, scope);
        }
        static lookup_certificate_for_handle_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    constants$1367.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_certificate_for_handle_async$VH() {
        return constants$1367.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*lookup_certificate_for_handle_async)(struct _GTlsDatabase*,char*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment lookup_certificate_for_handle_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1367.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*lookup_certificate_for_handle_async)(struct _GTlsDatabase*,char*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void lookup_certificate_for_handle_async$set(MemorySegment seg, MemorySegment x) {
        constants$1367.const$4.set(seg, x);
    }
    public static MemorySegment lookup_certificate_for_handle_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1367.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_for_handle_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1367.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_for_handle_async lookup_certificate_for_handle_async(MemorySegment segment, Arena scope) {
        return lookup_certificate_for_handle_async.ofAddress(lookup_certificate_for_handle_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GTlsCertificate* (*lookup_certificate_for_handle_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface lookup_certificate_for_handle_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(lookup_certificate_for_handle_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1367.const$5, fi, constants$23.const$0, scope);
        }
        static lookup_certificate_for_handle_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$732.const$0.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_certificate_for_handle_finish$VH() {
        return constants$1368.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GTlsCertificate* (*lookup_certificate_for_handle_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_certificate_for_handle_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1368.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GTlsCertificate* (*lookup_certificate_for_handle_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void lookup_certificate_for_handle_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1368.const$0.set(seg, x);
    }
    public static MemorySegment lookup_certificate_for_handle_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1368.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_for_handle_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1368.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_for_handle_finish lookup_certificate_for_handle_finish(MemorySegment segment, Arena scope) {
        return lookup_certificate_for_handle_finish.ofAddress(lookup_certificate_for_handle_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GTlsCertificate* (*lookup_certificate_issuer)(struct _GTlsDatabase*,struct _GTlsCertificate*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface lookup_certificate_issuer {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(lookup_certificate_issuer fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1368.const$1, fi, constants$1366.const$3, scope);
        }
        static lookup_certificate_issuer ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$1366.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_certificate_issuer$VH() {
        return constants$1368.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GTlsCertificate* (*lookup_certificate_issuer)(struct _GTlsDatabase*,struct _GTlsCertificate*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_certificate_issuer$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1368.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GTlsCertificate* (*lookup_certificate_issuer)(struct _GTlsDatabase*,struct _GTlsCertificate*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void lookup_certificate_issuer$set(MemorySegment seg, MemorySegment x) {
        constants$1368.const$2.set(seg, x);
    }
    public static MemorySegment lookup_certificate_issuer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1368.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_issuer$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1368.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_issuer lookup_certificate_issuer(MemorySegment segment, Arena scope) {
        return lookup_certificate_issuer.ofAddress(lookup_certificate_issuer$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*lookup_certificate_issuer_async)(struct _GTlsDatabase*,struct _GTlsCertificate*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface lookup_certificate_issuer_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(lookup_certificate_issuer_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1368.const$3, fi, constants$1367.const$1, scope);
        }
        static lookup_certificate_issuer_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    constants$1367.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_certificate_issuer_async$VH() {
        return constants$1368.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*lookup_certificate_issuer_async)(struct _GTlsDatabase*,struct _GTlsCertificate*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment lookup_certificate_issuer_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1368.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*lookup_certificate_issuer_async)(struct _GTlsDatabase*,struct _GTlsCertificate*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void lookup_certificate_issuer_async$set(MemorySegment seg, MemorySegment x) {
        constants$1368.const$4.set(seg, x);
    }
    public static MemorySegment lookup_certificate_issuer_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1368.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_issuer_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1368.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_issuer_async lookup_certificate_issuer_async(MemorySegment segment, Arena scope) {
        return lookup_certificate_issuer_async.ofAddress(lookup_certificate_issuer_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GTlsCertificate* (*lookup_certificate_issuer_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface lookup_certificate_issuer_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(lookup_certificate_issuer_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1368.const$5, fi, constants$23.const$0, scope);
        }
        static lookup_certificate_issuer_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$732.const$0.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_certificate_issuer_finish$VH() {
        return constants$1369.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GTlsCertificate* (*lookup_certificate_issuer_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_certificate_issuer_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1369.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GTlsCertificate* (*lookup_certificate_issuer_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void lookup_certificate_issuer_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1369.const$0.set(seg, x);
    }
    public static MemorySegment lookup_certificate_issuer_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1369.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificate_issuer_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1369.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificate_issuer_finish lookup_certificate_issuer_finish(MemorySegment segment, Arena scope) {
        return lookup_certificate_issuer_finish.ofAddress(lookup_certificate_issuer_finish$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*lookup_certificates_issued_by)(struct _GTlsDatabase*,struct _GByteArray*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface lookup_certificates_issued_by {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(lookup_certificates_issued_by fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1369.const$1, fi, constants$1366.const$3, scope);
        }
        static lookup_certificates_issued_by ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$1366.const$5.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_certificates_issued_by$VH() {
        return constants$1369.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*lookup_certificates_issued_by)(struct _GTlsDatabase*,struct _GByteArray*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_certificates_issued_by$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1369.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*lookup_certificates_issued_by)(struct _GTlsDatabase*,struct _GByteArray*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void lookup_certificates_issued_by$set(MemorySegment seg, MemorySegment x) {
        constants$1369.const$2.set(seg, x);
    }
    public static MemorySegment lookup_certificates_issued_by$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1369.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificates_issued_by$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1369.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificates_issued_by lookup_certificates_issued_by(MemorySegment segment, Arena scope) {
        return lookup_certificates_issued_by.ofAddress(lookup_certificates_issued_by$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*lookup_certificates_issued_by_async)(struct _GTlsDatabase*,struct _GByteArray*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public interface lookup_certificates_issued_by_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(lookup_certificates_issued_by_async fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1369.const$3, fi, constants$1367.const$1, scope);
        }
        static lookup_certificates_issued_by_async ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    constants$1367.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_certificates_issued_by_async$VH() {
        return constants$1369.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*lookup_certificates_issued_by_async)(struct _GTlsDatabase*,struct _GByteArray*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static MemorySegment lookup_certificates_issued_by_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1369.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*lookup_certificates_issued_by_async)(struct _GTlsDatabase*,struct _GByteArray*,struct _GTlsInteraction*,enum GTlsDatabaseLookupFlags,struct _GCancellable*,void (*)(struct _GObject*,struct _GAsyncResult*,void*),void*);
     * }
     */
    public static void lookup_certificates_issued_by_async$set(MemorySegment seg, MemorySegment x) {
        constants$1369.const$4.set(seg, x);
    }
    public static MemorySegment lookup_certificates_issued_by_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1369.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificates_issued_by_async$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1369.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificates_issued_by_async lookup_certificates_issued_by_async(MemorySegment segment, Arena scope) {
        return lookup_certificates_issued_by_async.ofAddress(lookup_certificates_issued_by_async$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GList* (*lookup_certificates_issued_by_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public interface lookup_certificates_issued_by_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(lookup_certificates_issued_by_finish fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1369.const$5, fi, constants$23.const$0, scope);
        }
        static lookup_certificates_issued_by_finish ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$732.const$0.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle lookup_certificates_issued_by_finish$VH() {
        return constants$1370.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GList* (*lookup_certificates_issued_by_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static MemorySegment lookup_certificates_issued_by_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1370.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GList* (*lookup_certificates_issued_by_finish)(struct _GTlsDatabase*,struct _GAsyncResult*,struct _GError**);
     * }
     */
    public static void lookup_certificates_issued_by_finish$set(MemorySegment seg, MemorySegment x) {
        constants$1370.const$0.set(seg, x);
    }
    public static MemorySegment lookup_certificates_issued_by_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1370.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_certificates_issued_by_finish$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1370.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_certificates_issued_by_finish lookup_certificates_issued_by_finish(MemorySegment segment, Arena scope) {
        return lookup_certificates_issued_by_finish.ofAddress(lookup_certificates_issued_by_finish$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(240, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


