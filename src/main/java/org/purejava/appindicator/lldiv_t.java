// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct lldiv_t {
 *     long long quot;
 *     long long rem;
 * };
 * }
 */
public class lldiv_t {

    public static MemoryLayout $LAYOUT() {
        return constants$66.const$2;
    }
    public static VarHandle quot$VH() {
        return constants$66.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long quot;
     * }
     */
    public static long quot$get(MemorySegment seg) {
        return (long)constants$66.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long quot;
     * }
     */
    public static void quot$set(MemorySegment seg, long x) {
        constants$66.const$3.set(seg, x);
    }
    public static long quot$get(MemorySegment seg, long index) {
        return (long)constants$66.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void quot$set(MemorySegment seg, long index, long x) {
        constants$66.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle rem$VH() {
        return constants$66.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * long long rem;
     * }
     */
    public static long rem$get(MemorySegment seg) {
        return (long)constants$66.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * long long rem;
     * }
     */
    public static void rem$set(MemorySegment seg, long x) {
        constants$66.const$4.set(seg, x);
    }
    public static long rem$get(MemorySegment seg, long index) {
        return (long)constants$66.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void rem$set(MemorySegment seg, long index, long x) {
        constants$66.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


