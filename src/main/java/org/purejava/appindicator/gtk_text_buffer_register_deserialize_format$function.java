// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemorySegment;
/**
 * {@snippet :
 * int (*gtk_text_buffer_register_deserialize_format$function)(struct _GtkTextBuffer*,struct _GtkTextBuffer*,struct _GtkTextIter*,unsigned char*,unsigned long,int,void*,struct _GError**);
 * }
 */
public interface gtk_text_buffer_register_deserialize_format$function {

    int apply(java.lang.foreign.MemorySegment register_buffer, java.lang.foreign.MemorySegment content_buffer, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data, long length, int create_tags, java.lang.foreign.MemorySegment user_data, java.lang.foreign.MemorySegment error);
    static MemorySegment allocate(gtk_text_buffer_register_deserialize_format$function fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$3141.const$5, fi, constants$3140.const$4, scope);
    }
    static gtk_text_buffer_register_deserialize_format$function ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _register_buffer, java.lang.foreign.MemorySegment _content_buffer, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data, long _length, int _create_tags, java.lang.foreign.MemorySegment _user_data, java.lang.foreign.MemorySegment _error) -> {
            try {
                return (int)constants$3141.const$0.invokeExact(symbol, _register_buffer, _content_buffer, _iter, _data, _length, _create_tags, _user_data, _error);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


