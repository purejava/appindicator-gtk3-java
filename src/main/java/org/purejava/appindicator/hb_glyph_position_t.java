// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct hb_glyph_position_t {
 *     hb_position_t x_advance;
 *     hb_position_t y_advance;
 *     hb_position_t x_offset;
 *     hb_position_t y_offset;
 *     hb_var_int_t var;
 * }
 * }
 */
public class hb_glyph_position_t {

    hb_glyph_position_t() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_INT.withName("x_advance"),
        app_indicator_h.C_INT.withName("y_advance"),
        app_indicator_h.C_INT.withName("x_offset"),
        app_indicator_h.C_INT.withName("y_offset"),
        _hb_var_int_t.layout().withName("var")
    ).withName("hb_glyph_position_t");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt x_advance$LAYOUT = (OfInt)$LAYOUT.select(groupElement("x_advance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hb_position_t x_advance
     * }
     */
    public static final OfInt x_advance$layout() {
        return x_advance$LAYOUT;
    }

    private static final long x_advance$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hb_position_t x_advance
     * }
     */
    public static final long x_advance$offset() {
        return x_advance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hb_position_t x_advance
     * }
     */
    public static int x_advance(MemorySegment struct) {
        return struct.get(x_advance$LAYOUT, x_advance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hb_position_t x_advance
     * }
     */
    public static void x_advance(MemorySegment struct, int fieldValue) {
        struct.set(x_advance$LAYOUT, x_advance$OFFSET, fieldValue);
    }

    private static final OfInt y_advance$LAYOUT = (OfInt)$LAYOUT.select(groupElement("y_advance"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hb_position_t y_advance
     * }
     */
    public static final OfInt y_advance$layout() {
        return y_advance$LAYOUT;
    }

    private static final long y_advance$OFFSET = 4;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hb_position_t y_advance
     * }
     */
    public static final long y_advance$offset() {
        return y_advance$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hb_position_t y_advance
     * }
     */
    public static int y_advance(MemorySegment struct) {
        return struct.get(y_advance$LAYOUT, y_advance$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hb_position_t y_advance
     * }
     */
    public static void y_advance(MemorySegment struct, int fieldValue) {
        struct.set(y_advance$LAYOUT, y_advance$OFFSET, fieldValue);
    }

    private static final OfInt x_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("x_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hb_position_t x_offset
     * }
     */
    public static final OfInt x_offset$layout() {
        return x_offset$LAYOUT;
    }

    private static final long x_offset$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hb_position_t x_offset
     * }
     */
    public static final long x_offset$offset() {
        return x_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hb_position_t x_offset
     * }
     */
    public static int x_offset(MemorySegment struct) {
        return struct.get(x_offset$LAYOUT, x_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hb_position_t x_offset
     * }
     */
    public static void x_offset(MemorySegment struct, int fieldValue) {
        struct.set(x_offset$LAYOUT, x_offset$OFFSET, fieldValue);
    }

    private static final OfInt y_offset$LAYOUT = (OfInt)$LAYOUT.select(groupElement("y_offset"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hb_position_t y_offset
     * }
     */
    public static final OfInt y_offset$layout() {
        return y_offset$LAYOUT;
    }

    private static final long y_offset$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hb_position_t y_offset
     * }
     */
    public static final long y_offset$offset() {
        return y_offset$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hb_position_t y_offset
     * }
     */
    public static int y_offset(MemorySegment struct) {
        return struct.get(y_offset$LAYOUT, y_offset$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hb_position_t y_offset
     * }
     */
    public static void y_offset(MemorySegment struct, int fieldValue) {
        struct.set(y_offset$LAYOUT, y_offset$OFFSET, fieldValue);
    }

    private static final GroupLayout var_$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("var"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * hb_var_int_t var
     * }
     */
    public static final GroupLayout var_$layout() {
        return var_$LAYOUT;
    }

    private static final long var_$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * hb_var_int_t var
     * }
     */
    public static final long var_$offset() {
        return var_$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * hb_var_int_t var
     * }
     */
    public static MemorySegment var_(MemorySegment struct) {
        return struct.asSlice(var_$OFFSET, var_$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * hb_var_int_t var
     * }
     */
    public static void var_(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, var_$OFFSET, var_$LAYOUT.byteSize());
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

