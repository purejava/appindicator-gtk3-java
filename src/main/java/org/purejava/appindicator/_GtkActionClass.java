// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GtkActionClass {
 *     struct _GObjectClass parent_class;
 *     void (*activate)(struct _GtkAction*);
 *     unsigned long menu_item_type;
 *     unsigned long toolbar_item_type;
 *     struct _GtkWidget* (*create_menu_item)(struct _GtkAction*);
 *     struct _GtkWidget* (*create_tool_item)(struct _GtkAction*);
 *     void (*connect_proxy)(struct _GtkAction*,struct _GtkWidget*);
 *     void (*disconnect_proxy)(struct _GtkAction*,struct _GtkWidget*);
 *     struct _GtkWidget* (*create_menu)(struct _GtkAction*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkActionClass {

    public static MemoryLayout $LAYOUT() {
        return constants$3249.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*activate)(struct _GtkAction*);
     * }
     */
    public interface activate {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(activate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3250.const$0, fi, constants$13.const$1, scope);
        }
        static activate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle activate$VH() {
        return constants$3250.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*activate)(struct _GtkAction*);
     * }
     */
    public static MemorySegment activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3250.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*activate)(struct _GtkAction*);
     * }
     */
    public static void activate$set(MemorySegment seg, MemorySegment x) {
        constants$3250.const$1.set(seg, x);
    }
    public static MemorySegment activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3250.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3250.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate(MemorySegment segment, Arena scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    public static VarHandle menu_item_type$VH() {
        return constants$3250.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long menu_item_type;
     * }
     */
    public static long menu_item_type$get(MemorySegment seg) {
        return (long)constants$3250.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long menu_item_type;
     * }
     */
    public static void menu_item_type$set(MemorySegment seg, long x) {
        constants$3250.const$2.set(seg, x);
    }
    public static long menu_item_type$get(MemorySegment seg, long index) {
        return (long)constants$3250.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void menu_item_type$set(MemorySegment seg, long index, long x) {
        constants$3250.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle toolbar_item_type$VH() {
        return constants$3250.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned long toolbar_item_type;
     * }
     */
    public static long toolbar_item_type$get(MemorySegment seg) {
        return (long)constants$3250.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned long toolbar_item_type;
     * }
     */
    public static void toolbar_item_type$set(MemorySegment seg, long x) {
        constants$3250.const$3.set(seg, x);
    }
    public static long toolbar_item_type$get(MemorySegment seg, long index) {
        return (long)constants$3250.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void toolbar_item_type$set(MemorySegment seg, long index, long x) {
        constants$3250.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * struct _GtkWidget* (*create_menu_item)(struct _GtkAction*);
     * }
     */
    public interface create_menu_item {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(create_menu_item fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3250.const$4, fi, constants$5.const$2, scope);
        }
        static create_menu_item ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_menu_item$VH() {
        return constants$3250.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkWidget* (*create_menu_item)(struct _GtkAction*);
     * }
     */
    public static MemorySegment create_menu_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3250.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkWidget* (*create_menu_item)(struct _GtkAction*);
     * }
     */
    public static void create_menu_item$set(MemorySegment seg, MemorySegment x) {
        constants$3250.const$5.set(seg, x);
    }
    public static MemorySegment create_menu_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3250.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void create_menu_item$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3250.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_menu_item create_menu_item(MemorySegment segment, Arena scope) {
        return create_menu_item.ofAddress(create_menu_item$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkWidget* (*create_tool_item)(struct _GtkAction*);
     * }
     */
    public interface create_tool_item {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(create_tool_item fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3251.const$0, fi, constants$5.const$2, scope);
        }
        static create_tool_item ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_tool_item$VH() {
        return constants$3251.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkWidget* (*create_tool_item)(struct _GtkAction*);
     * }
     */
    public static MemorySegment create_tool_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkWidget* (*create_tool_item)(struct _GtkAction*);
     * }
     */
    public static void create_tool_item$set(MemorySegment seg, MemorySegment x) {
        constants$3251.const$1.set(seg, x);
    }
    public static MemorySegment create_tool_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void create_tool_item$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3251.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_tool_item create_tool_item(MemorySegment segment, Arena scope) {
        return create_tool_item.ofAddress(create_tool_item$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*connect_proxy)(struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public interface connect_proxy {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(connect_proxy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3251.const$2, fi, constants$13.const$4, scope);
        }
        static connect_proxy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle connect_proxy$VH() {
        return constants$3251.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*connect_proxy)(struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment connect_proxy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*connect_proxy)(struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public static void connect_proxy$set(MemorySegment seg, MemorySegment x) {
        constants$3251.const$3.set(seg, x);
    }
    public static MemorySegment connect_proxy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void connect_proxy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3251.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static connect_proxy connect_proxy(MemorySegment segment, Arena scope) {
        return connect_proxy.ofAddress(connect_proxy$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*disconnect_proxy)(struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public interface disconnect_proxy {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(disconnect_proxy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3251.const$4, fi, constants$13.const$4, scope);
        }
        static disconnect_proxy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle disconnect_proxy$VH() {
        return constants$3251.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*disconnect_proxy)(struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment disconnect_proxy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*disconnect_proxy)(struct _GtkAction*,struct _GtkWidget*);
     * }
     */
    public static void disconnect_proxy$set(MemorySegment seg, MemorySegment x) {
        constants$3251.const$5.set(seg, x);
    }
    public static MemorySegment disconnect_proxy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3251.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void disconnect_proxy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3251.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static disconnect_proxy disconnect_proxy(MemorySegment segment, Arena scope) {
        return disconnect_proxy.ofAddress(disconnect_proxy$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkWidget* (*create_menu)(struct _GtkAction*);
     * }
     */
    public interface create_menu {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(create_menu fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3252.const$0, fi, constants$5.const$2, scope);
        }
        static create_menu ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_menu$VH() {
        return constants$3252.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkWidget* (*create_menu)(struct _GtkAction*);
     * }
     */
    public static MemorySegment create_menu$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkWidget* (*create_menu)(struct _GtkAction*);
     * }
     */
    public static void create_menu$set(MemorySegment seg, MemorySegment x) {
        constants$3252.const$1.set(seg, x);
    }
    public static MemorySegment create_menu$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void create_menu$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3252.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_menu create_menu(MemorySegment segment, Arena scope) {
        return create_menu.ofAddress(create_menu$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3252.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$3252.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$3252.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3252.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3252.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$3252.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$3252.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3252.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3252.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3253.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$3253.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3253.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$3253.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3253.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3253.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$3253.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$3253.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$3253.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$3253.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$3253.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$3253.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


