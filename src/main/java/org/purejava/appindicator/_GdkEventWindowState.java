// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GdkEventWindowState {
 *     GdkEventType type;
 *     GdkWindow *window;
 *     gint8 send_event;
 *     GdkWindowState changed_mask;
 *     GdkWindowState new_window_state;
 * }
 * }
 */
public class _GdkEventWindowState {

    _GdkEventWindowState() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_INT.withName("type"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_POINTER.withName("window"),
        app_indicator_h.C_CHAR.withName("send_event"),
        MemoryLayout.paddingLayout(3),
        app_indicator_h.C_INT.withName("changed_mask"),
        app_indicator_h.C_INT.withName("new_window_state"),
        MemoryLayout.paddingLayout(4)
    ).withName("_GdkEventWindowState");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt type$LAYOUT = (OfInt)$LAYOUT.select(groupElement("type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkEventType type
     * }
     */
    public static final OfInt type$layout() {
        return type$LAYOUT;
    }

    private static final long type$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkEventType type
     * }
     */
    public static final long type$offset() {
        return type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkEventType type
     * }
     */
    public static int type(MemorySegment struct) {
        return struct.get(type$LAYOUT, type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkEventType type
     * }
     */
    public static void type(MemorySegment struct, int fieldValue) {
        struct.set(type$LAYOUT, type$OFFSET, fieldValue);
    }

    private static final AddressLayout window$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("window"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkWindow *window
     * }
     */
    public static final AddressLayout window$layout() {
        return window$LAYOUT;
    }

    private static final long window$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkWindow *window
     * }
     */
    public static final long window$offset() {
        return window$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkWindow *window
     * }
     */
    public static MemorySegment window(MemorySegment struct) {
        return struct.get(window$LAYOUT, window$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkWindow *window
     * }
     */
    public static void window(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(window$LAYOUT, window$OFFSET, fieldValue);
    }

    private static final OfByte send_event$LAYOUT = (OfByte)$LAYOUT.select(groupElement("send_event"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint8 send_event
     * }
     */
    public static final OfByte send_event$layout() {
        return send_event$LAYOUT;
    }

    private static final long send_event$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint8 send_event
     * }
     */
    public static final long send_event$offset() {
        return send_event$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint8 send_event
     * }
     */
    public static byte send_event(MemorySegment struct) {
        return struct.get(send_event$LAYOUT, send_event$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint8 send_event
     * }
     */
    public static void send_event(MemorySegment struct, byte fieldValue) {
        struct.set(send_event$LAYOUT, send_event$OFFSET, fieldValue);
    }

    private static final OfInt changed_mask$LAYOUT = (OfInt)$LAYOUT.select(groupElement("changed_mask"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkWindowState changed_mask
     * }
     */
    public static final OfInt changed_mask$layout() {
        return changed_mask$LAYOUT;
    }

    private static final long changed_mask$OFFSET = 20;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkWindowState changed_mask
     * }
     */
    public static final long changed_mask$offset() {
        return changed_mask$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkWindowState changed_mask
     * }
     */
    public static int changed_mask(MemorySegment struct) {
        return struct.get(changed_mask$LAYOUT, changed_mask$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkWindowState changed_mask
     * }
     */
    public static void changed_mask(MemorySegment struct, int fieldValue) {
        struct.set(changed_mask$LAYOUT, changed_mask$OFFSET, fieldValue);
    }

    private static final OfInt new_window_state$LAYOUT = (OfInt)$LAYOUT.select(groupElement("new_window_state"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GdkWindowState new_window_state
     * }
     */
    public static final OfInt new_window_state$layout() {
        return new_window_state$LAYOUT;
    }

    private static final long new_window_state$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GdkWindowState new_window_state
     * }
     */
    public static final long new_window_state$offset() {
        return new_window_state$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GdkWindowState new_window_state
     * }
     */
    public static int new_window_state(MemorySegment struct) {
        return struct.get(new_window_state$LAYOUT, new_window_state$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GdkWindowState new_window_state
     * }
     */
    public static void new_window_state(MemorySegment struct, int fieldValue) {
        struct.set(new_window_state$LAYOUT, new_window_state$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

