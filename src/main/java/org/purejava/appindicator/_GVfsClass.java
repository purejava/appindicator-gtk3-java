// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GVfsClass {
 *     struct _GObjectClass parent_class;
 *     int (*is_active)(struct _GVfs*);
 *     struct _GFile* (*get_file_for_path)(struct _GVfs*,char*);
 *     struct _GFile* (*get_file_for_uri)(struct _GVfs*,char*);
 *     char** (*get_supported_uri_schemes)(struct _GVfs*);
 *     struct _GFile* (*parse_name)(struct _GVfs*,char*);
 *     void (*local_file_add_info)(struct _GVfs*,char*,unsigned long,struct _GFileAttributeMatcher*,struct _GFileInfo*,struct _GCancellable*,void**,void (**)(void*));
 *     void (*add_writable_namespaces)(struct _GVfs*,struct _GFileAttributeInfoList*);
 *     int (*local_file_set_attributes)(struct _GVfs*,char*,struct _GFileInfo*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
 *     void (*local_file_removed)(struct _GVfs*,char*);
 *     void (*local_file_moved)(struct _GVfs*,char*,char*);
 *     struct _GIcon* (*deserialize_icon)(struct _GVfs*,struct _GVariant*);
 *     void (*_g_reserved1)();
 *     void (*_g_reserved2)();
 *     void (*_g_reserved3)();
 *     void (*_g_reserved4)();
 *     void (*_g_reserved5)();
 *     void (*_g_reserved6)();
 * };
 * }
 */
public class _GVfsClass {

    public static MemoryLayout $LAYOUT() {
        return constants$1396.const$3;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * int (*is_active)(struct _GVfs*);
     * }
     */
    public interface is_active {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(is_active fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1396.const$4, fi, constants$10.const$5, scope);
        }
        static is_active ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_active$VH() {
        return constants$1396.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_active)(struct _GVfs*);
     * }
     */
    public static MemorySegment is_active$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1396.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_active)(struct _GVfs*);
     * }
     */
    public static void is_active$set(MemorySegment seg, MemorySegment x) {
        constants$1396.const$5.set(seg, x);
    }
    public static MemorySegment is_active$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1396.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void is_active$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1396.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_active is_active(MemorySegment segment, Arena scope) {
        return is_active.ofAddress(is_active$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*get_file_for_path)(struct _GVfs*,char*);
     * }
     */
    public interface get_file_for_path {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_file_for_path fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1397.const$0, fi, constants$5.const$5, scope);
        }
        static get_file_for_path ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_file_for_path$VH() {
        return constants$1397.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*get_file_for_path)(struct _GVfs*,char*);
     * }
     */
    public static MemorySegment get_file_for_path$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1397.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*get_file_for_path)(struct _GVfs*,char*);
     * }
     */
    public static void get_file_for_path$set(MemorySegment seg, MemorySegment x) {
        constants$1397.const$1.set(seg, x);
    }
    public static MemorySegment get_file_for_path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1397.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_file_for_path$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1397.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_file_for_path get_file_for_path(MemorySegment segment, Arena scope) {
        return get_file_for_path.ofAddress(get_file_for_path$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*get_file_for_uri)(struct _GVfs*,char*);
     * }
     */
    public interface get_file_for_uri {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_file_for_uri fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1397.const$2, fi, constants$5.const$5, scope);
        }
        static get_file_for_uri ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_file_for_uri$VH() {
        return constants$1397.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*get_file_for_uri)(struct _GVfs*,char*);
     * }
     */
    public static MemorySegment get_file_for_uri$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1397.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*get_file_for_uri)(struct _GVfs*,char*);
     * }
     */
    public static void get_file_for_uri$set(MemorySegment seg, MemorySegment x) {
        constants$1397.const$3.set(seg, x);
    }
    public static MemorySegment get_file_for_uri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1397.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_file_for_uri$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1397.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_file_for_uri get_file_for_uri(MemorySegment segment, Arena scope) {
        return get_file_for_uri.ofAddress(get_file_for_uri$get(segment), scope);
    }
    /**
     * {@snippet :
 * char** (*get_supported_uri_schemes)(struct _GVfs*);
     * }
     */
    public interface get_supported_uri_schemes {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_supported_uri_schemes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1397.const$4, fi, constants$5.const$2, scope);
        }
        static get_supported_uri_schemes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_supported_uri_schemes$VH() {
        return constants$1397.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char** (*get_supported_uri_schemes)(struct _GVfs*);
     * }
     */
    public static MemorySegment get_supported_uri_schemes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1397.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char** (*get_supported_uri_schemes)(struct _GVfs*);
     * }
     */
    public static void get_supported_uri_schemes$set(MemorySegment seg, MemorySegment x) {
        constants$1397.const$5.set(seg, x);
    }
    public static MemorySegment get_supported_uri_schemes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1397.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_supported_uri_schemes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1397.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_supported_uri_schemes get_supported_uri_schemes(MemorySegment segment, Arena scope) {
        return get_supported_uri_schemes.ofAddress(get_supported_uri_schemes$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GFile* (*parse_name)(struct _GVfs*,char*);
     * }
     */
    public interface parse_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(parse_name fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1398.const$0, fi, constants$5.const$5, scope);
        }
        static parse_name ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle parse_name$VH() {
        return constants$1398.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GFile* (*parse_name)(struct _GVfs*,char*);
     * }
     */
    public static MemorySegment parse_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1398.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GFile* (*parse_name)(struct _GVfs*,char*);
     * }
     */
    public static void parse_name$set(MemorySegment seg, MemorySegment x) {
        constants$1398.const$1.set(seg, x);
    }
    public static MemorySegment parse_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1398.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void parse_name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1398.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static parse_name parse_name(MemorySegment segment, Arena scope) {
        return parse_name.ofAddress(parse_name$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*local_file_add_info)(struct _GVfs*,char*,unsigned long,struct _GFileAttributeMatcher*,struct _GFileInfo*,struct _GCancellable*,void**,void (**)(void*));
     * }
     */
    public interface local_file_add_info {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6, java.lang.foreign.MemorySegment _x7);
        static MemorySegment allocate(local_file_add_info fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1398.const$3, fi, constants$1398.const$2, scope);
        }
        static local_file_add_info ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6, java.lang.foreign.MemorySegment __x7) -> {
                try {
                    constants$1398.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle local_file_add_info$VH() {
        return constants$1398.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*local_file_add_info)(struct _GVfs*,char*,unsigned long,struct _GFileAttributeMatcher*,struct _GFileInfo*,struct _GCancellable*,void**,void (**)(void*));
     * }
     */
    public static MemorySegment local_file_add_info$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1398.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*local_file_add_info)(struct _GVfs*,char*,unsigned long,struct _GFileAttributeMatcher*,struct _GFileInfo*,struct _GCancellable*,void**,void (**)(void*));
     * }
     */
    public static void local_file_add_info$set(MemorySegment seg, MemorySegment x) {
        constants$1398.const$5.set(seg, x);
    }
    public static MemorySegment local_file_add_info$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1398.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void local_file_add_info$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1398.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static local_file_add_info local_file_add_info(MemorySegment segment, Arena scope) {
        return local_file_add_info.ofAddress(local_file_add_info$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*add_writable_namespaces)(struct _GVfs*,struct _GFileAttributeInfoList*);
     * }
     */
    public interface add_writable_namespaces {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(add_writable_namespaces fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1399.const$0, fi, constants$13.const$4, scope);
        }
        static add_writable_namespaces ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle add_writable_namespaces$VH() {
        return constants$1399.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*add_writable_namespaces)(struct _GVfs*,struct _GFileAttributeInfoList*);
     * }
     */
    public static MemorySegment add_writable_namespaces$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1399.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*add_writable_namespaces)(struct _GVfs*,struct _GFileAttributeInfoList*);
     * }
     */
    public static void add_writable_namespaces$set(MemorySegment seg, MemorySegment x) {
        constants$1399.const$1.set(seg, x);
    }
    public static MemorySegment add_writable_namespaces$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1399.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void add_writable_namespaces$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1399.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_writable_namespaces add_writable_namespaces(MemorySegment segment, Arena scope) {
        return add_writable_namespaces.ofAddress(add_writable_namespaces$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*local_file_set_attributes)(struct _GVfs*,char*,struct _GFileInfo*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public interface local_file_set_attributes {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(local_file_set_attributes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1399.const$2, fi, constants$1032.const$2, scope);
        }
        static local_file_set_attributes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    return (int)constants$1399.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle local_file_set_attributes$VH() {
        return constants$1399.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*local_file_set_attributes)(struct _GVfs*,char*,struct _GFileInfo*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static MemorySegment local_file_set_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1399.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*local_file_set_attributes)(struct _GVfs*,char*,struct _GFileInfo*,enum GFileQueryInfoFlags,struct _GCancellable*,struct _GError**);
     * }
     */
    public static void local_file_set_attributes$set(MemorySegment seg, MemorySegment x) {
        constants$1399.const$4.set(seg, x);
    }
    public static MemorySegment local_file_set_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1399.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void local_file_set_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1399.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static local_file_set_attributes local_file_set_attributes(MemorySegment segment, Arena scope) {
        return local_file_set_attributes.ofAddress(local_file_set_attributes$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*local_file_removed)(struct _GVfs*,char*);
     * }
     */
    public interface local_file_removed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(local_file_removed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1399.const$5, fi, constants$13.const$4, scope);
        }
        static local_file_removed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle local_file_removed$VH() {
        return constants$1400.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*local_file_removed)(struct _GVfs*,char*);
     * }
     */
    public static MemorySegment local_file_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1400.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*local_file_removed)(struct _GVfs*,char*);
     * }
     */
    public static void local_file_removed$set(MemorySegment seg, MemorySegment x) {
        constants$1400.const$0.set(seg, x);
    }
    public static MemorySegment local_file_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1400.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void local_file_removed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1400.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static local_file_removed local_file_removed(MemorySegment segment, Arena scope) {
        return local_file_removed.ofAddress(local_file_removed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*local_file_moved)(struct _GVfs*,char*,char*);
     * }
     */
    public interface local_file_moved {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(local_file_moved fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1400.const$1, fi, constants$14.const$3, scope);
        }
        static local_file_moved ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle local_file_moved$VH() {
        return constants$1400.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*local_file_moved)(struct _GVfs*,char*,char*);
     * }
     */
    public static MemorySegment local_file_moved$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1400.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*local_file_moved)(struct _GVfs*,char*,char*);
     * }
     */
    public static void local_file_moved$set(MemorySegment seg, MemorySegment x) {
        constants$1400.const$2.set(seg, x);
    }
    public static MemorySegment local_file_moved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1400.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void local_file_moved$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1400.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static local_file_moved local_file_moved(MemorySegment segment, Arena scope) {
        return local_file_moved.ofAddress(local_file_moved$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GIcon* (*deserialize_icon)(struct _GVfs*,struct _GVariant*);
     * }
     */
    public interface deserialize_icon {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(deserialize_icon fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1400.const$3, fi, constants$5.const$5, scope);
        }
        static deserialize_icon ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle deserialize_icon$VH() {
        return constants$1400.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GIcon* (*deserialize_icon)(struct _GVfs*,struct _GVariant*);
     * }
     */
    public static MemorySegment deserialize_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1400.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GIcon* (*deserialize_icon)(struct _GVfs*,struct _GVariant*);
     * }
     */
    public static void deserialize_icon$set(MemorySegment seg, MemorySegment x) {
        constants$1400.const$4.set(seg, x);
    }
    public static MemorySegment deserialize_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1400.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void deserialize_icon$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1400.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static deserialize_icon deserialize_icon(MemorySegment segment, Arena scope) {
        return deserialize_icon.ofAddress(deserialize_icon$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved1)();
     * }
     */
    public interface _g_reserved1 {

        void apply();
        static MemorySegment allocate(_g_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1400.const$5, fi, constants$7.const$5, scope);
        }
        static _g_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved1$VH() {
        return constants$1401.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static MemorySegment _g_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1401.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static void _g_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$1401.const$0.set(seg, x);
    }
    public static MemorySegment _g_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1401.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1401.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved1 _g_reserved1(MemorySegment segment, Arena scope) {
        return _g_reserved1.ofAddress(_g_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved2)();
     * }
     */
    public interface _g_reserved2 {

        void apply();
        static MemorySegment allocate(_g_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1401.const$1, fi, constants$7.const$5, scope);
        }
        static _g_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved2$VH() {
        return constants$1401.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static MemorySegment _g_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1401.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static void _g_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$1401.const$2.set(seg, x);
    }
    public static MemorySegment _g_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1401.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1401.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved2 _g_reserved2(MemorySegment segment, Arena scope) {
        return _g_reserved2.ofAddress(_g_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved3)();
     * }
     */
    public interface _g_reserved3 {

        void apply();
        static MemorySegment allocate(_g_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1401.const$3, fi, constants$7.const$5, scope);
        }
        static _g_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved3$VH() {
        return constants$1401.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static MemorySegment _g_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1401.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static void _g_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$1401.const$4.set(seg, x);
    }
    public static MemorySegment _g_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1401.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1401.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved3 _g_reserved3(MemorySegment segment, Arena scope) {
        return _g_reserved3.ofAddress(_g_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved4)();
     * }
     */
    public interface _g_reserved4 {

        void apply();
        static MemorySegment allocate(_g_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1401.const$5, fi, constants$7.const$5, scope);
        }
        static _g_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved4$VH() {
        return constants$1402.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static MemorySegment _g_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static void _g_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$1402.const$0.set(seg, x);
    }
    public static MemorySegment _g_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1402.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved4 _g_reserved4(MemorySegment segment, Arena scope) {
        return _g_reserved4.ofAddress(_g_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved5)();
     * }
     */
    public interface _g_reserved5 {

        void apply();
        static MemorySegment allocate(_g_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1402.const$1, fi, constants$7.const$5, scope);
        }
        static _g_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved5$VH() {
        return constants$1402.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static MemorySegment _g_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static void _g_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$1402.const$2.set(seg, x);
    }
    public static MemorySegment _g_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1402.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved5 _g_reserved5(MemorySegment segment, Arena scope) {
        return _g_reserved5.ofAddress(_g_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved6)();
     * }
     */
    public interface _g_reserved6 {

        void apply();
        static MemorySegment allocate(_g_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$1402.const$3, fi, constants$7.const$5, scope);
        }
        static _g_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved6$VH() {
        return constants$1402.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved6)();
     * }
     */
    public static MemorySegment _g_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved6)();
     * }
     */
    public static void _g_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$1402.const$4.set(seg, x);
    }
    public static MemorySegment _g_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1402.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1402.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved6 _g_reserved6(MemorySegment segment, Arena scope) {
        return _g_reserved6.ofAddress(_g_reserved6$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


