// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _PangoLayoutLine {
 *     PangoLayout *layout;
 *     gint start_index;
 *     gint length;
 *     GSList *runs;
 *     guint is_paragraph_start : 1;
 *     guint resolved_dir : 3;
 * }
 * }
 */
public class _PangoLayoutLine {

    _PangoLayoutLine() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_POINTER.withName("layout"),
        app_indicator_h.C_INT.withName("start_index"),
        app_indicator_h.C_INT.withName("length"),
        app_indicator_h.C_POINTER.withName("runs"),
        MemoryLayout.paddingLayout(8)
    ).withName("_PangoLayoutLine");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final AddressLayout layout$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("layout"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * PangoLayout *layout
     * }
     */
    public static final AddressLayout layout$layout() {
        return layout$LAYOUT;
    }

    private static final long layout$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * PangoLayout *layout
     * }
     */
    public static final long layout$offset() {
        return layout$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * PangoLayout *layout
     * }
     */
    public static MemorySegment layout(MemorySegment struct) {
        return struct.get(layout$LAYOUT, layout$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * PangoLayout *layout
     * }
     */
    public static void layout(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(layout$LAYOUT, layout$OFFSET, fieldValue);
    }

    private static final OfInt start_index$LAYOUT = (OfInt)$LAYOUT.select(groupElement("start_index"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint start_index
     * }
     */
    public static final OfInt start_index$layout() {
        return start_index$LAYOUT;
    }

    private static final long start_index$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint start_index
     * }
     */
    public static final long start_index$offset() {
        return start_index$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint start_index
     * }
     */
    public static int start_index(MemorySegment struct) {
        return struct.get(start_index$LAYOUT, start_index$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint start_index
     * }
     */
    public static void start_index(MemorySegment struct, int fieldValue) {
        struct.set(start_index$LAYOUT, start_index$OFFSET, fieldValue);
    }

    private static final OfInt length$LAYOUT = (OfInt)$LAYOUT.select(groupElement("length"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint length
     * }
     */
    public static final OfInt length$layout() {
        return length$LAYOUT;
    }

    private static final long length$OFFSET = 12;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint length
     * }
     */
    public static final long length$offset() {
        return length$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint length
     * }
     */
    public static int length(MemorySegment struct) {
        return struct.get(length$LAYOUT, length$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint length
     * }
     */
    public static void length(MemorySegment struct, int fieldValue) {
        struct.set(length$LAYOUT, length$OFFSET, fieldValue);
    }

    private static final AddressLayout runs$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("runs"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GSList *runs
     * }
     */
    public static final AddressLayout runs$layout() {
        return runs$LAYOUT;
    }

    private static final long runs$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GSList *runs
     * }
     */
    public static final long runs$offset() {
        return runs$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GSList *runs
     * }
     */
    public static MemorySegment runs(MemorySegment struct) {
        return struct.get(runs$LAYOUT, runs$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GSList *runs
     * }
     */
    public static void runs(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(runs$LAYOUT, runs$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

