// Generated by jextract

package org.purejava.appindicator;

import java.lang.foreign.Arena;
import java.lang.foreign.MemoryLayout;
import java.lang.foreign.MemorySegment;
import java.lang.foreign.SegmentAllocator;
import java.lang.invoke.VarHandle;
/**
 * {@snippet :
 * struct _GAppLaunchContextClass {
 *     struct _GObjectClass parent_class;
 *     char* (*get_display)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GList*);
 *     char* (*get_startup_notify_id)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GList*);
 *     void (*launch_failed)(struct _GAppLaunchContext*,char*);
 *     void (*launched)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GVariant*);
 *     void (*launch_started)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GVariant*);
 *     void (*_g_reserved1)();
 *     void (*_g_reserved2)();
 *     void (*_g_reserved3)();
 * };
 * }
 */
public class _GAppLaunchContextClass {

    public static MemoryLayout $LAYOUT() {
        return constants$734.const$3;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * char* (*get_display)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GList*);
     * }
     */
    public interface get_display {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_display fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$734.const$4, fi, constants$23.const$0, scope);
        }
        static get_display ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_display$VH() {
        return constants$735.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_display)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GList*);
     * }
     */
    public static MemorySegment get_display$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$735.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_display)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GList*);
     * }
     */
    public static void get_display$set(MemorySegment seg, MemorySegment x) {
        constants$735.const$0.set(seg, x);
    }
    public static MemorySegment get_display$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$735.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_display$set(MemorySegment seg, long index, MemorySegment x) {
        constants$735.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_display get_display(MemorySegment segment, Arena scope) {
        return get_display.ofAddress(get_display$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_startup_notify_id)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GList*);
     * }
     */
    public interface get_startup_notify_id {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_startup_notify_id fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$735.const$1, fi, constants$23.const$0, scope);
        }
        static get_startup_notify_id ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$734.const$5.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_startup_notify_id$VH() {
        return constants$735.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_startup_notify_id)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GList*);
     * }
     */
    public static MemorySegment get_startup_notify_id$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$735.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_startup_notify_id)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GList*);
     * }
     */
    public static void get_startup_notify_id$set(MemorySegment seg, MemorySegment x) {
        constants$735.const$2.set(seg, x);
    }
    public static MemorySegment get_startup_notify_id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$735.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_startup_notify_id$set(MemorySegment seg, long index, MemorySegment x) {
        constants$735.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_startup_notify_id get_startup_notify_id(MemorySegment segment, Arena scope) {
        return get_startup_notify_id.ofAddress(get_startup_notify_id$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*launch_failed)(struct _GAppLaunchContext*,char*);
     * }
     */
    public interface launch_failed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(launch_failed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$735.const$3, fi, constants$13.const$4, scope);
        }
        static launch_failed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle launch_failed$VH() {
        return constants$735.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*launch_failed)(struct _GAppLaunchContext*,char*);
     * }
     */
    public static MemorySegment launch_failed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$735.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*launch_failed)(struct _GAppLaunchContext*,char*);
     * }
     */
    public static void launch_failed$set(MemorySegment seg, MemorySegment x) {
        constants$735.const$4.set(seg, x);
    }
    public static MemorySegment launch_failed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$735.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void launch_failed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$735.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static launch_failed launch_failed(MemorySegment segment, Arena scope) {
        return launch_failed.ofAddress(launch_failed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*launched)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GVariant*);
     * }
     */
    public interface launched {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(launched fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$735.const$5, fi, constants$14.const$3, scope);
        }
        static launched ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle launched$VH() {
        return constants$736.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*launched)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GVariant*);
     * }
     */
    public static MemorySegment launched$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$736.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*launched)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GVariant*);
     * }
     */
    public static void launched$set(MemorySegment seg, MemorySegment x) {
        constants$736.const$0.set(seg, x);
    }
    public static MemorySegment launched$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$736.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void launched$set(MemorySegment seg, long index, MemorySegment x) {
        constants$736.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static launched launched(MemorySegment segment, Arena scope) {
        return launched.ofAddress(launched$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*launch_started)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GVariant*);
     * }
     */
    public interface launch_started {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(launch_started fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$736.const$1, fi, constants$14.const$3, scope);
        }
        static launch_started ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle launch_started$VH() {
        return constants$736.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*launch_started)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GVariant*);
     * }
     */
    public static MemorySegment launch_started$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$736.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*launch_started)(struct _GAppLaunchContext*,struct _GAppInfo*,struct _GVariant*);
     * }
     */
    public static void launch_started$set(MemorySegment seg, MemorySegment x) {
        constants$736.const$2.set(seg, x);
    }
    public static MemorySegment launch_started$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$736.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void launch_started$set(MemorySegment seg, long index, MemorySegment x) {
        constants$736.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static launch_started launch_started(MemorySegment segment, Arena scope) {
        return launch_started.ofAddress(launch_started$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved1)();
     * }
     */
    public interface _g_reserved1 {

        void apply();
        static MemorySegment allocate(_g_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$736.const$3, fi, constants$7.const$5, scope);
        }
        static _g_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved1$VH() {
        return constants$736.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static MemorySegment _g_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$736.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static void _g_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$736.const$4.set(seg, x);
    }
    public static MemorySegment _g_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$736.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$736.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved1 _g_reserved1(MemorySegment segment, Arena scope) {
        return _g_reserved1.ofAddress(_g_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved2)();
     * }
     */
    public interface _g_reserved2 {

        void apply();
        static MemorySegment allocate(_g_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$736.const$5, fi, constants$7.const$5, scope);
        }
        static _g_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved2$VH() {
        return constants$737.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static MemorySegment _g_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$737.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static void _g_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$737.const$0.set(seg, x);
    }
    public static MemorySegment _g_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$737.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$737.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved2 _g_reserved2(MemorySegment segment, Arena scope) {
        return _g_reserved2.ofAddress(_g_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_g_reserved3)();
     * }
     */
    public interface _g_reserved3 {

        void apply();
        static MemorySegment allocate(_g_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$737.const$1, fi, constants$7.const$5, scope);
        }
        static _g_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _g_reserved3$VH() {
        return constants$737.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static MemorySegment _g_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$737.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static void _g_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$737.const$2.set(seg, x);
    }
    public static MemorySegment _g_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$737.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$737.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved3 _g_reserved3(MemorySegment segment, Arena scope) {
        return _g_reserved3.ofAddress(_g_reserved3$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


