// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GAppLaunchContextClass {
 *     GObjectClass parent_class;
 *     char *(*get_display)(GAppLaunchContext *, GAppInfo *, GList *);
 *     char *(*get_startup_notify_id)(GAppLaunchContext *, GAppInfo *, GList *);
 *     void (*launch_failed)(GAppLaunchContext *, const char *);
 *     void (*launched)(GAppLaunchContext *, GAppInfo *, GVariant *);
 *     void (*launch_started)(GAppLaunchContext *, GAppInfo *, GVariant *);
 *     void (*_g_reserved1)(void);
 *     void (*_g_reserved2)(void);
 *     void (*_g_reserved3)(void);
 * }
 * }
 */
public class _GAppLaunchContextClass {

    _GAppLaunchContextClass() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        _GObjectClass.layout().withName("parent_class"),
        app_indicator_h.C_POINTER.withName("get_display"),
        app_indicator_h.C_POINTER.withName("get_startup_notify_id"),
        app_indicator_h.C_POINTER.withName("launch_failed"),
        app_indicator_h.C_POINTER.withName("launched"),
        app_indicator_h.C_POINTER.withName("launch_started"),
        app_indicator_h.C_POINTER.withName("_g_reserved1"),
        app_indicator_h.C_POINTER.withName("_g_reserved2"),
        app_indicator_h.C_POINTER.withName("_g_reserved3")
    ).withName("_GAppLaunchContextClass");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final GroupLayout parent_class$LAYOUT = (GroupLayout)$LAYOUT.select(groupElement("parent_class"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final GroupLayout parent_class$layout() {
        return parent_class$LAYOUT;
    }

    private static final long parent_class$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static final long parent_class$offset() {
        return parent_class$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static MemorySegment parent_class(MemorySegment struct) {
        return struct.asSlice(parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GObjectClass parent_class
     * }
     */
    public static void parent_class(MemorySegment struct, MemorySegment fieldValue) {
        MemorySegment.copy(fieldValue, 0L, struct, parent_class$OFFSET, parent_class$LAYOUT.byteSize());
    }

    /**
     * {@snippet lang=c :
     * char *(*get_display)(GAppLaunchContext *, GAppInfo *, GList *)
     * }
     */
    public class get_display {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_display.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_display.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_display$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_display"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *(*get_display)(GAppLaunchContext *, GAppInfo *, GList *)
     * }
     */
    public static final AddressLayout get_display$layout() {
        return get_display$LAYOUT;
    }

    private static final long get_display$OFFSET = 136;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *(*get_display)(GAppLaunchContext *, GAppInfo *, GList *)
     * }
     */
    public static final long get_display$offset() {
        return get_display$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *(*get_display)(GAppLaunchContext *, GAppInfo *, GList *)
     * }
     */
    public static MemorySegment get_display(MemorySegment struct) {
        return struct.get(get_display$LAYOUT, get_display$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *(*get_display)(GAppLaunchContext *, GAppInfo *, GList *)
     * }
     */
    public static void get_display(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_display$LAYOUT, get_display$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * char *(*get_startup_notify_id)(GAppLaunchContext *, GAppInfo *, GList *)
     * }
     */
    public class get_startup_notify_id {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            MemorySegment apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.of(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(get_startup_notify_id.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(get_startup_notify_id.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static MemorySegment invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                return (MemorySegment) DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout get_startup_notify_id$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("get_startup_notify_id"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * char *(*get_startup_notify_id)(GAppLaunchContext *, GAppInfo *, GList *)
     * }
     */
    public static final AddressLayout get_startup_notify_id$layout() {
        return get_startup_notify_id$LAYOUT;
    }

    private static final long get_startup_notify_id$OFFSET = 144;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * char *(*get_startup_notify_id)(GAppLaunchContext *, GAppInfo *, GList *)
     * }
     */
    public static final long get_startup_notify_id$offset() {
        return get_startup_notify_id$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * char *(*get_startup_notify_id)(GAppLaunchContext *, GAppInfo *, GList *)
     * }
     */
    public static MemorySegment get_startup_notify_id(MemorySegment struct) {
        return struct.get(get_startup_notify_id$LAYOUT, get_startup_notify_id$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * char *(*get_startup_notify_id)(GAppLaunchContext *, GAppInfo *, GList *)
     * }
     */
    public static void get_startup_notify_id(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(get_startup_notify_id$LAYOUT, get_startup_notify_id$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*launch_failed)(GAppLaunchContext *, const char *)
     * }
     */
    public class launch_failed {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(launch_failed.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(launch_failed.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout launch_failed$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("launch_failed"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*launch_failed)(GAppLaunchContext *, const char *)
     * }
     */
    public static final AddressLayout launch_failed$layout() {
        return launch_failed$LAYOUT;
    }

    private static final long launch_failed$OFFSET = 152;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*launch_failed)(GAppLaunchContext *, const char *)
     * }
     */
    public static final long launch_failed$offset() {
        return launch_failed$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*launch_failed)(GAppLaunchContext *, const char *)
     * }
     */
    public static MemorySegment launch_failed(MemorySegment struct) {
        return struct.get(launch_failed$LAYOUT, launch_failed$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*launch_failed)(GAppLaunchContext *, const char *)
     * }
     */
    public static void launch_failed(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(launch_failed$LAYOUT, launch_failed$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*launched)(GAppLaunchContext *, GAppInfo *, GVariant *)
     * }
     */
    public class launched {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(launched.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(launched.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout launched$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("launched"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*launched)(GAppLaunchContext *, GAppInfo *, GVariant *)
     * }
     */
    public static final AddressLayout launched$layout() {
        return launched$LAYOUT;
    }

    private static final long launched$OFFSET = 160;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*launched)(GAppLaunchContext *, GAppInfo *, GVariant *)
     * }
     */
    public static final long launched$offset() {
        return launched$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*launched)(GAppLaunchContext *, GAppInfo *, GVariant *)
     * }
     */
    public static MemorySegment launched(MemorySegment struct) {
        return struct.get(launched$LAYOUT, launched$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*launched)(GAppLaunchContext *, GAppInfo *, GVariant *)
     * }
     */
    public static void launched(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(launched$LAYOUT, launched$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*launch_started)(GAppLaunchContext *, GAppInfo *, GVariant *)
     * }
     */
    public class launch_started {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply(MemorySegment _x0, MemorySegment _x1, MemorySegment _x2);
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid(
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER,
            app_indicator_h.C_POINTER
        );

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(launch_started.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(launch_started.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr,MemorySegment _x0, MemorySegment _x1, MemorySegment _x2) {
            try {
                 DOWN$MH.invokeExact(funcPtr, _x0, _x1, _x2);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout launch_started$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("launch_started"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*launch_started)(GAppLaunchContext *, GAppInfo *, GVariant *)
     * }
     */
    public static final AddressLayout launch_started$layout() {
        return launch_started$LAYOUT;
    }

    private static final long launch_started$OFFSET = 168;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*launch_started)(GAppLaunchContext *, GAppInfo *, GVariant *)
     * }
     */
    public static final long launch_started$offset() {
        return launch_started$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*launch_started)(GAppLaunchContext *, GAppInfo *, GVariant *)
     * }
     */
    public static MemorySegment launch_started(MemorySegment struct) {
        return struct.get(launch_started$LAYOUT, launch_started$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*launch_started)(GAppLaunchContext *, GAppInfo *, GVariant *)
     * }
     */
    public static void launch_started(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(launch_started$LAYOUT, launch_started$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public class _g_reserved1 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved1.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved1.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved1$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved1"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static final AddressLayout _g_reserved1$layout() {
        return _g_reserved1$LAYOUT;
    }

    private static final long _g_reserved1$OFFSET = 176;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static final long _g_reserved1$offset() {
        return _g_reserved1$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static MemorySegment _g_reserved1(MemorySegment struct) {
        return struct.get(_g_reserved1$LAYOUT, _g_reserved1$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved1)(void)
     * }
     */
    public static void _g_reserved1(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved1$LAYOUT, _g_reserved1$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public class _g_reserved2 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved2.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved2.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved2$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved2"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static final AddressLayout _g_reserved2$layout() {
        return _g_reserved2$LAYOUT;
    }

    private static final long _g_reserved2$OFFSET = 184;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static final long _g_reserved2$offset() {
        return _g_reserved2$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static MemorySegment _g_reserved2(MemorySegment struct) {
        return struct.get(_g_reserved2$LAYOUT, _g_reserved2$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved2)(void)
     * }
     */
    public static void _g_reserved2(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved2$LAYOUT, _g_reserved2$OFFSET, fieldValue);
    }

    /**
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public class _g_reserved3 {

        /**
         * The function pointer signature, expressed as a functional interface
         */
        public interface Function {
            void apply();
        }

        private static final FunctionDescriptor $DESC = FunctionDescriptor.ofVoid();

        /**
         * The descriptor of this function pointer
         */
        public static FunctionDescriptor descriptor() {
            return $DESC;
        }

        private static final MethodHandle UP$MH = app_indicator_h.upcallHandle(_g_reserved3.Function.class, "apply", $DESC);

        /**
         * Allocates a new upcall stub, whose implementation is defined by {@code fi}.
         * The lifetime of the returned segment is managed by {@code arena}
         */
        public static MemorySegment allocate(_g_reserved3.Function fi, Arena arena) {
            return Linker.nativeLinker().upcallStub(UP$MH.bindTo(fi), $DESC, arena);
        }

        private static final MethodHandle DOWN$MH = Linker.nativeLinker().downcallHandle($DESC);

        /**
         * Invoke the upcall stub {@code funcPtr}, with given parameters
         */
        public static void invoke(MemorySegment funcPtr) {
            try {
                 DOWN$MH.invokeExact(funcPtr);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        }
    }

    private static final AddressLayout _g_reserved3$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("_g_reserved3"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static final AddressLayout _g_reserved3$layout() {
        return _g_reserved3$LAYOUT;
    }

    private static final long _g_reserved3$OFFSET = 192;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static final long _g_reserved3$offset() {
        return _g_reserved3$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static MemorySegment _g_reserved3(MemorySegment struct) {
        return struct.get(_g_reserved3$LAYOUT, _g_reserved3$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * void (*_g_reserved3)(void)
     * }
     */
    public static void _g_reserved3(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(_g_reserved3$LAYOUT, _g_reserved3$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

