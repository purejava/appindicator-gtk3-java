// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.*;
import java.lang.foreign.*;
import java.nio.ByteOrder;
import java.util.*;
import java.util.function.*;
import java.util.stream.*;

import static java.lang.foreign.ValueLayout.*;
import static java.lang.foreign.MemoryLayout.PathElement.*;

/**
 * {@snippet lang=c :
 * struct _GtkRecentFilterInfo {
 *     GtkRecentFilterFlags contains;
 *     const gchar *uri;
 *     const gchar *display_name;
 *     const gchar *mime_type;
 *     const gchar **applications;
 *     const gchar **groups;
 *     gint age;
 * }
 * }
 */
public class _GtkRecentFilterInfo {

    _GtkRecentFilterInfo() {
        // Should not be called directly
    }

    private static final GroupLayout $LAYOUT = MemoryLayout.structLayout(
        app_indicator_h.C_INT.withName("contains"),
        MemoryLayout.paddingLayout(4),
        app_indicator_h.C_POINTER.withName("uri"),
        app_indicator_h.C_POINTER.withName("display_name"),
        app_indicator_h.C_POINTER.withName("mime_type"),
        app_indicator_h.C_POINTER.withName("applications"),
        app_indicator_h.C_POINTER.withName("groups"),
        app_indicator_h.C_INT.withName("age"),
        MemoryLayout.paddingLayout(4)
    ).withName("_GtkRecentFilterInfo");

    /**
     * The layout of this struct
     */
    public static final GroupLayout layout() {
        return $LAYOUT;
    }

    private static final OfInt contains$LAYOUT = (OfInt)$LAYOUT.select(groupElement("contains"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * GtkRecentFilterFlags contains
     * }
     */
    public static final OfInt contains$layout() {
        return contains$LAYOUT;
    }

    private static final long contains$OFFSET = 0;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * GtkRecentFilterFlags contains
     * }
     */
    public static final long contains$offset() {
        return contains$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * GtkRecentFilterFlags contains
     * }
     */
    public static int contains(MemorySegment struct) {
        return struct.get(contains$LAYOUT, contains$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * GtkRecentFilterFlags contains
     * }
     */
    public static void contains(MemorySegment struct, int fieldValue) {
        struct.set(contains$LAYOUT, contains$OFFSET, fieldValue);
    }

    private static final AddressLayout uri$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("uri"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar *uri
     * }
     */
    public static final AddressLayout uri$layout() {
        return uri$LAYOUT;
    }

    private static final long uri$OFFSET = 8;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar *uri
     * }
     */
    public static final long uri$offset() {
        return uri$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar *uri
     * }
     */
    public static MemorySegment uri(MemorySegment struct) {
        return struct.get(uri$LAYOUT, uri$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar *uri
     * }
     */
    public static void uri(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(uri$LAYOUT, uri$OFFSET, fieldValue);
    }

    private static final AddressLayout display_name$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("display_name"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar *display_name
     * }
     */
    public static final AddressLayout display_name$layout() {
        return display_name$LAYOUT;
    }

    private static final long display_name$OFFSET = 16;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar *display_name
     * }
     */
    public static final long display_name$offset() {
        return display_name$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar *display_name
     * }
     */
    public static MemorySegment display_name(MemorySegment struct) {
        return struct.get(display_name$LAYOUT, display_name$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar *display_name
     * }
     */
    public static void display_name(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(display_name$LAYOUT, display_name$OFFSET, fieldValue);
    }

    private static final AddressLayout mime_type$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("mime_type"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar *mime_type
     * }
     */
    public static final AddressLayout mime_type$layout() {
        return mime_type$LAYOUT;
    }

    private static final long mime_type$OFFSET = 24;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar *mime_type
     * }
     */
    public static final long mime_type$offset() {
        return mime_type$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar *mime_type
     * }
     */
    public static MemorySegment mime_type(MemorySegment struct) {
        return struct.get(mime_type$LAYOUT, mime_type$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar *mime_type
     * }
     */
    public static void mime_type(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(mime_type$LAYOUT, mime_type$OFFSET, fieldValue);
    }

    private static final AddressLayout applications$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("applications"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar **applications
     * }
     */
    public static final AddressLayout applications$layout() {
        return applications$LAYOUT;
    }

    private static final long applications$OFFSET = 32;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar **applications
     * }
     */
    public static final long applications$offset() {
        return applications$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar **applications
     * }
     */
    public static MemorySegment applications(MemorySegment struct) {
        return struct.get(applications$LAYOUT, applications$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar **applications
     * }
     */
    public static void applications(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(applications$LAYOUT, applications$OFFSET, fieldValue);
    }

    private static final AddressLayout groups$LAYOUT = (AddressLayout)$LAYOUT.select(groupElement("groups"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * const gchar **groups
     * }
     */
    public static final AddressLayout groups$layout() {
        return groups$LAYOUT;
    }

    private static final long groups$OFFSET = 40;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * const gchar **groups
     * }
     */
    public static final long groups$offset() {
        return groups$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * const gchar **groups
     * }
     */
    public static MemorySegment groups(MemorySegment struct) {
        return struct.get(groups$LAYOUT, groups$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * const gchar **groups
     * }
     */
    public static void groups(MemorySegment struct, MemorySegment fieldValue) {
        struct.set(groups$LAYOUT, groups$OFFSET, fieldValue);
    }

    private static final OfInt age$LAYOUT = (OfInt)$LAYOUT.select(groupElement("age"));

    /**
     * Layout for field:
     * {@snippet lang=c :
     * gint age
     * }
     */
    public static final OfInt age$layout() {
        return age$LAYOUT;
    }

    private static final long age$OFFSET = 48;

    /**
     * Offset for field:
     * {@snippet lang=c :
     * gint age
     * }
     */
    public static final long age$offset() {
        return age$OFFSET;
    }

    /**
     * Getter for field:
     * {@snippet lang=c :
     * gint age
     * }
     */
    public static int age(MemorySegment struct) {
        return struct.get(age$LAYOUT, age$OFFSET);
    }

    /**
     * Setter for field:
     * {@snippet lang=c :
     * gint age
     * }
     */
    public static void age(MemorySegment struct, int fieldValue) {
        struct.set(age$LAYOUT, age$OFFSET, fieldValue);
    }

    /**
     * Obtains a slice of {@code arrayParam} which selects the array element at {@code index}.
     * The returned segment has address {@code arrayParam.address() + index * layout().byteSize()}
     */
    public static MemorySegment asSlice(MemorySegment array, long index) {
        return array.asSlice(layout().byteSize() * index);
    }

    /**
     * The size (in bytes) of this struct
     */
    public static long sizeof() { return layout().byteSize(); }

    /**
     * Allocate a segment of size {@code layout().byteSize()} using {@code allocator}
     */
    public static MemorySegment allocate(SegmentAllocator allocator) {
        return allocator.allocate(layout());
    }

    /**
     * Allocate an array of size {@code elementCount} using {@code allocator}.
     * The returned segment has size {@code elementCount * layout().byteSize()}.
     */
    public static MemorySegment allocateArray(long elementCount, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(elementCount, layout()));
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, Arena arena, Consumer<MemorySegment> cleanup) {
        return reinterpret(addr, 1, arena, cleanup);
    }

    /**
     * Reinterprets {@code addr} using target {@code arena} and {@code cleanupAction) (if any).
     * The returned segment has size {@code elementCount * layout().byteSize()}
     */
    public static MemorySegment reinterpret(MemorySegment addr, long elementCount, Arena arena, Consumer<MemorySegment> cleanup) {
        return addr.reinterpret(layout().byteSize() * elementCount, arena, cleanup);
    }
}

