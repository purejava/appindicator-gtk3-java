// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GDBusPropertyInfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("ref_count"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("signature"),
        Constants$root.C_INT$LAYOUT.withName("flags"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("annotations")
    ).withName("_GDBusPropertyInfo");
    public static MemoryLayout $LAYOUT() {
        return _GDBusPropertyInfo.$struct$LAYOUT;
    }
    static final VarHandle ref_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_count"));
    public static VarHandle ref_count$VH() {
        return _GDBusPropertyInfo.ref_count$VH;
    }
    public static int ref_count$get(MemorySegment seg) {
        return (int)_GDBusPropertyInfo.ref_count$VH.get(seg);
    }
    public static void ref_count$set( MemorySegment seg, int x) {
        _GDBusPropertyInfo.ref_count$VH.set(seg, x);
    }
    public static int ref_count$get(MemorySegment seg, long index) {
        return (int)_GDBusPropertyInfo.ref_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_count$set(MemorySegment seg, long index, int x) {
        _GDBusPropertyInfo.ref_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return _GDBusPropertyInfo.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GDBusPropertyInfo.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        _GDBusPropertyInfo.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GDBusPropertyInfo.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusPropertyInfo.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle signature$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("signature"));
    public static VarHandle signature$VH() {
        return _GDBusPropertyInfo.signature$VH;
    }
    public static MemoryAddress signature$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GDBusPropertyInfo.signature$VH.get(seg);
    }
    public static void signature$set( MemorySegment seg, MemoryAddress x) {
        _GDBusPropertyInfo.signature$VH.set(seg, x);
    }
    public static MemoryAddress signature$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GDBusPropertyInfo.signature$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void signature$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusPropertyInfo.signature$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flags"));
    public static VarHandle flags$VH() {
        return _GDBusPropertyInfo.flags$VH;
    }
    public static int flags$get(MemorySegment seg) {
        return (int)_GDBusPropertyInfo.flags$VH.get(seg);
    }
    public static void flags$set( MemorySegment seg, int x) {
        _GDBusPropertyInfo.flags$VH.set(seg, x);
    }
    public static int flags$get(MemorySegment seg, long index) {
        return (int)_GDBusPropertyInfo.flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flags$set(MemorySegment seg, long index, int x) {
        _GDBusPropertyInfo.flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle annotations$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("annotations"));
    public static VarHandle annotations$VH() {
        return _GDBusPropertyInfo.annotations$VH;
    }
    public static MemoryAddress annotations$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GDBusPropertyInfo.annotations$VH.get(seg);
    }
    public static void annotations$set( MemorySegment seg, MemoryAddress x) {
        _GDBusPropertyInfo.annotations$VH.set(seg, x);
    }
    public static MemoryAddress annotations$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GDBusPropertyInfo.annotations$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void annotations$set(MemorySegment seg, long index, MemoryAddress x) {
        _GDBusPropertyInfo.annotations$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


