// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PangoFontMapClass {
 *     GObjectClass parent_class;
 *     PangoFont* (*load_font)(PangoFontMap*,PangoContext*,const PangoFontDescription*);
 *     void (*list_families)(PangoFontMap*,PangoFontFamily***,int*);
 *     PangoFontset* (*load_fontset)(PangoFontMap*,PangoContext*,const PangoFontDescription*,PangoLanguage*);
 *     char* shape_engine_type;
 *     guint (*get_serial)(PangoFontMap*);
 *     void (*changed)(PangoFontMap*);
 *     PangoFontFamily* (*get_family)(PangoFontMap*,char*);
 *     PangoFontFace* (*get_face)(PangoFontMap*,PangoFont*);
 * };
 * }
 */
public class _PangoFontMapClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("load_font"),
        Constants$root.C_POINTER$LAYOUT.withName("list_families"),
        Constants$root.C_POINTER$LAYOUT.withName("load_fontset"),
        Constants$root.C_POINTER$LAYOUT.withName("shape_engine_type"),
        Constants$root.C_POINTER$LAYOUT.withName("get_serial"),
        Constants$root.C_POINTER$LAYOUT.withName("changed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_family"),
        Constants$root.C_POINTER$LAYOUT.withName("get_face")
    ).withName("_PangoFontMapClass");
    public static MemoryLayout $LAYOUT() {
        return _PangoFontMapClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor load_font$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor load_font_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle load_font_UP$MH = RuntimeHelper.upcallHandle(load_font.class, "apply", _PangoFontMapClass.load_font_UP$FUNC);
    static final FunctionDescriptor load_font_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle load_font_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoFontMapClass.load_font_DOWN$FUNC
    );
    /**
     * {@snippet :
 * PangoFont* (*load_font)(PangoFontMap*,PangoContext*,const PangoFontDescription*);
     * }
     */
    public interface load_font {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(load_font fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoFontMapClass.load_font_UP$MH, fi, _PangoFontMapClass.load_font$FUNC, scope);
        }
        static load_font ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_PangoFontMapClass.load_font_DOWN$MH.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle load_font$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("load_font"));
    public static VarHandle load_font$VH() {
        return _PangoFontMapClass.load_font$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PangoFont* (*load_font)(PangoFontMap*,PangoContext*,const PangoFontDescription*);
     * }
     */
    public static MemorySegment load_font$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.load_font$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PangoFont* (*load_font)(PangoFontMap*,PangoContext*,const PangoFontDescription*);
     * }
     */
    public static void load_font$set(MemorySegment seg, MemorySegment x) {
        _PangoFontMapClass.load_font$VH.set(seg, x);
    }
    public static MemorySegment load_font$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.load_font$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load_font$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoFontMapClass.load_font$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static load_font load_font(MemorySegment segment, SegmentScope scope) {
        return load_font.ofAddress(load_font$get(segment), scope);
    }
    static final FunctionDescriptor list_families$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor list_families_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle list_families_UP$MH = RuntimeHelper.upcallHandle(list_families.class, "apply", _PangoFontMapClass.list_families_UP$FUNC);
    static final FunctionDescriptor list_families_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle list_families_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoFontMapClass.list_families_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*list_families)(PangoFontMap*,PangoFontFamily***,int*);
     * }
     */
    public interface list_families {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(list_families fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoFontMapClass.list_families_UP$MH, fi, _PangoFontMapClass.list_families$FUNC, scope);
        }
        static list_families ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _PangoFontMapClass.list_families_DOWN$MH.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle list_families$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("list_families"));
    public static VarHandle list_families$VH() {
        return _PangoFontMapClass.list_families$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*list_families)(PangoFontMap*,PangoFontFamily***,int*);
     * }
     */
    public static MemorySegment list_families$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.list_families$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*list_families)(PangoFontMap*,PangoFontFamily***,int*);
     * }
     */
    public static void list_families$set(MemorySegment seg, MemorySegment x) {
        _PangoFontMapClass.list_families$VH.set(seg, x);
    }
    public static MemorySegment list_families$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.list_families$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void list_families$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoFontMapClass.list_families$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static list_families list_families(MemorySegment segment, SegmentScope scope) {
        return list_families.ofAddress(list_families$get(segment), scope);
    }
    static final FunctionDescriptor load_fontset$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor load_fontset_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle load_fontset_UP$MH = RuntimeHelper.upcallHandle(load_fontset.class, "apply", _PangoFontMapClass.load_fontset_UP$FUNC);
    static final FunctionDescriptor load_fontset_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle load_fontset_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoFontMapClass.load_fontset_DOWN$FUNC
    );
    /**
     * {@snippet :
 * PangoFontset* (*load_fontset)(PangoFontMap*,PangoContext*,const PangoFontDescription*,PangoLanguage*);
     * }
     */
    public interface load_fontset {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment pattern, java.lang.foreign.MemorySegment callback_data, java.lang.foreign.MemorySegment target, java.lang.foreign.MemorySegment extents);
        static MemorySegment allocate(load_fontset fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoFontMapClass.load_fontset_UP$MH, fi, _PangoFontMapClass.load_fontset$FUNC, scope);
        }
        static load_fontset ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pattern, java.lang.foreign.MemorySegment _callback_data, java.lang.foreign.MemorySegment _target, java.lang.foreign.MemorySegment _extents) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_PangoFontMapClass.load_fontset_DOWN$MH.invokeExact(symbol, _pattern, _callback_data, _target, _extents);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle load_fontset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("load_fontset"));
    public static VarHandle load_fontset$VH() {
        return _PangoFontMapClass.load_fontset$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PangoFontset* (*load_fontset)(PangoFontMap*,PangoContext*,const PangoFontDescription*,PangoLanguage*);
     * }
     */
    public static MemorySegment load_fontset$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.load_fontset$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PangoFontset* (*load_fontset)(PangoFontMap*,PangoContext*,const PangoFontDescription*,PangoLanguage*);
     * }
     */
    public static void load_fontset$set(MemorySegment seg, MemorySegment x) {
        _PangoFontMapClass.load_fontset$VH.set(seg, x);
    }
    public static MemorySegment load_fontset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.load_fontset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void load_fontset$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoFontMapClass.load_fontset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static load_fontset load_fontset(MemorySegment segment, SegmentScope scope) {
        return load_fontset.ofAddress(load_fontset$get(segment), scope);
    }
    static final VarHandle shape_engine_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("shape_engine_type"));
    public static VarHandle shape_engine_type$VH() {
        return _PangoFontMapClass.shape_engine_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* shape_engine_type;
     * }
     */
    public static MemorySegment shape_engine_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.shape_engine_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* shape_engine_type;
     * }
     */
    public static void shape_engine_type$set(MemorySegment seg, MemorySegment x) {
        _PangoFontMapClass.shape_engine_type$VH.set(seg, x);
    }
    public static MemorySegment shape_engine_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.shape_engine_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void shape_engine_type$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoFontMapClass.shape_engine_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor get_serial$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_serial_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_serial_UP$MH = RuntimeHelper.upcallHandle(get_serial.class, "apply", _PangoFontMapClass.get_serial_UP$FUNC);
    static final FunctionDescriptor get_serial_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_serial_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoFontMapClass.get_serial_DOWN$FUNC
    );
    /**
     * {@snippet :
 * guint (*get_serial)(PangoFontMap*);
     * }
     */
    public interface get_serial {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_serial fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoFontMapClass.get_serial_UP$MH, fi, _PangoFontMapClass.get_serial$FUNC, scope);
        }
        static get_serial ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_PangoFontMapClass.get_serial_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_serial$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_serial"));
    public static VarHandle get_serial$VH() {
        return _PangoFontMapClass.get_serial$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint (*get_serial)(PangoFontMap*);
     * }
     */
    public static MemorySegment get_serial$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.get_serial$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint (*get_serial)(PangoFontMap*);
     * }
     */
    public static void get_serial$set(MemorySegment seg, MemorySegment x) {
        _PangoFontMapClass.get_serial$VH.set(seg, x);
    }
    public static MemorySegment get_serial$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.get_serial$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_serial$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoFontMapClass.get_serial$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_serial get_serial(MemorySegment segment, SegmentScope scope) {
        return get_serial.ofAddress(get_serial$get(segment), scope);
    }
    static final FunctionDescriptor changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle changed_UP$MH = RuntimeHelper.upcallHandle(changed.class, "apply", _PangoFontMapClass.changed_UP$FUNC);
    static final FunctionDescriptor changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoFontMapClass.changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*changed)(PangoFontMap*);
     * }
     */
    public interface changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoFontMapClass.changed_UP$MH, fi, _PangoFontMapClass.changed$FUNC, scope);
        }
        static changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _PangoFontMapClass.changed_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("changed"));
    public static VarHandle changed$VH() {
        return _PangoFontMapClass.changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*changed)(PangoFontMap*);
     * }
     */
    public static MemorySegment changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*changed)(PangoFontMap*);
     * }
     */
    public static void changed$set(MemorySegment seg, MemorySegment x) {
        _PangoFontMapClass.changed$VH.set(seg, x);
    }
    public static MemorySegment changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoFontMapClass.changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed(MemorySegment segment, SegmentScope scope) {
        return changed.ofAddress(changed$get(segment), scope);
    }
    static final FunctionDescriptor get_family$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_family_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_family_UP$MH = RuntimeHelper.upcallHandle(get_family.class, "apply", _PangoFontMapClass.get_family_UP$FUNC);
    static final FunctionDescriptor get_family_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_family_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoFontMapClass.get_family_DOWN$FUNC
    );
    /**
     * {@snippet :
 * PangoFontFamily* (*get_family)(PangoFontMap*,char*);
     * }
     */
    public interface get_family {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_family fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoFontMapClass.get_family_UP$MH, fi, _PangoFontMapClass.get_family$FUNC, scope);
        }
        static get_family ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_PangoFontMapClass.get_family_DOWN$MH.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_family$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_family"));
    public static VarHandle get_family$VH() {
        return _PangoFontMapClass.get_family$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PangoFontFamily* (*get_family)(PangoFontMap*,char*);
     * }
     */
    public static MemorySegment get_family$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.get_family$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PangoFontFamily* (*get_family)(PangoFontMap*,char*);
     * }
     */
    public static void get_family$set(MemorySegment seg, MemorySegment x) {
        _PangoFontMapClass.get_family$VH.set(seg, x);
    }
    public static MemorySegment get_family$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.get_family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_family$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoFontMapClass.get_family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_family get_family(MemorySegment segment, SegmentScope scope) {
        return get_family.ofAddress(get_family$get(segment), scope);
    }
    static final FunctionDescriptor get_face$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_face_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_face_UP$MH = RuntimeHelper.upcallHandle(get_face.class, "apply", _PangoFontMapClass.get_face_UP$FUNC);
    static final FunctionDescriptor get_face_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_face_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoFontMapClass.get_face_DOWN$FUNC
    );
    /**
     * {@snippet :
 * PangoFontFace* (*get_face)(PangoFontMap*,PangoFont*);
     * }
     */
    public interface get_face {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(get_face fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoFontMapClass.get_face_UP$MH, fi, _PangoFontMapClass.get_face$FUNC, scope);
        }
        static get_face ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_PangoFontMapClass.get_face_DOWN$MH.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_face$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_face"));
    public static VarHandle get_face$VH() {
        return _PangoFontMapClass.get_face$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PangoFontFace* (*get_face)(PangoFontMap*,PangoFont*);
     * }
     */
    public static MemorySegment get_face$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.get_face$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PangoFontFace* (*get_face)(PangoFontMap*,PangoFont*);
     * }
     */
    public static void get_face$set(MemorySegment seg, MemorySegment x) {
        _PangoFontMapClass.get_face$VH.set(seg, x);
    }
    public static MemorySegment get_face$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoFontMapClass.get_face$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_face$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoFontMapClass.get_face$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_face get_face(MemorySegment segment, SegmentScope scope) {
        return get_face.ofAddress(get_face$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


