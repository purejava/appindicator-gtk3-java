// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkEditableTextIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent_interface"),
        Constants$root.C_POINTER$LAYOUT.withName("set_run_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("set_text_contents"),
        Constants$root.C_POINTER$LAYOUT.withName("insert_text"),
        Constants$root.C_POINTER$LAYOUT.withName("copy_text"),
        Constants$root.C_POINTER$LAYOUT.withName("cut_text"),
        Constants$root.C_POINTER$LAYOUT.withName("delete_text"),
        Constants$root.C_POINTER$LAYOUT.withName("paste_text")
    ).withName("_AtkEditableTextIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkEditableTextIface.$struct$LAYOUT;
    }
    public static MemorySegment parent_interface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor set_run_attributes$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_run_attributes$MH = RuntimeHelper.downcallHandle(
        _AtkEditableTextIface.set_run_attributes$FUNC
    );
    public interface set_run_attributes {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, int _x3);
        static MemorySegment allocate(set_run_attributes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_run_attributes.class, fi, _AtkEditableTextIface.set_run_attributes$FUNC, session);
        }
        static set_run_attributes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, int __x3) -> {
                try {
                    return (int)_AtkEditableTextIface.set_run_attributes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_run_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_run_attributes"));
    public static VarHandle set_run_attributes$VH() {
        return _AtkEditableTextIface.set_run_attributes$VH;
    }
    public static MemoryAddress set_run_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.set_run_attributes$VH.get(seg);
    }
    public static void set_run_attributes$set( MemorySegment seg, MemoryAddress x) {
        _AtkEditableTextIface.set_run_attributes$VH.set(seg, x);
    }
    public static MemoryAddress set_run_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.set_run_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_run_attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkEditableTextIface.set_run_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_run_attributes set_run_attributes (MemorySegment segment, MemorySession session) {
        return set_run_attributes.ofAddress(set_run_attributes$get(segment), session);
    }
    static final FunctionDescriptor set_text_contents$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_text_contents$MH = RuntimeHelper.downcallHandle(
        _AtkEditableTextIface.set_text_contents$FUNC
    );
    public interface set_text_contents {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_text_contents fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_text_contents.class, fi, _AtkEditableTextIface.set_text_contents$FUNC, session);
        }
        static set_text_contents ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkEditableTextIface.set_text_contents$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_text_contents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_text_contents"));
    public static VarHandle set_text_contents$VH() {
        return _AtkEditableTextIface.set_text_contents$VH;
    }
    public static MemoryAddress set_text_contents$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.set_text_contents$VH.get(seg);
    }
    public static void set_text_contents$set( MemorySegment seg, MemoryAddress x) {
        _AtkEditableTextIface.set_text_contents$VH.set(seg, x);
    }
    public static MemoryAddress set_text_contents$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.set_text_contents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_text_contents$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkEditableTextIface.set_text_contents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_text_contents set_text_contents (MemorySegment segment, MemorySession session) {
        return set_text_contents.ofAddress(set_text_contents$get(segment), session);
    }
    static final FunctionDescriptor insert_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insert_text$MH = RuntimeHelper.downcallHandle(
        _AtkEditableTextIface.insert_text$FUNC
    );
    public interface insert_text {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(insert_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(insert_text.class, fi, _AtkEditableTextIface.insert_text$FUNC, session);
        }
        static insert_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _AtkEditableTextIface.insert_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insert_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insert_text"));
    public static VarHandle insert_text$VH() {
        return _AtkEditableTextIface.insert_text$VH;
    }
    public static MemoryAddress insert_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.insert_text$VH.get(seg);
    }
    public static void insert_text$set( MemorySegment seg, MemoryAddress x) {
        _AtkEditableTextIface.insert_text$VH.set(seg, x);
    }
    public static MemoryAddress insert_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.insert_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_text$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkEditableTextIface.insert_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_text insert_text (MemorySegment segment, MemorySession session) {
        return insert_text.ofAddress(insert_text$get(segment), session);
    }
    static final FunctionDescriptor copy_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle copy_text$MH = RuntimeHelper.downcallHandle(
        _AtkEditableTextIface.copy_text$FUNC
    );
    public interface copy_text {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(copy_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(copy_text.class, fi, _AtkEditableTextIface.copy_text$FUNC, session);
        }
        static copy_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    _AtkEditableTextIface.copy_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle copy_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("copy_text"));
    public static VarHandle copy_text$VH() {
        return _AtkEditableTextIface.copy_text$VH;
    }
    public static MemoryAddress copy_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.copy_text$VH.get(seg);
    }
    public static void copy_text$set( MemorySegment seg, MemoryAddress x) {
        _AtkEditableTextIface.copy_text$VH.set(seg, x);
    }
    public static MemoryAddress copy_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.copy_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_text$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkEditableTextIface.copy_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_text copy_text (MemorySegment segment, MemorySession session) {
        return copy_text.ofAddress(copy_text$get(segment), session);
    }
    static final FunctionDescriptor cut_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle cut_text$MH = RuntimeHelper.downcallHandle(
        _AtkEditableTextIface.cut_text$FUNC
    );
    public interface cut_text {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(cut_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(cut_text.class, fi, _AtkEditableTextIface.cut_text$FUNC, session);
        }
        static cut_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    _AtkEditableTextIface.cut_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cut_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cut_text"));
    public static VarHandle cut_text$VH() {
        return _AtkEditableTextIface.cut_text$VH;
    }
    public static MemoryAddress cut_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.cut_text$VH.get(seg);
    }
    public static void cut_text$set( MemorySegment seg, MemoryAddress x) {
        _AtkEditableTextIface.cut_text$VH.set(seg, x);
    }
    public static MemoryAddress cut_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.cut_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cut_text$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkEditableTextIface.cut_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cut_text cut_text (MemorySegment segment, MemorySession session) {
        return cut_text.ofAddress(cut_text$get(segment), session);
    }
    static final FunctionDescriptor delete_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle delete_text$MH = RuntimeHelper.downcallHandle(
        _AtkEditableTextIface.delete_text$FUNC
    );
    public interface delete_text {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(delete_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(delete_text.class, fi, _AtkEditableTextIface.delete_text$FUNC, session);
        }
        static delete_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    _AtkEditableTextIface.delete_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle delete_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delete_text"));
    public static VarHandle delete_text$VH() {
        return _AtkEditableTextIface.delete_text$VH;
    }
    public static MemoryAddress delete_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.delete_text$VH.get(seg);
    }
    public static void delete_text$set( MemorySegment seg, MemoryAddress x) {
        _AtkEditableTextIface.delete_text$VH.set(seg, x);
    }
    public static MemoryAddress delete_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.delete_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_text$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkEditableTextIface.delete_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_text delete_text (MemorySegment segment, MemorySession session) {
        return delete_text.ofAddress(delete_text$get(segment), session);
    }
    static final FunctionDescriptor paste_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle paste_text$MH = RuntimeHelper.downcallHandle(
        _AtkEditableTextIface.paste_text$FUNC
    );
    public interface paste_text {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(paste_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(paste_text.class, fi, _AtkEditableTextIface.paste_text$FUNC, session);
        }
        static paste_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _AtkEditableTextIface.paste_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle paste_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("paste_text"));
    public static VarHandle paste_text$VH() {
        return _AtkEditableTextIface.paste_text$VH;
    }
    public static MemoryAddress paste_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.paste_text$VH.get(seg);
    }
    public static void paste_text$set( MemorySegment seg, MemoryAddress x) {
        _AtkEditableTextIface.paste_text$VH.set(seg, x);
    }
    public static MemoryAddress paste_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkEditableTextIface.paste_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void paste_text$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkEditableTextIface.paste_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static paste_text paste_text (MemorySegment segment, MemorySession session) {
        return paste_text.ofAddress(paste_text$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


