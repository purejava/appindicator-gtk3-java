// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class siginfo_t {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("si_signo"),
        Constants$root.C_INT$LAYOUT.withName("si_errno"),
        Constants$root.C_INT$LAYOUT.withName("si_code"),
        Constants$root.C_INT$LAYOUT.withName("__pad0"),
        MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(28, Constants$root.C_INT$LAYOUT).withName("_pad"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_pid"),
                Constants$root.C_INT$LAYOUT.withName("si_uid")
            ).withName("_kill"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_tid"),
                Constants$root.C_INT$LAYOUT.withName("si_overrun"),
                MemoryLayout.unionLayout(
                    Constants$root.C_INT$LAYOUT.withName("sival_int"),
                    Constants$root.C_POINTER$LAYOUT.withName("sival_ptr")
                ).withName("si_sigval")
            ).withName("_timer"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_pid"),
                Constants$root.C_INT$LAYOUT.withName("si_uid"),
                MemoryLayout.unionLayout(
                    Constants$root.C_INT$LAYOUT.withName("sival_int"),
                    Constants$root.C_POINTER$LAYOUT.withName("sival_ptr")
                ).withName("si_sigval")
            ).withName("_rt"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_pid"),
                Constants$root.C_INT$LAYOUT.withName("si_uid"),
                Constants$root.C_INT$LAYOUT.withName("si_status"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_LONG_LONG$LAYOUT.withName("si_utime"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("si_stime")
            ).withName("_sigchld"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("si_addr"),
                Constants$root.C_SHORT$LAYOUT.withName("si_addr_lsb"),
                MemoryLayout.paddingLayout(48),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_POINTER$LAYOUT.withName("_lower"),
                        Constants$root.C_POINTER$LAYOUT.withName("_upper")
                    ).withName("_addr_bnd"),
                    Constants$root.C_INT$LAYOUT.withName("_pkey")
                ).withName("_bounds")
            ).withName("_sigfault"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("si_band"),
                Constants$root.C_INT$LAYOUT.withName("si_fd"),
                MemoryLayout.paddingLayout(32)
            ).withName("_sigpoll"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("_call_addr"),
                Constants$root.C_INT$LAYOUT.withName("_syscall"),
                Constants$root.C_INT$LAYOUT.withName("_arch")
            ).withName("_sigsys")
        ).withName("_sifields")
    );
    public static MemoryLayout $LAYOUT() {
        return siginfo_t.$struct$LAYOUT;
    }
    static final VarHandle si_signo$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_signo"));
    public static VarHandle si_signo$VH() {
        return siginfo_t.si_signo$VH;
    }
    public static int si_signo$get(MemorySegment seg) {
        return (int)siginfo_t.si_signo$VH.get(seg);
    }
    public static void si_signo$set( MemorySegment seg, int x) {
        siginfo_t.si_signo$VH.set(seg, x);
    }
    public static int si_signo$get(MemorySegment seg, long index) {
        return (int)siginfo_t.si_signo$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_signo$set(MemorySegment seg, long index, int x) {
        siginfo_t.si_signo$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle si_errno$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_errno"));
    public static VarHandle si_errno$VH() {
        return siginfo_t.si_errno$VH;
    }
    public static int si_errno$get(MemorySegment seg) {
        return (int)siginfo_t.si_errno$VH.get(seg);
    }
    public static void si_errno$set( MemorySegment seg, int x) {
        siginfo_t.si_errno$VH.set(seg, x);
    }
    public static int si_errno$get(MemorySegment seg, long index) {
        return (int)siginfo_t.si_errno$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_errno$set(MemorySegment seg, long index, int x) {
        siginfo_t.si_errno$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle si_code$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_code"));
    public static VarHandle si_code$VH() {
        return siginfo_t.si_code$VH;
    }
    public static int si_code$get(MemorySegment seg) {
        return (int)siginfo_t.si_code$VH.get(seg);
    }
    public static void si_code$set( MemorySegment seg, int x) {
        siginfo_t.si_code$VH.set(seg, x);
    }
    public static int si_code$get(MemorySegment seg, long index) {
        return (int)siginfo_t.si_code$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void si_code$set(MemorySegment seg, long index, int x) {
        siginfo_t.si_code$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle __pad0$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("__pad0"));
    public static VarHandle __pad0$VH() {
        return siginfo_t.__pad0$VH;
    }
    public static int __pad0$get(MemorySegment seg) {
        return (int)siginfo_t.__pad0$VH.get(seg);
    }
    public static void __pad0$set( MemorySegment seg, int x) {
        siginfo_t.__pad0$VH.set(seg, x);
    }
    public static int __pad0$get(MemorySegment seg, long index) {
        return (int)siginfo_t.__pad0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void __pad0$set(MemorySegment seg, long index, int x) {
        siginfo_t.__pad0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class _sifields {

        static final  GroupLayout _sifields$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.sequenceLayout(28, Constants$root.C_INT$LAYOUT).withName("_pad"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_pid"),
                Constants$root.C_INT$LAYOUT.withName("si_uid")
            ).withName("_kill"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_tid"),
                Constants$root.C_INT$LAYOUT.withName("si_overrun"),
                MemoryLayout.unionLayout(
                    Constants$root.C_INT$LAYOUT.withName("sival_int"),
                    Constants$root.C_POINTER$LAYOUT.withName("sival_ptr")
                ).withName("si_sigval")
            ).withName("_timer"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_pid"),
                Constants$root.C_INT$LAYOUT.withName("si_uid"),
                MemoryLayout.unionLayout(
                    Constants$root.C_INT$LAYOUT.withName("sival_int"),
                    Constants$root.C_POINTER$LAYOUT.withName("sival_ptr")
                ).withName("si_sigval")
            ).withName("_rt"),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_pid"),
                Constants$root.C_INT$LAYOUT.withName("si_uid"),
                Constants$root.C_INT$LAYOUT.withName("si_status"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_LONG_LONG$LAYOUT.withName("si_utime"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("si_stime")
            ).withName("_sigchld"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("si_addr"),
                Constants$root.C_SHORT$LAYOUT.withName("si_addr_lsb"),
                MemoryLayout.paddingLayout(48),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_POINTER$LAYOUT.withName("_lower"),
                        Constants$root.C_POINTER$LAYOUT.withName("_upper")
                    ).withName("_addr_bnd"),
                    Constants$root.C_INT$LAYOUT.withName("_pkey")
                ).withName("_bounds")
            ).withName("_sigfault"),
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("si_band"),
                Constants$root.C_INT$LAYOUT.withName("si_fd"),
                MemoryLayout.paddingLayout(32)
            ).withName("_sigpoll"),
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("_call_addr"),
                Constants$root.C_INT$LAYOUT.withName("_syscall"),
                Constants$root.C_INT$LAYOUT.withName("_arch")
            ).withName("_sigsys")
        );
        public static MemoryLayout $LAYOUT() {
            return _sifields._sifields$union$LAYOUT;
        }
        public static MemorySegment _pad$slice(MemorySegment seg) {
            return seg.asSlice(0, 112);
        }
        public static class _kill {

            static final  GroupLayout _sifields$_kill$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_pid"),
                Constants$root.C_INT$LAYOUT.withName("si_uid")
            );
            public static MemoryLayout $LAYOUT() {
                return _kill._sifields$_kill$struct$LAYOUT;
            }
            static final VarHandle si_pid$VH = _sifields$_kill$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_pid"));
            public static VarHandle si_pid$VH() {
                return _kill.si_pid$VH;
            }
            public static int si_pid$get(MemorySegment seg) {
                return (int)_kill.si_pid$VH.get(seg);
            }
            public static void si_pid$set( MemorySegment seg, int x) {
                _kill.si_pid$VH.set(seg, x);
            }
            public static int si_pid$get(MemorySegment seg, long index) {
                return (int)_kill.si_pid$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_pid$set(MemorySegment seg, long index, int x) {
                _kill.si_pid$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle si_uid$VH = _sifields$_kill$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_uid"));
            public static VarHandle si_uid$VH() {
                return _kill.si_uid$VH;
            }
            public static int si_uid$get(MemorySegment seg) {
                return (int)_kill.si_uid$VH.get(seg);
            }
            public static void si_uid$set( MemorySegment seg, int x) {
                _kill.si_uid$VH.set(seg, x);
            }
            public static int si_uid$get(MemorySegment seg, long index) {
                return (int)_kill.si_uid$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_uid$set(MemorySegment seg, long index, int x) {
                _kill.si_uid$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment _kill$slice(MemorySegment seg) {
            return seg.asSlice(0, 8);
        }
        public static class _timer {

            static final  GroupLayout _sifields$_timer$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_tid"),
                Constants$root.C_INT$LAYOUT.withName("si_overrun"),
                MemoryLayout.unionLayout(
                    Constants$root.C_INT$LAYOUT.withName("sival_int"),
                    Constants$root.C_POINTER$LAYOUT.withName("sival_ptr")
                ).withName("si_sigval")
            );
            public static MemoryLayout $LAYOUT() {
                return _timer._sifields$_timer$struct$LAYOUT;
            }
            static final VarHandle si_tid$VH = _sifields$_timer$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_tid"));
            public static VarHandle si_tid$VH() {
                return _timer.si_tid$VH;
            }
            public static int si_tid$get(MemorySegment seg) {
                return (int)_timer.si_tid$VH.get(seg);
            }
            public static void si_tid$set( MemorySegment seg, int x) {
                _timer.si_tid$VH.set(seg, x);
            }
            public static int si_tid$get(MemorySegment seg, long index) {
                return (int)_timer.si_tid$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_tid$set(MemorySegment seg, long index, int x) {
                _timer.si_tid$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle si_overrun$VH = _sifields$_timer$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_overrun"));
            public static VarHandle si_overrun$VH() {
                return _timer.si_overrun$VH;
            }
            public static int si_overrun$get(MemorySegment seg) {
                return (int)_timer.si_overrun$VH.get(seg);
            }
            public static void si_overrun$set( MemorySegment seg, int x) {
                _timer.si_overrun$VH.set(seg, x);
            }
            public static int si_overrun$get(MemorySegment seg, long index) {
                return (int)_timer.si_overrun$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_overrun$set(MemorySegment seg, long index, int x) {
                _timer.si_overrun$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment si_sigval$slice(MemorySegment seg) {
                return seg.asSlice(8, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment _timer$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static class _rt {

            static final  GroupLayout _sifields$_rt$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_pid"),
                Constants$root.C_INT$LAYOUT.withName("si_uid"),
                MemoryLayout.unionLayout(
                    Constants$root.C_INT$LAYOUT.withName("sival_int"),
                    Constants$root.C_POINTER$LAYOUT.withName("sival_ptr")
                ).withName("si_sigval")
            );
            public static MemoryLayout $LAYOUT() {
                return _rt._sifields$_rt$struct$LAYOUT;
            }
            static final VarHandle si_pid$VH = _sifields$_rt$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_pid"));
            public static VarHandle si_pid$VH() {
                return _rt.si_pid$VH;
            }
            public static int si_pid$get(MemorySegment seg) {
                return (int)_rt.si_pid$VH.get(seg);
            }
            public static void si_pid$set( MemorySegment seg, int x) {
                _rt.si_pid$VH.set(seg, x);
            }
            public static int si_pid$get(MemorySegment seg, long index) {
                return (int)_rt.si_pid$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_pid$set(MemorySegment seg, long index, int x) {
                _rt.si_pid$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle si_uid$VH = _sifields$_rt$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_uid"));
            public static VarHandle si_uid$VH() {
                return _rt.si_uid$VH;
            }
            public static int si_uid$get(MemorySegment seg) {
                return (int)_rt.si_uid$VH.get(seg);
            }
            public static void si_uid$set( MemorySegment seg, int x) {
                _rt.si_uid$VH.set(seg, x);
            }
            public static int si_uid$get(MemorySegment seg, long index) {
                return (int)_rt.si_uid$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_uid$set(MemorySegment seg, long index, int x) {
                _rt.si_uid$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment si_sigval$slice(MemorySegment seg) {
                return seg.asSlice(8, 8);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment _rt$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static class _sigchld {

            static final  GroupLayout _sifields$_sigchld$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("si_pid"),
                Constants$root.C_INT$LAYOUT.withName("si_uid"),
                Constants$root.C_INT$LAYOUT.withName("si_status"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_LONG_LONG$LAYOUT.withName("si_utime"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("si_stime")
            );
            public static MemoryLayout $LAYOUT() {
                return _sigchld._sifields$_sigchld$struct$LAYOUT;
            }
            static final VarHandle si_pid$VH = _sifields$_sigchld$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_pid"));
            public static VarHandle si_pid$VH() {
                return _sigchld.si_pid$VH;
            }
            public static int si_pid$get(MemorySegment seg) {
                return (int)_sigchld.si_pid$VH.get(seg);
            }
            public static void si_pid$set( MemorySegment seg, int x) {
                _sigchld.si_pid$VH.set(seg, x);
            }
            public static int si_pid$get(MemorySegment seg, long index) {
                return (int)_sigchld.si_pid$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_pid$set(MemorySegment seg, long index, int x) {
                _sigchld.si_pid$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle si_uid$VH = _sifields$_sigchld$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_uid"));
            public static VarHandle si_uid$VH() {
                return _sigchld.si_uid$VH;
            }
            public static int si_uid$get(MemorySegment seg) {
                return (int)_sigchld.si_uid$VH.get(seg);
            }
            public static void si_uid$set( MemorySegment seg, int x) {
                _sigchld.si_uid$VH.set(seg, x);
            }
            public static int si_uid$get(MemorySegment seg, long index) {
                return (int)_sigchld.si_uid$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_uid$set(MemorySegment seg, long index, int x) {
                _sigchld.si_uid$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle si_status$VH = _sifields$_sigchld$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_status"));
            public static VarHandle si_status$VH() {
                return _sigchld.si_status$VH;
            }
            public static int si_status$get(MemorySegment seg) {
                return (int)_sigchld.si_status$VH.get(seg);
            }
            public static void si_status$set( MemorySegment seg, int x) {
                _sigchld.si_status$VH.set(seg, x);
            }
            public static int si_status$get(MemorySegment seg, long index) {
                return (int)_sigchld.si_status$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_status$set(MemorySegment seg, long index, int x) {
                _sigchld.si_status$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle si_utime$VH = _sifields$_sigchld$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_utime"));
            public static VarHandle si_utime$VH() {
                return _sigchld.si_utime$VH;
            }
            public static long si_utime$get(MemorySegment seg) {
                return (long)_sigchld.si_utime$VH.get(seg);
            }
            public static void si_utime$set( MemorySegment seg, long x) {
                _sigchld.si_utime$VH.set(seg, x);
            }
            public static long si_utime$get(MemorySegment seg, long index) {
                return (long)_sigchld.si_utime$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_utime$set(MemorySegment seg, long index, long x) {
                _sigchld.si_utime$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle si_stime$VH = _sifields$_sigchld$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_stime"));
            public static VarHandle si_stime$VH() {
                return _sigchld.si_stime$VH;
            }
            public static long si_stime$get(MemorySegment seg) {
                return (long)_sigchld.si_stime$VH.get(seg);
            }
            public static void si_stime$set( MemorySegment seg, long x) {
                _sigchld.si_stime$VH.set(seg, x);
            }
            public static long si_stime$get(MemorySegment seg, long index) {
                return (long)_sigchld.si_stime$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_stime$set(MemorySegment seg, long index, long x) {
                _sigchld.si_stime$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment _sigchld$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        public static class _sigfault {

            static final  GroupLayout _sifields$_sigfault$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("si_addr"),
                Constants$root.C_SHORT$LAYOUT.withName("si_addr_lsb"),
                MemoryLayout.paddingLayout(48),
                MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_POINTER$LAYOUT.withName("_lower"),
                        Constants$root.C_POINTER$LAYOUT.withName("_upper")
                    ).withName("_addr_bnd"),
                    Constants$root.C_INT$LAYOUT.withName("_pkey")
                ).withName("_bounds")
            );
            public static MemoryLayout $LAYOUT() {
                return _sigfault._sifields$_sigfault$struct$LAYOUT;
            }
            static final VarHandle si_addr$VH = _sifields$_sigfault$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_addr"));
            public static VarHandle si_addr$VH() {
                return _sigfault.si_addr$VH;
            }
            public static MemoryAddress si_addr$get(MemorySegment seg) {
                return (java.lang.foreign.MemoryAddress)_sigfault.si_addr$VH.get(seg);
            }
            public static void si_addr$set( MemorySegment seg, MemoryAddress x) {
                _sigfault.si_addr$VH.set(seg, x);
            }
            public static MemoryAddress si_addr$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemoryAddress)_sigfault.si_addr$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_addr$set(MemorySegment seg, long index, MemoryAddress x) {
                _sigfault.si_addr$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle si_addr_lsb$VH = _sifields$_sigfault$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_addr_lsb"));
            public static VarHandle si_addr_lsb$VH() {
                return _sigfault.si_addr_lsb$VH;
            }
            public static short si_addr_lsb$get(MemorySegment seg) {
                return (short)_sigfault.si_addr_lsb$VH.get(seg);
            }
            public static void si_addr_lsb$set( MemorySegment seg, short x) {
                _sigfault.si_addr_lsb$VH.set(seg, x);
            }
            public static short si_addr_lsb$get(MemorySegment seg, long index) {
                return (short)_sigfault.si_addr_lsb$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_addr_lsb$set(MemorySegment seg, long index, short x) {
                _sigfault.si_addr_lsb$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static class _bounds {

                static final  GroupLayout _sifields$_sigfault$_bounds$union$LAYOUT = MemoryLayout.unionLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_POINTER$LAYOUT.withName("_lower"),
                        Constants$root.C_POINTER$LAYOUT.withName("_upper")
                    ).withName("_addr_bnd"),
                    Constants$root.C_INT$LAYOUT.withName("_pkey")
                );
                public static MemoryLayout $LAYOUT() {
                    return _bounds._sifields$_sigfault$_bounds$union$LAYOUT;
                }
                public static class _addr_bnd {

                    static final  GroupLayout _sifields$_sigfault$_bounds$_addr_bnd$struct$LAYOUT = MemoryLayout.structLayout(
                        Constants$root.C_POINTER$LAYOUT.withName("_lower"),
                        Constants$root.C_POINTER$LAYOUT.withName("_upper")
                    );
                    public static MemoryLayout $LAYOUT() {
                        return _addr_bnd._sifields$_sigfault$_bounds$_addr_bnd$struct$LAYOUT;
                    }
                    static final VarHandle _lower$VH = _sifields$_sigfault$_bounds$_addr_bnd$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_lower"));
                    public static VarHandle _lower$VH() {
                        return _addr_bnd._lower$VH;
                    }
                    public static MemoryAddress _lower$get(MemorySegment seg) {
                        return (java.lang.foreign.MemoryAddress)_addr_bnd._lower$VH.get(seg);
                    }
                    public static void _lower$set( MemorySegment seg, MemoryAddress x) {
                        _addr_bnd._lower$VH.set(seg, x);
                    }
                    public static MemoryAddress _lower$get(MemorySegment seg, long index) {
                        return (java.lang.foreign.MemoryAddress)_addr_bnd._lower$VH.get(seg.asSlice(index*sizeof()));
                    }
                    public static void _lower$set(MemorySegment seg, long index, MemoryAddress x) {
                        _addr_bnd._lower$VH.set(seg.asSlice(index*sizeof()), x);
                    }
                    static final VarHandle _upper$VH = _sifields$_sigfault$_bounds$_addr_bnd$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_upper"));
                    public static VarHandle _upper$VH() {
                        return _addr_bnd._upper$VH;
                    }
                    public static MemoryAddress _upper$get(MemorySegment seg) {
                        return (java.lang.foreign.MemoryAddress)_addr_bnd._upper$VH.get(seg);
                    }
                    public static void _upper$set( MemorySegment seg, MemoryAddress x) {
                        _addr_bnd._upper$VH.set(seg, x);
                    }
                    public static MemoryAddress _upper$get(MemorySegment seg, long index) {
                        return (java.lang.foreign.MemoryAddress)_addr_bnd._upper$VH.get(seg.asSlice(index*sizeof()));
                    }
                    public static void _upper$set(MemorySegment seg, long index, MemoryAddress x) {
                        _addr_bnd._upper$VH.set(seg.asSlice(index*sizeof()), x);
                    }
                    public static long sizeof() { return $LAYOUT().byteSize(); }
                    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                    }
                    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
                }

                public static MemorySegment _addr_bnd$slice(MemorySegment seg) {
                    return seg.asSlice(0, 16);
                }
                static final VarHandle _pkey$VH = _sifields$_sigfault$_bounds$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pkey"));
                public static VarHandle _pkey$VH() {
                    return _bounds._pkey$VH;
                }
                public static int _pkey$get(MemorySegment seg) {
                    return (int)_bounds._pkey$VH.get(seg);
                }
                public static void _pkey$set( MemorySegment seg, int x) {
                    _bounds._pkey$VH.set(seg, x);
                }
                public static int _pkey$get(MemorySegment seg, long index) {
                    return (int)_bounds._pkey$VH.get(seg.asSlice(index*sizeof()));
                }
                public static void _pkey$set(MemorySegment seg, long index, int x) {
                    _bounds._pkey$VH.set(seg.asSlice(index*sizeof()), x);
                }
                public static long sizeof() { return $LAYOUT().byteSize(); }
                public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
                public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                    return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
                }
                public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
            }

            public static MemorySegment _bounds$slice(MemorySegment seg) {
                return seg.asSlice(16, 16);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment _sigfault$slice(MemorySegment seg) {
            return seg.asSlice(0, 32);
        }
        public static class _sigpoll {

            static final  GroupLayout _sifields$_sigpoll$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("si_band"),
                Constants$root.C_INT$LAYOUT.withName("si_fd"),
                MemoryLayout.paddingLayout(32)
            );
            public static MemoryLayout $LAYOUT() {
                return _sigpoll._sifields$_sigpoll$struct$LAYOUT;
            }
            static final VarHandle si_band$VH = _sifields$_sigpoll$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_band"));
            public static VarHandle si_band$VH() {
                return _sigpoll.si_band$VH;
            }
            public static long si_band$get(MemorySegment seg) {
                return (long)_sigpoll.si_band$VH.get(seg);
            }
            public static void si_band$set( MemorySegment seg, long x) {
                _sigpoll.si_band$VH.set(seg, x);
            }
            public static long si_band$get(MemorySegment seg, long index) {
                return (long)_sigpoll.si_band$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_band$set(MemorySegment seg, long index, long x) {
                _sigpoll.si_band$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle si_fd$VH = _sifields$_sigpoll$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("si_fd"));
            public static VarHandle si_fd$VH() {
                return _sigpoll.si_fd$VH;
            }
            public static int si_fd$get(MemorySegment seg) {
                return (int)_sigpoll.si_fd$VH.get(seg);
            }
            public static void si_fd$set( MemorySegment seg, int x) {
                _sigpoll.si_fd$VH.set(seg, x);
            }
            public static int si_fd$get(MemorySegment seg, long index) {
                return (int)_sigpoll.si_fd$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void si_fd$set(MemorySegment seg, long index, int x) {
                _sigpoll.si_fd$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment _sigpoll$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static class _sigsys {

            static final  GroupLayout _sifields$_sigsys$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("_call_addr"),
                Constants$root.C_INT$LAYOUT.withName("_syscall"),
                Constants$root.C_INT$LAYOUT.withName("_arch")
            );
            public static MemoryLayout $LAYOUT() {
                return _sigsys._sifields$_sigsys$struct$LAYOUT;
            }
            static final VarHandle _call_addr$VH = _sifields$_sigsys$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_call_addr"));
            public static VarHandle _call_addr$VH() {
                return _sigsys._call_addr$VH;
            }
            public static MemoryAddress _call_addr$get(MemorySegment seg) {
                return (java.lang.foreign.MemoryAddress)_sigsys._call_addr$VH.get(seg);
            }
            public static void _call_addr$set( MemorySegment seg, MemoryAddress x) {
                _sigsys._call_addr$VH.set(seg, x);
            }
            public static MemoryAddress _call_addr$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemoryAddress)_sigsys._call_addr$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void _call_addr$set(MemorySegment seg, long index, MemoryAddress x) {
                _sigsys._call_addr$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle _syscall$VH = _sifields$_sigsys$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_syscall"));
            public static VarHandle _syscall$VH() {
                return _sigsys._syscall$VH;
            }
            public static int _syscall$get(MemorySegment seg) {
                return (int)_sigsys._syscall$VH.get(seg);
            }
            public static void _syscall$set( MemorySegment seg, int x) {
                _sigsys._syscall$VH.set(seg, x);
            }
            public static int _syscall$get(MemorySegment seg, long index) {
                return (int)_sigsys._syscall$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void _syscall$set(MemorySegment seg, long index, int x) {
                _sigsys._syscall$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle _arch$VH = _sifields$_sigsys$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_arch"));
            public static VarHandle _arch$VH() {
                return _sigsys._arch$VH;
            }
            public static int _arch$get(MemorySegment seg) {
                return (int)_sigsys._arch$VH.get(seg);
            }
            public static void _arch$set( MemorySegment seg, int x) {
                _sigsys._arch$VH.set(seg, x);
            }
            public static int _arch$get(MemorySegment seg, long index) {
                return (int)_sigsys._arch$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void _arch$set(MemorySegment seg, long index, int x) {
                _sigsys._arch$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment _sigsys$slice(MemorySegment seg) {
            return seg.asSlice(0, 16);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment _sifields$slice(MemorySegment seg) {
        return seg.asSlice(16, 112);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


