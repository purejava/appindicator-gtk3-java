// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GSimpleAsyncThreadFunc {

    void apply(java.lang.foreign.MemoryAddress res, java.lang.foreign.MemoryAddress object, java.lang.foreign.MemoryAddress cancellable);
    static MemorySegment allocate(GSimpleAsyncThreadFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GSimpleAsyncThreadFunc.class, fi, constants$517.GSimpleAsyncThreadFunc$FUNC, session);
    }
    static GSimpleAsyncThreadFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _res, java.lang.foreign.MemoryAddress _object, java.lang.foreign.MemoryAddress _cancellable) -> {
            try {
                constants$517.GSimpleAsyncThreadFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_res, (java.lang.foreign.Addressable)_object, (java.lang.foreign.Addressable)_cancellable);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


