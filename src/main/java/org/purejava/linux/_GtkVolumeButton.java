// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkVolumeButton {
 *     GtkScaleButton parent;
 * };
 * }
 */
public class _GtkVolumeButton {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        MemoryLayout.structLayout(
                            MemoryLayout.structLayout(
                                MemoryLayout.structLayout(
                                    Constants$root.C_POINTER$LAYOUT.withName("g_class")
                                ).withName("g_type_instance"),
                                Constants$root.C_INT$LAYOUT.withName("ref_count"),
                                MemoryLayout.paddingLayout(32),
                                Constants$root.C_POINTER$LAYOUT.withName("qdata")
                            ).withName("parent_instance"),
                            Constants$root.C_POINTER$LAYOUT.withName("priv")
                        ).withName("widget"),
                        Constants$root.C_POINTER$LAYOUT.withName("priv")
                    ).withName("container"),
                    Constants$root.C_POINTER$LAYOUT.withName("priv")
                ).withName("bin"),
                Constants$root.C_POINTER$LAYOUT.withName("priv")
            ).withName("parent"),
            Constants$root.C_POINTER$LAYOUT.withName("priv")
        ).withName("parent")
    ).withName("_GtkVolumeButton");
    public static MemoryLayout $LAYOUT() {
        return _GtkVolumeButton.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


