// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkRegistry {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("g_class")
            ).withName("g_type_instance"),
            Constants$root.C_INT$LAYOUT.withName("ref_count"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("qdata")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("factory_type_registry"),
        Constants$root.C_POINTER$LAYOUT.withName("factory_singleton_cache")
    ).withName("_AtkRegistry");
    public static MemoryLayout $LAYOUT() {
        return _AtkRegistry.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    static final VarHandle factory_type_registry$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("factory_type_registry"));
    public static VarHandle factory_type_registry$VH() {
        return _AtkRegistry.factory_type_registry$VH;
    }
    public static MemoryAddress factory_type_registry$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkRegistry.factory_type_registry$VH.get(seg);
    }
    public static void factory_type_registry$set( MemorySegment seg, MemoryAddress x) {
        _AtkRegistry.factory_type_registry$VH.set(seg, x);
    }
    public static MemoryAddress factory_type_registry$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkRegistry.factory_type_registry$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void factory_type_registry$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkRegistry.factory_type_registry$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle factory_singleton_cache$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("factory_singleton_cache"));
    public static VarHandle factory_singleton_cache$VH() {
        return _AtkRegistry.factory_singleton_cache$VH;
    }
    public static MemoryAddress factory_singleton_cache$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkRegistry.factory_singleton_cache$VH.get(seg);
    }
    public static void factory_singleton_cache$set( MemorySegment seg, MemoryAddress x) {
        _AtkRegistry.factory_singleton_cache$VH.set(seg, x);
    }
    public static MemoryAddress factory_singleton_cache$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkRegistry.factory_singleton_cache$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void factory_singleton_cache$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkRegistry.factory_singleton_cache$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


