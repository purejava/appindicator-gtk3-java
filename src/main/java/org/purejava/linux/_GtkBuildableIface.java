// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkBuildableIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("set_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_name"),
        Constants$root.C_POINTER$LAYOUT.withName("add_child"),
        Constants$root.C_POINTER$LAYOUT.withName("set_buildable_property"),
        Constants$root.C_POINTER$LAYOUT.withName("construct_child"),
        Constants$root.C_POINTER$LAYOUT.withName("custom_tag_start"),
        Constants$root.C_POINTER$LAYOUT.withName("custom_tag_end"),
        Constants$root.C_POINTER$LAYOUT.withName("custom_finished"),
        Constants$root.C_POINTER$LAYOUT.withName("parser_finished"),
        Constants$root.C_POINTER$LAYOUT.withName("get_internal_child")
    ).withName("_GtkBuildableIface");
    public static MemoryLayout $LAYOUT() {
        return _GtkBuildableIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor set_name$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_name$MH = RuntimeHelper.downcallHandle(
        _GtkBuildableIface.set_name$FUNC
    );
    public interface set_name {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_name fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_name.class, fi, _GtkBuildableIface.set_name$FUNC, session);
        }
        static set_name ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkBuildableIface.set_name$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_name"));
    public static VarHandle set_name$VH() {
        return _GtkBuildableIface.set_name$VH;
    }
    public static MemoryAddress set_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.set_name$VH.get(seg);
    }
    public static void set_name$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuildableIface.set_name$VH.set(seg, x);
    }
    public static MemoryAddress set_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.set_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuildableIface.set_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_name set_name (MemorySegment segment, MemorySession session) {
        return set_name.ofAddress(set_name$get(segment), session);
    }
    static final FunctionDescriptor get_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name$MH = RuntimeHelper.downcallHandle(
        _GtkBuildableIface.get_name$FUNC
    );
    public interface get_name {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_name fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_name.class, fi, _GtkBuildableIface.get_name$FUNC, session);
        }
        static get_name ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkBuildableIface.get_name$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_name"));
    public static VarHandle get_name$VH() {
        return _GtkBuildableIface.get_name$VH;
    }
    public static MemoryAddress get_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.get_name$VH.get(seg);
    }
    public static void get_name$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuildableIface.get_name$VH.set(seg, x);
    }
    public static MemoryAddress get_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.get_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuildableIface.get_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name (MemorySegment segment, MemorySession session) {
        return get_name.ofAddress(get_name$get(segment), session);
    }
    static final FunctionDescriptor add_child$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_child$MH = RuntimeHelper.downcallHandle(
        _GtkBuildableIface.add_child$FUNC
    );
    public interface add_child {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(add_child fi, MemorySession session) {
            return RuntimeHelper.upcallStub(add_child.class, fi, _GtkBuildableIface.add_child$FUNC, session);
        }
        static add_child ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkBuildableIface.add_child$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_child$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_child"));
    public static VarHandle add_child$VH() {
        return _GtkBuildableIface.add_child$VH;
    }
    public static MemoryAddress add_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.add_child$VH.get(seg);
    }
    public static void add_child$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuildableIface.add_child$VH.set(seg, x);
    }
    public static MemoryAddress add_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.add_child$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_child$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuildableIface.add_child$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_child add_child (MemorySegment segment, MemorySession session) {
        return add_child.ofAddress(add_child$get(segment), session);
    }
    static final FunctionDescriptor set_buildable_property$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_buildable_property$MH = RuntimeHelper.downcallHandle(
        _GtkBuildableIface.set_buildable_property$FUNC
    );
    public interface set_buildable_property {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(set_buildable_property fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_buildable_property.class, fi, _GtkBuildableIface.set_buildable_property$FUNC, session);
        }
        static set_buildable_property ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkBuildableIface.set_buildable_property$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_buildable_property$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_buildable_property"));
    public static VarHandle set_buildable_property$VH() {
        return _GtkBuildableIface.set_buildable_property$VH;
    }
    public static MemoryAddress set_buildable_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.set_buildable_property$VH.get(seg);
    }
    public static void set_buildable_property$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuildableIface.set_buildable_property$VH.set(seg, x);
    }
    public static MemoryAddress set_buildable_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.set_buildable_property$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_buildable_property$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuildableIface.set_buildable_property$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_buildable_property set_buildable_property (MemorySegment segment, MemorySession session) {
        return set_buildable_property.ofAddress(set_buildable_property$get(segment), session);
    }
    static final FunctionDescriptor construct_child$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle construct_child$MH = RuntimeHelper.downcallHandle(
        _GtkBuildableIface.construct_child$FUNC
    );
    public interface construct_child {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(construct_child fi, MemorySession session) {
            return RuntimeHelper.upcallStub(construct_child.class, fi, _GtkBuildableIface.construct_child$FUNC, session);
        }
        static construct_child ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkBuildableIface.construct_child$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle construct_child$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("construct_child"));
    public static VarHandle construct_child$VH() {
        return _GtkBuildableIface.construct_child$VH;
    }
    public static MemoryAddress construct_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.construct_child$VH.get(seg);
    }
    public static void construct_child$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuildableIface.construct_child$VH.set(seg, x);
    }
    public static MemoryAddress construct_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.construct_child$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void construct_child$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuildableIface.construct_child$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static construct_child construct_child (MemorySegment segment, MemorySession session) {
        return construct_child.ofAddress(construct_child$get(segment), session);
    }
    static final FunctionDescriptor custom_tag_start$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle custom_tag_start$MH = RuntimeHelper.downcallHandle(
        _GtkBuildableIface.custom_tag_start$FUNC
    );
    public interface custom_tag_start {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(custom_tag_start fi, MemorySession session) {
            return RuntimeHelper.upcallStub(custom_tag_start.class, fi, _GtkBuildableIface.custom_tag_start$FUNC, session);
        }
        static custom_tag_start ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)_GtkBuildableIface.custom_tag_start$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle custom_tag_start$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("custom_tag_start"));
    public static VarHandle custom_tag_start$VH() {
        return _GtkBuildableIface.custom_tag_start$VH;
    }
    public static MemoryAddress custom_tag_start$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.custom_tag_start$VH.get(seg);
    }
    public static void custom_tag_start$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuildableIface.custom_tag_start$VH.set(seg, x);
    }
    public static MemoryAddress custom_tag_start$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.custom_tag_start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void custom_tag_start$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuildableIface.custom_tag_start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static custom_tag_start custom_tag_start (MemorySegment segment, MemorySession session) {
        return custom_tag_start.ofAddress(custom_tag_start$get(segment), session);
    }
    static final FunctionDescriptor custom_tag_end$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle custom_tag_end$MH = RuntimeHelper.downcallHandle(
        _GtkBuildableIface.custom_tag_end$FUNC
    );
    public interface custom_tag_end {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(custom_tag_end fi, MemorySession session) {
            return RuntimeHelper.upcallStub(custom_tag_end.class, fi, _GtkBuildableIface.custom_tag_end$FUNC, session);
        }
        static custom_tag_end ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkBuildableIface.custom_tag_end$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle custom_tag_end$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("custom_tag_end"));
    public static VarHandle custom_tag_end$VH() {
        return _GtkBuildableIface.custom_tag_end$VH;
    }
    public static MemoryAddress custom_tag_end$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.custom_tag_end$VH.get(seg);
    }
    public static void custom_tag_end$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuildableIface.custom_tag_end$VH.set(seg, x);
    }
    public static MemoryAddress custom_tag_end$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.custom_tag_end$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void custom_tag_end$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuildableIface.custom_tag_end$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static custom_tag_end custom_tag_end (MemorySegment segment, MemorySession session) {
        return custom_tag_end.ofAddress(custom_tag_end$get(segment), session);
    }
    static final FunctionDescriptor custom_finished$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle custom_finished$MH = RuntimeHelper.downcallHandle(
        _GtkBuildableIface.custom_finished$FUNC
    );
    public interface custom_finished {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(custom_finished fi, MemorySession session) {
            return RuntimeHelper.upcallStub(custom_finished.class, fi, _GtkBuildableIface.custom_finished$FUNC, session);
        }
        static custom_finished ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkBuildableIface.custom_finished$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle custom_finished$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("custom_finished"));
    public static VarHandle custom_finished$VH() {
        return _GtkBuildableIface.custom_finished$VH;
    }
    public static MemoryAddress custom_finished$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.custom_finished$VH.get(seg);
    }
    public static void custom_finished$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuildableIface.custom_finished$VH.set(seg, x);
    }
    public static MemoryAddress custom_finished$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.custom_finished$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void custom_finished$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuildableIface.custom_finished$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static custom_finished custom_finished (MemorySegment segment, MemorySession session) {
        return custom_finished.ofAddress(custom_finished$get(segment), session);
    }
    static final FunctionDescriptor parser_finished$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle parser_finished$MH = RuntimeHelper.downcallHandle(
        _GtkBuildableIface.parser_finished$FUNC
    );
    public interface parser_finished {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(parser_finished fi, MemorySession session) {
            return RuntimeHelper.upcallStub(parser_finished.class, fi, _GtkBuildableIface.parser_finished$FUNC, session);
        }
        static parser_finished ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkBuildableIface.parser_finished$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle parser_finished$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("parser_finished"));
    public static VarHandle parser_finished$VH() {
        return _GtkBuildableIface.parser_finished$VH;
    }
    public static MemoryAddress parser_finished$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.parser_finished$VH.get(seg);
    }
    public static void parser_finished$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuildableIface.parser_finished$VH.set(seg, x);
    }
    public static MemoryAddress parser_finished$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.parser_finished$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parser_finished$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuildableIface.parser_finished$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static parser_finished parser_finished (MemorySegment segment, MemorySession session) {
        return parser_finished.ofAddress(parser_finished$get(segment), session);
    }
    static final FunctionDescriptor get_internal_child$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_internal_child$MH = RuntimeHelper.downcallHandle(
        _GtkBuildableIface.get_internal_child$FUNC
    );
    public interface get_internal_child {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(get_internal_child fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_internal_child.class, fi, _GtkBuildableIface.get_internal_child$FUNC, session);
        }
        static get_internal_child ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkBuildableIface.get_internal_child$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_internal_child$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_internal_child"));
    public static VarHandle get_internal_child$VH() {
        return _GtkBuildableIface.get_internal_child$VH;
    }
    public static MemoryAddress get_internal_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.get_internal_child$VH.get(seg);
    }
    public static void get_internal_child$set( MemorySegment seg, MemoryAddress x) {
        _GtkBuildableIface.get_internal_child$VH.set(seg, x);
    }
    public static MemoryAddress get_internal_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBuildableIface.get_internal_child$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_internal_child$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBuildableIface.get_internal_child$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_internal_child get_internal_child (MemorySegment segment, MemorySession session) {
        return get_internal_child.ofAddress(get_internal_child$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


