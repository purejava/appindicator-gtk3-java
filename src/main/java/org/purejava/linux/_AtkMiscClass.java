// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkMiscClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("threads_enter"),
        Constants$root.C_POINTER$LAYOUT.withName("threads_leave"),
        MemoryLayout.sequenceLayout(32, Constants$root.C_POINTER$LAYOUT).withName("vfuncs")
    ).withName("_AtkMiscClass");
    public static MemoryLayout $LAYOUT() {
        return _AtkMiscClass.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor threads_enter$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle threads_enter$MH = RuntimeHelper.downcallHandle(
        _AtkMiscClass.threads_enter$FUNC
    );
    public interface threads_enter {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(threads_enter fi, MemorySession session) {
            return RuntimeHelper.upcallStub(threads_enter.class, fi, _AtkMiscClass.threads_enter$FUNC, session);
        }
        static threads_enter ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _AtkMiscClass.threads_enter$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle threads_enter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("threads_enter"));
    public static VarHandle threads_enter$VH() {
        return _AtkMiscClass.threads_enter$VH;
    }
    public static MemoryAddress threads_enter$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkMiscClass.threads_enter$VH.get(seg);
    }
    public static void threads_enter$set( MemorySegment seg, MemoryAddress x) {
        _AtkMiscClass.threads_enter$VH.set(seg, x);
    }
    public static MemoryAddress threads_enter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkMiscClass.threads_enter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void threads_enter$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkMiscClass.threads_enter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static threads_enter threads_enter (MemorySegment segment, MemorySession session) {
        return threads_enter.ofAddress(threads_enter$get(segment), session);
    }
    static final FunctionDescriptor threads_leave$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle threads_leave$MH = RuntimeHelper.downcallHandle(
        _AtkMiscClass.threads_leave$FUNC
    );
    public interface threads_leave {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(threads_leave fi, MemorySession session) {
            return RuntimeHelper.upcallStub(threads_leave.class, fi, _AtkMiscClass.threads_leave$FUNC, session);
        }
        static threads_leave ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _AtkMiscClass.threads_leave$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle threads_leave$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("threads_leave"));
    public static VarHandle threads_leave$VH() {
        return _AtkMiscClass.threads_leave$VH;
    }
    public static MemoryAddress threads_leave$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkMiscClass.threads_leave$VH.get(seg);
    }
    public static void threads_leave$set( MemorySegment seg, MemoryAddress x) {
        _AtkMiscClass.threads_leave$VH.set(seg, x);
    }
    public static MemoryAddress threads_leave$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkMiscClass.threads_leave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void threads_leave$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkMiscClass.threads_leave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static threads_leave threads_leave (MemorySegment segment, MemorySession session) {
        return threads_leave.ofAddress(threads_leave$get(segment), session);
    }
    public static MemorySegment vfuncs$slice(MemorySegment seg) {
        return seg.asSlice(152, 256);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


