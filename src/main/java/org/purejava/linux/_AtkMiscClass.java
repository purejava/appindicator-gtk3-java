// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _AtkMiscClass {
 *     GObjectClass parent;
 *     void (*threads_enter)(AtkMisc*);
 *     void (*threads_leave)(AtkMisc*);
 *     gpointer vfuncs[32];
 * };
 * }
 */
public class _AtkMiscClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("threads_enter"),
        Constants$root.C_POINTER$LAYOUT.withName("threads_leave"),
        MemoryLayout.sequenceLayout(32, Constants$root.C_POINTER$LAYOUT).withName("vfuncs")
    ).withName("_AtkMiscClass");
    public static MemoryLayout $LAYOUT() {
        return _AtkMiscClass.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor threads_enter$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor threads_enter_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle threads_enter_UP$MH = RuntimeHelper.upcallHandle(threads_enter.class, "apply", _AtkMiscClass.threads_enter_UP$FUNC);
    static final FunctionDescriptor threads_enter_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle threads_enter_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkMiscClass.threads_enter_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*threads_enter)(AtkMisc*);
     * }
     */
    public interface threads_enter {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(threads_enter fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkMiscClass.threads_enter_UP$MH, fi, _AtkMiscClass.threads_enter$FUNC, scope);
        }
        static threads_enter ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _AtkMiscClass.threads_enter_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle threads_enter$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("threads_enter"));
    public static VarHandle threads_enter$VH() {
        return _AtkMiscClass.threads_enter$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*threads_enter)(AtkMisc*);
     * }
     */
    public static MemorySegment threads_enter$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkMiscClass.threads_enter$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*threads_enter)(AtkMisc*);
     * }
     */
    public static void threads_enter$set(MemorySegment seg, MemorySegment x) {
        _AtkMiscClass.threads_enter$VH.set(seg, x);
    }
    public static MemorySegment threads_enter$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkMiscClass.threads_enter$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void threads_enter$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkMiscClass.threads_enter$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static threads_enter threads_enter(MemorySegment segment, SegmentScope scope) {
        return threads_enter.ofAddress(threads_enter$get(segment), scope);
    }
    static final FunctionDescriptor threads_leave$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor threads_leave_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle threads_leave_UP$MH = RuntimeHelper.upcallHandle(threads_leave.class, "apply", _AtkMiscClass.threads_leave_UP$FUNC);
    static final FunctionDescriptor threads_leave_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle threads_leave_DOWN$MH = RuntimeHelper.downcallHandle(
        _AtkMiscClass.threads_leave_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*threads_leave)(AtkMisc*);
     * }
     */
    public interface threads_leave {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(threads_leave fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_AtkMiscClass.threads_leave_UP$MH, fi, _AtkMiscClass.threads_leave$FUNC, scope);
        }
        static threads_leave ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _AtkMiscClass.threads_leave_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle threads_leave$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("threads_leave"));
    public static VarHandle threads_leave$VH() {
        return _AtkMiscClass.threads_leave$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*threads_leave)(AtkMisc*);
     * }
     */
    public static MemorySegment threads_leave$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_AtkMiscClass.threads_leave$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*threads_leave)(AtkMisc*);
     * }
     */
    public static void threads_leave$set(MemorySegment seg, MemorySegment x) {
        _AtkMiscClass.threads_leave$VH.set(seg, x);
    }
    public static MemorySegment threads_leave$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_AtkMiscClass.threads_leave$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void threads_leave$set(MemorySegment seg, long index, MemorySegment x) {
        _AtkMiscClass.threads_leave$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static threads_leave threads_leave(MemorySegment segment, SegmentScope scope) {
        return threads_leave.ofAddress(threads_leave$get(segment), scope);
    }
    public static MemorySegment vfuncs$slice(MemorySegment seg) {
        return seg.asSlice(152, 256);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


