// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkClipboardGetFunc {

    void apply(java.lang.foreign.MemoryAddress clipboard, java.lang.foreign.MemoryAddress selection_data, int info, java.lang.foreign.MemoryAddress user_data_or_owner);
    static MemorySegment allocate(GtkClipboardGetFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkClipboardGetFunc.class, fi, constants$1730.GtkClipboardGetFunc$FUNC, session);
    }
    static GtkClipboardGetFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _clipboard, java.lang.foreign.MemoryAddress _selection_data, int _info, java.lang.foreign.MemoryAddress _user_data_or_owner) -> {
            try {
                constants$1730.GtkClipboardGetFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_clipboard, (java.lang.foreign.Addressable)_selection_data, _info, (java.lang.foreign.Addressable)_user_data_or_owner);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


