// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GIconIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("hash"),
        Constants$root.C_POINTER$LAYOUT.withName("equal"),
        Constants$root.C_POINTER$LAYOUT.withName("to_tokens"),
        Constants$root.C_POINTER$LAYOUT.withName("from_tokens"),
        Constants$root.C_POINTER$LAYOUT.withName("serialize")
    ).withName("_GIconIface");
    public static MemoryLayout $LAYOUT() {
        return _GIconIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor hash$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle hash$MH = RuntimeHelper.downcallHandle(
        _GIconIface.hash$FUNC
    );
    public interface hash {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(hash fi, MemorySession session) {
            return RuntimeHelper.upcallStub(hash.class, fi, _GIconIface.hash$FUNC, session);
        }
        static hash ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GIconIface.hash$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle hash$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("hash"));
    public static VarHandle hash$VH() {
        return _GIconIface.hash$VH;
    }
    public static MemoryAddress hash$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GIconIface.hash$VH.get(seg);
    }
    public static void hash$set( MemorySegment seg, MemoryAddress x) {
        _GIconIface.hash$VH.set(seg, x);
    }
    public static MemoryAddress hash$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GIconIface.hash$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void hash$set(MemorySegment seg, long index, MemoryAddress x) {
        _GIconIface.hash$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static hash hash (MemorySegment segment, MemorySession session) {
        return hash.ofAddress(hash$get(segment), session);
    }
    static final FunctionDescriptor equal$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle equal$MH = RuntimeHelper.downcallHandle(
        _GIconIface.equal$FUNC
    );
    public interface equal {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(equal fi, MemorySession session) {
            return RuntimeHelper.upcallStub(equal.class, fi, _GIconIface.equal$FUNC, session);
        }
        static equal ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_GIconIface.equal$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle equal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("equal"));
    public static VarHandle equal$VH() {
        return _GIconIface.equal$VH;
    }
    public static MemoryAddress equal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GIconIface.equal$VH.get(seg);
    }
    public static void equal$set( MemorySegment seg, MemoryAddress x) {
        _GIconIface.equal$VH.set(seg, x);
    }
    public static MemoryAddress equal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GIconIface.equal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void equal$set(MemorySegment seg, long index, MemoryAddress x) {
        _GIconIface.equal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static equal equal (MemorySegment segment, MemorySession session) {
        return equal.ofAddress(equal$get(segment), session);
    }
    static final FunctionDescriptor to_tokens$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle to_tokens$MH = RuntimeHelper.downcallHandle(
        _GIconIface.to_tokens$FUNC
    );
    public interface to_tokens {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(to_tokens fi, MemorySession session) {
            return RuntimeHelper.upcallStub(to_tokens.class, fi, _GIconIface.to_tokens$FUNC, session);
        }
        static to_tokens ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GIconIface.to_tokens$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle to_tokens$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("to_tokens"));
    public static VarHandle to_tokens$VH() {
        return _GIconIface.to_tokens$VH;
    }
    public static MemoryAddress to_tokens$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GIconIface.to_tokens$VH.get(seg);
    }
    public static void to_tokens$set( MemorySegment seg, MemoryAddress x) {
        _GIconIface.to_tokens$VH.set(seg, x);
    }
    public static MemoryAddress to_tokens$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GIconIface.to_tokens$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void to_tokens$set(MemorySegment seg, long index, MemoryAddress x) {
        _GIconIface.to_tokens$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static to_tokens to_tokens (MemorySegment segment, MemorySession session) {
        return to_tokens.ofAddress(to_tokens$get(segment), session);
    }
    static final FunctionDescriptor from_tokens$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle from_tokens$MH = RuntimeHelper.downcallHandle(
        _GIconIface.from_tokens$FUNC
    );
    public interface from_tokens {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(from_tokens fi, MemorySession session) {
            return RuntimeHelper.upcallStub(from_tokens.class, fi, _GIconIface.from_tokens$FUNC, session);
        }
        static from_tokens ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GIconIface.from_tokens$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle from_tokens$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("from_tokens"));
    public static VarHandle from_tokens$VH() {
        return _GIconIface.from_tokens$VH;
    }
    public static MemoryAddress from_tokens$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GIconIface.from_tokens$VH.get(seg);
    }
    public static void from_tokens$set( MemorySegment seg, MemoryAddress x) {
        _GIconIface.from_tokens$VH.set(seg, x);
    }
    public static MemoryAddress from_tokens$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GIconIface.from_tokens$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void from_tokens$set(MemorySegment seg, long index, MemoryAddress x) {
        _GIconIface.from_tokens$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static from_tokens from_tokens (MemorySegment segment, MemorySession session) {
        return from_tokens.ofAddress(from_tokens$get(segment), session);
    }
    static final FunctionDescriptor serialize$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle serialize$MH = RuntimeHelper.downcallHandle(
        _GIconIface.serialize$FUNC
    );
    public interface serialize {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(serialize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(serialize.class, fi, _GIconIface.serialize$FUNC, session);
        }
        static serialize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GIconIface.serialize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle serialize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("serialize"));
    public static VarHandle serialize$VH() {
        return _GIconIface.serialize$VH;
    }
    public static MemoryAddress serialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GIconIface.serialize$VH.get(seg);
    }
    public static void serialize$set( MemorySegment seg, MemoryAddress x) {
        _GIconIface.serialize$VH.set(seg, x);
    }
    public static MemoryAddress serialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GIconIface.serialize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void serialize$set(MemorySegment seg, long index, MemoryAddress x) {
        _GIconIface.serialize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static serialize serialize (MemorySegment segment, MemorySession session) {
        return serialize.ofAddress(serialize$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


