// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkGeometry {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("min_width"),
        Constants$root.C_INT$LAYOUT.withName("min_height"),
        Constants$root.C_INT$LAYOUT.withName("max_width"),
        Constants$root.C_INT$LAYOUT.withName("max_height"),
        Constants$root.C_INT$LAYOUT.withName("base_width"),
        Constants$root.C_INT$LAYOUT.withName("base_height"),
        Constants$root.C_INT$LAYOUT.withName("width_inc"),
        Constants$root.C_INT$LAYOUT.withName("height_inc"),
        Constants$root.C_DOUBLE$LAYOUT.withName("min_aspect"),
        Constants$root.C_DOUBLE$LAYOUT.withName("max_aspect"),
        Constants$root.C_INT$LAYOUT.withName("win_gravity"),
        MemoryLayout.paddingLayout(32)
    ).withName("_GdkGeometry");
    public static MemoryLayout $LAYOUT() {
        return _GdkGeometry.$struct$LAYOUT;
    }
    static final VarHandle min_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("min_width"));
    public static VarHandle min_width$VH() {
        return _GdkGeometry.min_width$VH;
    }
    public static int min_width$get(MemorySegment seg) {
        return (int)_GdkGeometry.min_width$VH.get(seg);
    }
    public static void min_width$set( MemorySegment seg, int x) {
        _GdkGeometry.min_width$VH.set(seg, x);
    }
    public static int min_width$get(MemorySegment seg, long index) {
        return (int)_GdkGeometry.min_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void min_width$set(MemorySegment seg, long index, int x) {
        _GdkGeometry.min_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle min_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("min_height"));
    public static VarHandle min_height$VH() {
        return _GdkGeometry.min_height$VH;
    }
    public static int min_height$get(MemorySegment seg) {
        return (int)_GdkGeometry.min_height$VH.get(seg);
    }
    public static void min_height$set( MemorySegment seg, int x) {
        _GdkGeometry.min_height$VH.set(seg, x);
    }
    public static int min_height$get(MemorySegment seg, long index) {
        return (int)_GdkGeometry.min_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void min_height$set(MemorySegment seg, long index, int x) {
        _GdkGeometry.min_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_width"));
    public static VarHandle max_width$VH() {
        return _GdkGeometry.max_width$VH;
    }
    public static int max_width$get(MemorySegment seg) {
        return (int)_GdkGeometry.max_width$VH.get(seg);
    }
    public static void max_width$set( MemorySegment seg, int x) {
        _GdkGeometry.max_width$VH.set(seg, x);
    }
    public static int max_width$get(MemorySegment seg, long index) {
        return (int)_GdkGeometry.max_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_width$set(MemorySegment seg, long index, int x) {
        _GdkGeometry.max_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_height"));
    public static VarHandle max_height$VH() {
        return _GdkGeometry.max_height$VH;
    }
    public static int max_height$get(MemorySegment seg) {
        return (int)_GdkGeometry.max_height$VH.get(seg);
    }
    public static void max_height$set( MemorySegment seg, int x) {
        _GdkGeometry.max_height$VH.set(seg, x);
    }
    public static int max_height$get(MemorySegment seg, long index) {
        return (int)_GdkGeometry.max_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_height$set(MemorySegment seg, long index, int x) {
        _GdkGeometry.max_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle base_width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("base_width"));
    public static VarHandle base_width$VH() {
        return _GdkGeometry.base_width$VH;
    }
    public static int base_width$get(MemorySegment seg) {
        return (int)_GdkGeometry.base_width$VH.get(seg);
    }
    public static void base_width$set( MemorySegment seg, int x) {
        _GdkGeometry.base_width$VH.set(seg, x);
    }
    public static int base_width$get(MemorySegment seg, long index) {
        return (int)_GdkGeometry.base_width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void base_width$set(MemorySegment seg, long index, int x) {
        _GdkGeometry.base_width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle base_height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("base_height"));
    public static VarHandle base_height$VH() {
        return _GdkGeometry.base_height$VH;
    }
    public static int base_height$get(MemorySegment seg) {
        return (int)_GdkGeometry.base_height$VH.get(seg);
    }
    public static void base_height$set( MemorySegment seg, int x) {
        _GdkGeometry.base_height$VH.set(seg, x);
    }
    public static int base_height$get(MemorySegment seg, long index) {
        return (int)_GdkGeometry.base_height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void base_height$set(MemorySegment seg, long index, int x) {
        _GdkGeometry.base_height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width_inc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width_inc"));
    public static VarHandle width_inc$VH() {
        return _GdkGeometry.width_inc$VH;
    }
    public static int width_inc$get(MemorySegment seg) {
        return (int)_GdkGeometry.width_inc$VH.get(seg);
    }
    public static void width_inc$set( MemorySegment seg, int x) {
        _GdkGeometry.width_inc$VH.set(seg, x);
    }
    public static int width_inc$get(MemorySegment seg, long index) {
        return (int)_GdkGeometry.width_inc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width_inc$set(MemorySegment seg, long index, int x) {
        _GdkGeometry.width_inc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height_inc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height_inc"));
    public static VarHandle height_inc$VH() {
        return _GdkGeometry.height_inc$VH;
    }
    public static int height_inc$get(MemorySegment seg) {
        return (int)_GdkGeometry.height_inc$VH.get(seg);
    }
    public static void height_inc$set( MemorySegment seg, int x) {
        _GdkGeometry.height_inc$VH.set(seg, x);
    }
    public static int height_inc$get(MemorySegment seg, long index) {
        return (int)_GdkGeometry.height_inc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height_inc$set(MemorySegment seg, long index, int x) {
        _GdkGeometry.height_inc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle min_aspect$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("min_aspect"));
    public static VarHandle min_aspect$VH() {
        return _GdkGeometry.min_aspect$VH;
    }
    public static double min_aspect$get(MemorySegment seg) {
        return (double)_GdkGeometry.min_aspect$VH.get(seg);
    }
    public static void min_aspect$set( MemorySegment seg, double x) {
        _GdkGeometry.min_aspect$VH.set(seg, x);
    }
    public static double min_aspect$get(MemorySegment seg, long index) {
        return (double)_GdkGeometry.min_aspect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void min_aspect$set(MemorySegment seg, long index, double x) {
        _GdkGeometry.min_aspect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle max_aspect$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("max_aspect"));
    public static VarHandle max_aspect$VH() {
        return _GdkGeometry.max_aspect$VH;
    }
    public static double max_aspect$get(MemorySegment seg) {
        return (double)_GdkGeometry.max_aspect$VH.get(seg);
    }
    public static void max_aspect$set( MemorySegment seg, double x) {
        _GdkGeometry.max_aspect$VH.set(seg, x);
    }
    public static double max_aspect$get(MemorySegment seg, long index) {
        return (double)_GdkGeometry.max_aspect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void max_aspect$set(MemorySegment seg, long index, double x) {
        _GdkGeometry.max_aspect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle win_gravity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("win_gravity"));
    public static VarHandle win_gravity$VH() {
        return _GdkGeometry.win_gravity$VH;
    }
    public static int win_gravity$get(MemorySegment seg) {
        return (int)_GdkGeometry.win_gravity$VH.get(seg);
    }
    public static void win_gravity$set( MemorySegment seg, int x) {
        _GdkGeometry.win_gravity$VH.set(seg, x);
    }
    public static int win_gravity$get(MemorySegment seg, long index) {
        return (int)_GdkGeometry.win_gravity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void win_gravity$set(MemorySegment seg, long index, int x) {
        _GdkGeometry.win_gravity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


