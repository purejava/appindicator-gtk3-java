// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkFontChooserIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("base_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_font_family"),
        Constants$root.C_POINTER$LAYOUT.withName("get_font_face"),
        Constants$root.C_POINTER$LAYOUT.withName("get_font_size"),
        Constants$root.C_POINTER$LAYOUT.withName("set_filter_func"),
        Constants$root.C_POINTER$LAYOUT.withName("font_activated"),
        Constants$root.C_POINTER$LAYOUT.withName("set_font_map"),
        Constants$root.C_POINTER$LAYOUT.withName("get_font_map"),
        MemoryLayout.sequenceLayout(10, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkFontChooserIface");
    public static MemoryLayout $LAYOUT() {
        return _GtkFontChooserIface.$struct$LAYOUT;
    }
    public static MemorySegment base_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_font_family$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_font_family$MH = RuntimeHelper.downcallHandle(
        _GtkFontChooserIface.get_font_family$FUNC
    );
    public interface get_font_family {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_font_family fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_font_family.class, fi, _GtkFontChooserIface.get_font_family$FUNC, session);
        }
        static get_font_family ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_family$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_font_family$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_font_family"));
    public static VarHandle get_font_family$VH() {
        return _GtkFontChooserIface.get_font_family$VH;
    }
    public static MemoryAddress get_font_family$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_family$VH.get(seg);
    }
    public static void get_font_family$set( MemorySegment seg, MemoryAddress x) {
        _GtkFontChooserIface.get_font_family$VH.set(seg, x);
    }
    public static MemoryAddress get_font_family$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_family$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font_family$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFontChooserIface.get_font_family$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font_family get_font_family (MemorySegment segment, MemorySession session) {
        return get_font_family.ofAddress(get_font_family$get(segment), session);
    }
    static final FunctionDescriptor get_font_face$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_font_face$MH = RuntimeHelper.downcallHandle(
        _GtkFontChooserIface.get_font_face$FUNC
    );
    public interface get_font_face {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_font_face fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_font_face.class, fi, _GtkFontChooserIface.get_font_face$FUNC, session);
        }
        static get_font_face ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_face$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_font_face$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_font_face"));
    public static VarHandle get_font_face$VH() {
        return _GtkFontChooserIface.get_font_face$VH;
    }
    public static MemoryAddress get_font_face$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_face$VH.get(seg);
    }
    public static void get_font_face$set( MemorySegment seg, MemoryAddress x) {
        _GtkFontChooserIface.get_font_face$VH.set(seg, x);
    }
    public static MemoryAddress get_font_face$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_face$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font_face$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFontChooserIface.get_font_face$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font_face get_font_face (MemorySegment segment, MemorySession session) {
        return get_font_face.ofAddress(get_font_face$get(segment), session);
    }
    static final FunctionDescriptor get_font_size$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_font_size$MH = RuntimeHelper.downcallHandle(
        _GtkFontChooserIface.get_font_size$FUNC
    );
    public interface get_font_size {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_font_size fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_font_size.class, fi, _GtkFontChooserIface.get_font_size$FUNC, session);
        }
        static get_font_size ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkFontChooserIface.get_font_size$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_font_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_font_size"));
    public static VarHandle get_font_size$VH() {
        return _GtkFontChooserIface.get_font_size$VH;
    }
    public static MemoryAddress get_font_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_size$VH.get(seg);
    }
    public static void get_font_size$set( MemorySegment seg, MemoryAddress x) {
        _GtkFontChooserIface.get_font_size$VH.set(seg, x);
    }
    public static MemoryAddress get_font_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font_size$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFontChooserIface.get_font_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font_size get_font_size (MemorySegment segment, MemorySession session) {
        return get_font_size.ofAddress(get_font_size$get(segment), session);
    }
    static final FunctionDescriptor set_filter_func$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_filter_func$MH = RuntimeHelper.downcallHandle(
        _GtkFontChooserIface.set_filter_func$FUNC
    );
    public interface set_filter_func {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(set_filter_func fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_filter_func.class, fi, _GtkFontChooserIface.set_filter_func$FUNC, session);
        }
        static set_filter_func ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkFontChooserIface.set_filter_func$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_filter_func$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_filter_func"));
    public static VarHandle set_filter_func$VH() {
        return _GtkFontChooserIface.set_filter_func$VH;
    }
    public static MemoryAddress set_filter_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.set_filter_func$VH.get(seg);
    }
    public static void set_filter_func$set( MemorySegment seg, MemoryAddress x) {
        _GtkFontChooserIface.set_filter_func$VH.set(seg, x);
    }
    public static MemoryAddress set_filter_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.set_filter_func$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_filter_func$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFontChooserIface.set_filter_func$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_filter_func set_filter_func (MemorySegment segment, MemorySession session) {
        return set_filter_func.ofAddress(set_filter_func$get(segment), session);
    }
    static final FunctionDescriptor font_activated$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle font_activated$MH = RuntimeHelper.downcallHandle(
        _GtkFontChooserIface.font_activated$FUNC
    );
    public interface font_activated {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(font_activated fi, MemorySession session) {
            return RuntimeHelper.upcallStub(font_activated.class, fi, _GtkFontChooserIface.font_activated$FUNC, session);
        }
        static font_activated ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkFontChooserIface.font_activated$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle font_activated$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("font_activated"));
    public static VarHandle font_activated$VH() {
        return _GtkFontChooserIface.font_activated$VH;
    }
    public static MemoryAddress font_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.font_activated$VH.get(seg);
    }
    public static void font_activated$set( MemorySegment seg, MemoryAddress x) {
        _GtkFontChooserIface.font_activated$VH.set(seg, x);
    }
    public static MemoryAddress font_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.font_activated$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void font_activated$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFontChooserIface.font_activated$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static font_activated font_activated (MemorySegment segment, MemorySession session) {
        return font_activated.ofAddress(font_activated$get(segment), session);
    }
    static final FunctionDescriptor set_font_map$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_font_map$MH = RuntimeHelper.downcallHandle(
        _GtkFontChooserIface.set_font_map$FUNC
    );
    public interface set_font_map {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_font_map fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_font_map.class, fi, _GtkFontChooserIface.set_font_map$FUNC, session);
        }
        static set_font_map ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkFontChooserIface.set_font_map$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_font_map$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_font_map"));
    public static VarHandle set_font_map$VH() {
        return _GtkFontChooserIface.set_font_map$VH;
    }
    public static MemoryAddress set_font_map$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.set_font_map$VH.get(seg);
    }
    public static void set_font_map$set( MemorySegment seg, MemoryAddress x) {
        _GtkFontChooserIface.set_font_map$VH.set(seg, x);
    }
    public static MemoryAddress set_font_map$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.set_font_map$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_font_map$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFontChooserIface.set_font_map$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_font_map set_font_map (MemorySegment segment, MemorySession session) {
        return set_font_map.ofAddress(set_font_map$get(segment), session);
    }
    static final FunctionDescriptor get_font_map$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_font_map$MH = RuntimeHelper.downcallHandle(
        _GtkFontChooserIface.get_font_map$FUNC
    );
    public interface get_font_map {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_font_map fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_font_map.class, fi, _GtkFontChooserIface.get_font_map$FUNC, session);
        }
        static get_font_map ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_map$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_font_map$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_font_map"));
    public static VarHandle get_font_map$VH() {
        return _GtkFontChooserIface.get_font_map$VH;
    }
    public static MemoryAddress get_font_map$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_map$VH.get(seg);
    }
    public static void get_font_map$set( MemorySegment seg, MemoryAddress x) {
        _GtkFontChooserIface.get_font_map$VH.set(seg, x);
    }
    public static MemoryAddress get_font_map$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFontChooserIface.get_font_map$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font_map$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFontChooserIface.get_font_map$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font_map get_font_map (MemorySegment segment, MemorySession session) {
        return get_font_map.ofAddress(get_font_map$get(segment), session);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(72, 80);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


