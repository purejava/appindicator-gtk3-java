// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GThreadPool {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("func"),
        Constants$root.C_POINTER$LAYOUT.withName("user_data"),
        Constants$root.C_INT$LAYOUT.withName("exclusive"),
        MemoryLayout.paddingLayout(32)
    ).withName("_GThreadPool");
    public static MemoryLayout $LAYOUT() {
        return _GThreadPool.$struct$LAYOUT;
    }
    static final VarHandle func$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("func"));
    public static VarHandle func$VH() {
        return _GThreadPool.func$VH;
    }
    public static MemoryAddress func$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadPool.func$VH.get(seg);
    }
    public static void func$set( MemorySegment seg, MemoryAddress x) {
        _GThreadPool.func$VH.set(seg, x);
    }
    public static MemoryAddress func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadPool.func$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void func$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadPool.func$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GFunc func (MemorySegment segment, MemorySession session) {
        return GFunc.ofAddress(func$get(segment), session);
    }
    static final VarHandle user_data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("user_data"));
    public static VarHandle user_data$VH() {
        return _GThreadPool.user_data$VH;
    }
    public static MemoryAddress user_data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadPool.user_data$VH.get(seg);
    }
    public static void user_data$set( MemorySegment seg, MemoryAddress x) {
        _GThreadPool.user_data$VH.set(seg, x);
    }
    public static MemoryAddress user_data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadPool.user_data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void user_data$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadPool.user_data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle exclusive$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("exclusive"));
    public static VarHandle exclusive$VH() {
        return _GThreadPool.exclusive$VH;
    }
    public static int exclusive$get(MemorySegment seg) {
        return (int)_GThreadPool.exclusive$VH.get(seg);
    }
    public static void exclusive$set( MemorySegment seg, int x) {
        _GThreadPool.exclusive$VH.set(seg, x);
    }
    public static int exclusive$get(MemorySegment seg, long index) {
        return (int)_GThreadPool.exclusive$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void exclusive$set(MemorySegment seg, long index, int x) {
        _GThreadPool.exclusive$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


