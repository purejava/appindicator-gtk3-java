// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkTextBufferSerializeFunc {

    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress register_buffer, java.lang.foreign.MemoryAddress content_buffer, java.lang.foreign.MemoryAddress start, java.lang.foreign.MemoryAddress end, java.lang.foreign.MemoryAddress length, java.lang.foreign.MemoryAddress user_data);
    static MemorySegment allocate(GtkTextBufferSerializeFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkTextBufferSerializeFunc.class, fi, constants$2033.GtkTextBufferSerializeFunc$FUNC, session);
    }
    static GtkTextBufferSerializeFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _register_buffer, java.lang.foreign.MemoryAddress _content_buffer, java.lang.foreign.MemoryAddress _start, java.lang.foreign.MemoryAddress _end, java.lang.foreign.MemoryAddress _length, java.lang.foreign.MemoryAddress _user_data) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$2033.GtkTextBufferSerializeFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_register_buffer, (java.lang.foreign.Addressable)_content_buffer, (java.lang.foreign.Addressable)_start, (java.lang.foreign.Addressable)_end, (java.lang.foreign.Addressable)_length, (java.lang.foreign.Addressable)_user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


