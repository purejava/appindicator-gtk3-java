// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GNode {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("data"),
        Constants$root.C_POINTER$LAYOUT.withName("next"),
        Constants$root.C_POINTER$LAYOUT.withName("prev"),
        Constants$root.C_POINTER$LAYOUT.withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("children")
    ).withName("_GNode");
    public static MemoryLayout $LAYOUT() {
        return _GNode.$struct$LAYOUT;
    }
    static final VarHandle data$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("data"));
    public static VarHandle data$VH() {
        return _GNode.data$VH;
    }
    public static MemoryAddress data$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GNode.data$VH.get(seg);
    }
    public static void data$set( MemorySegment seg, MemoryAddress x) {
        _GNode.data$VH.set(seg, x);
    }
    public static MemoryAddress data$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GNode.data$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void data$set(MemorySegment seg, long index, MemoryAddress x) {
        _GNode.data$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return _GNode.next$VH;
    }
    public static MemoryAddress next$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GNode.next$VH.get(seg);
    }
    public static void next$set( MemorySegment seg, MemoryAddress x) {
        _GNode.next$VH.set(seg, x);
    }
    public static MemoryAddress next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GNode.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemoryAddress x) {
        _GNode.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle prev$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("prev"));
    public static VarHandle prev$VH() {
        return _GNode.prev$VH;
    }
    public static MemoryAddress prev$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GNode.prev$VH.get(seg);
    }
    public static void prev$set( MemorySegment seg, MemoryAddress x) {
        _GNode.prev$VH.set(seg, x);
    }
    public static MemoryAddress prev$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GNode.prev$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void prev$set(MemorySegment seg, long index, MemoryAddress x) {
        _GNode.prev$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("parent"));
    public static VarHandle parent$VH() {
        return _GNode.parent$VH;
    }
    public static MemoryAddress parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GNode.parent$VH.get(seg);
    }
    public static void parent$set( MemorySegment seg, MemoryAddress x) {
        _GNode.parent$VH.set(seg, x);
    }
    public static MemoryAddress parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GNode.parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parent$set(MemorySegment seg, long index, MemoryAddress x) {
        _GNode.parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle children$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("children"));
    public static VarHandle children$VH() {
        return _GNode.children$VH;
    }
    public static MemoryAddress children$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GNode.children$VH.get(seg);
    }
    public static void children$set( MemorySegment seg, MemoryAddress x) {
        _GNode.children$VH.set(seg, x);
    }
    public static MemoryAddress children$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GNode.children$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void children$set(MemorySegment seg, long index, MemoryAddress x) {
        _GNode.children$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


