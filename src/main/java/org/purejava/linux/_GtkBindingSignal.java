// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkBindingSignal {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("next"),
        Constants$root.C_POINTER$LAYOUT.withName("signal_name"),
        Constants$root.C_INT$LAYOUT.withName("n_args"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("args")
    ).withName("_GtkBindingSignal");
    public static MemoryLayout $LAYOUT() {
        return _GtkBindingSignal.$struct$LAYOUT;
    }
    static final VarHandle next$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("next"));
    public static VarHandle next$VH() {
        return _GtkBindingSignal.next$VH;
    }
    public static MemoryAddress next$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBindingSignal.next$VH.get(seg);
    }
    public static void next$set( MemorySegment seg, MemoryAddress x) {
        _GtkBindingSignal.next$VH.set(seg, x);
    }
    public static MemoryAddress next$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBindingSignal.next$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void next$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBindingSignal.next$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle signal_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("signal_name"));
    public static VarHandle signal_name$VH() {
        return _GtkBindingSignal.signal_name$VH;
    }
    public static MemoryAddress signal_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBindingSignal.signal_name$VH.get(seg);
    }
    public static void signal_name$set( MemorySegment seg, MemoryAddress x) {
        _GtkBindingSignal.signal_name$VH.set(seg, x);
    }
    public static MemoryAddress signal_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBindingSignal.signal_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void signal_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBindingSignal.signal_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n_args$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_args"));
    public static VarHandle n_args$VH() {
        return _GtkBindingSignal.n_args$VH;
    }
    public static int n_args$get(MemorySegment seg) {
        return (int)_GtkBindingSignal.n_args$VH.get(seg);
    }
    public static void n_args$set( MemorySegment seg, int x) {
        _GtkBindingSignal.n_args$VH.set(seg, x);
    }
    public static int n_args$get(MemorySegment seg, long index) {
        return (int)_GtkBindingSignal.n_args$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_args$set(MemorySegment seg, long index, int x) {
        _GtkBindingSignal.n_args$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle args$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("args"));
    public static VarHandle args$VH() {
        return _GtkBindingSignal.args$VH;
    }
    public static MemoryAddress args$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkBindingSignal.args$VH.get(seg);
    }
    public static void args$set( MemorySegment seg, MemoryAddress x) {
        _GtkBindingSignal.args$VH.set(seg, x);
    }
    public static MemoryAddress args$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkBindingSignal.args$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void args$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkBindingSignal.args$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


