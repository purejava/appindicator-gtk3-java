// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GVolumeMonitorClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("volume_added"),
        Constants$root.C_POINTER$LAYOUT.withName("volume_removed"),
        Constants$root.C_POINTER$LAYOUT.withName("volume_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("mount_added"),
        Constants$root.C_POINTER$LAYOUT.withName("mount_removed"),
        Constants$root.C_POINTER$LAYOUT.withName("mount_pre_unmount"),
        Constants$root.C_POINTER$LAYOUT.withName("mount_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("drive_connected"),
        Constants$root.C_POINTER$LAYOUT.withName("drive_disconnected"),
        Constants$root.C_POINTER$LAYOUT.withName("drive_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("is_supported"),
        Constants$root.C_POINTER$LAYOUT.withName("get_connected_drives"),
        Constants$root.C_POINTER$LAYOUT.withName("get_volumes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_mounts"),
        Constants$root.C_POINTER$LAYOUT.withName("get_volume_for_uuid"),
        Constants$root.C_POINTER$LAYOUT.withName("get_mount_for_uuid"),
        Constants$root.C_POINTER$LAYOUT.withName("adopt_orphan_mount"),
        Constants$root.C_POINTER$LAYOUT.withName("drive_eject_button"),
        Constants$root.C_POINTER$LAYOUT.withName("drive_stop_button"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved6")
    ).withName("_GVolumeMonitorClass");
    public static MemoryLayout $LAYOUT() {
        return _GVolumeMonitorClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor volume_added$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle volume_added$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.volume_added$FUNC
    );
    public interface volume_added {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(volume_added fi, MemorySession session) {
            return RuntimeHelper.upcallStub(volume_added.class, fi, _GVolumeMonitorClass.volume_added$FUNC, session);
        }
        static volume_added ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.volume_added$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle volume_added$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("volume_added"));
    public static VarHandle volume_added$VH() {
        return _GVolumeMonitorClass.volume_added$VH;
    }
    public static MemoryAddress volume_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.volume_added$VH.get(seg);
    }
    public static void volume_added$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.volume_added$VH.set(seg, x);
    }
    public static MemoryAddress volume_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.volume_added$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void volume_added$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.volume_added$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static volume_added volume_added (MemorySegment segment, MemorySession session) {
        return volume_added.ofAddress(volume_added$get(segment), session);
    }
    static final FunctionDescriptor volume_removed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle volume_removed$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.volume_removed$FUNC
    );
    public interface volume_removed {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(volume_removed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(volume_removed.class, fi, _GVolumeMonitorClass.volume_removed$FUNC, session);
        }
        static volume_removed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.volume_removed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle volume_removed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("volume_removed"));
    public static VarHandle volume_removed$VH() {
        return _GVolumeMonitorClass.volume_removed$VH;
    }
    public static MemoryAddress volume_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.volume_removed$VH.get(seg);
    }
    public static void volume_removed$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.volume_removed$VH.set(seg, x);
    }
    public static MemoryAddress volume_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.volume_removed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void volume_removed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.volume_removed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static volume_removed volume_removed (MemorySegment segment, MemorySession session) {
        return volume_removed.ofAddress(volume_removed$get(segment), session);
    }
    static final FunctionDescriptor volume_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle volume_changed$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.volume_changed$FUNC
    );
    public interface volume_changed {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(volume_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(volume_changed.class, fi, _GVolumeMonitorClass.volume_changed$FUNC, session);
        }
        static volume_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.volume_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle volume_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("volume_changed"));
    public static VarHandle volume_changed$VH() {
        return _GVolumeMonitorClass.volume_changed$VH;
    }
    public static MemoryAddress volume_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.volume_changed$VH.get(seg);
    }
    public static void volume_changed$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.volume_changed$VH.set(seg, x);
    }
    public static MemoryAddress volume_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.volume_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void volume_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.volume_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static volume_changed volume_changed (MemorySegment segment, MemorySession session) {
        return volume_changed.ofAddress(volume_changed$get(segment), session);
    }
    static final FunctionDescriptor mount_added$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mount_added$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.mount_added$FUNC
    );
    public interface mount_added {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(mount_added fi, MemorySession session) {
            return RuntimeHelper.upcallStub(mount_added.class, fi, _GVolumeMonitorClass.mount_added$FUNC, session);
        }
        static mount_added ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.mount_added$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mount_added$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mount_added"));
    public static VarHandle mount_added$VH() {
        return _GVolumeMonitorClass.mount_added$VH;
    }
    public static MemoryAddress mount_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.mount_added$VH.get(seg);
    }
    public static void mount_added$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.mount_added$VH.set(seg, x);
    }
    public static MemoryAddress mount_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.mount_added$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_added$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.mount_added$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_added mount_added (MemorySegment segment, MemorySession session) {
        return mount_added.ofAddress(mount_added$get(segment), session);
    }
    static final FunctionDescriptor mount_removed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mount_removed$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.mount_removed$FUNC
    );
    public interface mount_removed {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(mount_removed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(mount_removed.class, fi, _GVolumeMonitorClass.mount_removed$FUNC, session);
        }
        static mount_removed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.mount_removed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mount_removed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mount_removed"));
    public static VarHandle mount_removed$VH() {
        return _GVolumeMonitorClass.mount_removed$VH;
    }
    public static MemoryAddress mount_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.mount_removed$VH.get(seg);
    }
    public static void mount_removed$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.mount_removed$VH.set(seg, x);
    }
    public static MemoryAddress mount_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.mount_removed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_removed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.mount_removed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_removed mount_removed (MemorySegment segment, MemorySession session) {
        return mount_removed.ofAddress(mount_removed$get(segment), session);
    }
    static final FunctionDescriptor mount_pre_unmount$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mount_pre_unmount$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.mount_pre_unmount$FUNC
    );
    public interface mount_pre_unmount {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(mount_pre_unmount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(mount_pre_unmount.class, fi, _GVolumeMonitorClass.mount_pre_unmount$FUNC, session);
        }
        static mount_pre_unmount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.mount_pre_unmount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mount_pre_unmount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mount_pre_unmount"));
    public static VarHandle mount_pre_unmount$VH() {
        return _GVolumeMonitorClass.mount_pre_unmount$VH;
    }
    public static MemoryAddress mount_pre_unmount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.mount_pre_unmount$VH.get(seg);
    }
    public static void mount_pre_unmount$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.mount_pre_unmount$VH.set(seg, x);
    }
    public static MemoryAddress mount_pre_unmount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.mount_pre_unmount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_pre_unmount$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.mount_pre_unmount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_pre_unmount mount_pre_unmount (MemorySegment segment, MemorySession session) {
        return mount_pre_unmount.ofAddress(mount_pre_unmount$get(segment), session);
    }
    static final FunctionDescriptor mount_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mount_changed$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.mount_changed$FUNC
    );
    public interface mount_changed {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(mount_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(mount_changed.class, fi, _GVolumeMonitorClass.mount_changed$FUNC, session);
        }
        static mount_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.mount_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mount_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mount_changed"));
    public static VarHandle mount_changed$VH() {
        return _GVolumeMonitorClass.mount_changed$VH;
    }
    public static MemoryAddress mount_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.mount_changed$VH.get(seg);
    }
    public static void mount_changed$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.mount_changed$VH.set(seg, x);
    }
    public static MemoryAddress mount_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.mount_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mount_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.mount_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mount_changed mount_changed (MemorySegment segment, MemorySession session) {
        return mount_changed.ofAddress(mount_changed$get(segment), session);
    }
    static final FunctionDescriptor drive_connected$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle drive_connected$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.drive_connected$FUNC
    );
    public interface drive_connected {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(drive_connected fi, MemorySession session) {
            return RuntimeHelper.upcallStub(drive_connected.class, fi, _GVolumeMonitorClass.drive_connected$FUNC, session);
        }
        static drive_connected ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.drive_connected$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle drive_connected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("drive_connected"));
    public static VarHandle drive_connected$VH() {
        return _GVolumeMonitorClass.drive_connected$VH;
    }
    public static MemoryAddress drive_connected$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.drive_connected$VH.get(seg);
    }
    public static void drive_connected$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.drive_connected$VH.set(seg, x);
    }
    public static MemoryAddress drive_connected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.drive_connected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void drive_connected$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.drive_connected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static drive_connected drive_connected (MemorySegment segment, MemorySession session) {
        return drive_connected.ofAddress(drive_connected$get(segment), session);
    }
    static final FunctionDescriptor drive_disconnected$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle drive_disconnected$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.drive_disconnected$FUNC
    );
    public interface drive_disconnected {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(drive_disconnected fi, MemorySession session) {
            return RuntimeHelper.upcallStub(drive_disconnected.class, fi, _GVolumeMonitorClass.drive_disconnected$FUNC, session);
        }
        static drive_disconnected ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.drive_disconnected$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle drive_disconnected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("drive_disconnected"));
    public static VarHandle drive_disconnected$VH() {
        return _GVolumeMonitorClass.drive_disconnected$VH;
    }
    public static MemoryAddress drive_disconnected$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.drive_disconnected$VH.get(seg);
    }
    public static void drive_disconnected$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.drive_disconnected$VH.set(seg, x);
    }
    public static MemoryAddress drive_disconnected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.drive_disconnected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void drive_disconnected$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.drive_disconnected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static drive_disconnected drive_disconnected (MemorySegment segment, MemorySession session) {
        return drive_disconnected.ofAddress(drive_disconnected$get(segment), session);
    }
    static final FunctionDescriptor drive_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle drive_changed$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.drive_changed$FUNC
    );
    public interface drive_changed {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(drive_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(drive_changed.class, fi, _GVolumeMonitorClass.drive_changed$FUNC, session);
        }
        static drive_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.drive_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle drive_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("drive_changed"));
    public static VarHandle drive_changed$VH() {
        return _GVolumeMonitorClass.drive_changed$VH;
    }
    public static MemoryAddress drive_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.drive_changed$VH.get(seg);
    }
    public static void drive_changed$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.drive_changed$VH.set(seg, x);
    }
    public static MemoryAddress drive_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.drive_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void drive_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.drive_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static drive_changed drive_changed (MemorySegment segment, MemorySession session) {
        return drive_changed.ofAddress(drive_changed$get(segment), session);
    }
    static final FunctionDescriptor is_supported$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT);
    static final MethodHandle is_supported$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.is_supported$FUNC
    );
    public interface is_supported {

        int apply();
        static MemorySegment allocate(is_supported fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_supported.class, fi, _GVolumeMonitorClass.is_supported$FUNC, session);
        }
        static is_supported ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    return (int)_GVolumeMonitorClass.is_supported$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_supported$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_supported"));
    public static VarHandle is_supported$VH() {
        return _GVolumeMonitorClass.is_supported$VH;
    }
    public static MemoryAddress is_supported$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.is_supported$VH.get(seg);
    }
    public static void is_supported$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.is_supported$VH.set(seg, x);
    }
    public static MemoryAddress is_supported$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.is_supported$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_supported$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.is_supported$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_supported is_supported (MemorySegment segment, MemorySession session) {
        return is_supported.ofAddress(is_supported$get(segment), session);
    }
    static final FunctionDescriptor get_connected_drives$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_connected_drives$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.get_connected_drives$FUNC
    );
    public interface get_connected_drives {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_connected_drives fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_connected_drives.class, fi, _GVolumeMonitorClass.get_connected_drives$FUNC, session);
        }
        static get_connected_drives ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_connected_drives$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_connected_drives$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_connected_drives"));
    public static VarHandle get_connected_drives$VH() {
        return _GVolumeMonitorClass.get_connected_drives$VH;
    }
    public static MemoryAddress get_connected_drives$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_connected_drives$VH.get(seg);
    }
    public static void get_connected_drives$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.get_connected_drives$VH.set(seg, x);
    }
    public static MemoryAddress get_connected_drives$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_connected_drives$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_connected_drives$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.get_connected_drives$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_connected_drives get_connected_drives (MemorySegment segment, MemorySession session) {
        return get_connected_drives.ofAddress(get_connected_drives$get(segment), session);
    }
    static final FunctionDescriptor get_volumes$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_volumes$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.get_volumes$FUNC
    );
    public interface get_volumes {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_volumes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_volumes.class, fi, _GVolumeMonitorClass.get_volumes$FUNC, session);
        }
        static get_volumes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_volumes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_volumes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_volumes"));
    public static VarHandle get_volumes$VH() {
        return _GVolumeMonitorClass.get_volumes$VH;
    }
    public static MemoryAddress get_volumes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_volumes$VH.get(seg);
    }
    public static void get_volumes$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.get_volumes$VH.set(seg, x);
    }
    public static MemoryAddress get_volumes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_volumes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_volumes$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.get_volumes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_volumes get_volumes (MemorySegment segment, MemorySession session) {
        return get_volumes.ofAddress(get_volumes$get(segment), session);
    }
    static final FunctionDescriptor get_mounts$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_mounts$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.get_mounts$FUNC
    );
    public interface get_mounts {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_mounts fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_mounts.class, fi, _GVolumeMonitorClass.get_mounts$FUNC, session);
        }
        static get_mounts ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_mounts$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_mounts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_mounts"));
    public static VarHandle get_mounts$VH() {
        return _GVolumeMonitorClass.get_mounts$VH;
    }
    public static MemoryAddress get_mounts$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_mounts$VH.get(seg);
    }
    public static void get_mounts$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.get_mounts$VH.set(seg, x);
    }
    public static MemoryAddress get_mounts$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_mounts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mounts$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.get_mounts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mounts get_mounts (MemorySegment segment, MemorySession session) {
        return get_mounts.ofAddress(get_mounts$get(segment), session);
    }
    static final FunctionDescriptor get_volume_for_uuid$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_volume_for_uuid$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.get_volume_for_uuid$FUNC
    );
    public interface get_volume_for_uuid {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_volume_for_uuid fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_volume_for_uuid.class, fi, _GVolumeMonitorClass.get_volume_for_uuid$FUNC, session);
        }
        static get_volume_for_uuid ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_volume_for_uuid$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_volume_for_uuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_volume_for_uuid"));
    public static VarHandle get_volume_for_uuid$VH() {
        return _GVolumeMonitorClass.get_volume_for_uuid$VH;
    }
    public static MemoryAddress get_volume_for_uuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_volume_for_uuid$VH.get(seg);
    }
    public static void get_volume_for_uuid$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.get_volume_for_uuid$VH.set(seg, x);
    }
    public static MemoryAddress get_volume_for_uuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_volume_for_uuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_volume_for_uuid$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.get_volume_for_uuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_volume_for_uuid get_volume_for_uuid (MemorySegment segment, MemorySession session) {
        return get_volume_for_uuid.ofAddress(get_volume_for_uuid$get(segment), session);
    }
    static final FunctionDescriptor get_mount_for_uuid$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_mount_for_uuid$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.get_mount_for_uuid$FUNC
    );
    public interface get_mount_for_uuid {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_mount_for_uuid fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_mount_for_uuid.class, fi, _GVolumeMonitorClass.get_mount_for_uuid$FUNC, session);
        }
        static get_mount_for_uuid ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_mount_for_uuid$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_mount_for_uuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_mount_for_uuid"));
    public static VarHandle get_mount_for_uuid$VH() {
        return _GVolumeMonitorClass.get_mount_for_uuid$VH;
    }
    public static MemoryAddress get_mount_for_uuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_mount_for_uuid$VH.get(seg);
    }
    public static void get_mount_for_uuid$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.get_mount_for_uuid$VH.set(seg, x);
    }
    public static MemoryAddress get_mount_for_uuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.get_mount_for_uuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mount_for_uuid$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.get_mount_for_uuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mount_for_uuid get_mount_for_uuid (MemorySegment segment, MemorySession session) {
        return get_mount_for_uuid.ofAddress(get_mount_for_uuid$get(segment), session);
    }
    static final FunctionDescriptor adopt_orphan_mount$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle adopt_orphan_mount$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.adopt_orphan_mount$FUNC
    );
    public interface adopt_orphan_mount {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(adopt_orphan_mount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(adopt_orphan_mount.class, fi, _GVolumeMonitorClass.adopt_orphan_mount$FUNC, session);
        }
        static adopt_orphan_mount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.adopt_orphan_mount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle adopt_orphan_mount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("adopt_orphan_mount"));
    public static VarHandle adopt_orphan_mount$VH() {
        return _GVolumeMonitorClass.adopt_orphan_mount$VH;
    }
    public static MemoryAddress adopt_orphan_mount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.adopt_orphan_mount$VH.get(seg);
    }
    public static void adopt_orphan_mount$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.adopt_orphan_mount$VH.set(seg, x);
    }
    public static MemoryAddress adopt_orphan_mount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.adopt_orphan_mount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void adopt_orphan_mount$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.adopt_orphan_mount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static adopt_orphan_mount adopt_orphan_mount (MemorySegment segment, MemorySession session) {
        return adopt_orphan_mount.ofAddress(adopt_orphan_mount$get(segment), session);
    }
    static final FunctionDescriptor drive_eject_button$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle drive_eject_button$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.drive_eject_button$FUNC
    );
    public interface drive_eject_button {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(drive_eject_button fi, MemorySession session) {
            return RuntimeHelper.upcallStub(drive_eject_button.class, fi, _GVolumeMonitorClass.drive_eject_button$FUNC, session);
        }
        static drive_eject_button ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.drive_eject_button$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle drive_eject_button$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("drive_eject_button"));
    public static VarHandle drive_eject_button$VH() {
        return _GVolumeMonitorClass.drive_eject_button$VH;
    }
    public static MemoryAddress drive_eject_button$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.drive_eject_button$VH.get(seg);
    }
    public static void drive_eject_button$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.drive_eject_button$VH.set(seg, x);
    }
    public static MemoryAddress drive_eject_button$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.drive_eject_button$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void drive_eject_button$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.drive_eject_button$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static drive_eject_button drive_eject_button (MemorySegment segment, MemorySession session) {
        return drive_eject_button.ofAddress(drive_eject_button$get(segment), session);
    }
    static final FunctionDescriptor drive_stop_button$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle drive_stop_button$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass.drive_stop_button$FUNC
    );
    public interface drive_stop_button {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(drive_stop_button fi, MemorySession session) {
            return RuntimeHelper.upcallStub(drive_stop_button.class, fi, _GVolumeMonitorClass.drive_stop_button$FUNC, session);
        }
        static drive_stop_button ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVolumeMonitorClass.drive_stop_button$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle drive_stop_button$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("drive_stop_button"));
    public static VarHandle drive_stop_button$VH() {
        return _GVolumeMonitorClass.drive_stop_button$VH;
    }
    public static MemoryAddress drive_stop_button$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.drive_stop_button$VH.get(seg);
    }
    public static void drive_stop_button$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass.drive_stop_button$VH.set(seg, x);
    }
    public static MemoryAddress drive_stop_button$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass.drive_stop_button$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void drive_stop_button$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass.drive_stop_button$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static drive_stop_button drive_stop_button (MemorySegment segment, MemorySession session) {
        return drive_stop_button.ofAddress(drive_stop_button$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved1$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass._g_reserved1$FUNC
    );
    public interface _g_reserved1 {

        void apply();
        static MemorySegment allocate(_g_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved1.class, fi, _GVolumeMonitorClass._g_reserved1$FUNC, session);
        }
        static _g_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVolumeMonitorClass._g_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved1"));
    public static VarHandle _g_reserved1$VH() {
        return _GVolumeMonitorClass._g_reserved1$VH;
    }
    public static MemoryAddress _g_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved1$VH.get(seg);
    }
    public static void _g_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved1 _g_reserved1 (MemorySegment segment, MemorySession session) {
        return _g_reserved1.ofAddress(_g_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved2$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass._g_reserved2$FUNC
    );
    public interface _g_reserved2 {

        void apply();
        static MemorySegment allocate(_g_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved2.class, fi, _GVolumeMonitorClass._g_reserved2$FUNC, session);
        }
        static _g_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVolumeMonitorClass._g_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved2"));
    public static VarHandle _g_reserved2$VH() {
        return _GVolumeMonitorClass._g_reserved2$VH;
    }
    public static MemoryAddress _g_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved2$VH.get(seg);
    }
    public static void _g_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved2 _g_reserved2 (MemorySegment segment, MemorySession session) {
        return _g_reserved2.ofAddress(_g_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved3$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass._g_reserved3$FUNC
    );
    public interface _g_reserved3 {

        void apply();
        static MemorySegment allocate(_g_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved3.class, fi, _GVolumeMonitorClass._g_reserved3$FUNC, session);
        }
        static _g_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVolumeMonitorClass._g_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved3"));
    public static VarHandle _g_reserved3$VH() {
        return _GVolumeMonitorClass._g_reserved3$VH;
    }
    public static MemoryAddress _g_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved3$VH.get(seg);
    }
    public static void _g_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved3 _g_reserved3 (MemorySegment segment, MemorySession session) {
        return _g_reserved3.ofAddress(_g_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved4$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass._g_reserved4$FUNC
    );
    public interface _g_reserved4 {

        void apply();
        static MemorySegment allocate(_g_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved4.class, fi, _GVolumeMonitorClass._g_reserved4$FUNC, session);
        }
        static _g_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVolumeMonitorClass._g_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved4"));
    public static VarHandle _g_reserved4$VH() {
        return _GVolumeMonitorClass._g_reserved4$VH;
    }
    public static MemoryAddress _g_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved4$VH.get(seg);
    }
    public static void _g_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved4 _g_reserved4 (MemorySegment segment, MemorySession session) {
        return _g_reserved4.ofAddress(_g_reserved4$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved5$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass._g_reserved5$FUNC
    );
    public interface _g_reserved5 {

        void apply();
        static MemorySegment allocate(_g_reserved5 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved5.class, fi, _GVolumeMonitorClass._g_reserved5$FUNC, session);
        }
        static _g_reserved5 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVolumeMonitorClass._g_reserved5$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved5"));
    public static VarHandle _g_reserved5$VH() {
        return _GVolumeMonitorClass._g_reserved5$VH;
    }
    public static MemoryAddress _g_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved5$VH.get(seg);
    }
    public static void _g_reserved5$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved5$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved5$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved5 _g_reserved5 (MemorySegment segment, MemorySession session) {
        return _g_reserved5.ofAddress(_g_reserved5$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved6$MH = RuntimeHelper.downcallHandle(
        _GVolumeMonitorClass._g_reserved6$FUNC
    );
    public interface _g_reserved6 {

        void apply();
        static MemorySegment allocate(_g_reserved6 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved6.class, fi, _GVolumeMonitorClass._g_reserved6$FUNC, session);
        }
        static _g_reserved6 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVolumeMonitorClass._g_reserved6$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved6"));
    public static VarHandle _g_reserved6$VH() {
        return _GVolumeMonitorClass._g_reserved6$VH;
    }
    public static MemoryAddress _g_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved6$VH.get(seg);
    }
    public static void _g_reserved6$set( MemorySegment seg, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved6$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVolumeMonitorClass._g_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved6$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVolumeMonitorClass._g_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved6 _g_reserved6 (MemorySegment segment, MemorySession session) {
        return _g_reserved6.ofAddress(_g_reserved6$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


