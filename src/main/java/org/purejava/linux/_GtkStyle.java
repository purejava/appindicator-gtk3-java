// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkStyle {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("g_class")
            ).withName("g_type_instance"),
            Constants$root.C_INT$LAYOUT.withName("ref_count"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("qdata")
        ).withName("parent_instance"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("fg"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("bg"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("light"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("dark"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("mid"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("text"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("base"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("text_aa"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("black"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("white"),
        Constants$root.C_POINTER$LAYOUT.withName("font_desc"),
        Constants$root.C_INT$LAYOUT.withName("xthickness"),
        Constants$root.C_INT$LAYOUT.withName("ythickness"),
        MemoryLayout.sequenceLayout(5, Constants$root.C_POINTER$LAYOUT).withName("background"),
        Constants$root.C_INT$LAYOUT.withName("attach_count"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("visual"),
        Constants$root.C_POINTER$LAYOUT.withName("private_font_desc"),
        Constants$root.C_POINTER$LAYOUT.withName("rc_style"),
        Constants$root.C_POINTER$LAYOUT.withName("styles"),
        Constants$root.C_POINTER$LAYOUT.withName("property_cache"),
        Constants$root.C_POINTER$LAYOUT.withName("icon_factories")
    ).withName("_GtkStyle");
    public static MemoryLayout $LAYOUT() {
        return _GtkStyle.$struct$LAYOUT;
    }
    public static MemorySegment parent_instance$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment fg$slice(MemorySegment seg) {
        return seg.asSlice(24, 60);
    }
    public static MemorySegment bg$slice(MemorySegment seg) {
        return seg.asSlice(84, 60);
    }
    public static MemorySegment light$slice(MemorySegment seg) {
        return seg.asSlice(144, 60);
    }
    public static MemorySegment dark$slice(MemorySegment seg) {
        return seg.asSlice(204, 60);
    }
    public static MemorySegment mid$slice(MemorySegment seg) {
        return seg.asSlice(264, 60);
    }
    public static MemorySegment text$slice(MemorySegment seg) {
        return seg.asSlice(324, 60);
    }
    public static MemorySegment base$slice(MemorySegment seg) {
        return seg.asSlice(384, 60);
    }
    public static MemorySegment text_aa$slice(MemorySegment seg) {
        return seg.asSlice(444, 60);
    }
    public static MemorySegment black$slice(MemorySegment seg) {
        return seg.asSlice(504, 12);
    }
    public static MemorySegment white$slice(MemorySegment seg) {
        return seg.asSlice(516, 12);
    }
    static final VarHandle font_desc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("font_desc"));
    public static VarHandle font_desc$VH() {
        return _GtkStyle.font_desc$VH;
    }
    public static MemoryAddress font_desc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.font_desc$VH.get(seg);
    }
    public static void font_desc$set( MemorySegment seg, MemoryAddress x) {
        _GtkStyle.font_desc$VH.set(seg, x);
    }
    public static MemoryAddress font_desc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.font_desc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void font_desc$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkStyle.font_desc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle xthickness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("xthickness"));
    public static VarHandle xthickness$VH() {
        return _GtkStyle.xthickness$VH;
    }
    public static int xthickness$get(MemorySegment seg) {
        return (int)_GtkStyle.xthickness$VH.get(seg);
    }
    public static void xthickness$set( MemorySegment seg, int x) {
        _GtkStyle.xthickness$VH.set(seg, x);
    }
    public static int xthickness$get(MemorySegment seg, long index) {
        return (int)_GtkStyle.xthickness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xthickness$set(MemorySegment seg, long index, int x) {
        _GtkStyle.xthickness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ythickness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ythickness"));
    public static VarHandle ythickness$VH() {
        return _GtkStyle.ythickness$VH;
    }
    public static int ythickness$get(MemorySegment seg) {
        return (int)_GtkStyle.ythickness$VH.get(seg);
    }
    public static void ythickness$set( MemorySegment seg, int x) {
        _GtkStyle.ythickness$VH.set(seg, x);
    }
    public static int ythickness$get(MemorySegment seg, long index) {
        return (int)_GtkStyle.ythickness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ythickness$set(MemorySegment seg, long index, int x) {
        _GtkStyle.ythickness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment background$slice(MemorySegment seg) {
        return seg.asSlice(544, 40);
    }
    static final VarHandle attach_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("attach_count"));
    public static VarHandle attach_count$VH() {
        return _GtkStyle.attach_count$VH;
    }
    public static int attach_count$get(MemorySegment seg) {
        return (int)_GtkStyle.attach_count$VH.get(seg);
    }
    public static void attach_count$set( MemorySegment seg, int x) {
        _GtkStyle.attach_count$VH.set(seg, x);
    }
    public static int attach_count$get(MemorySegment seg, long index) {
        return (int)_GtkStyle.attach_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void attach_count$set(MemorySegment seg, long index, int x) {
        _GtkStyle.attach_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle visual$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("visual"));
    public static VarHandle visual$VH() {
        return _GtkStyle.visual$VH;
    }
    public static MemoryAddress visual$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.visual$VH.get(seg);
    }
    public static void visual$set( MemorySegment seg, MemoryAddress x) {
        _GtkStyle.visual$VH.set(seg, x);
    }
    public static MemoryAddress visual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.visual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void visual$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkStyle.visual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle private_font_desc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("private_font_desc"));
    public static VarHandle private_font_desc$VH() {
        return _GtkStyle.private_font_desc$VH;
    }
    public static MemoryAddress private_font_desc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.private_font_desc$VH.get(seg);
    }
    public static void private_font_desc$set( MemorySegment seg, MemoryAddress x) {
        _GtkStyle.private_font_desc$VH.set(seg, x);
    }
    public static MemoryAddress private_font_desc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.private_font_desc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void private_font_desc$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkStyle.private_font_desc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rc_style$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rc_style"));
    public static VarHandle rc_style$VH() {
        return _GtkStyle.rc_style$VH;
    }
    public static MemoryAddress rc_style$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.rc_style$VH.get(seg);
    }
    public static void rc_style$set( MemorySegment seg, MemoryAddress x) {
        _GtkStyle.rc_style$VH.set(seg, x);
    }
    public static MemoryAddress rc_style$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.rc_style$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_style$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkStyle.rc_style$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle styles$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("styles"));
    public static VarHandle styles$VH() {
        return _GtkStyle.styles$VH;
    }
    public static MemoryAddress styles$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.styles$VH.get(seg);
    }
    public static void styles$set( MemorySegment seg, MemoryAddress x) {
        _GtkStyle.styles$VH.set(seg, x);
    }
    public static MemoryAddress styles$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.styles$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void styles$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkStyle.styles$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle property_cache$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("property_cache"));
    public static VarHandle property_cache$VH() {
        return _GtkStyle.property_cache$VH;
    }
    public static MemoryAddress property_cache$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.property_cache$VH.get(seg);
    }
    public static void property_cache$set( MemorySegment seg, MemoryAddress x) {
        _GtkStyle.property_cache$VH.set(seg, x);
    }
    public static MemoryAddress property_cache$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.property_cache$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void property_cache$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkStyle.property_cache$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle icon_factories$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("icon_factories"));
    public static VarHandle icon_factories$VH() {
        return _GtkStyle.icon_factories$VH;
    }
    public static MemoryAddress icon_factories$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.icon_factories$VH.get(seg);
    }
    public static void icon_factories$set( MemorySegment seg, MemoryAddress x) {
        _GtkStyle.icon_factories$VH.set(seg, x);
    }
    public static MemoryAddress icon_factories$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkStyle.icon_factories$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void icon_factories$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkStyle.icon_factories$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


