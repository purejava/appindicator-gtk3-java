// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkFileFilterInfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("contains"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("filename"),
        Constants$root.C_POINTER$LAYOUT.withName("uri"),
        Constants$root.C_POINTER$LAYOUT.withName("display_name"),
        Constants$root.C_POINTER$LAYOUT.withName("mime_type")
    ).withName("_GtkFileFilterInfo");
    public static MemoryLayout $LAYOUT() {
        return _GtkFileFilterInfo.$struct$LAYOUT;
    }
    static final VarHandle contains$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("contains"));
    public static VarHandle contains$VH() {
        return _GtkFileFilterInfo.contains$VH;
    }
    public static int contains$get(MemorySegment seg) {
        return (int)_GtkFileFilterInfo.contains$VH.get(seg);
    }
    public static void contains$set( MemorySegment seg, int x) {
        _GtkFileFilterInfo.contains$VH.set(seg, x);
    }
    public static int contains$get(MemorySegment seg, long index) {
        return (int)_GtkFileFilterInfo.contains$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void contains$set(MemorySegment seg, long index, int x) {
        _GtkFileFilterInfo.contains$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle filename$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("filename"));
    public static VarHandle filename$VH() {
        return _GtkFileFilterInfo.filename$VH;
    }
    public static MemoryAddress filename$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFileFilterInfo.filename$VH.get(seg);
    }
    public static void filename$set( MemorySegment seg, MemoryAddress x) {
        _GtkFileFilterInfo.filename$VH.set(seg, x);
    }
    public static MemoryAddress filename$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFileFilterInfo.filename$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filename$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFileFilterInfo.filename$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle uri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("uri"));
    public static VarHandle uri$VH() {
        return _GtkFileFilterInfo.uri$VH;
    }
    public static MemoryAddress uri$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFileFilterInfo.uri$VH.get(seg);
    }
    public static void uri$set( MemorySegment seg, MemoryAddress x) {
        _GtkFileFilterInfo.uri$VH.set(seg, x);
    }
    public static MemoryAddress uri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFileFilterInfo.uri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void uri$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFileFilterInfo.uri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle display_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("display_name"));
    public static VarHandle display_name$VH() {
        return _GtkFileFilterInfo.display_name$VH;
    }
    public static MemoryAddress display_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFileFilterInfo.display_name$VH.get(seg);
    }
    public static void display_name$set( MemorySegment seg, MemoryAddress x) {
        _GtkFileFilterInfo.display_name$VH.set(seg, x);
    }
    public static MemoryAddress display_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFileFilterInfo.display_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void display_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFileFilterInfo.display_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle mime_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mime_type"));
    public static VarHandle mime_type$VH() {
        return _GtkFileFilterInfo.mime_type$VH;
    }
    public static MemoryAddress mime_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkFileFilterInfo.mime_type$VH.get(seg);
    }
    public static void mime_type$set( MemorySegment seg, MemoryAddress x) {
        _GtkFileFilterInfo.mime_type$VH.set(seg, x);
    }
    public static MemoryAddress mime_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkFileFilterInfo.mime_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mime_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkFileFilterInfo.mime_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


