// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkComponentIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("add_focus_handler"),
        Constants$root.C_POINTER$LAYOUT.withName("contains"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_accessible_at_point"),
        Constants$root.C_POINTER$LAYOUT.withName("get_extents"),
        Constants$root.C_POINTER$LAYOUT.withName("get_position"),
        Constants$root.C_POINTER$LAYOUT.withName("get_size"),
        Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_focus_handler"),
        Constants$root.C_POINTER$LAYOUT.withName("set_extents"),
        Constants$root.C_POINTER$LAYOUT.withName("set_position"),
        Constants$root.C_POINTER$LAYOUT.withName("set_size"),
        Constants$root.C_POINTER$LAYOUT.withName("get_layer"),
        Constants$root.C_POINTER$LAYOUT.withName("get_mdi_zorder"),
        Constants$root.C_POINTER$LAYOUT.withName("bounds_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_alpha"),
        Constants$root.C_POINTER$LAYOUT.withName("scroll_to"),
        Constants$root.C_POINTER$LAYOUT.withName("scroll_to_point")
    ).withName("_AtkComponentIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkComponentIface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor add_focus_handler$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_focus_handler$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.add_focus_handler$FUNC
    );
    public interface add_focus_handler {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(add_focus_handler fi, MemorySession session) {
            return RuntimeHelper.upcallStub(add_focus_handler.class, fi, _AtkComponentIface.add_focus_handler$FUNC, session);
        }
        static add_focus_handler ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_AtkComponentIface.add_focus_handler$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_focus_handler$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_focus_handler"));
    public static VarHandle add_focus_handler$VH() {
        return _AtkComponentIface.add_focus_handler$VH;
    }
    public static MemoryAddress add_focus_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.add_focus_handler$VH.get(seg);
    }
    public static void add_focus_handler$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.add_focus_handler$VH.set(seg, x);
    }
    public static MemoryAddress add_focus_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.add_focus_handler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_focus_handler$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.add_focus_handler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_focus_handler add_focus_handler (MemorySegment segment, MemorySession session) {
        return add_focus_handler.ofAddress(add_focus_handler$get(segment), session);
    }
    static final FunctionDescriptor contains$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle contains$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.contains$FUNC
    );
    public interface contains {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(contains fi, MemorySession session) {
            return RuntimeHelper.upcallStub(contains.class, fi, _AtkComponentIface.contains$FUNC, session);
        }
        static contains ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)_AtkComponentIface.contains$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle contains$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("contains"));
    public static VarHandle contains$VH() {
        return _AtkComponentIface.contains$VH;
    }
    public static MemoryAddress contains$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.contains$VH.get(seg);
    }
    public static void contains$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.contains$VH.set(seg, x);
    }
    public static MemoryAddress contains$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.contains$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void contains$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.contains$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static contains contains (MemorySegment segment, MemorySession session) {
        return contains.ofAddress(contains$get(segment), session);
    }
    static final FunctionDescriptor ref_accessible_at_point$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle ref_accessible_at_point$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.ref_accessible_at_point$FUNC
    );
    public interface ref_accessible_at_point {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(ref_accessible_at_point fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ref_accessible_at_point.class, fi, _AtkComponentIface.ref_accessible_at_point$FUNC, session);
        }
        static ref_accessible_at_point ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkComponentIface.ref_accessible_at_point$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_accessible_at_point$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_accessible_at_point"));
    public static VarHandle ref_accessible_at_point$VH() {
        return _AtkComponentIface.ref_accessible_at_point$VH;
    }
    public static MemoryAddress ref_accessible_at_point$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.ref_accessible_at_point$VH.get(seg);
    }
    public static void ref_accessible_at_point$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.ref_accessible_at_point$VH.set(seg, x);
    }
    public static MemoryAddress ref_accessible_at_point$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.ref_accessible_at_point$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_accessible_at_point$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.ref_accessible_at_point$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_accessible_at_point ref_accessible_at_point (MemorySegment segment, MemorySession session) {
        return ref_accessible_at_point.ofAddress(ref_accessible_at_point$get(segment), session);
    }
    static final FunctionDescriptor get_extents$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_extents$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.get_extents$FUNC
    );
    public interface get_extents {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, int _x5);
        static MemorySegment allocate(get_extents fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_extents.class, fi, _AtkComponentIface.get_extents$FUNC, session);
        }
        static get_extents ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, int __x5) -> {
                try {
                    _AtkComponentIface.get_extents$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_extents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_extents"));
    public static VarHandle get_extents$VH() {
        return _AtkComponentIface.get_extents$VH;
    }
    public static MemoryAddress get_extents$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_extents$VH.get(seg);
    }
    public static void get_extents$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.get_extents$VH.set(seg, x);
    }
    public static MemoryAddress get_extents$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_extents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_extents$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.get_extents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_extents get_extents (MemorySegment segment, MemorySession session) {
        return get_extents.ofAddress(get_extents$get(segment), session);
    }
    static final FunctionDescriptor get_position$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_position$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.get_position$FUNC
    );
    public interface get_position {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3);
        static MemorySegment allocate(get_position fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_position.class, fi, _AtkComponentIface.get_position$FUNC, session);
        }
        static get_position ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3) -> {
                try {
                    _AtkComponentIface.get_position$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_position"));
    public static VarHandle get_position$VH() {
        return _AtkComponentIface.get_position$VH;
    }
    public static MemoryAddress get_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_position$VH.get(seg);
    }
    public static void get_position$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.get_position$VH.set(seg, x);
    }
    public static MemoryAddress get_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_position$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.get_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_position get_position (MemorySegment segment, MemorySession session) {
        return get_position.ofAddress(get_position$get(segment), session);
    }
    static final FunctionDescriptor get_size$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_size$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.get_size$FUNC
    );
    public interface get_size {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(get_size fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_size.class, fi, _AtkComponentIface.get_size$FUNC, session);
        }
        static get_size ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _AtkComponentIface.get_size$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_size"));
    public static VarHandle get_size$VH() {
        return _AtkComponentIface.get_size$VH;
    }
    public static MemoryAddress get_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_size$VH.get(seg);
    }
    public static void get_size$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.get_size$VH.set(seg, x);
    }
    public static MemoryAddress get_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_size$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.get_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_size get_size (MemorySegment segment, MemorySession session) {
        return get_size.ofAddress(get_size$get(segment), session);
    }
    static final FunctionDescriptor grab_focus$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle grab_focus$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.grab_focus$FUNC
    );
    public interface grab_focus {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(grab_focus fi, MemorySession session) {
            return RuntimeHelper.upcallStub(grab_focus.class, fi, _AtkComponentIface.grab_focus$FUNC, session);
        }
        static grab_focus ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkComponentIface.grab_focus$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle grab_focus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("grab_focus"));
    public static VarHandle grab_focus$VH() {
        return _AtkComponentIface.grab_focus$VH;
    }
    public static MemoryAddress grab_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.grab_focus$VH.get(seg);
    }
    public static void grab_focus$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.grab_focus$VH.set(seg, x);
    }
    public static MemoryAddress grab_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.grab_focus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grab_focus$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.grab_focus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static grab_focus grab_focus (MemorySegment segment, MemorySession session) {
        return grab_focus.ofAddress(grab_focus$get(segment), session);
    }
    static final FunctionDescriptor remove_focus_handler$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_focus_handler$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.remove_focus_handler$FUNC
    );
    public interface remove_focus_handler {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(remove_focus_handler fi, MemorySession session) {
            return RuntimeHelper.upcallStub(remove_focus_handler.class, fi, _AtkComponentIface.remove_focus_handler$FUNC, session);
        }
        static remove_focus_handler ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _AtkComponentIface.remove_focus_handler$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_focus_handler$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_focus_handler"));
    public static VarHandle remove_focus_handler$VH() {
        return _AtkComponentIface.remove_focus_handler$VH;
    }
    public static MemoryAddress remove_focus_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.remove_focus_handler$VH.get(seg);
    }
    public static void remove_focus_handler$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.remove_focus_handler$VH.set(seg, x);
    }
    public static MemoryAddress remove_focus_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.remove_focus_handler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_focus_handler$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.remove_focus_handler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_focus_handler remove_focus_handler (MemorySegment segment, MemorySession session) {
        return remove_focus_handler.ofAddress(remove_focus_handler$get(segment), session);
    }
    static final FunctionDescriptor set_extents$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_extents$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.set_extents$FUNC
    );
    public interface set_extents {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3, int _x4, int _x5);
        static MemorySegment allocate(set_extents fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_extents.class, fi, _AtkComponentIface.set_extents$FUNC, session);
        }
        static set_extents ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3, int __x4, int __x5) -> {
                try {
                    return (int)_AtkComponentIface.set_extents$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_extents$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_extents"));
    public static VarHandle set_extents$VH() {
        return _AtkComponentIface.set_extents$VH;
    }
    public static MemoryAddress set_extents$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.set_extents$VH.get(seg);
    }
    public static void set_extents$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.set_extents$VH.set(seg, x);
    }
    public static MemoryAddress set_extents$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.set_extents$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_extents$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.set_extents$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_extents set_extents (MemorySegment segment, MemorySession session) {
        return set_extents.ofAddress(set_extents$get(segment), session);
    }
    static final FunctionDescriptor set_position$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_position$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.set_position$FUNC
    );
    public interface set_position {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(set_position fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_position.class, fi, _AtkComponentIface.set_position$FUNC, session);
        }
        static set_position ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)_AtkComponentIface.set_position$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_position"));
    public static VarHandle set_position$VH() {
        return _AtkComponentIface.set_position$VH;
    }
    public static MemoryAddress set_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.set_position$VH.get(seg);
    }
    public static void set_position$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.set_position$VH.set(seg, x);
    }
    public static MemoryAddress set_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.set_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_position$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.set_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_position set_position (MemorySegment segment, MemorySession session) {
        return set_position.ofAddress(set_position$get(segment), session);
    }
    static final FunctionDescriptor set_size$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_size$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.set_size$FUNC
    );
    public interface set_size {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(set_size fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_size.class, fi, _AtkComponentIface.set_size$FUNC, session);
        }
        static set_size ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    return (int)_AtkComponentIface.set_size$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_size"));
    public static VarHandle set_size$VH() {
        return _AtkComponentIface.set_size$VH;
    }
    public static MemoryAddress set_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.set_size$VH.get(seg);
    }
    public static void set_size$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.set_size$VH.set(seg, x);
    }
    public static MemoryAddress set_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.set_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_size$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.set_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_size set_size (MemorySegment segment, MemorySession session) {
        return set_size.ofAddress(set_size$get(segment), session);
    }
    static final FunctionDescriptor get_layer$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_layer$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.get_layer$FUNC
    );
    public interface get_layer {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_layer fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_layer.class, fi, _AtkComponentIface.get_layer$FUNC, session);
        }
        static get_layer ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkComponentIface.get_layer$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_layer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_layer"));
    public static VarHandle get_layer$VH() {
        return _AtkComponentIface.get_layer$VH;
    }
    public static MemoryAddress get_layer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_layer$VH.get(seg);
    }
    public static void get_layer$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.get_layer$VH.set(seg, x);
    }
    public static MemoryAddress get_layer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_layer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_layer$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.get_layer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_layer get_layer (MemorySegment segment, MemorySession session) {
        return get_layer.ofAddress(get_layer$get(segment), session);
    }
    static final FunctionDescriptor get_mdi_zorder$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_mdi_zorder$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.get_mdi_zorder$FUNC
    );
    public interface get_mdi_zorder {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_mdi_zorder fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_mdi_zorder.class, fi, _AtkComponentIface.get_mdi_zorder$FUNC, session);
        }
        static get_mdi_zorder ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkComponentIface.get_mdi_zorder$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_mdi_zorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_mdi_zorder"));
    public static VarHandle get_mdi_zorder$VH() {
        return _AtkComponentIface.get_mdi_zorder$VH;
    }
    public static MemoryAddress get_mdi_zorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_mdi_zorder$VH.get(seg);
    }
    public static void get_mdi_zorder$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.get_mdi_zorder$VH.set(seg, x);
    }
    public static MemoryAddress get_mdi_zorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_mdi_zorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mdi_zorder$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.get_mdi_zorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mdi_zorder get_mdi_zorder (MemorySegment segment, MemorySession session) {
        return get_mdi_zorder.ofAddress(get_mdi_zorder$get(segment), session);
    }
    static final FunctionDescriptor bounds_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle bounds_changed$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.bounds_changed$FUNC
    );
    public interface bounds_changed {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(bounds_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(bounds_changed.class, fi, _AtkComponentIface.bounds_changed$FUNC, session);
        }
        static bounds_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkComponentIface.bounds_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle bounds_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("bounds_changed"));
    public static VarHandle bounds_changed$VH() {
        return _AtkComponentIface.bounds_changed$VH;
    }
    public static MemoryAddress bounds_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.bounds_changed$VH.get(seg);
    }
    public static void bounds_changed$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.bounds_changed$VH.set(seg, x);
    }
    public static MemoryAddress bounds_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.bounds_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void bounds_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.bounds_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static bounds_changed bounds_changed (MemorySegment segment, MemorySession session) {
        return bounds_changed.ofAddress(bounds_changed$get(segment), session);
    }
    static final FunctionDescriptor get_alpha$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_alpha$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.get_alpha$FUNC
    );
    public interface get_alpha {

        double apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_alpha fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_alpha.class, fi, _AtkComponentIface.get_alpha$FUNC, session);
        }
        static get_alpha ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (double)_AtkComponentIface.get_alpha$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_alpha$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_alpha"));
    public static VarHandle get_alpha$VH() {
        return _AtkComponentIface.get_alpha$VH;
    }
    public static MemoryAddress get_alpha$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_alpha$VH.get(seg);
    }
    public static void get_alpha$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.get_alpha$VH.set(seg, x);
    }
    public static MemoryAddress get_alpha$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.get_alpha$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_alpha$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.get_alpha$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_alpha get_alpha (MemorySegment segment, MemorySession session) {
        return get_alpha.ofAddress(get_alpha$get(segment), session);
    }
    static final FunctionDescriptor scroll_to$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle scroll_to$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.scroll_to$FUNC
    );
    public interface scroll_to {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(scroll_to fi, MemorySession session) {
            return RuntimeHelper.upcallStub(scroll_to.class, fi, _AtkComponentIface.scroll_to$FUNC, session);
        }
        static scroll_to ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_AtkComponentIface.scroll_to$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle scroll_to$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("scroll_to"));
    public static VarHandle scroll_to$VH() {
        return _AtkComponentIface.scroll_to$VH;
    }
    public static MemoryAddress scroll_to$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.scroll_to$VH.get(seg);
    }
    public static void scroll_to$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.scroll_to$VH.set(seg, x);
    }
    public static MemoryAddress scroll_to$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.scroll_to$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void scroll_to$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.scroll_to$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static scroll_to scroll_to (MemorySegment segment, MemorySession session) {
        return scroll_to.ofAddress(scroll_to$get(segment), session);
    }
    static final FunctionDescriptor scroll_to_point$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle scroll_to_point$MH = RuntimeHelper.downcallHandle(
        _AtkComponentIface.scroll_to_point$FUNC
    );
    public interface scroll_to_point {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3);
        static MemorySegment allocate(scroll_to_point fi, MemorySession session) {
            return RuntimeHelper.upcallStub(scroll_to_point.class, fi, _AtkComponentIface.scroll_to_point$FUNC, session);
        }
        static scroll_to_point ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3) -> {
                try {
                    return (int)_AtkComponentIface.scroll_to_point$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle scroll_to_point$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("scroll_to_point"));
    public static VarHandle scroll_to_point$VH() {
        return _AtkComponentIface.scroll_to_point$VH;
    }
    public static MemoryAddress scroll_to_point$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.scroll_to_point$VH.get(seg);
    }
    public static void scroll_to_point$set( MemorySegment seg, MemoryAddress x) {
        _AtkComponentIface.scroll_to_point$VH.set(seg, x);
    }
    public static MemoryAddress scroll_to_point$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkComponentIface.scroll_to_point$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void scroll_to_point$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkComponentIface.scroll_to_point$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static scroll_to_point scroll_to_point (MemorySegment segment, MemorySession session) {
        return scroll_to_point.ofAddress(scroll_to_point$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


