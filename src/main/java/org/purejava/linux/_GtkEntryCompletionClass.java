// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkEntryCompletionClass {
 *     GObjectClass parent_class;
 *     gboolean (*match_selected)(GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*);
 *     void (*action_activated)(GtkEntryCompletion*,gint);
 *     gboolean (*insert_prefix)(GtkEntryCompletion*,const gchar*);
 *     gboolean (*cursor_on_match)(GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*);
 *     void (*no_matches)(GtkEntryCompletion*);
 *     void (*_gtk_reserved0)();
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 * };
 * }
 */
public class _GtkEntryCompletionClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("match_selected"),
        Constants$root.C_POINTER$LAYOUT.withName("action_activated"),
        Constants$root.C_POINTER$LAYOUT.withName("insert_prefix"),
        Constants$root.C_POINTER$LAYOUT.withName("cursor_on_match"),
        Constants$root.C_POINTER$LAYOUT.withName("no_matches"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved0"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2")
    ).withName("_GtkEntryCompletionClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkEntryCompletionClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor match_selected$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor match_selected_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle match_selected_UP$MH = RuntimeHelper.upcallHandle(match_selected.class, "apply", _GtkEntryCompletionClass.match_selected_UP$FUNC);
    static final FunctionDescriptor match_selected_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle match_selected_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEntryCompletionClass.match_selected_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*match_selected)(GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*);
     * }
     */
    public interface match_selected {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(match_selected fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEntryCompletionClass.match_selected_UP$MH, fi, _GtkEntryCompletionClass.match_selected$FUNC, scope);
        }
        static match_selected ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)_GtkEntryCompletionClass.match_selected_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle match_selected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("match_selected"));
    public static VarHandle match_selected$VH() {
        return _GtkEntryCompletionClass.match_selected$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*match_selected)(GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*);
     * }
     */
    public static MemorySegment match_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass.match_selected$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*match_selected)(GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*);
     * }
     */
    public static void match_selected$set(MemorySegment seg, MemorySegment x) {
        _GtkEntryCompletionClass.match_selected$VH.set(seg, x);
    }
    public static MemorySegment match_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass.match_selected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void match_selected$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEntryCompletionClass.match_selected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static match_selected match_selected(MemorySegment segment, SegmentScope scope) {
        return match_selected.ofAddress(match_selected$get(segment), scope);
    }
    static final FunctionDescriptor action_activated$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor action_activated_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle action_activated_UP$MH = RuntimeHelper.upcallHandle(action_activated.class, "apply", _GtkEntryCompletionClass.action_activated_UP$FUNC);
    static final FunctionDescriptor action_activated_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle action_activated_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEntryCompletionClass.action_activated_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*action_activated)(GtkEntryCompletion*,gint);
     * }
     */
    public interface action_activated {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(action_activated fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEntryCompletionClass.action_activated_UP$MH, fi, _GtkEntryCompletionClass.action_activated$FUNC, scope);
        }
        static action_activated ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _GtkEntryCompletionClass.action_activated_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle action_activated$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("action_activated"));
    public static VarHandle action_activated$VH() {
        return _GtkEntryCompletionClass.action_activated$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*action_activated)(GtkEntryCompletion*,gint);
     * }
     */
    public static MemorySegment action_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass.action_activated$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*action_activated)(GtkEntryCompletion*,gint);
     * }
     */
    public static void action_activated$set(MemorySegment seg, MemorySegment x) {
        _GtkEntryCompletionClass.action_activated$VH.set(seg, x);
    }
    public static MemorySegment action_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass.action_activated$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void action_activated$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEntryCompletionClass.action_activated$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static action_activated action_activated(MemorySegment segment, SegmentScope scope) {
        return action_activated.ofAddress(action_activated$get(segment), scope);
    }
    static final FunctionDescriptor insert_prefix$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor insert_prefix_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insert_prefix_UP$MH = RuntimeHelper.upcallHandle(insert_prefix.class, "apply", _GtkEntryCompletionClass.insert_prefix_UP$FUNC);
    static final FunctionDescriptor insert_prefix_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insert_prefix_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEntryCompletionClass.insert_prefix_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*insert_prefix)(GtkEntryCompletion*,const gchar*);
     * }
     */
    public interface insert_prefix {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1);
        static MemorySegment allocate(insert_prefix fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEntryCompletionClass.insert_prefix_UP$MH, fi, _GtkEntryCompletionClass.insert_prefix$FUNC, scope);
        }
        static insert_prefix ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1) -> {
                try {
                    return (int)_GtkEntryCompletionClass.insert_prefix_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insert_prefix$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insert_prefix"));
    public static VarHandle insert_prefix$VH() {
        return _GtkEntryCompletionClass.insert_prefix$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*insert_prefix)(GtkEntryCompletion*,const gchar*);
     * }
     */
    public static MemorySegment insert_prefix$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass.insert_prefix$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*insert_prefix)(GtkEntryCompletion*,const gchar*);
     * }
     */
    public static void insert_prefix$set(MemorySegment seg, MemorySegment x) {
        _GtkEntryCompletionClass.insert_prefix$VH.set(seg, x);
    }
    public static MemorySegment insert_prefix$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass.insert_prefix$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_prefix$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEntryCompletionClass.insert_prefix$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_prefix insert_prefix(MemorySegment segment, SegmentScope scope) {
        return insert_prefix.ofAddress(insert_prefix$get(segment), scope);
    }
    static final FunctionDescriptor cursor_on_match$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor cursor_on_match_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cursor_on_match_UP$MH = RuntimeHelper.upcallHandle(cursor_on_match.class, "apply", _GtkEntryCompletionClass.cursor_on_match_UP$FUNC);
    static final FunctionDescriptor cursor_on_match_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cursor_on_match_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEntryCompletionClass.cursor_on_match_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*cursor_on_match)(GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*);
     * }
     */
    public interface cursor_on_match {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(cursor_on_match fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEntryCompletionClass.cursor_on_match_UP$MH, fi, _GtkEntryCompletionClass.cursor_on_match$FUNC, scope);
        }
        static cursor_on_match ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)_GtkEntryCompletionClass.cursor_on_match_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cursor_on_match$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cursor_on_match"));
    public static VarHandle cursor_on_match$VH() {
        return _GtkEntryCompletionClass.cursor_on_match$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*cursor_on_match)(GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*);
     * }
     */
    public static MemorySegment cursor_on_match$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass.cursor_on_match$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*cursor_on_match)(GtkEntryCompletion*,GtkTreeModel*,GtkTreeIter*);
     * }
     */
    public static void cursor_on_match$set(MemorySegment seg, MemorySegment x) {
        _GtkEntryCompletionClass.cursor_on_match$VH.set(seg, x);
    }
    public static MemorySegment cursor_on_match$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass.cursor_on_match$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cursor_on_match$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEntryCompletionClass.cursor_on_match$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cursor_on_match cursor_on_match(MemorySegment segment, SegmentScope scope) {
        return cursor_on_match.ofAddress(cursor_on_match$get(segment), scope);
    }
    static final FunctionDescriptor no_matches$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor no_matches_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle no_matches_UP$MH = RuntimeHelper.upcallHandle(no_matches.class, "apply", _GtkEntryCompletionClass.no_matches_UP$FUNC);
    static final FunctionDescriptor no_matches_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle no_matches_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEntryCompletionClass.no_matches_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*no_matches)(GtkEntryCompletion*);
     * }
     */
    public interface no_matches {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(no_matches fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEntryCompletionClass.no_matches_UP$MH, fi, _GtkEntryCompletionClass.no_matches$FUNC, scope);
        }
        static no_matches ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _GtkEntryCompletionClass.no_matches_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle no_matches$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("no_matches"));
    public static VarHandle no_matches$VH() {
        return _GtkEntryCompletionClass.no_matches$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*no_matches)(GtkEntryCompletion*);
     * }
     */
    public static MemorySegment no_matches$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass.no_matches$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*no_matches)(GtkEntryCompletion*);
     * }
     */
    public static void no_matches$set(MemorySegment seg, MemorySegment x) {
        _GtkEntryCompletionClass.no_matches$VH.set(seg, x);
    }
    public static MemorySegment no_matches$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass.no_matches$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void no_matches$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEntryCompletionClass.no_matches$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static no_matches no_matches(MemorySegment segment, SegmentScope scope) {
        return no_matches.ofAddress(no_matches$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved0$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved0_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved0_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved0.class, "apply", _GtkEntryCompletionClass._gtk_reserved0_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved0_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved0_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEntryCompletionClass._gtk_reserved0_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved0)();
     * }
     */
    public interface _gtk_reserved0 {

        void apply();
        static MemorySegment allocate(_gtk_reserved0 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEntryCompletionClass._gtk_reserved0_UP$MH, fi, _GtkEntryCompletionClass._gtk_reserved0$FUNC, scope);
        }
        static _gtk_reserved0 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkEntryCompletionClass._gtk_reserved0_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved0$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved0"));
    public static VarHandle _gtk_reserved0$VH() {
        return _GtkEntryCompletionClass._gtk_reserved0$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved0)();
     * }
     */
    public static MemorySegment _gtk_reserved0$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass._gtk_reserved0$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved0)();
     * }
     */
    public static void _gtk_reserved0$set(MemorySegment seg, MemorySegment x) {
        _GtkEntryCompletionClass._gtk_reserved0$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved0$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass._gtk_reserved0$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved0$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEntryCompletionClass._gtk_reserved0$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved0 _gtk_reserved0(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved0.ofAddress(_gtk_reserved0$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved1_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved1.class, "apply", _GtkEntryCompletionClass._gtk_reserved1_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved1_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEntryCompletionClass._gtk_reserved1_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEntryCompletionClass._gtk_reserved1_UP$MH, fi, _GtkEntryCompletionClass._gtk_reserved1$FUNC, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkEntryCompletionClass._gtk_reserved1_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkEntryCompletionClass._gtk_reserved1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass._gtk_reserved1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        _GtkEntryCompletionClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEntryCompletionClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved2_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved2.class, "apply", _GtkEntryCompletionClass._gtk_reserved2_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved2_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkEntryCompletionClass._gtk_reserved2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkEntryCompletionClass._gtk_reserved2_UP$MH, fi, _GtkEntryCompletionClass._gtk_reserved2$FUNC, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkEntryCompletionClass._gtk_reserved2_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkEntryCompletionClass._gtk_reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass._gtk_reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        _GtkEntryCompletionClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkEntryCompletionClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkEntryCompletionClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


