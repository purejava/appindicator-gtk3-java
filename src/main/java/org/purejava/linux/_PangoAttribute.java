// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PangoAttribute {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("klass"),
        Constants$root.C_INT$LAYOUT.withName("start_index"),
        Constants$root.C_INT$LAYOUT.withName("end_index")
    ).withName("_PangoAttribute");
    public static MemoryLayout $LAYOUT() {
        return _PangoAttribute.$struct$LAYOUT;
    }
    static final VarHandle klass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("klass"));
    public static VarHandle klass$VH() {
        return _PangoAttribute.klass$VH;
    }
    public static MemoryAddress klass$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoAttribute.klass$VH.get(seg);
    }
    public static void klass$set( MemorySegment seg, MemoryAddress x) {
        _PangoAttribute.klass$VH.set(seg, x);
    }
    public static MemoryAddress klass$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoAttribute.klass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void klass$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoAttribute.klass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle start_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_index"));
    public static VarHandle start_index$VH() {
        return _PangoAttribute.start_index$VH;
    }
    public static int start_index$get(MemorySegment seg) {
        return (int)_PangoAttribute.start_index$VH.get(seg);
    }
    public static void start_index$set( MemorySegment seg, int x) {
        _PangoAttribute.start_index$VH.set(seg, x);
    }
    public static int start_index$get(MemorySegment seg, long index) {
        return (int)_PangoAttribute.start_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_index$set(MemorySegment seg, long index, int x) {
        _PangoAttribute.start_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle end_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_index"));
    public static VarHandle end_index$VH() {
        return _PangoAttribute.end_index$VH;
    }
    public static int end_index$get(MemorySegment seg) {
        return (int)_PangoAttribute.end_index$VH.get(seg);
    }
    public static void end_index$set( MemorySegment seg, int x) {
        _PangoAttribute.end_index$VH.set(seg, x);
    }
    public static int end_index$get(MemorySegment seg, long index) {
        return (int)_PangoAttribute.end_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_index$set(MemorySegment seg, long index, int x) {
        _PangoAttribute.end_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


