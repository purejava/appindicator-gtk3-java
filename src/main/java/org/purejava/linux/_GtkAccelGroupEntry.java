// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkAccelGroupEntry {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("accel_key"),
            Constants$root.C_INT$LAYOUT.withName("accel_mods"),
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(16).withName("accel_flags"),
                MemoryLayout.paddingLayout(16)
            )
        ).withName("key"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("closure"),
        Constants$root.C_INT$LAYOUT.withName("accel_path_quark"),
        MemoryLayout.paddingLayout(32)
    ).withName("_GtkAccelGroupEntry");
    public static MemoryLayout $LAYOUT() {
        return _GtkAccelGroupEntry.$struct$LAYOUT;
    }
    public static MemorySegment key$slice(MemorySegment seg) {
        return seg.asSlice(0, 12);
    }
    static final VarHandle closure$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("closure"));
    public static VarHandle closure$VH() {
        return _GtkAccelGroupEntry.closure$VH;
    }
    public static MemoryAddress closure$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkAccelGroupEntry.closure$VH.get(seg);
    }
    public static void closure$set( MemorySegment seg, MemoryAddress x) {
        _GtkAccelGroupEntry.closure$VH.set(seg, x);
    }
    public static MemoryAddress closure$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkAccelGroupEntry.closure$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void closure$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkAccelGroupEntry.closure$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle accel_path_quark$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("accel_path_quark"));
    public static VarHandle accel_path_quark$VH() {
        return _GtkAccelGroupEntry.accel_path_quark$VH;
    }
    public static int accel_path_quark$get(MemorySegment seg) {
        return (int)_GtkAccelGroupEntry.accel_path_quark$VH.get(seg);
    }
    public static void accel_path_quark$set( MemorySegment seg, int x) {
        _GtkAccelGroupEntry.accel_path_quark$VH.set(seg, x);
    }
    public static int accel_path_quark$get(MemorySegment seg, long index) {
        return (int)_GtkAccelGroupEntry.accel_path_quark$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void accel_path_quark$set(MemorySegment seg, long index, int x) {
        _GtkAccelGroupEntry.accel_path_quark$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


