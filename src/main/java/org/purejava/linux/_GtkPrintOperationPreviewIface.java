// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkPrintOperationPreviewIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("ready"),
        Constants$root.C_POINTER$LAYOUT.withName("got_page_size"),
        Constants$root.C_POINTER$LAYOUT.withName("render_page"),
        Constants$root.C_POINTER$LAYOUT.withName("is_selected"),
        Constants$root.C_POINTER$LAYOUT.withName("end_preview"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved8")
    ).withName("_GtkPrintOperationPreviewIface");
    public static MemoryLayout $LAYOUT() {
        return _GtkPrintOperationPreviewIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor ready$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ready$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface.ready$FUNC
    );
    public interface ready {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(ready fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ready.class, fi, _GtkPrintOperationPreviewIface.ready$FUNC, session);
        }
        static ready ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkPrintOperationPreviewIface.ready$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ready$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ready"));
    public static VarHandle ready$VH() {
        return _GtkPrintOperationPreviewIface.ready$VH;
    }
    public static MemoryAddress ready$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface.ready$VH.get(seg);
    }
    public static void ready$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface.ready$VH.set(seg, x);
    }
    public static MemoryAddress ready$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface.ready$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ready$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface.ready$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ready ready (MemorySegment segment, MemorySession session) {
        return ready.ofAddress(ready$get(segment), session);
    }
    static final FunctionDescriptor got_page_size$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle got_page_size$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface.got_page_size$FUNC
    );
    public interface got_page_size {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(got_page_size fi, MemorySession session) {
            return RuntimeHelper.upcallStub(got_page_size.class, fi, _GtkPrintOperationPreviewIface.got_page_size$FUNC, session);
        }
        static got_page_size ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkPrintOperationPreviewIface.got_page_size$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle got_page_size$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("got_page_size"));
    public static VarHandle got_page_size$VH() {
        return _GtkPrintOperationPreviewIface.got_page_size$VH;
    }
    public static MemoryAddress got_page_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface.got_page_size$VH.get(seg);
    }
    public static void got_page_size$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface.got_page_size$VH.set(seg, x);
    }
    public static MemoryAddress got_page_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface.got_page_size$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void got_page_size$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface.got_page_size$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static got_page_size got_page_size (MemorySegment segment, MemorySession session) {
        return got_page_size.ofAddress(got_page_size$get(segment), session);
    }
    static final FunctionDescriptor render_page$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle render_page$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface.render_page$FUNC
    );
    public interface render_page {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(render_page fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_page.class, fi, _GtkPrintOperationPreviewIface.render_page$FUNC, session);
        }
        static render_page ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _GtkPrintOperationPreviewIface.render_page$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_page$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_page"));
    public static VarHandle render_page$VH() {
        return _GtkPrintOperationPreviewIface.render_page$VH;
    }
    public static MemoryAddress render_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface.render_page$VH.get(seg);
    }
    public static void render_page$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface.render_page$VH.set(seg, x);
    }
    public static MemoryAddress render_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface.render_page$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_page$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface.render_page$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_page render_page (MemorySegment segment, MemorySession session) {
        return render_page.ofAddress(render_page$get(segment), session);
    }
    static final FunctionDescriptor is_selected$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle is_selected$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface.is_selected$FUNC
    );
    public interface is_selected {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(is_selected fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_selected.class, fi, _GtkPrintOperationPreviewIface.is_selected$FUNC, session);
        }
        static is_selected ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_GtkPrintOperationPreviewIface.is_selected$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_selected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_selected"));
    public static VarHandle is_selected$VH() {
        return _GtkPrintOperationPreviewIface.is_selected$VH;
    }
    public static MemoryAddress is_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface.is_selected$VH.get(seg);
    }
    public static void is_selected$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface.is_selected$VH.set(seg, x);
    }
    public static MemoryAddress is_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface.is_selected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_selected$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface.is_selected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_selected is_selected (MemorySegment segment, MemorySession session) {
        return is_selected.ofAddress(is_selected$get(segment), session);
    }
    static final FunctionDescriptor end_preview$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle end_preview$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface.end_preview$FUNC
    );
    public interface end_preview {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(end_preview fi, MemorySession session) {
            return RuntimeHelper.upcallStub(end_preview.class, fi, _GtkPrintOperationPreviewIface.end_preview$FUNC, session);
        }
        static end_preview ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkPrintOperationPreviewIface.end_preview$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle end_preview$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_preview"));
    public static VarHandle end_preview$VH() {
        return _GtkPrintOperationPreviewIface.end_preview$VH;
    }
    public static MemoryAddress end_preview$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface.end_preview$VH.get(seg);
    }
    public static void end_preview$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface.end_preview$VH.set(seg, x);
    }
    public static MemoryAddress end_preview$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface.end_preview$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_preview$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface.end_preview$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static end_preview end_preview (MemorySegment segment, MemorySession session) {
        return end_preview.ofAddress(end_preview$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface._gtk_reserved1$FUNC
    );
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved1.class, fi, _GtkPrintOperationPreviewIface._gtk_reserved1$FUNC, session);
        }
        static _gtk_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationPreviewIface._gtk_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkPrintOperationPreviewIface._gtk_reserved1$VH;
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved1$VH.get(seg);
    }
    public static void _gtk_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface._gtk_reserved2$FUNC
    );
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved2.class, fi, _GtkPrintOperationPreviewIface._gtk_reserved2$FUNC, session);
        }
        static _gtk_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationPreviewIface._gtk_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkPrintOperationPreviewIface._gtk_reserved2$VH;
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved2$VH.get(seg);
    }
    public static void _gtk_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface._gtk_reserved3$FUNC
    );
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved3.class, fi, _GtkPrintOperationPreviewIface._gtk_reserved3$FUNC, session);
        }
        static _gtk_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationPreviewIface._gtk_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkPrintOperationPreviewIface._gtk_reserved3$VH;
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved3$VH.get(seg);
    }
    public static void _gtk_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface._gtk_reserved4$FUNC
    );
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved4.class, fi, _GtkPrintOperationPreviewIface._gtk_reserved4$FUNC, session);
        }
        static _gtk_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationPreviewIface._gtk_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkPrintOperationPreviewIface._gtk_reserved4$VH;
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved4$VH.get(seg);
    }
    public static void _gtk_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface._gtk_reserved5$FUNC
    );
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved5.class, fi, _GtkPrintOperationPreviewIface._gtk_reserved5$FUNC, session);
        }
        static _gtk_reserved5 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationPreviewIface._gtk_reserved5$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved5"));
    public static VarHandle _gtk_reserved5$VH() {
        return _GtkPrintOperationPreviewIface._gtk_reserved5$VH;
    }
    public static MemoryAddress _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved5$VH.get(seg);
    }
    public static void _gtk_reserved5$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved5$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface._gtk_reserved6$FUNC
    );
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved6.class, fi, _GtkPrintOperationPreviewIface._gtk_reserved6$FUNC, session);
        }
        static _gtk_reserved6 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationPreviewIface._gtk_reserved6$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved6"));
    public static VarHandle _gtk_reserved6$VH() {
        return _GtkPrintOperationPreviewIface._gtk_reserved6$VH;
    }
    public static MemoryAddress _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved6$VH.get(seg);
    }
    public static void _gtk_reserved6$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved6$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved7$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved7$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface._gtk_reserved7$FUNC
    );
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved7.class, fi, _GtkPrintOperationPreviewIface._gtk_reserved7$FUNC, session);
        }
        static _gtk_reserved7 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationPreviewIface._gtk_reserved7$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved7$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved7"));
    public static VarHandle _gtk_reserved7$VH() {
        return _GtkPrintOperationPreviewIface._gtk_reserved7$VH;
    }
    public static MemoryAddress _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved7$VH.get(seg);
    }
    public static void _gtk_reserved7$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved7$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved7$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved7$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved8$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved8$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationPreviewIface._gtk_reserved8$FUNC
    );
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved8.class, fi, _GtkPrintOperationPreviewIface._gtk_reserved8$FUNC, session);
        }
        static _gtk_reserved8 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationPreviewIface._gtk_reserved8$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved8$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved8"));
    public static VarHandle _gtk_reserved8$VH() {
        return _GtkPrintOperationPreviewIface._gtk_reserved8$VH;
    }
    public static MemoryAddress _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved8$VH.get(seg);
    }
    public static void _gtk_reserved8$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved8$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationPreviewIface._gtk_reserved8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationPreviewIface._gtk_reserved8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


