// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GSignalAccumulator {

    int apply(java.lang.foreign.MemoryAddress ihint, java.lang.foreign.MemoryAddress return_accu, java.lang.foreign.MemoryAddress handler_return, java.lang.foreign.MemoryAddress data);
    static MemorySegment allocate(GSignalAccumulator fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GSignalAccumulator.class, fi, constants$454.GSignalAccumulator$FUNC, session);
    }
    static GSignalAccumulator ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _ihint, java.lang.foreign.MemoryAddress _return_accu, java.lang.foreign.MemoryAddress _handler_return, java.lang.foreign.MemoryAddress _data) -> {
            try {
                return (int)constants$454.GSignalAccumulator$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_ihint, (java.lang.foreign.Addressable)_return_accu, (java.lang.foreign.Addressable)_handler_return, (java.lang.foreign.Addressable)_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


