// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
class constants$285 {

    static final FunctionDescriptor GSequenceIterCompareFunc$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle GSequenceIterCompareFunc$MH = RuntimeHelper.downcallHandle(
        constants$285.GSequenceIterCompareFunc$FUNC
    );
    static final FunctionDescriptor g_sequence_new$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_sequence_new$MH = RuntimeHelper.downcallHandle(
        "g_sequence_new",
        constants$285.g_sequence_new$FUNC
    );
    static final FunctionDescriptor g_sequence_free$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_sequence_free$MH = RuntimeHelper.downcallHandle(
        "g_sequence_free",
        constants$285.g_sequence_free$FUNC
    );
    static final FunctionDescriptor g_sequence_get_length$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_sequence_get_length$MH = RuntimeHelper.downcallHandle(
        "g_sequence_get_length",
        constants$285.g_sequence_get_length$FUNC
    );
    static final FunctionDescriptor g_sequence_foreach$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_sequence_foreach$MH = RuntimeHelper.downcallHandle(
        "g_sequence_foreach",
        constants$285.g_sequence_foreach$FUNC
    );
}


