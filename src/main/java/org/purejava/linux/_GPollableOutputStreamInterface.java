// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GPollableOutputStreamInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("can_poll"),
        Constants$root.C_POINTER$LAYOUT.withName("is_writable"),
        Constants$root.C_POINTER$LAYOUT.withName("create_source"),
        Constants$root.C_POINTER$LAYOUT.withName("write_nonblocking"),
        Constants$root.C_POINTER$LAYOUT.withName("writev_nonblocking")
    ).withName("_GPollableOutputStreamInterface");
    public static MemoryLayout $LAYOUT() {
        return _GPollableOutputStreamInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor can_poll$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_poll$MH = RuntimeHelper.downcallHandle(
        _GPollableOutputStreamInterface.can_poll$FUNC
    );
    public interface can_poll {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(can_poll fi, MemorySession session) {
            return RuntimeHelper.upcallStub(can_poll.class, fi, _GPollableOutputStreamInterface.can_poll$FUNC, session);
        }
        static can_poll ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GPollableOutputStreamInterface.can_poll$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_poll$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("can_poll"));
    public static VarHandle can_poll$VH() {
        return _GPollableOutputStreamInterface.can_poll$VH;
    }
    public static MemoryAddress can_poll$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.can_poll$VH.get(seg);
    }
    public static void can_poll$set( MemorySegment seg, MemoryAddress x) {
        _GPollableOutputStreamInterface.can_poll$VH.set(seg, x);
    }
    public static MemoryAddress can_poll$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.can_poll$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_poll$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPollableOutputStreamInterface.can_poll$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_poll can_poll (MemorySegment segment, MemorySession session) {
        return can_poll.ofAddress(can_poll$get(segment), session);
    }
    static final FunctionDescriptor is_writable$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_writable$MH = RuntimeHelper.downcallHandle(
        _GPollableOutputStreamInterface.is_writable$FUNC
    );
    public interface is_writable {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(is_writable fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_writable.class, fi, _GPollableOutputStreamInterface.is_writable$FUNC, session);
        }
        static is_writable ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GPollableOutputStreamInterface.is_writable$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_writable$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_writable"));
    public static VarHandle is_writable$VH() {
        return _GPollableOutputStreamInterface.is_writable$VH;
    }
    public static MemoryAddress is_writable$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.is_writable$VH.get(seg);
    }
    public static void is_writable$set( MemorySegment seg, MemoryAddress x) {
        _GPollableOutputStreamInterface.is_writable$VH.set(seg, x);
    }
    public static MemoryAddress is_writable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.is_writable$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_writable$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPollableOutputStreamInterface.is_writable$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_writable is_writable (MemorySegment segment, MemorySession session) {
        return is_writable.ofAddress(is_writable$get(segment), session);
    }
    static final FunctionDescriptor create_source$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_source$MH = RuntimeHelper.downcallHandle(
        _GPollableOutputStreamInterface.create_source$FUNC
    );
    public interface create_source {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(create_source fi, MemorySession session) {
            return RuntimeHelper.upcallStub(create_source.class, fi, _GPollableOutputStreamInterface.create_source$FUNC, session);
        }
        static create_source ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.create_source$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_source$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_source"));
    public static VarHandle create_source$VH() {
        return _GPollableOutputStreamInterface.create_source$VH;
    }
    public static MemoryAddress create_source$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.create_source$VH.get(seg);
    }
    public static void create_source$set( MemorySegment seg, MemoryAddress x) {
        _GPollableOutputStreamInterface.create_source$VH.set(seg, x);
    }
    public static MemoryAddress create_source$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.create_source$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_source$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPollableOutputStreamInterface.create_source$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_source create_source (MemorySegment segment, MemorySession session) {
        return create_source.ofAddress(create_source$get(segment), session);
    }
    static final FunctionDescriptor write_nonblocking$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle write_nonblocking$MH = RuntimeHelper.downcallHandle(
        _GPollableOutputStreamInterface.write_nonblocking$FUNC
    );
    public interface write_nonblocking {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(write_nonblocking fi, MemorySession session) {
            return RuntimeHelper.upcallStub(write_nonblocking.class, fi, _GPollableOutputStreamInterface.write_nonblocking$FUNC, session);
        }
        static write_nonblocking ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (long)_GPollableOutputStreamInterface.write_nonblocking$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write_nonblocking$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_nonblocking"));
    public static VarHandle write_nonblocking$VH() {
        return _GPollableOutputStreamInterface.write_nonblocking$VH;
    }
    public static MemoryAddress write_nonblocking$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.write_nonblocking$VH.get(seg);
    }
    public static void write_nonblocking$set( MemorySegment seg, MemoryAddress x) {
        _GPollableOutputStreamInterface.write_nonblocking$VH.set(seg, x);
    }
    public static MemoryAddress write_nonblocking$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.write_nonblocking$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_nonblocking$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPollableOutputStreamInterface.write_nonblocking$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_nonblocking write_nonblocking (MemorySegment segment, MemorySession session) {
        return write_nonblocking.ofAddress(write_nonblocking$get(segment), session);
    }
    static final FunctionDescriptor writev_nonblocking$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle writev_nonblocking$MH = RuntimeHelper.downcallHandle(
        _GPollableOutputStreamInterface.writev_nonblocking$FUNC
    );
    public interface writev_nonblocking {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(writev_nonblocking fi, MemorySession session) {
            return RuntimeHelper.upcallStub(writev_nonblocking.class, fi, _GPollableOutputStreamInterface.writev_nonblocking$FUNC, session);
        }
        static writev_nonblocking ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (int)_GPollableOutputStreamInterface.writev_nonblocking$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle writev_nonblocking$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("writev_nonblocking"));
    public static VarHandle writev_nonblocking$VH() {
        return _GPollableOutputStreamInterface.writev_nonblocking$VH;
    }
    public static MemoryAddress writev_nonblocking$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.writev_nonblocking$VH.get(seg);
    }
    public static void writev_nonblocking$set( MemorySegment seg, MemoryAddress x) {
        _GPollableOutputStreamInterface.writev_nonblocking$VH.set(seg, x);
    }
    public static MemoryAddress writev_nonblocking$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPollableOutputStreamInterface.writev_nonblocking$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void writev_nonblocking$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPollableOutputStreamInterface.writev_nonblocking$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static writev_nonblocking writev_nonblocking (MemorySegment segment, MemorySession session) {
        return writev_nonblocking.ofAddress(writev_nonblocking$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


