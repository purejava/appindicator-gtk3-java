// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkRcPropertyParser {

    int apply(java.lang.foreign.MemoryAddress pspec, java.lang.foreign.MemoryAddress rc_string, java.lang.foreign.MemoryAddress property_value);
    static MemorySegment allocate(GtkRcPropertyParser fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkRcPropertyParser.class, fi, constants$1373.GtkRcPropertyParser$FUNC, session);
    }
    static GtkRcPropertyParser ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _pspec, java.lang.foreign.MemoryAddress _rc_string, java.lang.foreign.MemoryAddress _property_value) -> {
            try {
                return (int)constants$1373.GtkRcPropertyParser$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_pspec, (java.lang.foreign.Addressable)_rc_string, (java.lang.foreign.Addressable)_property_value);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


