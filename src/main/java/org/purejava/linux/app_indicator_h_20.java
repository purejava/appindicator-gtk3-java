// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class app_indicator_h_20 extends app_indicator_h_19 {

    public static MethodHandle gtk_toggle_action_toggled$MH() {
        return RuntimeHelper.requireNonNull(constants$2141.gtk_toggle_action_toggled$MH,"gtk_toggle_action_toggled");
    }
    public static void gtk_toggle_action_toggled ( Addressable action) {
        var mh$ = gtk_toggle_action_toggled$MH();
        try {
            mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_set_active$MH() {
        return RuntimeHelper.requireNonNull(constants$2141.gtk_toggle_action_set_active$MH,"gtk_toggle_action_set_active");
    }
    public static void gtk_toggle_action_set_active ( Addressable action,  int is_active) {
        var mh$ = gtk_toggle_action_set_active$MH();
        try {
            mh$.invokeExact(action, is_active);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_get_active$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.gtk_toggle_action_get_active$MH,"gtk_toggle_action_get_active");
    }
    public static int gtk_toggle_action_get_active ( Addressable action) {
        var mh$ = gtk_toggle_action_get_active$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_set_draw_as_radio$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.gtk_toggle_action_set_draw_as_radio$MH,"gtk_toggle_action_set_draw_as_radio");
    }
    public static void gtk_toggle_action_set_draw_as_radio ( Addressable action,  int draw_as_radio) {
        var mh$ = gtk_toggle_action_set_draw_as_radio$MH();
        try {
            mh$.invokeExact(action, draw_as_radio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_toggle_action_get_draw_as_radio$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.gtk_toggle_action_get_draw_as_radio$MH,"gtk_toggle_action_get_draw_as_radio");
    }
    public static int gtk_toggle_action_get_draw_as_radio ( Addressable action) {
        var mh$ = gtk_toggle_action_get_draw_as_radio$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_toggle_action_set_active$MH() {
        return RuntimeHelper.requireNonNull(constants$2142._gtk_toggle_action_set_active$MH,"_gtk_toggle_action_set_active");
    }
    public static void _gtk_toggle_action_set_active ( Addressable toggle_action,  int is_active) {
        var mh$ = _gtk_toggle_action_set_active$MH();
        try {
            mh$.invokeExact(toggle_action, is_active);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.gtk_radio_action_get_type$MH,"gtk_radio_action_get_type");
    }
    public static long gtk_radio_action_get_type () {
        var mh$ = gtk_radio_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2142.gtk_radio_action_new$MH,"gtk_radio_action_new");
    }
    public static MemoryAddress gtk_radio_action_new ( Addressable name,  Addressable label,  Addressable tooltip,  Addressable stock_id,  int value) {
        var mh$ = gtk_radio_action_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, label, tooltip, stock_id, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_get_group$MH() {
        return RuntimeHelper.requireNonNull(constants$2143.gtk_radio_action_get_group$MH,"gtk_radio_action_get_group");
    }
    public static MemoryAddress gtk_radio_action_get_group ( Addressable action) {
        var mh$ = gtk_radio_action_get_group$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_set_group$MH() {
        return RuntimeHelper.requireNonNull(constants$2143.gtk_radio_action_set_group$MH,"gtk_radio_action_set_group");
    }
    public static void gtk_radio_action_set_group ( Addressable action,  Addressable group) {
        var mh$ = gtk_radio_action_set_group$MH();
        try {
            mh$.invokeExact(action, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_join_group$MH() {
        return RuntimeHelper.requireNonNull(constants$2143.gtk_radio_action_join_group$MH,"gtk_radio_action_join_group");
    }
    public static void gtk_radio_action_join_group ( Addressable action,  Addressable group_source) {
        var mh$ = gtk_radio_action_join_group$MH();
        try {
            mh$.invokeExact(action, group_source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_get_current_value$MH() {
        return RuntimeHelper.requireNonNull(constants$2143.gtk_radio_action_get_current_value$MH,"gtk_radio_action_get_current_value");
    }
    public static int gtk_radio_action_get_current_value ( Addressable action) {
        var mh$ = gtk_radio_action_get_current_value$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_radio_action_set_current_value$MH() {
        return RuntimeHelper.requireNonNull(constants$2143.gtk_radio_action_set_current_value$MH,"gtk_radio_action_set_current_value");
    }
    public static void gtk_radio_action_set_current_value ( Addressable action,  int current_value) {
        var mh$ = gtk_radio_action_set_current_value$MH();
        try {
            mh$.invokeExact(action, current_value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GTK_RC_FG() {
        return (int)1L;
    }
    public static int GTK_RC_BG() {
        return (int)2L;
    }
    public static int GTK_RC_TEXT() {
        return (int)4L;
    }
    public static int GTK_RC_BASE() {
        return (int)8L;
    }
    public static MethodHandle _gtk_rc_parse_widget_class_path$MH() {
        return RuntimeHelper.requireNonNull(constants$2143._gtk_rc_parse_widget_class_path$MH,"_gtk_rc_parse_widget_class_path");
    }
    public static MemoryAddress _gtk_rc_parse_widget_class_path ( Addressable pattern) {
        var mh$ = _gtk_rc_parse_widget_class_path$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_rc_free_widget_class_path$MH() {
        return RuntimeHelper.requireNonNull(constants$2144._gtk_rc_free_widget_class_path$MH,"_gtk_rc_free_widget_class_path");
    }
    public static void _gtk_rc_free_widget_class_path ( Addressable list) {
        var mh$ = _gtk_rc_free_widget_class_path$MH();
        try {
            mh$.invokeExact(list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_rc_match_widget_class$MH() {
        return RuntimeHelper.requireNonNull(constants$2144._gtk_rc_match_widget_class$MH,"_gtk_rc_match_widget_class");
    }
    public static int _gtk_rc_match_widget_class ( Addressable list,  int length,  Addressable path,  Addressable path_reversed) {
        var mh$ = _gtk_rc_match_widget_class$MH();
        try {
            return (int)mh$.invokeExact(list, length, path, path_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_add_default_file$MH() {
        return RuntimeHelper.requireNonNull(constants$2144.gtk_rc_add_default_file$MH,"gtk_rc_add_default_file");
    }
    public static void gtk_rc_add_default_file ( Addressable filename) {
        var mh$ = gtk_rc_add_default_file$MH();
        try {
            mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_set_default_files$MH() {
        return RuntimeHelper.requireNonNull(constants$2144.gtk_rc_set_default_files$MH,"gtk_rc_set_default_files");
    }
    public static void gtk_rc_set_default_files ( Addressable filenames) {
        var mh$ = gtk_rc_set_default_files$MH();
        try {
            mh$.invokeExact(filenames);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_default_files$MH() {
        return RuntimeHelper.requireNonNull(constants$2144.gtk_rc_get_default_files$MH,"gtk_rc_get_default_files");
    }
    public static MemoryAddress gtk_rc_get_default_files () {
        var mh$ = gtk_rc_get_default_files$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_style$MH() {
        return RuntimeHelper.requireNonNull(constants$2144.gtk_rc_get_style$MH,"gtk_rc_get_style");
    }
    public static MemoryAddress gtk_rc_get_style ( Addressable widget) {
        var mh$ = gtk_rc_get_style$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_style_by_paths$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.gtk_rc_get_style_by_paths$MH,"gtk_rc_get_style_by_paths");
    }
    public static MemoryAddress gtk_rc_get_style_by_paths ( Addressable settings,  Addressable widget_path,  Addressable class_path,  long type) {
        var mh$ = gtk_rc_get_style_by_paths$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(settings, widget_path, class_path, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_reparse_all_for_settings$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.gtk_rc_reparse_all_for_settings$MH,"gtk_rc_reparse_all_for_settings");
    }
    public static int gtk_rc_reparse_all_for_settings ( Addressable settings,  int force_load) {
        var mh$ = gtk_rc_reparse_all_for_settings$MH();
        try {
            return (int)mh$.invokeExact(settings, force_load);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_reset_styles$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.gtk_rc_reset_styles$MH,"gtk_rc_reset_styles");
    }
    public static void gtk_rc_reset_styles ( Addressable settings) {
        var mh$ = gtk_rc_reset_styles$MH();
        try {
            mh$.invokeExact(settings);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_find_pixmap_in_path$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.gtk_rc_find_pixmap_in_path$MH,"gtk_rc_find_pixmap_in_path");
    }
    public static MemoryAddress gtk_rc_find_pixmap_in_path ( Addressable settings,  Addressable scanner,  Addressable pixmap_file) {
        var mh$ = gtk_rc_find_pixmap_in_path$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(settings, scanner, pixmap_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.gtk_rc_parse$MH,"gtk_rc_parse");
    }
    public static void gtk_rc_parse ( Addressable filename) {
        var mh$ = gtk_rc_parse$MH();
        try {
            mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_string$MH() {
        return RuntimeHelper.requireNonNull(constants$2145.gtk_rc_parse_string$MH,"gtk_rc_parse_string");
    }
    public static void gtk_rc_parse_string ( Addressable rc_string) {
        var mh$ = gtk_rc_parse_string$MH();
        try {
            mh$.invokeExact(rc_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_reparse_all$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.gtk_rc_reparse_all$MH,"gtk_rc_reparse_all");
    }
    public static int gtk_rc_reparse_all () {
        var mh$ = gtk_rc_reparse_all$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_style_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.gtk_rc_style_get_type$MH,"gtk_rc_style_get_type");
    }
    public static long gtk_rc_style_get_type () {
        var mh$ = gtk_rc_style_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_style_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.gtk_rc_style_new$MH,"gtk_rc_style_new");
    }
    public static MemoryAddress gtk_rc_style_new () {
        var mh$ = gtk_rc_style_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_style_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.gtk_rc_style_copy$MH,"gtk_rc_style_copy");
    }
    public static MemoryAddress gtk_rc_style_copy ( Addressable orig) {
        var mh$ = gtk_rc_style_copy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(orig);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_find_module_in_path$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.gtk_rc_find_module_in_path$MH,"gtk_rc_find_module_in_path");
    }
    public static MemoryAddress gtk_rc_find_module_in_path ( Addressable module_file) {
        var mh$ = gtk_rc_find_module_in_path$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(module_file);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_theme_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$2146.gtk_rc_get_theme_dir$MH,"gtk_rc_get_theme_dir");
    }
    public static MemoryAddress gtk_rc_get_theme_dir () {
        var mh$ = gtk_rc_get_theme_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_module_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$2147.gtk_rc_get_module_dir$MH,"gtk_rc_get_module_dir");
    }
    public static MemoryAddress gtk_rc_get_module_dir () {
        var mh$ = gtk_rc_get_module_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_im_module_path$MH() {
        return RuntimeHelper.requireNonNull(constants$2147.gtk_rc_get_im_module_path$MH,"gtk_rc_get_im_module_path");
    }
    public static MemoryAddress gtk_rc_get_im_module_path () {
        var mh$ = gtk_rc_get_im_module_path$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_get_im_module_file$MH() {
        return RuntimeHelper.requireNonNull(constants$2147.gtk_rc_get_im_module_file$MH,"gtk_rc_get_im_module_file");
    }
    public static MemoryAddress gtk_rc_get_im_module_file () {
        var mh$ = gtk_rc_get_im_module_file$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GTK_RC_TOKEN_INVALID() {
        return (int)270L;
    }
    public static int GTK_RC_TOKEN_INCLUDE() {
        return (int)271L;
    }
    public static int GTK_RC_TOKEN_NORMAL() {
        return (int)272L;
    }
    public static int GTK_RC_TOKEN_ACTIVE() {
        return (int)273L;
    }
    public static int GTK_RC_TOKEN_PRELIGHT() {
        return (int)274L;
    }
    public static int GTK_RC_TOKEN_SELECTED() {
        return (int)275L;
    }
    public static int GTK_RC_TOKEN_INSENSITIVE() {
        return (int)276L;
    }
    public static int GTK_RC_TOKEN_FG() {
        return (int)277L;
    }
    public static int GTK_RC_TOKEN_BG() {
        return (int)278L;
    }
    public static int GTK_RC_TOKEN_TEXT() {
        return (int)279L;
    }
    public static int GTK_RC_TOKEN_BASE() {
        return (int)280L;
    }
    public static int GTK_RC_TOKEN_XTHICKNESS() {
        return (int)281L;
    }
    public static int GTK_RC_TOKEN_YTHICKNESS() {
        return (int)282L;
    }
    public static int GTK_RC_TOKEN_FONT() {
        return (int)283L;
    }
    public static int GTK_RC_TOKEN_FONTSET() {
        return (int)284L;
    }
    public static int GTK_RC_TOKEN_FONT_NAME() {
        return (int)285L;
    }
    public static int GTK_RC_TOKEN_BG_PIXMAP() {
        return (int)286L;
    }
    public static int GTK_RC_TOKEN_PIXMAP_PATH() {
        return (int)287L;
    }
    public static int GTK_RC_TOKEN_STYLE() {
        return (int)288L;
    }
    public static int GTK_RC_TOKEN_BINDING() {
        return (int)289L;
    }
    public static int GTK_RC_TOKEN_BIND() {
        return (int)290L;
    }
    public static int GTK_RC_TOKEN_WIDGET() {
        return (int)291L;
    }
    public static int GTK_RC_TOKEN_WIDGET_CLASS() {
        return (int)292L;
    }
    public static int GTK_RC_TOKEN_CLASS() {
        return (int)293L;
    }
    public static int GTK_RC_TOKEN_LOWEST() {
        return (int)294L;
    }
    public static int GTK_RC_TOKEN_GTK() {
        return (int)295L;
    }
    public static int GTK_RC_TOKEN_APPLICATION() {
        return (int)296L;
    }
    public static int GTK_RC_TOKEN_THEME() {
        return (int)297L;
    }
    public static int GTK_RC_TOKEN_RC() {
        return (int)298L;
    }
    public static int GTK_RC_TOKEN_HIGHEST() {
        return (int)299L;
    }
    public static int GTK_RC_TOKEN_ENGINE() {
        return (int)300L;
    }
    public static int GTK_RC_TOKEN_MODULE_PATH() {
        return (int)301L;
    }
    public static int GTK_RC_TOKEN_IM_MODULE_PATH() {
        return (int)302L;
    }
    public static int GTK_RC_TOKEN_IM_MODULE_FILE() {
        return (int)303L;
    }
    public static int GTK_RC_TOKEN_STOCK() {
        return (int)304L;
    }
    public static int GTK_RC_TOKEN_LTR() {
        return (int)305L;
    }
    public static int GTK_RC_TOKEN_RTL() {
        return (int)306L;
    }
    public static int GTK_RC_TOKEN_COLOR() {
        return (int)307L;
    }
    public static int GTK_RC_TOKEN_UNBIND() {
        return (int)308L;
    }
    public static int GTK_RC_TOKEN_LAST() {
        return (int)309L;
    }
    public static int GTK_PATH_PRIO_LOWEST() {
        return (int)0L;
    }
    public static int GTK_PATH_PRIO_GTK() {
        return (int)4L;
    }
    public static int GTK_PATH_PRIO_APPLICATION() {
        return (int)8L;
    }
    public static int GTK_PATH_PRIO_THEME() {
        return (int)10L;
    }
    public static int GTK_PATH_PRIO_RC() {
        return (int)12L;
    }
    public static int GTK_PATH_PRIO_HIGHEST() {
        return (int)15L;
    }
    public static int GTK_PATH_WIDGET() {
        return (int)0L;
    }
    public static int GTK_PATH_WIDGET_CLASS() {
        return (int)1L;
    }
    public static int GTK_PATH_CLASS() {
        return (int)2L;
    }
    public static MethodHandle gtk_rc_scanner_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2147.gtk_rc_scanner_new$MH,"gtk_rc_scanner_new");
    }
    public static MemoryAddress gtk_rc_scanner_new () {
        var mh$ = gtk_rc_scanner_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_color$MH() {
        return RuntimeHelper.requireNonNull(constants$2147.gtk_rc_parse_color$MH,"gtk_rc_parse_color");
    }
    public static int gtk_rc_parse_color ( Addressable scanner,  Addressable color) {
        var mh$ = gtk_rc_parse_color$MH();
        try {
            return (int)mh$.invokeExact(scanner, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_color_full$MH() {
        return RuntimeHelper.requireNonNull(constants$2147.gtk_rc_parse_color_full$MH,"gtk_rc_parse_color_full");
    }
    public static int gtk_rc_parse_color_full ( Addressable scanner,  Addressable style,  Addressable color) {
        var mh$ = gtk_rc_parse_color_full$MH();
        try {
            return (int)mh$.invokeExact(scanner, style, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_state$MH() {
        return RuntimeHelper.requireNonNull(constants$2148.gtk_rc_parse_state$MH,"gtk_rc_parse_state");
    }
    public static int gtk_rc_parse_state ( Addressable scanner,  Addressable state) {
        var mh$ = gtk_rc_parse_state$MH();
        try {
            return (int)mh$.invokeExact(scanner, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_rc_parse_priority$MH() {
        return RuntimeHelper.requireNonNull(constants$2148.gtk_rc_parse_priority$MH,"gtk_rc_parse_priority");
    }
    public static int gtk_rc_parse_priority ( Addressable scanner,  Addressable priority) {
        var mh$ = gtk_rc_parse_priority$MH();
        try {
            return (int)mh$.invokeExact(scanner, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_binding_set_add_path$MH() {
        return RuntimeHelper.requireNonNull(constants$2148.gtk_binding_set_add_path$MH,"gtk_binding_set_add_path");
    }
    public static void gtk_binding_set_add_path ( Addressable binding_set,  int path_type,  Addressable path_pattern,  int priority) {
        var mh$ = gtk_binding_set_add_path$MH();
        try {
            mh$.invokeExact(binding_set, path_type, path_pattern, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2148.gtk_recent_action_get_type$MH,"gtk_recent_action_get_type");
    }
    public static long gtk_recent_action_get_type () {
        var mh$ = gtk_recent_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2148.gtk_recent_action_new$MH,"gtk_recent_action_new");
    }
    public static MemoryAddress gtk_recent_action_new ( Addressable name,  Addressable label,  Addressable tooltip,  Addressable stock_id) {
        var mh$ = gtk_recent_action_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, label, tooltip, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_new_for_manager$MH() {
        return RuntimeHelper.requireNonNull(constants$2148.gtk_recent_action_new_for_manager$MH,"gtk_recent_action_new_for_manager");
    }
    public static MemoryAddress gtk_recent_action_new_for_manager ( Addressable name,  Addressable label,  Addressable tooltip,  Addressable stock_id,  Addressable manager) {
        var mh$ = gtk_recent_action_new_for_manager$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, label, tooltip, stock_id, manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_get_show_numbers$MH() {
        return RuntimeHelper.requireNonNull(constants$2149.gtk_recent_action_get_show_numbers$MH,"gtk_recent_action_get_show_numbers");
    }
    public static int gtk_recent_action_get_show_numbers ( Addressable action) {
        var mh$ = gtk_recent_action_get_show_numbers$MH();
        try {
            return (int)mh$.invokeExact(action);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_recent_action_set_show_numbers$MH() {
        return RuntimeHelper.requireNonNull(constants$2149.gtk_recent_action_set_show_numbers$MH,"gtk_recent_action_set_show_numbers");
    }
    public static void gtk_recent_action_set_show_numbers ( Addressable action,  int show_numbers) {
        var mh$ = gtk_recent_action_set_show_numbers$MH();
        try {
            mh$.invokeExact(action, show_numbers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2149.gtk_status_icon_get_type$MH,"gtk_status_icon_get_type");
    }
    public static long gtk_status_icon_get_type () {
        var mh$ = gtk_status_icon_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2149.gtk_status_icon_new$MH,"gtk_status_icon_new");
    }
    public static MemoryAddress gtk_status_icon_new () {
        var mh$ = gtk_status_icon_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$2149.gtk_status_icon_new_from_pixbuf$MH,"gtk_status_icon_new_from_pixbuf");
    }
    public static MemoryAddress gtk_status_icon_new_from_pixbuf ( Addressable pixbuf) {
        var mh$ = gtk_status_icon_new_from_pixbuf$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pixbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$2149.gtk_status_icon_new_from_file$MH,"gtk_status_icon_new_from_file");
    }
    public static MemoryAddress gtk_status_icon_new_from_file ( Addressable filename) {
        var mh$ = gtk_status_icon_new_from_file$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$2150.gtk_status_icon_new_from_stock$MH,"gtk_status_icon_new_from_stock");
    }
    public static MemoryAddress gtk_status_icon_new_from_stock ( Addressable stock_id) {
        var mh$ = gtk_status_icon_new_from_stock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$2150.gtk_status_icon_new_from_icon_name$MH,"gtk_status_icon_new_from_icon_name");
    }
    public static MemoryAddress gtk_status_icon_new_from_icon_name ( Addressable icon_name) {
        var mh$ = gtk_status_icon_new_from_icon_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(icon_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_new_from_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$2150.gtk_status_icon_new_from_gicon$MH,"gtk_status_icon_new_from_gicon");
    }
    public static MemoryAddress gtk_status_icon_new_from_gicon ( Addressable icon) {
        var mh$ = gtk_status_icon_new_from_gicon$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$2150.gtk_status_icon_set_from_pixbuf$MH,"gtk_status_icon_set_from_pixbuf");
    }
    public static void gtk_status_icon_set_from_pixbuf ( Addressable status_icon,  Addressable pixbuf) {
        var mh$ = gtk_status_icon_set_from_pixbuf$MH();
        try {
            mh$.invokeExact(status_icon, pixbuf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$2150.gtk_status_icon_set_from_file$MH,"gtk_status_icon_set_from_file");
    }
    public static void gtk_status_icon_set_from_file ( Addressable status_icon,  Addressable filename) {
        var mh$ = gtk_status_icon_set_from_file$MH();
        try {
            mh$.invokeExact(status_icon, filename);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$2150.gtk_status_icon_set_from_stock$MH,"gtk_status_icon_set_from_stock");
    }
    public static void gtk_status_icon_set_from_stock ( Addressable status_icon,  Addressable stock_id) {
        var mh$ = gtk_status_icon_set_from_stock$MH();
        try {
            mh$.invokeExact(status_icon, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$2151.gtk_status_icon_set_from_icon_name$MH,"gtk_status_icon_set_from_icon_name");
    }
    public static void gtk_status_icon_set_from_icon_name ( Addressable status_icon,  Addressable icon_name) {
        var mh$ = gtk_status_icon_set_from_icon_name$MH();
        try {
            mh$.invokeExact(status_icon, icon_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_from_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$2151.gtk_status_icon_set_from_gicon$MH,"gtk_status_icon_set_from_gicon");
    }
    public static void gtk_status_icon_set_from_gicon ( Addressable status_icon,  Addressable icon) {
        var mh$ = gtk_status_icon_set_from_gicon$MH();
        try {
            mh$.invokeExact(status_icon, icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_storage_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2151.gtk_status_icon_get_storage_type$MH,"gtk_status_icon_get_storage_type");
    }
    public static int gtk_status_icon_get_storage_type ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_storage_type$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$2151.gtk_status_icon_get_pixbuf$MH,"gtk_status_icon_get_pixbuf");
    }
    public static MemoryAddress gtk_status_icon_get_pixbuf ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_pixbuf$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_stock$MH() {
        return RuntimeHelper.requireNonNull(constants$2151.gtk_status_icon_get_stock$MH,"gtk_status_icon_get_stock");
    }
    public static MemoryAddress gtk_status_icon_get_stock ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_stock$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_icon_name$MH() {
        return RuntimeHelper.requireNonNull(constants$2151.gtk_status_icon_get_icon_name$MH,"gtk_status_icon_get_icon_name");
    }
    public static MemoryAddress gtk_status_icon_get_icon_name ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_icon_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_gicon$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.gtk_status_icon_get_gicon$MH,"gtk_status_icon_get_gicon");
    }
    public static MemoryAddress gtk_status_icon_get_gicon ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_gicon$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.gtk_status_icon_get_size$MH,"gtk_status_icon_get_size");
    }
    public static int gtk_status_icon_get_size ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_size$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.gtk_status_icon_set_screen$MH,"gtk_status_icon_set_screen");
    }
    public static void gtk_status_icon_set_screen ( Addressable status_icon,  Addressable screen) {
        var mh$ = gtk_status_icon_set_screen$MH();
        try {
            mh$.invokeExact(status_icon, screen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.gtk_status_icon_get_screen$MH,"gtk_status_icon_get_screen");
    }
    public static MemoryAddress gtk_status_icon_get_screen ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_screen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_has_tooltip$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.gtk_status_icon_set_has_tooltip$MH,"gtk_status_icon_set_has_tooltip");
    }
    public static void gtk_status_icon_set_has_tooltip ( Addressable status_icon,  int has_tooltip) {
        var mh$ = gtk_status_icon_set_has_tooltip$MH();
        try {
            mh$.invokeExact(status_icon, has_tooltip);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_tooltip_text$MH() {
        return RuntimeHelper.requireNonNull(constants$2152.gtk_status_icon_set_tooltip_text$MH,"gtk_status_icon_set_tooltip_text");
    }
    public static void gtk_status_icon_set_tooltip_text ( Addressable status_icon,  Addressable text) {
        var mh$ = gtk_status_icon_set_tooltip_text$MH();
        try {
            mh$.invokeExact(status_icon, text);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_tooltip_markup$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.gtk_status_icon_set_tooltip_markup$MH,"gtk_status_icon_set_tooltip_markup");
    }
    public static void gtk_status_icon_set_tooltip_markup ( Addressable status_icon,  Addressable markup) {
        var mh$ = gtk_status_icon_set_tooltip_markup$MH();
        try {
            mh$.invokeExact(status_icon, markup);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_title$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.gtk_status_icon_set_title$MH,"gtk_status_icon_set_title");
    }
    public static void gtk_status_icon_set_title ( Addressable status_icon,  Addressable title) {
        var mh$ = gtk_status_icon_set_title$MH();
        try {
            mh$.invokeExact(status_icon, title);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_title$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.gtk_status_icon_get_title$MH,"gtk_status_icon_get_title");
    }
    public static MemoryAddress gtk_status_icon_get_title ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_title$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_name$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.gtk_status_icon_set_name$MH,"gtk_status_icon_set_name");
    }
    public static void gtk_status_icon_set_name ( Addressable status_icon,  Addressable name) {
        var mh$ = gtk_status_icon_set_name$MH();
        try {
            mh$.invokeExact(status_icon, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_set_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.gtk_status_icon_set_visible$MH,"gtk_status_icon_set_visible");
    }
    public static void gtk_status_icon_set_visible ( Addressable status_icon,  int visible) {
        var mh$ = gtk_status_icon_set_visible$MH();
        try {
            mh$.invokeExact(status_icon, visible);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_visible$MH() {
        return RuntimeHelper.requireNonNull(constants$2153.gtk_status_icon_get_visible$MH,"gtk_status_icon_get_visible");
    }
    public static int gtk_status_icon_get_visible ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_visible$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_is_embedded$MH() {
        return RuntimeHelper.requireNonNull(constants$2154.gtk_status_icon_is_embedded$MH,"gtk_status_icon_is_embedded");
    }
    public static int gtk_status_icon_is_embedded ( Addressable status_icon) {
        var mh$ = gtk_status_icon_is_embedded$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_position_menu$MH() {
        return RuntimeHelper.requireNonNull(constants$2154.gtk_status_icon_position_menu$MH,"gtk_status_icon_position_menu");
    }
    public static void gtk_status_icon_position_menu ( Addressable menu,  Addressable x,  Addressable y,  Addressable push_in,  Addressable user_data) {
        var mh$ = gtk_status_icon_position_menu$MH();
        try {
            mh$.invokeExact(menu, x, y, push_in, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_geometry$MH() {
        return RuntimeHelper.requireNonNull(constants$2154.gtk_status_icon_get_geometry$MH,"gtk_status_icon_get_geometry");
    }
    public static int gtk_status_icon_get_geometry ( Addressable status_icon,  Addressable screen,  Addressable area,  Addressable orientation) {
        var mh$ = gtk_status_icon_get_geometry$MH();
        try {
            return (int)mh$.invokeExact(status_icon, screen, area, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_has_tooltip$MH() {
        return RuntimeHelper.requireNonNull(constants$2154.gtk_status_icon_get_has_tooltip$MH,"gtk_status_icon_get_has_tooltip");
    }
    public static int gtk_status_icon_get_has_tooltip ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_has_tooltip$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_tooltip_text$MH() {
        return RuntimeHelper.requireNonNull(constants$2154.gtk_status_icon_get_tooltip_text$MH,"gtk_status_icon_get_tooltip_text");
    }
    public static MemoryAddress gtk_status_icon_get_tooltip_text ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_tooltip_text$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_tooltip_markup$MH() {
        return RuntimeHelper.requireNonNull(constants$2154.gtk_status_icon_get_tooltip_markup$MH,"gtk_status_icon_get_tooltip_markup");
    }
    public static MemoryAddress gtk_status_icon_get_tooltip_markup ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_tooltip_markup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_status_icon_get_x11_window_id$MH() {
        return RuntimeHelper.requireNonNull(constants$2155.gtk_status_icon_get_x11_window_id$MH,"gtk_status_icon_get_x11_window_id");
    }
    public static int gtk_status_icon_get_x11_window_id ( Addressable status_icon) {
        var mh$ = gtk_status_icon_get_x11_window_id$MH();
        try {
            return (int)mh$.invokeExact(status_icon);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GTK_EXPANDER_COLLAPSED() {
        return (int)0L;
    }
    public static int GTK_EXPANDER_SEMI_COLLAPSED() {
        return (int)1L;
    }
    public static int GTK_EXPANDER_SEMI_EXPANDED() {
        return (int)2L;
    }
    public static int GTK_EXPANDER_EXPANDED() {
        return (int)3L;
    }
    public static MethodHandle gtk_style_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2155.gtk_style_get_type$MH,"gtk_style_get_type");
    }
    public static long gtk_style_get_type () {
        var mh$ = gtk_style_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2155.gtk_style_new$MH,"gtk_style_new");
    }
    public static MemoryAddress gtk_style_new () {
        var mh$ = gtk_style_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$2155.gtk_style_copy$MH,"gtk_style_copy");
    }
    public static MemoryAddress gtk_style_copy ( Addressable style) {
        var mh$ = gtk_style_copy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_attach$MH() {
        return RuntimeHelper.requireNonNull(constants$2155.gtk_style_attach$MH,"gtk_style_attach");
    }
    public static MemoryAddress gtk_style_attach ( Addressable style,  Addressable window) {
        var mh$ = gtk_style_attach$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(style, window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_detach$MH() {
        return RuntimeHelper.requireNonNull(constants$2155.gtk_style_detach$MH,"gtk_style_detach");
    }
    public static void gtk_style_detach ( Addressable style) {
        var mh$ = gtk_style_detach$MH();
        try {
            mh$.invokeExact(style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_set_background$MH() {
        return RuntimeHelper.requireNonNull(constants$2156.gtk_style_set_background$MH,"gtk_style_set_background");
    }
    public static void gtk_style_set_background ( Addressable style,  Addressable window,  int state_type) {
        var mh$ = gtk_style_set_background$MH();
        try {
            mh$.invokeExact(style, window, state_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_apply_default_background$MH() {
        return RuntimeHelper.requireNonNull(constants$2156.gtk_style_apply_default_background$MH,"gtk_style_apply_default_background");
    }
    public static void gtk_style_apply_default_background ( Addressable style,  Addressable cr,  Addressable window,  int state_type,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_style_apply_default_background$MH();
        try {
            mh$.invokeExact(style, cr, window, state_type, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_lookup_icon_set$MH() {
        return RuntimeHelper.requireNonNull(constants$2156.gtk_style_lookup_icon_set$MH,"gtk_style_lookup_icon_set");
    }
    public static MemoryAddress gtk_style_lookup_icon_set ( Addressable style,  Addressable stock_id) {
        var mh$ = gtk_style_lookup_icon_set$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(style, stock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_lookup_color$MH() {
        return RuntimeHelper.requireNonNull(constants$2156.gtk_style_lookup_color$MH,"gtk_style_lookup_color");
    }
    public static int gtk_style_lookup_color ( Addressable style,  Addressable color_name,  Addressable color) {
        var mh$ = gtk_style_lookup_color$MH();
        try {
            return (int)mh$.invokeExact(style, color_name, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_render_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$2156.gtk_style_render_icon$MH,"gtk_style_render_icon");
    }
    public static MemoryAddress gtk_style_render_icon ( Addressable style,  Addressable source,  int direction,  int state,  int size,  Addressable widget,  Addressable detail) {
        var mh$ = gtk_style_render_icon$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(style, source, direction, state, size, widget, detail);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_hline$MH() {
        return RuntimeHelper.requireNonNull(constants$2156.gtk_paint_hline$MH,"gtk_paint_hline");
    }
    public static void gtk_paint_hline ( Addressable style,  Addressable cr,  int state_type,  Addressable widget,  Addressable detail,  int x1,  int x2,  int y) {
        var mh$ = gtk_paint_hline$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, x1, x2, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_vline$MH() {
        return RuntimeHelper.requireNonNull(constants$2157.gtk_paint_vline$MH,"gtk_paint_vline");
    }
    public static void gtk_paint_vline ( Addressable style,  Addressable cr,  int state_type,  Addressable widget,  Addressable detail,  int y1_,  int y2_,  int x) {
        var mh$ = gtk_paint_vline$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, y1_, y2_, x);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_shadow$MH() {
        return RuntimeHelper.requireNonNull(constants$2157.gtk_paint_shadow$MH,"gtk_paint_shadow");
    }
    public static void gtk_paint_shadow ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_shadow$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_arrow$MH() {
        return RuntimeHelper.requireNonNull(constants$2157.gtk_paint_arrow$MH,"gtk_paint_arrow");
    }
    public static void gtk_paint_arrow ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int arrow_type,  int fill,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_arrow$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, arrow_type, fill, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_diamond$MH() {
        return RuntimeHelper.requireNonNull(constants$2157.gtk_paint_diamond$MH,"gtk_paint_diamond");
    }
    public static void gtk_paint_diamond ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_diamond$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_box$MH() {
        return RuntimeHelper.requireNonNull(constants$2157.gtk_paint_box$MH,"gtk_paint_box");
    }
    public static void gtk_paint_box ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_box$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_flat_box$MH() {
        return RuntimeHelper.requireNonNull(constants$2157.gtk_paint_flat_box$MH,"gtk_paint_flat_box");
    }
    public static void gtk_paint_flat_box ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_flat_box$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_check$MH() {
        return RuntimeHelper.requireNonNull(constants$2158.gtk_paint_check$MH,"gtk_paint_check");
    }
    public static void gtk_paint_check ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_check$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_option$MH() {
        return RuntimeHelper.requireNonNull(constants$2158.gtk_paint_option$MH,"gtk_paint_option");
    }
    public static void gtk_paint_option ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_option$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_tab$MH() {
        return RuntimeHelper.requireNonNull(constants$2158.gtk_paint_tab$MH,"gtk_paint_tab");
    }
    public static void gtk_paint_tab ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_tab$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_shadow_gap$MH() {
        return RuntimeHelper.requireNonNull(constants$2158.gtk_paint_shadow_gap$MH,"gtk_paint_shadow_gap");
    }
    public static void gtk_paint_shadow_gap ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height,  int gap_side,  int gap_x,  int gap_width) {
        var mh$ = gtk_paint_shadow_gap$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_box_gap$MH() {
        return RuntimeHelper.requireNonNull(constants$2158.gtk_paint_box_gap$MH,"gtk_paint_box_gap");
    }
    public static void gtk_paint_box_gap ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height,  int gap_side,  int gap_x,  int gap_width) {
        var mh$ = gtk_paint_box_gap$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side, gap_x, gap_width);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_extension$MH() {
        return RuntimeHelper.requireNonNull(constants$2158.gtk_paint_extension$MH,"gtk_paint_extension");
    }
    public static void gtk_paint_extension ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height,  int gap_side) {
        var mh$ = gtk_paint_extension$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, gap_side);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_focus$MH() {
        return RuntimeHelper.requireNonNull(constants$2159.gtk_paint_focus$MH,"gtk_paint_focus");
    }
    public static void gtk_paint_focus ( Addressable style,  Addressable cr,  int state_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_focus$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_slider$MH() {
        return RuntimeHelper.requireNonNull(constants$2159.gtk_paint_slider$MH,"gtk_paint_slider");
    }
    public static void gtk_paint_slider ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height,  int orientation) {
        var mh$ = gtk_paint_slider$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_handle$MH() {
        return RuntimeHelper.requireNonNull(constants$2159.gtk_paint_handle$MH,"gtk_paint_handle");
    }
    public static void gtk_paint_handle ( Addressable style,  Addressable cr,  int state_type,  int shadow_type,  Addressable widget,  Addressable detail,  int x,  int y,  int width,  int height,  int orientation) {
        var mh$ = gtk_paint_handle$MH();
        try {
            mh$.invokeExact(style, cr, state_type, shadow_type, widget, detail, x, y, width, height, orientation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_expander$MH() {
        return RuntimeHelper.requireNonNull(constants$2159.gtk_paint_expander$MH,"gtk_paint_expander");
    }
    public static void gtk_paint_expander ( Addressable style,  Addressable cr,  int state_type,  Addressable widget,  Addressable detail,  int x,  int y,  int expander_style) {
        var mh$ = gtk_paint_expander$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, x, y, expander_style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$2159.gtk_paint_layout$MH,"gtk_paint_layout");
    }
    public static void gtk_paint_layout ( Addressable style,  Addressable cr,  int state_type,  int use_text,  Addressable widget,  Addressable detail,  int x,  int y,  Addressable layout) {
        var mh$ = gtk_paint_layout$MH();
        try {
            mh$.invokeExact(style, cr, state_type, use_text, widget, detail, x, y, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_resize_grip$MH() {
        return RuntimeHelper.requireNonNull(constants$2159.gtk_paint_resize_grip$MH,"gtk_paint_resize_grip");
    }
    public static void gtk_paint_resize_grip ( Addressable style,  Addressable cr,  int state_type,  Addressable widget,  Addressable detail,  int edge,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_resize_grip$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, edge, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_paint_spinner$MH() {
        return RuntimeHelper.requireNonNull(constants$2160.gtk_paint_spinner$MH,"gtk_paint_spinner");
    }
    public static void gtk_paint_spinner ( Addressable style,  Addressable cr,  int state_type,  Addressable widget,  Addressable detail,  int step,  int x,  int y,  int width,  int height) {
        var mh$ = gtk_paint_spinner$MH();
        try {
            mh$.invokeExact(style, cr, state_type, widget, detail, step, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_get_style_property$MH() {
        return RuntimeHelper.requireNonNull(constants$2160.gtk_style_get_style_property$MH,"gtk_style_get_style_property");
    }
    public static void gtk_style_get_style_property ( Addressable style,  long widget_type,  Addressable property_name,  Addressable value) {
        var mh$ = gtk_style_get_style_property$MH();
        try {
            mh$.invokeExact(style, widget_type, property_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_get_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$2160.gtk_style_get_valist$MH,"gtk_style_get_valist");
    }
    public static void gtk_style_get_valist ( Addressable style,  long widget_type,  Addressable first_property_name,  Addressable var_args) {
        var mh$ = gtk_style_get_valist$MH();
        try {
            mh$.invokeExact(style, widget_type, first_property_name, var_args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_get$MH() {
        return RuntimeHelper.requireNonNull(constants$2160.gtk_style_get$MH,"gtk_style_get");
    }
    public static void gtk_style_get ( Addressable style,  long widget_type,  Addressable first_property_name, Object... x3) {
        var mh$ = gtk_style_get$MH();
        try {
            mh$.invokeExact(style, widget_type, first_property_name, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_style_new_for_path$MH() {
        return RuntimeHelper.requireNonNull(constants$2160._gtk_style_new_for_path$MH,"_gtk_style_new_for_path");
    }
    public static MemoryAddress _gtk_style_new_for_path ( Addressable screen,  Addressable path) {
        var mh$ = _gtk_style_new_for_path$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(screen, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_style_shade$MH() {
        return RuntimeHelper.requireNonNull(constants$2160._gtk_style_shade$MH,"_gtk_style_shade");
    }
    public static void _gtk_style_shade ( Addressable a,  Addressable b,  double k) {
        var mh$ = _gtk_style_shade$MH();
        try {
            mh$.invokeExact(a, b, k);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_style_has_context$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.gtk_style_has_context$MH,"gtk_style_has_context");
    }
    public static int gtk_style_has_context ( Addressable style) {
        var mh$ = gtk_style_has_context$MH();
        try {
            return (int)mh$.invokeExact(style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_style_attach$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.gtk_widget_style_attach$MH,"gtk_widget_style_attach");
    }
    public static void gtk_widget_style_attach ( Addressable widget) {
        var mh$ = gtk_widget_style_attach$MH();
        try {
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_has_rc_style$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.gtk_widget_has_rc_style$MH,"gtk_widget_has_rc_style");
    }
    public static int gtk_widget_has_rc_style ( Addressable widget) {
        var mh$ = gtk_widget_has_rc_style$MH();
        try {
            return (int)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_set_style$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.gtk_widget_set_style$MH,"gtk_widget_set_style");
    }
    public static void gtk_widget_set_style ( Addressable widget,  Addressable style) {
        var mh$ = gtk_widget_set_style$MH();
        try {
            mh$.invokeExact(widget, style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_ensure_style$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.gtk_widget_ensure_style$MH,"gtk_widget_ensure_style");
    }
    public static void gtk_widget_ensure_style ( Addressable widget) {
        var mh$ = gtk_widget_ensure_style$MH();
        try {
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_get_style$MH() {
        return RuntimeHelper.requireNonNull(constants$2161.gtk_widget_get_style$MH,"gtk_widget_get_style");
    }
    public static MemoryAddress gtk_widget_get_style ( Addressable widget) {
        var mh$ = gtk_widget_get_style$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_style$MH() {
        return RuntimeHelper.requireNonNull(constants$2162.gtk_widget_modify_style$MH,"gtk_widget_modify_style");
    }
    public static void gtk_widget_modify_style ( Addressable widget,  Addressable style) {
        var mh$ = gtk_widget_modify_style$MH();
        try {
            mh$.invokeExact(widget, style);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_get_modifier_style$MH() {
        return RuntimeHelper.requireNonNull(constants$2162.gtk_widget_get_modifier_style$MH,"gtk_widget_get_modifier_style");
    }
    public static MemoryAddress gtk_widget_get_modifier_style ( Addressable widget) {
        var mh$ = gtk_widget_get_modifier_style$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_fg$MH() {
        return RuntimeHelper.requireNonNull(constants$2162.gtk_widget_modify_fg$MH,"gtk_widget_modify_fg");
    }
    public static void gtk_widget_modify_fg ( Addressable widget,  int state,  Addressable color) {
        var mh$ = gtk_widget_modify_fg$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_bg$MH() {
        return RuntimeHelper.requireNonNull(constants$2162.gtk_widget_modify_bg$MH,"gtk_widget_modify_bg");
    }
    public static void gtk_widget_modify_bg ( Addressable widget,  int state,  Addressable color) {
        var mh$ = gtk_widget_modify_bg$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_text$MH() {
        return RuntimeHelper.requireNonNull(constants$2162.gtk_widget_modify_text$MH,"gtk_widget_modify_text");
    }
    public static void gtk_widget_modify_text ( Addressable widget,  int state,  Addressable color) {
        var mh$ = gtk_widget_modify_text$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_base$MH() {
        return RuntimeHelper.requireNonNull(constants$2162.gtk_widget_modify_base$MH,"gtk_widget_modify_base");
    }
    public static void gtk_widget_modify_base ( Addressable widget,  int state,  Addressable color) {
        var mh$ = gtk_widget_modify_base$MH();
        try {
            mh$.invokeExact(widget, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_cursor$MH() {
        return RuntimeHelper.requireNonNull(constants$2163.gtk_widget_modify_cursor$MH,"gtk_widget_modify_cursor");
    }
    public static void gtk_widget_modify_cursor ( Addressable widget,  Addressable primary,  Addressable secondary) {
        var mh$ = gtk_widget_modify_cursor$MH();
        try {
            mh$.invokeExact(widget, primary, secondary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_modify_font$MH() {
        return RuntimeHelper.requireNonNull(constants$2163.gtk_widget_modify_font$MH,"gtk_widget_modify_font");
    }
    public static void gtk_widget_modify_font ( Addressable widget,  Addressable font_desc) {
        var mh$ = gtk_widget_modify_font$MH();
        try {
            mh$.invokeExact(widget, font_desc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_reset_rc_styles$MH() {
        return RuntimeHelper.requireNonNull(constants$2163.gtk_widget_reset_rc_styles$MH,"gtk_widget_reset_rc_styles");
    }
    public static void gtk_widget_reset_rc_styles ( Addressable widget) {
        var mh$ = gtk_widget_reset_rc_styles$MH();
        try {
            mh$.invokeExact(widget);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_get_default_style$MH() {
        return RuntimeHelper.requireNonNull(constants$2163.gtk_widget_get_default_style$MH,"gtk_widget_get_default_style");
    }
    public static MemoryAddress gtk_widget_get_default_style () {
        var mh$ = gtk_widget_get_default_style$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_path$MH() {
        return RuntimeHelper.requireNonNull(constants$2163.gtk_widget_path$MH,"gtk_widget_path");
    }
    public static void gtk_widget_path ( Addressable widget,  Addressable path_length,  Addressable path,  Addressable path_reversed) {
        var mh$ = gtk_widget_path$MH();
        try {
            mh$.invokeExact(widget, path_length, path, path_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_class_path$MH() {
        return RuntimeHelper.requireNonNull(constants$2163.gtk_widget_class_path$MH,"gtk_widget_class_path");
    }
    public static void gtk_widget_class_path ( Addressable widget,  Addressable path_length,  Addressable path,  Addressable path_reversed) {
        var mh$ = gtk_widget_class_path$MH();
        try {
            mh$.invokeExact(widget, path_length, path, path_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_widget_render_icon$MH() {
        return RuntimeHelper.requireNonNull(constants$2164.gtk_widget_render_icon$MH,"gtk_widget_render_icon");
    }
    public static MemoryAddress gtk_widget_render_icon ( Addressable widget,  Addressable stock_id,  int size,  Addressable detail) {
        var mh$ = gtk_widget_render_icon$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(widget, stock_id, size, detail);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GTK_EXPAND() {
        return (int)1L;
    }
    public static int GTK_SHRINK() {
        return (int)2L;
    }
    public static int GTK_FILL() {
        return (int)4L;
    }
    public static MethodHandle gtk_table_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2164.gtk_table_get_type$MH,"gtk_table_get_type");
    }
    public static long gtk_table_get_type () {
        var mh$ = gtk_table_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2164.gtk_table_new$MH,"gtk_table_new");
    }
    public static MemoryAddress gtk_table_new ( int rows,  int columns,  int homogeneous) {
        var mh$ = gtk_table_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(rows, columns, homogeneous);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_resize$MH() {
        return RuntimeHelper.requireNonNull(constants$2164.gtk_table_resize$MH,"gtk_table_resize");
    }
    public static void gtk_table_resize ( Addressable table,  int rows,  int columns) {
        var mh$ = gtk_table_resize$MH();
        try {
            mh$.invokeExact(table, rows, columns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_attach$MH() {
        return RuntimeHelper.requireNonNull(constants$2164.gtk_table_attach$MH,"gtk_table_attach");
    }
    public static void gtk_table_attach ( Addressable table,  Addressable child,  int left_attach,  int right_attach,  int top_attach,  int bottom_attach,  int xoptions,  int yoptions,  int xpadding,  int ypadding) {
        var mh$ = gtk_table_attach$MH();
        try {
            mh$.invokeExact(table, child, left_attach, right_attach, top_attach, bottom_attach, xoptions, yoptions, xpadding, ypadding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_attach_defaults$MH() {
        return RuntimeHelper.requireNonNull(constants$2164.gtk_table_attach_defaults$MH,"gtk_table_attach_defaults");
    }
    public static void gtk_table_attach_defaults ( Addressable table,  Addressable widget,  int left_attach,  int right_attach,  int top_attach,  int bottom_attach) {
        var mh$ = gtk_table_attach_defaults$MH();
        try {
            mh$.invokeExact(table, widget, left_attach, right_attach, top_attach, bottom_attach);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_row_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$2165.gtk_table_set_row_spacing$MH,"gtk_table_set_row_spacing");
    }
    public static void gtk_table_set_row_spacing ( Addressable table,  int row,  int spacing) {
        var mh$ = gtk_table_set_row_spacing$MH();
        try {
            mh$.invokeExact(table, row, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_row_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$2165.gtk_table_get_row_spacing$MH,"gtk_table_get_row_spacing");
    }
    public static int gtk_table_get_row_spacing ( Addressable table,  int row) {
        var mh$ = gtk_table_get_row_spacing$MH();
        try {
            return (int)mh$.invokeExact(table, row);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_col_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$2165.gtk_table_set_col_spacing$MH,"gtk_table_set_col_spacing");
    }
    public static void gtk_table_set_col_spacing ( Addressable table,  int column,  int spacing) {
        var mh$ = gtk_table_set_col_spacing$MH();
        try {
            mh$.invokeExact(table, column, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_col_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$2165.gtk_table_get_col_spacing$MH,"gtk_table_get_col_spacing");
    }
    public static int gtk_table_get_col_spacing ( Addressable table,  int column) {
        var mh$ = gtk_table_get_col_spacing$MH();
        try {
            return (int)mh$.invokeExact(table, column);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_row_spacings$MH() {
        return RuntimeHelper.requireNonNull(constants$2165.gtk_table_set_row_spacings$MH,"gtk_table_set_row_spacings");
    }
    public static void gtk_table_set_row_spacings ( Addressable table,  int spacing) {
        var mh$ = gtk_table_set_row_spacings$MH();
        try {
            mh$.invokeExact(table, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_default_row_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$2165.gtk_table_get_default_row_spacing$MH,"gtk_table_get_default_row_spacing");
    }
    public static int gtk_table_get_default_row_spacing ( Addressable table) {
        var mh$ = gtk_table_get_default_row_spacing$MH();
        try {
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_col_spacings$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.gtk_table_set_col_spacings$MH,"gtk_table_set_col_spacings");
    }
    public static void gtk_table_set_col_spacings ( Addressable table,  int spacing) {
        var mh$ = gtk_table_set_col_spacings$MH();
        try {
            mh$.invokeExact(table, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_default_col_spacing$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.gtk_table_get_default_col_spacing$MH,"gtk_table_get_default_col_spacing");
    }
    public static int gtk_table_get_default_col_spacing ( Addressable table) {
        var mh$ = gtk_table_get_default_col_spacing$MH();
        try {
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_set_homogeneous$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.gtk_table_set_homogeneous$MH,"gtk_table_set_homogeneous");
    }
    public static void gtk_table_set_homogeneous ( Addressable table,  int homogeneous) {
        var mh$ = gtk_table_set_homogeneous$MH();
        try {
            mh$.invokeExact(table, homogeneous);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_homogeneous$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.gtk_table_get_homogeneous$MH,"gtk_table_get_homogeneous");
    }
    public static int gtk_table_get_homogeneous ( Addressable table) {
        var mh$ = gtk_table_get_homogeneous$MH();
        try {
            return (int)mh$.invokeExact(table);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_table_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.gtk_table_get_size$MH,"gtk_table_get_size");
    }
    public static void gtk_table_get_size ( Addressable table,  Addressable rows,  Addressable columns) {
        var mh$ = gtk_table_get_size$MH();
        try {
            mh$.invokeExact(table, rows, columns);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tearoff_menu_item_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2166.gtk_tearoff_menu_item_get_type$MH,"gtk_tearoff_menu_item_get_type");
    }
    public static long gtk_tearoff_menu_item_get_type () {
        var mh$ = gtk_tearoff_menu_item_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_tearoff_menu_item_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.gtk_tearoff_menu_item_new$MH,"gtk_tearoff_menu_item_new");
    }
    public static MemoryAddress gtk_tearoff_menu_item_new () {
        var mh$ = gtk_tearoff_menu_item_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.gtk_theming_engine_get_type$MH,"gtk_theming_engine_get_type");
    }
    public static long gtk_theming_engine_get_type () {
        var mh$ = gtk_theming_engine_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_register_property$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.gtk_theming_engine_register_property$MH,"gtk_theming_engine_register_property");
    }
    public static void gtk_theming_engine_register_property ( Addressable name_space,  Addressable parse_func,  Addressable pspec) {
        var mh$ = gtk_theming_engine_register_property$MH();
        try {
            mh$.invokeExact(name_space, parse_func, pspec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_property$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.gtk_theming_engine_get_property$MH,"gtk_theming_engine_get_property");
    }
    public static void gtk_theming_engine_get_property ( Addressable engine,  Addressable property,  int state,  Addressable value) {
        var mh$ = gtk_theming_engine_get_property$MH();
        try {
            mh$.invokeExact(engine, property, state, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.gtk_theming_engine_get_valist$MH,"gtk_theming_engine_get_valist");
    }
    public static void gtk_theming_engine_get_valist ( Addressable engine,  int state,  Addressable args) {
        var mh$ = gtk_theming_engine_get_valist$MH();
        try {
            mh$.invokeExact(engine, state, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get$MH() {
        return RuntimeHelper.requireNonNull(constants$2167.gtk_theming_engine_get$MH,"gtk_theming_engine_get");
    }
    public static void gtk_theming_engine_get ( Addressable engine,  int state, Object... x2) {
        var mh$ = gtk_theming_engine_get$MH();
        try {
            mh$.invokeExact(engine, state, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_style_property$MH() {
        return RuntimeHelper.requireNonNull(constants$2168.gtk_theming_engine_get_style_property$MH,"gtk_theming_engine_get_style_property");
    }
    public static void gtk_theming_engine_get_style_property ( Addressable engine,  Addressable property_name,  Addressable value) {
        var mh$ = gtk_theming_engine_get_style_property$MH();
        try {
            mh$.invokeExact(engine, property_name, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_style_valist$MH() {
        return RuntimeHelper.requireNonNull(constants$2168.gtk_theming_engine_get_style_valist$MH,"gtk_theming_engine_get_style_valist");
    }
    public static void gtk_theming_engine_get_style_valist ( Addressable engine,  Addressable args) {
        var mh$ = gtk_theming_engine_get_style_valist$MH();
        try {
            mh$.invokeExact(engine, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_style$MH() {
        return RuntimeHelper.requireNonNull(constants$2168.gtk_theming_engine_get_style$MH,"gtk_theming_engine_get_style");
    }
    public static void gtk_theming_engine_get_style ( Addressable engine, Object... x1) {
        var mh$ = gtk_theming_engine_get_style$MH();
        try {
            mh$.invokeExact(engine, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_lookup_color$MH() {
        return RuntimeHelper.requireNonNull(constants$2168.gtk_theming_engine_lookup_color$MH,"gtk_theming_engine_lookup_color");
    }
    public static int gtk_theming_engine_lookup_color ( Addressable engine,  Addressable color_name,  Addressable color) {
        var mh$ = gtk_theming_engine_lookup_color$MH();
        try {
            return (int)mh$.invokeExact(engine, color_name, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_path$MH() {
        return RuntimeHelper.requireNonNull(constants$2168.gtk_theming_engine_get_path$MH,"gtk_theming_engine_get_path");
    }
    public static MemoryAddress gtk_theming_engine_get_path ( Addressable engine) {
        var mh$ = gtk_theming_engine_get_path$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_has_class$MH() {
        return RuntimeHelper.requireNonNull(constants$2168.gtk_theming_engine_has_class$MH,"gtk_theming_engine_has_class");
    }
    public static int gtk_theming_engine_has_class ( Addressable engine,  Addressable style_class) {
        var mh$ = gtk_theming_engine_has_class$MH();
        try {
            return (int)mh$.invokeExact(engine, style_class);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_has_region$MH() {
        return RuntimeHelper.requireNonNull(constants$2169.gtk_theming_engine_has_region$MH,"gtk_theming_engine_has_region");
    }
    public static int gtk_theming_engine_has_region ( Addressable engine,  Addressable style_region,  Addressable flags) {
        var mh$ = gtk_theming_engine_has_region$MH();
        try {
            return (int)mh$.invokeExact(engine, style_region, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_state$MH() {
        return RuntimeHelper.requireNonNull(constants$2169.gtk_theming_engine_get_state$MH,"gtk_theming_engine_get_state");
    }
    public static int gtk_theming_engine_get_state ( Addressable engine) {
        var mh$ = gtk_theming_engine_get_state$MH();
        try {
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_state_is_running$MH() {
        return RuntimeHelper.requireNonNull(constants$2169.gtk_theming_engine_state_is_running$MH,"gtk_theming_engine_state_is_running");
    }
    public static int gtk_theming_engine_state_is_running ( Addressable engine,  int state,  Addressable progress) {
        var mh$ = gtk_theming_engine_state_is_running$MH();
        try {
            return (int)mh$.invokeExact(engine, state, progress);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_direction$MH() {
        return RuntimeHelper.requireNonNull(constants$2169.gtk_theming_engine_get_direction$MH,"gtk_theming_engine_get_direction");
    }
    public static int gtk_theming_engine_get_direction ( Addressable engine) {
        var mh$ = gtk_theming_engine_get_direction$MH();
        try {
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_junction_sides$MH() {
        return RuntimeHelper.requireNonNull(constants$2169.gtk_theming_engine_get_junction_sides$MH,"gtk_theming_engine_get_junction_sides");
    }
    public static int gtk_theming_engine_get_junction_sides ( Addressable engine) {
        var mh$ = gtk_theming_engine_get_junction_sides$MH();
        try {
            return (int)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_color$MH() {
        return RuntimeHelper.requireNonNull(constants$2169.gtk_theming_engine_get_color$MH,"gtk_theming_engine_get_color");
    }
    public static void gtk_theming_engine_get_color ( Addressable engine,  int state,  Addressable color) {
        var mh$ = gtk_theming_engine_get_color$MH();
        try {
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_background_color$MH() {
        return RuntimeHelper.requireNonNull(constants$2170.gtk_theming_engine_get_background_color$MH,"gtk_theming_engine_get_background_color");
    }
    public static void gtk_theming_engine_get_background_color ( Addressable engine,  int state,  Addressable color) {
        var mh$ = gtk_theming_engine_get_background_color$MH();
        try {
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_border_color$MH() {
        return RuntimeHelper.requireNonNull(constants$2170.gtk_theming_engine_get_border_color$MH,"gtk_theming_engine_get_border_color");
    }
    public static void gtk_theming_engine_get_border_color ( Addressable engine,  int state,  Addressable color) {
        var mh$ = gtk_theming_engine_get_border_color$MH();
        try {
            mh$.invokeExact(engine, state, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_border$MH() {
        return RuntimeHelper.requireNonNull(constants$2170.gtk_theming_engine_get_border$MH,"gtk_theming_engine_get_border");
    }
    public static void gtk_theming_engine_get_border ( Addressable engine,  int state,  Addressable border) {
        var mh$ = gtk_theming_engine_get_border$MH();
        try {
            mh$.invokeExact(engine, state, border);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_padding$MH() {
        return RuntimeHelper.requireNonNull(constants$2170.gtk_theming_engine_get_padding$MH,"gtk_theming_engine_get_padding");
    }
    public static void gtk_theming_engine_get_padding ( Addressable engine,  int state,  Addressable padding) {
        var mh$ = gtk_theming_engine_get_padding$MH();
        try {
            mh$.invokeExact(engine, state, padding);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_margin$MH() {
        return RuntimeHelper.requireNonNull(constants$2170.gtk_theming_engine_get_margin$MH,"gtk_theming_engine_get_margin");
    }
    public static void gtk_theming_engine_get_margin ( Addressable engine,  int state,  Addressable margin) {
        var mh$ = gtk_theming_engine_get_margin$MH();
        try {
            mh$.invokeExact(engine, state, margin);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_font$MH() {
        return RuntimeHelper.requireNonNull(constants$2170.gtk_theming_engine_get_font$MH,"gtk_theming_engine_get_font");
    }
    public static MemoryAddress gtk_theming_engine_get_font ( Addressable engine,  int state) {
        var mh$ = gtk_theming_engine_get_font$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(engine, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_load$MH() {
        return RuntimeHelper.requireNonNull(constants$2171.gtk_theming_engine_load$MH,"gtk_theming_engine_load");
    }
    public static MemoryAddress gtk_theming_engine_load ( Addressable name) {
        var mh$ = gtk_theming_engine_load$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_theming_engine_get_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$2171.gtk_theming_engine_get_screen$MH,"gtk_theming_engine_get_screen");
    }
    public static MemoryAddress gtk_theming_engine_get_screen ( Addressable engine) {
        var mh$ = gtk_theming_engine_get_screen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(engine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GTK_UI_MANAGER_AUTO() {
        return (int)0L;
    }
    public static int GTK_UI_MANAGER_MENUBAR() {
        return (int)1L;
    }
    public static int GTK_UI_MANAGER_MENU() {
        return (int)2L;
    }
    public static int GTK_UI_MANAGER_TOOLBAR() {
        return (int)4L;
    }
    public static int GTK_UI_MANAGER_PLACEHOLDER() {
        return (int)8L;
    }
    public static int GTK_UI_MANAGER_POPUP() {
        return (int)16L;
    }
    public static int GTK_UI_MANAGER_MENUITEM() {
        return (int)32L;
    }
    public static int GTK_UI_MANAGER_TOOLITEM() {
        return (int)64L;
    }
    public static int GTK_UI_MANAGER_SEPARATOR() {
        return (int)128L;
    }
    public static int GTK_UI_MANAGER_ACCELERATOR() {
        return (int)256L;
    }
    public static int GTK_UI_MANAGER_POPUP_WITH_ACCELS() {
        return (int)512L;
    }
    public static MethodHandle gtk_ui_manager_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2171.gtk_ui_manager_get_type$MH,"gtk_ui_manager_get_type");
    }
    public static long gtk_ui_manager_get_type () {
        var mh$ = gtk_ui_manager_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2171.gtk_ui_manager_new$MH,"gtk_ui_manager_new");
    }
    public static MemoryAddress gtk_ui_manager_new () {
        var mh$ = gtk_ui_manager_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_set_add_tearoffs$MH() {
        return RuntimeHelper.requireNonNull(constants$2171.gtk_ui_manager_set_add_tearoffs$MH,"gtk_ui_manager_set_add_tearoffs");
    }
    public static void gtk_ui_manager_set_add_tearoffs ( Addressable manager,  int add_tearoffs) {
        var mh$ = gtk_ui_manager_set_add_tearoffs$MH();
        try {
            mh$.invokeExact(manager, add_tearoffs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_add_tearoffs$MH() {
        return RuntimeHelper.requireNonNull(constants$2171.gtk_ui_manager_get_add_tearoffs$MH,"gtk_ui_manager_get_add_tearoffs");
    }
    public static int gtk_ui_manager_get_add_tearoffs ( Addressable manager) {
        var mh$ = gtk_ui_manager_get_add_tearoffs$MH();
        try {
            return (int)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_insert_action_group$MH() {
        return RuntimeHelper.requireNonNull(constants$2172.gtk_ui_manager_insert_action_group$MH,"gtk_ui_manager_insert_action_group");
    }
    public static void gtk_ui_manager_insert_action_group ( Addressable manager,  Addressable action_group,  int pos) {
        var mh$ = gtk_ui_manager_insert_action_group$MH();
        try {
            mh$.invokeExact(manager, action_group, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_remove_action_group$MH() {
        return RuntimeHelper.requireNonNull(constants$2172.gtk_ui_manager_remove_action_group$MH,"gtk_ui_manager_remove_action_group");
    }
    public static void gtk_ui_manager_remove_action_group ( Addressable manager,  Addressable action_group) {
        var mh$ = gtk_ui_manager_remove_action_group$MH();
        try {
            mh$.invokeExact(manager, action_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_action_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$2172.gtk_ui_manager_get_action_groups$MH,"gtk_ui_manager_get_action_groups");
    }
    public static MemoryAddress gtk_ui_manager_get_action_groups ( Addressable manager) {
        var mh$ = gtk_ui_manager_get_action_groups$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_accel_group$MH() {
        return RuntimeHelper.requireNonNull(constants$2172.gtk_ui_manager_get_accel_group$MH,"gtk_ui_manager_get_accel_group");
    }
    public static MemoryAddress gtk_ui_manager_get_accel_group ( Addressable manager) {
        var mh$ = gtk_ui_manager_get_accel_group$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_widget$MH() {
        return RuntimeHelper.requireNonNull(constants$2172.gtk_ui_manager_get_widget$MH,"gtk_ui_manager_get_widget");
    }
    public static MemoryAddress gtk_ui_manager_get_widget ( Addressable manager,  Addressable path) {
        var mh$ = gtk_ui_manager_get_widget$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(manager, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_toplevels$MH() {
        return RuntimeHelper.requireNonNull(constants$2172.gtk_ui_manager_get_toplevels$MH,"gtk_ui_manager_get_toplevels");
    }
    public static MemoryAddress gtk_ui_manager_get_toplevels ( Addressable manager,  int types) {
        var mh$ = gtk_ui_manager_get_toplevels$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(manager, types);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_action$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.gtk_ui_manager_get_action$MH,"gtk_ui_manager_get_action");
    }
    public static MemoryAddress gtk_ui_manager_get_action ( Addressable manager,  Addressable path) {
        var mh$ = gtk_ui_manager_get_action$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(manager, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui_from_string$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.gtk_ui_manager_add_ui_from_string$MH,"gtk_ui_manager_add_ui_from_string");
    }
    public static int gtk_ui_manager_add_ui_from_string ( Addressable manager,  Addressable buffer,  long length,  Addressable error) {
        var mh$ = gtk_ui_manager_add_ui_from_string$MH();
        try {
            return (int)mh$.invokeExact(manager, buffer, length, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui_from_file$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.gtk_ui_manager_add_ui_from_file$MH,"gtk_ui_manager_add_ui_from_file");
    }
    public static int gtk_ui_manager_add_ui_from_file ( Addressable manager,  Addressable filename,  Addressable error) {
        var mh$ = gtk_ui_manager_add_ui_from_file$MH();
        try {
            return (int)mh$.invokeExact(manager, filename, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui_from_resource$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.gtk_ui_manager_add_ui_from_resource$MH,"gtk_ui_manager_add_ui_from_resource");
    }
    public static int gtk_ui_manager_add_ui_from_resource ( Addressable manager,  Addressable resource_path,  Addressable error) {
        var mh$ = gtk_ui_manager_add_ui_from_resource$MH();
        try {
            return (int)mh$.invokeExact(manager, resource_path, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_add_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.gtk_ui_manager_add_ui$MH,"gtk_ui_manager_add_ui");
    }
    public static void gtk_ui_manager_add_ui ( Addressable manager,  int merge_id,  Addressable path,  Addressable name,  Addressable action,  int type,  int top) {
        var mh$ = gtk_ui_manager_add_ui$MH();
        try {
            mh$.invokeExact(manager, merge_id, path, name, action, type, top);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_remove_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$2173.gtk_ui_manager_remove_ui$MH,"gtk_ui_manager_remove_ui");
    }
    public static void gtk_ui_manager_remove_ui ( Addressable manager,  int merge_id) {
        var mh$ = gtk_ui_manager_remove_ui$MH();
        try {
            mh$.invokeExact(manager, merge_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_get_ui$MH() {
        return RuntimeHelper.requireNonNull(constants$2174.gtk_ui_manager_get_ui$MH,"gtk_ui_manager_get_ui");
    }
    public static MemoryAddress gtk_ui_manager_get_ui ( Addressable manager) {
        var mh$ = gtk_ui_manager_get_ui$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_ensure_update$MH() {
        return RuntimeHelper.requireNonNull(constants$2174.gtk_ui_manager_ensure_update$MH,"gtk_ui_manager_ensure_update");
    }
    public static void gtk_ui_manager_ensure_update ( Addressable manager) {
        var mh$ = gtk_ui_manager_ensure_update$MH();
        try {
            mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_ui_manager_new_merge_id$MH() {
        return RuntimeHelper.requireNonNull(constants$2174.gtk_ui_manager_new_merge_id$MH,"gtk_ui_manager_new_merge_id");
    }
    public static int gtk_ui_manager_new_merge_id ( Addressable manager) {
        var mh$ = gtk_ui_manager_new_merge_id$MH();
        try {
            return (int)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbutton_box_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2174.gtk_vbutton_box_get_type$MH,"gtk_vbutton_box_get_type");
    }
    public static long gtk_vbutton_box_get_type () {
        var mh$ = gtk_vbutton_box_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbutton_box_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2174.gtk_vbutton_box_new$MH,"gtk_vbutton_box_new");
    }
    public static MemoryAddress gtk_vbutton_box_new () {
        var mh$ = gtk_vbutton_box_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbox_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2174.gtk_vbox_get_type$MH,"gtk_vbox_get_type");
    }
    public static long gtk_vbox_get_type () {
        var mh$ = gtk_vbox_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vbox_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2175.gtk_vbox_new$MH,"gtk_vbox_new");
    }
    public static MemoryAddress gtk_vbox_new ( int homogeneous,  int spacing) {
        var mh$ = gtk_vbox_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(homogeneous, spacing);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vpaned_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2175.gtk_vpaned_get_type$MH,"gtk_vpaned_get_type");
    }
    public static long gtk_vpaned_get_type () {
        var mh$ = gtk_vpaned_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vpaned_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2175.gtk_vpaned_new$MH,"gtk_vpaned_new");
    }
    public static MemoryAddress gtk_vpaned_new () {
        var mh$ = gtk_vpaned_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscale_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2175.gtk_vscale_get_type$MH,"gtk_vscale_get_type");
    }
    public static long gtk_vscale_get_type () {
        var mh$ = gtk_vscale_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscale_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2175.gtk_vscale_new$MH,"gtk_vscale_new");
    }
    public static MemoryAddress gtk_vscale_new ( Addressable adjustment) {
        var mh$ = gtk_vscale_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscale_new_with_range$MH() {
        return RuntimeHelper.requireNonNull(constants$2175.gtk_vscale_new_with_range$MH,"gtk_vscale_new_with_range");
    }
    public static MemoryAddress gtk_vscale_new_with_range ( double min,  double max,  double step) {
        var mh$ = gtk_vscale_new_with_range$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(min, max, step);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscrollbar_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2176.gtk_vscrollbar_get_type$MH,"gtk_vscrollbar_get_type");
    }
    public static long gtk_vscrollbar_get_type () {
        var mh$ = gtk_vscrollbar_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vscrollbar_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2176.gtk_vscrollbar_new$MH,"gtk_vscrollbar_new");
    }
    public static MemoryAddress gtk_vscrollbar_new ( Addressable adjustment) {
        var mh$ = gtk_vscrollbar_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(adjustment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vseparator_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$2176.gtk_vseparator_get_type$MH,"gtk_vseparator_get_type");
    }
    public static long gtk_vseparator_get_type () {
        var mh$ = gtk_vseparator_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_vseparator_new$MH() {
        return RuntimeHelper.requireNonNull(constants$2176.gtk_vseparator_new$MH,"gtk_vseparator_new");
    }
    public static MemoryAddress gtk_vseparator_new () {
        var mh$ = gtk_vseparator_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkAccessible_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAccessible_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAccessible_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAccessible_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkAccessible$MH() {
        return RuntimeHelper.requireNonNull(constants$2176.glib_autoptr_clear_GtkAccessible$MH,"glib_autoptr_clear_GtkAccessible");
    }
    public static void glib_autoptr_clear_GtkAccessible ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkAccessible$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkAccessible$MH() {
        return RuntimeHelper.requireNonNull(constants$2176.glib_autoptr_cleanup_GtkAccessible$MH,"glib_autoptr_cleanup_GtkAccessible");
    }
    public static void glib_autoptr_cleanup_GtkAccessible ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkAccessible$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkAccessible$MH() {
        return RuntimeHelper.requireNonNull(constants$2177.glib_listautoptr_cleanup_GtkAccessible$MH,"glib_listautoptr_cleanup_GtkAccessible");
    }
    public static void glib_listautoptr_cleanup_GtkAccessible ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkAccessible$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkAccessible$MH() {
        return RuntimeHelper.requireNonNull(constants$2177.glib_slistautoptr_cleanup_GtkAccessible$MH,"glib_slistautoptr_cleanup_GtkAccessible");
    }
    public static void glib_slistautoptr_cleanup_GtkAccessible ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkAccessible$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkAccessible$MH() {
        return RuntimeHelper.requireNonNull(constants$2177.glib_queueautoptr_cleanup_GtkAccessible$MH,"glib_queueautoptr_cleanup_GtkAccessible");
    }
    public static void glib_queueautoptr_cleanup_GtkAccessible ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkAccessible$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkActionBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkActionBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkActionBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkActionBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkActionBar$MH() {
        return RuntimeHelper.requireNonNull(constants$2177.glib_autoptr_clear_GtkActionBar$MH,"glib_autoptr_clear_GtkActionBar");
    }
    public static void glib_autoptr_clear_GtkActionBar ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkActionBar$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkActionBar$MH() {
        return RuntimeHelper.requireNonNull(constants$2177.glib_autoptr_cleanup_GtkActionBar$MH,"glib_autoptr_cleanup_GtkActionBar");
    }
    public static void glib_autoptr_cleanup_GtkActionBar ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkActionBar$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkActionBar$MH() {
        return RuntimeHelper.requireNonNull(constants$2177.glib_listautoptr_cleanup_GtkActionBar$MH,"glib_listautoptr_cleanup_GtkActionBar");
    }
    public static void glib_listautoptr_cleanup_GtkActionBar ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkActionBar$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkActionBar$MH() {
        return RuntimeHelper.requireNonNull(constants$2178.glib_slistautoptr_cleanup_GtkActionBar$MH,"glib_slistautoptr_cleanup_GtkActionBar");
    }
    public static void glib_slistautoptr_cleanup_GtkActionBar ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkActionBar$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkActionBar$MH() {
        return RuntimeHelper.requireNonNull(constants$2178.glib_queueautoptr_cleanup_GtkActionBar$MH,"glib_queueautoptr_cleanup_GtkActionBar");
    }
    public static void glib_queueautoptr_cleanup_GtkActionBar ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkActionBar$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkActionable_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkActionable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkActionable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkActionable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkActionable$MH() {
        return RuntimeHelper.requireNonNull(constants$2178.glib_autoptr_clear_GtkActionable$MH,"glib_autoptr_clear_GtkActionable");
    }
    public static void glib_autoptr_clear_GtkActionable ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkActionable$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkActionable$MH() {
        return RuntimeHelper.requireNonNull(constants$2178.glib_autoptr_cleanup_GtkActionable$MH,"glib_autoptr_cleanup_GtkActionable");
    }
    public static void glib_autoptr_cleanup_GtkActionable ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkActionable$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkActionable$MH() {
        return RuntimeHelper.requireNonNull(constants$2178.glib_listautoptr_cleanup_GtkActionable$MH,"glib_listautoptr_cleanup_GtkActionable");
    }
    public static void glib_listautoptr_cleanup_GtkActionable ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkActionable$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkActionable$MH() {
        return RuntimeHelper.requireNonNull(constants$2178.glib_slistautoptr_cleanup_GtkActionable$MH,"glib_slistautoptr_cleanup_GtkActionable");
    }
    public static void glib_slistautoptr_cleanup_GtkActionable ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkActionable$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkActionable$MH() {
        return RuntimeHelper.requireNonNull(constants$2179.glib_queueautoptr_cleanup_GtkActionable$MH,"glib_queueautoptr_cleanup_GtkActionable");
    }
    public static void glib_queueautoptr_cleanup_GtkActionable ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkActionable$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkAdjustment_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAdjustment_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAdjustment_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAdjustment_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$2179.glib_autoptr_clear_GtkAdjustment$MH,"glib_autoptr_clear_GtkAdjustment");
    }
    public static void glib_autoptr_clear_GtkAdjustment ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkAdjustment$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$2179.glib_autoptr_cleanup_GtkAdjustment$MH,"glib_autoptr_cleanup_GtkAdjustment");
    }
    public static void glib_autoptr_cleanup_GtkAdjustment ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkAdjustment$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$2179.glib_listautoptr_cleanup_GtkAdjustment$MH,"glib_listautoptr_cleanup_GtkAdjustment");
    }
    public static void glib_listautoptr_cleanup_GtkAdjustment ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkAdjustment$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$2179.glib_slistautoptr_cleanup_GtkAdjustment$MH,"glib_slistautoptr_cleanup_GtkAdjustment");
    }
    public static void glib_slistautoptr_cleanup_GtkAdjustment ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkAdjustment$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkAdjustment$MH() {
        return RuntimeHelper.requireNonNull(constants$2179.glib_queueautoptr_cleanup_GtkAdjustment$MH,"glib_queueautoptr_cleanup_GtkAdjustment");
    }
    public static void glib_queueautoptr_cleanup_GtkAdjustment ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkAdjustment$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkAppChooser_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooser_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooser_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooser_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkAppChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2180.glib_autoptr_clear_GtkAppChooser$MH,"glib_autoptr_clear_GtkAppChooser");
    }
    public static void glib_autoptr_clear_GtkAppChooser ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkAppChooser$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkAppChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2180.glib_autoptr_cleanup_GtkAppChooser$MH,"glib_autoptr_cleanup_GtkAppChooser");
    }
    public static void glib_autoptr_cleanup_GtkAppChooser ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkAppChooser$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkAppChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2180.glib_listautoptr_cleanup_GtkAppChooser$MH,"glib_listautoptr_cleanup_GtkAppChooser");
    }
    public static void glib_listautoptr_cleanup_GtkAppChooser ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkAppChooser$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkAppChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2180.glib_slistautoptr_cleanup_GtkAppChooser$MH,"glib_slistautoptr_cleanup_GtkAppChooser");
    }
    public static void glib_slistautoptr_cleanup_GtkAppChooser ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkAppChooser$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkAppChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2180.glib_queueautoptr_cleanup_GtkAppChooser$MH,"glib_queueautoptr_cleanup_GtkAppChooser");
    }
    public static void glib_queueautoptr_cleanup_GtkAppChooser ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkAppChooser$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkAppChooserButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooserButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooserButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooserButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkAppChooserButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2180.glib_autoptr_clear_GtkAppChooserButton$MH,"glib_autoptr_clear_GtkAppChooserButton");
    }
    public static void glib_autoptr_clear_GtkAppChooserButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkAppChooserButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkAppChooserButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2181.glib_autoptr_cleanup_GtkAppChooserButton$MH,"glib_autoptr_cleanup_GtkAppChooserButton");
    }
    public static void glib_autoptr_cleanup_GtkAppChooserButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkAppChooserButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkAppChooserButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2181.glib_listautoptr_cleanup_GtkAppChooserButton$MH,"glib_listautoptr_cleanup_GtkAppChooserButton");
    }
    public static void glib_listautoptr_cleanup_GtkAppChooserButton ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkAppChooserButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkAppChooserButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2181.glib_slistautoptr_cleanup_GtkAppChooserButton$MH,"glib_slistautoptr_cleanup_GtkAppChooserButton");
    }
    public static void glib_slistautoptr_cleanup_GtkAppChooserButton ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkAppChooserButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkAppChooserButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2181.glib_queueautoptr_cleanup_GtkAppChooserButton$MH,"glib_queueautoptr_cleanup_GtkAppChooserButton");
    }
    public static void glib_queueautoptr_cleanup_GtkAppChooserButton ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkAppChooserButton$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkAppChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkAppChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2181.glib_autoptr_clear_GtkAppChooserDialog$MH,"glib_autoptr_clear_GtkAppChooserDialog");
    }
    public static void glib_autoptr_clear_GtkAppChooserDialog ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkAppChooserDialog$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkAppChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2181.glib_autoptr_cleanup_GtkAppChooserDialog$MH,"glib_autoptr_cleanup_GtkAppChooserDialog");
    }
    public static void glib_autoptr_cleanup_GtkAppChooserDialog ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkAppChooserDialog$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkAppChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2182.glib_listautoptr_cleanup_GtkAppChooserDialog$MH,"glib_listautoptr_cleanup_GtkAppChooserDialog");
    }
    public static void glib_listautoptr_cleanup_GtkAppChooserDialog ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkAppChooserDialog$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkAppChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2182.glib_slistautoptr_cleanup_GtkAppChooserDialog$MH,"glib_slistautoptr_cleanup_GtkAppChooserDialog");
    }
    public static void glib_slistautoptr_cleanup_GtkAppChooserDialog ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkAppChooserDialog$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkAppChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2182.glib_queueautoptr_cleanup_GtkAppChooserDialog$MH,"glib_queueautoptr_cleanup_GtkAppChooserDialog");
    }
    public static void glib_queueautoptr_cleanup_GtkAppChooserDialog ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkAppChooserDialog$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkAppChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAppChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkAppChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2182.glib_autoptr_clear_GtkAppChooserWidget$MH,"glib_autoptr_clear_GtkAppChooserWidget");
    }
    public static void glib_autoptr_clear_GtkAppChooserWidget ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkAppChooserWidget$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkAppChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2182.glib_autoptr_cleanup_GtkAppChooserWidget$MH,"glib_autoptr_cleanup_GtkAppChooserWidget");
    }
    public static void glib_autoptr_cleanup_GtkAppChooserWidget ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkAppChooserWidget$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkAppChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2182.glib_listautoptr_cleanup_GtkAppChooserWidget$MH,"glib_listautoptr_cleanup_GtkAppChooserWidget");
    }
    public static void glib_listautoptr_cleanup_GtkAppChooserWidget ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkAppChooserWidget$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkAppChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.glib_slistautoptr_cleanup_GtkAppChooserWidget$MH,"glib_slistautoptr_cleanup_GtkAppChooserWidget");
    }
    public static void glib_slistautoptr_cleanup_GtkAppChooserWidget ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkAppChooserWidget$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkAppChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.glib_queueautoptr_cleanup_GtkAppChooserWidget$MH,"glib_queueautoptr_cleanup_GtkAppChooserWidget");
    }
    public static void glib_queueautoptr_cleanup_GtkAppChooserWidget ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkAppChooserWidget$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkApplicationWindow_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkApplicationWindow_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkApplicationWindow_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkApplicationWindow_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkApplicationWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.glib_autoptr_clear_GtkApplicationWindow$MH,"glib_autoptr_clear_GtkApplicationWindow");
    }
    public static void glib_autoptr_clear_GtkApplicationWindow ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkApplicationWindow$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkApplicationWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.glib_autoptr_cleanup_GtkApplicationWindow$MH,"glib_autoptr_cleanup_GtkApplicationWindow");
    }
    public static void glib_autoptr_cleanup_GtkApplicationWindow ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkApplicationWindow$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkApplicationWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.glib_listautoptr_cleanup_GtkApplicationWindow$MH,"glib_listautoptr_cleanup_GtkApplicationWindow");
    }
    public static void glib_listautoptr_cleanup_GtkApplicationWindow ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkApplicationWindow$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkApplicationWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$2183.glib_slistautoptr_cleanup_GtkApplicationWindow$MH,"glib_slistautoptr_cleanup_GtkApplicationWindow");
    }
    public static void glib_slistautoptr_cleanup_GtkApplicationWindow ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkApplicationWindow$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkApplicationWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$2184.glib_queueautoptr_cleanup_GtkApplicationWindow$MH,"glib_queueautoptr_cleanup_GtkApplicationWindow");
    }
    public static void glib_queueautoptr_cleanup_GtkApplicationWindow ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkApplicationWindow$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkAspectFrame_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAspectFrame_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAspectFrame_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAspectFrame_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkAspectFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$2184.glib_autoptr_clear_GtkAspectFrame$MH,"glib_autoptr_clear_GtkAspectFrame");
    }
    public static void glib_autoptr_clear_GtkAspectFrame ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkAspectFrame$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkAspectFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$2184.glib_autoptr_cleanup_GtkAspectFrame$MH,"glib_autoptr_cleanup_GtkAspectFrame");
    }
    public static void glib_autoptr_cleanup_GtkAspectFrame ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkAspectFrame$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkAspectFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$2184.glib_listautoptr_cleanup_GtkAspectFrame$MH,"glib_listautoptr_cleanup_GtkAspectFrame");
    }
    public static void glib_listautoptr_cleanup_GtkAspectFrame ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkAspectFrame$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkAspectFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$2184.glib_slistautoptr_cleanup_GtkAspectFrame$MH,"glib_slistautoptr_cleanup_GtkAspectFrame");
    }
    public static void glib_slistautoptr_cleanup_GtkAspectFrame ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkAspectFrame$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkAspectFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$2184.glib_queueautoptr_cleanup_GtkAspectFrame$MH,"glib_queueautoptr_cleanup_GtkAspectFrame");
    }
    public static void glib_queueautoptr_cleanup_GtkAspectFrame ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkAspectFrame$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkAssistant_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAssistant_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAssistant_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAssistant_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkAssistant$MH() {
        return RuntimeHelper.requireNonNull(constants$2185.glib_autoptr_clear_GtkAssistant$MH,"glib_autoptr_clear_GtkAssistant");
    }
    public static void glib_autoptr_clear_GtkAssistant ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkAssistant$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkAssistant$MH() {
        return RuntimeHelper.requireNonNull(constants$2185.glib_autoptr_cleanup_GtkAssistant$MH,"glib_autoptr_cleanup_GtkAssistant");
    }
    public static void glib_autoptr_cleanup_GtkAssistant ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkAssistant$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkAssistant$MH() {
        return RuntimeHelper.requireNonNull(constants$2185.glib_listautoptr_cleanup_GtkAssistant$MH,"glib_listautoptr_cleanup_GtkAssistant");
    }
    public static void glib_listautoptr_cleanup_GtkAssistant ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkAssistant$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkAssistant$MH() {
        return RuntimeHelper.requireNonNull(constants$2185.glib_slistautoptr_cleanup_GtkAssistant$MH,"glib_slistautoptr_cleanup_GtkAssistant");
    }
    public static void glib_slistautoptr_cleanup_GtkAssistant ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkAssistant$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkAssistant$MH() {
        return RuntimeHelper.requireNonNull(constants$2185.glib_queueautoptr_cleanup_GtkAssistant$MH,"glib_queueautoptr_cleanup_GtkAssistant");
    }
    public static void glib_queueautoptr_cleanup_GtkAssistant ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkAssistant$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2185.glib_autoptr_clear_GtkBox$MH,"glib_autoptr_clear_GtkBox");
    }
    public static void glib_autoptr_clear_GtkBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.glib_autoptr_cleanup_GtkBox$MH,"glib_autoptr_cleanup_GtkBox");
    }
    public static void glib_autoptr_cleanup_GtkBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.glib_listautoptr_cleanup_GtkBox$MH,"glib_listautoptr_cleanup_GtkBox");
    }
    public static void glib_listautoptr_cleanup_GtkBox ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.glib_slistautoptr_cleanup_GtkBox$MH,"glib_slistautoptr_cleanup_GtkBox");
    }
    public static void glib_slistautoptr_cleanup_GtkBox ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.glib_queueautoptr_cleanup_GtkBox$MH,"glib_queueautoptr_cleanup_GtkBox");
    }
    public static void glib_queueautoptr_cleanup_GtkBox ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkBox$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkBuildable_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBuildable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBuildable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBuildable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkBuildable$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.glib_autoptr_clear_GtkBuildable$MH,"glib_autoptr_clear_GtkBuildable");
    }
    public static void glib_autoptr_clear_GtkBuildable ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkBuildable$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkBuildable$MH() {
        return RuntimeHelper.requireNonNull(constants$2186.glib_autoptr_cleanup_GtkBuildable$MH,"glib_autoptr_cleanup_GtkBuildable");
    }
    public static void glib_autoptr_cleanup_GtkBuildable ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkBuildable$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkBuildable$MH() {
        return RuntimeHelper.requireNonNull(constants$2187.glib_listautoptr_cleanup_GtkBuildable$MH,"glib_listautoptr_cleanup_GtkBuildable");
    }
    public static void glib_listautoptr_cleanup_GtkBuildable ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkBuildable$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkBuildable$MH() {
        return RuntimeHelper.requireNonNull(constants$2187.glib_slistautoptr_cleanup_GtkBuildable$MH,"glib_slistautoptr_cleanup_GtkBuildable");
    }
    public static void glib_slistautoptr_cleanup_GtkBuildable ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkBuildable$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkBuildable$MH() {
        return RuntimeHelper.requireNonNull(constants$2187.glib_queueautoptr_cleanup_GtkBuildable$MH,"glib_queueautoptr_cleanup_GtkBuildable");
    }
    public static void glib_queueautoptr_cleanup_GtkBuildable ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkBuildable$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkBuilder_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBuilder_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBuilder_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBuilder_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$2187.glib_autoptr_clear_GtkBuilder$MH,"glib_autoptr_clear_GtkBuilder");
    }
    public static void glib_autoptr_clear_GtkBuilder ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkBuilder$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$2187.glib_autoptr_cleanup_GtkBuilder$MH,"glib_autoptr_cleanup_GtkBuilder");
    }
    public static void glib_autoptr_cleanup_GtkBuilder ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkBuilder$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$2187.glib_listautoptr_cleanup_GtkBuilder$MH,"glib_listautoptr_cleanup_GtkBuilder");
    }
    public static void glib_listautoptr_cleanup_GtkBuilder ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkBuilder$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$2188.glib_slistautoptr_cleanup_GtkBuilder$MH,"glib_slistautoptr_cleanup_GtkBuilder");
    }
    public static void glib_slistautoptr_cleanup_GtkBuilder ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkBuilder$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkBuilder$MH() {
        return RuntimeHelper.requireNonNull(constants$2188.glib_queueautoptr_cleanup_GtkBuilder$MH,"glib_queueautoptr_cleanup_GtkBuilder");
    }
    public static void glib_queueautoptr_cleanup_GtkBuilder ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkBuilder$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2188.glib_autoptr_clear_GtkButton$MH,"glib_autoptr_clear_GtkButton");
    }
    public static void glib_autoptr_clear_GtkButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2188.glib_autoptr_cleanup_GtkButton$MH,"glib_autoptr_cleanup_GtkButton");
    }
    public static void glib_autoptr_cleanup_GtkButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2188.glib_listautoptr_cleanup_GtkButton$MH,"glib_listautoptr_cleanup_GtkButton");
    }
    public static void glib_listautoptr_cleanup_GtkButton ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2188.glib_slistautoptr_cleanup_GtkButton$MH,"glib_slistautoptr_cleanup_GtkButton");
    }
    public static void glib_slistautoptr_cleanup_GtkButton ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2189.glib_queueautoptr_cleanup_GtkButton$MH,"glib_queueautoptr_cleanup_GtkButton");
    }
    public static void glib_queueautoptr_cleanup_GtkButton ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkButton$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkButtonBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkButtonBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkButtonBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkButtonBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkButtonBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2189.glib_autoptr_clear_GtkButtonBox$MH,"glib_autoptr_clear_GtkButtonBox");
    }
    public static void glib_autoptr_clear_GtkButtonBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkButtonBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkButtonBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2189.glib_autoptr_cleanup_GtkButtonBox$MH,"glib_autoptr_cleanup_GtkButtonBox");
    }
    public static void glib_autoptr_cleanup_GtkButtonBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkButtonBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkButtonBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2189.glib_listautoptr_cleanup_GtkButtonBox$MH,"glib_listautoptr_cleanup_GtkButtonBox");
    }
    public static void glib_listautoptr_cleanup_GtkButtonBox ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkButtonBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkButtonBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2189.glib_slistautoptr_cleanup_GtkButtonBox$MH,"glib_slistautoptr_cleanup_GtkButtonBox");
    }
    public static void glib_slistautoptr_cleanup_GtkButtonBox ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkButtonBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkButtonBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2189.glib_queueautoptr_cleanup_GtkButtonBox$MH,"glib_queueautoptr_cleanup_GtkButtonBox");
    }
    public static void glib_queueautoptr_cleanup_GtkButtonBox ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkButtonBox$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCalendar_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCalendar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCalendar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCalendar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCalendar$MH() {
        return RuntimeHelper.requireNonNull(constants$2190.glib_autoptr_clear_GtkCalendar$MH,"glib_autoptr_clear_GtkCalendar");
    }
    public static void glib_autoptr_clear_GtkCalendar ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCalendar$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCalendar$MH() {
        return RuntimeHelper.requireNonNull(constants$2190.glib_autoptr_cleanup_GtkCalendar$MH,"glib_autoptr_cleanup_GtkCalendar");
    }
    public static void glib_autoptr_cleanup_GtkCalendar ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCalendar$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCalendar$MH() {
        return RuntimeHelper.requireNonNull(constants$2190.glib_listautoptr_cleanup_GtkCalendar$MH,"glib_listautoptr_cleanup_GtkCalendar");
    }
    public static void glib_listautoptr_cleanup_GtkCalendar ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCalendar$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCalendar$MH() {
        return RuntimeHelper.requireNonNull(constants$2190.glib_slistautoptr_cleanup_GtkCalendar$MH,"glib_slistautoptr_cleanup_GtkCalendar");
    }
    public static void glib_slistautoptr_cleanup_GtkCalendar ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCalendar$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCalendar$MH() {
        return RuntimeHelper.requireNonNull(constants$2190.glib_queueautoptr_cleanup_GtkCalendar$MH,"glib_queueautoptr_cleanup_GtkCalendar");
    }
    public static void glib_queueautoptr_cleanup_GtkCalendar ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCalendar$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellArea_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellArea_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellArea_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellArea_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2190.glib_autoptr_clear_GtkCellArea$MH,"glib_autoptr_clear_GtkCellArea");
    }
    public static void glib_autoptr_clear_GtkCellArea ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellArea$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2191.glib_autoptr_cleanup_GtkCellArea$MH,"glib_autoptr_cleanup_GtkCellArea");
    }
    public static void glib_autoptr_cleanup_GtkCellArea ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellArea$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2191.glib_listautoptr_cleanup_GtkCellArea$MH,"glib_listautoptr_cleanup_GtkCellArea");
    }
    public static void glib_listautoptr_cleanup_GtkCellArea ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellArea$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2191.glib_slistautoptr_cleanup_GtkCellArea$MH,"glib_slistautoptr_cleanup_GtkCellArea");
    }
    public static void glib_slistautoptr_cleanup_GtkCellArea ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellArea$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2191.glib_queueautoptr_cleanup_GtkCellArea$MH,"glib_queueautoptr_cleanup_GtkCellArea");
    }
    public static void glib_queueautoptr_cleanup_GtkCellArea ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellArea$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellAreaBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellAreaBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellAreaBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellAreaBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellAreaBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2191.glib_autoptr_clear_GtkCellAreaBox$MH,"glib_autoptr_clear_GtkCellAreaBox");
    }
    public static void glib_autoptr_clear_GtkCellAreaBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellAreaBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellAreaBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2191.glib_autoptr_cleanup_GtkCellAreaBox$MH,"glib_autoptr_cleanup_GtkCellAreaBox");
    }
    public static void glib_autoptr_cleanup_GtkCellAreaBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellAreaBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellAreaBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2192.glib_listautoptr_cleanup_GtkCellAreaBox$MH,"glib_listautoptr_cleanup_GtkCellAreaBox");
    }
    public static void glib_listautoptr_cleanup_GtkCellAreaBox ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellAreaBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellAreaBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2192.glib_slistautoptr_cleanup_GtkCellAreaBox$MH,"glib_slistautoptr_cleanup_GtkCellAreaBox");
    }
    public static void glib_slistautoptr_cleanup_GtkCellAreaBox ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellAreaBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellAreaBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2192.glib_queueautoptr_cleanup_GtkCellAreaBox$MH,"glib_queueautoptr_cleanup_GtkCellAreaBox");
    }
    public static void glib_queueautoptr_cleanup_GtkCellAreaBox ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellAreaBox$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellAreaContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellAreaContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellAreaContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellAreaContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellAreaContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2192.glib_autoptr_clear_GtkCellAreaContext$MH,"glib_autoptr_clear_GtkCellAreaContext");
    }
    public static void glib_autoptr_clear_GtkCellAreaContext ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellAreaContext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellAreaContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2192.glib_autoptr_cleanup_GtkCellAreaContext$MH,"glib_autoptr_cleanup_GtkCellAreaContext");
    }
    public static void glib_autoptr_cleanup_GtkCellAreaContext ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellAreaContext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellAreaContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2192.glib_listautoptr_cleanup_GtkCellAreaContext$MH,"glib_listautoptr_cleanup_GtkCellAreaContext");
    }
    public static void glib_listautoptr_cleanup_GtkCellAreaContext ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellAreaContext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellAreaContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2193.glib_slistautoptr_cleanup_GtkCellAreaContext$MH,"glib_slistautoptr_cleanup_GtkCellAreaContext");
    }
    public static void glib_slistautoptr_cleanup_GtkCellAreaContext ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellAreaContext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellAreaContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2193.glib_queueautoptr_cleanup_GtkCellAreaContext$MH,"glib_queueautoptr_cleanup_GtkCellAreaContext");
    }
    public static void glib_queueautoptr_cleanup_GtkCellAreaContext ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellAreaContext$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellEditable_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellEditable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellEditable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellEditable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellEditable$MH() {
        return RuntimeHelper.requireNonNull(constants$2193.glib_autoptr_clear_GtkCellEditable$MH,"glib_autoptr_clear_GtkCellEditable");
    }
    public static void glib_autoptr_clear_GtkCellEditable ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellEditable$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellEditable$MH() {
        return RuntimeHelper.requireNonNull(constants$2193.glib_autoptr_cleanup_GtkCellEditable$MH,"glib_autoptr_cleanup_GtkCellEditable");
    }
    public static void glib_autoptr_cleanup_GtkCellEditable ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellEditable$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellEditable$MH() {
        return RuntimeHelper.requireNonNull(constants$2193.glib_listautoptr_cleanup_GtkCellEditable$MH,"glib_listautoptr_cleanup_GtkCellEditable");
    }
    public static void glib_listautoptr_cleanup_GtkCellEditable ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellEditable$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellEditable$MH() {
        return RuntimeHelper.requireNonNull(constants$2193.glib_slistautoptr_cleanup_GtkCellEditable$MH,"glib_slistautoptr_cleanup_GtkCellEditable");
    }
    public static void glib_slistautoptr_cleanup_GtkCellEditable ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellEditable$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellEditable$MH() {
        return RuntimeHelper.requireNonNull(constants$2194.glib_queueautoptr_cleanup_GtkCellEditable$MH,"glib_queueautoptr_cleanup_GtkCellEditable");
    }
    public static void glib_queueautoptr_cleanup_GtkCellEditable ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellEditable$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellLayout_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellLayout_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellLayout_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellLayout_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$2194.glib_autoptr_clear_GtkCellLayout$MH,"glib_autoptr_clear_GtkCellLayout");
    }
    public static void glib_autoptr_clear_GtkCellLayout ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellLayout$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$2194.glib_autoptr_cleanup_GtkCellLayout$MH,"glib_autoptr_cleanup_GtkCellLayout");
    }
    public static void glib_autoptr_cleanup_GtkCellLayout ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellLayout$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$2194.glib_listautoptr_cleanup_GtkCellLayout$MH,"glib_listautoptr_cleanup_GtkCellLayout");
    }
    public static void glib_listautoptr_cleanup_GtkCellLayout ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellLayout$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$2194.glib_slistautoptr_cleanup_GtkCellLayout$MH,"glib_slistautoptr_cleanup_GtkCellLayout");
    }
    public static void glib_slistautoptr_cleanup_GtkCellLayout ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellLayout$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellLayout$MH() {
        return RuntimeHelper.requireNonNull(constants$2194.glib_queueautoptr_cleanup_GtkCellLayout$MH,"glib_queueautoptr_cleanup_GtkCellLayout");
    }
    public static void glib_queueautoptr_cleanup_GtkCellLayout ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellLayout$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellRenderer_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRenderer_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRenderer_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRenderer_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$2195.glib_autoptr_clear_GtkCellRenderer$MH,"glib_autoptr_clear_GtkCellRenderer");
    }
    public static void glib_autoptr_clear_GtkCellRenderer ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellRenderer$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$2195.glib_autoptr_cleanup_GtkCellRenderer$MH,"glib_autoptr_cleanup_GtkCellRenderer");
    }
    public static void glib_autoptr_cleanup_GtkCellRenderer ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellRenderer$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$2195.glib_listautoptr_cleanup_GtkCellRenderer$MH,"glib_listautoptr_cleanup_GtkCellRenderer");
    }
    public static void glib_listautoptr_cleanup_GtkCellRenderer ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellRenderer$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$2195.glib_slistautoptr_cleanup_GtkCellRenderer$MH,"glib_slistautoptr_cleanup_GtkCellRenderer");
    }
    public static void glib_slistautoptr_cleanup_GtkCellRenderer ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellRenderer$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellRenderer$MH() {
        return RuntimeHelper.requireNonNull(constants$2195.glib_queueautoptr_cleanup_GtkCellRenderer$MH,"glib_queueautoptr_cleanup_GtkCellRenderer");
    }
    public static void glib_queueautoptr_cleanup_GtkCellRenderer ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellRenderer$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellRendererAccel_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererAccel_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererAccel_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererAccel_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellRendererAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$2195.glib_autoptr_clear_GtkCellRendererAccel$MH,"glib_autoptr_clear_GtkCellRendererAccel");
    }
    public static void glib_autoptr_clear_GtkCellRendererAccel ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellRendererAccel$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellRendererAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$2196.glib_autoptr_cleanup_GtkCellRendererAccel$MH,"glib_autoptr_cleanup_GtkCellRendererAccel");
    }
    public static void glib_autoptr_cleanup_GtkCellRendererAccel ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellRendererAccel$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellRendererAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$2196.glib_listautoptr_cleanup_GtkCellRendererAccel$MH,"glib_listautoptr_cleanup_GtkCellRendererAccel");
    }
    public static void glib_listautoptr_cleanup_GtkCellRendererAccel ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellRendererAccel$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellRendererAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$2196.glib_slistautoptr_cleanup_GtkCellRendererAccel$MH,"glib_slistautoptr_cleanup_GtkCellRendererAccel");
    }
    public static void glib_slistautoptr_cleanup_GtkCellRendererAccel ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellRendererAccel$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellRendererAccel$MH() {
        return RuntimeHelper.requireNonNull(constants$2196.glib_queueautoptr_cleanup_GtkCellRendererAccel$MH,"glib_queueautoptr_cleanup_GtkCellRendererAccel");
    }
    public static void glib_queueautoptr_cleanup_GtkCellRendererAccel ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellRendererAccel$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellRendererCombo_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererCombo_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererCombo_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererCombo_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellRendererCombo$MH() {
        return RuntimeHelper.requireNonNull(constants$2196.glib_autoptr_clear_GtkCellRendererCombo$MH,"glib_autoptr_clear_GtkCellRendererCombo");
    }
    public static void glib_autoptr_clear_GtkCellRendererCombo ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellRendererCombo$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellRendererCombo$MH() {
        return RuntimeHelper.requireNonNull(constants$2196.glib_autoptr_cleanup_GtkCellRendererCombo$MH,"glib_autoptr_cleanup_GtkCellRendererCombo");
    }
    public static void glib_autoptr_cleanup_GtkCellRendererCombo ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellRendererCombo$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellRendererCombo$MH() {
        return RuntimeHelper.requireNonNull(constants$2197.glib_listautoptr_cleanup_GtkCellRendererCombo$MH,"glib_listautoptr_cleanup_GtkCellRendererCombo");
    }
    public static void glib_listautoptr_cleanup_GtkCellRendererCombo ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellRendererCombo$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellRendererCombo$MH() {
        return RuntimeHelper.requireNonNull(constants$2197.glib_slistautoptr_cleanup_GtkCellRendererCombo$MH,"glib_slistautoptr_cleanup_GtkCellRendererCombo");
    }
    public static void glib_slistautoptr_cleanup_GtkCellRendererCombo ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellRendererCombo$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellRendererCombo$MH() {
        return RuntimeHelper.requireNonNull(constants$2197.glib_queueautoptr_cleanup_GtkCellRendererCombo$MH,"glib_queueautoptr_cleanup_GtkCellRendererCombo");
    }
    public static void glib_queueautoptr_cleanup_GtkCellRendererCombo ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellRendererCombo$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellRendererPixbuf_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererPixbuf_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererPixbuf_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererPixbuf_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellRendererPixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$2197.glib_autoptr_clear_GtkCellRendererPixbuf$MH,"glib_autoptr_clear_GtkCellRendererPixbuf");
    }
    public static void glib_autoptr_clear_GtkCellRendererPixbuf ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellRendererPixbuf$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellRendererPixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$2197.glib_autoptr_cleanup_GtkCellRendererPixbuf$MH,"glib_autoptr_cleanup_GtkCellRendererPixbuf");
    }
    public static void glib_autoptr_cleanup_GtkCellRendererPixbuf ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellRendererPixbuf$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellRendererPixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$2197.glib_listautoptr_cleanup_GtkCellRendererPixbuf$MH,"glib_listautoptr_cleanup_GtkCellRendererPixbuf");
    }
    public static void glib_listautoptr_cleanup_GtkCellRendererPixbuf ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellRendererPixbuf$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellRendererPixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$2198.glib_slistautoptr_cleanup_GtkCellRendererPixbuf$MH,"glib_slistautoptr_cleanup_GtkCellRendererPixbuf");
    }
    public static void glib_slistautoptr_cleanup_GtkCellRendererPixbuf ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellRendererPixbuf$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellRendererPixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$2198.glib_queueautoptr_cleanup_GtkCellRendererPixbuf$MH,"glib_queueautoptr_cleanup_GtkCellRendererPixbuf");
    }
    public static void glib_queueautoptr_cleanup_GtkCellRendererPixbuf ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellRendererPixbuf$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellRendererProgress_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererProgress_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererProgress_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererProgress_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellRendererProgress$MH() {
        return RuntimeHelper.requireNonNull(constants$2198.glib_autoptr_clear_GtkCellRendererProgress$MH,"glib_autoptr_clear_GtkCellRendererProgress");
    }
    public static void glib_autoptr_clear_GtkCellRendererProgress ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellRendererProgress$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellRendererProgress$MH() {
        return RuntimeHelper.requireNonNull(constants$2198.glib_autoptr_cleanup_GtkCellRendererProgress$MH,"glib_autoptr_cleanup_GtkCellRendererProgress");
    }
    public static void glib_autoptr_cleanup_GtkCellRendererProgress ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellRendererProgress$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellRendererProgress$MH() {
        return RuntimeHelper.requireNonNull(constants$2198.glib_listautoptr_cleanup_GtkCellRendererProgress$MH,"glib_listautoptr_cleanup_GtkCellRendererProgress");
    }
    public static void glib_listautoptr_cleanup_GtkCellRendererProgress ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellRendererProgress$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellRendererProgress$MH() {
        return RuntimeHelper.requireNonNull(constants$2198.glib_slistautoptr_cleanup_GtkCellRendererProgress$MH,"glib_slistautoptr_cleanup_GtkCellRendererProgress");
    }
    public static void glib_slistautoptr_cleanup_GtkCellRendererProgress ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellRendererProgress$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellRendererProgress$MH() {
        return RuntimeHelper.requireNonNull(constants$2199.glib_queueautoptr_cleanup_GtkCellRendererProgress$MH,"glib_queueautoptr_cleanup_GtkCellRendererProgress");
    }
    public static void glib_queueautoptr_cleanup_GtkCellRendererProgress ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellRendererProgress$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellRendererSpin_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererSpin_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererSpin_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererSpin_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellRendererSpin$MH() {
        return RuntimeHelper.requireNonNull(constants$2199.glib_autoptr_clear_GtkCellRendererSpin$MH,"glib_autoptr_clear_GtkCellRendererSpin");
    }
    public static void glib_autoptr_clear_GtkCellRendererSpin ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellRendererSpin$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellRendererSpin$MH() {
        return RuntimeHelper.requireNonNull(constants$2199.glib_autoptr_cleanup_GtkCellRendererSpin$MH,"glib_autoptr_cleanup_GtkCellRendererSpin");
    }
    public static void glib_autoptr_cleanup_GtkCellRendererSpin ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellRendererSpin$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellRendererSpin$MH() {
        return RuntimeHelper.requireNonNull(constants$2199.glib_listautoptr_cleanup_GtkCellRendererSpin$MH,"glib_listautoptr_cleanup_GtkCellRendererSpin");
    }
    public static void glib_listautoptr_cleanup_GtkCellRendererSpin ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellRendererSpin$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellRendererSpin$MH() {
        return RuntimeHelper.requireNonNull(constants$2199.glib_slistautoptr_cleanup_GtkCellRendererSpin$MH,"glib_slistautoptr_cleanup_GtkCellRendererSpin");
    }
    public static void glib_slistautoptr_cleanup_GtkCellRendererSpin ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellRendererSpin$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellRendererSpin$MH() {
        return RuntimeHelper.requireNonNull(constants$2199.glib_queueautoptr_cleanup_GtkCellRendererSpin$MH,"glib_queueautoptr_cleanup_GtkCellRendererSpin");
    }
    public static void glib_queueautoptr_cleanup_GtkCellRendererSpin ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellRendererSpin$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellRendererSpinner_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererSpinner_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererSpinner_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererSpinner_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellRendererSpinner$MH() {
        return RuntimeHelper.requireNonNull(constants$2200.glib_autoptr_clear_GtkCellRendererSpinner$MH,"glib_autoptr_clear_GtkCellRendererSpinner");
    }
    public static void glib_autoptr_clear_GtkCellRendererSpinner ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellRendererSpinner$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellRendererSpinner$MH() {
        return RuntimeHelper.requireNonNull(constants$2200.glib_autoptr_cleanup_GtkCellRendererSpinner$MH,"glib_autoptr_cleanup_GtkCellRendererSpinner");
    }
    public static void glib_autoptr_cleanup_GtkCellRendererSpinner ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellRendererSpinner$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellRendererSpinner$MH() {
        return RuntimeHelper.requireNonNull(constants$2200.glib_listautoptr_cleanup_GtkCellRendererSpinner$MH,"glib_listautoptr_cleanup_GtkCellRendererSpinner");
    }
    public static void glib_listautoptr_cleanup_GtkCellRendererSpinner ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellRendererSpinner$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellRendererSpinner$MH() {
        return RuntimeHelper.requireNonNull(constants$2200.glib_slistautoptr_cleanup_GtkCellRendererSpinner$MH,"glib_slistautoptr_cleanup_GtkCellRendererSpinner");
    }
    public static void glib_slistautoptr_cleanup_GtkCellRendererSpinner ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellRendererSpinner$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellRendererSpinner$MH() {
        return RuntimeHelper.requireNonNull(constants$2200.glib_queueautoptr_cleanup_GtkCellRendererSpinner$MH,"glib_queueautoptr_cleanup_GtkCellRendererSpinner");
    }
    public static void glib_queueautoptr_cleanup_GtkCellRendererSpinner ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellRendererSpinner$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellRendererText_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererText_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererText_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererText_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellRendererText$MH() {
        return RuntimeHelper.requireNonNull(constants$2200.glib_autoptr_clear_GtkCellRendererText$MH,"glib_autoptr_clear_GtkCellRendererText");
    }
    public static void glib_autoptr_clear_GtkCellRendererText ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellRendererText$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellRendererText$MH() {
        return RuntimeHelper.requireNonNull(constants$2201.glib_autoptr_cleanup_GtkCellRendererText$MH,"glib_autoptr_cleanup_GtkCellRendererText");
    }
    public static void glib_autoptr_cleanup_GtkCellRendererText ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellRendererText$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellRendererText$MH() {
        return RuntimeHelper.requireNonNull(constants$2201.glib_listautoptr_cleanup_GtkCellRendererText$MH,"glib_listautoptr_cleanup_GtkCellRendererText");
    }
    public static void glib_listautoptr_cleanup_GtkCellRendererText ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellRendererText$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellRendererText$MH() {
        return RuntimeHelper.requireNonNull(constants$2201.glib_slistautoptr_cleanup_GtkCellRendererText$MH,"glib_slistautoptr_cleanup_GtkCellRendererText");
    }
    public static void glib_slistautoptr_cleanup_GtkCellRendererText ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellRendererText$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellRendererText$MH() {
        return RuntimeHelper.requireNonNull(constants$2201.glib_queueautoptr_cleanup_GtkCellRendererText$MH,"glib_queueautoptr_cleanup_GtkCellRendererText");
    }
    public static void glib_queueautoptr_cleanup_GtkCellRendererText ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellRendererText$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellRendererToggle_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererToggle_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererToggle_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellRendererToggle_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellRendererToggle$MH() {
        return RuntimeHelper.requireNonNull(constants$2201.glib_autoptr_clear_GtkCellRendererToggle$MH,"glib_autoptr_clear_GtkCellRendererToggle");
    }
    public static void glib_autoptr_clear_GtkCellRendererToggle ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellRendererToggle$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellRendererToggle$MH() {
        return RuntimeHelper.requireNonNull(constants$2201.glib_autoptr_cleanup_GtkCellRendererToggle$MH,"glib_autoptr_cleanup_GtkCellRendererToggle");
    }
    public static void glib_autoptr_cleanup_GtkCellRendererToggle ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellRendererToggle$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellRendererToggle$MH() {
        return RuntimeHelper.requireNonNull(constants$2202.glib_listautoptr_cleanup_GtkCellRendererToggle$MH,"glib_listautoptr_cleanup_GtkCellRendererToggle");
    }
    public static void glib_listautoptr_cleanup_GtkCellRendererToggle ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellRendererToggle$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellRendererToggle$MH() {
        return RuntimeHelper.requireNonNull(constants$2202.glib_slistautoptr_cleanup_GtkCellRendererToggle$MH,"glib_slistautoptr_cleanup_GtkCellRendererToggle");
    }
    public static void glib_slistautoptr_cleanup_GtkCellRendererToggle ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellRendererToggle$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellRendererToggle$MH() {
        return RuntimeHelper.requireNonNull(constants$2202.glib_queueautoptr_cleanup_GtkCellRendererToggle$MH,"glib_queueautoptr_cleanup_GtkCellRendererToggle");
    }
    public static void glib_queueautoptr_cleanup_GtkCellRendererToggle ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellRendererToggle$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCellView_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellView_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellView_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCellView_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCellView$MH() {
        return RuntimeHelper.requireNonNull(constants$2202.glib_autoptr_clear_GtkCellView$MH,"glib_autoptr_clear_GtkCellView");
    }
    public static void glib_autoptr_clear_GtkCellView ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCellView$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCellView$MH() {
        return RuntimeHelper.requireNonNull(constants$2202.glib_autoptr_cleanup_GtkCellView$MH,"glib_autoptr_cleanup_GtkCellView");
    }
    public static void glib_autoptr_cleanup_GtkCellView ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCellView$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCellView$MH() {
        return RuntimeHelper.requireNonNull(constants$2202.glib_listautoptr_cleanup_GtkCellView$MH,"glib_listautoptr_cleanup_GtkCellView");
    }
    public static void glib_listautoptr_cleanup_GtkCellView ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCellView$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCellView$MH() {
        return RuntimeHelper.requireNonNull(constants$2203.glib_slistautoptr_cleanup_GtkCellView$MH,"glib_slistautoptr_cleanup_GtkCellView");
    }
    public static void glib_slistautoptr_cleanup_GtkCellView ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCellView$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCellView$MH() {
        return RuntimeHelper.requireNonNull(constants$2203.glib_queueautoptr_cleanup_GtkCellView$MH,"glib_queueautoptr_cleanup_GtkCellView");
    }
    public static void glib_queueautoptr_cleanup_GtkCellView ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCellView$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCheckButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCheckButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCheckButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCheckButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCheckButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2203.glib_autoptr_clear_GtkCheckButton$MH,"glib_autoptr_clear_GtkCheckButton");
    }
    public static void glib_autoptr_clear_GtkCheckButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCheckButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCheckButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2203.glib_autoptr_cleanup_GtkCheckButton$MH,"glib_autoptr_cleanup_GtkCheckButton");
    }
    public static void glib_autoptr_cleanup_GtkCheckButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCheckButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCheckButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2203.glib_listautoptr_cleanup_GtkCheckButton$MH,"glib_listautoptr_cleanup_GtkCheckButton");
    }
    public static void glib_listautoptr_cleanup_GtkCheckButton ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCheckButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCheckButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2203.glib_slistautoptr_cleanup_GtkCheckButton$MH,"glib_slistautoptr_cleanup_GtkCheckButton");
    }
    public static void glib_slistautoptr_cleanup_GtkCheckButton ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCheckButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCheckButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2204.glib_queueautoptr_cleanup_GtkCheckButton$MH,"glib_queueautoptr_cleanup_GtkCheckButton");
    }
    public static void glib_queueautoptr_cleanup_GtkCheckButton ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCheckButton$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCheckMenuItem_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCheckMenuItem_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCheckMenuItem_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCheckMenuItem_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCheckMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$2204.glib_autoptr_clear_GtkCheckMenuItem$MH,"glib_autoptr_clear_GtkCheckMenuItem");
    }
    public static void glib_autoptr_clear_GtkCheckMenuItem ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCheckMenuItem$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCheckMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$2204.glib_autoptr_cleanup_GtkCheckMenuItem$MH,"glib_autoptr_cleanup_GtkCheckMenuItem");
    }
    public static void glib_autoptr_cleanup_GtkCheckMenuItem ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCheckMenuItem$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCheckMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$2204.glib_listautoptr_cleanup_GtkCheckMenuItem$MH,"glib_listautoptr_cleanup_GtkCheckMenuItem");
    }
    public static void glib_listautoptr_cleanup_GtkCheckMenuItem ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCheckMenuItem$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCheckMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$2204.glib_slistautoptr_cleanup_GtkCheckMenuItem$MH,"glib_slistautoptr_cleanup_GtkCheckMenuItem");
    }
    public static void glib_slistautoptr_cleanup_GtkCheckMenuItem ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCheckMenuItem$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCheckMenuItem$MH() {
        return RuntimeHelper.requireNonNull(constants$2204.glib_queueautoptr_cleanup_GtkCheckMenuItem$MH,"glib_queueautoptr_cleanup_GtkCheckMenuItem");
    }
    public static void glib_queueautoptr_cleanup_GtkCheckMenuItem ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCheckMenuItem$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkClipboard_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkClipboard_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkClipboard_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkClipboard_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$2205.glib_autoptr_clear_GtkClipboard$MH,"glib_autoptr_clear_GtkClipboard");
    }
    public static void glib_autoptr_clear_GtkClipboard ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkClipboard$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$2205.glib_autoptr_cleanup_GtkClipboard$MH,"glib_autoptr_cleanup_GtkClipboard");
    }
    public static void glib_autoptr_cleanup_GtkClipboard ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkClipboard$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$2205.glib_listautoptr_cleanup_GtkClipboard$MH,"glib_listautoptr_cleanup_GtkClipboard");
    }
    public static void glib_listautoptr_cleanup_GtkClipboard ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkClipboard$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$2205.glib_slistautoptr_cleanup_GtkClipboard$MH,"glib_slistautoptr_cleanup_GtkClipboard");
    }
    public static void glib_slistautoptr_cleanup_GtkClipboard ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkClipboard$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkClipboard$MH() {
        return RuntimeHelper.requireNonNull(constants$2205.glib_queueautoptr_cleanup_GtkClipboard$MH,"glib_queueautoptr_cleanup_GtkClipboard");
    }
    public static void glib_queueautoptr_cleanup_GtkClipboard ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkClipboard$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkColorButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkColorButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2205.glib_autoptr_clear_GtkColorButton$MH,"glib_autoptr_clear_GtkColorButton");
    }
    public static void glib_autoptr_clear_GtkColorButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkColorButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkColorButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2206.glib_autoptr_cleanup_GtkColorButton$MH,"glib_autoptr_cleanup_GtkColorButton");
    }
    public static void glib_autoptr_cleanup_GtkColorButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkColorButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkColorButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2206.glib_listautoptr_cleanup_GtkColorButton$MH,"glib_listautoptr_cleanup_GtkColorButton");
    }
    public static void glib_listautoptr_cleanup_GtkColorButton ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkColorButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkColorButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2206.glib_slistautoptr_cleanup_GtkColorButton$MH,"glib_slistautoptr_cleanup_GtkColorButton");
    }
    public static void glib_slistautoptr_cleanup_GtkColorButton ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkColorButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkColorButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2206.glib_queueautoptr_cleanup_GtkColorButton$MH,"glib_queueautoptr_cleanup_GtkColorButton");
    }
    public static void glib_queueautoptr_cleanup_GtkColorButton ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkColorButton$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkColorChooser_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorChooser_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorChooser_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorChooser_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkColorChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2206.glib_autoptr_clear_GtkColorChooser$MH,"glib_autoptr_clear_GtkColorChooser");
    }
    public static void glib_autoptr_clear_GtkColorChooser ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkColorChooser$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkColorChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2206.glib_autoptr_cleanup_GtkColorChooser$MH,"glib_autoptr_cleanup_GtkColorChooser");
    }
    public static void glib_autoptr_cleanup_GtkColorChooser ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkColorChooser$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkColorChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2207.glib_listautoptr_cleanup_GtkColorChooser$MH,"glib_listautoptr_cleanup_GtkColorChooser");
    }
    public static void glib_listautoptr_cleanup_GtkColorChooser ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkColorChooser$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkColorChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2207.glib_slistautoptr_cleanup_GtkColorChooser$MH,"glib_slistautoptr_cleanup_GtkColorChooser");
    }
    public static void glib_slistautoptr_cleanup_GtkColorChooser ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkColorChooser$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkColorChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2207.glib_queueautoptr_cleanup_GtkColorChooser$MH,"glib_queueautoptr_cleanup_GtkColorChooser");
    }
    public static void glib_queueautoptr_cleanup_GtkColorChooser ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkColorChooser$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkColorChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkColorChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2207.glib_autoptr_clear_GtkColorChooserDialog$MH,"glib_autoptr_clear_GtkColorChooserDialog");
    }
    public static void glib_autoptr_clear_GtkColorChooserDialog ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkColorChooserDialog$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkColorChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2207.glib_autoptr_cleanup_GtkColorChooserDialog$MH,"glib_autoptr_cleanup_GtkColorChooserDialog");
    }
    public static void glib_autoptr_cleanup_GtkColorChooserDialog ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkColorChooserDialog$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkColorChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2207.glib_listautoptr_cleanup_GtkColorChooserDialog$MH,"glib_listautoptr_cleanup_GtkColorChooserDialog");
    }
    public static void glib_listautoptr_cleanup_GtkColorChooserDialog ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkColorChooserDialog$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkColorChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2208.glib_slistautoptr_cleanup_GtkColorChooserDialog$MH,"glib_slistautoptr_cleanup_GtkColorChooserDialog");
    }
    public static void glib_slistautoptr_cleanup_GtkColorChooserDialog ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkColorChooserDialog$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkColorChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2208.glib_queueautoptr_cleanup_GtkColorChooserDialog$MH,"glib_queueautoptr_cleanup_GtkColorChooserDialog");
    }
    public static void glib_queueautoptr_cleanup_GtkColorChooserDialog ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkColorChooserDialog$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkColorChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkColorChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkColorChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2208.glib_autoptr_clear_GtkColorChooserWidget$MH,"glib_autoptr_clear_GtkColorChooserWidget");
    }
    public static void glib_autoptr_clear_GtkColorChooserWidget ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkColorChooserWidget$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkColorChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2208.glib_autoptr_cleanup_GtkColorChooserWidget$MH,"glib_autoptr_cleanup_GtkColorChooserWidget");
    }
    public static void glib_autoptr_cleanup_GtkColorChooserWidget ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkColorChooserWidget$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkColorChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2208.glib_listautoptr_cleanup_GtkColorChooserWidget$MH,"glib_listautoptr_cleanup_GtkColorChooserWidget");
    }
    public static void glib_listautoptr_cleanup_GtkColorChooserWidget ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkColorChooserWidget$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkColorChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2208.glib_slistautoptr_cleanup_GtkColorChooserWidget$MH,"glib_slistautoptr_cleanup_GtkColorChooserWidget");
    }
    public static void glib_slistautoptr_cleanup_GtkColorChooserWidget ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkColorChooserWidget$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkColorChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2209.glib_queueautoptr_cleanup_GtkColorChooserWidget$MH,"glib_queueautoptr_cleanup_GtkColorChooserWidget");
    }
    public static void glib_queueautoptr_cleanup_GtkColorChooserWidget ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkColorChooserWidget$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkComboBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkComboBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkComboBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkComboBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkComboBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2209.glib_autoptr_clear_GtkComboBox$MH,"glib_autoptr_clear_GtkComboBox");
    }
    public static void glib_autoptr_clear_GtkComboBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkComboBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkComboBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2209.glib_autoptr_cleanup_GtkComboBox$MH,"glib_autoptr_cleanup_GtkComboBox");
    }
    public static void glib_autoptr_cleanup_GtkComboBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkComboBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkComboBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2209.glib_listautoptr_cleanup_GtkComboBox$MH,"glib_listautoptr_cleanup_GtkComboBox");
    }
    public static void glib_listautoptr_cleanup_GtkComboBox ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkComboBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkComboBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2209.glib_slistautoptr_cleanup_GtkComboBox$MH,"glib_slistautoptr_cleanup_GtkComboBox");
    }
    public static void glib_slistautoptr_cleanup_GtkComboBox ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkComboBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkComboBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2209.glib_queueautoptr_cleanup_GtkComboBox$MH,"glib_queueautoptr_cleanup_GtkComboBox");
    }
    public static void glib_queueautoptr_cleanup_GtkComboBox ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkComboBox$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkComboBoxText_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkComboBoxText_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkComboBoxText_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkComboBoxText_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkComboBoxText$MH() {
        return RuntimeHelper.requireNonNull(constants$2210.glib_autoptr_clear_GtkComboBoxText$MH,"glib_autoptr_clear_GtkComboBoxText");
    }
    public static void glib_autoptr_clear_GtkComboBoxText ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkComboBoxText$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkComboBoxText$MH() {
        return RuntimeHelper.requireNonNull(constants$2210.glib_autoptr_cleanup_GtkComboBoxText$MH,"glib_autoptr_cleanup_GtkComboBoxText");
    }
    public static void glib_autoptr_cleanup_GtkComboBoxText ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkComboBoxText$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkComboBoxText$MH() {
        return RuntimeHelper.requireNonNull(constants$2210.glib_listautoptr_cleanup_GtkComboBoxText$MH,"glib_listautoptr_cleanup_GtkComboBoxText");
    }
    public static void glib_listautoptr_cleanup_GtkComboBoxText ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkComboBoxText$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkComboBoxText$MH() {
        return RuntimeHelper.requireNonNull(constants$2210.glib_slistautoptr_cleanup_GtkComboBoxText$MH,"glib_slistautoptr_cleanup_GtkComboBoxText");
    }
    public static void glib_slistautoptr_cleanup_GtkComboBoxText ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkComboBoxText$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkComboBoxText$MH() {
        return RuntimeHelper.requireNonNull(constants$2210.glib_queueautoptr_cleanup_GtkComboBoxText$MH,"glib_queueautoptr_cleanup_GtkComboBoxText");
    }
    public static void glib_queueautoptr_cleanup_GtkComboBoxText ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkComboBoxText$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkCssProvider_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCssProvider_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCssProvider_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkCssProvider_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkCssProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$2210.glib_autoptr_clear_GtkCssProvider$MH,"glib_autoptr_clear_GtkCssProvider");
    }
    public static void glib_autoptr_clear_GtkCssProvider ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkCssProvider$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkCssProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$2211.glib_autoptr_cleanup_GtkCssProvider$MH,"glib_autoptr_cleanup_GtkCssProvider");
    }
    public static void glib_autoptr_cleanup_GtkCssProvider ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkCssProvider$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkCssProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$2211.glib_listautoptr_cleanup_GtkCssProvider$MH,"glib_listautoptr_cleanup_GtkCssProvider");
    }
    public static void glib_listautoptr_cleanup_GtkCssProvider ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkCssProvider$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkCssProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$2211.glib_slistautoptr_cleanup_GtkCssProvider$MH,"glib_slistautoptr_cleanup_GtkCssProvider");
    }
    public static void glib_slistautoptr_cleanup_GtkCssProvider ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkCssProvider$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkCssProvider$MH() {
        return RuntimeHelper.requireNonNull(constants$2211.glib_queueautoptr_cleanup_GtkCssProvider$MH,"glib_queueautoptr_cleanup_GtkCssProvider");
    }
    public static void glib_queueautoptr_cleanup_GtkCssProvider ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkCssProvider$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkDrawingArea_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkDrawingArea_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkDrawingArea_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkDrawingArea_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkDrawingArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2211.glib_autoptr_clear_GtkDrawingArea$MH,"glib_autoptr_clear_GtkDrawingArea");
    }
    public static void glib_autoptr_clear_GtkDrawingArea ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkDrawingArea$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkDrawingArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2211.glib_autoptr_cleanup_GtkDrawingArea$MH,"glib_autoptr_cleanup_GtkDrawingArea");
    }
    public static void glib_autoptr_cleanup_GtkDrawingArea ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkDrawingArea$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkDrawingArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2212.glib_listautoptr_cleanup_GtkDrawingArea$MH,"glib_listautoptr_cleanup_GtkDrawingArea");
    }
    public static void glib_listautoptr_cleanup_GtkDrawingArea ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkDrawingArea$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkDrawingArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2212.glib_slistautoptr_cleanup_GtkDrawingArea$MH,"glib_slistautoptr_cleanup_GtkDrawingArea");
    }
    public static void glib_slistautoptr_cleanup_GtkDrawingArea ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkDrawingArea$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkDrawingArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2212.glib_queueautoptr_cleanup_GtkDrawingArea$MH,"glib_queueautoptr_cleanup_GtkDrawingArea");
    }
    public static void glib_queueautoptr_cleanup_GtkDrawingArea ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkDrawingArea$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkEditable_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEditable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEditable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEditable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkEditable$MH() {
        return RuntimeHelper.requireNonNull(constants$2212.glib_autoptr_clear_GtkEditable$MH,"glib_autoptr_clear_GtkEditable");
    }
    public static void glib_autoptr_clear_GtkEditable ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkEditable$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkEditable$MH() {
        return RuntimeHelper.requireNonNull(constants$2212.glib_autoptr_cleanup_GtkEditable$MH,"glib_autoptr_cleanup_GtkEditable");
    }
    public static void glib_autoptr_cleanup_GtkEditable ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkEditable$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkEditable$MH() {
        return RuntimeHelper.requireNonNull(constants$2212.glib_listautoptr_cleanup_GtkEditable$MH,"glib_listautoptr_cleanup_GtkEditable");
    }
    public static void glib_listautoptr_cleanup_GtkEditable ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkEditable$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkEditable$MH() {
        return RuntimeHelper.requireNonNull(constants$2213.glib_slistautoptr_cleanup_GtkEditable$MH,"glib_slistautoptr_cleanup_GtkEditable");
    }
    public static void glib_slistautoptr_cleanup_GtkEditable ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkEditable$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkEditable$MH() {
        return RuntimeHelper.requireNonNull(constants$2213.glib_queueautoptr_cleanup_GtkEditable$MH,"glib_queueautoptr_cleanup_GtkEditable");
    }
    public static void glib_queueautoptr_cleanup_GtkEditable ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkEditable$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkEntry_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEntry_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEntry_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEntry_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$2213.glib_autoptr_clear_GtkEntry$MH,"glib_autoptr_clear_GtkEntry");
    }
    public static void glib_autoptr_clear_GtkEntry ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkEntry$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$2213.glib_autoptr_cleanup_GtkEntry$MH,"glib_autoptr_cleanup_GtkEntry");
    }
    public static void glib_autoptr_cleanup_GtkEntry ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkEntry$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$2213.glib_listautoptr_cleanup_GtkEntry$MH,"glib_listautoptr_cleanup_GtkEntry");
    }
    public static void glib_listautoptr_cleanup_GtkEntry ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkEntry$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$2213.glib_slistautoptr_cleanup_GtkEntry$MH,"glib_slistautoptr_cleanup_GtkEntry");
    }
    public static void glib_slistautoptr_cleanup_GtkEntry ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkEntry$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkEntry$MH() {
        return RuntimeHelper.requireNonNull(constants$2214.glib_queueautoptr_cleanup_GtkEntry$MH,"glib_queueautoptr_cleanup_GtkEntry");
    }
    public static void glib_queueautoptr_cleanup_GtkEntry ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkEntry$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkEntryBuffer_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEntryBuffer_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEntryBuffer_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEntryBuffer_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkEntryBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$2214.glib_autoptr_clear_GtkEntryBuffer$MH,"glib_autoptr_clear_GtkEntryBuffer");
    }
    public static void glib_autoptr_clear_GtkEntryBuffer ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkEntryBuffer$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkEntryBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$2214.glib_autoptr_cleanup_GtkEntryBuffer$MH,"glib_autoptr_cleanup_GtkEntryBuffer");
    }
    public static void glib_autoptr_cleanup_GtkEntryBuffer ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkEntryBuffer$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkEntryBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$2214.glib_listautoptr_cleanup_GtkEntryBuffer$MH,"glib_listautoptr_cleanup_GtkEntryBuffer");
    }
    public static void glib_listautoptr_cleanup_GtkEntryBuffer ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkEntryBuffer$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkEntryBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$2214.glib_slistautoptr_cleanup_GtkEntryBuffer$MH,"glib_slistautoptr_cleanup_GtkEntryBuffer");
    }
    public static void glib_slistautoptr_cleanup_GtkEntryBuffer ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkEntryBuffer$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkEntryBuffer$MH() {
        return RuntimeHelper.requireNonNull(constants$2214.glib_queueautoptr_cleanup_GtkEntryBuffer$MH,"glib_queueautoptr_cleanup_GtkEntryBuffer");
    }
    public static void glib_queueautoptr_cleanup_GtkEntryBuffer ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkEntryBuffer$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkEntryCompletion_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEntryCompletion_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEntryCompletion_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEntryCompletion_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkEntryCompletion$MH() {
        return RuntimeHelper.requireNonNull(constants$2215.glib_autoptr_clear_GtkEntryCompletion$MH,"glib_autoptr_clear_GtkEntryCompletion");
    }
    public static void glib_autoptr_clear_GtkEntryCompletion ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkEntryCompletion$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkEntryCompletion$MH() {
        return RuntimeHelper.requireNonNull(constants$2215.glib_autoptr_cleanup_GtkEntryCompletion$MH,"glib_autoptr_cleanup_GtkEntryCompletion");
    }
    public static void glib_autoptr_cleanup_GtkEntryCompletion ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkEntryCompletion$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkEntryCompletion$MH() {
        return RuntimeHelper.requireNonNull(constants$2215.glib_listautoptr_cleanup_GtkEntryCompletion$MH,"glib_listautoptr_cleanup_GtkEntryCompletion");
    }
    public static void glib_listautoptr_cleanup_GtkEntryCompletion ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkEntryCompletion$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkEntryCompletion$MH() {
        return RuntimeHelper.requireNonNull(constants$2215.glib_slistautoptr_cleanup_GtkEntryCompletion$MH,"glib_slistautoptr_cleanup_GtkEntryCompletion");
    }
    public static void glib_slistautoptr_cleanup_GtkEntryCompletion ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkEntryCompletion$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkEntryCompletion$MH() {
        return RuntimeHelper.requireNonNull(constants$2215.glib_queueautoptr_cleanup_GtkEntryCompletion$MH,"glib_queueautoptr_cleanup_GtkEntryCompletion");
    }
    public static void glib_queueautoptr_cleanup_GtkEntryCompletion ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkEntryCompletion$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkEventBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEventBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEventBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEventBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkEventBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2215.glib_autoptr_clear_GtkEventBox$MH,"glib_autoptr_clear_GtkEventBox");
    }
    public static void glib_autoptr_clear_GtkEventBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkEventBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkEventBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2216.glib_autoptr_cleanup_GtkEventBox$MH,"glib_autoptr_cleanup_GtkEventBox");
    }
    public static void glib_autoptr_cleanup_GtkEventBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkEventBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkEventBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2216.glib_listautoptr_cleanup_GtkEventBox$MH,"glib_listautoptr_cleanup_GtkEventBox");
    }
    public static void glib_listautoptr_cleanup_GtkEventBox ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkEventBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkEventBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2216.glib_slistautoptr_cleanup_GtkEventBox$MH,"glib_slistautoptr_cleanup_GtkEventBox");
    }
    public static void glib_slistautoptr_cleanup_GtkEventBox ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkEventBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkEventBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2216.glib_queueautoptr_cleanup_GtkEventBox$MH,"glib_queueautoptr_cleanup_GtkEventBox");
    }
    public static void glib_queueautoptr_cleanup_GtkEventBox ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkEventBox$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkEventController_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEventController_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEventController_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkEventController_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkEventController$MH() {
        return RuntimeHelper.requireNonNull(constants$2216.glib_autoptr_clear_GtkEventController$MH,"glib_autoptr_clear_GtkEventController");
    }
    public static void glib_autoptr_clear_GtkEventController ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkEventController$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkEventController$MH() {
        return RuntimeHelper.requireNonNull(constants$2216.glib_autoptr_cleanup_GtkEventController$MH,"glib_autoptr_cleanup_GtkEventController");
    }
    public static void glib_autoptr_cleanup_GtkEventController ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkEventController$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkEventController$MH() {
        return RuntimeHelper.requireNonNull(constants$2217.glib_listautoptr_cleanup_GtkEventController$MH,"glib_listautoptr_cleanup_GtkEventController");
    }
    public static void glib_listautoptr_cleanup_GtkEventController ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkEventController$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkEventController$MH() {
        return RuntimeHelper.requireNonNull(constants$2217.glib_slistautoptr_cleanup_GtkEventController$MH,"glib_slistautoptr_cleanup_GtkEventController");
    }
    public static void glib_slistautoptr_cleanup_GtkEventController ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkEventController$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkEventController$MH() {
        return RuntimeHelper.requireNonNull(constants$2217.glib_queueautoptr_cleanup_GtkEventController$MH,"glib_queueautoptr_cleanup_GtkEventController");
    }
    public static void glib_queueautoptr_cleanup_GtkEventController ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkEventController$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkExpander_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkExpander_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkExpander_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkExpander_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkExpander$MH() {
        return RuntimeHelper.requireNonNull(constants$2217.glib_autoptr_clear_GtkExpander$MH,"glib_autoptr_clear_GtkExpander");
    }
    public static void glib_autoptr_clear_GtkExpander ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkExpander$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkExpander$MH() {
        return RuntimeHelper.requireNonNull(constants$2217.glib_autoptr_cleanup_GtkExpander$MH,"glib_autoptr_cleanup_GtkExpander");
    }
    public static void glib_autoptr_cleanup_GtkExpander ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkExpander$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkExpander$MH() {
        return RuntimeHelper.requireNonNull(constants$2217.glib_listautoptr_cleanup_GtkExpander$MH,"glib_listautoptr_cleanup_GtkExpander");
    }
    public static void glib_listautoptr_cleanup_GtkExpander ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkExpander$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkExpander$MH() {
        return RuntimeHelper.requireNonNull(constants$2218.glib_slistautoptr_cleanup_GtkExpander$MH,"glib_slistautoptr_cleanup_GtkExpander");
    }
    public static void glib_slistautoptr_cleanup_GtkExpander ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkExpander$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkExpander$MH() {
        return RuntimeHelper.requireNonNull(constants$2218.glib_queueautoptr_cleanup_GtkExpander$MH,"glib_queueautoptr_cleanup_GtkExpander");
    }
    public static void glib_queueautoptr_cleanup_GtkExpander ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkExpander$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFileChooserButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileChooserButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileChooserButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileChooserButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFileChooserButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2218.glib_autoptr_clear_GtkFileChooserButton$MH,"glib_autoptr_clear_GtkFileChooserButton");
    }
    public static void glib_autoptr_clear_GtkFileChooserButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFileChooserButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFileChooserButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2218.glib_autoptr_cleanup_GtkFileChooserButton$MH,"glib_autoptr_cleanup_GtkFileChooserButton");
    }
    public static void glib_autoptr_cleanup_GtkFileChooserButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFileChooserButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFileChooserButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2218.glib_listautoptr_cleanup_GtkFileChooserButton$MH,"glib_listautoptr_cleanup_GtkFileChooserButton");
    }
    public static void glib_listautoptr_cleanup_GtkFileChooserButton ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFileChooserButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFileChooserButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2218.glib_slistautoptr_cleanup_GtkFileChooserButton$MH,"glib_slistautoptr_cleanup_GtkFileChooserButton");
    }
    public static void glib_slistautoptr_cleanup_GtkFileChooserButton ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFileChooserButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFileChooserButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2219.glib_queueautoptr_cleanup_GtkFileChooserButton$MH,"glib_queueautoptr_cleanup_GtkFileChooserButton");
    }
    public static void glib_queueautoptr_cleanup_GtkFileChooserButton ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFileChooserButton$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFileChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFileChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2219.glib_autoptr_clear_GtkFileChooserDialog$MH,"glib_autoptr_clear_GtkFileChooserDialog");
    }
    public static void glib_autoptr_clear_GtkFileChooserDialog ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFileChooserDialog$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFileChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2219.glib_autoptr_cleanup_GtkFileChooserDialog$MH,"glib_autoptr_cleanup_GtkFileChooserDialog");
    }
    public static void glib_autoptr_cleanup_GtkFileChooserDialog ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFileChooserDialog$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFileChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2219.glib_listautoptr_cleanup_GtkFileChooserDialog$MH,"glib_listautoptr_cleanup_GtkFileChooserDialog");
    }
    public static void glib_listautoptr_cleanup_GtkFileChooserDialog ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFileChooserDialog$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFileChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2219.glib_slistautoptr_cleanup_GtkFileChooserDialog$MH,"glib_slistautoptr_cleanup_GtkFileChooserDialog");
    }
    public static void glib_slistautoptr_cleanup_GtkFileChooserDialog ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFileChooserDialog$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFileChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2219.glib_queueautoptr_cleanup_GtkFileChooserDialog$MH,"glib_queueautoptr_cleanup_GtkFileChooserDialog");
    }
    public static void glib_queueautoptr_cleanup_GtkFileChooserDialog ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFileChooserDialog$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFileChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFileChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2220.glib_autoptr_clear_GtkFileChooserWidget$MH,"glib_autoptr_clear_GtkFileChooserWidget");
    }
    public static void glib_autoptr_clear_GtkFileChooserWidget ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFileChooserWidget$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFileChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2220.glib_autoptr_cleanup_GtkFileChooserWidget$MH,"glib_autoptr_cleanup_GtkFileChooserWidget");
    }
    public static void glib_autoptr_cleanup_GtkFileChooserWidget ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFileChooserWidget$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFileChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2220.glib_listautoptr_cleanup_GtkFileChooserWidget$MH,"glib_listautoptr_cleanup_GtkFileChooserWidget");
    }
    public static void glib_listautoptr_cleanup_GtkFileChooserWidget ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFileChooserWidget$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFileChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2220.glib_slistautoptr_cleanup_GtkFileChooserWidget$MH,"glib_slistautoptr_cleanup_GtkFileChooserWidget");
    }
    public static void glib_slistautoptr_cleanup_GtkFileChooserWidget ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFileChooserWidget$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFileChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2220.glib_queueautoptr_cleanup_GtkFileChooserWidget$MH,"glib_queueautoptr_cleanup_GtkFileChooserWidget");
    }
    public static void glib_queueautoptr_cleanup_GtkFileChooserWidget ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFileChooserWidget$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFileFilter_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileFilter_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileFilter_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFileFilter_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFileFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$2220.glib_autoptr_clear_GtkFileFilter$MH,"glib_autoptr_clear_GtkFileFilter");
    }
    public static void glib_autoptr_clear_GtkFileFilter ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFileFilter$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFileFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$2221.glib_autoptr_cleanup_GtkFileFilter$MH,"glib_autoptr_cleanup_GtkFileFilter");
    }
    public static void glib_autoptr_cleanup_GtkFileFilter ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFileFilter$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFileFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$2221.glib_listautoptr_cleanup_GtkFileFilter$MH,"glib_listautoptr_cleanup_GtkFileFilter");
    }
    public static void glib_listautoptr_cleanup_GtkFileFilter ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFileFilter$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFileFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$2221.glib_slistautoptr_cleanup_GtkFileFilter$MH,"glib_slistautoptr_cleanup_GtkFileFilter");
    }
    public static void glib_slistautoptr_cleanup_GtkFileFilter ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFileFilter$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFileFilter$MH() {
        return RuntimeHelper.requireNonNull(constants$2221.glib_queueautoptr_cleanup_GtkFileFilter$MH,"glib_queueautoptr_cleanup_GtkFileFilter");
    }
    public static void glib_queueautoptr_cleanup_GtkFileFilter ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFileFilter$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFixed_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFixed_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFixed_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFixed_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFixed$MH() {
        return RuntimeHelper.requireNonNull(constants$2221.glib_autoptr_clear_GtkFixed$MH,"glib_autoptr_clear_GtkFixed");
    }
    public static void glib_autoptr_clear_GtkFixed ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFixed$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFixed$MH() {
        return RuntimeHelper.requireNonNull(constants$2221.glib_autoptr_cleanup_GtkFixed$MH,"glib_autoptr_cleanup_GtkFixed");
    }
    public static void glib_autoptr_cleanup_GtkFixed ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFixed$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFixed$MH() {
        return RuntimeHelper.requireNonNull(constants$2222.glib_listautoptr_cleanup_GtkFixed$MH,"glib_listautoptr_cleanup_GtkFixed");
    }
    public static void glib_listautoptr_cleanup_GtkFixed ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFixed$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFixed$MH() {
        return RuntimeHelper.requireNonNull(constants$2222.glib_slistautoptr_cleanup_GtkFixed$MH,"glib_slistautoptr_cleanup_GtkFixed");
    }
    public static void glib_slistautoptr_cleanup_GtkFixed ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFixed$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFixed$MH() {
        return RuntimeHelper.requireNonNull(constants$2222.glib_queueautoptr_cleanup_GtkFixed$MH,"glib_queueautoptr_cleanup_GtkFixed");
    }
    public static void glib_queueautoptr_cleanup_GtkFixed ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFixed$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFlowBox_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFlowBox_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFlowBox_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFlowBox_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFlowBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2222.glib_autoptr_clear_GtkFlowBox$MH,"glib_autoptr_clear_GtkFlowBox");
    }
    public static void glib_autoptr_clear_GtkFlowBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFlowBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFlowBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2222.glib_autoptr_cleanup_GtkFlowBox$MH,"glib_autoptr_cleanup_GtkFlowBox");
    }
    public static void glib_autoptr_cleanup_GtkFlowBox ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFlowBox$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFlowBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2222.glib_listautoptr_cleanup_GtkFlowBox$MH,"glib_listautoptr_cleanup_GtkFlowBox");
    }
    public static void glib_listautoptr_cleanup_GtkFlowBox ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFlowBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFlowBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2223.glib_slistautoptr_cleanup_GtkFlowBox$MH,"glib_slistautoptr_cleanup_GtkFlowBox");
    }
    public static void glib_slistautoptr_cleanup_GtkFlowBox ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFlowBox$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFlowBox$MH() {
        return RuntimeHelper.requireNonNull(constants$2223.glib_queueautoptr_cleanup_GtkFlowBox$MH,"glib_queueautoptr_cleanup_GtkFlowBox");
    }
    public static void glib_queueautoptr_cleanup_GtkFlowBox ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFlowBox$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFlowBoxChild_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFlowBoxChild_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFlowBoxChild_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFlowBoxChild_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFlowBoxChild$MH() {
        return RuntimeHelper.requireNonNull(constants$2223.glib_autoptr_clear_GtkFlowBoxChild$MH,"glib_autoptr_clear_GtkFlowBoxChild");
    }
    public static void glib_autoptr_clear_GtkFlowBoxChild ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFlowBoxChild$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFlowBoxChild$MH() {
        return RuntimeHelper.requireNonNull(constants$2223.glib_autoptr_cleanup_GtkFlowBoxChild$MH,"glib_autoptr_cleanup_GtkFlowBoxChild");
    }
    public static void glib_autoptr_cleanup_GtkFlowBoxChild ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFlowBoxChild$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFlowBoxChild$MH() {
        return RuntimeHelper.requireNonNull(constants$2223.glib_listautoptr_cleanup_GtkFlowBoxChild$MH,"glib_listautoptr_cleanup_GtkFlowBoxChild");
    }
    public static void glib_listautoptr_cleanup_GtkFlowBoxChild ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFlowBoxChild$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFlowBoxChild$MH() {
        return RuntimeHelper.requireNonNull(constants$2223.glib_slistautoptr_cleanup_GtkFlowBoxChild$MH,"glib_slistautoptr_cleanup_GtkFlowBoxChild");
    }
    public static void glib_slistautoptr_cleanup_GtkFlowBoxChild ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFlowBoxChild$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFlowBoxChild$MH() {
        return RuntimeHelper.requireNonNull(constants$2224.glib_queueautoptr_cleanup_GtkFlowBoxChild$MH,"glib_queueautoptr_cleanup_GtkFlowBoxChild");
    }
    public static void glib_queueautoptr_cleanup_GtkFlowBoxChild ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFlowBoxChild$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFontButton_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontButton_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontButton_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontButton_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFontButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2224.glib_autoptr_clear_GtkFontButton$MH,"glib_autoptr_clear_GtkFontButton");
    }
    public static void glib_autoptr_clear_GtkFontButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFontButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFontButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2224.glib_autoptr_cleanup_GtkFontButton$MH,"glib_autoptr_cleanup_GtkFontButton");
    }
    public static void glib_autoptr_cleanup_GtkFontButton ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFontButton$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFontButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2224.glib_listautoptr_cleanup_GtkFontButton$MH,"glib_listautoptr_cleanup_GtkFontButton");
    }
    public static void glib_listautoptr_cleanup_GtkFontButton ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFontButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFontButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2224.glib_slistautoptr_cleanup_GtkFontButton$MH,"glib_slistautoptr_cleanup_GtkFontButton");
    }
    public static void glib_slistautoptr_cleanup_GtkFontButton ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFontButton$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFontButton$MH() {
        return RuntimeHelper.requireNonNull(constants$2224.glib_queueautoptr_cleanup_GtkFontButton$MH,"glib_queueautoptr_cleanup_GtkFontButton");
    }
    public static void glib_queueautoptr_cleanup_GtkFontButton ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFontButton$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFontChooser_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontChooser_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontChooser_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontChooser_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFontChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2225.glib_autoptr_clear_GtkFontChooser$MH,"glib_autoptr_clear_GtkFontChooser");
    }
    public static void glib_autoptr_clear_GtkFontChooser ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFontChooser$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFontChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2225.glib_autoptr_cleanup_GtkFontChooser$MH,"glib_autoptr_cleanup_GtkFontChooser");
    }
    public static void glib_autoptr_cleanup_GtkFontChooser ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFontChooser$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFontChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2225.glib_listautoptr_cleanup_GtkFontChooser$MH,"glib_listautoptr_cleanup_GtkFontChooser");
    }
    public static void glib_listautoptr_cleanup_GtkFontChooser ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFontChooser$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFontChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2225.glib_slistautoptr_cleanup_GtkFontChooser$MH,"glib_slistautoptr_cleanup_GtkFontChooser");
    }
    public static void glib_slistautoptr_cleanup_GtkFontChooser ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFontChooser$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFontChooser$MH() {
        return RuntimeHelper.requireNonNull(constants$2225.glib_queueautoptr_cleanup_GtkFontChooser$MH,"glib_queueautoptr_cleanup_GtkFontChooser");
    }
    public static void glib_queueautoptr_cleanup_GtkFontChooser ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFontChooser$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFontChooserDialog_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontChooserDialog_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontChooserDialog_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontChooserDialog_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFontChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2225.glib_autoptr_clear_GtkFontChooserDialog$MH,"glib_autoptr_clear_GtkFontChooserDialog");
    }
    public static void glib_autoptr_clear_GtkFontChooserDialog ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFontChooserDialog$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFontChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2226.glib_autoptr_cleanup_GtkFontChooserDialog$MH,"glib_autoptr_cleanup_GtkFontChooserDialog");
    }
    public static void glib_autoptr_cleanup_GtkFontChooserDialog ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFontChooserDialog$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFontChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2226.glib_listautoptr_cleanup_GtkFontChooserDialog$MH,"glib_listautoptr_cleanup_GtkFontChooserDialog");
    }
    public static void glib_listautoptr_cleanup_GtkFontChooserDialog ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFontChooserDialog$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFontChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2226.glib_slistautoptr_cleanup_GtkFontChooserDialog$MH,"glib_slistautoptr_cleanup_GtkFontChooserDialog");
    }
    public static void glib_slistautoptr_cleanup_GtkFontChooserDialog ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFontChooserDialog$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFontChooserDialog$MH() {
        return RuntimeHelper.requireNonNull(constants$2226.glib_queueautoptr_cleanup_GtkFontChooserDialog$MH,"glib_queueautoptr_cleanup_GtkFontChooserDialog");
    }
    public static void glib_queueautoptr_cleanup_GtkFontChooserDialog ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFontChooserDialog$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFontChooserWidget_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontChooserWidget_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontChooserWidget_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFontChooserWidget_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFontChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2226.glib_autoptr_clear_GtkFontChooserWidget$MH,"glib_autoptr_clear_GtkFontChooserWidget");
    }
    public static void glib_autoptr_clear_GtkFontChooserWidget ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFontChooserWidget$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFontChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2226.glib_autoptr_cleanup_GtkFontChooserWidget$MH,"glib_autoptr_cleanup_GtkFontChooserWidget");
    }
    public static void glib_autoptr_cleanup_GtkFontChooserWidget ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFontChooserWidget$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFontChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2227.glib_listautoptr_cleanup_GtkFontChooserWidget$MH,"glib_listautoptr_cleanup_GtkFontChooserWidget");
    }
    public static void glib_listautoptr_cleanup_GtkFontChooserWidget ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFontChooserWidget$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFontChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2227.glib_slistautoptr_cleanup_GtkFontChooserWidget$MH,"glib_slistautoptr_cleanup_GtkFontChooserWidget");
    }
    public static void glib_slistautoptr_cleanup_GtkFontChooserWidget ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFontChooserWidget$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFontChooserWidget$MH() {
        return RuntimeHelper.requireNonNull(constants$2227.glib_queueautoptr_cleanup_GtkFontChooserWidget$MH,"glib_queueautoptr_cleanup_GtkFontChooserWidget");
    }
    public static void glib_queueautoptr_cleanup_GtkFontChooserWidget ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFontChooserWidget$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkFrame_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFrame_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFrame_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkFrame_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$2227.glib_autoptr_clear_GtkFrame$MH,"glib_autoptr_clear_GtkFrame");
    }
    public static void glib_autoptr_clear_GtkFrame ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkFrame$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$2227.glib_autoptr_cleanup_GtkFrame$MH,"glib_autoptr_cleanup_GtkFrame");
    }
    public static void glib_autoptr_cleanup_GtkFrame ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkFrame$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$2227.glib_listautoptr_cleanup_GtkFrame$MH,"glib_listautoptr_cleanup_GtkFrame");
    }
    public static void glib_listautoptr_cleanup_GtkFrame ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkFrame$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$2228.glib_slistautoptr_cleanup_GtkFrame$MH,"glib_slistautoptr_cleanup_GtkFrame");
    }
    public static void glib_slistautoptr_cleanup_GtkFrame ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkFrame$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkFrame$MH() {
        return RuntimeHelper.requireNonNull(constants$2228.glib_queueautoptr_cleanup_GtkFrame$MH,"glib_queueautoptr_cleanup_GtkFrame");
    }
    public static void glib_queueautoptr_cleanup_GtkFrame ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkFrame$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGLArea_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGLArea_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGLArea_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGLArea_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGLArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2228.glib_autoptr_clear_GtkGLArea$MH,"glib_autoptr_clear_GtkGLArea");
    }
    public static void glib_autoptr_clear_GtkGLArea ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGLArea$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGLArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2228.glib_autoptr_cleanup_GtkGLArea$MH,"glib_autoptr_cleanup_GtkGLArea");
    }
    public static void glib_autoptr_cleanup_GtkGLArea ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGLArea$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGLArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2228.glib_listautoptr_cleanup_GtkGLArea$MH,"glib_listautoptr_cleanup_GtkGLArea");
    }
    public static void glib_listautoptr_cleanup_GtkGLArea ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGLArea$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGLArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2228.glib_slistautoptr_cleanup_GtkGLArea$MH,"glib_slistautoptr_cleanup_GtkGLArea");
    }
    public static void glib_slistautoptr_cleanup_GtkGLArea ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGLArea$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGLArea$MH() {
        return RuntimeHelper.requireNonNull(constants$2229.glib_queueautoptr_cleanup_GtkGLArea$MH,"glib_queueautoptr_cleanup_GtkGLArea");
    }
    public static void glib_queueautoptr_cleanup_GtkGLArea ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGLArea$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGesture_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGesture_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGesture_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGesture_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGesture$MH() {
        return RuntimeHelper.requireNonNull(constants$2229.glib_autoptr_clear_GtkGesture$MH,"glib_autoptr_clear_GtkGesture");
    }
    public static void glib_autoptr_clear_GtkGesture ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGesture$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGesture$MH() {
        return RuntimeHelper.requireNonNull(constants$2229.glib_autoptr_cleanup_GtkGesture$MH,"glib_autoptr_cleanup_GtkGesture");
    }
    public static void glib_autoptr_cleanup_GtkGesture ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGesture$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGesture$MH() {
        return RuntimeHelper.requireNonNull(constants$2229.glib_listautoptr_cleanup_GtkGesture$MH,"glib_listautoptr_cleanup_GtkGesture");
    }
    public static void glib_listautoptr_cleanup_GtkGesture ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGesture$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGesture$MH() {
        return RuntimeHelper.requireNonNull(constants$2229.glib_slistautoptr_cleanup_GtkGesture$MH,"glib_slistautoptr_cleanup_GtkGesture");
    }
    public static void glib_slistautoptr_cleanup_GtkGesture ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGesture$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGesture$MH() {
        return RuntimeHelper.requireNonNull(constants$2229.glib_queueautoptr_cleanup_GtkGesture$MH,"glib_queueautoptr_cleanup_GtkGesture");
    }
    public static void glib_queueautoptr_cleanup_GtkGesture ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGesture$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGestureDrag_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureDrag_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureDrag_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureDrag_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGestureDrag$MH() {
        return RuntimeHelper.requireNonNull(constants$2230.glib_autoptr_clear_GtkGestureDrag$MH,"glib_autoptr_clear_GtkGestureDrag");
    }
    public static void glib_autoptr_clear_GtkGestureDrag ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGestureDrag$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGestureDrag$MH() {
        return RuntimeHelper.requireNonNull(constants$2230.glib_autoptr_cleanup_GtkGestureDrag$MH,"glib_autoptr_cleanup_GtkGestureDrag");
    }
    public static void glib_autoptr_cleanup_GtkGestureDrag ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGestureDrag$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGestureDrag$MH() {
        return RuntimeHelper.requireNonNull(constants$2230.glib_listautoptr_cleanup_GtkGestureDrag$MH,"glib_listautoptr_cleanup_GtkGestureDrag");
    }
    public static void glib_listautoptr_cleanup_GtkGestureDrag ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGestureDrag$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGestureDrag$MH() {
        return RuntimeHelper.requireNonNull(constants$2230.glib_slistautoptr_cleanup_GtkGestureDrag$MH,"glib_slistautoptr_cleanup_GtkGestureDrag");
    }
    public static void glib_slistautoptr_cleanup_GtkGestureDrag ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGestureDrag$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGestureDrag$MH() {
        return RuntimeHelper.requireNonNull(constants$2230.glib_queueautoptr_cleanup_GtkGestureDrag$MH,"glib_queueautoptr_cleanup_GtkGestureDrag");
    }
    public static void glib_queueautoptr_cleanup_GtkGestureDrag ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGestureDrag$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGestureLongPress_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureLongPress_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureLongPress_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureLongPress_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGestureLongPress$MH() {
        return RuntimeHelper.requireNonNull(constants$2230.glib_autoptr_clear_GtkGestureLongPress$MH,"glib_autoptr_clear_GtkGestureLongPress");
    }
    public static void glib_autoptr_clear_GtkGestureLongPress ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGestureLongPress$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGestureLongPress$MH() {
        return RuntimeHelper.requireNonNull(constants$2231.glib_autoptr_cleanup_GtkGestureLongPress$MH,"glib_autoptr_cleanup_GtkGestureLongPress");
    }
    public static void glib_autoptr_cleanup_GtkGestureLongPress ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGestureLongPress$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGestureLongPress$MH() {
        return RuntimeHelper.requireNonNull(constants$2231.glib_listautoptr_cleanup_GtkGestureLongPress$MH,"glib_listautoptr_cleanup_GtkGestureLongPress");
    }
    public static void glib_listautoptr_cleanup_GtkGestureLongPress ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGestureLongPress$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGestureLongPress$MH() {
        return RuntimeHelper.requireNonNull(constants$2231.glib_slistautoptr_cleanup_GtkGestureLongPress$MH,"glib_slistautoptr_cleanup_GtkGestureLongPress");
    }
    public static void glib_slistautoptr_cleanup_GtkGestureLongPress ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGestureLongPress$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGestureLongPress$MH() {
        return RuntimeHelper.requireNonNull(constants$2231.glib_queueautoptr_cleanup_GtkGestureLongPress$MH,"glib_queueautoptr_cleanup_GtkGestureLongPress");
    }
    public static void glib_queueautoptr_cleanup_GtkGestureLongPress ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGestureLongPress$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGestureMultiPress_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureMultiPress_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureMultiPress_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureMultiPress_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGestureMultiPress$MH() {
        return RuntimeHelper.requireNonNull(constants$2231.glib_autoptr_clear_GtkGestureMultiPress$MH,"glib_autoptr_clear_GtkGestureMultiPress");
    }
    public static void glib_autoptr_clear_GtkGestureMultiPress ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGestureMultiPress$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGestureMultiPress$MH() {
        return RuntimeHelper.requireNonNull(constants$2231.glib_autoptr_cleanup_GtkGestureMultiPress$MH,"glib_autoptr_cleanup_GtkGestureMultiPress");
    }
    public static void glib_autoptr_cleanup_GtkGestureMultiPress ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGestureMultiPress$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGestureMultiPress$MH() {
        return RuntimeHelper.requireNonNull(constants$2232.glib_listautoptr_cleanup_GtkGestureMultiPress$MH,"glib_listautoptr_cleanup_GtkGestureMultiPress");
    }
    public static void glib_listautoptr_cleanup_GtkGestureMultiPress ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGestureMultiPress$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGestureMultiPress$MH() {
        return RuntimeHelper.requireNonNull(constants$2232.glib_slistautoptr_cleanup_GtkGestureMultiPress$MH,"glib_slistautoptr_cleanup_GtkGestureMultiPress");
    }
    public static void glib_slistautoptr_cleanup_GtkGestureMultiPress ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGestureMultiPress$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGestureMultiPress$MH() {
        return RuntimeHelper.requireNonNull(constants$2232.glib_queueautoptr_cleanup_GtkGestureMultiPress$MH,"glib_queueautoptr_cleanup_GtkGestureMultiPress");
    }
    public static void glib_queueautoptr_cleanup_GtkGestureMultiPress ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGestureMultiPress$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGesturePan_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGesturePan_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGesturePan_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGesturePan_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGesturePan$MH() {
        return RuntimeHelper.requireNonNull(constants$2232.glib_autoptr_clear_GtkGesturePan$MH,"glib_autoptr_clear_GtkGesturePan");
    }
    public static void glib_autoptr_clear_GtkGesturePan ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGesturePan$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGesturePan$MH() {
        return RuntimeHelper.requireNonNull(constants$2232.glib_autoptr_cleanup_GtkGesturePan$MH,"glib_autoptr_cleanup_GtkGesturePan");
    }
    public static void glib_autoptr_cleanup_GtkGesturePan ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGesturePan$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGesturePan$MH() {
        return RuntimeHelper.requireNonNull(constants$2232.glib_listautoptr_cleanup_GtkGesturePan$MH,"glib_listautoptr_cleanup_GtkGesturePan");
    }
    public static void glib_listautoptr_cleanup_GtkGesturePan ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGesturePan$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGesturePan$MH() {
        return RuntimeHelper.requireNonNull(constants$2233.glib_slistautoptr_cleanup_GtkGesturePan$MH,"glib_slistautoptr_cleanup_GtkGesturePan");
    }
    public static void glib_slistautoptr_cleanup_GtkGesturePan ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGesturePan$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGesturePan$MH() {
        return RuntimeHelper.requireNonNull(constants$2233.glib_queueautoptr_cleanup_GtkGesturePan$MH,"glib_queueautoptr_cleanup_GtkGesturePan");
    }
    public static void glib_queueautoptr_cleanup_GtkGesturePan ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGesturePan$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGestureRotate_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureRotate_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureRotate_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureRotate_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGestureRotate$MH() {
        return RuntimeHelper.requireNonNull(constants$2233.glib_autoptr_clear_GtkGestureRotate$MH,"glib_autoptr_clear_GtkGestureRotate");
    }
    public static void glib_autoptr_clear_GtkGestureRotate ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGestureRotate$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGestureRotate$MH() {
        return RuntimeHelper.requireNonNull(constants$2233.glib_autoptr_cleanup_GtkGestureRotate$MH,"glib_autoptr_cleanup_GtkGestureRotate");
    }
    public static void glib_autoptr_cleanup_GtkGestureRotate ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGestureRotate$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGestureRotate$MH() {
        return RuntimeHelper.requireNonNull(constants$2233.glib_listautoptr_cleanup_GtkGestureRotate$MH,"glib_listautoptr_cleanup_GtkGestureRotate");
    }
    public static void glib_listautoptr_cleanup_GtkGestureRotate ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGestureRotate$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGestureRotate$MH() {
        return RuntimeHelper.requireNonNull(constants$2233.glib_slistautoptr_cleanup_GtkGestureRotate$MH,"glib_slistautoptr_cleanup_GtkGestureRotate");
    }
    public static void glib_slistautoptr_cleanup_GtkGestureRotate ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGestureRotate$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGestureRotate$MH() {
        return RuntimeHelper.requireNonNull(constants$2234.glib_queueautoptr_cleanup_GtkGestureRotate$MH,"glib_queueautoptr_cleanup_GtkGestureRotate");
    }
    public static void glib_queueautoptr_cleanup_GtkGestureRotate ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGestureRotate$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGestureSingle_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureSingle_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureSingle_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureSingle_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGestureSingle$MH() {
        return RuntimeHelper.requireNonNull(constants$2234.glib_autoptr_clear_GtkGestureSingle$MH,"glib_autoptr_clear_GtkGestureSingle");
    }
    public static void glib_autoptr_clear_GtkGestureSingle ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGestureSingle$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGestureSingle$MH() {
        return RuntimeHelper.requireNonNull(constants$2234.glib_autoptr_cleanup_GtkGestureSingle$MH,"glib_autoptr_cleanup_GtkGestureSingle");
    }
    public static void glib_autoptr_cleanup_GtkGestureSingle ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGestureSingle$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGestureSingle$MH() {
        return RuntimeHelper.requireNonNull(constants$2234.glib_listautoptr_cleanup_GtkGestureSingle$MH,"glib_listautoptr_cleanup_GtkGestureSingle");
    }
    public static void glib_listautoptr_cleanup_GtkGestureSingle ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGestureSingle$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGestureSingle$MH() {
        return RuntimeHelper.requireNonNull(constants$2234.glib_slistautoptr_cleanup_GtkGestureSingle$MH,"glib_slistautoptr_cleanup_GtkGestureSingle");
    }
    public static void glib_slistautoptr_cleanup_GtkGestureSingle ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGestureSingle$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGestureSingle$MH() {
        return RuntimeHelper.requireNonNull(constants$2234.glib_queueautoptr_cleanup_GtkGestureSingle$MH,"glib_queueautoptr_cleanup_GtkGestureSingle");
    }
    public static void glib_queueautoptr_cleanup_GtkGestureSingle ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGestureSingle$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGestureSwipe_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureSwipe_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureSwipe_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureSwipe_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGestureSwipe$MH() {
        return RuntimeHelper.requireNonNull(constants$2235.glib_autoptr_clear_GtkGestureSwipe$MH,"glib_autoptr_clear_GtkGestureSwipe");
    }
    public static void glib_autoptr_clear_GtkGestureSwipe ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGestureSwipe$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGestureSwipe$MH() {
        return RuntimeHelper.requireNonNull(constants$2235.glib_autoptr_cleanup_GtkGestureSwipe$MH,"glib_autoptr_cleanup_GtkGestureSwipe");
    }
    public static void glib_autoptr_cleanup_GtkGestureSwipe ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGestureSwipe$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGestureSwipe$MH() {
        return RuntimeHelper.requireNonNull(constants$2235.glib_listautoptr_cleanup_GtkGestureSwipe$MH,"glib_listautoptr_cleanup_GtkGestureSwipe");
    }
    public static void glib_listautoptr_cleanup_GtkGestureSwipe ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGestureSwipe$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGestureSwipe$MH() {
        return RuntimeHelper.requireNonNull(constants$2235.glib_slistautoptr_cleanup_GtkGestureSwipe$MH,"glib_slistautoptr_cleanup_GtkGestureSwipe");
    }
    public static void glib_slistautoptr_cleanup_GtkGestureSwipe ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGestureSwipe$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGestureSwipe$MH() {
        return RuntimeHelper.requireNonNull(constants$2235.glib_queueautoptr_cleanup_GtkGestureSwipe$MH,"glib_queueautoptr_cleanup_GtkGestureSwipe");
    }
    public static void glib_queueautoptr_cleanup_GtkGestureSwipe ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGestureSwipe$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGestureZoom_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureZoom_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureZoom_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGestureZoom_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGestureZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$2235.glib_autoptr_clear_GtkGestureZoom$MH,"glib_autoptr_clear_GtkGestureZoom");
    }
    public static void glib_autoptr_clear_GtkGestureZoom ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGestureZoom$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGestureZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$2236.glib_autoptr_cleanup_GtkGestureZoom$MH,"glib_autoptr_cleanup_GtkGestureZoom");
    }
    public static void glib_autoptr_cleanup_GtkGestureZoom ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGestureZoom$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGestureZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$2236.glib_listautoptr_cleanup_GtkGestureZoom$MH,"glib_listautoptr_cleanup_GtkGestureZoom");
    }
    public static void glib_listautoptr_cleanup_GtkGestureZoom ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGestureZoom$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGestureZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$2236.glib_slistautoptr_cleanup_GtkGestureZoom$MH,"glib_slistautoptr_cleanup_GtkGestureZoom");
    }
    public static void glib_slistautoptr_cleanup_GtkGestureZoom ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGestureZoom$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGestureZoom$MH() {
        return RuntimeHelper.requireNonNull(constants$2236.glib_queueautoptr_cleanup_GtkGestureZoom$MH,"glib_queueautoptr_cleanup_GtkGestureZoom");
    }
    public static void glib_queueautoptr_cleanup_GtkGestureZoom ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGestureZoom$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkGrid_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGrid_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGrid_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkGrid_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkGrid$MH() {
        return RuntimeHelper.requireNonNull(constants$2236.glib_autoptr_clear_GtkGrid$MH,"glib_autoptr_clear_GtkGrid");
    }
    public static void glib_autoptr_clear_GtkGrid ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkGrid$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkGrid$MH() {
        return RuntimeHelper.requireNonNull(constants$2236.glib_autoptr_cleanup_GtkGrid$MH,"glib_autoptr_cleanup_GtkGrid");
    }
    public static void glib_autoptr_cleanup_GtkGrid ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkGrid$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkGrid$MH() {
        return RuntimeHelper.requireNonNull(constants$2237.glib_listautoptr_cleanup_GtkGrid$MH,"glib_listautoptr_cleanup_GtkGrid");
    }
    public static void glib_listautoptr_cleanup_GtkGrid ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkGrid$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkGrid$MH() {
        return RuntimeHelper.requireNonNull(constants$2237.glib_slistautoptr_cleanup_GtkGrid$MH,"glib_slistautoptr_cleanup_GtkGrid");
    }
    public static void glib_slistautoptr_cleanup_GtkGrid ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkGrid$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkGrid$MH() {
        return RuntimeHelper.requireNonNull(constants$2237.glib_queueautoptr_cleanup_GtkGrid$MH,"glib_queueautoptr_cleanup_GtkGrid");
    }
    public static void glib_queueautoptr_cleanup_GtkGrid ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkGrid$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkHeaderBar_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkHeaderBar_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkHeaderBar_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkHeaderBar_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkHeaderBar$MH() {
        return RuntimeHelper.requireNonNull(constants$2237.glib_autoptr_clear_GtkHeaderBar$MH,"glib_autoptr_clear_GtkHeaderBar");
    }
    public static void glib_autoptr_clear_GtkHeaderBar ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkHeaderBar$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkHeaderBar$MH() {
        return RuntimeHelper.requireNonNull(constants$2237.glib_autoptr_cleanup_GtkHeaderBar$MH,"glib_autoptr_cleanup_GtkHeaderBar");
    }
    public static void glib_autoptr_cleanup_GtkHeaderBar ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkHeaderBar$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkHeaderBar$MH() {
        return RuntimeHelper.requireNonNull(constants$2237.glib_listautoptr_cleanup_GtkHeaderBar$MH,"glib_listautoptr_cleanup_GtkHeaderBar");
    }
    public static void glib_listautoptr_cleanup_GtkHeaderBar ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkHeaderBar$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkHeaderBar$MH() {
        return RuntimeHelper.requireNonNull(constants$2238.glib_slistautoptr_cleanup_GtkHeaderBar$MH,"glib_slistautoptr_cleanup_GtkHeaderBar");
    }
    public static void glib_slistautoptr_cleanup_GtkHeaderBar ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkHeaderBar$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkHeaderBar$MH() {
        return RuntimeHelper.requireNonNull(constants$2238.glib_queueautoptr_cleanup_GtkHeaderBar$MH,"glib_queueautoptr_cleanup_GtkHeaderBar");
    }
    public static void glib_queueautoptr_cleanup_GtkHeaderBar ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkHeaderBar$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkIMContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIMContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIMContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIMContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkIMContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2238.glib_autoptr_clear_GtkIMContext$MH,"glib_autoptr_clear_GtkIMContext");
    }
    public static void glib_autoptr_clear_GtkIMContext ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkIMContext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkIMContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2238.glib_autoptr_cleanup_GtkIMContext$MH,"glib_autoptr_cleanup_GtkIMContext");
    }
    public static void glib_autoptr_cleanup_GtkIMContext ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkIMContext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkIMContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2238.glib_listautoptr_cleanup_GtkIMContext$MH,"glib_listautoptr_cleanup_GtkIMContext");
    }
    public static void glib_listautoptr_cleanup_GtkIMContext ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkIMContext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkIMContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2238.glib_slistautoptr_cleanup_GtkIMContext$MH,"glib_slistautoptr_cleanup_GtkIMContext");
    }
    public static void glib_slistautoptr_cleanup_GtkIMContext ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkIMContext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkIMContext$MH() {
        return RuntimeHelper.requireNonNull(constants$2239.glib_queueautoptr_cleanup_GtkIMContext$MH,"glib_queueautoptr_cleanup_GtkIMContext");
    }
    public static void glib_queueautoptr_cleanup_GtkIMContext ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkIMContext$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkIMContextSimple_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIMContextSimple_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIMContextSimple_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIMContextSimple_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkIMContextSimple$MH() {
        return RuntimeHelper.requireNonNull(constants$2239.glib_autoptr_clear_GtkIMContextSimple$MH,"glib_autoptr_clear_GtkIMContextSimple");
    }
    public static void glib_autoptr_clear_GtkIMContextSimple ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkIMContextSimple$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkIMContextSimple$MH() {
        return RuntimeHelper.requireNonNull(constants$2239.glib_autoptr_cleanup_GtkIMContextSimple$MH,"glib_autoptr_cleanup_GtkIMContextSimple");
    }
    public static void glib_autoptr_cleanup_GtkIMContextSimple ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkIMContextSimple$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkIMContextSimple$MH() {
        return RuntimeHelper.requireNonNull(constants$2239.glib_listautoptr_cleanup_GtkIMContextSimple$MH,"glib_listautoptr_cleanup_GtkIMContextSimple");
    }
    public static void glib_listautoptr_cleanup_GtkIMContextSimple ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkIMContextSimple$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkIMContextSimple$MH() {
        return RuntimeHelper.requireNonNull(constants$2239.glib_slistautoptr_cleanup_GtkIMContextSimple$MH,"glib_slistautoptr_cleanup_GtkIMContextSimple");
    }
    public static void glib_slistautoptr_cleanup_GtkIMContextSimple ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkIMContextSimple$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkIMContextSimple$MH() {
        return RuntimeHelper.requireNonNull(constants$2239.glib_queueautoptr_cleanup_GtkIMContextSimple$MH,"glib_queueautoptr_cleanup_GtkIMContextSimple");
    }
    public static void glib_queueautoptr_cleanup_GtkIMContextSimple ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkIMContextSimple$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkIMMulticontext_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIMMulticontext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIMMulticontext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIMMulticontext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkIMMulticontext$MH() {
        return RuntimeHelper.requireNonNull(constants$2240.glib_autoptr_clear_GtkIMMulticontext$MH,"glib_autoptr_clear_GtkIMMulticontext");
    }
    public static void glib_autoptr_clear_GtkIMMulticontext ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkIMMulticontext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkIMMulticontext$MH() {
        return RuntimeHelper.requireNonNull(constants$2240.glib_autoptr_cleanup_GtkIMMulticontext$MH,"glib_autoptr_cleanup_GtkIMMulticontext");
    }
    public static void glib_autoptr_cleanup_GtkIMMulticontext ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkIMMulticontext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkIMMulticontext$MH() {
        return RuntimeHelper.requireNonNull(constants$2240.glib_listautoptr_cleanup_GtkIMMulticontext$MH,"glib_listautoptr_cleanup_GtkIMMulticontext");
    }
    public static void glib_listautoptr_cleanup_GtkIMMulticontext ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkIMMulticontext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkIMMulticontext$MH() {
        return RuntimeHelper.requireNonNull(constants$2240.glib_slistautoptr_cleanup_GtkIMMulticontext$MH,"glib_slistautoptr_cleanup_GtkIMMulticontext");
    }
    public static void glib_slistautoptr_cleanup_GtkIMMulticontext ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkIMMulticontext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkIMMulticontext$MH() {
        return RuntimeHelper.requireNonNull(constants$2240.glib_queueautoptr_cleanup_GtkIMMulticontext$MH,"glib_queueautoptr_cleanup_GtkIMMulticontext");
    }
    public static void glib_queueautoptr_cleanup_GtkIMMulticontext ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkIMMulticontext$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkIconInfo_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIconInfo_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIconInfo_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIconInfo_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkIconInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2240.glib_autoptr_clear_GtkIconInfo$MH,"glib_autoptr_clear_GtkIconInfo");
    }
    public static void glib_autoptr_clear_GtkIconInfo ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkIconInfo$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkIconInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2241.glib_autoptr_cleanup_GtkIconInfo$MH,"glib_autoptr_cleanup_GtkIconInfo");
    }
    public static void glib_autoptr_cleanup_GtkIconInfo ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkIconInfo$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkIconInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2241.glib_listautoptr_cleanup_GtkIconInfo$MH,"glib_listautoptr_cleanup_GtkIconInfo");
    }
    public static void glib_listautoptr_cleanup_GtkIconInfo ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkIconInfo$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkIconInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2241.glib_slistautoptr_cleanup_GtkIconInfo$MH,"glib_slistautoptr_cleanup_GtkIconInfo");
    }
    public static void glib_slistautoptr_cleanup_GtkIconInfo ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkIconInfo$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkIconInfo$MH() {
        return RuntimeHelper.requireNonNull(constants$2241.glib_queueautoptr_cleanup_GtkIconInfo$MH,"glib_queueautoptr_cleanup_GtkIconInfo");
    }
    public static void glib_queueautoptr_cleanup_GtkIconInfo ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkIconInfo$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkIconTheme_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIconTheme_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIconTheme_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIconTheme_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkIconTheme$MH() {
        return RuntimeHelper.requireNonNull(constants$2241.glib_autoptr_clear_GtkIconTheme$MH,"glib_autoptr_clear_GtkIconTheme");
    }
    public static void glib_autoptr_clear_GtkIconTheme ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkIconTheme$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkIconTheme$MH() {
        return RuntimeHelper.requireNonNull(constants$2241.glib_autoptr_cleanup_GtkIconTheme$MH,"glib_autoptr_cleanup_GtkIconTheme");
    }
    public static void glib_autoptr_cleanup_GtkIconTheme ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkIconTheme$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkIconTheme$MH() {
        return RuntimeHelper.requireNonNull(constants$2242.glib_listautoptr_cleanup_GtkIconTheme$MH,"glib_listautoptr_cleanup_GtkIconTheme");
    }
    public static void glib_listautoptr_cleanup_GtkIconTheme ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkIconTheme$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkIconTheme$MH() {
        return RuntimeHelper.requireNonNull(constants$2242.glib_slistautoptr_cleanup_GtkIconTheme$MH,"glib_slistautoptr_cleanup_GtkIconTheme");
    }
    public static void glib_slistautoptr_cleanup_GtkIconTheme ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkIconTheme$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkIconTheme$MH() {
        return RuntimeHelper.requireNonNull(constants$2242.glib_queueautoptr_cleanup_GtkIconTheme$MH,"glib_queueautoptr_cleanup_GtkIconTheme");
    }
    public static void glib_queueautoptr_cleanup_GtkIconTheme ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkIconTheme$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkIconView_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIconView_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIconView_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkIconView_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkIconView$MH() {
        return RuntimeHelper.requireNonNull(constants$2242.glib_autoptr_clear_GtkIconView$MH,"glib_autoptr_clear_GtkIconView");
    }
    public static void glib_autoptr_clear_GtkIconView ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkIconView$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkIconView$MH() {
        return RuntimeHelper.requireNonNull(constants$2242.glib_autoptr_cleanup_GtkIconView$MH,"glib_autoptr_cleanup_GtkIconView");
    }
    public static void glib_autoptr_cleanup_GtkIconView ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkIconView$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkIconView$MH() {
        return RuntimeHelper.requireNonNull(constants$2242.glib_listautoptr_cleanup_GtkIconView$MH,"glib_listautoptr_cleanup_GtkIconView");
    }
    public static void glib_listautoptr_cleanup_GtkIconView ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkIconView$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkIconView$MH() {
        return RuntimeHelper.requireNonNull(constants$2243.glib_slistautoptr_cleanup_GtkIconView$MH,"glib_slistautoptr_cleanup_GtkIconView");
    }
    public static void glib_slistautoptr_cleanup_GtkIconView ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkIconView$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


