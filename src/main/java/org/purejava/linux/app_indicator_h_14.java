// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class app_indicator_h_14 extends app_indicator_h_13 {

    public static MethodHandle glib_autoptr_cleanup_GdkPixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glib_autoptr_cleanup_GdkPixbuf$MH,"glib_autoptr_cleanup_GdkPixbuf");
    }
    public static void glib_autoptr_cleanup_GdkPixbuf ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkPixbuf$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkPixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glib_listautoptr_cleanup_GdkPixbuf$MH,"glib_listautoptr_cleanup_GdkPixbuf");
    }
    public static void glib_listautoptr_cleanup_GdkPixbuf ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkPixbuf$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkPixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glib_slistautoptr_cleanup_GdkPixbuf$MH,"glib_slistautoptr_cleanup_GdkPixbuf");
    }
    public static void glib_slistautoptr_cleanup_GdkPixbuf ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkPixbuf$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkPixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1308.glib_queueautoptr_cleanup_GdkPixbuf$MH,"glib_queueautoptr_cleanup_GdkPixbuf");
    }
    public static void glib_queueautoptr_cleanup_GdkPixbuf ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkPixbuf$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkPixbufAnimation_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufAnimation_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufAnimation_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufAnimation_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkPixbufAnimation$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glib_autoptr_clear_GdkPixbufAnimation$MH,"glib_autoptr_clear_GdkPixbufAnimation");
    }
    public static void glib_autoptr_clear_GdkPixbufAnimation ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkPixbufAnimation$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkPixbufAnimation$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glib_autoptr_cleanup_GdkPixbufAnimation$MH,"glib_autoptr_cleanup_GdkPixbufAnimation");
    }
    public static void glib_autoptr_cleanup_GdkPixbufAnimation ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkPixbufAnimation$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkPixbufAnimation$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glib_listautoptr_cleanup_GdkPixbufAnimation$MH,"glib_listautoptr_cleanup_GdkPixbufAnimation");
    }
    public static void glib_listautoptr_cleanup_GdkPixbufAnimation ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkPixbufAnimation$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkPixbufAnimation$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glib_slistautoptr_cleanup_GdkPixbufAnimation$MH,"glib_slistautoptr_cleanup_GdkPixbufAnimation");
    }
    public static void glib_slistautoptr_cleanup_GdkPixbufAnimation ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkPixbufAnimation$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkPixbufAnimation$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glib_queueautoptr_cleanup_GdkPixbufAnimation$MH,"glib_queueautoptr_cleanup_GdkPixbufAnimation");
    }
    public static void glib_queueautoptr_cleanup_GdkPixbufAnimation ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkPixbufAnimation$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkPixbufAnimationIter_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufAnimationIter_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufAnimationIter_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufAnimationIter_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkPixbufAnimationIter$MH() {
        return RuntimeHelper.requireNonNull(constants$1309.glib_autoptr_clear_GdkPixbufAnimationIter$MH,"glib_autoptr_clear_GdkPixbufAnimationIter");
    }
    public static void glib_autoptr_clear_GdkPixbufAnimationIter ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkPixbufAnimationIter$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkPixbufAnimationIter$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glib_autoptr_cleanup_GdkPixbufAnimationIter$MH,"glib_autoptr_cleanup_GdkPixbufAnimationIter");
    }
    public static void glib_autoptr_cleanup_GdkPixbufAnimationIter ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkPixbufAnimationIter$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkPixbufAnimationIter$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glib_listautoptr_cleanup_GdkPixbufAnimationIter$MH,"glib_listautoptr_cleanup_GdkPixbufAnimationIter");
    }
    public static void glib_listautoptr_cleanup_GdkPixbufAnimationIter ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkPixbufAnimationIter$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkPixbufAnimationIter$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glib_slistautoptr_cleanup_GdkPixbufAnimationIter$MH,"glib_slistautoptr_cleanup_GdkPixbufAnimationIter");
    }
    public static void glib_slistautoptr_cleanup_GdkPixbufAnimationIter ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkPixbufAnimationIter$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkPixbufAnimationIter$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glib_queueautoptr_cleanup_GdkPixbufAnimationIter$MH,"glib_queueautoptr_cleanup_GdkPixbufAnimationIter");
    }
    public static void glib_queueautoptr_cleanup_GdkPixbufAnimationIter ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkPixbufAnimationIter$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkPixbufLoader_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufLoader_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufLoader_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufLoader_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkPixbufLoader$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glib_autoptr_clear_GdkPixbufLoader$MH,"glib_autoptr_clear_GdkPixbufLoader");
    }
    public static void glib_autoptr_clear_GdkPixbufLoader ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkPixbufLoader$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkPixbufLoader$MH() {
        return RuntimeHelper.requireNonNull(constants$1310.glib_autoptr_cleanup_GdkPixbufLoader$MH,"glib_autoptr_cleanup_GdkPixbufLoader");
    }
    public static void glib_autoptr_cleanup_GdkPixbufLoader ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkPixbufLoader$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkPixbufLoader$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glib_listautoptr_cleanup_GdkPixbufLoader$MH,"glib_listautoptr_cleanup_GdkPixbufLoader");
    }
    public static void glib_listautoptr_cleanup_GdkPixbufLoader ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkPixbufLoader$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkPixbufLoader$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glib_slistautoptr_cleanup_GdkPixbufLoader$MH,"glib_slistautoptr_cleanup_GdkPixbufLoader");
    }
    public static void glib_slistautoptr_cleanup_GdkPixbufLoader ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkPixbufLoader$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkPixbufLoader$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glib_queueautoptr_cleanup_GdkPixbufLoader$MH,"glib_queueautoptr_cleanup_GdkPixbufLoader");
    }
    public static void glib_queueautoptr_cleanup_GdkPixbufLoader ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkPixbufLoader$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkPixbufSimpleAnim_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufSimpleAnim_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufSimpleAnim_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkPixbufSimpleAnim_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkPixbufSimpleAnim$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glib_autoptr_clear_GdkPixbufSimpleAnim$MH,"glib_autoptr_clear_GdkPixbufSimpleAnim");
    }
    public static void glib_autoptr_clear_GdkPixbufSimpleAnim ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkPixbufSimpleAnim$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkPixbufSimpleAnim$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glib_autoptr_cleanup_GdkPixbufSimpleAnim$MH,"glib_autoptr_cleanup_GdkPixbufSimpleAnim");
    }
    public static void glib_autoptr_cleanup_GdkPixbufSimpleAnim ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkPixbufSimpleAnim$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkPixbufSimpleAnim$MH() {
        return RuntimeHelper.requireNonNull(constants$1311.glib_listautoptr_cleanup_GdkPixbufSimpleAnim$MH,"glib_listautoptr_cleanup_GdkPixbufSimpleAnim");
    }
    public static void glib_listautoptr_cleanup_GdkPixbufSimpleAnim ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkPixbufSimpleAnim$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkPixbufSimpleAnim$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.glib_slistautoptr_cleanup_GdkPixbufSimpleAnim$MH,"glib_slistautoptr_cleanup_GdkPixbufSimpleAnim");
    }
    public static void glib_slistautoptr_cleanup_GdkPixbufSimpleAnim ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkPixbufSimpleAnim$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkPixbufSimpleAnim$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.glib_queueautoptr_cleanup_GdkPixbufSimpleAnim$MH,"glib_queueautoptr_cleanup_GdkPixbufSimpleAnim");
    }
    public static void glib_queueautoptr_cleanup_GdkPixbufSimpleAnim ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkPixbufSimpleAnim$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pixbuf_get_from_window$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.gdk_pixbuf_get_from_window$MH,"gdk_pixbuf_get_from_window");
    }
    public static MemoryAddress gdk_pixbuf_get_from_window ( Addressable window,  int src_x,  int src_y,  int width,  int height) {
        var mh$ = gdk_pixbuf_get_from_window$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(window, src_x, src_y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pixbuf_get_from_surface$MH() {
        return RuntimeHelper.requireNonNull(constants$1312.gdk_pixbuf_get_from_surface$MH,"gdk_pixbuf_get_from_surface");
    }
    public static MemoryAddress gdk_pixbuf_get_from_surface ( Addressable surface,  int src_x,  int src_y,  int width,  int height) {
        var mh$ = gdk_pixbuf_get_from_surface$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(surface, src_x, src_y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_map_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.pango_cairo_font_map_get_type$MH,"pango_cairo_font_map_get_type");
    }
    public static long pango_cairo_font_map_get_type () {
        var mh$ = pango_cairo_font_map_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_map_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.pango_cairo_font_map_new$MH,"pango_cairo_font_map_new");
    }
    public static MemoryAddress pango_cairo_font_map_new () {
        var mh$ = pango_cairo_font_map_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_map_new_for_font_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.pango_cairo_font_map_new_for_font_type$MH,"pango_cairo_font_map_new_for_font_type");
    }
    public static MemoryAddress pango_cairo_font_map_new_for_font_type ( int fonttype) {
        var mh$ = pango_cairo_font_map_new_for_font_type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fonttype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_map_get_default$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.pango_cairo_font_map_get_default$MH,"pango_cairo_font_map_get_default");
    }
    public static MemoryAddress pango_cairo_font_map_get_default () {
        var mh$ = pango_cairo_font_map_get_default$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_map_set_default$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.pango_cairo_font_map_set_default$MH,"pango_cairo_font_map_set_default");
    }
    public static void pango_cairo_font_map_set_default ( Addressable fontmap) {
        var mh$ = pango_cairo_font_map_set_default$MH();
        try {
            mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_map_get_font_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1313.pango_cairo_font_map_get_font_type$MH,"pango_cairo_font_map_get_font_type");
    }
    public static int pango_cairo_font_map_get_font_type ( Addressable fontmap) {
        var mh$ = pango_cairo_font_map_get_font_type$MH();
        try {
            return (int)mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_map_set_resolution$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.pango_cairo_font_map_set_resolution$MH,"pango_cairo_font_map_set_resolution");
    }
    public static void pango_cairo_font_map_set_resolution ( Addressable fontmap,  double dpi) {
        var mh$ = pango_cairo_font_map_set_resolution$MH();
        try {
            mh$.invokeExact(fontmap, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_map_get_resolution$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.pango_cairo_font_map_get_resolution$MH,"pango_cairo_font_map_get_resolution");
    }
    public static double pango_cairo_font_map_get_resolution ( Addressable fontmap) {
        var mh$ = pango_cairo_font_map_get_resolution$MH();
        try {
            return (double)mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_map_create_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.pango_cairo_font_map_create_context$MH,"pango_cairo_font_map_create_context");
    }
    public static MemoryAddress pango_cairo_font_map_create_context ( Addressable fontmap) {
        var mh$ = pango_cairo_font_map_create_context$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fontmap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.pango_cairo_font_get_type$MH,"pango_cairo_font_get_type");
    }
    public static long pango_cairo_font_get_type () {
        var mh$ = pango_cairo_font_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_font_get_scaled_font$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.pango_cairo_font_get_scaled_font$MH,"pango_cairo_font_get_scaled_font");
    }
    public static MemoryAddress pango_cairo_font_get_scaled_font ( Addressable font) {
        var mh$ = pango_cairo_font_get_scaled_font$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(font);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_update_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1314.pango_cairo_update_context$MH,"pango_cairo_update_context");
    }
    public static void pango_cairo_update_context ( Addressable cr,  Addressable context) {
        var mh$ = pango_cairo_update_context$MH();
        try {
            mh$.invokeExact(cr, context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_context_set_font_options$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.pango_cairo_context_set_font_options$MH,"pango_cairo_context_set_font_options");
    }
    public static void pango_cairo_context_set_font_options ( Addressable context,  Addressable options) {
        var mh$ = pango_cairo_context_set_font_options$MH();
        try {
            mh$.invokeExact(context, options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_context_get_font_options$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.pango_cairo_context_get_font_options$MH,"pango_cairo_context_get_font_options");
    }
    public static MemoryAddress pango_cairo_context_get_font_options ( Addressable context) {
        var mh$ = pango_cairo_context_get_font_options$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_context_set_resolution$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.pango_cairo_context_set_resolution$MH,"pango_cairo_context_set_resolution");
    }
    public static void pango_cairo_context_set_resolution ( Addressable context,  double dpi) {
        var mh$ = pango_cairo_context_set_resolution$MH();
        try {
            mh$.invokeExact(context, dpi);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_context_get_resolution$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.pango_cairo_context_get_resolution$MH,"pango_cairo_context_get_resolution");
    }
    public static double pango_cairo_context_get_resolution ( Addressable context) {
        var mh$ = pango_cairo_context_get_resolution$MH();
        try {
            return (double)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_context_set_shape_renderer$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.pango_cairo_context_set_shape_renderer$MH,"pango_cairo_context_set_shape_renderer");
    }
    public static void pango_cairo_context_set_shape_renderer ( Addressable context,  Addressable func,  Addressable data,  Addressable dnotify) {
        var mh$ = pango_cairo_context_set_shape_renderer$MH();
        try {
            mh$.invokeExact(context, func, data, dnotify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_context_get_shape_renderer$MH() {
        return RuntimeHelper.requireNonNull(constants$1315.pango_cairo_context_get_shape_renderer$MH,"pango_cairo_context_get_shape_renderer");
    }
    public static MemoryAddress pango_cairo_context_get_shape_renderer ( Addressable context,  Addressable data) {
        var mh$ = pango_cairo_context_get_shape_renderer$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(context, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_create_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.pango_cairo_create_context$MH,"pango_cairo_create_context");
    }
    public static MemoryAddress pango_cairo_create_context ( Addressable cr) {
        var mh$ = pango_cairo_create_context$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_create_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.pango_cairo_create_layout$MH,"pango_cairo_create_layout");
    }
    public static MemoryAddress pango_cairo_create_layout ( Addressable cr) {
        var mh$ = pango_cairo_create_layout$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_update_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.pango_cairo_update_layout$MH,"pango_cairo_update_layout");
    }
    public static void pango_cairo_update_layout ( Addressable cr,  Addressable layout) {
        var mh$ = pango_cairo_update_layout$MH();
        try {
            mh$.invokeExact(cr, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_show_glyph_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.pango_cairo_show_glyph_string$MH,"pango_cairo_show_glyph_string");
    }
    public static void pango_cairo_show_glyph_string ( Addressable cr,  Addressable font,  Addressable glyphs) {
        var mh$ = pango_cairo_show_glyph_string$MH();
        try {
            mh$.invokeExact(cr, font, glyphs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_show_glyph_item$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.pango_cairo_show_glyph_item$MH,"pango_cairo_show_glyph_item");
    }
    public static void pango_cairo_show_glyph_item ( Addressable cr,  Addressable text,  Addressable glyph_item) {
        var mh$ = pango_cairo_show_glyph_item$MH();
        try {
            mh$.invokeExact(cr, text, glyph_item);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_show_layout_line$MH() {
        return RuntimeHelper.requireNonNull(constants$1316.pango_cairo_show_layout_line$MH,"pango_cairo_show_layout_line");
    }
    public static void pango_cairo_show_layout_line ( Addressable cr,  Addressable line) {
        var mh$ = pango_cairo_show_layout_line$MH();
        try {
            mh$.invokeExact(cr, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_show_layout$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.pango_cairo_show_layout$MH,"pango_cairo_show_layout");
    }
    public static void pango_cairo_show_layout ( Addressable cr,  Addressable layout) {
        var mh$ = pango_cairo_show_layout$MH();
        try {
            mh$.invokeExact(cr, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_show_error_underline$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.pango_cairo_show_error_underline$MH,"pango_cairo_show_error_underline");
    }
    public static void pango_cairo_show_error_underline ( Addressable cr,  double x,  double y,  double width,  double height) {
        var mh$ = pango_cairo_show_error_underline$MH();
        try {
            mh$.invokeExact(cr, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_glyph_string_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.pango_cairo_glyph_string_path$MH,"pango_cairo_glyph_string_path");
    }
    public static void pango_cairo_glyph_string_path ( Addressable cr,  Addressable font,  Addressable glyphs) {
        var mh$ = pango_cairo_glyph_string_path$MH();
        try {
            mh$.invokeExact(cr, font, glyphs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_layout_line_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.pango_cairo_layout_line_path$MH,"pango_cairo_layout_line_path");
    }
    public static void pango_cairo_layout_line_path ( Addressable cr,  Addressable line) {
        var mh$ = pango_cairo_layout_line_path$MH();
        try {
            mh$.invokeExact(cr, line);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_layout_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.pango_cairo_layout_path$MH,"pango_cairo_layout_path");
    }
    public static void pango_cairo_layout_path ( Addressable cr,  Addressable layout) {
        var mh$ = pango_cairo_layout_path$MH();
        try {
            mh$.invokeExact(cr, layout);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pango_cairo_error_underline_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1317.pango_cairo_error_underline_path$MH,"pango_cairo_error_underline_path");
    }
    public static void pango_cairo_error_underline_path ( Addressable cr,  double x,  double y,  double width,  double height) {
        var mh$ = pango_cairo_error_underline_path$MH();
        try {
            mh$.invokeExact(cr, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_create$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.gdk_cairo_create$MH,"gdk_cairo_create");
    }
    public static MemoryAddress gdk_cairo_create ( Addressable window) {
        var mh$ = gdk_cairo_create$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_get_clip_rectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.gdk_cairo_get_clip_rectangle$MH,"gdk_cairo_get_clip_rectangle");
    }
    public static int gdk_cairo_get_clip_rectangle ( Addressable cr,  Addressable rect) {
        var mh$ = gdk_cairo_get_clip_rectangle$MH();
        try {
            return (int)mh$.invokeExact(cr, rect);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_set_source_rgba$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.gdk_cairo_set_source_rgba$MH,"gdk_cairo_set_source_rgba");
    }
    public static void gdk_cairo_set_source_rgba ( Addressable cr,  Addressable rgba) {
        var mh$ = gdk_cairo_set_source_rgba$MH();
        try {
            mh$.invokeExact(cr, rgba);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_set_source_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.gdk_cairo_set_source_pixbuf$MH,"gdk_cairo_set_source_pixbuf");
    }
    public static void gdk_cairo_set_source_pixbuf ( Addressable cr,  Addressable pixbuf,  double pixbuf_x,  double pixbuf_y) {
        var mh$ = gdk_cairo_set_source_pixbuf$MH();
        try {
            mh$.invokeExact(cr, pixbuf, pixbuf_x, pixbuf_y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_set_source_window$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.gdk_cairo_set_source_window$MH,"gdk_cairo_set_source_window");
    }
    public static void gdk_cairo_set_source_window ( Addressable cr,  Addressable window,  double x,  double y) {
        var mh$ = gdk_cairo_set_source_window$MH();
        try {
            mh$.invokeExact(cr, window, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_rectangle$MH() {
        return RuntimeHelper.requireNonNull(constants$1318.gdk_cairo_rectangle$MH,"gdk_cairo_rectangle");
    }
    public static void gdk_cairo_rectangle ( Addressable cr,  Addressable rectangle) {
        var mh$ = gdk_cairo_rectangle$MH();
        try {
            mh$.invokeExact(cr, rectangle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_region$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.gdk_cairo_region$MH,"gdk_cairo_region");
    }
    public static void gdk_cairo_region ( Addressable cr,  Addressable region) {
        var mh$ = gdk_cairo_region$MH();
        try {
            mh$.invokeExact(cr, region);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_region_create_from_surface$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.gdk_cairo_region_create_from_surface$MH,"gdk_cairo_region_create_from_surface");
    }
    public static MemoryAddress gdk_cairo_region_create_from_surface ( Addressable surface) {
        var mh$ = gdk_cairo_region_create_from_surface$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(surface);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_set_source_color$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.gdk_cairo_set_source_color$MH,"gdk_cairo_set_source_color");
    }
    public static void gdk_cairo_set_source_color ( Addressable cr,  Addressable color) {
        var mh$ = gdk_cairo_set_source_color$MH();
        try {
            mh$.invokeExact(cr, color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_surface_create_from_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.gdk_cairo_surface_create_from_pixbuf$MH,"gdk_cairo_surface_create_from_pixbuf");
    }
    public static MemoryAddress gdk_cairo_surface_create_from_pixbuf ( Addressable pixbuf,  int scale,  Addressable for_window) {
        var mh$ = gdk_cairo_surface_create_from_pixbuf$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pixbuf, scale, for_window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_draw_from_gl$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.gdk_cairo_draw_from_gl$MH,"gdk_cairo_draw_from_gl");
    }
    public static void gdk_cairo_draw_from_gl ( Addressable cr,  Addressable window,  int source,  int source_type,  int buffer_scale,  int x,  int y,  int width,  int height) {
        var mh$ = gdk_cairo_draw_from_gl$MH();
        try {
            mh$.invokeExact(cr, window, source, source_type, buffer_scale, x, y, width, height);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cairo_get_drawing_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1319.gdk_cairo_get_drawing_context$MH,"gdk_cairo_get_drawing_context");
    }
    public static MemoryAddress gdk_cairo_get_drawing_context ( Addressable cr) {
        var mh$ = gdk_cairo_get_drawing_context$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GDK_X_CURSOR() {
        return (int)0L;
    }
    public static int GDK_ARROW() {
        return (int)2L;
    }
    public static int GDK_BASED_ARROW_DOWN() {
        return (int)4L;
    }
    public static int GDK_BASED_ARROW_UP() {
        return (int)6L;
    }
    public static int GDK_BOAT() {
        return (int)8L;
    }
    public static int GDK_BOGOSITY() {
        return (int)10L;
    }
    public static int GDK_BOTTOM_LEFT_CORNER() {
        return (int)12L;
    }
    public static int GDK_BOTTOM_RIGHT_CORNER() {
        return (int)14L;
    }
    public static int GDK_BOTTOM_SIDE() {
        return (int)16L;
    }
    public static int GDK_BOTTOM_TEE() {
        return (int)18L;
    }
    public static int GDK_BOX_SPIRAL() {
        return (int)20L;
    }
    public static int GDK_CENTER_PTR() {
        return (int)22L;
    }
    public static int GDK_CIRCLE() {
        return (int)24L;
    }
    public static int GDK_CLOCK() {
        return (int)26L;
    }
    public static int GDK_COFFEE_MUG() {
        return (int)28L;
    }
    public static int GDK_CROSS() {
        return (int)30L;
    }
    public static int GDK_CROSS_REVERSE() {
        return (int)32L;
    }
    public static int GDK_CROSSHAIR() {
        return (int)34L;
    }
    public static int GDK_DIAMOND_CROSS() {
        return (int)36L;
    }
    public static int GDK_DOT() {
        return (int)38L;
    }
    public static int GDK_DOTBOX() {
        return (int)40L;
    }
    public static int GDK_DOUBLE_ARROW() {
        return (int)42L;
    }
    public static int GDK_DRAFT_LARGE() {
        return (int)44L;
    }
    public static int GDK_DRAFT_SMALL() {
        return (int)46L;
    }
    public static int GDK_DRAPED_BOX() {
        return (int)48L;
    }
    public static int GDK_EXCHANGE() {
        return (int)50L;
    }
    public static int GDK_FLEUR() {
        return (int)52L;
    }
    public static int GDK_GOBBLER() {
        return (int)54L;
    }
    public static int GDK_GUMBY() {
        return (int)56L;
    }
    public static int GDK_HAND1() {
        return (int)58L;
    }
    public static int GDK_HAND2() {
        return (int)60L;
    }
    public static int GDK_HEART() {
        return (int)62L;
    }
    public static int GDK_ICON() {
        return (int)64L;
    }
    public static int GDK_IRON_CROSS() {
        return (int)66L;
    }
    public static int GDK_LEFT_PTR() {
        return (int)68L;
    }
    public static int GDK_LEFT_SIDE() {
        return (int)70L;
    }
    public static int GDK_LEFT_TEE() {
        return (int)72L;
    }
    public static int GDK_LEFTBUTTON() {
        return (int)74L;
    }
    public static int GDK_LL_ANGLE() {
        return (int)76L;
    }
    public static int GDK_LR_ANGLE() {
        return (int)78L;
    }
    public static int GDK_MAN() {
        return (int)80L;
    }
    public static int GDK_MIDDLEBUTTON() {
        return (int)82L;
    }
    public static int GDK_MOUSE() {
        return (int)84L;
    }
    public static int GDK_PENCIL() {
        return (int)86L;
    }
    public static int GDK_PIRATE() {
        return (int)88L;
    }
    public static int GDK_PLUS() {
        return (int)90L;
    }
    public static int GDK_QUESTION_ARROW() {
        return (int)92L;
    }
    public static int GDK_RIGHT_PTR() {
        return (int)94L;
    }
    public static int GDK_RIGHT_SIDE() {
        return (int)96L;
    }
    public static int GDK_RIGHT_TEE() {
        return (int)98L;
    }
    public static int GDK_RIGHTBUTTON() {
        return (int)100L;
    }
    public static int GDK_RTL_LOGO() {
        return (int)102L;
    }
    public static int GDK_SAILBOAT() {
        return (int)104L;
    }
    public static int GDK_SB_DOWN_ARROW() {
        return (int)106L;
    }
    public static int GDK_SB_H_DOUBLE_ARROW() {
        return (int)108L;
    }
    public static int GDK_SB_LEFT_ARROW() {
        return (int)110L;
    }
    public static int GDK_SB_RIGHT_ARROW() {
        return (int)112L;
    }
    public static int GDK_SB_UP_ARROW() {
        return (int)114L;
    }
    public static int GDK_SB_V_DOUBLE_ARROW() {
        return (int)116L;
    }
    public static int GDK_SHUTTLE() {
        return (int)118L;
    }
    public static int GDK_SIZING() {
        return (int)120L;
    }
    public static int GDK_SPIDER() {
        return (int)122L;
    }
    public static int GDK_SPRAYCAN() {
        return (int)124L;
    }
    public static int GDK_STAR() {
        return (int)126L;
    }
    public static int GDK_TARGET() {
        return (int)128L;
    }
    public static int GDK_TCROSS() {
        return (int)130L;
    }
    public static int GDK_TOP_LEFT_ARROW() {
        return (int)132L;
    }
    public static int GDK_TOP_LEFT_CORNER() {
        return (int)134L;
    }
    public static int GDK_TOP_RIGHT_CORNER() {
        return (int)136L;
    }
    public static int GDK_TOP_SIDE() {
        return (int)138L;
    }
    public static int GDK_TOP_TEE() {
        return (int)140L;
    }
    public static int GDK_TREK() {
        return (int)142L;
    }
    public static int GDK_UL_ANGLE() {
        return (int)144L;
    }
    public static int GDK_UMBRELLA() {
        return (int)146L;
    }
    public static int GDK_UR_ANGLE() {
        return (int)148L;
    }
    public static int GDK_WATCH() {
        return (int)150L;
    }
    public static int GDK_XTERM() {
        return (int)152L;
    }
    public static int GDK_LAST_CURSOR() {
        return (int)153L;
    }
    public static int GDK_BLANK_CURSOR() {
        return (int)-2L;
    }
    public static int GDK_CURSOR_IS_PIXMAP() {
        return (int)-1L;
    }
    public static MethodHandle gdk_cursor_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.gdk_cursor_get_type$MH,"gdk_cursor_get_type");
    }
    public static long gdk_cursor_get_type () {
        var mh$ = gdk_cursor_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_new_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.gdk_cursor_new_for_display$MH,"gdk_cursor_new_for_display");
    }
    public static MemoryAddress gdk_cursor_new_for_display ( Addressable display,  int cursor_type) {
        var mh$ = gdk_cursor_new_for_display$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(display, cursor_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.gdk_cursor_new$MH,"gdk_cursor_new");
    }
    public static MemoryAddress gdk_cursor_new ( int cursor_type) {
        var mh$ = gdk_cursor_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cursor_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_new_from_pixbuf$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.gdk_cursor_new_from_pixbuf$MH,"gdk_cursor_new_from_pixbuf");
    }
    public static MemoryAddress gdk_cursor_new_from_pixbuf ( Addressable display,  Addressable pixbuf,  int x,  int y) {
        var mh$ = gdk_cursor_new_from_pixbuf$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(display, pixbuf, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_new_from_surface$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.gdk_cursor_new_from_surface$MH,"gdk_cursor_new_from_surface");
    }
    public static MemoryAddress gdk_cursor_new_from_surface ( Addressable display,  Addressable surface,  double x,  double y) {
        var mh$ = gdk_cursor_new_from_surface$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(display, surface, x, y);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_new_from_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1320.gdk_cursor_new_from_name$MH,"gdk_cursor_new_from_name");
    }
    public static MemoryAddress gdk_cursor_new_from_name ( Addressable display,  Addressable name) {
        var mh$ = gdk_cursor_new_from_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(display, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_get_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.gdk_cursor_get_display$MH,"gdk_cursor_get_display");
    }
    public static MemoryAddress gdk_cursor_get_display ( Addressable cursor) {
        var mh$ = gdk_cursor_get_display$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.gdk_cursor_ref$MH,"gdk_cursor_ref");
    }
    public static MemoryAddress gdk_cursor_ref ( Addressable cursor) {
        var mh$ = gdk_cursor_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.gdk_cursor_unref$MH,"gdk_cursor_unref");
    }
    public static void gdk_cursor_unref ( Addressable cursor) {
        var mh$ = gdk_cursor_unref$MH();
        try {
            mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_get_image$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.gdk_cursor_get_image$MH,"gdk_cursor_get_image");
    }
    public static MemoryAddress gdk_cursor_get_image ( Addressable cursor) {
        var mh$ = gdk_cursor_get_image$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_get_surface$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.gdk_cursor_get_surface$MH,"gdk_cursor_get_surface");
    }
    public static MemoryAddress gdk_cursor_get_surface ( Addressable cursor,  Addressable x_hot,  Addressable y_hot) {
        var mh$ = gdk_cursor_get_surface$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cursor, x_hot, y_hot);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_get_cursor_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1321.gdk_cursor_get_cursor_type$MH,"gdk_cursor_get_cursor_type");
    }
    public static int gdk_cursor_get_cursor_type ( Addressable cursor) {
        var mh$ = gdk_cursor_get_cursor_type$MH();
        try {
            return (int)mh$.invokeExact(cursor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GDK_DEVICE_PAD_FEATURE_BUTTON() {
        return (int)0L;
    }
    public static int GDK_DEVICE_PAD_FEATURE_RING() {
        return (int)1L;
    }
    public static int GDK_DEVICE_PAD_FEATURE_STRIP() {
        return (int)2L;
    }
    public static MethodHandle gdk_device_pad_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.gdk_device_pad_get_type$MH,"gdk_device_pad_get_type");
    }
    public static long gdk_device_pad_get_type () {
        var mh$ = gdk_device_pad_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_device_pad_get_n_groups$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.gdk_device_pad_get_n_groups$MH,"gdk_device_pad_get_n_groups");
    }
    public static int gdk_device_pad_get_n_groups ( Addressable pad) {
        var mh$ = gdk_device_pad_get_n_groups$MH();
        try {
            return (int)mh$.invokeExact(pad);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_device_pad_get_group_n_modes$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.gdk_device_pad_get_group_n_modes$MH,"gdk_device_pad_get_group_n_modes");
    }
    public static int gdk_device_pad_get_group_n_modes ( Addressable pad,  int group_idx) {
        var mh$ = gdk_device_pad_get_group_n_modes$MH();
        try {
            return (int)mh$.invokeExact(pad, group_idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_device_pad_get_n_features$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.gdk_device_pad_get_n_features$MH,"gdk_device_pad_get_n_features");
    }
    public static int gdk_device_pad_get_n_features ( Addressable pad,  int feature) {
        var mh$ = gdk_device_pad_get_n_features$MH();
        try {
            return (int)mh$.invokeExact(pad, feature);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_device_pad_get_feature_group$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.gdk_device_pad_get_feature_group$MH,"gdk_device_pad_get_feature_group");
    }
    public static int gdk_device_pad_get_feature_group ( Addressable pad,  int feature,  int feature_idx) {
        var mh$ = gdk_device_pad_get_feature_group$MH();
        try {
            return (int)mh$.invokeExact(pad, feature, feature_idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_display_manager_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1322.gdk_display_manager_get_type$MH,"gdk_display_manager_get_type");
    }
    public static long gdk_display_manager_get_type () {
        var mh$ = gdk_display_manager_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_display_manager_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.gdk_display_manager_get$MH,"gdk_display_manager_get");
    }
    public static MemoryAddress gdk_display_manager_get () {
        var mh$ = gdk_display_manager_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_display_manager_get_default_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.gdk_display_manager_get_default_display$MH,"gdk_display_manager_get_default_display");
    }
    public static MemoryAddress gdk_display_manager_get_default_display ( Addressable manager) {
        var mh$ = gdk_display_manager_get_default_display$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_display_manager_set_default_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.gdk_display_manager_set_default_display$MH,"gdk_display_manager_set_default_display");
    }
    public static void gdk_display_manager_set_default_display ( Addressable manager,  Addressable display) {
        var mh$ = gdk_display_manager_set_default_display$MH();
        try {
            mh$.invokeExact(manager, display);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_display_manager_list_displays$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.gdk_display_manager_list_displays$MH,"gdk_display_manager_list_displays");
    }
    public static MemoryAddress gdk_display_manager_list_displays ( Addressable manager) {
        var mh$ = gdk_display_manager_list_displays$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(manager);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_display_manager_open_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.gdk_display_manager_open_display$MH,"gdk_display_manager_open_display");
    }
    public static MemoryAddress gdk_display_manager_open_display ( Addressable manager,  Addressable name) {
        var mh$ = gdk_display_manager_open_display$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(manager, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_cursor_type_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1323.gdk_cursor_type_get_type$MH,"gdk_cursor_type_get_type");
    }
    public static long gdk_cursor_type_get_type () {
        var mh$ = gdk_cursor_type_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_input_source_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.gdk_input_source_get_type$MH,"gdk_input_source_get_type");
    }
    public static long gdk_input_source_get_type () {
        var mh$ = gdk_input_source_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_input_mode_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.gdk_input_mode_get_type$MH,"gdk_input_mode_get_type");
    }
    public static long gdk_input_mode_get_type () {
        var mh$ = gdk_input_mode_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_device_type_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.gdk_device_type_get_type$MH,"gdk_device_type_get_type");
    }
    public static long gdk_device_type_get_type () {
        var mh$ = gdk_device_type_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_device_pad_feature_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.gdk_device_pad_feature_get_type$MH,"gdk_device_pad_feature_get_type");
    }
    public static long gdk_device_pad_feature_get_type () {
        var mh$ = gdk_device_pad_feature_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_device_tool_type_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.gdk_device_tool_type_get_type$MH,"gdk_device_tool_type_get_type");
    }
    public static long gdk_device_tool_type_get_type () {
        var mh$ = gdk_device_tool_type_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_drag_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1324.gdk_drag_action_get_type$MH,"gdk_drag_action_get_type");
    }
    public static long gdk_drag_action_get_type () {
        var mh$ = gdk_drag_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_drag_cancel_reason_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.gdk_drag_cancel_reason_get_type$MH,"gdk_drag_cancel_reason_get_type");
    }
    public static long gdk_drag_cancel_reason_get_type () {
        var mh$ = gdk_drag_cancel_reason_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_drag_protocol_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.gdk_drag_protocol_get_type$MH,"gdk_drag_protocol_get_type");
    }
    public static long gdk_drag_protocol_get_type () {
        var mh$ = gdk_drag_protocol_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_filter_return_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.gdk_filter_return_get_type$MH,"gdk_filter_return_get_type");
    }
    public static long gdk_filter_return_get_type () {
        var mh$ = gdk_filter_return_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_event_type_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.gdk_event_type_get_type$MH,"gdk_event_type_get_type");
    }
    public static long gdk_event_type_get_type () {
        var mh$ = gdk_event_type_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visibility_state_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.gdk_visibility_state_get_type$MH,"gdk_visibility_state_get_type");
    }
    public static long gdk_visibility_state_get_type () {
        var mh$ = gdk_visibility_state_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_touchpad_gesture_phase_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1325.gdk_touchpad_gesture_phase_get_type$MH,"gdk_touchpad_gesture_phase_get_type");
    }
    public static long gdk_touchpad_gesture_phase_get_type () {
        var mh$ = gdk_touchpad_gesture_phase_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_scroll_direction_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.gdk_scroll_direction_get_type$MH,"gdk_scroll_direction_get_type");
    }
    public static long gdk_scroll_direction_get_type () {
        var mh$ = gdk_scroll_direction_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_notify_type_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.gdk_notify_type_get_type$MH,"gdk_notify_type_get_type");
    }
    public static long gdk_notify_type_get_type () {
        var mh$ = gdk_notify_type_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_crossing_mode_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.gdk_crossing_mode_get_type$MH,"gdk_crossing_mode_get_type");
    }
    public static long gdk_crossing_mode_get_type () {
        var mh$ = gdk_crossing_mode_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_property_state_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.gdk_property_state_get_type$MH,"gdk_property_state_get_type");
    }
    public static long gdk_property_state_get_type () {
        var mh$ = gdk_property_state_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_window_state_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.gdk_window_state_get_type$MH,"gdk_window_state_get_type");
    }
    public static long gdk_window_state_get_type () {
        var mh$ = gdk_window_state_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_setting_action_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1326.gdk_setting_action_get_type$MH,"gdk_setting_action_get_type");
    }
    public static long gdk_setting_action_get_type () {
        var mh$ = gdk_setting_action_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_owner_change_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.gdk_owner_change_get_type$MH,"gdk_owner_change_get_type");
    }
    public static long gdk_owner_change_get_type () {
        var mh$ = gdk_owner_change_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_frame_clock_phase_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.gdk_frame_clock_phase_get_type$MH,"gdk_frame_clock_phase_get_type");
    }
    public static long gdk_frame_clock_phase_get_type () {
        var mh$ = gdk_frame_clock_phase_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_subpixel_layout_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.gdk_subpixel_layout_get_type$MH,"gdk_subpixel_layout_get_type");
    }
    public static long gdk_subpixel_layout_get_type () {
        var mh$ = gdk_subpixel_layout_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_prop_mode_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.gdk_prop_mode_get_type$MH,"gdk_prop_mode_get_type");
    }
    public static long gdk_prop_mode_get_type () {
        var mh$ = gdk_prop_mode_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_seat_capabilities_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.gdk_seat_capabilities_get_type$MH,"gdk_seat_capabilities_get_type");
    }
    public static long gdk_seat_capabilities_get_type () {
        var mh$ = gdk_seat_capabilities_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_byte_order_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1327.gdk_byte_order_get_type$MH,"gdk_byte_order_get_type");
    }
    public static long gdk_byte_order_get_type () {
        var mh$ = gdk_byte_order_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_modifier_type_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.gdk_modifier_type_get_type$MH,"gdk_modifier_type_get_type");
    }
    public static long gdk_modifier_type_get_type () {
        var mh$ = gdk_modifier_type_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_modifier_intent_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.gdk_modifier_intent_get_type$MH,"gdk_modifier_intent_get_type");
    }
    public static long gdk_modifier_intent_get_type () {
        var mh$ = gdk_modifier_intent_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_status_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.gdk_status_get_type$MH,"gdk_status_get_type");
    }
    public static long gdk_status_get_type () {
        var mh$ = gdk_status_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_grab_status_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.gdk_grab_status_get_type$MH,"gdk_grab_status_get_type");
    }
    public static long gdk_grab_status_get_type () {
        var mh$ = gdk_grab_status_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_grab_ownership_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.gdk_grab_ownership_get_type$MH,"gdk_grab_ownership_get_type");
    }
    public static long gdk_grab_ownership_get_type () {
        var mh$ = gdk_grab_ownership_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_event_mask_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1328.gdk_event_mask_get_type$MH,"gdk_event_mask_get_type");
    }
    public static long gdk_event_mask_get_type () {
        var mh$ = gdk_event_mask_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_error_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.gdk_gl_error_get_type$MH,"gdk_gl_error_get_type");
    }
    public static long gdk_gl_error_get_type () {
        var mh$ = gdk_gl_error_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_window_type_hint_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.gdk_window_type_hint_get_type$MH,"gdk_window_type_hint_get_type");
    }
    public static long gdk_window_type_hint_get_type () {
        var mh$ = gdk_window_type_hint_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_axis_use_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.gdk_axis_use_get_type$MH,"gdk_axis_use_get_type");
    }
    public static long gdk_axis_use_get_type () {
        var mh$ = gdk_axis_use_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_axis_flags_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.gdk_axis_flags_get_type$MH,"gdk_axis_flags_get_type");
    }
    public static long gdk_axis_flags_get_type () {
        var mh$ = gdk_axis_flags_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_type_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.gdk_visual_type_get_type$MH,"gdk_visual_type_get_type");
    }
    public static long gdk_visual_type_get_type () {
        var mh$ = gdk_visual_type_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_window_window_class_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1329.gdk_window_window_class_get_type$MH,"gdk_window_window_class_get_type");
    }
    public static long gdk_window_window_class_get_type () {
        var mh$ = gdk_window_window_class_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_window_type_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.gdk_window_type_get_type$MH,"gdk_window_type_get_type");
    }
    public static long gdk_window_type_get_type () {
        var mh$ = gdk_window_type_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_window_attributes_type_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.gdk_window_attributes_type_get_type$MH,"gdk_window_attributes_type_get_type");
    }
    public static long gdk_window_attributes_type_get_type () {
        var mh$ = gdk_window_attributes_type_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_window_hints_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.gdk_window_hints_get_type$MH,"gdk_window_hints_get_type");
    }
    public static long gdk_window_hints_get_type () {
        var mh$ = gdk_window_hints_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_wm_decoration_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.gdk_wm_decoration_get_type$MH,"gdk_wm_decoration_get_type");
    }
    public static long gdk_wm_decoration_get_type () {
        var mh$ = gdk_wm_decoration_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_wm_function_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.gdk_wm_function_get_type$MH,"gdk_wm_function_get_type");
    }
    public static long gdk_wm_function_get_type () {
        var mh$ = gdk_wm_function_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gravity_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1330.gdk_gravity_get_type$MH,"gdk_gravity_get_type");
    }
    public static long gdk_gravity_get_type () {
        var mh$ = gdk_gravity_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_anchor_hints_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.gdk_anchor_hints_get_type$MH,"gdk_anchor_hints_get_type");
    }
    public static long gdk_anchor_hints_get_type () {
        var mh$ = gdk_anchor_hints_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_window_edge_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.gdk_window_edge_get_type$MH,"gdk_window_edge_get_type");
    }
    public static long gdk_window_edge_get_type () {
        var mh$ = gdk_window_edge_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_fullscreen_mode_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.gdk_fullscreen_mode_get_type$MH,"gdk_fullscreen_mode_get_type");
    }
    public static long gdk_fullscreen_mode_get_type () {
        var mh$ = gdk_fullscreen_mode_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.gdk_gl_error_quark$MH,"gdk_gl_error_quark");
    }
    public static int gdk_gl_error_quark () {
        var mh$ = gdk_gl_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.gdk_gl_context_get_type$MH,"gdk_gl_context_get_type");
    }
    public static long gdk_gl_context_get_type () {
        var mh$ = gdk_gl_context_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_get_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1331.gdk_gl_context_get_display$MH,"gdk_gl_context_get_display");
    }
    public static MemoryAddress gdk_gl_context_get_display ( Addressable context) {
        var mh$ = gdk_gl_context_get_display$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_get_window$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.gdk_gl_context_get_window$MH,"gdk_gl_context_get_window");
    }
    public static MemoryAddress gdk_gl_context_get_window ( Addressable context) {
        var mh$ = gdk_gl_context_get_window$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_get_shared_context$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.gdk_gl_context_get_shared_context$MH,"gdk_gl_context_get_shared_context");
    }
    public static MemoryAddress gdk_gl_context_get_shared_context ( Addressable context) {
        var mh$ = gdk_gl_context_get_shared_context$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_get_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.gdk_gl_context_get_version$MH,"gdk_gl_context_get_version");
    }
    public static void gdk_gl_context_get_version ( Addressable context,  Addressable major,  Addressable minor) {
        var mh$ = gdk_gl_context_get_version$MH();
        try {
            mh$.invokeExact(context, major, minor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_is_legacy$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.gdk_gl_context_is_legacy$MH,"gdk_gl_context_is_legacy");
    }
    public static int gdk_gl_context_is_legacy ( Addressable context) {
        var mh$ = gdk_gl_context_is_legacy$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_set_required_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.gdk_gl_context_set_required_version$MH,"gdk_gl_context_set_required_version");
    }
    public static void gdk_gl_context_set_required_version ( Addressable context,  int major,  int minor) {
        var mh$ = gdk_gl_context_set_required_version$MH();
        try {
            mh$.invokeExact(context, major, minor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_get_required_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1332.gdk_gl_context_get_required_version$MH,"gdk_gl_context_get_required_version");
    }
    public static void gdk_gl_context_get_required_version ( Addressable context,  Addressable major,  Addressable minor) {
        var mh$ = gdk_gl_context_get_required_version$MH();
        try {
            mh$.invokeExact(context, major, minor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_set_debug_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.gdk_gl_context_set_debug_enabled$MH,"gdk_gl_context_set_debug_enabled");
    }
    public static void gdk_gl_context_set_debug_enabled ( Addressable context,  int enabled) {
        var mh$ = gdk_gl_context_set_debug_enabled$MH();
        try {
            mh$.invokeExact(context, enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_get_debug_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.gdk_gl_context_get_debug_enabled$MH,"gdk_gl_context_get_debug_enabled");
    }
    public static int gdk_gl_context_get_debug_enabled ( Addressable context) {
        var mh$ = gdk_gl_context_get_debug_enabled$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_set_forward_compatible$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.gdk_gl_context_set_forward_compatible$MH,"gdk_gl_context_set_forward_compatible");
    }
    public static void gdk_gl_context_set_forward_compatible ( Addressable context,  int compatible) {
        var mh$ = gdk_gl_context_set_forward_compatible$MH();
        try {
            mh$.invokeExact(context, compatible);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_get_forward_compatible$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.gdk_gl_context_get_forward_compatible$MH,"gdk_gl_context_get_forward_compatible");
    }
    public static int gdk_gl_context_get_forward_compatible ( Addressable context) {
        var mh$ = gdk_gl_context_get_forward_compatible$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_set_use_es$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.gdk_gl_context_set_use_es$MH,"gdk_gl_context_set_use_es");
    }
    public static void gdk_gl_context_set_use_es ( Addressable context,  int use_es) {
        var mh$ = gdk_gl_context_set_use_es$MH();
        try {
            mh$.invokeExact(context, use_es);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_get_use_es$MH() {
        return RuntimeHelper.requireNonNull(constants$1333.gdk_gl_context_get_use_es$MH,"gdk_gl_context_get_use_es");
    }
    public static int gdk_gl_context_get_use_es ( Addressable context) {
        var mh$ = gdk_gl_context_get_use_es$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_realize$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.gdk_gl_context_realize$MH,"gdk_gl_context_realize");
    }
    public static int gdk_gl_context_realize ( Addressable context,  Addressable error) {
        var mh$ = gdk_gl_context_realize$MH();
        try {
            return (int)mh$.invokeExact(context, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_make_current$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.gdk_gl_context_make_current$MH,"gdk_gl_context_make_current");
    }
    public static void gdk_gl_context_make_current ( Addressable context) {
        var mh$ = gdk_gl_context_make_current$MH();
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_get_current$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.gdk_gl_context_get_current$MH,"gdk_gl_context_get_current");
    }
    public static MemoryAddress gdk_gl_context_get_current () {
        var mh$ = gdk_gl_context_get_current$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_gl_context_clear_current$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.gdk_gl_context_clear_current$MH,"gdk_gl_context_clear_current");
    }
    public static void gdk_gl_context_clear_current () {
        var mh$ = gdk_gl_context_clear_current$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.gdk_keymap_get_type$MH,"gdk_keymap_get_type");
    }
    public static long gdk_keymap_get_type () {
        var mh$ = gdk_keymap_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_default$MH() {
        return RuntimeHelper.requireNonNull(constants$1334.gdk_keymap_get_default$MH,"gdk_keymap_get_default");
    }
    public static MemoryAddress gdk_keymap_get_default () {
        var mh$ = gdk_keymap_get_default$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.gdk_keymap_get_for_display$MH,"gdk_keymap_get_for_display");
    }
    public static MemoryAddress gdk_keymap_get_for_display ( Addressable display) {
        var mh$ = gdk_keymap_get_for_display$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(display);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_lookup_key$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.gdk_keymap_lookup_key$MH,"gdk_keymap_lookup_key");
    }
    public static int gdk_keymap_lookup_key ( Addressable keymap,  Addressable key) {
        var mh$ = gdk_keymap_lookup_key$MH();
        try {
            return (int)mh$.invokeExact(keymap, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_translate_keyboard_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.gdk_keymap_translate_keyboard_state$MH,"gdk_keymap_translate_keyboard_state");
    }
    public static int gdk_keymap_translate_keyboard_state ( Addressable keymap,  int hardware_keycode,  int state,  int group,  Addressable keyval,  Addressable effective_group,  Addressable level,  Addressable consumed_modifiers) {
        var mh$ = gdk_keymap_translate_keyboard_state$MH();
        try {
            return (int)mh$.invokeExact(keymap, hardware_keycode, state, group, keyval, effective_group, level, consumed_modifiers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_entries_for_keyval$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.gdk_keymap_get_entries_for_keyval$MH,"gdk_keymap_get_entries_for_keyval");
    }
    public static int gdk_keymap_get_entries_for_keyval ( Addressable keymap,  int keyval,  Addressable keys,  Addressable n_keys) {
        var mh$ = gdk_keymap_get_entries_for_keyval$MH();
        try {
            return (int)mh$.invokeExact(keymap, keyval, keys, n_keys);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_entries_for_keycode$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.gdk_keymap_get_entries_for_keycode$MH,"gdk_keymap_get_entries_for_keycode");
    }
    public static int gdk_keymap_get_entries_for_keycode ( Addressable keymap,  int hardware_keycode,  Addressable keys,  Addressable keyvals,  Addressable n_entries) {
        var mh$ = gdk_keymap_get_entries_for_keycode$MH();
        try {
            return (int)mh$.invokeExact(keymap, hardware_keycode, keys, keyvals, n_entries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_direction$MH() {
        return RuntimeHelper.requireNonNull(constants$1335.gdk_keymap_get_direction$MH,"gdk_keymap_get_direction");
    }
    public static int gdk_keymap_get_direction ( Addressable keymap) {
        var mh$ = gdk_keymap_get_direction$MH();
        try {
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_have_bidi_layouts$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.gdk_keymap_have_bidi_layouts$MH,"gdk_keymap_have_bidi_layouts");
    }
    public static int gdk_keymap_have_bidi_layouts ( Addressable keymap) {
        var mh$ = gdk_keymap_have_bidi_layouts$MH();
        try {
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_caps_lock_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.gdk_keymap_get_caps_lock_state$MH,"gdk_keymap_get_caps_lock_state");
    }
    public static int gdk_keymap_get_caps_lock_state ( Addressable keymap) {
        var mh$ = gdk_keymap_get_caps_lock_state$MH();
        try {
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_num_lock_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.gdk_keymap_get_num_lock_state$MH,"gdk_keymap_get_num_lock_state");
    }
    public static int gdk_keymap_get_num_lock_state ( Addressable keymap) {
        var mh$ = gdk_keymap_get_num_lock_state$MH();
        try {
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_scroll_lock_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.gdk_keymap_get_scroll_lock_state$MH,"gdk_keymap_get_scroll_lock_state");
    }
    public static int gdk_keymap_get_scroll_lock_state ( Addressable keymap) {
        var mh$ = gdk_keymap_get_scroll_lock_state$MH();
        try {
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_modifier_state$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.gdk_keymap_get_modifier_state$MH,"gdk_keymap_get_modifier_state");
    }
    public static int gdk_keymap_get_modifier_state ( Addressable keymap) {
        var mh$ = gdk_keymap_get_modifier_state$MH();
        try {
            return (int)mh$.invokeExact(keymap);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_add_virtual_modifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$1336.gdk_keymap_add_virtual_modifiers$MH,"gdk_keymap_add_virtual_modifiers");
    }
    public static void gdk_keymap_add_virtual_modifiers ( Addressable keymap,  Addressable state) {
        var mh$ = gdk_keymap_add_virtual_modifiers$MH();
        try {
            mh$.invokeExact(keymap, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_map_virtual_modifiers$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.gdk_keymap_map_virtual_modifiers$MH,"gdk_keymap_map_virtual_modifiers");
    }
    public static int gdk_keymap_map_virtual_modifiers ( Addressable keymap,  Addressable state) {
        var mh$ = gdk_keymap_map_virtual_modifiers$MH();
        try {
            return (int)mh$.invokeExact(keymap, state);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keymap_get_modifier_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.gdk_keymap_get_modifier_mask$MH,"gdk_keymap_get_modifier_mask");
    }
    public static int gdk_keymap_get_modifier_mask ( Addressable keymap,  int intent) {
        var mh$ = gdk_keymap_get_modifier_mask$MH();
        try {
            return (int)mh$.invokeExact(keymap, intent);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keyval_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.gdk_keyval_name$MH,"gdk_keyval_name");
    }
    public static MemoryAddress gdk_keyval_name ( int keyval) {
        var mh$ = gdk_keyval_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keyval_from_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.gdk_keyval_from_name$MH,"gdk_keyval_from_name");
    }
    public static int gdk_keyval_from_name ( Addressable keyval_name) {
        var mh$ = gdk_keyval_from_name$MH();
        try {
            return (int)mh$.invokeExact(keyval_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keyval_convert_case$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.gdk_keyval_convert_case$MH,"gdk_keyval_convert_case");
    }
    public static void gdk_keyval_convert_case ( int symbol,  Addressable lower,  Addressable upper) {
        var mh$ = gdk_keyval_convert_case$MH();
        try {
            mh$.invokeExact(symbol, lower, upper);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keyval_to_upper$MH() {
        return RuntimeHelper.requireNonNull(constants$1337.gdk_keyval_to_upper$MH,"gdk_keyval_to_upper");
    }
    public static int gdk_keyval_to_upper ( int keyval) {
        var mh$ = gdk_keyval_to_upper$MH();
        try {
            return (int)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keyval_to_lower$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.gdk_keyval_to_lower$MH,"gdk_keyval_to_lower");
    }
    public static int gdk_keyval_to_lower ( int keyval) {
        var mh$ = gdk_keyval_to_lower$MH();
        try {
            return (int)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keyval_is_upper$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.gdk_keyval_is_upper$MH,"gdk_keyval_is_upper");
    }
    public static int gdk_keyval_is_upper ( int keyval) {
        var mh$ = gdk_keyval_is_upper$MH();
        try {
            return (int)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keyval_is_lower$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.gdk_keyval_is_lower$MH,"gdk_keyval_is_lower");
    }
    public static int gdk_keyval_is_lower ( int keyval) {
        var mh$ = gdk_keyval_is_lower$MH();
        try {
            return (int)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keyval_to_unicode$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.gdk_keyval_to_unicode$MH,"gdk_keyval_to_unicode");
    }
    public static int gdk_keyval_to_unicode ( int keyval) {
        var mh$ = gdk_keyval_to_unicode$MH();
        try {
            return (int)mh$.invokeExact(keyval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_unicode_to_keyval$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.gdk_unicode_to_keyval$MH,"gdk_unicode_to_keyval");
    }
    public static int gdk_unicode_to_keyval ( int wc) {
        var mh$ = gdk_unicode_to_keyval$MH();
        try {
            return (int)mh$.invokeExact(wc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_parse_args$MH() {
        return RuntimeHelper.requireNonNull(constants$1338.gdk_parse_args$MH,"gdk_parse_args");
    }
    public static void gdk_parse_args ( Addressable argc,  Addressable argv) {
        var mh$ = gdk_parse_args$MH();
        try {
            mh$.invokeExact(argc, argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.gdk_init$MH,"gdk_init");
    }
    public static void gdk_init ( Addressable argc,  Addressable argv) {
        var mh$ = gdk_init$MH();
        try {
            mh$.invokeExact(argc, argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_init_check$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.gdk_init_check$MH,"gdk_init_check");
    }
    public static int gdk_init_check ( Addressable argc,  Addressable argv) {
        var mh$ = gdk_init_check$MH();
        try {
            return (int)mh$.invokeExact(argc, argv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_add_option_entries_libgtk_only$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.gdk_add_option_entries_libgtk_only$MH,"gdk_add_option_entries_libgtk_only");
    }
    public static void gdk_add_option_entries_libgtk_only ( Addressable group) {
        var mh$ = gdk_add_option_entries_libgtk_only$MH();
        try {
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pre_parse_libgtk_only$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.gdk_pre_parse_libgtk_only$MH,"gdk_pre_parse_libgtk_only");
    }
    public static void gdk_pre_parse_libgtk_only () {
        var mh$ = gdk_pre_parse_libgtk_only$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_get_program_class$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.gdk_get_program_class$MH,"gdk_get_program_class");
    }
    public static MemoryAddress gdk_get_program_class () {
        var mh$ = gdk_get_program_class$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_set_program_class$MH() {
        return RuntimeHelper.requireNonNull(constants$1339.gdk_set_program_class$MH,"gdk_set_program_class");
    }
    public static void gdk_set_program_class ( Addressable program_class) {
        var mh$ = gdk_set_program_class$MH();
        try {
            mh$.invokeExact(program_class);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_notify_startup_complete$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.gdk_notify_startup_complete$MH,"gdk_notify_startup_complete");
    }
    public static void gdk_notify_startup_complete () {
        var mh$ = gdk_notify_startup_complete$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_notify_startup_complete_with_id$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.gdk_notify_startup_complete_with_id$MH,"gdk_notify_startup_complete_with_id");
    }
    public static void gdk_notify_startup_complete_with_id ( Addressable startup_id) {
        var mh$ = gdk_notify_startup_complete_with_id$MH();
        try {
            mh$.invokeExact(startup_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_error_trap_push$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.gdk_error_trap_push$MH,"gdk_error_trap_push");
    }
    public static void gdk_error_trap_push () {
        var mh$ = gdk_error_trap_push$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_error_trap_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.gdk_error_trap_pop$MH,"gdk_error_trap_pop");
    }
    public static int gdk_error_trap_pop () {
        var mh$ = gdk_error_trap_pop$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_error_trap_pop_ignored$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.gdk_error_trap_pop_ignored$MH,"gdk_error_trap_pop_ignored");
    }
    public static void gdk_error_trap_pop_ignored () {
        var mh$ = gdk_error_trap_pop_ignored$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_get_display_arg_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1340.gdk_get_display_arg_name$MH,"gdk_get_display_arg_name");
    }
    public static MemoryAddress gdk_get_display_arg_name () {
        var mh$ = gdk_get_display_arg_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_get_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.gdk_get_display$MH,"gdk_get_display");
    }
    public static MemoryAddress gdk_get_display () {
        var mh$ = gdk_get_display$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pointer_grab$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.gdk_pointer_grab$MH,"gdk_pointer_grab");
    }
    public static int gdk_pointer_grab ( Addressable window,  int owner_events,  int event_mask,  Addressable confine_to,  Addressable cursor,  int time_) {
        var mh$ = gdk_pointer_grab$MH();
        try {
            return (int)mh$.invokeExact(window, owner_events, event_mask, confine_to, cursor, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keyboard_grab$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.gdk_keyboard_grab$MH,"gdk_keyboard_grab");
    }
    public static int gdk_keyboard_grab ( Addressable window,  int owner_events,  int time_) {
        var mh$ = gdk_keyboard_grab$MH();
        try {
            return (int)mh$.invokeExact(window, owner_events, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pointer_ungrab$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.gdk_pointer_ungrab$MH,"gdk_pointer_ungrab");
    }
    public static void gdk_pointer_ungrab ( int time_) {
        var mh$ = gdk_pointer_ungrab$MH();
        try {
            mh$.invokeExact(time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_keyboard_ungrab$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.gdk_keyboard_ungrab$MH,"gdk_keyboard_ungrab");
    }
    public static void gdk_keyboard_ungrab ( int time_) {
        var mh$ = gdk_keyboard_ungrab$MH();
        try {
            mh$.invokeExact(time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pointer_is_grabbed$MH() {
        return RuntimeHelper.requireNonNull(constants$1341.gdk_pointer_is_grabbed$MH,"gdk_pointer_is_grabbed");
    }
    public static int gdk_pointer_is_grabbed () {
        var mh$ = gdk_pointer_is_grabbed$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_screen_width$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.gdk_screen_width$MH,"gdk_screen_width");
    }
    public static int gdk_screen_width () {
        var mh$ = gdk_screen_width$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_screen_height$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.gdk_screen_height$MH,"gdk_screen_height");
    }
    public static int gdk_screen_height () {
        var mh$ = gdk_screen_height$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_screen_width_mm$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.gdk_screen_width_mm$MH,"gdk_screen_width_mm");
    }
    public static int gdk_screen_width_mm () {
        var mh$ = gdk_screen_width_mm$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_screen_height_mm$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.gdk_screen_height_mm$MH,"gdk_screen_height_mm");
    }
    public static int gdk_screen_height_mm () {
        var mh$ = gdk_screen_height_mm$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_set_double_click_time$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.gdk_set_double_click_time$MH,"gdk_set_double_click_time");
    }
    public static void gdk_set_double_click_time ( int msec) {
        var mh$ = gdk_set_double_click_time$MH();
        try {
            mh$.invokeExact(msec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_beep$MH() {
        return RuntimeHelper.requireNonNull(constants$1342.gdk_beep$MH,"gdk_beep");
    }
    public static void gdk_beep () {
        var mh$ = gdk_beep$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_flush$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.gdk_flush$MH,"gdk_flush");
    }
    public static void gdk_flush () {
        var mh$ = gdk_flush$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_disable_multidevice$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.gdk_disable_multidevice$MH,"gdk_disable_multidevice");
    }
    public static void gdk_disable_multidevice () {
        var mh$ = gdk_disable_multidevice$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_set_allowed_backends$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.gdk_set_allowed_backends$MH,"gdk_set_allowed_backends");
    }
    public static void gdk_set_allowed_backends ( Addressable backends) {
        var mh$ = gdk_set_allowed_backends$MH();
        try {
            mh$.invokeExact(backends);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pango_context_get_for_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.gdk_pango_context_get_for_screen$MH,"gdk_pango_context_get_for_screen");
    }
    public static MemoryAddress gdk_pango_context_get_for_screen ( Addressable screen) {
        var mh$ = gdk_pango_context_get_for_screen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(screen);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pango_context_get_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.gdk_pango_context_get_for_display$MH,"gdk_pango_context_get_for_display");
    }
    public static MemoryAddress gdk_pango_context_get_for_display ( Addressable display) {
        var mh$ = gdk_pango_context_get_for_display$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(display);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pango_context_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1343.gdk_pango_context_get$MH,"gdk_pango_context_get");
    }
    public static MemoryAddress gdk_pango_context_get () {
        var mh$ = gdk_pango_context_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pango_layout_line_get_clip_region$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.gdk_pango_layout_line_get_clip_region$MH,"gdk_pango_layout_line_get_clip_region");
    }
    public static MemoryAddress gdk_pango_layout_line_get_clip_region ( Addressable line,  int x_origin,  int y_origin,  Addressable index_ranges,  int n_ranges) {
        var mh$ = gdk_pango_layout_line_get_clip_region$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(line, x_origin, y_origin, index_ranges, n_ranges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_pango_layout_get_clip_region$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.gdk_pango_layout_get_clip_region$MH,"gdk_pango_layout_get_clip_region");
    }
    public static MemoryAddress gdk_pango_layout_get_clip_region ( Addressable layout,  int x_origin,  int y_origin,  Addressable index_ranges,  int n_ranges) {
        var mh$ = gdk_pango_layout_get_clip_region$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(layout, x_origin, y_origin, index_ranges, n_ranges);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GDK_PROP_MODE_REPLACE() {
        return (int)0L;
    }
    public static int GDK_PROP_MODE_PREPEND() {
        return (int)1L;
    }
    public static int GDK_PROP_MODE_APPEND() {
        return (int)2L;
    }
    public static MethodHandle gdk_atom_intern$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.gdk_atom_intern$MH,"gdk_atom_intern");
    }
    public static MemoryAddress gdk_atom_intern ( Addressable atom_name,  int only_if_exists) {
        var mh$ = gdk_atom_intern$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(atom_name, only_if_exists);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_atom_intern_static_string$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.gdk_atom_intern_static_string$MH,"gdk_atom_intern_static_string");
    }
    public static MemoryAddress gdk_atom_intern_static_string ( Addressable atom_name) {
        var mh$ = gdk_atom_intern_static_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(atom_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_atom_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.gdk_atom_name$MH,"gdk_atom_name");
    }
    public static MemoryAddress gdk_atom_name ( Addressable atom) {
        var mh$ = gdk_atom_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(atom);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_property_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1344.gdk_property_get$MH,"gdk_property_get");
    }
    public static int gdk_property_get ( Addressable window,  Addressable property,  Addressable type,  long offset,  long length,  int pdelete,  Addressable actual_property_type,  Addressable actual_format,  Addressable actual_length,  Addressable data) {
        var mh$ = gdk_property_get$MH();
        try {
            return (int)mh$.invokeExact(window, property, type, offset, length, pdelete, actual_property_type, actual_format, actual_length, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_property_change$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.gdk_property_change$MH,"gdk_property_change");
    }
    public static void gdk_property_change ( Addressable window,  Addressable property,  Addressable type,  int format,  int mode,  Addressable data,  int nelements) {
        var mh$ = gdk_property_change$MH();
        try {
            mh$.invokeExact(window, property, type, format, mode, data, nelements);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_property_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.gdk_property_delete$MH,"gdk_property_delete");
    }
    public static void gdk_property_delete ( Addressable window,  Addressable property) {
        var mh$ = gdk_property_delete$MH();
        try {
            mh$.invokeExact(window, property);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_text_property_to_utf8_list_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.gdk_text_property_to_utf8_list_for_display$MH,"gdk_text_property_to_utf8_list_for_display");
    }
    public static int gdk_text_property_to_utf8_list_for_display ( Addressable display,  Addressable encoding,  int format,  Addressable text,  int length,  Addressable list) {
        var mh$ = gdk_text_property_to_utf8_list_for_display$MH();
        try {
            return (int)mh$.invokeExact(display, encoding, format, text, length, list);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_utf8_to_string_target$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.gdk_utf8_to_string_target$MH,"gdk_utf8_to_string_target");
    }
    public static MemoryAddress gdk_utf8_to_string_target ( Addressable str) {
        var mh$ = gdk_utf8_to_string_target$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_selection_owner_set$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.gdk_selection_owner_set$MH,"gdk_selection_owner_set");
    }
    public static int gdk_selection_owner_set ( Addressable owner,  Addressable selection,  int time_,  int send_event) {
        var mh$ = gdk_selection_owner_set$MH();
        try {
            return (int)mh$.invokeExact(owner, selection, time_, send_event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_selection_owner_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1345.gdk_selection_owner_get$MH,"gdk_selection_owner_get");
    }
    public static MemoryAddress gdk_selection_owner_get ( Addressable selection) {
        var mh$ = gdk_selection_owner_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(selection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_selection_owner_set_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.gdk_selection_owner_set_for_display$MH,"gdk_selection_owner_set_for_display");
    }
    public static int gdk_selection_owner_set_for_display ( Addressable display,  Addressable owner,  Addressable selection,  int time_,  int send_event) {
        var mh$ = gdk_selection_owner_set_for_display$MH();
        try {
            return (int)mh$.invokeExact(display, owner, selection, time_, send_event);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_selection_owner_get_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.gdk_selection_owner_get_for_display$MH,"gdk_selection_owner_get_for_display");
    }
    public static MemoryAddress gdk_selection_owner_get_for_display ( Addressable display,  Addressable selection) {
        var mh$ = gdk_selection_owner_get_for_display$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(display, selection);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_selection_convert$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.gdk_selection_convert$MH,"gdk_selection_convert");
    }
    public static void gdk_selection_convert ( Addressable requestor,  Addressable selection,  Addressable target,  int time_) {
        var mh$ = gdk_selection_convert$MH();
        try {
            mh$.invokeExact(requestor, selection, target, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_selection_property_get$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.gdk_selection_property_get$MH,"gdk_selection_property_get");
    }
    public static int gdk_selection_property_get ( Addressable requestor,  Addressable data,  Addressable prop_type,  Addressable prop_format) {
        var mh$ = gdk_selection_property_get$MH();
        try {
            return (int)mh$.invokeExact(requestor, data, prop_type, prop_format);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_selection_send_notify$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.gdk_selection_send_notify$MH,"gdk_selection_send_notify");
    }
    public static void gdk_selection_send_notify ( Addressable requestor,  Addressable selection,  Addressable target,  Addressable property,  int time_) {
        var mh$ = gdk_selection_send_notify$MH();
        try {
            mh$.invokeExact(requestor, selection, target, property, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_selection_send_notify_for_display$MH() {
        return RuntimeHelper.requireNonNull(constants$1346.gdk_selection_send_notify_for_display$MH,"gdk_selection_send_notify_for_display");
    }
    public static void gdk_selection_send_notify_for_display ( Addressable display,  Addressable requestor,  Addressable selection,  Addressable target,  Addressable property,  int time_) {
        var mh$ = gdk_selection_send_notify_for_display$MH();
        try {
            mh$.invokeExact(display, requestor, selection, target, property, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_test_render_sync$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.gdk_test_render_sync$MH,"gdk_test_render_sync");
    }
    public static void gdk_test_render_sync ( Addressable window) {
        var mh$ = gdk_test_render_sync$MH();
        try {
            mh$.invokeExact(window);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_test_simulate_key$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.gdk_test_simulate_key$MH,"gdk_test_simulate_key");
    }
    public static int gdk_test_simulate_key ( Addressable window,  int x,  int y,  int keyval,  int modifiers,  int key_pressrelease) {
        var mh$ = gdk_test_simulate_key$MH();
        try {
            return (int)mh$.invokeExact(window, x, y, keyval, modifiers, key_pressrelease);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_test_simulate_button$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.gdk_test_simulate_button$MH,"gdk_test_simulate_button");
    }
    public static int gdk_test_simulate_button ( Addressable window,  int x,  int y,  int button,  int modifiers,  int button_pressrelease) {
        var mh$ = gdk_test_simulate_button$MH();
        try {
            return (int)mh$.invokeExact(window, x, y, button, modifiers, button_pressrelease);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_threads_init$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.gdk_threads_init$MH,"gdk_threads_init");
    }
    public static void gdk_threads_init () {
        var mh$ = gdk_threads_init$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_threads_enter$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.gdk_threads_enter$MH,"gdk_threads_enter");
    }
    public static void gdk_threads_enter () {
        var mh$ = gdk_threads_enter$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_threads_leave$MH() {
        return RuntimeHelper.requireNonNull(constants$1347.gdk_threads_leave$MH,"gdk_threads_leave");
    }
    public static void gdk_threads_leave () {
        var mh$ = gdk_threads_leave$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_threads_set_lock_functions$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gdk_threads_set_lock_functions$MH,"gdk_threads_set_lock_functions");
    }
    public static void gdk_threads_set_lock_functions ( Addressable enter_fn,  Addressable leave_fn) {
        var mh$ = gdk_threads_set_lock_functions$MH();
        try {
            mh$.invokeExact(enter_fn, leave_fn);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_threads_add_idle_full$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gdk_threads_add_idle_full$MH,"gdk_threads_add_idle_full");
    }
    public static int gdk_threads_add_idle_full ( int priority,  Addressable function,  Addressable data,  Addressable notify) {
        var mh$ = gdk_threads_add_idle_full$MH();
        try {
            return (int)mh$.invokeExact(priority, function, data, notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_threads_add_idle$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gdk_threads_add_idle$MH,"gdk_threads_add_idle");
    }
    public static int gdk_threads_add_idle ( Addressable function,  Addressable data) {
        var mh$ = gdk_threads_add_idle$MH();
        try {
            return (int)mh$.invokeExact(function, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_threads_add_timeout_full$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gdk_threads_add_timeout_full$MH,"gdk_threads_add_timeout_full");
    }
    public static int gdk_threads_add_timeout_full ( int priority,  int interval,  Addressable function,  Addressable data,  Addressable notify) {
        var mh$ = gdk_threads_add_timeout_full$MH();
        try {
            return (int)mh$.invokeExact(priority, interval, function, data, notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_threads_add_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gdk_threads_add_timeout$MH,"gdk_threads_add_timeout");
    }
    public static int gdk_threads_add_timeout ( int interval,  Addressable function,  Addressable data) {
        var mh$ = gdk_threads_add_timeout$MH();
        try {
            return (int)mh$.invokeExact(interval, function, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_threads_add_timeout_seconds_full$MH() {
        return RuntimeHelper.requireNonNull(constants$1348.gdk_threads_add_timeout_seconds_full$MH,"gdk_threads_add_timeout_seconds_full");
    }
    public static int gdk_threads_add_timeout_seconds_full ( int priority,  int interval,  Addressable function,  Addressable data,  Addressable notify) {
        var mh$ = gdk_threads_add_timeout_seconds_full$MH();
        try {
            return (int)mh$.invokeExact(priority, interval, function, data, notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_threads_add_timeout_seconds$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gdk_threads_add_timeout_seconds$MH,"gdk_threads_add_timeout_seconds");
    }
    public static int gdk_threads_add_timeout_seconds ( int interval,  Addressable function,  Addressable data) {
        var mh$ = gdk_threads_add_timeout_seconds$MH();
        try {
            return (int)mh$.invokeExact(interval, function, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GDK_VISUAL_STATIC_GRAY() {
        return (int)0L;
    }
    public static int GDK_VISUAL_GRAYSCALE() {
        return (int)1L;
    }
    public static int GDK_VISUAL_STATIC_COLOR() {
        return (int)2L;
    }
    public static int GDK_VISUAL_PSEUDO_COLOR() {
        return (int)3L;
    }
    public static int GDK_VISUAL_TRUE_COLOR() {
        return (int)4L;
    }
    public static int GDK_VISUAL_DIRECT_COLOR() {
        return (int)5L;
    }
    public static MethodHandle gdk_visual_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gdk_visual_get_type$MH,"gdk_visual_get_type");
    }
    public static long gdk_visual_get_type () {
        var mh$ = gdk_visual_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_best_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gdk_visual_get_best_depth$MH,"gdk_visual_get_best_depth");
    }
    public static int gdk_visual_get_best_depth () {
        var mh$ = gdk_visual_get_best_depth$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_best_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gdk_visual_get_best_type$MH,"gdk_visual_get_best_type");
    }
    public static int gdk_visual_get_best_type () {
        var mh$ = gdk_visual_get_best_type$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_system$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gdk_visual_get_system$MH,"gdk_visual_get_system");
    }
    public static MemoryAddress gdk_visual_get_system () {
        var mh$ = gdk_visual_get_system$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_best$MH() {
        return RuntimeHelper.requireNonNull(constants$1349.gdk_visual_get_best$MH,"gdk_visual_get_best");
    }
    public static MemoryAddress gdk_visual_get_best () {
        var mh$ = gdk_visual_get_best$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_best_with_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gdk_visual_get_best_with_depth$MH,"gdk_visual_get_best_with_depth");
    }
    public static MemoryAddress gdk_visual_get_best_with_depth ( int depth) {
        var mh$ = gdk_visual_get_best_with_depth$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_best_with_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gdk_visual_get_best_with_type$MH,"gdk_visual_get_best_with_type");
    }
    public static MemoryAddress gdk_visual_get_best_with_type ( int visual_type) {
        var mh$ = gdk_visual_get_best_with_type$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(visual_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_best_with_both$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gdk_visual_get_best_with_both$MH,"gdk_visual_get_best_with_both");
    }
    public static MemoryAddress gdk_visual_get_best_with_both ( int depth,  int visual_type) {
        var mh$ = gdk_visual_get_best_with_both$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(depth, visual_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_query_depths$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gdk_query_depths$MH,"gdk_query_depths");
    }
    public static void gdk_query_depths ( Addressable depths,  Addressable count) {
        var mh$ = gdk_query_depths$MH();
        try {
            mh$.invokeExact(depths, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_query_visual_types$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gdk_query_visual_types$MH,"gdk_query_visual_types");
    }
    public static void gdk_query_visual_types ( Addressable visual_types,  Addressable count) {
        var mh$ = gdk_query_visual_types$MH();
        try {
            mh$.invokeExact(visual_types, count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_list_visuals$MH() {
        return RuntimeHelper.requireNonNull(constants$1350.gdk_list_visuals$MH,"gdk_list_visuals");
    }
    public static MemoryAddress gdk_list_visuals () {
        var mh$ = gdk_list_visuals$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_screen$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gdk_visual_get_screen$MH,"gdk_visual_get_screen");
    }
    public static MemoryAddress gdk_visual_get_screen ( Addressable visual) {
        var mh$ = gdk_visual_get_screen$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_visual_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gdk_visual_get_visual_type$MH,"gdk_visual_get_visual_type");
    }
    public static int gdk_visual_get_visual_type ( Addressable visual) {
        var mh$ = gdk_visual_get_visual_type$MH();
        try {
            return (int)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_depth$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gdk_visual_get_depth$MH,"gdk_visual_get_depth");
    }
    public static int gdk_visual_get_depth ( Addressable visual) {
        var mh$ = gdk_visual_get_depth$MH();
        try {
            return (int)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_byte_order$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gdk_visual_get_byte_order$MH,"gdk_visual_get_byte_order");
    }
    public static int gdk_visual_get_byte_order ( Addressable visual) {
        var mh$ = gdk_visual_get_byte_order$MH();
        try {
            return (int)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_colormap_size$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gdk_visual_get_colormap_size$MH,"gdk_visual_get_colormap_size");
    }
    public static int gdk_visual_get_colormap_size ( Addressable visual) {
        var mh$ = gdk_visual_get_colormap_size$MH();
        try {
            return (int)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_bits_per_rgb$MH() {
        return RuntimeHelper.requireNonNull(constants$1351.gdk_visual_get_bits_per_rgb$MH,"gdk_visual_get_bits_per_rgb");
    }
    public static int gdk_visual_get_bits_per_rgb ( Addressable visual) {
        var mh$ = gdk_visual_get_bits_per_rgb$MH();
        try {
            return (int)mh$.invokeExact(visual);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_red_pixel_details$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gdk_visual_get_red_pixel_details$MH,"gdk_visual_get_red_pixel_details");
    }
    public static void gdk_visual_get_red_pixel_details ( Addressable visual,  Addressable mask,  Addressable shift,  Addressable precision) {
        var mh$ = gdk_visual_get_red_pixel_details$MH();
        try {
            mh$.invokeExact(visual, mask, shift, precision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_green_pixel_details$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gdk_visual_get_green_pixel_details$MH,"gdk_visual_get_green_pixel_details");
    }
    public static void gdk_visual_get_green_pixel_details ( Addressable visual,  Addressable mask,  Addressable shift,  Addressable precision) {
        var mh$ = gdk_visual_get_green_pixel_details$MH();
        try {
            mh$.invokeExact(visual, mask, shift, precision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gdk_visual_get_blue_pixel_details$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.gdk_visual_get_blue_pixel_details$MH,"gdk_visual_get_blue_pixel_details");
    }
    public static void gdk_visual_get_blue_pixel_details ( Addressable visual,  Addressable mask,  Addressable shift,  Addressable precision) {
        var mh$ = gdk_visual_get_blue_pixel_details$MH();
        try {
            mh$.invokeExact(visual, mask, shift, precision);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkAppLaunchContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkAppLaunchContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkAppLaunchContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkAppLaunchContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkAppLaunchContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.glib_autoptr_clear_GdkAppLaunchContext$MH,"glib_autoptr_clear_GdkAppLaunchContext");
    }
    public static void glib_autoptr_clear_GdkAppLaunchContext ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkAppLaunchContext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkAppLaunchContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.glib_autoptr_cleanup_GdkAppLaunchContext$MH,"glib_autoptr_cleanup_GdkAppLaunchContext");
    }
    public static void glib_autoptr_cleanup_GdkAppLaunchContext ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkAppLaunchContext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkAppLaunchContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1352.glib_listautoptr_cleanup_GdkAppLaunchContext$MH,"glib_listautoptr_cleanup_GdkAppLaunchContext");
    }
    public static void glib_listautoptr_cleanup_GdkAppLaunchContext ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkAppLaunchContext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkAppLaunchContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.glib_slistautoptr_cleanup_GdkAppLaunchContext$MH,"glib_slistautoptr_cleanup_GdkAppLaunchContext");
    }
    public static void glib_slistautoptr_cleanup_GdkAppLaunchContext ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkAppLaunchContext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkAppLaunchContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.glib_queueautoptr_cleanup_GdkAppLaunchContext$MH,"glib_queueautoptr_cleanup_GdkAppLaunchContext");
    }
    public static void glib_queueautoptr_cleanup_GdkAppLaunchContext ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkAppLaunchContext$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkCursor_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkCursor_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkCursor_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkCursor_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.glib_autoptr_clear_GdkCursor$MH,"glib_autoptr_clear_GdkCursor");
    }
    public static void glib_autoptr_clear_GdkCursor ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkCursor$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.glib_autoptr_cleanup_GdkCursor$MH,"glib_autoptr_cleanup_GdkCursor");
    }
    public static void glib_autoptr_cleanup_GdkCursor ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkCursor$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.glib_listautoptr_cleanup_GdkCursor$MH,"glib_listautoptr_cleanup_GdkCursor");
    }
    public static void glib_listautoptr_cleanup_GdkCursor ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkCursor$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$1353.glib_slistautoptr_cleanup_GdkCursor$MH,"glib_slistautoptr_cleanup_GdkCursor");
    }
    public static void glib_slistautoptr_cleanup_GdkCursor ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkCursor$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkCursor$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.glib_queueautoptr_cleanup_GdkCursor$MH,"glib_queueautoptr_cleanup_GdkCursor");
    }
    public static void glib_queueautoptr_cleanup_GdkCursor ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkCursor$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkDevice_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDevice_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDevice_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDevice_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.glib_autoptr_clear_GdkDevice$MH,"glib_autoptr_clear_GdkDevice");
    }
    public static void glib_autoptr_clear_GdkDevice ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkDevice$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.glib_autoptr_cleanup_GdkDevice$MH,"glib_autoptr_cleanup_GdkDevice");
    }
    public static void glib_autoptr_cleanup_GdkDevice ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkDevice$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.glib_listautoptr_cleanup_GdkDevice$MH,"glib_listautoptr_cleanup_GdkDevice");
    }
    public static void glib_listautoptr_cleanup_GdkDevice ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkDevice$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.glib_slistautoptr_cleanup_GdkDevice$MH,"glib_slistautoptr_cleanup_GdkDevice");
    }
    public static void glib_slistautoptr_cleanup_GdkDevice ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkDevice$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkDevice$MH() {
        return RuntimeHelper.requireNonNull(constants$1354.glib_queueautoptr_cleanup_GdkDevice$MH,"glib_queueautoptr_cleanup_GdkDevice");
    }
    public static void glib_queueautoptr_cleanup_GdkDevice ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkDevice$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkDeviceManager_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDeviceManager_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDeviceManager_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDeviceManager_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkDeviceManager$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.glib_autoptr_clear_GdkDeviceManager$MH,"glib_autoptr_clear_GdkDeviceManager");
    }
    public static void glib_autoptr_clear_GdkDeviceManager ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkDeviceManager$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkDeviceManager$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.glib_autoptr_cleanup_GdkDeviceManager$MH,"glib_autoptr_cleanup_GdkDeviceManager");
    }
    public static void glib_autoptr_cleanup_GdkDeviceManager ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkDeviceManager$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkDeviceManager$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.glib_listautoptr_cleanup_GdkDeviceManager$MH,"glib_listautoptr_cleanup_GdkDeviceManager");
    }
    public static void glib_listautoptr_cleanup_GdkDeviceManager ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkDeviceManager$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkDeviceManager$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.glib_slistautoptr_cleanup_GdkDeviceManager$MH,"glib_slistautoptr_cleanup_GdkDeviceManager");
    }
    public static void glib_slistautoptr_cleanup_GdkDeviceManager ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkDeviceManager$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkDeviceManager$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.glib_queueautoptr_cleanup_GdkDeviceManager$MH,"glib_queueautoptr_cleanup_GdkDeviceManager");
    }
    public static void glib_queueautoptr_cleanup_GdkDeviceManager ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkDeviceManager$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkDisplay_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDisplay_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDisplay_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDisplay_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1355.glib_autoptr_clear_GdkDisplay$MH,"glib_autoptr_clear_GdkDisplay");
    }
    public static void glib_autoptr_clear_GdkDisplay ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkDisplay$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.glib_autoptr_cleanup_GdkDisplay$MH,"glib_autoptr_cleanup_GdkDisplay");
    }
    public static void glib_autoptr_cleanup_GdkDisplay ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkDisplay$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.glib_listautoptr_cleanup_GdkDisplay$MH,"glib_listautoptr_cleanup_GdkDisplay");
    }
    public static void glib_listautoptr_cleanup_GdkDisplay ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkDisplay$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.glib_slistautoptr_cleanup_GdkDisplay$MH,"glib_slistautoptr_cleanup_GdkDisplay");
    }
    public static void glib_slistautoptr_cleanup_GdkDisplay ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkDisplay$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkDisplay$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.glib_queueautoptr_cleanup_GdkDisplay$MH,"glib_queueautoptr_cleanup_GdkDisplay");
    }
    public static void glib_queueautoptr_cleanup_GdkDisplay ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkDisplay$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkDisplayManager_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDisplayManager_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDisplayManager_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDisplayManager_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkDisplayManager$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.glib_autoptr_clear_GdkDisplayManager$MH,"glib_autoptr_clear_GdkDisplayManager");
    }
    public static void glib_autoptr_clear_GdkDisplayManager ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkDisplayManager$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkDisplayManager$MH() {
        return RuntimeHelper.requireNonNull(constants$1356.glib_autoptr_cleanup_GdkDisplayManager$MH,"glib_autoptr_cleanup_GdkDisplayManager");
    }
    public static void glib_autoptr_cleanup_GdkDisplayManager ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkDisplayManager$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkDisplayManager$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.glib_listautoptr_cleanup_GdkDisplayManager$MH,"glib_listautoptr_cleanup_GdkDisplayManager");
    }
    public static void glib_listautoptr_cleanup_GdkDisplayManager ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkDisplayManager$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkDisplayManager$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.glib_slistautoptr_cleanup_GdkDisplayManager$MH,"glib_slistautoptr_cleanup_GdkDisplayManager");
    }
    public static void glib_slistautoptr_cleanup_GdkDisplayManager ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkDisplayManager$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkDisplayManager$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.glib_queueautoptr_cleanup_GdkDisplayManager$MH,"glib_queueautoptr_cleanup_GdkDisplayManager");
    }
    public static void glib_queueautoptr_cleanup_GdkDisplayManager ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkDisplayManager$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkDragContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDragContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDragContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkDragContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkDragContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.glib_autoptr_clear_GdkDragContext$MH,"glib_autoptr_clear_GdkDragContext");
    }
    public static void glib_autoptr_clear_GdkDragContext ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkDragContext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkDragContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.glib_autoptr_cleanup_GdkDragContext$MH,"glib_autoptr_cleanup_GdkDragContext");
    }
    public static void glib_autoptr_cleanup_GdkDragContext ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkDragContext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkDragContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1357.glib_listautoptr_cleanup_GdkDragContext$MH,"glib_listautoptr_cleanup_GdkDragContext");
    }
    public static void glib_listautoptr_cleanup_GdkDragContext ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkDragContext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkDragContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.glib_slistautoptr_cleanup_GdkDragContext$MH,"glib_slistautoptr_cleanup_GdkDragContext");
    }
    public static void glib_slistautoptr_cleanup_GdkDragContext ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkDragContext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkDragContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.glib_queueautoptr_cleanup_GdkDragContext$MH,"glib_queueautoptr_cleanup_GdkDragContext");
    }
    public static void glib_queueautoptr_cleanup_GdkDragContext ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkDragContext$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkFrameClock_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkFrameClock_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkFrameClock_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkFrameClock_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkFrameClock$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.glib_autoptr_clear_GdkFrameClock$MH,"glib_autoptr_clear_GdkFrameClock");
    }
    public static void glib_autoptr_clear_GdkFrameClock ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkFrameClock$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkFrameClock$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.glib_autoptr_cleanup_GdkFrameClock$MH,"glib_autoptr_cleanup_GdkFrameClock");
    }
    public static void glib_autoptr_cleanup_GdkFrameClock ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkFrameClock$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkFrameClock$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.glib_listautoptr_cleanup_GdkFrameClock$MH,"glib_listautoptr_cleanup_GdkFrameClock");
    }
    public static void glib_listautoptr_cleanup_GdkFrameClock ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkFrameClock$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkFrameClock$MH() {
        return RuntimeHelper.requireNonNull(constants$1358.glib_slistautoptr_cleanup_GdkFrameClock$MH,"glib_slistautoptr_cleanup_GdkFrameClock");
    }
    public static void glib_slistautoptr_cleanup_GdkFrameClock ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkFrameClock$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkFrameClock$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.glib_queueautoptr_cleanup_GdkFrameClock$MH,"glib_queueautoptr_cleanup_GdkFrameClock");
    }
    public static void glib_queueautoptr_cleanup_GdkFrameClock ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkFrameClock$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkGLContext_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkGLContext_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkGLContext_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkGLContext_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkGLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.glib_autoptr_clear_GdkGLContext$MH,"glib_autoptr_clear_GdkGLContext");
    }
    public static void glib_autoptr_clear_GdkGLContext ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkGLContext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkGLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.glib_autoptr_cleanup_GdkGLContext$MH,"glib_autoptr_cleanup_GdkGLContext");
    }
    public static void glib_autoptr_cleanup_GdkGLContext ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkGLContext$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkGLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.glib_listautoptr_cleanup_GdkGLContext$MH,"glib_listautoptr_cleanup_GdkGLContext");
    }
    public static void glib_listautoptr_cleanup_GdkGLContext ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkGLContext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkGLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.glib_slistautoptr_cleanup_GdkGLContext$MH,"glib_slistautoptr_cleanup_GdkGLContext");
    }
    public static void glib_slistautoptr_cleanup_GdkGLContext ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkGLContext$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkGLContext$MH() {
        return RuntimeHelper.requireNonNull(constants$1359.glib_queueautoptr_cleanup_GdkGLContext$MH,"glib_queueautoptr_cleanup_GdkGLContext");
    }
    public static void glib_queueautoptr_cleanup_GdkGLContext ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkGLContext$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkKeymap_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkKeymap_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkKeymap_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkKeymap_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkKeymap$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glib_autoptr_clear_GdkKeymap$MH,"glib_autoptr_clear_GdkKeymap");
    }
    public static void glib_autoptr_clear_GdkKeymap ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkKeymap$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkKeymap$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glib_autoptr_cleanup_GdkKeymap$MH,"glib_autoptr_cleanup_GdkKeymap");
    }
    public static void glib_autoptr_cleanup_GdkKeymap ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkKeymap$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkKeymap$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glib_listautoptr_cleanup_GdkKeymap$MH,"glib_listautoptr_cleanup_GdkKeymap");
    }
    public static void glib_listautoptr_cleanup_GdkKeymap ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkKeymap$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkKeymap$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glib_slistautoptr_cleanup_GdkKeymap$MH,"glib_slistautoptr_cleanup_GdkKeymap");
    }
    public static void glib_slistautoptr_cleanup_GdkKeymap ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkKeymap$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkKeymap$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glib_queueautoptr_cleanup_GdkKeymap$MH,"glib_queueautoptr_cleanup_GdkKeymap");
    }
    public static void glib_queueautoptr_cleanup_GdkKeymap ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkKeymap$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkScreen_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkScreen_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkScreen_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkScreen_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1360.glib_autoptr_clear_GdkScreen$MH,"glib_autoptr_clear_GdkScreen");
    }
    public static void glib_autoptr_clear_GdkScreen ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkScreen$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glib_autoptr_cleanup_GdkScreen$MH,"glib_autoptr_cleanup_GdkScreen");
    }
    public static void glib_autoptr_cleanup_GdkScreen ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkScreen$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glib_listautoptr_cleanup_GdkScreen$MH,"glib_listautoptr_cleanup_GdkScreen");
    }
    public static void glib_listautoptr_cleanup_GdkScreen ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkScreen$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glib_slistautoptr_cleanup_GdkScreen$MH,"glib_slistautoptr_cleanup_GdkScreen");
    }
    public static void glib_slistautoptr_cleanup_GdkScreen ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkScreen$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkScreen$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glib_queueautoptr_cleanup_GdkScreen$MH,"glib_queueautoptr_cleanup_GdkScreen");
    }
    public static void glib_queueautoptr_cleanup_GdkScreen ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkScreen$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkVisual_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkVisual_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkVisual_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkVisual_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glib_autoptr_clear_GdkVisual$MH,"glib_autoptr_clear_GdkVisual");
    }
    public static void glib_autoptr_clear_GdkVisual ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkVisual$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$1361.glib_autoptr_cleanup_GdkVisual$MH,"glib_autoptr_cleanup_GdkVisual");
    }
    public static void glib_autoptr_cleanup_GdkVisual ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkVisual$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glib_listautoptr_cleanup_GdkVisual$MH,"glib_listautoptr_cleanup_GdkVisual");
    }
    public static void glib_listautoptr_cleanup_GdkVisual ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkVisual$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glib_slistautoptr_cleanup_GdkVisual$MH,"glib_slistautoptr_cleanup_GdkVisual");
    }
    public static void glib_slistautoptr_cleanup_GdkVisual ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkVisual$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkVisual$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glib_queueautoptr_cleanup_GdkVisual$MH,"glib_queueautoptr_cleanup_GdkVisual");
    }
    public static void glib_queueautoptr_cleanup_GdkVisual ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkVisual$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkWindow_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkWindow_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkWindow_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkWindow_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glib_autoptr_clear_GdkWindow$MH,"glib_autoptr_clear_GdkWindow");
    }
    public static void glib_autoptr_clear_GdkWindow ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkWindow$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glib_autoptr_cleanup_GdkWindow$MH,"glib_autoptr_cleanup_GdkWindow");
    }
    public static void glib_autoptr_cleanup_GdkWindow ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkWindow$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1362.glib_listautoptr_cleanup_GdkWindow$MH,"glib_listautoptr_cleanup_GdkWindow");
    }
    public static void glib_listautoptr_cleanup_GdkWindow ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkWindow$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glib_slistautoptr_cleanup_GdkWindow$MH,"glib_slistautoptr_cleanup_GdkWindow");
    }
    public static void glib_slistautoptr_cleanup_GdkWindow ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkWindow$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkWindow$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glib_queueautoptr_cleanup_GdkWindow$MH,"glib_queueautoptr_cleanup_GdkWindow");
    }
    public static void glib_queueautoptr_cleanup_GdkWindow ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkWindow$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkEvent_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkEvent_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkEvent_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkEvent_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glib_autoptr_clear_GdkEvent$MH,"glib_autoptr_clear_GdkEvent");
    }
    public static void glib_autoptr_clear_GdkEvent ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkEvent$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glib_autoptr_cleanup_GdkEvent$MH,"glib_autoptr_cleanup_GdkEvent");
    }
    public static void glib_autoptr_cleanup_GdkEvent ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkEvent$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glib_listautoptr_cleanup_GdkEvent$MH,"glib_listautoptr_cleanup_GdkEvent");
    }
    public static void glib_listautoptr_cleanup_GdkEvent ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkEvent$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1363.glib_slistautoptr_cleanup_GdkEvent$MH,"glib_slistautoptr_cleanup_GdkEvent");
    }
    public static void glib_slistautoptr_cleanup_GdkEvent ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkEvent$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkEvent$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glib_queueautoptr_cleanup_GdkEvent$MH,"glib_queueautoptr_cleanup_GdkEvent");
    }
    public static void glib_queueautoptr_cleanup_GdkEvent ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkEvent$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkFrameTimings_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkFrameTimings_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkFrameTimings_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkFrameTimings_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkFrameTimings$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glib_autoptr_clear_GdkFrameTimings$MH,"glib_autoptr_clear_GdkFrameTimings");
    }
    public static void glib_autoptr_clear_GdkFrameTimings ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkFrameTimings$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkFrameTimings$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glib_autoptr_cleanup_GdkFrameTimings$MH,"glib_autoptr_cleanup_GdkFrameTimings");
    }
    public static void glib_autoptr_cleanup_GdkFrameTimings ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkFrameTimings$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkFrameTimings$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glib_listautoptr_cleanup_GdkFrameTimings$MH,"glib_listautoptr_cleanup_GdkFrameTimings");
    }
    public static void glib_listautoptr_cleanup_GdkFrameTimings ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkFrameTimings$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkFrameTimings$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glib_slistautoptr_cleanup_GdkFrameTimings$MH,"glib_slistautoptr_cleanup_GdkFrameTimings");
    }
    public static void glib_slistautoptr_cleanup_GdkFrameTimings ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkFrameTimings$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkFrameTimings$MH() {
        return RuntimeHelper.requireNonNull(constants$1364.glib_queueautoptr_cleanup_GdkFrameTimings$MH,"glib_queueautoptr_cleanup_GdkFrameTimings");
    }
    public static void glib_queueautoptr_cleanup_GdkFrameTimings ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkFrameTimings$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GdkRGBA_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkRGBA_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkRGBA_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GdkRGBA_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GdkRGBA$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.glib_autoptr_clear_GdkRGBA$MH,"glib_autoptr_clear_GdkRGBA");
    }
    public static void glib_autoptr_clear_GdkRGBA ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GdkRGBA$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GdkRGBA$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.glib_autoptr_cleanup_GdkRGBA$MH,"glib_autoptr_cleanup_GdkRGBA");
    }
    public static void glib_autoptr_cleanup_GdkRGBA ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GdkRGBA$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GdkRGBA$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.glib_listautoptr_cleanup_GdkRGBA$MH,"glib_listautoptr_cleanup_GdkRGBA");
    }
    public static void glib_listautoptr_cleanup_GdkRGBA ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GdkRGBA$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GdkRGBA$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.glib_slistautoptr_cleanup_GdkRGBA$MH,"glib_slistautoptr_cleanup_GdkRGBA");
    }
    public static void glib_slistautoptr_cleanup_GdkRGBA ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GdkRGBA$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GdkRGBA$MH() {
        return RuntimeHelper.requireNonNull(constants$1365.glib_queueautoptr_cleanup_GdkRGBA$MH,"glib_queueautoptr_cleanup_GdkRGBA");
    }
    public static void glib_queueautoptr_cleanup_GdkRGBA ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GdkRGBA$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int GTK_ALIGN_FILL() {
        return (int)0L;
    }
    public static int GTK_ALIGN_START() {
        return (int)1L;
    }
    public static int GTK_ALIGN_END() {
        return (int)2L;
    }
    public static int GTK_ALIGN_CENTER() {
        return (int)3L;
    }
    public static int GTK_ALIGN_BASELINE() {
        return (int)4L;
    }
    public static int GTK_ARROW_UP() {
        return (int)0L;
    }
    public static int GTK_ARROW_DOWN() {
        return (int)1L;
    }
    public static int GTK_ARROW_LEFT() {
        return (int)2L;
    }
    public static int GTK_ARROW_RIGHT() {
        return (int)3L;
    }
    public static int GTK_ARROW_NONE() {
        return (int)4L;
    }
    public static int GTK_BASELINE_POSITION_TOP() {
        return (int)0L;
    }
    public static int GTK_BASELINE_POSITION_CENTER() {
        return (int)1L;
    }
    public static int GTK_BASELINE_POSITION_BOTTOM() {
        return (int)2L;
    }
    public static int GTK_DELETE_CHARS() {
        return (int)0L;
    }
    public static int GTK_DELETE_WORD_ENDS() {
        return (int)1L;
    }
    public static int GTK_DELETE_WORDS() {
        return (int)2L;
    }
    public static int GTK_DELETE_DISPLAY_LINES() {
        return (int)3L;
    }
    public static int GTK_DELETE_DISPLAY_LINE_ENDS() {
        return (int)4L;
    }
    public static int GTK_DELETE_PARAGRAPH_ENDS() {
        return (int)5L;
    }
    public static int GTK_DELETE_PARAGRAPHS() {
        return (int)6L;
    }
    public static int GTK_DELETE_WHITESPACE() {
        return (int)7L;
    }
    public static int GTK_DIR_TAB_FORWARD() {
        return (int)0L;
    }
    public static int GTK_DIR_TAB_BACKWARD() {
        return (int)1L;
    }
    public static int GTK_DIR_UP() {
        return (int)2L;
    }
    public static int GTK_DIR_DOWN() {
        return (int)3L;
    }
    public static int GTK_DIR_LEFT() {
        return (int)4L;
    }
    public static int GTK_DIR_RIGHT() {
        return (int)5L;
    }
    public static int GTK_ICON_SIZE_INVALID() {
        return (int)0L;
    }
    public static int GTK_ICON_SIZE_MENU() {
        return (int)1L;
    }
    public static int GTK_ICON_SIZE_SMALL_TOOLBAR() {
        return (int)2L;
    }
    public static int GTK_ICON_SIZE_LARGE_TOOLBAR() {
        return (int)3L;
    }
    public static int GTK_ICON_SIZE_BUTTON() {
        return (int)4L;
    }
    public static int GTK_ICON_SIZE_DND() {
        return (int)5L;
    }
    public static int GTK_ICON_SIZE_DIALOG() {
        return (int)6L;
    }
    public static int GTK_SENSITIVITY_AUTO() {
        return (int)0L;
    }
    public static int GTK_SENSITIVITY_ON() {
        return (int)1L;
    }
    public static int GTK_SENSITIVITY_OFF() {
        return (int)2L;
    }
    public static int GTK_TEXT_DIR_NONE() {
        return (int)0L;
    }
    public static int GTK_TEXT_DIR_LTR() {
        return (int)1L;
    }
    public static int GTK_TEXT_DIR_RTL() {
        return (int)2L;
    }
    public static int GTK_JUSTIFY_LEFT() {
        return (int)0L;
    }
    public static int GTK_JUSTIFY_RIGHT() {
        return (int)1L;
    }
    public static int GTK_JUSTIFY_CENTER() {
        return (int)2L;
    }
    public static int GTK_JUSTIFY_FILL() {
        return (int)3L;
    }
    public static int GTK_MENU_DIR_PARENT() {
        return (int)0L;
    }
    public static int GTK_MENU_DIR_CHILD() {
        return (int)1L;
    }
    public static int GTK_MENU_DIR_NEXT() {
        return (int)2L;
    }
    public static int GTK_MENU_DIR_PREV() {
        return (int)3L;
    }
    public static int GTK_MESSAGE_INFO() {
        return (int)0L;
    }
    public static int GTK_MESSAGE_WARNING() {
        return (int)1L;
    }
    public static int GTK_MESSAGE_QUESTION() {
        return (int)2L;
    }
    public static int GTK_MESSAGE_ERROR() {
        return (int)3L;
    }
    public static int GTK_MESSAGE_OTHER() {
        return (int)4L;
    }
    public static int GTK_MOVEMENT_LOGICAL_POSITIONS() {
        return (int)0L;
    }
    public static int GTK_MOVEMENT_VISUAL_POSITIONS() {
        return (int)1L;
    }
    public static int GTK_MOVEMENT_WORDS() {
        return (int)2L;
    }
    public static int GTK_MOVEMENT_DISPLAY_LINES() {
        return (int)3L;
    }
    public static int GTK_MOVEMENT_DISPLAY_LINE_ENDS() {
        return (int)4L;
    }
    public static int GTK_MOVEMENT_PARAGRAPHS() {
        return (int)5L;
    }
    public static int GTK_MOVEMENT_PARAGRAPH_ENDS() {
        return (int)6L;
    }
    public static int GTK_MOVEMENT_PAGES() {
        return (int)7L;
    }
    public static int GTK_MOVEMENT_BUFFER_ENDS() {
        return (int)8L;
    }
    public static int GTK_MOVEMENT_HORIZONTAL_PAGES() {
        return (int)9L;
    }
    public static int GTK_SCROLL_STEPS() {
        return (int)0L;
    }
    public static int GTK_SCROLL_PAGES() {
        return (int)1L;
    }
    public static int GTK_SCROLL_ENDS() {
        return (int)2L;
    }
    public static int GTK_SCROLL_HORIZONTAL_STEPS() {
        return (int)3L;
    }
    public static int GTK_SCROLL_HORIZONTAL_PAGES() {
        return (int)4L;
    }
    public static int GTK_SCROLL_HORIZONTAL_ENDS() {
        return (int)5L;
    }
    public static int GTK_ORIENTATION_HORIZONTAL() {
        return (int)0L;
    }
    public static int GTK_ORIENTATION_VERTICAL() {
        return (int)1L;
    }
    public static int GTK_PACK_START() {
        return (int)0L;
    }
    public static int GTK_PACK_END() {
        return (int)1L;
    }
    public static int GTK_POS_LEFT() {
        return (int)0L;
    }
    public static int GTK_POS_RIGHT() {
        return (int)1L;
    }
    public static int GTK_POS_TOP() {
        return (int)2L;
    }
    public static int GTK_POS_BOTTOM() {
        return (int)3L;
    }
    public static int GTK_RELIEF_NORMAL() {
        return (int)0L;
    }
    public static int GTK_RELIEF_HALF() {
        return (int)1L;
    }
    public static int GTK_RELIEF_NONE() {
        return (int)2L;
    }
    public static int GTK_SCROLL_NONE() {
        return (int)0L;
    }
    public static int GTK_SCROLL_JUMP() {
        return (int)1L;
    }
    public static int GTK_SCROLL_STEP_BACKWARD() {
        return (int)2L;
    }
    public static int GTK_SCROLL_STEP_FORWARD() {
        return (int)3L;
    }
    public static int GTK_SCROLL_PAGE_BACKWARD() {
        return (int)4L;
    }
    public static int GTK_SCROLL_PAGE_FORWARD() {
        return (int)5L;
    }
    public static int GTK_SCROLL_STEP_UP() {
        return (int)6L;
    }
    public static int GTK_SCROLL_STEP_DOWN() {
        return (int)7L;
    }
    public static int GTK_SCROLL_PAGE_UP() {
        return (int)8L;
    }
    public static int GTK_SCROLL_PAGE_DOWN() {
        return (int)9L;
    }
    public static int GTK_SCROLL_STEP_LEFT() {
        return (int)10L;
    }
    public static int GTK_SCROLL_STEP_RIGHT() {
        return (int)11L;
    }
    public static int GTK_SCROLL_PAGE_LEFT() {
        return (int)12L;
    }
    public static int GTK_SCROLL_PAGE_RIGHT() {
        return (int)13L;
    }
    public static int GTK_SCROLL_START() {
        return (int)14L;
    }
    public static int GTK_SCROLL_END() {
        return (int)15L;
    }
    public static int GTK_SELECTION_NONE() {
        return (int)0L;
    }
    public static int GTK_SELECTION_SINGLE() {
        return (int)1L;
    }
    public static int GTK_SELECTION_BROWSE() {
        return (int)2L;
    }
    public static int GTK_SELECTION_MULTIPLE() {
        return (int)3L;
    }
    public static int GTK_SHADOW_NONE() {
        return (int)0L;
    }
    public static int GTK_SHADOW_IN() {
        return (int)1L;
    }
    public static int GTK_SHADOW_OUT() {
        return (int)2L;
    }
    public static int GTK_SHADOW_ETCHED_IN() {
        return (int)3L;
    }
    public static int GTK_SHADOW_ETCHED_OUT() {
        return (int)4L;
    }
    public static int GTK_STATE_NORMAL() {
        return (int)0L;
    }
    public static int GTK_STATE_ACTIVE() {
        return (int)1L;
    }
    public static int GTK_STATE_PRELIGHT() {
        return (int)2L;
    }
    public static int GTK_STATE_SELECTED() {
        return (int)3L;
    }
    public static int GTK_STATE_INSENSITIVE() {
        return (int)4L;
    }
    public static int GTK_STATE_INCONSISTENT() {
        return (int)5L;
    }
    public static int GTK_STATE_FOCUSED() {
        return (int)6L;
    }
    public static int GTK_TOOLBAR_ICONS() {
        return (int)0L;
    }
    public static int GTK_TOOLBAR_TEXT() {
        return (int)1L;
    }
    public static int GTK_TOOLBAR_BOTH() {
        return (int)2L;
    }
    public static int GTK_TOOLBAR_BOTH_HORIZ() {
        return (int)3L;
    }
    public static int GTK_WRAP_NONE() {
        return (int)0L;
    }
    public static int GTK_WRAP_CHAR() {
        return (int)1L;
    }
    public static int GTK_WRAP_WORD() {
        return (int)2L;
    }
    public static int GTK_WRAP_WORD_CHAR() {
        return (int)3L;
    }
    public static int GTK_SORT_ASCENDING() {
        return (int)0L;
    }
    public static int GTK_SORT_DESCENDING() {
        return (int)1L;
    }
    public static int GTK_IM_PREEDIT_NOTHING() {
        return (int)0L;
    }
    public static int GTK_IM_PREEDIT_CALLBACK() {
        return (int)1L;
    }
    public static int GTK_IM_PREEDIT_NONE() {
        return (int)2L;
    }
    public static int GTK_IM_STATUS_NOTHING() {
        return (int)0L;
    }
    public static int GTK_IM_STATUS_CALLBACK() {
        return (int)1L;
    }
    public static int GTK_IM_STATUS_NONE() {
        return (int)2L;
    }
    public static int GTK_PACK_DIRECTION_LTR() {
        return (int)0L;
    }
    public static int GTK_PACK_DIRECTION_RTL() {
        return (int)1L;
    }
    public static int GTK_PACK_DIRECTION_TTB() {
        return (int)2L;
    }
    public static int GTK_PACK_DIRECTION_BTT() {
        return (int)3L;
    }
    public static int GTK_PRINT_PAGES_ALL() {
        return (int)0L;
    }
    public static int GTK_PRINT_PAGES_CURRENT() {
        return (int)1L;
    }
    public static int GTK_PRINT_PAGES_RANGES() {
        return (int)2L;
    }
    public static int GTK_PRINT_PAGES_SELECTION() {
        return (int)3L;
    }
    public static int GTK_PAGE_SET_ALL() {
        return (int)0L;
    }
    public static int GTK_PAGE_SET_EVEN() {
        return (int)1L;
    }
    public static int GTK_PAGE_SET_ODD() {
        return (int)2L;
    }
    public static int GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_TOP_TO_BOTTOM() {
        return (int)0L;
    }
    public static int GTK_NUMBER_UP_LAYOUT_LEFT_TO_RIGHT_BOTTOM_TO_TOP() {
        return (int)1L;
    }
    public static int GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_TOP_TO_BOTTOM() {
        return (int)2L;
    }
    public static int GTK_NUMBER_UP_LAYOUT_RIGHT_TO_LEFT_BOTTOM_TO_TOP() {
        return (int)3L;
    }
    public static int GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_LEFT_TO_RIGHT() {
        return (int)4L;
    }
    public static int GTK_NUMBER_UP_LAYOUT_TOP_TO_BOTTOM_RIGHT_TO_LEFT() {
        return (int)5L;
    }
    public static int GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_LEFT_TO_RIGHT() {
        return (int)6L;
    }
    public static int GTK_NUMBER_UP_LAYOUT_BOTTOM_TO_TOP_RIGHT_TO_LEFT() {
        return (int)7L;
    }
    public static int GTK_PAGE_ORIENTATION_PORTRAIT() {
        return (int)0L;
    }
    public static int GTK_PAGE_ORIENTATION_LANDSCAPE() {
        return (int)1L;
    }
    public static int GTK_PAGE_ORIENTATION_REVERSE_PORTRAIT() {
        return (int)2L;
    }
    public static int GTK_PAGE_ORIENTATION_REVERSE_LANDSCAPE() {
        return (int)3L;
    }
    public static int GTK_PRINT_QUALITY_LOW() {
        return (int)0L;
    }
    public static int GTK_PRINT_QUALITY_NORMAL() {
        return (int)1L;
    }
    public static int GTK_PRINT_QUALITY_HIGH() {
        return (int)2L;
    }
    public static int GTK_PRINT_QUALITY_DRAFT() {
        return (int)3L;
    }
    public static int GTK_PRINT_DUPLEX_SIMPLEX() {
        return (int)0L;
    }
    public static int GTK_PRINT_DUPLEX_HORIZONTAL() {
        return (int)1L;
    }
    public static int GTK_PRINT_DUPLEX_VERTICAL() {
        return (int)2L;
    }
    public static int GTK_UNIT_NONE() {
        return (int)0L;
    }
    public static int GTK_UNIT_POINTS() {
        return (int)1L;
    }
    public static int GTK_UNIT_INCH() {
        return (int)2L;
    }
    public static int GTK_UNIT_MM() {
        return (int)3L;
    }
    public static int GTK_TREE_VIEW_GRID_LINES_NONE() {
        return (int)0L;
    }
    public static int GTK_TREE_VIEW_GRID_LINES_HORIZONTAL() {
        return (int)1L;
    }
    public static int GTK_TREE_VIEW_GRID_LINES_VERTICAL() {
        return (int)2L;
    }
    public static int GTK_TREE_VIEW_GRID_LINES_BOTH() {
        return (int)3L;
    }
    public static int GTK_DRAG_RESULT_SUCCESS() {
        return (int)0L;
    }
    public static int GTK_DRAG_RESULT_NO_TARGET() {
        return (int)1L;
    }
    public static int GTK_DRAG_RESULT_USER_CANCELLED() {
        return (int)2L;
    }
    public static int GTK_DRAG_RESULT_TIMEOUT_EXPIRED() {
        return (int)3L;
    }
    public static int GTK_DRAG_RESULT_GRAB_BROKEN() {
        return (int)4L;
    }
    public static int GTK_DRAG_RESULT_ERROR() {
        return (int)5L;
    }
    public static int GTK_SIZE_GROUP_NONE() {
        return (int)0L;
    }
    public static int GTK_SIZE_GROUP_HORIZONTAL() {
        return (int)1L;
    }
    public static int GTK_SIZE_GROUP_VERTICAL() {
        return (int)2L;
    }
    public static int GTK_SIZE_GROUP_BOTH() {
        return (int)3L;
    }
    public static int GTK_SIZE_REQUEST_HEIGHT_FOR_WIDTH() {
        return (int)0L;
    }
    public static int GTK_SIZE_REQUEST_WIDTH_FOR_HEIGHT() {
        return (int)1L;
    }
    public static int GTK_SIZE_REQUEST_CONSTANT_SIZE() {
        return (int)2L;
    }
    public static int GTK_SCROLL_MINIMUM() {
        return (int)0L;
    }
    public static int GTK_SCROLL_NATURAL() {
        return (int)1L;
    }
    public static int GTK_STATE_FLAG_NORMAL() {
        return (int)0L;
    }
    public static int GTK_STATE_FLAG_ACTIVE() {
        return (int)1L;
    }
    public static int GTK_STATE_FLAG_PRELIGHT() {
        return (int)2L;
    }
    public static int GTK_STATE_FLAG_SELECTED() {
        return (int)4L;
    }
    public static int GTK_STATE_FLAG_INSENSITIVE() {
        return (int)8L;
    }
    public static int GTK_STATE_FLAG_INCONSISTENT() {
        return (int)16L;
    }
    public static int GTK_STATE_FLAG_FOCUSED() {
        return (int)32L;
    }
    public static int GTK_STATE_FLAG_BACKDROP() {
        return (int)64L;
    }
    public static int GTK_STATE_FLAG_DIR_LTR() {
        return (int)128L;
    }
    public static int GTK_STATE_FLAG_DIR_RTL() {
        return (int)256L;
    }
    public static int GTK_STATE_FLAG_LINK() {
        return (int)512L;
    }
    public static int GTK_STATE_FLAG_VISITED() {
        return (int)1024L;
    }
    public static int GTK_STATE_FLAG_CHECKED() {
        return (int)2048L;
    }
    public static int GTK_STATE_FLAG_DROP_ACTIVE() {
        return (int)4096L;
    }
    public static int GTK_REGION_EVEN() {
        return (int)1L;
    }
    public static int GTK_REGION_ODD() {
        return (int)2L;
    }
    public static int GTK_REGION_FIRST() {
        return (int)4L;
    }
    public static int GTK_REGION_LAST() {
        return (int)8L;
    }
    public static int GTK_REGION_ONLY() {
        return (int)16L;
    }
    public static int GTK_REGION_SORTED() {
        return (int)32L;
    }
    public static int GTK_JUNCTION_NONE() {
        return (int)0L;
    }
    public static int GTK_JUNCTION_CORNER_TOPLEFT() {
        return (int)1L;
    }
    public static int GTK_JUNCTION_CORNER_TOPRIGHT() {
        return (int)2L;
    }
    public static int GTK_JUNCTION_CORNER_BOTTOMLEFT() {
        return (int)4L;
    }
    public static int GTK_JUNCTION_CORNER_BOTTOMRIGHT() {
        return (int)8L;
    }
    public static int GTK_JUNCTION_TOP() {
        return (int)3L;
    }
    public static int GTK_JUNCTION_BOTTOM() {
        return (int)12L;
    }
    public static int GTK_JUNCTION_LEFT() {
        return (int)5L;
    }
    public static int GTK_JUNCTION_RIGHT() {
        return (int)10L;
    }
    public static int GTK_BORDER_STYLE_NONE() {
        return (int)0L;
    }
    public static int GTK_BORDER_STYLE_SOLID() {
        return (int)1L;
    }
    public static int GTK_BORDER_STYLE_INSET() {
        return (int)2L;
    }
    public static int GTK_BORDER_STYLE_OUTSET() {
        return (int)3L;
    }
    public static int GTK_BORDER_STYLE_HIDDEN() {
        return (int)4L;
    }
    public static int GTK_BORDER_STYLE_DOTTED() {
        return (int)5L;
    }
    public static int GTK_BORDER_STYLE_DASHED() {
        return (int)6L;
    }
    public static int GTK_BORDER_STYLE_DOUBLE() {
        return (int)7L;
    }
    public static int GTK_BORDER_STYLE_GROOVE() {
        return (int)8L;
    }
    public static int GTK_BORDER_STYLE_RIDGE() {
        return (int)9L;
    }
    public static int GTK_LEVEL_BAR_MODE_CONTINUOUS() {
        return (int)0L;
    }
    public static int GTK_LEVEL_BAR_MODE_DISCRETE() {
        return (int)1L;
    }
    public static int GTK_INPUT_PURPOSE_FREE_FORM() {
        return (int)0L;
    }
    public static int GTK_INPUT_PURPOSE_ALPHA() {
        return (int)1L;
    }
    public static int GTK_INPUT_PURPOSE_DIGITS() {
        return (int)2L;
    }
    public static int GTK_INPUT_PURPOSE_NUMBER() {
        return (int)3L;
    }
    public static int GTK_INPUT_PURPOSE_PHONE() {
        return (int)4L;
    }
    public static int GTK_INPUT_PURPOSE_URL() {
        return (int)5L;
    }
    public static int GTK_INPUT_PURPOSE_EMAIL() {
        return (int)6L;
    }
    public static int GTK_INPUT_PURPOSE_NAME() {
        return (int)7L;
    }
    public static int GTK_INPUT_PURPOSE_PASSWORD() {
        return (int)8L;
    }
    public static int GTK_INPUT_PURPOSE_PIN() {
        return (int)9L;
    }
    public static int GTK_INPUT_PURPOSE_TERMINAL() {
        return (int)10L;
    }
    public static int GTK_INPUT_HINT_NONE() {
        return (int)0L;
    }
    public static int GTK_INPUT_HINT_SPELLCHECK() {
        return (int)1L;
    }
    public static int GTK_INPUT_HINT_NO_SPELLCHECK() {
        return (int)2L;
    }
    public static int GTK_INPUT_HINT_WORD_COMPLETION() {
        return (int)4L;
    }
    public static int GTK_INPUT_HINT_LOWERCASE() {
        return (int)8L;
    }
    public static int GTK_INPUT_HINT_UPPERCASE_CHARS() {
        return (int)16L;
    }
    public static int GTK_INPUT_HINT_UPPERCASE_WORDS() {
        return (int)32L;
    }
    public static int GTK_INPUT_HINT_UPPERCASE_SENTENCES() {
        return (int)64L;
    }
    public static int GTK_INPUT_HINT_INHIBIT_OSK() {
        return (int)128L;
    }
    public static int GTK_INPUT_HINT_VERTICAL_WRITING() {
        return (int)256L;
    }
    public static int GTK_INPUT_HINT_EMOJI() {
        return (int)512L;
    }
    public static int GTK_INPUT_HINT_NO_EMOJI() {
        return (int)1024L;
    }
    public static int GTK_PHASE_NONE() {
        return (int)0L;
    }
    public static int GTK_PHASE_CAPTURE() {
        return (int)1L;
    }
    public static int GTK_PHASE_BUBBLE() {
        return (int)2L;
    }
    public static int GTK_PHASE_TARGET() {
        return (int)3L;
    }
    public static int GTK_EVENT_SEQUENCE_NONE() {
        return (int)0L;
    }
    public static int GTK_EVENT_SEQUENCE_CLAIMED() {
        return (int)1L;
    }
    public static int GTK_EVENT_SEQUENCE_DENIED() {
        return (int)2L;
    }
    public static int GTK_PAN_DIRECTION_LEFT() {
        return (int)0L;
    }
    public static int GTK_PAN_DIRECTION_RIGHT() {
        return (int)1L;
    }
    public static int GTK_PAN_DIRECTION_UP() {
        return (int)2L;
    }
    public static int GTK_PAN_DIRECTION_DOWN() {
        return (int)3L;
    }
    public static int GTK_POPOVER_CONSTRAINT_NONE() {
        return (int)0L;
    }
    public static int GTK_POPOVER_CONSTRAINT_WINDOW() {
        return (int)1L;
    }
    public static int GTK_ACCEL_VISIBLE() {
        return (int)1L;
    }
    public static int GTK_ACCEL_LOCKED() {
        return (int)2L;
    }
    public static int GTK_ACCEL_MASK() {
        return (int)7L;
    }
    public static MethodHandle gtk_accel_group_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.gtk_accel_group_get_type$MH,"gtk_accel_group_get_type");
    }
    public static long gtk_accel_group_get_type () {
        var mh$ = gtk_accel_group_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.gtk_accel_group_new$MH,"gtk_accel_group_new");
    }
    public static MemoryAddress gtk_accel_group_new () {
        var mh$ = gtk_accel_group_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_get_is_locked$MH() {
        return RuntimeHelper.requireNonNull(constants$1366.gtk_accel_group_get_is_locked$MH,"gtk_accel_group_get_is_locked");
    }
    public static int gtk_accel_group_get_is_locked ( Addressable accel_group) {
        var mh$ = gtk_accel_group_get_is_locked$MH();
        try {
            return (int)mh$.invokeExact(accel_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_get_modifier_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.gtk_accel_group_get_modifier_mask$MH,"gtk_accel_group_get_modifier_mask");
    }
    public static int gtk_accel_group_get_modifier_mask ( Addressable accel_group) {
        var mh$ = gtk_accel_group_get_modifier_mask$MH();
        try {
            return (int)mh$.invokeExact(accel_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.gtk_accel_group_lock$MH,"gtk_accel_group_lock");
    }
    public static void gtk_accel_group_lock ( Addressable accel_group) {
        var mh$ = gtk_accel_group_lock$MH();
        try {
            mh$.invokeExact(accel_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.gtk_accel_group_unlock$MH,"gtk_accel_group_unlock");
    }
    public static void gtk_accel_group_unlock ( Addressable accel_group) {
        var mh$ = gtk_accel_group_unlock$MH();
        try {
            mh$.invokeExact(accel_group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_connect$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.gtk_accel_group_connect$MH,"gtk_accel_group_connect");
    }
    public static void gtk_accel_group_connect ( Addressable accel_group,  int accel_key,  int accel_mods,  int accel_flags,  Addressable closure) {
        var mh$ = gtk_accel_group_connect$MH();
        try {
            mh$.invokeExact(accel_group, accel_key, accel_mods, accel_flags, closure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_connect_by_path$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.gtk_accel_group_connect_by_path$MH,"gtk_accel_group_connect_by_path");
    }
    public static void gtk_accel_group_connect_by_path ( Addressable accel_group,  Addressable accel_path,  Addressable closure) {
        var mh$ = gtk_accel_group_connect_by_path$MH();
        try {
            mh$.invokeExact(accel_group, accel_path, closure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_disconnect$MH() {
        return RuntimeHelper.requireNonNull(constants$1367.gtk_accel_group_disconnect$MH,"gtk_accel_group_disconnect");
    }
    public static int gtk_accel_group_disconnect ( Addressable accel_group,  Addressable closure) {
        var mh$ = gtk_accel_group_disconnect$MH();
        try {
            return (int)mh$.invokeExact(accel_group, closure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_disconnect_key$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.gtk_accel_group_disconnect_key$MH,"gtk_accel_group_disconnect_key");
    }
    public static int gtk_accel_group_disconnect_key ( Addressable accel_group,  int accel_key,  int accel_mods) {
        var mh$ = gtk_accel_group_disconnect_key$MH();
        try {
            return (int)mh$.invokeExact(accel_group, accel_key, accel_mods);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_activate$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.gtk_accel_group_activate$MH,"gtk_accel_group_activate");
    }
    public static int gtk_accel_group_activate ( Addressable accel_group,  int accel_quark,  Addressable acceleratable,  int accel_key,  int accel_mods) {
        var mh$ = gtk_accel_group_activate$MH();
        try {
            return (int)mh$.invokeExact(accel_group, accel_quark, acceleratable, accel_key, accel_mods);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_accel_group_attach$MH() {
        return RuntimeHelper.requireNonNull(constants$1368._gtk_accel_group_attach$MH,"_gtk_accel_group_attach");
    }
    public static void _gtk_accel_group_attach ( Addressable accel_group,  Addressable object) {
        var mh$ = _gtk_accel_group_attach$MH();
        try {
            mh$.invokeExact(accel_group, object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _gtk_accel_group_detach$MH() {
        return RuntimeHelper.requireNonNull(constants$1368._gtk_accel_group_detach$MH,"_gtk_accel_group_detach");
    }
    public static void _gtk_accel_group_detach ( Addressable accel_group,  Addressable object) {
        var mh$ = _gtk_accel_group_detach$MH();
        try {
            mh$.invokeExact(accel_group, object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_groups_activate$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.gtk_accel_groups_activate$MH,"gtk_accel_groups_activate");
    }
    public static int gtk_accel_groups_activate ( Addressable object,  int accel_key,  int accel_mods) {
        var mh$ = gtk_accel_groups_activate$MH();
        try {
            return (int)mh$.invokeExact(object, accel_key, accel_mods);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_groups_from_object$MH() {
        return RuntimeHelper.requireNonNull(constants$1368.gtk_accel_groups_from_object$MH,"gtk_accel_groups_from_object");
    }
    public static MemoryAddress gtk_accel_groups_from_object ( Addressable object) {
        var mh$ = gtk_accel_groups_from_object$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(object);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_find$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.gtk_accel_group_find$MH,"gtk_accel_group_find");
    }
    public static MemoryAddress gtk_accel_group_find ( Addressable accel_group,  Addressable find_func,  Addressable data) {
        var mh$ = gtk_accel_group_find$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(accel_group, find_func, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_from_accel_closure$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.gtk_accel_group_from_accel_closure$MH,"gtk_accel_group_from_accel_closure");
    }
    public static MemoryAddress gtk_accel_group_from_accel_closure ( Addressable closure) {
        var mh$ = gtk_accel_group_from_accel_closure$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(closure);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accelerator_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.gtk_accelerator_valid$MH,"gtk_accelerator_valid");
    }
    public static int gtk_accelerator_valid ( int keyval,  int modifiers) {
        var mh$ = gtk_accelerator_valid$MH();
        try {
            return (int)mh$.invokeExact(keyval, modifiers);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accelerator_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.gtk_accelerator_parse$MH,"gtk_accelerator_parse");
    }
    public static void gtk_accelerator_parse ( Addressable accelerator,  Addressable accelerator_key,  Addressable accelerator_mods) {
        var mh$ = gtk_accelerator_parse$MH();
        try {
            mh$.invokeExact(accelerator, accelerator_key, accelerator_mods);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accelerator_parse_with_keycode$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.gtk_accelerator_parse_with_keycode$MH,"gtk_accelerator_parse_with_keycode");
    }
    public static void gtk_accelerator_parse_with_keycode ( Addressable accelerator,  Addressable accelerator_key,  Addressable accelerator_codes,  Addressable accelerator_mods) {
        var mh$ = gtk_accelerator_parse_with_keycode$MH();
        try {
            mh$.invokeExact(accelerator, accelerator_key, accelerator_codes, accelerator_mods);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accelerator_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1369.gtk_accelerator_name$MH,"gtk_accelerator_name");
    }
    public static MemoryAddress gtk_accelerator_name ( int accelerator_key,  int accelerator_mods) {
        var mh$ = gtk_accelerator_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(accelerator_key, accelerator_mods);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accelerator_name_with_keycode$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.gtk_accelerator_name_with_keycode$MH,"gtk_accelerator_name_with_keycode");
    }
    public static MemoryAddress gtk_accelerator_name_with_keycode ( Addressable display,  int accelerator_key,  int keycode,  int accelerator_mods) {
        var mh$ = gtk_accelerator_name_with_keycode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(display, accelerator_key, keycode, accelerator_mods);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accelerator_get_label$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.gtk_accelerator_get_label$MH,"gtk_accelerator_get_label");
    }
    public static MemoryAddress gtk_accelerator_get_label ( int accelerator_key,  int accelerator_mods) {
        var mh$ = gtk_accelerator_get_label$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(accelerator_key, accelerator_mods);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accelerator_get_label_with_keycode$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.gtk_accelerator_get_label_with_keycode$MH,"gtk_accelerator_get_label_with_keycode");
    }
    public static MemoryAddress gtk_accelerator_get_label_with_keycode ( Addressable display,  int accelerator_key,  int keycode,  int accelerator_mods) {
        var mh$ = gtk_accelerator_get_label_with_keycode$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(display, accelerator_key, keycode, accelerator_mods);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accelerator_set_default_mod_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.gtk_accelerator_set_default_mod_mask$MH,"gtk_accelerator_set_default_mod_mask");
    }
    public static void gtk_accelerator_set_default_mod_mask ( int default_mod_mask) {
        var mh$ = gtk_accelerator_set_default_mod_mask$MH();
        try {
            mh$.invokeExact(default_mod_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accelerator_get_default_mod_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.gtk_accelerator_get_default_mod_mask$MH,"gtk_accelerator_get_default_mod_mask");
    }
    public static int gtk_accelerator_get_default_mod_mask () {
        var mh$ = gtk_accelerator_get_default_mod_mask$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_accel_group_query$MH() {
        return RuntimeHelper.requireNonNull(constants$1370.gtk_accel_group_query$MH,"gtk_accel_group_query");
    }
    public static MemoryAddress gtk_accel_group_query ( Addressable accel_group,  int accel_key,  int accel_mods,  Addressable n_entries) {
        var mh$ = gtk_accel_group_query$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(accel_group, accel_key, accel_mods, n_entries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkAccelGroup_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAccelGroup_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAccelGroup_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkAccelGroup_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkAccelGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.glib_autoptr_clear_GtkAccelGroup$MH,"glib_autoptr_clear_GtkAccelGroup");
    }
    public static void glib_autoptr_clear_GtkAccelGroup ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkAccelGroup$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkAccelGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.glib_autoptr_cleanup_GtkAccelGroup$MH,"glib_autoptr_cleanup_GtkAccelGroup");
    }
    public static void glib_autoptr_cleanup_GtkAccelGroup ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkAccelGroup$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkAccelGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.glib_listautoptr_cleanup_GtkAccelGroup$MH,"glib_listautoptr_cleanup_GtkAccelGroup");
    }
    public static void glib_listautoptr_cleanup_GtkAccelGroup ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkAccelGroup$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkAccelGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.glib_slistautoptr_cleanup_GtkAccelGroup$MH,"glib_slistautoptr_cleanup_GtkAccelGroup");
    }
    public static void glib_slistautoptr_cleanup_GtkAccelGroup ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkAccelGroup$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkAccelGroup$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.glib_queueautoptr_cleanup_GtkAccelGroup$MH,"glib_queueautoptr_cleanup_GtkAccelGroup");
    }
    public static void glib_queueautoptr_cleanup_GtkAccelGroup ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkAccelGroup$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_border_get_type$MH() {
        return RuntimeHelper.requireNonNull(constants$1371.gtk_border_get_type$MH,"gtk_border_get_type");
    }
    public static long gtk_border_get_type () {
        var mh$ = gtk_border_get_type$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_border_new$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.gtk_border_new$MH,"gtk_border_new");
    }
    public static MemoryAddress gtk_border_new () {
        var mh$ = gtk_border_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_border_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.gtk_border_copy$MH,"gtk_border_copy");
    }
    public static MemoryAddress gtk_border_copy ( Addressable border_) {
        var mh$ = gtk_border_copy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(border_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle gtk_border_free$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.gtk_border_free$MH,"gtk_border_free");
    }
    public static void gtk_border_free ( Addressable border_) {
        var mh$ = gtk_border_free$MH();
        try {
            mh$.invokeExact(border_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GtkBorder_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBorder_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBorder_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GtkBorder_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GtkBorder$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.glib_autoptr_clear_GtkBorder$MH,"glib_autoptr_clear_GtkBorder");
    }
    public static void glib_autoptr_clear_GtkBorder ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GtkBorder$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GtkBorder$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.glib_autoptr_cleanup_GtkBorder$MH,"glib_autoptr_cleanup_GtkBorder");
    }
    public static void glib_autoptr_cleanup_GtkBorder ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GtkBorder$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GtkBorder$MH() {
        return RuntimeHelper.requireNonNull(constants$1372.glib_listautoptr_cleanup_GtkBorder$MH,"glib_listautoptr_cleanup_GtkBorder");
    }
    public static void glib_listautoptr_cleanup_GtkBorder ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GtkBorder$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GtkBorder$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.glib_slistautoptr_cleanup_GtkBorder$MH,"glib_slistautoptr_cleanup_GtkBorder");
    }
    public static void glib_slistautoptr_cleanup_GtkBorder ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GtkBorder$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GtkBorder$MH() {
        return RuntimeHelper.requireNonNull(constants$1373.glib_queueautoptr_cleanup_GtkBorder$MH,"glib_queueautoptr_cleanup_GtkBorder");
    }
    public static void glib_queueautoptr_cleanup_GtkBorder ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GtkBorder$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atk_get_major_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.atk_get_major_version$MH,"atk_get_major_version");
    }
    public static int atk_get_major_version () {
        var mh$ = atk_get_major_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atk_get_minor_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.atk_get_minor_version$MH,"atk_get_minor_version");
    }
    public static int atk_get_minor_version () {
        var mh$ = atk_get_minor_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atk_get_micro_version$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.atk_get_micro_version$MH,"atk_get_micro_version");
    }
    public static int atk_get_micro_version () {
        var mh$ = atk_get_micro_version$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atk_get_binary_age$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.atk_get_binary_age$MH,"atk_get_binary_age");
    }
    public static int atk_get_binary_age () {
        var mh$ = atk_get_binary_age$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atk_get_interface_age$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.atk_get_interface_age$MH,"atk_get_interface_age");
    }
    public static int atk_get_interface_age () {
        var mh$ = atk_get_interface_age$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ATK_STATE_INVALID() {
        return (int)0L;
    }
    public static int ATK_STATE_ACTIVE() {
        return (int)1L;
    }
    public static int ATK_STATE_ARMED() {
        return (int)2L;
    }
    public static int ATK_STATE_BUSY() {
        return (int)3L;
    }
    public static int ATK_STATE_CHECKED() {
        return (int)4L;
    }
    public static int ATK_STATE_DEFUNCT() {
        return (int)5L;
    }
    public static int ATK_STATE_EDITABLE() {
        return (int)6L;
    }
    public static int ATK_STATE_ENABLED() {
        return (int)7L;
    }
    public static int ATK_STATE_EXPANDABLE() {
        return (int)8L;
    }
    public static int ATK_STATE_EXPANDED() {
        return (int)9L;
    }
    public static int ATK_STATE_FOCUSABLE() {
        return (int)10L;
    }
    public static int ATK_STATE_FOCUSED() {
        return (int)11L;
    }
    public static int ATK_STATE_HORIZONTAL() {
        return (int)12L;
    }
    public static int ATK_STATE_ICONIFIED() {
        return (int)13L;
    }
    public static int ATK_STATE_MODAL() {
        return (int)14L;
    }
    public static int ATK_STATE_MULTI_LINE() {
        return (int)15L;
    }
    public static int ATK_STATE_MULTISELECTABLE() {
        return (int)16L;
    }
    public static int ATK_STATE_OPAQUE() {
        return (int)17L;
    }
    public static int ATK_STATE_PRESSED() {
        return (int)18L;
    }
    public static int ATK_STATE_RESIZABLE() {
        return (int)19L;
    }
    public static int ATK_STATE_SELECTABLE() {
        return (int)20L;
    }
    public static int ATK_STATE_SELECTED() {
        return (int)21L;
    }
    public static int ATK_STATE_SENSITIVE() {
        return (int)22L;
    }
    public static int ATK_STATE_SHOWING() {
        return (int)23L;
    }
    public static int ATK_STATE_SINGLE_LINE() {
        return (int)24L;
    }
    public static int ATK_STATE_STALE() {
        return (int)25L;
    }
    public static int ATK_STATE_TRANSIENT() {
        return (int)26L;
    }
    public static int ATK_STATE_VERTICAL() {
        return (int)27L;
    }
    public static int ATK_STATE_VISIBLE() {
        return (int)28L;
    }
    public static int ATK_STATE_MANAGES_DESCENDANTS() {
        return (int)29L;
    }
    public static int ATK_STATE_INDETERMINATE() {
        return (int)30L;
    }
    public static int ATK_STATE_TRUNCATED() {
        return (int)31L;
    }
    public static int ATK_STATE_REQUIRED() {
        return (int)32L;
    }
    public static int ATK_STATE_INVALID_ENTRY() {
        return (int)33L;
    }
    public static int ATK_STATE_SUPPORTS_AUTOCOMPLETION() {
        return (int)34L;
    }
    public static int ATK_STATE_SELECTABLE_TEXT() {
        return (int)35L;
    }
    public static int ATK_STATE_DEFAULT() {
        return (int)36L;
    }
    public static int ATK_STATE_ANIMATED() {
        return (int)37L;
    }
    public static int ATK_STATE_VISITED() {
        return (int)38L;
    }
    public static int ATK_STATE_CHECKABLE() {
        return (int)39L;
    }
    public static int ATK_STATE_HAS_POPUP() {
        return (int)40L;
    }
    public static int ATK_STATE_HAS_TOOLTIP() {
        return (int)41L;
    }
    public static int ATK_STATE_READ_ONLY() {
        return (int)42L;
    }
    public static int ATK_STATE_LAST_DEFINED() {
        return (int)43L;
    }
    public static MethodHandle atk_state_type_register$MH() {
        return RuntimeHelper.requireNonNull(constants$1374.atk_state_type_register$MH,"atk_state_type_register");
    }
    public static int atk_state_type_register ( Addressable name) {
        var mh$ = atk_state_type_register$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atk_state_type_get_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.atk_state_type_get_name$MH,"atk_state_type_get_name");
    }
    public static MemoryAddress atk_state_type_get_name ( int type) {
        var mh$ = atk_state_type_get_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle atk_state_type_for_name$MH() {
        return RuntimeHelper.requireNonNull(constants$1375.atk_state_type_for_name$MH,"atk_state_type_for_name");
    }
    public static int atk_state_type_for_name ( Addressable name) {
        var mh$ = atk_state_type_for_name$MH();
        try {
            return (int)mh$.invokeExact(name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int ATK_RELATION_NULL() {
        return (int)0L;
    }
    public static int ATK_RELATION_CONTROLLED_BY() {
        return (int)1L;
    }
    public static int ATK_RELATION_CONTROLLER_FOR() {
        return (int)2L;
    }
    public static int ATK_RELATION_LABEL_FOR() {
        return (int)3L;
    }
    public static int ATK_RELATION_LABELLED_BY() {
        return (int)4L;
    }
    public static int ATK_RELATION_MEMBER_OF() {
        return (int)5L;
    }
    public static int ATK_RELATION_NODE_CHILD_OF() {
        return (int)6L;
    }
    public static int ATK_RELATION_FLOWS_TO() {
        return (int)7L;
    }
    public static int ATK_RELATION_FLOWS_FROM() {
        return (int)8L;
    }
    public static int ATK_RELATION_SUBWINDOW_OF() {
        return (int)9L;
    }
    public static int ATK_RELATION_EMBEDS() {
        return (int)10L;
    }
    public static int ATK_RELATION_EMBEDDED_BY() {
        return (int)11L;
    }
    public static int ATK_RELATION_POPUP_FOR() {
        return (int)12L;
    }
    public static int ATK_RELATION_PARENT_WINDOW_OF() {
        return (int)13L;
    }
    public static int ATK_RELATION_DESCRIBED_BY() {
        return (int)14L;
    }
    public static int ATK_RELATION_DESCRIPTION_FOR() {
        return (int)15L;
    }
    public static int ATK_RELATION_NODE_PARENT_OF() {
        return (int)16L;
    }
    public static int ATK_RELATION_DETAILS() {
        return (int)17L;
    }
    public static int ATK_RELATION_DETAILS_FOR() {
        return (int)18L;
    }
    public static int ATK_RELATION_ERROR_MESSAGE() {
        return (int)19L;
    }
    public static int ATK_RELATION_ERROR_FOR() {
        return (int)20L;
    }
    public static int ATK_RELATION_LAST_DEFINED() {
        return (int)21L;
    }
    public static int ATK_ROLE_INVALID() {
        return (int)0L;
    }
    public static int ATK_ROLE_ACCEL_LABEL() {
        return (int)1L;
    }
    public static int ATK_ROLE_ALERT() {
        return (int)2L;
    }
    public static int ATK_ROLE_ANIMATION() {
        return (int)3L;
    }
    public static int ATK_ROLE_ARROW() {
        return (int)4L;
    }
    public static int ATK_ROLE_CALENDAR() {
        return (int)5L;
    }
    public static int ATK_ROLE_CANVAS() {
        return (int)6L;
    }
    public static int ATK_ROLE_CHECK_BOX() {
        return (int)7L;
    }
    public static int ATK_ROLE_CHECK_MENU_ITEM() {
        return (int)8L;
    }
    public static int ATK_ROLE_COLOR_CHOOSER() {
        return (int)9L;
    }
    public static int ATK_ROLE_COLUMN_HEADER() {
        return (int)10L;
    }
    public static int ATK_ROLE_COMBO_BOX() {
        return (int)11L;
    }
    public static int ATK_ROLE_DATE_EDITOR() {
        return (int)12L;
    }
    public static int ATK_ROLE_DESKTOP_ICON() {
        return (int)13L;
    }
    public static int ATK_ROLE_DESKTOP_FRAME() {
        return (int)14L;
    }
    public static int ATK_ROLE_DIAL() {
        return (int)15L;
    }
    public static int ATK_ROLE_DIALOG() {
        return (int)16L;
    }
    public static int ATK_ROLE_DIRECTORY_PANE() {
        return (int)17L;
    }
    public static int ATK_ROLE_DRAWING_AREA() {
        return (int)18L;
    }
    public static int ATK_ROLE_FILE_CHOOSER() {
        return (int)19L;
    }
    public static int ATK_ROLE_FILLER() {
        return (int)20L;
    }
    public static int ATK_ROLE_FONT_CHOOSER() {
        return (int)21L;
    }
    public static int ATK_ROLE_FRAME() {
        return (int)22L;
    }
    public static int ATK_ROLE_GLASS_PANE() {
        return (int)23L;
    }
    public static int ATK_ROLE_HTML_CONTAINER() {
        return (int)24L;
    }
    public static int ATK_ROLE_ICON() {
        return (int)25L;
    }
    public static int ATK_ROLE_IMAGE() {
        return (int)26L;
    }
    public static int ATK_ROLE_INTERNAL_FRAME() {
        return (int)27L;
    }
    public static int ATK_ROLE_LABEL() {
        return (int)28L;
    }
    public static int ATK_ROLE_LAYERED_PANE() {
        return (int)29L;
    }
    public static int ATK_ROLE_LIST() {
        return (int)30L;
    }
    public static int ATK_ROLE_LIST_ITEM() {
        return (int)31L;
    }
    public static int ATK_ROLE_MENU() {
        return (int)32L;
    }
    public static int ATK_ROLE_MENU_BAR() {
        return (int)33L;
    }
    public static int ATK_ROLE_MENU_ITEM() {
        return (int)34L;
    }
    public static int ATK_ROLE_OPTION_PANE() {
        return (int)35L;
    }
    public static int ATK_ROLE_PAGE_TAB() {
        return (int)36L;
    }
    public static int ATK_ROLE_PAGE_TAB_LIST() {
        return (int)37L;
    }
    public static int ATK_ROLE_PANEL() {
        return (int)38L;
    }
    public static int ATK_ROLE_PASSWORD_TEXT() {
        return (int)39L;
    }
    public static int ATK_ROLE_POPUP_MENU() {
        return (int)40L;
    }
    public static int ATK_ROLE_PROGRESS_BAR() {
        return (int)41L;
    }
    public static int ATK_ROLE_PUSH_BUTTON() {
        return (int)42L;
    }
    public static int ATK_ROLE_RADIO_BUTTON() {
        return (int)43L;
    }
    public static int ATK_ROLE_RADIO_MENU_ITEM() {
        return (int)44L;
    }
    public static int ATK_ROLE_ROOT_PANE() {
        return (int)45L;
    }
    public static int ATK_ROLE_ROW_HEADER() {
        return (int)46L;
    }
    public static int ATK_ROLE_SCROLL_BAR() {
        return (int)47L;
    }
    public static int ATK_ROLE_SCROLL_PANE() {
        return (int)48L;
    }
    public static int ATK_ROLE_SEPARATOR() {
        return (int)49L;
    }
    public static int ATK_ROLE_SLIDER() {
        return (int)50L;
    }
    public static int ATK_ROLE_SPLIT_PANE() {
        return (int)51L;
    }
    public static int ATK_ROLE_SPIN_BUTTON() {
        return (int)52L;
    }
    public static int ATK_ROLE_STATUSBAR() {
        return (int)53L;
    }
    public static int ATK_ROLE_TABLE() {
        return (int)54L;
    }
    public static int ATK_ROLE_TABLE_CELL() {
        return (int)55L;
    }
    public static int ATK_ROLE_TABLE_COLUMN_HEADER() {
        return (int)56L;
    }
    public static int ATK_ROLE_TABLE_ROW_HEADER() {
        return (int)57L;
    }
    public static int ATK_ROLE_TEAR_OFF_MENU_ITEM() {
        return (int)58L;
    }
    public static int ATK_ROLE_TERMINAL() {
        return (int)59L;
    }
    public static int ATK_ROLE_TEXT() {
        return (int)60L;
    }
    public static int ATK_ROLE_TOGGLE_BUTTON() {
        return (int)61L;
    }
    public static int ATK_ROLE_TOOL_BAR() {
        return (int)62L;
    }
    public static int ATK_ROLE_TOOL_TIP() {
        return (int)63L;
    }
    public static int ATK_ROLE_TREE() {
        return (int)64L;
    }
    public static int ATK_ROLE_TREE_TABLE() {
        return (int)65L;
    }
    public static int ATK_ROLE_UNKNOWN() {
        return (int)66L;
    }
    public static int ATK_ROLE_VIEWPORT() {
        return (int)67L;
    }
    public static int ATK_ROLE_WINDOW() {
        return (int)68L;
    }
    public static int ATK_ROLE_HEADER() {
        return (int)69L;
    }
    public static int ATK_ROLE_FOOTER() {
        return (int)70L;
    }
    public static int ATK_ROLE_PARAGRAPH() {
        return (int)71L;
    }
    public static int ATK_ROLE_RULER() {
        return (int)72L;
    }
    public static int ATK_ROLE_APPLICATION() {
        return (int)73L;
    }
    public static int ATK_ROLE_AUTOCOMPLETE() {
        return (int)74L;
    }
    public static int ATK_ROLE_EDITBAR() {
        return (int)75L;
    }
    public static int ATK_ROLE_EMBEDDED() {
        return (int)76L;
    }
    public static int ATK_ROLE_ENTRY() {
        return (int)77L;
    }
    public static int ATK_ROLE_CHART() {
        return (int)78L;
    }
    public static int ATK_ROLE_CAPTION() {
        return (int)79L;
    }
    public static int ATK_ROLE_DOCUMENT_FRAME() {
        return (int)80L;
    }
    public static int ATK_ROLE_HEADING() {
        return (int)81L;
    }
    public static int ATK_ROLE_PAGE() {
        return (int)82L;
    }
    public static int ATK_ROLE_SECTION() {
        return (int)83L;
    }
    public static int ATK_ROLE_REDUNDANT_OBJECT() {
        return (int)84L;
    }
    public static int ATK_ROLE_FORM() {
        return (int)85L;
    }
    public static int ATK_ROLE_LINK() {
        return (int)86L;
    }
    public static int ATK_ROLE_INPUT_METHOD_WINDOW() {
        return (int)87L;
    }
    public static int ATK_ROLE_TABLE_ROW() {
        return (int)88L;
    }
    public static int ATK_ROLE_TREE_ITEM() {
        return (int)89L;
    }
    public static int ATK_ROLE_DOCUMENT_SPREADSHEET() {
        return (int)90L;
    }
    public static int ATK_ROLE_DOCUMENT_PRESENTATION() {
        return (int)91L;
    }
    public static int ATK_ROLE_DOCUMENT_TEXT() {
        return (int)92L;
    }
    public static int ATK_ROLE_DOCUMENT_WEB() {
        return (int)93L;
    }
    public static int ATK_ROLE_DOCUMENT_EMAIL() {
        return (int)94L;
    }
    public static int ATK_ROLE_COMMENT() {
        return (int)95L;
    }
    public static int ATK_ROLE_LIST_BOX() {
        return (int)96L;
    }
    public static int ATK_ROLE_GROUPING() {
        return (int)97L;
    }
    public static int ATK_ROLE_IMAGE_MAP() {
        return (int)98L;
    }
    public static int ATK_ROLE_NOTIFICATION() {
        return (int)99L;
    }
    public static int ATK_ROLE_INFO_BAR() {
        return (int)100L;
    }
}


