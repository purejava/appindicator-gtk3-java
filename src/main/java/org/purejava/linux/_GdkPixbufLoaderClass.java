// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkPixbufLoaderClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("size_prepared"),
        Constants$root.C_POINTER$LAYOUT.withName("area_prepared"),
        Constants$root.C_POINTER$LAYOUT.withName("area_updated"),
        Constants$root.C_POINTER$LAYOUT.withName("closed")
    ).withName("_GdkPixbufLoaderClass");
    public static MemoryLayout $LAYOUT() {
        return _GdkPixbufLoaderClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor size_prepared$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle size_prepared$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufLoaderClass.size_prepared$FUNC
    );
    public interface size_prepared {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(size_prepared fi, MemorySession session) {
            return RuntimeHelper.upcallStub(size_prepared.class, fi, _GdkPixbufLoaderClass.size_prepared$FUNC, session);
        }
        static size_prepared ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    _GdkPixbufLoaderClass.size_prepared$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle size_prepared$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("size_prepared"));
    public static VarHandle size_prepared$VH() {
        return _GdkPixbufLoaderClass.size_prepared$VH;
    }
    public static MemoryAddress size_prepared$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufLoaderClass.size_prepared$VH.get(seg);
    }
    public static void size_prepared$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufLoaderClass.size_prepared$VH.set(seg, x);
    }
    public static MemoryAddress size_prepared$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufLoaderClass.size_prepared$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void size_prepared$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufLoaderClass.size_prepared$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static size_prepared size_prepared (MemorySegment segment, MemorySession session) {
        return size_prepared.ofAddress(size_prepared$get(segment), session);
    }
    static final FunctionDescriptor area_prepared$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle area_prepared$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufLoaderClass.area_prepared$FUNC
    );
    public interface area_prepared {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(area_prepared fi, MemorySession session) {
            return RuntimeHelper.upcallStub(area_prepared.class, fi, _GdkPixbufLoaderClass.area_prepared$FUNC, session);
        }
        static area_prepared ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GdkPixbufLoaderClass.area_prepared$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle area_prepared$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("area_prepared"));
    public static VarHandle area_prepared$VH() {
        return _GdkPixbufLoaderClass.area_prepared$VH;
    }
    public static MemoryAddress area_prepared$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufLoaderClass.area_prepared$VH.get(seg);
    }
    public static void area_prepared$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufLoaderClass.area_prepared$VH.set(seg, x);
    }
    public static MemoryAddress area_prepared$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufLoaderClass.area_prepared$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void area_prepared$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufLoaderClass.area_prepared$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static area_prepared area_prepared (MemorySegment segment, MemorySession session) {
        return area_prepared.ofAddress(area_prepared$get(segment), session);
    }
    static final FunctionDescriptor area_updated$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle area_updated$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufLoaderClass.area_updated$FUNC
    );
    public interface area_updated {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3, int _x4);
        static MemorySegment allocate(area_updated fi, MemorySession session) {
            return RuntimeHelper.upcallStub(area_updated.class, fi, _GdkPixbufLoaderClass.area_updated$FUNC, session);
        }
        static area_updated ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3, int __x4) -> {
                try {
                    _GdkPixbufLoaderClass.area_updated$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle area_updated$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("area_updated"));
    public static VarHandle area_updated$VH() {
        return _GdkPixbufLoaderClass.area_updated$VH;
    }
    public static MemoryAddress area_updated$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufLoaderClass.area_updated$VH.get(seg);
    }
    public static void area_updated$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufLoaderClass.area_updated$VH.set(seg, x);
    }
    public static MemoryAddress area_updated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufLoaderClass.area_updated$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void area_updated$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufLoaderClass.area_updated$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static area_updated area_updated (MemorySegment segment, MemorySession session) {
        return area_updated.ofAddress(area_updated$get(segment), session);
    }
    static final FunctionDescriptor closed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle closed$MH = RuntimeHelper.downcallHandle(
        _GdkPixbufLoaderClass.closed$FUNC
    );
    public interface closed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(closed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(closed.class, fi, _GdkPixbufLoaderClass.closed$FUNC, session);
        }
        static closed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GdkPixbufLoaderClass.closed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle closed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("closed"));
    public static VarHandle closed$VH() {
        return _GdkPixbufLoaderClass.closed$VH;
    }
    public static MemoryAddress closed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufLoaderClass.closed$VH.get(seg);
    }
    public static void closed$set( MemorySegment seg, MemoryAddress x) {
        _GdkPixbufLoaderClass.closed$VH.set(seg, x);
    }
    public static MemoryAddress closed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkPixbufLoaderClass.closed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void closed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkPixbufLoaderClass.closed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static closed closed (MemorySegment segment, MemorySession session) {
        return closed.ofAddress(closed$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


