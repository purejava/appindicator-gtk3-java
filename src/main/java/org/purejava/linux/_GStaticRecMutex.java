// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GStaticRecMutex {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_POINTER$LAYOUT.withName("mutex"),
            MemoryLayout.unionLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_INT$LAYOUT.withName("__lock"),
                    Constants$root.C_INT$LAYOUT.withName("__count"),
                    Constants$root.C_INT$LAYOUT.withName("__owner"),
                    Constants$root.C_INT$LAYOUT.withName("__nusers"),
                    Constants$root.C_INT$LAYOUT.withName("__kind"),
                    Constants$root.C_SHORT$LAYOUT.withName("__spins"),
                    Constants$root.C_SHORT$LAYOUT.withName("__elision"),
                    MemoryLayout.structLayout(
                        Constants$root.C_POINTER$LAYOUT.withName("__prev"),
                        Constants$root.C_POINTER$LAYOUT.withName("__next")
                    ).withName("__list")
                ).withName("__data"),
                MemoryLayout.sequenceLayout(40, Constants$root.C_CHAR$LAYOUT).withName("__size"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("__align")
            ).withName("unused")
        ).withName("mutex"),
        Constants$root.C_INT$LAYOUT.withName("depth"),
        MemoryLayout.paddingLayout(32),
        MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("owner"),
            Constants$root.C_DOUBLE$LAYOUT.withName("dummy")
        ).withName("unused")
    ).withName("_GStaticRecMutex");
    public static MemoryLayout $LAYOUT() {
        return _GStaticRecMutex.$struct$LAYOUT;
    }
    public static MemorySegment mutex$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    static final VarHandle depth$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("depth"));
    public static VarHandle depth$VH() {
        return _GStaticRecMutex.depth$VH;
    }
    public static int depth$get(MemorySegment seg) {
        return (int)_GStaticRecMutex.depth$VH.get(seg);
    }
    public static void depth$set( MemorySegment seg, int x) {
        _GStaticRecMutex.depth$VH.set(seg, x);
    }
    public static int depth$get(MemorySegment seg, long index) {
        return (int)_GStaticRecMutex.depth$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void depth$set(MemorySegment seg, long index, int x) {
        _GStaticRecMutex.depth$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static class unused {

        static final  GroupLayout unused$union$LAYOUT = MemoryLayout.unionLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("owner"),
            Constants$root.C_DOUBLE$LAYOUT.withName("dummy")
        );
        public static MemoryLayout $LAYOUT() {
            return unused.unused$union$LAYOUT;
        }
        static final VarHandle owner$VH = unused$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("owner"));
        public static VarHandle owner$VH() {
            return unused.owner$VH;
        }
        public static long owner$get(MemorySegment seg) {
            return (long)unused.owner$VH.get(seg);
        }
        public static void owner$set( MemorySegment seg, long x) {
            unused.owner$VH.set(seg, x);
        }
        public static long owner$get(MemorySegment seg, long index) {
            return (long)unused.owner$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void owner$set(MemorySegment seg, long index, long x) {
            unused.owner$VH.set(seg.asSlice(index*sizeof()), x);
        }
        static final VarHandle dummy$VH = unused$union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("dummy"));
        public static VarHandle dummy$VH() {
            return unused.dummy$VH;
        }
        public static double dummy$get(MemorySegment seg) {
            return (double)unused.dummy$VH.get(seg);
        }
        public static void dummy$set( MemorySegment seg, double x) {
            unused.dummy$VH.set(seg, x);
        }
        public static double dummy$get(MemorySegment seg, long index) {
            return (double)unused.dummy$VH.get(seg.asSlice(index*sizeof()));
        }
        public static void dummy$set(MemorySegment seg, long index, double x) {
            unused.dummy$VH.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment unused$slice(MemorySegment seg) {
        return seg.asSlice(56, 8);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


