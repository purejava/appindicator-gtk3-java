// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkRcStyle {
 *     GObject parent_instance;
 *     gchar* name;
 *     gchar* bg_pixmap_name[5];
 *     PangoFontDescription* font_desc;
 *     GtkRcFlags color_flags[5];
 *     GdkColor fg[5];
 *     GdkColor bg[5];
 *     GdkColor text[5];
 *     GdkColor base[5];
 *     gint xthickness;
 *     gint ythickness;
 *     GArray* rc_properties;
 *     GSList* rc_style_lists;
 *     GSList* icon_factories;
 *      *     guint engine_specified;
 * };
 * }
 */
public class _GtkRcStyle {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("g_class")
            ).withName("g_type_instance"),
            Constants$root.C_INT$LAYOUT.withName("ref_count"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("qdata")
        ).withName("parent_instance"),
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        MemoryLayout.sequenceLayout(5, Constants$root.C_POINTER$LAYOUT).withName("bg_pixmap_name"),
        Constants$root.C_POINTER$LAYOUT.withName("font_desc"),
        MemoryLayout.sequenceLayout(5, Constants$root.C_INT$LAYOUT).withName("color_flags"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("fg"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("bg"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("text"),
        MemoryLayout.sequenceLayout(5, MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("pixel"),
            Constants$root.C_SHORT$LAYOUT.withName("red"),
            Constants$root.C_SHORT$LAYOUT.withName("green"),
            Constants$root.C_SHORT$LAYOUT.withName("blue"),
            MemoryLayout.paddingLayout(16)
        ).withName("_GdkColor")).withName("base"),
        Constants$root.C_INT$LAYOUT.withName("xthickness"),
        Constants$root.C_INT$LAYOUT.withName("ythickness"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("rc_properties"),
        Constants$root.C_POINTER$LAYOUT.withName("rc_style_lists"),
        Constants$root.C_POINTER$LAYOUT.withName("icon_factories"),
        MemoryLayout.paddingLayout(64)
    ).withName("_GtkRcStyle");
    public static MemoryLayout $LAYOUT() {
        return _GtkRcStyle.$struct$LAYOUT;
    }
    public static MemorySegment parent_instance$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return _GtkRcStyle.name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gchar* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkRcStyle.name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gchar* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        _GtkRcStyle.name$VH.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkRcStyle.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkRcStyle.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment bg_pixmap_name$slice(MemorySegment seg) {
        return seg.asSlice(32, 40);
    }
    static final VarHandle font_desc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("font_desc"));
    public static VarHandle font_desc$VH() {
        return _GtkRcStyle.font_desc$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PangoFontDescription* font_desc;
     * }
     */
    public static MemorySegment font_desc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkRcStyle.font_desc$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PangoFontDescription* font_desc;
     * }
     */
    public static void font_desc$set(MemorySegment seg, MemorySegment x) {
        _GtkRcStyle.font_desc$VH.set(seg, x);
    }
    public static MemorySegment font_desc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkRcStyle.font_desc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void font_desc$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkRcStyle.font_desc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment color_flags$slice(MemorySegment seg) {
        return seg.asSlice(80, 20);
    }
    public static MemorySegment fg$slice(MemorySegment seg) {
        return seg.asSlice(100, 60);
    }
    public static MemorySegment bg$slice(MemorySegment seg) {
        return seg.asSlice(160, 60);
    }
    public static MemorySegment text$slice(MemorySegment seg) {
        return seg.asSlice(220, 60);
    }
    public static MemorySegment base$slice(MemorySegment seg) {
        return seg.asSlice(280, 60);
    }
    static final VarHandle xthickness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("xthickness"));
    public static VarHandle xthickness$VH() {
        return _GtkRcStyle.xthickness$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint xthickness;
     * }
     */
    public static int xthickness$get(MemorySegment seg) {
        return (int)_GtkRcStyle.xthickness$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint xthickness;
     * }
     */
    public static void xthickness$set(MemorySegment seg, int x) {
        _GtkRcStyle.xthickness$VH.set(seg, x);
    }
    public static int xthickness$get(MemorySegment seg, long index) {
        return (int)_GtkRcStyle.xthickness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void xthickness$set(MemorySegment seg, long index, int x) {
        _GtkRcStyle.xthickness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle ythickness$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ythickness"));
    public static VarHandle ythickness$VH() {
        return _GtkRcStyle.ythickness$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gint ythickness;
     * }
     */
    public static int ythickness$get(MemorySegment seg) {
        return (int)_GtkRcStyle.ythickness$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gint ythickness;
     * }
     */
    public static void ythickness$set(MemorySegment seg, int x) {
        _GtkRcStyle.ythickness$VH.set(seg, x);
    }
    public static int ythickness$get(MemorySegment seg, long index) {
        return (int)_GtkRcStyle.ythickness$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ythickness$set(MemorySegment seg, long index, int x) {
        _GtkRcStyle.ythickness$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rc_properties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rc_properties"));
    public static VarHandle rc_properties$VH() {
        return _GtkRcStyle.rc_properties$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GArray* rc_properties;
     * }
     */
    public static MemorySegment rc_properties$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkRcStyle.rc_properties$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GArray* rc_properties;
     * }
     */
    public static void rc_properties$set(MemorySegment seg, MemorySegment x) {
        _GtkRcStyle.rc_properties$VH.set(seg, x);
    }
    public static MemorySegment rc_properties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkRcStyle.rc_properties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_properties$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkRcStyle.rc_properties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle rc_style_lists$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("rc_style_lists"));
    public static VarHandle rc_style_lists$VH() {
        return _GtkRcStyle.rc_style_lists$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GSList* rc_style_lists;
     * }
     */
    public static MemorySegment rc_style_lists$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkRcStyle.rc_style_lists$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GSList* rc_style_lists;
     * }
     */
    public static void rc_style_lists$set(MemorySegment seg, MemorySegment x) {
        _GtkRcStyle.rc_style_lists$VH.set(seg, x);
    }
    public static MemorySegment rc_style_lists$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkRcStyle.rc_style_lists$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void rc_style_lists$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkRcStyle.rc_style_lists$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle icon_factories$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("icon_factories"));
    public static VarHandle icon_factories$VH() {
        return _GtkRcStyle.icon_factories$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GSList* icon_factories;
     * }
     */
    public static MemorySegment icon_factories$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkRcStyle.icon_factories$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GSList* icon_factories;
     * }
     */
    public static void icon_factories$set(MemorySegment seg, MemorySegment x) {
        _GtkRcStyle.icon_factories$VH.set(seg, x);
    }
    public static MemorySegment icon_factories$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkRcStyle.icon_factories$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void icon_factories$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkRcStyle.icon_factories$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


