// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkTextBufferDeserializeFunc {

    int apply(java.lang.foreign.MemoryAddress register_buffer, java.lang.foreign.MemoryAddress content_buffer, java.lang.foreign.MemoryAddress iter, java.lang.foreign.MemoryAddress data, long length, int create_tags, java.lang.foreign.MemoryAddress user_data, java.lang.foreign.MemoryAddress error);
    static MemorySegment allocate(GtkTextBufferDeserializeFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkTextBufferDeserializeFunc.class, fi, constants$2034.GtkTextBufferDeserializeFunc$FUNC, session);
    }
    static GtkTextBufferDeserializeFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _register_buffer, java.lang.foreign.MemoryAddress _content_buffer, java.lang.foreign.MemoryAddress _iter, java.lang.foreign.MemoryAddress _data, long _length, int _create_tags, java.lang.foreign.MemoryAddress _user_data, java.lang.foreign.MemoryAddress _error) -> {
            try {
                return (int)constants$2034.GtkTextBufferDeserializeFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_register_buffer, (java.lang.foreign.Addressable)_content_buffer, (java.lang.foreign.Addressable)_iter, (java.lang.foreign.Addressable)_data, _length, _create_tags, (java.lang.foreign.Addressable)_user_data, (java.lang.foreign.Addressable)_error);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


