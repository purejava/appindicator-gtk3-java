// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GResolverClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("reload"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_by_name"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_by_name_async"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_by_name_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_by_address"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_by_address_async"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_by_address_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_service"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_service_async"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_service_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_records"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_records_async"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_records_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_by_name_with_flags_async"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_by_name_with_flags_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("lookup_by_name_with_flags")
    ).withName("_GResolverClass");
    public static MemoryLayout $LAYOUT() {
        return _GResolverClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor reload$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle reload$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.reload$FUNC
    );
    public interface reload {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(reload fi, MemorySession session) {
            return RuntimeHelper.upcallStub(reload.class, fi, _GResolverClass.reload$FUNC, session);
        }
        static reload ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GResolverClass.reload$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle reload$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reload"));
    public static VarHandle reload$VH() {
        return _GResolverClass.reload$VH;
    }
    public static MemoryAddress reload$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.reload$VH.get(seg);
    }
    public static void reload$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.reload$VH.set(seg, x);
    }
    public static MemoryAddress reload$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.reload$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reload$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.reload$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static reload reload (MemorySegment segment, MemorySession session) {
        return reload.ofAddress(reload$get(segment), session);
    }
    static final FunctionDescriptor lookup_by_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_by_name$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_by_name$FUNC
    );
    public interface lookup_by_name {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(lookup_by_name fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_by_name.class, fi, _GResolverClass.lookup_by_name$FUNC, session);
        }
        static lookup_by_name ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_by_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_by_name"));
    public static VarHandle lookup_by_name$VH() {
        return _GResolverClass.lookup_by_name$VH;
    }
    public static MemoryAddress lookup_by_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name$VH.get(seg);
    }
    public static void lookup_by_name$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_by_name$VH.set(seg, x);
    }
    public static MemoryAddress lookup_by_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_by_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name lookup_by_name (MemorySegment segment, MemorySession session) {
        return lookup_by_name.ofAddress(lookup_by_name$get(segment), session);
    }
    static final FunctionDescriptor lookup_by_name_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_by_name_async$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_by_name_async$FUNC
    );
    public interface lookup_by_name_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(lookup_by_name_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_by_name_async.class, fi, _GResolverClass.lookup_by_name_async$FUNC, session);
        }
        static lookup_by_name_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GResolverClass.lookup_by_name_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_by_name_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_by_name_async"));
    public static VarHandle lookup_by_name_async$VH() {
        return _GResolverClass.lookup_by_name_async$VH;
    }
    public static MemoryAddress lookup_by_name_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_async$VH.get(seg);
    }
    public static void lookup_by_name_async$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_by_name_async$VH.set(seg, x);
    }
    public static MemoryAddress lookup_by_name_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_by_name_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name_async lookup_by_name_async (MemorySegment segment, MemorySession session) {
        return lookup_by_name_async.ofAddress(lookup_by_name_async$get(segment), session);
    }
    static final FunctionDescriptor lookup_by_name_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_by_name_finish$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_by_name_finish$FUNC
    );
    public interface lookup_by_name_finish {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(lookup_by_name_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_by_name_finish.class, fi, _GResolverClass.lookup_by_name_finish$FUNC, session);
        }
        static lookup_by_name_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_by_name_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_by_name_finish"));
    public static VarHandle lookup_by_name_finish$VH() {
        return _GResolverClass.lookup_by_name_finish$VH;
    }
    public static MemoryAddress lookup_by_name_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_finish$VH.get(seg);
    }
    public static void lookup_by_name_finish$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_by_name_finish$VH.set(seg, x);
    }
    public static MemoryAddress lookup_by_name_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_by_name_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name_finish lookup_by_name_finish (MemorySegment segment, MemorySession session) {
        return lookup_by_name_finish.ofAddress(lookup_by_name_finish$get(segment), session);
    }
    static final FunctionDescriptor lookup_by_address$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_by_address$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_by_address$FUNC
    );
    public interface lookup_by_address {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(lookup_by_address fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_by_address.class, fi, _GResolverClass.lookup_by_address$FUNC, session);
        }
        static lookup_by_address ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_address$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_by_address$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_by_address"));
    public static VarHandle lookup_by_address$VH() {
        return _GResolverClass.lookup_by_address$VH;
    }
    public static MemoryAddress lookup_by_address$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_address$VH.get(seg);
    }
    public static void lookup_by_address$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_by_address$VH.set(seg, x);
    }
    public static MemoryAddress lookup_by_address$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_address$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_address$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_by_address$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_address lookup_by_address (MemorySegment segment, MemorySession session) {
        return lookup_by_address.ofAddress(lookup_by_address$get(segment), session);
    }
    static final FunctionDescriptor lookup_by_address_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_by_address_async$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_by_address_async$FUNC
    );
    public interface lookup_by_address_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(lookup_by_address_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_by_address_async.class, fi, _GResolverClass.lookup_by_address_async$FUNC, session);
        }
        static lookup_by_address_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GResolverClass.lookup_by_address_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_by_address_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_by_address_async"));
    public static VarHandle lookup_by_address_async$VH() {
        return _GResolverClass.lookup_by_address_async$VH;
    }
    public static MemoryAddress lookup_by_address_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_address_async$VH.get(seg);
    }
    public static void lookup_by_address_async$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_by_address_async$VH.set(seg, x);
    }
    public static MemoryAddress lookup_by_address_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_address_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_address_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_by_address_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_address_async lookup_by_address_async (MemorySegment segment, MemorySession session) {
        return lookup_by_address_async.ofAddress(lookup_by_address_async$get(segment), session);
    }
    static final FunctionDescriptor lookup_by_address_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_by_address_finish$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_by_address_finish$FUNC
    );
    public interface lookup_by_address_finish {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(lookup_by_address_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_by_address_finish.class, fi, _GResolverClass.lookup_by_address_finish$FUNC, session);
        }
        static lookup_by_address_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_address_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_by_address_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_by_address_finish"));
    public static VarHandle lookup_by_address_finish$VH() {
        return _GResolverClass.lookup_by_address_finish$VH;
    }
    public static MemoryAddress lookup_by_address_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_address_finish$VH.get(seg);
    }
    public static void lookup_by_address_finish$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_by_address_finish$VH.set(seg, x);
    }
    public static MemoryAddress lookup_by_address_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_address_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_address_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_by_address_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_address_finish lookup_by_address_finish (MemorySegment segment, MemorySession session) {
        return lookup_by_address_finish.ofAddress(lookup_by_address_finish$get(segment), session);
    }
    static final FunctionDescriptor lookup_service$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_service$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_service$FUNC
    );
    public interface lookup_service {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(lookup_service fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_service.class, fi, _GResolverClass.lookup_service$FUNC, session);
        }
        static lookup_service ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GResolverClass.lookup_service$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_service$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_service"));
    public static VarHandle lookup_service$VH() {
        return _GResolverClass.lookup_service$VH;
    }
    public static MemoryAddress lookup_service$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_service$VH.get(seg);
    }
    public static void lookup_service$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_service$VH.set(seg, x);
    }
    public static MemoryAddress lookup_service$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_service$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_service$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_service$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_service lookup_service (MemorySegment segment, MemorySession session) {
        return lookup_service.ofAddress(lookup_service$get(segment), session);
    }
    static final FunctionDescriptor lookup_service_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_service_async$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_service_async$FUNC
    );
    public interface lookup_service_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(lookup_service_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_service_async.class, fi, _GResolverClass.lookup_service_async$FUNC, session);
        }
        static lookup_service_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GResolverClass.lookup_service_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_service_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_service_async"));
    public static VarHandle lookup_service_async$VH() {
        return _GResolverClass.lookup_service_async$VH;
    }
    public static MemoryAddress lookup_service_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_service_async$VH.get(seg);
    }
    public static void lookup_service_async$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_service_async$VH.set(seg, x);
    }
    public static MemoryAddress lookup_service_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_service_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_service_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_service_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_service_async lookup_service_async (MemorySegment segment, MemorySession session) {
        return lookup_service_async.ofAddress(lookup_service_async$get(segment), session);
    }
    static final FunctionDescriptor lookup_service_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_service_finish$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_service_finish$FUNC
    );
    public interface lookup_service_finish {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(lookup_service_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_service_finish.class, fi, _GResolverClass.lookup_service_finish$FUNC, session);
        }
        static lookup_service_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GResolverClass.lookup_service_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_service_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_service_finish"));
    public static VarHandle lookup_service_finish$VH() {
        return _GResolverClass.lookup_service_finish$VH;
    }
    public static MemoryAddress lookup_service_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_service_finish$VH.get(seg);
    }
    public static void lookup_service_finish$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_service_finish$VH.set(seg, x);
    }
    public static MemoryAddress lookup_service_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_service_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_service_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_service_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_service_finish lookup_service_finish (MemorySegment segment, MemorySession session) {
        return lookup_service_finish.ofAddress(lookup_service_finish$get(segment), session);
    }
    static final FunctionDescriptor lookup_records$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_records$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_records$FUNC
    );
    public interface lookup_records {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(lookup_records fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_records.class, fi, _GResolverClass.lookup_records$FUNC, session);
        }
        static lookup_records ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GResolverClass.lookup_records$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_records$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_records"));
    public static VarHandle lookup_records$VH() {
        return _GResolverClass.lookup_records$VH;
    }
    public static MemoryAddress lookup_records$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_records$VH.get(seg);
    }
    public static void lookup_records$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_records$VH.set(seg, x);
    }
    public static MemoryAddress lookup_records$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_records$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_records$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_records$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_records lookup_records (MemorySegment segment, MemorySession session) {
        return lookup_records.ofAddress(lookup_records$get(segment), session);
    }
    static final FunctionDescriptor lookup_records_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_records_async$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_records_async$FUNC
    );
    public interface lookup_records_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(lookup_records_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_records_async.class, fi, _GResolverClass.lookup_records_async$FUNC, session);
        }
        static lookup_records_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    _GResolverClass.lookup_records_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_records_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_records_async"));
    public static VarHandle lookup_records_async$VH() {
        return _GResolverClass.lookup_records_async$VH;
    }
    public static MemoryAddress lookup_records_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_records_async$VH.get(seg);
    }
    public static void lookup_records_async$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_records_async$VH.set(seg, x);
    }
    public static MemoryAddress lookup_records_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_records_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_records_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_records_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_records_async lookup_records_async (MemorySegment segment, MemorySession session) {
        return lookup_records_async.ofAddress(lookup_records_async$get(segment), session);
    }
    static final FunctionDescriptor lookup_records_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_records_finish$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_records_finish$FUNC
    );
    public interface lookup_records_finish {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(lookup_records_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_records_finish.class, fi, _GResolverClass.lookup_records_finish$FUNC, session);
        }
        static lookup_records_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GResolverClass.lookup_records_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_records_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_records_finish"));
    public static VarHandle lookup_records_finish$VH() {
        return _GResolverClass.lookup_records_finish$VH;
    }
    public static MemoryAddress lookup_records_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_records_finish$VH.get(seg);
    }
    public static void lookup_records_finish$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_records_finish$VH.set(seg, x);
    }
    public static MemoryAddress lookup_records_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_records_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_records_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_records_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_records_finish lookup_records_finish (MemorySegment segment, MemorySession session) {
        return lookup_records_finish.ofAddress(lookup_records_finish$get(segment), session);
    }
    static final FunctionDescriptor lookup_by_name_with_flags_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_by_name_with_flags_async$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_by_name_with_flags_async$FUNC
    );
    public interface lookup_by_name_with_flags_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(lookup_by_name_with_flags_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_by_name_with_flags_async.class, fi, _GResolverClass.lookup_by_name_with_flags_async$FUNC, session);
        }
        static lookup_by_name_with_flags_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    _GResolverClass.lookup_by_name_with_flags_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_by_name_with_flags_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_by_name_with_flags_async"));
    public static VarHandle lookup_by_name_with_flags_async$VH() {
        return _GResolverClass.lookup_by_name_with_flags_async$VH;
    }
    public static MemoryAddress lookup_by_name_with_flags_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_with_flags_async$VH.get(seg);
    }
    public static void lookup_by_name_with_flags_async$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_by_name_with_flags_async$VH.set(seg, x);
    }
    public static MemoryAddress lookup_by_name_with_flags_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_with_flags_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name_with_flags_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_by_name_with_flags_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name_with_flags_async lookup_by_name_with_flags_async (MemorySegment segment, MemorySession session) {
        return lookup_by_name_with_flags_async.ofAddress(lookup_by_name_with_flags_async$get(segment), session);
    }
    static final FunctionDescriptor lookup_by_name_with_flags_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_by_name_with_flags_finish$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_by_name_with_flags_finish$FUNC
    );
    public interface lookup_by_name_with_flags_finish {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(lookup_by_name_with_flags_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_by_name_with_flags_finish.class, fi, _GResolverClass.lookup_by_name_with_flags_finish$FUNC, session);
        }
        static lookup_by_name_with_flags_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_with_flags_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_by_name_with_flags_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_by_name_with_flags_finish"));
    public static VarHandle lookup_by_name_with_flags_finish$VH() {
        return _GResolverClass.lookup_by_name_with_flags_finish$VH;
    }
    public static MemoryAddress lookup_by_name_with_flags_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_with_flags_finish$VH.get(seg);
    }
    public static void lookup_by_name_with_flags_finish$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_by_name_with_flags_finish$VH.set(seg, x);
    }
    public static MemoryAddress lookup_by_name_with_flags_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_with_flags_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name_with_flags_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_by_name_with_flags_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name_with_flags_finish lookup_by_name_with_flags_finish (MemorySegment segment, MemorySession session) {
        return lookup_by_name_with_flags_finish.ofAddress(lookup_by_name_with_flags_finish$get(segment), session);
    }
    static final FunctionDescriptor lookup_by_name_with_flags$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle lookup_by_name_with_flags$MH = RuntimeHelper.downcallHandle(
        _GResolverClass.lookup_by_name_with_flags$FUNC
    );
    public interface lookup_by_name_with_flags {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(lookup_by_name_with_flags fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lookup_by_name_with_flags.class, fi, _GResolverClass.lookup_by_name_with_flags$FUNC, session);
        }
        static lookup_by_name_with_flags ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_with_flags$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lookup_by_name_with_flags$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lookup_by_name_with_flags"));
    public static VarHandle lookup_by_name_with_flags$VH() {
        return _GResolverClass.lookup_by_name_with_flags$VH;
    }
    public static MemoryAddress lookup_by_name_with_flags$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_with_flags$VH.get(seg);
    }
    public static void lookup_by_name_with_flags$set( MemorySegment seg, MemoryAddress x) {
        _GResolverClass.lookup_by_name_with_flags$VH.set(seg, x);
    }
    public static MemoryAddress lookup_by_name_with_flags$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GResolverClass.lookup_by_name_with_flags$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lookup_by_name_with_flags$set(MemorySegment seg, long index, MemoryAddress x) {
        _GResolverClass.lookup_by_name_with_flags$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lookup_by_name_with_flags lookup_by_name_with_flags (MemorySegment segment, MemorySession session) {
        return lookup_by_name_with_flags.ofAddress(lookup_by_name_with_flags$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


