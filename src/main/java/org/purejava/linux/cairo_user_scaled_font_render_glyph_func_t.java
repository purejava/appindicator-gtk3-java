// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface cairo_user_scaled_font_render_glyph_func_t {

    int apply(java.lang.foreign.MemoryAddress scaled_font, long glyph, java.lang.foreign.MemoryAddress cr, java.lang.foreign.MemoryAddress extents);
    static MemorySegment allocate(cairo_user_scaled_font_render_glyph_func_t fi, MemorySession session) {
        return RuntimeHelper.upcallStub(cairo_user_scaled_font_render_glyph_func_t.class, fi, constants$1178.cairo_user_scaled_font_render_glyph_func_t$FUNC, session);
    }
    static cairo_user_scaled_font_render_glyph_func_t ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _scaled_font, long _glyph, java.lang.foreign.MemoryAddress _cr, java.lang.foreign.MemoryAddress _extents) -> {
            try {
                return (int)constants$1179.cairo_user_scaled_font_render_glyph_func_t$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_scaled_font, _glyph, (java.lang.foreign.Addressable)_cr, (java.lang.foreign.Addressable)_extents);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


