// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * char* (*GtkCalendarDetailFunc)(struct _GtkCalendar* calendar,unsigned int year,unsigned int month,unsigned int day,void* user_data);
 * }
 */
public interface GtkCalendarDetailFunc {

    java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment calendar, int year, int month, int day, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(GtkCalendarDetailFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$1514.GtkCalendarDetailFunc_UP$MH, fi, constants$1514.GtkCalendarDetailFunc$FUNC, scope);
    }
    static GtkCalendarDetailFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _calendar, int _year, int _month, int _day, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                return (java.lang.foreign.MemorySegment)constants$1514.GtkCalendarDetailFunc_DOWN$MH.invokeExact(symbol, _calendar, _year, _month, _day, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


