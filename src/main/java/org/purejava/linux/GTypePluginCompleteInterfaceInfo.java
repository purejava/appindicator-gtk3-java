// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GTypePluginCompleteInterfaceInfo {

    void apply(java.lang.foreign.MemoryAddress plugin, long instance_type, long interface_type, java.lang.foreign.MemoryAddress info);
    static MemorySegment allocate(GTypePluginCompleteInterfaceInfo fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GTypePluginCompleteInterfaceInfo.class, fi, constants$499.GTypePluginCompleteInterfaceInfo$FUNC, session);
    }
    static GTypePluginCompleteInterfaceInfo ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _plugin, long _instance_type, long _interface_type, java.lang.foreign.MemoryAddress _info) -> {
            try {
                constants$499.GTypePluginCompleteInterfaceInfo$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_plugin, _instance_type, _interface_type, (java.lang.foreign.Addressable)_info);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


