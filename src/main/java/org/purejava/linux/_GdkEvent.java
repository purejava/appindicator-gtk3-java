// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkEvent {

    static final  GroupLayout $union$LAYOUT = MemoryLayout.unionLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(56)
        ).withName("any"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            MemoryLayout.structLayout(
                Constants$root.C_INT$LAYOUT.withName("x"),
                Constants$root.C_INT$LAYOUT.withName("y"),
                Constants$root.C_INT$LAYOUT.withName("width"),
                Constants$root.C_INT$LAYOUT.withName("height")
            ).withName("area"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("region"),
            Constants$root.C_INT$LAYOUT.withName("count"),
            MemoryLayout.paddingLayout(32)
        ).withName("expose"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("state")
        ).withName("visibility"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y"),
            Constants$root.C_POINTER$LAYOUT.withName("axes"),
            Constants$root.C_INT$LAYOUT.withName("state"),
            Constants$root.C_SHORT$LAYOUT.withName("is_hint"),
            MemoryLayout.paddingLayout(16),
            Constants$root.C_POINTER$LAYOUT.withName("device"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x_root"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y_root")
        ).withName("motion"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y"),
            Constants$root.C_POINTER$LAYOUT.withName("axes"),
            Constants$root.C_INT$LAYOUT.withName("state"),
            Constants$root.C_INT$LAYOUT.withName("button"),
            Constants$root.C_POINTER$LAYOUT.withName("device"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x_root"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y_root")
        ).withName("button"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y"),
            Constants$root.C_POINTER$LAYOUT.withName("axes"),
            Constants$root.C_INT$LAYOUT.withName("state"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("sequence"),
            Constants$root.C_INT$LAYOUT.withName("emulating_pointer"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("device"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x_root"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y_root")
        ).withName("touch"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y"),
            Constants$root.C_INT$LAYOUT.withName("state"),
            Constants$root.C_INT$LAYOUT.withName("direction"),
            Constants$root.C_POINTER$LAYOUT.withName("device"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x_root"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y_root"),
            Constants$root.C_DOUBLE$LAYOUT.withName("delta_x"),
            Constants$root.C_DOUBLE$LAYOUT.withName("delta_y"),
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(1).withName("is_stop"),
                MemoryLayout.paddingLayout(63)
            )
        ).withName("scroll"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_INT$LAYOUT.withName("state"),
            Constants$root.C_INT$LAYOUT.withName("keyval"),
            Constants$root.C_INT$LAYOUT.withName("length"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("string"),
            Constants$root.C_SHORT$LAYOUT.withName("hardware_keycode"),
            Constants$root.C_CHAR$LAYOUT.withName("group"),
            MemoryLayout.structLayout(
                MemoryLayout.paddingLayout(1).withName("is_modifier"),
                MemoryLayout.paddingLayout(39)
            )
        ).withName("key"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(56),
            Constants$root.C_POINTER$LAYOUT.withName("subwindow"),
            Constants$root.C_INT$LAYOUT.withName("time"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_DOUBLE$LAYOUT.withName("x"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x_root"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y_root"),
            Constants$root.C_INT$LAYOUT.withName("mode"),
            Constants$root.C_INT$LAYOUT.withName("detail"),
            Constants$root.C_INT$LAYOUT.withName("focus"),
            Constants$root.C_INT$LAYOUT.withName("state")
        ).withName("crossing"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(8),
            Constants$root.C_SHORT$LAYOUT.withName("in"),
            MemoryLayout.paddingLayout(32)
        ).withName("focus_change"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("x"),
            Constants$root.C_INT$LAYOUT.withName("y"),
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height"),
            MemoryLayout.paddingLayout(32)
        ).withName("configure"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(56),
            Constants$root.C_POINTER$LAYOUT.withName("atom"),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_INT$LAYOUT.withName("state")
        ).withName("property"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(56),
            Constants$root.C_POINTER$LAYOUT.withName("selection"),
            Constants$root.C_POINTER$LAYOUT.withName("target"),
            Constants$root.C_POINTER$LAYOUT.withName("property"),
            Constants$root.C_INT$LAYOUT.withName("time"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("requestor")
        ).withName("selection"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(56),
            Constants$root.C_POINTER$LAYOUT.withName("owner"),
            Constants$root.C_INT$LAYOUT.withName("reason"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("selection"),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_INT$LAYOUT.withName("selection_time")
        ).withName("owner_change"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_POINTER$LAYOUT.withName("device")
        ).withName("proximity"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(56),
            Constants$root.C_POINTER$LAYOUT.withName("context"),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_SHORT$LAYOUT.withName("x_root"),
            Constants$root.C_SHORT$LAYOUT.withName("y_root")
        ).withName("dnd"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("changed_mask"),
            Constants$root.C_INT$LAYOUT.withName("new_window_state"),
            MemoryLayout.paddingLayout(32)
        ).withName("window_state"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("action"),
            Constants$root.C_POINTER$LAYOUT.withName("name")
        ).withName("setting"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("keyboard"),
            Constants$root.C_INT$LAYOUT.withName("implicit"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("grab_window")
        ).withName("grab_broken"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            Constants$root.C_CHAR$LAYOUT.withName("phase"),
            Constants$root.C_CHAR$LAYOUT.withName("n_fingers"),
            MemoryLayout.paddingLayout(8),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y"),
            Constants$root.C_DOUBLE$LAYOUT.withName("dx"),
            Constants$root.C_DOUBLE$LAYOUT.withName("dy"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x_root"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y_root"),
            Constants$root.C_INT$LAYOUT.withName("state"),
            MemoryLayout.paddingLayout(32)
        ).withName("touchpad_swipe"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            Constants$root.C_CHAR$LAYOUT.withName("phase"),
            Constants$root.C_CHAR$LAYOUT.withName("n_fingers"),
            MemoryLayout.paddingLayout(8),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y"),
            Constants$root.C_DOUBLE$LAYOUT.withName("dx"),
            Constants$root.C_DOUBLE$LAYOUT.withName("dy"),
            Constants$root.C_DOUBLE$LAYOUT.withName("angle_delta"),
            Constants$root.C_DOUBLE$LAYOUT.withName("scale"),
            Constants$root.C_DOUBLE$LAYOUT.withName("x_root"),
            Constants$root.C_DOUBLE$LAYOUT.withName("y_root"),
            Constants$root.C_INT$LAYOUT.withName("state"),
            MemoryLayout.paddingLayout(32)
        ).withName("touchpad_pinch"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_INT$LAYOUT.withName("group"),
            Constants$root.C_INT$LAYOUT.withName("button"),
            Constants$root.C_INT$LAYOUT.withName("mode"),
            MemoryLayout.paddingLayout(32)
        ).withName("pad_button"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_INT$LAYOUT.withName("group"),
            Constants$root.C_INT$LAYOUT.withName("index"),
            Constants$root.C_INT$LAYOUT.withName("mode"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_DOUBLE$LAYOUT.withName("value")
        ).withName("pad_axis"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("type"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("window"),
            Constants$root.C_CHAR$LAYOUT.withName("send_event"),
            MemoryLayout.paddingLayout(24),
            Constants$root.C_INT$LAYOUT.withName("time"),
            Constants$root.C_INT$LAYOUT.withName("group"),
            Constants$root.C_INT$LAYOUT.withName("mode")
        ).withName("pad_group_mode")
    ).withName("_GdkEvent");
    public static MemoryLayout $LAYOUT() {
        return _GdkEvent.$union$LAYOUT;
    }
    static final VarHandle type$VH = $union$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _GdkEvent.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)_GdkEvent.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        _GdkEvent.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)_GdkEvent.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        _GdkEvent.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment any$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment expose$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment visibility$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment motion$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    public static MemorySegment button$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    public static MemorySegment touch$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment scroll$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment key$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment crossing$slice(MemorySegment seg) {
        return seg.asSlice(0, 88);
    }
    public static MemorySegment focus_change$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static MemorySegment configure$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment property$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment selection$slice(MemorySegment seg) {
        return seg.asSlice(0, 64);
    }
    public static MemorySegment owner_change$slice(MemorySegment seg) {
        return seg.asSlice(0, 56);
    }
    public static MemorySegment proximity$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static MemorySegment dnd$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment window_state$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static MemorySegment setting$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static MemorySegment grab_broken$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment touchpad_swipe$slice(MemorySegment seg) {
        return seg.asSlice(0, 80);
    }
    public static MemorySegment touchpad_pinch$slice(MemorySegment seg) {
        return seg.asSlice(0, 96);
    }
    public static MemorySegment pad_button$slice(MemorySegment seg) {
        return seg.asSlice(0, 40);
    }
    public static MemorySegment pad_axis$slice(MemorySegment seg) {
        return seg.asSlice(0, 48);
    }
    public static MemorySegment pad_group_mode$slice(MemorySegment seg) {
        return seg.asSlice(0, 32);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


