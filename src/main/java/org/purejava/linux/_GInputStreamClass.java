// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GInputStreamClass {
 *     GObjectClass parent_class;
 *     gssize (*read_fn)(GInputStream*,void*,gsize,GCancellable*,GError**);
 *     gssize (*skip)(GInputStream*,gsize,GCancellable*,GError**);
 *     gboolean (*close_fn)(GInputStream*,GCancellable*,GError**);
 *     void (*read_async)(GInputStream*,void*,gsize,int,GCancellable*,GAsyncReadyCallback,gpointer);
 *     gssize (*read_finish)(GInputStream*,GAsyncResult*,GError**);
 *     void (*skip_async)(GInputStream*,gsize,int,GCancellable*,GAsyncReadyCallback,gpointer);
 *     gssize (*skip_finish)(GInputStream*,GAsyncResult*,GError**);
 *     void (*close_async)(GInputStream*,int,GCancellable*,GAsyncReadyCallback,gpointer);
 *     gboolean (*close_finish)(GInputStream*,GAsyncResult*,GError**);
 *     void (*_g_reserved1)();
 *     void (*_g_reserved2)();
 *     void (*_g_reserved3)();
 *     void (*_g_reserved4)();
 *     void (*_g_reserved5)();
 * };
 * }
 */
public class _GInputStreamClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("read_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("skip"),
        Constants$root.C_POINTER$LAYOUT.withName("close_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("read_async"),
        Constants$root.C_POINTER$LAYOUT.withName("read_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("skip_async"),
        Constants$root.C_POINTER$LAYOUT.withName("skip_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("close_async"),
        Constants$root.C_POINTER$LAYOUT.withName("close_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved5")
    ).withName("_GInputStreamClass");
    public static MemoryLayout $LAYOUT() {
        return _GInputStreamClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor read_fn$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor read_fn_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_fn_UP$MH = RuntimeHelper.upcallHandle(read_fn.class, "apply", _GInputStreamClass.read_fn_UP$FUNC);
    static final FunctionDescriptor read_fn_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_fn_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass.read_fn_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gssize (*read_fn)(GInputStream*,void*,gsize,GCancellable*,GError**);
     * }
     */
    public interface read_fn {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(read_fn fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass.read_fn_UP$MH, fi, _GInputStreamClass.read_fn$FUNC, scope);
        }
        static read_fn ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (long)_GInputStreamClass.read_fn_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_fn"));
    public static VarHandle read_fn$VH() {
        return _GInputStreamClass.read_fn$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gssize (*read_fn)(GInputStream*,void*,gsize,GCancellable*,GError**);
     * }
     */
    public static MemorySegment read_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.read_fn$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gssize (*read_fn)(GInputStream*,void*,gsize,GCancellable*,GError**);
     * }
     */
    public static void read_fn$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass.read_fn$VH.set(seg, x);
    }
    public static MemorySegment read_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.read_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_fn$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass.read_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_fn read_fn(MemorySegment segment, SegmentScope scope) {
        return read_fn.ofAddress(read_fn$get(segment), scope);
    }
    static final FunctionDescriptor skip$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor skip_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle skip_UP$MH = RuntimeHelper.upcallHandle(skip.class, "apply", _GInputStreamClass.skip_UP$FUNC);
    static final FunctionDescriptor skip_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle skip_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass.skip_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gssize (*skip)(GInputStream*,gsize,GCancellable*,GError**);
     * }
     */
    public interface skip {

        long apply(java.lang.foreign.MemorySegment _x0, long _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(skip fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass.skip_UP$MH, fi, _GInputStreamClass.skip$FUNC, scope);
        }
        static skip ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, long __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (long)_GInputStreamClass.skip_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle skip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("skip"));
    public static VarHandle skip$VH() {
        return _GInputStreamClass.skip$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gssize (*skip)(GInputStream*,gsize,GCancellable*,GError**);
     * }
     */
    public static MemorySegment skip$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.skip$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gssize (*skip)(GInputStream*,gsize,GCancellable*,GError**);
     * }
     */
    public static void skip$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass.skip$VH.set(seg, x);
    }
    public static MemorySegment skip$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.skip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void skip$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass.skip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static skip skip(MemorySegment segment, SegmentScope scope) {
        return skip.ofAddress(skip$get(segment), scope);
    }
    static final FunctionDescriptor close_fn$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor close_fn_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle close_fn_UP$MH = RuntimeHelper.upcallHandle(close_fn.class, "apply", _GInputStreamClass.close_fn_UP$FUNC);
    static final FunctionDescriptor close_fn_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle close_fn_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass.close_fn_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*close_fn)(GInputStream*,GCancellable*,GError**);
     * }
     */
    public interface close_fn {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(close_fn fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass.close_fn_UP$MH, fi, _GInputStreamClass.close_fn$FUNC, scope);
        }
        static close_fn ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)_GInputStreamClass.close_fn_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle close_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("close_fn"));
    public static VarHandle close_fn$VH() {
        return _GInputStreamClass.close_fn$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*close_fn)(GInputStream*,GCancellable*,GError**);
     * }
     */
    public static MemorySegment close_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.close_fn$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*close_fn)(GInputStream*,GCancellable*,GError**);
     * }
     */
    public static void close_fn$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass.close_fn$VH.set(seg, x);
    }
    public static MemorySegment close_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.close_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close_fn$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass.close_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static close_fn close_fn(MemorySegment segment, SegmentScope scope) {
        return close_fn.ofAddress(close_fn$get(segment), scope);
    }
    static final FunctionDescriptor read_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor read_async_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_async_UP$MH = RuntimeHelper.upcallHandle(read_async.class, "apply", _GInputStreamClass.read_async_UP$FUNC);
    static final FunctionDescriptor read_async_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_async_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass.read_async_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*read_async)(GInputStream*,void*,gsize,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public interface read_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, java.lang.foreign.MemorySegment _x6);
        static MemorySegment allocate(read_async fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass.read_async_UP$MH, fi, _GInputStreamClass.read_async$FUNC, scope);
        }
        static read_async ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, java.lang.foreign.MemorySegment __x6) -> {
                try {
                    _GInputStreamClass.read_async_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_async"));
    public static VarHandle read_async$VH() {
        return _GInputStreamClass.read_async$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*read_async)(GInputStream*,void*,gsize,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public static MemorySegment read_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.read_async$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*read_async)(GInputStream*,void*,gsize,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public static void read_async$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass.read_async$VH.set(seg, x);
    }
    public static MemorySegment read_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.read_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_async$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass.read_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_async read_async(MemorySegment segment, SegmentScope scope) {
        return read_async.ofAddress(read_async$get(segment), scope);
    }
    static final FunctionDescriptor read_finish$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor read_finish_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_finish_UP$MH = RuntimeHelper.upcallHandle(read_finish.class, "apply", _GInputStreamClass.read_finish_UP$FUNC);
    static final FunctionDescriptor read_finish_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle read_finish_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass.read_finish_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gssize (*read_finish)(GInputStream*,GAsyncResult*,GError**);
     * }
     */
    public interface read_finish {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(read_finish fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass.read_finish_UP$MH, fi, _GInputStreamClass.read_finish$FUNC, scope);
        }
        static read_finish ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (long)_GInputStreamClass.read_finish_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle read_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("read_finish"));
    public static VarHandle read_finish$VH() {
        return _GInputStreamClass.read_finish$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gssize (*read_finish)(GInputStream*,GAsyncResult*,GError**);
     * }
     */
    public static MemorySegment read_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.read_finish$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gssize (*read_finish)(GInputStream*,GAsyncResult*,GError**);
     * }
     */
    public static void read_finish$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass.read_finish$VH.set(seg, x);
    }
    public static MemorySegment read_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.read_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void read_finish$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass.read_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static read_finish read_finish(MemorySegment segment, SegmentScope scope) {
        return read_finish.ofAddress(read_finish$get(segment), scope);
    }
    static final FunctionDescriptor skip_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor skip_async_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle skip_async_UP$MH = RuntimeHelper.upcallHandle(skip_async.class, "apply", _GInputStreamClass.skip_async_UP$FUNC);
    static final FunctionDescriptor skip_async_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle skip_async_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass.skip_async_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*skip_async)(GInputStream*,gsize,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public interface skip_async {

        void apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(skip_async fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass.skip_async_UP$MH, fi, _GInputStreamClass.skip_async$FUNC, scope);
        }
        static skip_async ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    _GInputStreamClass.skip_async_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle skip_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("skip_async"));
    public static VarHandle skip_async$VH() {
        return _GInputStreamClass.skip_async$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*skip_async)(GInputStream*,gsize,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public static MemorySegment skip_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.skip_async$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*skip_async)(GInputStream*,gsize,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public static void skip_async$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass.skip_async$VH.set(seg, x);
    }
    public static MemorySegment skip_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.skip_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void skip_async$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass.skip_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static skip_async skip_async(MemorySegment segment, SegmentScope scope) {
        return skip_async.ofAddress(skip_async$get(segment), scope);
    }
    static final FunctionDescriptor skip_finish$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor skip_finish_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle skip_finish_UP$MH = RuntimeHelper.upcallHandle(skip_finish.class, "apply", _GInputStreamClass.skip_finish_UP$FUNC);
    static final FunctionDescriptor skip_finish_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle skip_finish_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass.skip_finish_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gssize (*skip_finish)(GInputStream*,GAsyncResult*,GError**);
     * }
     */
    public interface skip_finish {

        long apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(skip_finish fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass.skip_finish_UP$MH, fi, _GInputStreamClass.skip_finish$FUNC, scope);
        }
        static skip_finish ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (long)_GInputStreamClass.skip_finish_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle skip_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("skip_finish"));
    public static VarHandle skip_finish$VH() {
        return _GInputStreamClass.skip_finish$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gssize (*skip_finish)(GInputStream*,GAsyncResult*,GError**);
     * }
     */
    public static MemorySegment skip_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.skip_finish$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gssize (*skip_finish)(GInputStream*,GAsyncResult*,GError**);
     * }
     */
    public static void skip_finish$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass.skip_finish$VH.set(seg, x);
    }
    public static MemorySegment skip_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.skip_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void skip_finish$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass.skip_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static skip_finish skip_finish(MemorySegment segment, SegmentScope scope) {
        return skip_finish.ofAddress(skip_finish$get(segment), scope);
    }
    static final FunctionDescriptor close_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor close_async_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle close_async_UP$MH = RuntimeHelper.upcallHandle(close_async.class, "apply", _GInputStreamClass.close_async_UP$FUNC);
    static final FunctionDescriptor close_async_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle close_async_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass.close_async_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*close_async)(GInputStream*,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public interface close_async {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(close_async fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass.close_async_UP$MH, fi, _GInputStreamClass.close_async$FUNC, scope);
        }
        static close_async ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    _GInputStreamClass.close_async_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle close_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("close_async"));
    public static VarHandle close_async$VH() {
        return _GInputStreamClass.close_async$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*close_async)(GInputStream*,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public static MemorySegment close_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.close_async$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*close_async)(GInputStream*,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public static void close_async$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass.close_async$VH.set(seg, x);
    }
    public static MemorySegment close_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.close_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close_async$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass.close_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static close_async close_async(MemorySegment segment, SegmentScope scope) {
        return close_async.ofAddress(close_async$get(segment), scope);
    }
    static final FunctionDescriptor close_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor close_finish_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle close_finish_UP$MH = RuntimeHelper.upcallHandle(close_finish.class, "apply", _GInputStreamClass.close_finish_UP$FUNC);
    static final FunctionDescriptor close_finish_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle close_finish_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass.close_finish_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*close_finish)(GInputStream*,GAsyncResult*,GError**);
     * }
     */
    public interface close_finish {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(close_finish fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass.close_finish_UP$MH, fi, _GInputStreamClass.close_finish$FUNC, scope);
        }
        static close_finish ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)_GInputStreamClass.close_finish_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle close_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("close_finish"));
    public static VarHandle close_finish$VH() {
        return _GInputStreamClass.close_finish$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*close_finish)(GInputStream*,GAsyncResult*,GError**);
     * }
     */
    public static MemorySegment close_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.close_finish$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*close_finish)(GInputStream*,GAsyncResult*,GError**);
     * }
     */
    public static void close_finish$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass.close_finish$VH.set(seg, x);
    }
    public static MemorySegment close_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass.close_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close_finish$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass.close_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static close_finish close_finish(MemorySegment segment, SegmentScope scope) {
        return close_finish.ofAddress(close_finish$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved1_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved1_UP$MH = RuntimeHelper.upcallHandle(_g_reserved1.class, "apply", _GInputStreamClass._g_reserved1_UP$FUNC);
    static final FunctionDescriptor _g_reserved1_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved1_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass._g_reserved1_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved1)();
     * }
     */
    public interface _g_reserved1 {

        void apply();
        static MemorySegment allocate(_g_reserved1 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass._g_reserved1_UP$MH, fi, _GInputStreamClass._g_reserved1$FUNC, scope);
        }
        static _g_reserved1 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GInputStreamClass._g_reserved1_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved1"));
    public static VarHandle _g_reserved1$VH() {
        return _GInputStreamClass._g_reserved1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static MemorySegment _g_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass._g_reserved1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static void _g_reserved1$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass._g_reserved1$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass._g_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass._g_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved1 _g_reserved1(MemorySegment segment, SegmentScope scope) {
        return _g_reserved1.ofAddress(_g_reserved1$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved2_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved2_UP$MH = RuntimeHelper.upcallHandle(_g_reserved2.class, "apply", _GInputStreamClass._g_reserved2_UP$FUNC);
    static final FunctionDescriptor _g_reserved2_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved2_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass._g_reserved2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved2)();
     * }
     */
    public interface _g_reserved2 {

        void apply();
        static MemorySegment allocate(_g_reserved2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass._g_reserved2_UP$MH, fi, _GInputStreamClass._g_reserved2$FUNC, scope);
        }
        static _g_reserved2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GInputStreamClass._g_reserved2_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved2"));
    public static VarHandle _g_reserved2$VH() {
        return _GInputStreamClass._g_reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static MemorySegment _g_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass._g_reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static void _g_reserved2$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass._g_reserved2$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass._g_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass._g_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved2 _g_reserved2(MemorySegment segment, SegmentScope scope) {
        return _g_reserved2.ofAddress(_g_reserved2$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved3_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved3_UP$MH = RuntimeHelper.upcallHandle(_g_reserved3.class, "apply", _GInputStreamClass._g_reserved3_UP$FUNC);
    static final FunctionDescriptor _g_reserved3_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved3_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass._g_reserved3_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved3)();
     * }
     */
    public interface _g_reserved3 {

        void apply();
        static MemorySegment allocate(_g_reserved3 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass._g_reserved3_UP$MH, fi, _GInputStreamClass._g_reserved3$FUNC, scope);
        }
        static _g_reserved3 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GInputStreamClass._g_reserved3_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved3"));
    public static VarHandle _g_reserved3$VH() {
        return _GInputStreamClass._g_reserved3$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static MemorySegment _g_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass._g_reserved3$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static void _g_reserved3$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass._g_reserved3$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass._g_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass._g_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved3 _g_reserved3(MemorySegment segment, SegmentScope scope) {
        return _g_reserved3.ofAddress(_g_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved4_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved4_UP$MH = RuntimeHelper.upcallHandle(_g_reserved4.class, "apply", _GInputStreamClass._g_reserved4_UP$FUNC);
    static final FunctionDescriptor _g_reserved4_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved4_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass._g_reserved4_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved4)();
     * }
     */
    public interface _g_reserved4 {

        void apply();
        static MemorySegment allocate(_g_reserved4 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass._g_reserved4_UP$MH, fi, _GInputStreamClass._g_reserved4$FUNC, scope);
        }
        static _g_reserved4 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GInputStreamClass._g_reserved4_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved4"));
    public static VarHandle _g_reserved4$VH() {
        return _GInputStreamClass._g_reserved4$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static MemorySegment _g_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass._g_reserved4$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static void _g_reserved4$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass._g_reserved4$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass._g_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass._g_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved4 _g_reserved4(MemorySegment segment, SegmentScope scope) {
        return _g_reserved4.ofAddress(_g_reserved4$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved5_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved5_UP$MH = RuntimeHelper.upcallHandle(_g_reserved5.class, "apply", _GInputStreamClass._g_reserved5_UP$FUNC);
    static final FunctionDescriptor _g_reserved5_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved5_DOWN$MH = RuntimeHelper.downcallHandle(
        _GInputStreamClass._g_reserved5_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved5)();
     * }
     */
    public interface _g_reserved5 {

        void apply();
        static MemorySegment allocate(_g_reserved5 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GInputStreamClass._g_reserved5_UP$MH, fi, _GInputStreamClass._g_reserved5$FUNC, scope);
        }
        static _g_reserved5 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GInputStreamClass._g_reserved5_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved5"));
    public static VarHandle _g_reserved5$VH() {
        return _GInputStreamClass._g_reserved5$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static MemorySegment _g_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass._g_reserved5$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static void _g_reserved5$set(MemorySegment seg, MemorySegment x) {
        _GInputStreamClass._g_reserved5$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GInputStreamClass._g_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        _GInputStreamClass._g_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved5 _g_reserved5(MemorySegment segment, SegmentScope scope) {
        return _g_reserved5.ofAddress(_g_reserved5$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


