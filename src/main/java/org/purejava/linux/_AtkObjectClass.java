// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkObjectClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_description"),
        Constants$root.C_POINTER$LAYOUT.withName("get_parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_n_children"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_child"),
        Constants$root.C_POINTER$LAYOUT.withName("get_index_in_parent"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_relation_set"),
        Constants$root.C_POINTER$LAYOUT.withName("get_role"),
        Constants$root.C_POINTER$LAYOUT.withName("get_layer"),
        Constants$root.C_POINTER$LAYOUT.withName("get_mdi_zorder"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_state_set"),
        Constants$root.C_POINTER$LAYOUT.withName("set_name"),
        Constants$root.C_POINTER$LAYOUT.withName("set_description"),
        Constants$root.C_POINTER$LAYOUT.withName("set_parent"),
        Constants$root.C_POINTER$LAYOUT.withName("set_role"),
        Constants$root.C_POINTER$LAYOUT.withName("connect_property_change_handler"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_property_change_handler"),
        Constants$root.C_POINTER$LAYOUT.withName("initialize"),
        Constants$root.C_POINTER$LAYOUT.withName("children_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("focus_event"),
        Constants$root.C_POINTER$LAYOUT.withName("property_change"),
        Constants$root.C_POINTER$LAYOUT.withName("state_change"),
        Constants$root.C_POINTER$LAYOUT.withName("visible_data_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("active_descendant_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("get_object_locale"),
        Constants$root.C_POINTER$LAYOUT.withName("pad1")
    ).withName("_AtkObjectClass");
    public static MemoryLayout $LAYOUT() {
        return _AtkObjectClass.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor get_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_name$FUNC
    );
    public interface get_name {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_name fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_name.class, fi, _AtkObjectClass.get_name$FUNC, session);
        }
        static get_name ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkObjectClass.get_name$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_name"));
    public static VarHandle get_name$VH() {
        return _AtkObjectClass.get_name$VH;
    }
    public static MemoryAddress get_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_name$VH.get(seg);
    }
    public static void get_name$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.get_name$VH.set(seg, x);
    }
    public static MemoryAddress get_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.get_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name (MemorySegment segment, MemorySession session) {
        return get_name.ofAddress(get_name$get(segment), session);
    }
    static final FunctionDescriptor get_description$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_description$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_description$FUNC
    );
    public interface get_description {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_description fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_description.class, fi, _AtkObjectClass.get_description$FUNC, session);
        }
        static get_description ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkObjectClass.get_description$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_description"));
    public static VarHandle get_description$VH() {
        return _AtkObjectClass.get_description$VH;
    }
    public static MemoryAddress get_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_description$VH.get(seg);
    }
    public static void get_description$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.get_description$VH.set(seg, x);
    }
    public static MemoryAddress get_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_description$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.get_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_description get_description (MemorySegment segment, MemorySession session) {
        return get_description.ofAddress(get_description$get(segment), session);
    }
    static final FunctionDescriptor get_parent$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_parent$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_parent$FUNC
    );
    public interface get_parent {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_parent fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_parent.class, fi, _AtkObjectClass.get_parent$FUNC, session);
        }
        static get_parent ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkObjectClass.get_parent$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_parent"));
    public static VarHandle get_parent$VH() {
        return _AtkObjectClass.get_parent$VH;
    }
    public static MemoryAddress get_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_parent$VH.get(seg);
    }
    public static void get_parent$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.get_parent$VH.set(seg, x);
    }
    public static MemoryAddress get_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_parent$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.get_parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_parent get_parent (MemorySegment segment, MemorySession session) {
        return get_parent.ofAddress(get_parent$get(segment), session);
    }
    static final FunctionDescriptor get_n_children$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_children$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_n_children$FUNC
    );
    public interface get_n_children {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_n_children fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_n_children.class, fi, _AtkObjectClass.get_n_children$FUNC, session);
        }
        static get_n_children ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkObjectClass.get_n_children$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_n_children$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_n_children"));
    public static VarHandle get_n_children$VH() {
        return _AtkObjectClass.get_n_children$VH;
    }
    public static MemoryAddress get_n_children$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_n_children$VH.get(seg);
    }
    public static void get_n_children$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.get_n_children$VH.set(seg, x);
    }
    public static MemoryAddress get_n_children$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_n_children$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_children$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.get_n_children$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_children get_n_children (MemorySegment segment, MemorySession session) {
        return get_n_children.ofAddress(get_n_children$get(segment), session);
    }
    static final FunctionDescriptor ref_child$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle ref_child$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.ref_child$FUNC
    );
    public interface ref_child {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(ref_child fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ref_child.class, fi, _AtkObjectClass.ref_child$FUNC, session);
        }
        static ref_child ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkObjectClass.ref_child$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_child$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_child"));
    public static VarHandle ref_child$VH() {
        return _AtkObjectClass.ref_child$VH;
    }
    public static MemoryAddress ref_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.ref_child$VH.get(seg);
    }
    public static void ref_child$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.ref_child$VH.set(seg, x);
    }
    public static MemoryAddress ref_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.ref_child$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_child$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.ref_child$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_child ref_child (MemorySegment segment, MemorySession session) {
        return ref_child.ofAddress(ref_child$get(segment), session);
    }
    static final FunctionDescriptor get_index_in_parent$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_index_in_parent$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_index_in_parent$FUNC
    );
    public interface get_index_in_parent {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_index_in_parent fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_index_in_parent.class, fi, _AtkObjectClass.get_index_in_parent$FUNC, session);
        }
        static get_index_in_parent ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkObjectClass.get_index_in_parent$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_index_in_parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_index_in_parent"));
    public static VarHandle get_index_in_parent$VH() {
        return _AtkObjectClass.get_index_in_parent$VH;
    }
    public static MemoryAddress get_index_in_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_index_in_parent$VH.get(seg);
    }
    public static void get_index_in_parent$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.get_index_in_parent$VH.set(seg, x);
    }
    public static MemoryAddress get_index_in_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_index_in_parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_index_in_parent$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.get_index_in_parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_index_in_parent get_index_in_parent (MemorySegment segment, MemorySession session) {
        return get_index_in_parent.ofAddress(get_index_in_parent$get(segment), session);
    }
    static final FunctionDescriptor ref_relation_set$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_relation_set$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.ref_relation_set$FUNC
    );
    public interface ref_relation_set {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(ref_relation_set fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ref_relation_set.class, fi, _AtkObjectClass.ref_relation_set$FUNC, session);
        }
        static ref_relation_set ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkObjectClass.ref_relation_set$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_relation_set$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_relation_set"));
    public static VarHandle ref_relation_set$VH() {
        return _AtkObjectClass.ref_relation_set$VH;
    }
    public static MemoryAddress ref_relation_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.ref_relation_set$VH.get(seg);
    }
    public static void ref_relation_set$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.ref_relation_set$VH.set(seg, x);
    }
    public static MemoryAddress ref_relation_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.ref_relation_set$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_relation_set$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.ref_relation_set$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_relation_set ref_relation_set (MemorySegment segment, MemorySession session) {
        return ref_relation_set.ofAddress(ref_relation_set$get(segment), session);
    }
    static final FunctionDescriptor get_role$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_role$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_role$FUNC
    );
    public interface get_role {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_role fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_role.class, fi, _AtkObjectClass.get_role$FUNC, session);
        }
        static get_role ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkObjectClass.get_role$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_role$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_role"));
    public static VarHandle get_role$VH() {
        return _AtkObjectClass.get_role$VH;
    }
    public static MemoryAddress get_role$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_role$VH.get(seg);
    }
    public static void get_role$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.get_role$VH.set(seg, x);
    }
    public static MemoryAddress get_role$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_role$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_role$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.get_role$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_role get_role (MemorySegment segment, MemorySession session) {
        return get_role.ofAddress(get_role$get(segment), session);
    }
    static final FunctionDescriptor get_layer$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_layer$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_layer$FUNC
    );
    public interface get_layer {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_layer fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_layer.class, fi, _AtkObjectClass.get_layer$FUNC, session);
        }
        static get_layer ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkObjectClass.get_layer$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_layer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_layer"));
    public static VarHandle get_layer$VH() {
        return _AtkObjectClass.get_layer$VH;
    }
    public static MemoryAddress get_layer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_layer$VH.get(seg);
    }
    public static void get_layer$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.get_layer$VH.set(seg, x);
    }
    public static MemoryAddress get_layer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_layer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_layer$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.get_layer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_layer get_layer (MemorySegment segment, MemorySession session) {
        return get_layer.ofAddress(get_layer$get(segment), session);
    }
    static final FunctionDescriptor get_mdi_zorder$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_mdi_zorder$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_mdi_zorder$FUNC
    );
    public interface get_mdi_zorder {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_mdi_zorder fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_mdi_zorder.class, fi, _AtkObjectClass.get_mdi_zorder$FUNC, session);
        }
        static get_mdi_zorder ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkObjectClass.get_mdi_zorder$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_mdi_zorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_mdi_zorder"));
    public static VarHandle get_mdi_zorder$VH() {
        return _AtkObjectClass.get_mdi_zorder$VH;
    }
    public static MemoryAddress get_mdi_zorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_mdi_zorder$VH.get(seg);
    }
    public static void get_mdi_zorder$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.get_mdi_zorder$VH.set(seg, x);
    }
    public static MemoryAddress get_mdi_zorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_mdi_zorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_mdi_zorder$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.get_mdi_zorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_mdi_zorder get_mdi_zorder (MemorySegment segment, MemorySession session) {
        return get_mdi_zorder.ofAddress(get_mdi_zorder$get(segment), session);
    }
    static final FunctionDescriptor ref_state_set$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ref_state_set$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.ref_state_set$FUNC
    );
    public interface ref_state_set {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(ref_state_set fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ref_state_set.class, fi, _AtkObjectClass.ref_state_set$FUNC, session);
        }
        static ref_state_set ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkObjectClass.ref_state_set$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_state_set$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_state_set"));
    public static VarHandle ref_state_set$VH() {
        return _AtkObjectClass.ref_state_set$VH;
    }
    public static MemoryAddress ref_state_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.ref_state_set$VH.get(seg);
    }
    public static void ref_state_set$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.ref_state_set$VH.set(seg, x);
    }
    public static MemoryAddress ref_state_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.ref_state_set$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_state_set$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.ref_state_set$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_state_set ref_state_set (MemorySegment segment, MemorySession session) {
        return ref_state_set.ofAddress(ref_state_set$get(segment), session);
    }
    static final FunctionDescriptor set_name$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_name$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.set_name$FUNC
    );
    public interface set_name {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_name fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_name.class, fi, _AtkObjectClass.set_name$FUNC, session);
        }
        static set_name ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkObjectClass.set_name$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_name"));
    public static VarHandle set_name$VH() {
        return _AtkObjectClass.set_name$VH;
    }
    public static MemoryAddress set_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.set_name$VH.get(seg);
    }
    public static void set_name$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.set_name$VH.set(seg, x);
    }
    public static MemoryAddress set_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.set_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.set_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_name set_name (MemorySegment segment, MemorySession session) {
        return set_name.ofAddress(set_name$get(segment), session);
    }
    static final FunctionDescriptor set_description$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_description$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.set_description$FUNC
    );
    public interface set_description {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_description fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_description.class, fi, _AtkObjectClass.set_description$FUNC, session);
        }
        static set_description ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkObjectClass.set_description$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_description"));
    public static VarHandle set_description$VH() {
        return _AtkObjectClass.set_description$VH;
    }
    public static MemoryAddress set_description$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.set_description$VH.get(seg);
    }
    public static void set_description$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.set_description$VH.set(seg, x);
    }
    public static MemoryAddress set_description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.set_description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_description$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.set_description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_description set_description (MemorySegment segment, MemorySession session) {
        return set_description.ofAddress(set_description$get(segment), session);
    }
    static final FunctionDescriptor set_parent$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_parent$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.set_parent$FUNC
    );
    public interface set_parent {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_parent fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_parent.class, fi, _AtkObjectClass.set_parent$FUNC, session);
        }
        static set_parent ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkObjectClass.set_parent$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_parent"));
    public static VarHandle set_parent$VH() {
        return _AtkObjectClass.set_parent$VH;
    }
    public static MemoryAddress set_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.set_parent$VH.get(seg);
    }
    public static void set_parent$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.set_parent$VH.set(seg, x);
    }
    public static MemoryAddress set_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.set_parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_parent$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.set_parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_parent set_parent (MemorySegment segment, MemorySession session) {
        return set_parent.ofAddress(set_parent$get(segment), session);
    }
    static final FunctionDescriptor set_role$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_role$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.set_role$FUNC
    );
    public interface set_role {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(set_role fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_role.class, fi, _AtkObjectClass.set_role$FUNC, session);
        }
        static set_role ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _AtkObjectClass.set_role$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_role$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_role"));
    public static VarHandle set_role$VH() {
        return _AtkObjectClass.set_role$VH;
    }
    public static MemoryAddress set_role$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.set_role$VH.get(seg);
    }
    public static void set_role$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.set_role$VH.set(seg, x);
    }
    public static MemoryAddress set_role$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.set_role$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_role$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.set_role$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_role set_role (MemorySegment segment, MemorySession session) {
        return set_role.ofAddress(set_role$get(segment), session);
    }
    static final FunctionDescriptor connect_property_change_handler$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle connect_property_change_handler$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.connect_property_change_handler$FUNC
    );
    public interface connect_property_change_handler {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(connect_property_change_handler fi, MemorySession session) {
            return RuntimeHelper.upcallStub(connect_property_change_handler.class, fi, _AtkObjectClass.connect_property_change_handler$FUNC, session);
        }
        static connect_property_change_handler ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_AtkObjectClass.connect_property_change_handler$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle connect_property_change_handler$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("connect_property_change_handler"));
    public static VarHandle connect_property_change_handler$VH() {
        return _AtkObjectClass.connect_property_change_handler$VH;
    }
    public static MemoryAddress connect_property_change_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.connect_property_change_handler$VH.get(seg);
    }
    public static void connect_property_change_handler$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.connect_property_change_handler$VH.set(seg, x);
    }
    public static MemoryAddress connect_property_change_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.connect_property_change_handler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void connect_property_change_handler$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.connect_property_change_handler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static connect_property_change_handler connect_property_change_handler (MemorySegment segment, MemorySession session) {
        return connect_property_change_handler.ofAddress(connect_property_change_handler$get(segment), session);
    }
    static final FunctionDescriptor remove_property_change_handler$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_property_change_handler$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.remove_property_change_handler$FUNC
    );
    public interface remove_property_change_handler {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(remove_property_change_handler fi, MemorySession session) {
            return RuntimeHelper.upcallStub(remove_property_change_handler.class, fi, _AtkObjectClass.remove_property_change_handler$FUNC, session);
        }
        static remove_property_change_handler ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _AtkObjectClass.remove_property_change_handler$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_property_change_handler$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_property_change_handler"));
    public static VarHandle remove_property_change_handler$VH() {
        return _AtkObjectClass.remove_property_change_handler$VH;
    }
    public static MemoryAddress remove_property_change_handler$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.remove_property_change_handler$VH.get(seg);
    }
    public static void remove_property_change_handler$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.remove_property_change_handler$VH.set(seg, x);
    }
    public static MemoryAddress remove_property_change_handler$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.remove_property_change_handler$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_property_change_handler$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.remove_property_change_handler$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_property_change_handler remove_property_change_handler (MemorySegment segment, MemorySession session) {
        return remove_property_change_handler.ofAddress(remove_property_change_handler$get(segment), session);
    }
    static final FunctionDescriptor initialize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle initialize$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.initialize$FUNC
    );
    public interface initialize {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(initialize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(initialize.class, fi, _AtkObjectClass.initialize$FUNC, session);
        }
        static initialize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkObjectClass.initialize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle initialize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("initialize"));
    public static VarHandle initialize$VH() {
        return _AtkObjectClass.initialize$VH;
    }
    public static MemoryAddress initialize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.initialize$VH.get(seg);
    }
    public static void initialize$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.initialize$VH.set(seg, x);
    }
    public static MemoryAddress initialize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.initialize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void initialize$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.initialize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static initialize initialize (MemorySegment segment, MemorySession session) {
        return initialize.ofAddress(initialize$get(segment), session);
    }
    static final FunctionDescriptor children_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle children_changed$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.children_changed$FUNC
    );
    public interface children_changed {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(children_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(children_changed.class, fi, _AtkObjectClass.children_changed$FUNC, session);
        }
        static children_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _AtkObjectClass.children_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle children_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("children_changed"));
    public static VarHandle children_changed$VH() {
        return _AtkObjectClass.children_changed$VH;
    }
    public static MemoryAddress children_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.children_changed$VH.get(seg);
    }
    public static void children_changed$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.children_changed$VH.set(seg, x);
    }
    public static MemoryAddress children_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.children_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void children_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.children_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static children_changed children_changed (MemorySegment segment, MemorySession session) {
        return children_changed.ofAddress(children_changed$get(segment), session);
    }
    static final FunctionDescriptor focus_event$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle focus_event$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.focus_event$FUNC
    );
    public interface focus_event {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(focus_event fi, MemorySession session) {
            return RuntimeHelper.upcallStub(focus_event.class, fi, _AtkObjectClass.focus_event$FUNC, session);
        }
        static focus_event ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _AtkObjectClass.focus_event$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle focus_event$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("focus_event"));
    public static VarHandle focus_event$VH() {
        return _AtkObjectClass.focus_event$VH;
    }
    public static MemoryAddress focus_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.focus_event$VH.get(seg);
    }
    public static void focus_event$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.focus_event$VH.set(seg, x);
    }
    public static MemoryAddress focus_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.focus_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void focus_event$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.focus_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus_event focus_event (MemorySegment segment, MemorySession session) {
        return focus_event.ofAddress(focus_event$get(segment), session);
    }
    static final FunctionDescriptor property_change$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle property_change$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.property_change$FUNC
    );
    public interface property_change {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(property_change fi, MemorySession session) {
            return RuntimeHelper.upcallStub(property_change.class, fi, _AtkObjectClass.property_change$FUNC, session);
        }
        static property_change ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkObjectClass.property_change$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle property_change$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("property_change"));
    public static VarHandle property_change$VH() {
        return _AtkObjectClass.property_change$VH;
    }
    public static MemoryAddress property_change$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.property_change$VH.get(seg);
    }
    public static void property_change$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.property_change$VH.set(seg, x);
    }
    public static MemoryAddress property_change$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.property_change$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void property_change$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.property_change$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static property_change property_change (MemorySegment segment, MemorySession session) {
        return property_change.ofAddress(property_change$get(segment), session);
    }
    static final FunctionDescriptor state_change$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle state_change$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.state_change$FUNC
    );
    public interface state_change {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(state_change fi, MemorySession session) {
            return RuntimeHelper.upcallStub(state_change.class, fi, _AtkObjectClass.state_change$FUNC, session);
        }
        static state_change ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    _AtkObjectClass.state_change$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle state_change$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("state_change"));
    public static VarHandle state_change$VH() {
        return _AtkObjectClass.state_change$VH;
    }
    public static MemoryAddress state_change$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.state_change$VH.get(seg);
    }
    public static void state_change$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.state_change$VH.set(seg, x);
    }
    public static MemoryAddress state_change$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.state_change$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void state_change$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.state_change$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static state_change state_change (MemorySegment segment, MemorySession session) {
        return state_change.ofAddress(state_change$get(segment), session);
    }
    static final FunctionDescriptor visible_data_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle visible_data_changed$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.visible_data_changed$FUNC
    );
    public interface visible_data_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(visible_data_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(visible_data_changed.class, fi, _AtkObjectClass.visible_data_changed$FUNC, session);
        }
        static visible_data_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _AtkObjectClass.visible_data_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle visible_data_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("visible_data_changed"));
    public static VarHandle visible_data_changed$VH() {
        return _AtkObjectClass.visible_data_changed$VH;
    }
    public static MemoryAddress visible_data_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.visible_data_changed$VH.get(seg);
    }
    public static void visible_data_changed$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.visible_data_changed$VH.set(seg, x);
    }
    public static MemoryAddress visible_data_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.visible_data_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void visible_data_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.visible_data_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static visible_data_changed visible_data_changed (MemorySegment segment, MemorySession session) {
        return visible_data_changed.ofAddress(visible_data_changed$get(segment), session);
    }
    static final FunctionDescriptor active_descendant_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle active_descendant_changed$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.active_descendant_changed$FUNC
    );
    public interface active_descendant_changed {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(active_descendant_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(active_descendant_changed.class, fi, _AtkObjectClass.active_descendant_changed$FUNC, session);
        }
        static active_descendant_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkObjectClass.active_descendant_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle active_descendant_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("active_descendant_changed"));
    public static VarHandle active_descendant_changed$VH() {
        return _AtkObjectClass.active_descendant_changed$VH;
    }
    public static MemoryAddress active_descendant_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.active_descendant_changed$VH.get(seg);
    }
    public static void active_descendant_changed$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.active_descendant_changed$VH.set(seg, x);
    }
    public static MemoryAddress active_descendant_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.active_descendant_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void active_descendant_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.active_descendant_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static active_descendant_changed active_descendant_changed (MemorySegment segment, MemorySession session) {
        return active_descendant_changed.ofAddress(active_descendant_changed$get(segment), session);
    }
    static final FunctionDescriptor get_attributes$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_attributes$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_attributes$FUNC
    );
    public interface get_attributes {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_attributes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_attributes.class, fi, _AtkObjectClass.get_attributes$FUNC, session);
        }
        static get_attributes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkObjectClass.get_attributes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_attributes"));
    public static VarHandle get_attributes$VH() {
        return _AtkObjectClass.get_attributes$VH;
    }
    public static MemoryAddress get_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_attributes$VH.get(seg);
    }
    public static void get_attributes$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.get_attributes$VH.set(seg, x);
    }
    public static MemoryAddress get_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.get_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_attributes get_attributes (MemorySegment segment, MemorySession session) {
        return get_attributes.ofAddress(get_attributes$get(segment), session);
    }
    static final FunctionDescriptor get_object_locale$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_object_locale$MH = RuntimeHelper.downcallHandle(
        _AtkObjectClass.get_object_locale$FUNC
    );
    public interface get_object_locale {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_object_locale fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_object_locale.class, fi, _AtkObjectClass.get_object_locale$FUNC, session);
        }
        static get_object_locale ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkObjectClass.get_object_locale$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_object_locale$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_object_locale"));
    public static VarHandle get_object_locale$VH() {
        return _AtkObjectClass.get_object_locale$VH;
    }
    public static MemoryAddress get_object_locale$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_object_locale$VH.get(seg);
    }
    public static void get_object_locale$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.get_object_locale$VH.set(seg, x);
    }
    public static MemoryAddress get_object_locale$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.get_object_locale$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_object_locale$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.get_object_locale$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_object_locale get_object_locale (MemorySegment segment, MemorySession session) {
        return get_object_locale.ofAddress(get_object_locale$get(segment), session);
    }
    static final VarHandle pad1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pad1"));
    public static VarHandle pad1$VH() {
        return _AtkObjectClass.pad1$VH;
    }
    public static MemoryAddress pad1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.pad1$VH.get(seg);
    }
    public static void pad1$set( MemorySegment seg, MemoryAddress x) {
        _AtkObjectClass.pad1$VH.set(seg, x);
    }
    public static MemoryAddress pad1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObjectClass.pad1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pad1$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObjectClass.pad1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static AtkFunction pad1 (MemorySegment segment, MemorySession session) {
        return AtkFunction.ofAddress(pad1$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


