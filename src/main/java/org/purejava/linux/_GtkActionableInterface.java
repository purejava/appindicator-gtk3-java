// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkActionableInterface {
 *     GTypeInterface g_iface;
 *     const gchar* (*get_action_name)(GtkActionable*);
 *     void (*set_action_name)(GtkActionable*,const gchar*);
 *     GVariant* (*get_action_target_value)(GtkActionable*);
 *     void (*set_action_target_value)(GtkActionable*,GVariant*);
 * };
 * }
 */
public class _GtkActionableInterface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("get_action_name"),
        Constants$root.C_POINTER$LAYOUT.withName("set_action_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_action_target_value"),
        Constants$root.C_POINTER$LAYOUT.withName("set_action_target_value")
    ).withName("_GtkActionableInterface");
    public static MemoryLayout $LAYOUT() {
        return _GtkActionableInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_action_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_action_name_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_action_name_UP$MH = RuntimeHelper.upcallHandle(get_action_name.class, "apply", _GtkActionableInterface.get_action_name_UP$FUNC);
    static final FunctionDescriptor get_action_name_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_action_name_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkActionableInterface.get_action_name_DOWN$FUNC
    );
    /**
     * {@snippet :
 * const gchar* (*get_action_name)(GtkActionable*);
     * }
     */
    public interface get_action_name {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_action_name fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkActionableInterface.get_action_name_UP$MH, fi, _GtkActionableInterface.get_action_name$FUNC, scope);
        }
        static get_action_name ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GtkActionableInterface.get_action_name_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_action_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_action_name"));
    public static VarHandle get_action_name$VH() {
        return _GtkActionableInterface.get_action_name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * const gchar* (*get_action_name)(GtkActionable*);
     * }
     */
    public static MemorySegment get_action_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkActionableInterface.get_action_name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * const gchar* (*get_action_name)(GtkActionable*);
     * }
     */
    public static void get_action_name$set(MemorySegment seg, MemorySegment x) {
        _GtkActionableInterface.get_action_name$VH.set(seg, x);
    }
    public static MemorySegment get_action_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkActionableInterface.get_action_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_name$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkActionableInterface.get_action_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_name get_action_name(MemorySegment segment, SegmentScope scope) {
        return get_action_name.ofAddress(get_action_name$get(segment), scope);
    }
    static final FunctionDescriptor set_action_name$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_action_name_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_action_name_UP$MH = RuntimeHelper.upcallHandle(set_action_name.class, "apply", _GtkActionableInterface.set_action_name_UP$FUNC);
    static final FunctionDescriptor set_action_name_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_action_name_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkActionableInterface.set_action_name_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_action_name)(GtkActionable*,const gchar*);
     * }
     */
    public interface set_action_name {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_action_name fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkActionableInterface.set_action_name_UP$MH, fi, _GtkActionableInterface.set_action_name$FUNC, scope);
        }
        static set_action_name ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkActionableInterface.set_action_name_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_action_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_action_name"));
    public static VarHandle set_action_name$VH() {
        return _GtkActionableInterface.set_action_name$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_action_name)(GtkActionable*,const gchar*);
     * }
     */
    public static MemorySegment set_action_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkActionableInterface.set_action_name$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_action_name)(GtkActionable*,const gchar*);
     * }
     */
    public static void set_action_name$set(MemorySegment seg, MemorySegment x) {
        _GtkActionableInterface.set_action_name$VH.set(seg, x);
    }
    public static MemorySegment set_action_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkActionableInterface.set_action_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_action_name$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkActionableInterface.set_action_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_action_name set_action_name(MemorySegment segment, SegmentScope scope) {
        return set_action_name.ofAddress(set_action_name$get(segment), scope);
    }
    static final FunctionDescriptor get_action_target_value$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_action_target_value_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_action_target_value_UP$MH = RuntimeHelper.upcallHandle(get_action_target_value.class, "apply", _GtkActionableInterface.get_action_target_value_UP$FUNC);
    static final FunctionDescriptor get_action_target_value_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_action_target_value_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkActionableInterface.get_action_target_value_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GVariant* (*get_action_target_value)(GtkActionable*);
     * }
     */
    public interface get_action_target_value {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_action_target_value fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkActionableInterface.get_action_target_value_UP$MH, fi, _GtkActionableInterface.get_action_target_value$FUNC, scope);
        }
        static get_action_target_value ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GtkActionableInterface.get_action_target_value_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_action_target_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_action_target_value"));
    public static VarHandle get_action_target_value$VH() {
        return _GtkActionableInterface.get_action_target_value$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GVariant* (*get_action_target_value)(GtkActionable*);
     * }
     */
    public static MemorySegment get_action_target_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkActionableInterface.get_action_target_value$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GVariant* (*get_action_target_value)(GtkActionable*);
     * }
     */
    public static void get_action_target_value$set(MemorySegment seg, MemorySegment x) {
        _GtkActionableInterface.get_action_target_value$VH.set(seg, x);
    }
    public static MemorySegment get_action_target_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkActionableInterface.get_action_target_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action_target_value$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkActionableInterface.get_action_target_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action_target_value get_action_target_value(MemorySegment segment, SegmentScope scope) {
        return get_action_target_value.ofAddress(get_action_target_value$get(segment), scope);
    }
    static final FunctionDescriptor set_action_target_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_action_target_value_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_action_target_value_UP$MH = RuntimeHelper.upcallHandle(set_action_target_value.class, "apply", _GtkActionableInterface.set_action_target_value_UP$FUNC);
    static final FunctionDescriptor set_action_target_value_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_action_target_value_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkActionableInterface.set_action_target_value_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_action_target_value)(GtkActionable*,GVariant*);
     * }
     */
    public interface set_action_target_value {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_action_target_value fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkActionableInterface.set_action_target_value_UP$MH, fi, _GtkActionableInterface.set_action_target_value$FUNC, scope);
        }
        static set_action_target_value ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkActionableInterface.set_action_target_value_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_action_target_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_action_target_value"));
    public static VarHandle set_action_target_value$VH() {
        return _GtkActionableInterface.set_action_target_value$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_action_target_value)(GtkActionable*,GVariant*);
     * }
     */
    public static MemorySegment set_action_target_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkActionableInterface.set_action_target_value$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_action_target_value)(GtkActionable*,GVariant*);
     * }
     */
    public static void set_action_target_value$set(MemorySegment seg, MemorySegment x) {
        _GtkActionableInterface.set_action_target_value$VH.set(seg, x);
    }
    public static MemorySegment set_action_target_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkActionableInterface.set_action_target_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_action_target_value$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkActionableInterface.set_action_target_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_action_target_value set_action_target_value(MemorySegment segment, SegmentScope scope) {
        return set_action_target_value.ofAddress(set_action_target_value$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


