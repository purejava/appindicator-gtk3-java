// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkSelectionIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("add_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("clear_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("ref_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("get_selection_count"),
        Constants$root.C_POINTER$LAYOUT.withName("is_child_selected"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("select_all_selection"),
        Constants$root.C_POINTER$LAYOUT.withName("selection_changed")
    ).withName("_AtkSelectionIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkSelectionIface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor add_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle add_selection$MH = RuntimeHelper.downcallHandle(
        _AtkSelectionIface.add_selection$FUNC
    );
    public interface add_selection {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(add_selection fi, MemorySession session) {
            return RuntimeHelper.upcallStub(add_selection.class, fi, _AtkSelectionIface.add_selection$FUNC, session);
        }
        static add_selection ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_AtkSelectionIface.add_selection$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_selection"));
    public static VarHandle add_selection$VH() {
        return _AtkSelectionIface.add_selection$VH;
    }
    public static MemoryAddress add_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.add_selection$VH.get(seg);
    }
    public static void add_selection$set( MemorySegment seg, MemoryAddress x) {
        _AtkSelectionIface.add_selection$VH.set(seg, x);
    }
    public static MemoryAddress add_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.add_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkSelectionIface.add_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_selection add_selection (MemorySegment segment, MemorySession session) {
        return add_selection.ofAddress(add_selection$get(segment), session);
    }
    static final FunctionDescriptor clear_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle clear_selection$MH = RuntimeHelper.downcallHandle(
        _AtkSelectionIface.clear_selection$FUNC
    );
    public interface clear_selection {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(clear_selection fi, MemorySession session) {
            return RuntimeHelper.upcallStub(clear_selection.class, fi, _AtkSelectionIface.clear_selection$FUNC, session);
        }
        static clear_selection ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkSelectionIface.clear_selection$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle clear_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("clear_selection"));
    public static VarHandle clear_selection$VH() {
        return _AtkSelectionIface.clear_selection$VH;
    }
    public static MemoryAddress clear_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.clear_selection$VH.get(seg);
    }
    public static void clear_selection$set( MemorySegment seg, MemoryAddress x) {
        _AtkSelectionIface.clear_selection$VH.set(seg, x);
    }
    public static MemoryAddress clear_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.clear_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void clear_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkSelectionIface.clear_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static clear_selection clear_selection (MemorySegment segment, MemorySession session) {
        return clear_selection.ofAddress(clear_selection$get(segment), session);
    }
    static final FunctionDescriptor ref_selection$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle ref_selection$MH = RuntimeHelper.downcallHandle(
        _AtkSelectionIface.ref_selection$FUNC
    );
    public interface ref_selection {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(ref_selection fi, MemorySession session) {
            return RuntimeHelper.upcallStub(ref_selection.class, fi, _AtkSelectionIface.ref_selection$FUNC, session);
        }
        static ref_selection ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkSelectionIface.ref_selection$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ref_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ref_selection"));
    public static VarHandle ref_selection$VH() {
        return _AtkSelectionIface.ref_selection$VH;
    }
    public static MemoryAddress ref_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.ref_selection$VH.get(seg);
    }
    public static void ref_selection$set( MemorySegment seg, MemoryAddress x) {
        _AtkSelectionIface.ref_selection$VH.set(seg, x);
    }
    public static MemoryAddress ref_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.ref_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ref_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkSelectionIface.ref_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ref_selection ref_selection (MemorySegment segment, MemorySession session) {
        return ref_selection.ofAddress(ref_selection$get(segment), session);
    }
    static final FunctionDescriptor get_selection_count$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_selection_count$MH = RuntimeHelper.downcallHandle(
        _AtkSelectionIface.get_selection_count$FUNC
    );
    public interface get_selection_count {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_selection_count fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_selection_count.class, fi, _AtkSelectionIface.get_selection_count$FUNC, session);
        }
        static get_selection_count ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkSelectionIface.get_selection_count$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_selection_count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_selection_count"));
    public static VarHandle get_selection_count$VH() {
        return _AtkSelectionIface.get_selection_count$VH;
    }
    public static MemoryAddress get_selection_count$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.get_selection_count$VH.get(seg);
    }
    public static void get_selection_count$set( MemorySegment seg, MemoryAddress x) {
        _AtkSelectionIface.get_selection_count$VH.set(seg, x);
    }
    public static MemoryAddress get_selection_count$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.get_selection_count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_selection_count$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkSelectionIface.get_selection_count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_selection_count get_selection_count (MemorySegment segment, MemorySession session) {
        return get_selection_count.ofAddress(get_selection_count$get(segment), session);
    }
    static final FunctionDescriptor is_child_selected$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle is_child_selected$MH = RuntimeHelper.downcallHandle(
        _AtkSelectionIface.is_child_selected$FUNC
    );
    public interface is_child_selected {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(is_child_selected fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_child_selected.class, fi, _AtkSelectionIface.is_child_selected$FUNC, session);
        }
        static is_child_selected ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_AtkSelectionIface.is_child_selected$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_child_selected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_child_selected"));
    public static VarHandle is_child_selected$VH() {
        return _AtkSelectionIface.is_child_selected$VH;
    }
    public static MemoryAddress is_child_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.is_child_selected$VH.get(seg);
    }
    public static void is_child_selected$set( MemorySegment seg, MemoryAddress x) {
        _AtkSelectionIface.is_child_selected$VH.set(seg, x);
    }
    public static MemoryAddress is_child_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.is_child_selected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_child_selected$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkSelectionIface.is_child_selected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_child_selected is_child_selected (MemorySegment segment, MemorySession session) {
        return is_child_selected.ofAddress(is_child_selected$get(segment), session);
    }
    static final FunctionDescriptor remove_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_selection$MH = RuntimeHelper.downcallHandle(
        _AtkSelectionIface.remove_selection$FUNC
    );
    public interface remove_selection {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(remove_selection fi, MemorySession session) {
            return RuntimeHelper.upcallStub(remove_selection.class, fi, _AtkSelectionIface.remove_selection$FUNC, session);
        }
        static remove_selection ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_AtkSelectionIface.remove_selection$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_selection"));
    public static VarHandle remove_selection$VH() {
        return _AtkSelectionIface.remove_selection$VH;
    }
    public static MemoryAddress remove_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.remove_selection$VH.get(seg);
    }
    public static void remove_selection$set( MemorySegment seg, MemoryAddress x) {
        _AtkSelectionIface.remove_selection$VH.set(seg, x);
    }
    public static MemoryAddress remove_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.remove_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkSelectionIface.remove_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_selection remove_selection (MemorySegment segment, MemorySession session) {
        return remove_selection.ofAddress(remove_selection$get(segment), session);
    }
    static final FunctionDescriptor select_all_selection$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle select_all_selection$MH = RuntimeHelper.downcallHandle(
        _AtkSelectionIface.select_all_selection$FUNC
    );
    public interface select_all_selection {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(select_all_selection fi, MemorySession session) {
            return RuntimeHelper.upcallStub(select_all_selection.class, fi, _AtkSelectionIface.select_all_selection$FUNC, session);
        }
        static select_all_selection ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkSelectionIface.select_all_selection$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select_all_selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select_all_selection"));
    public static VarHandle select_all_selection$VH() {
        return _AtkSelectionIface.select_all_selection$VH;
    }
    public static MemoryAddress select_all_selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.select_all_selection$VH.get(seg);
    }
    public static void select_all_selection$set( MemorySegment seg, MemoryAddress x) {
        _AtkSelectionIface.select_all_selection$VH.set(seg, x);
    }
    public static MemoryAddress select_all_selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.select_all_selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select_all_selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkSelectionIface.select_all_selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_all_selection select_all_selection (MemorySegment segment, MemorySession session) {
        return select_all_selection.ofAddress(select_all_selection$get(segment), session);
    }
    static final FunctionDescriptor selection_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle selection_changed$MH = RuntimeHelper.downcallHandle(
        _AtkSelectionIface.selection_changed$FUNC
    );
    public interface selection_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(selection_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(selection_changed.class, fi, _AtkSelectionIface.selection_changed$FUNC, session);
        }
        static selection_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _AtkSelectionIface.selection_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle selection_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("selection_changed"));
    public static VarHandle selection_changed$VH() {
        return _AtkSelectionIface.selection_changed$VH;
    }
    public static MemoryAddress selection_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.selection_changed$VH.get(seg);
    }
    public static void selection_changed$set( MemorySegment seg, MemoryAddress x) {
        _AtkSelectionIface.selection_changed$VH.set(seg, x);
    }
    public static MemoryAddress selection_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkSelectionIface.selection_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void selection_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkSelectionIface.selection_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static selection_changed selection_changed (MemorySegment segment, MemorySession session) {
        return selection_changed.ofAddress(selection_changed$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


