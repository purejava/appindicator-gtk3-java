// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PangoRendererClass {
 *     GObjectClass parent_class;
 *     void (*draw_glyphs)(PangoRenderer*,PangoFont*,PangoGlyphString*,int,int);
 *     void (*draw_rectangle)(PangoRenderer*,PangoRenderPart,int,int,int,int);
 *     void (*draw_error_underline)(PangoRenderer*,int,int,int,int);
 *     void (*draw_shape)(PangoRenderer*,PangoAttrShape*,int,int);
 *     void (*draw_trapezoid)(PangoRenderer*,PangoRenderPart,double,double,double,double,double,double);
 *     void (*draw_glyph)(PangoRenderer*,PangoFont*,PangoGlyph,double,double);
 *     void (*part_changed)(PangoRenderer*,PangoRenderPart);
 *     void (*begin)(PangoRenderer*);
 *     void (*end)(PangoRenderer*);
 *     void (*prepare_run)(PangoRenderer*,PangoLayoutRun*);
 *     void (*draw_glyph_item)(PangoRenderer*,char*,PangoGlyphItem*,int,int);
 *     void (*_pango_reserved2)();
 *     void (*_pango_reserved3)();
 *     void (*_pango_reserved4)();
 * };
 * }
 */
public class _PangoRendererClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_glyphs"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_rectangle"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_error_underline"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_shape"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_trapezoid"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_glyph"),
        Constants$root.C_POINTER$LAYOUT.withName("part_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("begin"),
        Constants$root.C_POINTER$LAYOUT.withName("end"),
        Constants$root.C_POINTER$LAYOUT.withName("prepare_run"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_glyph_item"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved4")
    ).withName("_PangoRendererClass");
    public static MemoryLayout $LAYOUT() {
        return _PangoRendererClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor draw_glyphs$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor draw_glyphs_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_glyphs_UP$MH = RuntimeHelper.upcallHandle(draw_glyphs.class, "apply", _PangoRendererClass.draw_glyphs_UP$FUNC);
    static final FunctionDescriptor draw_glyphs_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_glyphs_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_glyphs_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*draw_glyphs)(PangoRenderer*,PangoFont*,PangoGlyphString*,int,int);
     * }
     */
    public interface draw_glyphs {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4);
        static MemorySegment allocate(draw_glyphs fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.draw_glyphs_UP$MH, fi, _PangoRendererClass.draw_glyphs$FUNC, scope);
        }
        static draw_glyphs ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4) -> {
                try {
                    _PangoRendererClass.draw_glyphs_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_glyphs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_glyphs"));
    public static VarHandle draw_glyphs$VH() {
        return _PangoRendererClass.draw_glyphs$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_glyphs)(PangoRenderer*,PangoFont*,PangoGlyphString*,int,int);
     * }
     */
    public static MemorySegment draw_glyphs$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_glyphs$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_glyphs)(PangoRenderer*,PangoFont*,PangoGlyphString*,int,int);
     * }
     */
    public static void draw_glyphs$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.draw_glyphs$VH.set(seg, x);
    }
    public static MemorySegment draw_glyphs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_glyphs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_glyphs$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.draw_glyphs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_glyphs draw_glyphs(MemorySegment segment, SegmentScope scope) {
        return draw_glyphs.ofAddress(draw_glyphs$get(segment), scope);
    }
    static final FunctionDescriptor draw_rectangle$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor draw_rectangle_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_rectangle_UP$MH = RuntimeHelper.upcallHandle(draw_rectangle.class, "apply", _PangoRendererClass.draw_rectangle_UP$FUNC);
    static final FunctionDescriptor draw_rectangle_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_rectangle_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_rectangle_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*draw_rectangle)(PangoRenderer*,PangoRenderPart,int,int,int,int);
     * }
     */
    public interface draw_rectangle {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, int _x4, int _x5);
        static MemorySegment allocate(draw_rectangle fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.draw_rectangle_UP$MH, fi, _PangoRendererClass.draw_rectangle$FUNC, scope);
        }
        static draw_rectangle ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, int __x4, int __x5) -> {
                try {
                    _PangoRendererClass.draw_rectangle_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_rectangle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_rectangle"));
    public static VarHandle draw_rectangle$VH() {
        return _PangoRendererClass.draw_rectangle$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_rectangle)(PangoRenderer*,PangoRenderPart,int,int,int,int);
     * }
     */
    public static MemorySegment draw_rectangle$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_rectangle$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_rectangle)(PangoRenderer*,PangoRenderPart,int,int,int,int);
     * }
     */
    public static void draw_rectangle$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.draw_rectangle$VH.set(seg, x);
    }
    public static MemorySegment draw_rectangle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_rectangle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_rectangle$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.draw_rectangle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_rectangle draw_rectangle(MemorySegment segment, SegmentScope scope) {
        return draw_rectangle.ofAddress(draw_rectangle$get(segment), scope);
    }
    static final FunctionDescriptor draw_error_underline$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor draw_error_underline_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_error_underline_UP$MH = RuntimeHelper.upcallHandle(draw_error_underline.class, "apply", _PangoRendererClass.draw_error_underline_UP$FUNC);
    static final FunctionDescriptor draw_error_underline_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_error_underline_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_error_underline_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*draw_error_underline)(PangoRenderer*,int,int,int,int);
     * }
     */
    public interface draw_error_underline {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, int _x4);
        static MemorySegment allocate(draw_error_underline fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.draw_error_underline_UP$MH, fi, _PangoRendererClass.draw_error_underline$FUNC, scope);
        }
        static draw_error_underline ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, int __x4) -> {
                try {
                    _PangoRendererClass.draw_error_underline_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_error_underline$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_error_underline"));
    public static VarHandle draw_error_underline$VH() {
        return _PangoRendererClass.draw_error_underline$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_error_underline)(PangoRenderer*,int,int,int,int);
     * }
     */
    public static MemorySegment draw_error_underline$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_error_underline$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_error_underline)(PangoRenderer*,int,int,int,int);
     * }
     */
    public static void draw_error_underline$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.draw_error_underline$VH.set(seg, x);
    }
    public static MemorySegment draw_error_underline$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_error_underline$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_error_underline$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.draw_error_underline$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_error_underline draw_error_underline(MemorySegment segment, SegmentScope scope) {
        return draw_error_underline.ofAddress(draw_error_underline$get(segment), scope);
    }
    static final FunctionDescriptor draw_shape$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor draw_shape_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_shape_UP$MH = RuntimeHelper.upcallHandle(draw_shape.class, "apply", _PangoRendererClass.draw_shape_UP$FUNC);
    static final FunctionDescriptor draw_shape_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_shape_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_shape_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*draw_shape)(PangoRenderer*,PangoAttrShape*,int,int);
     * }
     */
    public interface draw_shape {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(draw_shape fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.draw_shape_UP$MH, fi, _PangoRendererClass.draw_shape$FUNC, scope);
        }
        static draw_shape ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    _PangoRendererClass.draw_shape_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_shape$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_shape"));
    public static VarHandle draw_shape$VH() {
        return _PangoRendererClass.draw_shape$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_shape)(PangoRenderer*,PangoAttrShape*,int,int);
     * }
     */
    public static MemorySegment draw_shape$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_shape$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_shape)(PangoRenderer*,PangoAttrShape*,int,int);
     * }
     */
    public static void draw_shape$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.draw_shape$VH.set(seg, x);
    }
    public static MemorySegment draw_shape$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_shape$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_shape$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.draw_shape$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_shape draw_shape(MemorySegment segment, SegmentScope scope) {
        return draw_shape.ofAddress(draw_shape$get(segment), scope);
    }
    static final FunctionDescriptor draw_trapezoid$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final FunctionDescriptor draw_trapezoid_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle draw_trapezoid_UP$MH = RuntimeHelper.upcallHandle(draw_trapezoid.class, "apply", _PangoRendererClass.draw_trapezoid_UP$FUNC);
    static final FunctionDescriptor draw_trapezoid_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle draw_trapezoid_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_trapezoid_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*draw_trapezoid)(PangoRenderer*,PangoRenderPart,double,double,double,double,double,double);
     * }
     */
    public interface draw_trapezoid {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, double _x2, double _x3, double _x4, double _x5, double _x6, double _x7);
        static MemorySegment allocate(draw_trapezoid fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.draw_trapezoid_UP$MH, fi, _PangoRendererClass.draw_trapezoid$FUNC, scope);
        }
        static draw_trapezoid ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, double __x2, double __x3, double __x4, double __x5, double __x6, double __x7) -> {
                try {
                    _PangoRendererClass.draw_trapezoid_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_trapezoid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_trapezoid"));
    public static VarHandle draw_trapezoid$VH() {
        return _PangoRendererClass.draw_trapezoid$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_trapezoid)(PangoRenderer*,PangoRenderPart,double,double,double,double,double,double);
     * }
     */
    public static MemorySegment draw_trapezoid$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_trapezoid$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_trapezoid)(PangoRenderer*,PangoRenderPart,double,double,double,double,double,double);
     * }
     */
    public static void draw_trapezoid$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.draw_trapezoid$VH.set(seg, x);
    }
    public static MemorySegment draw_trapezoid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_trapezoid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_trapezoid$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.draw_trapezoid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_trapezoid draw_trapezoid(MemorySegment segment, SegmentScope scope) {
        return draw_trapezoid.ofAddress(draw_trapezoid$get(segment), scope);
    }
    static final FunctionDescriptor draw_glyph$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final FunctionDescriptor draw_glyph_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle draw_glyph_UP$MH = RuntimeHelper.upcallHandle(draw_glyph.class, "apply", _PangoRendererClass.draw_glyph_UP$FUNC);
    static final FunctionDescriptor draw_glyph_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle draw_glyph_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_glyph_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*draw_glyph)(PangoRenderer*,PangoFont*,PangoGlyph,double,double);
     * }
     */
    public interface draw_glyph {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, double _x3, double _x4);
        static MemorySegment allocate(draw_glyph fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.draw_glyph_UP$MH, fi, _PangoRendererClass.draw_glyph$FUNC, scope);
        }
        static draw_glyph ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, double __x3, double __x4) -> {
                try {
                    _PangoRendererClass.draw_glyph_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_glyph$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_glyph"));
    public static VarHandle draw_glyph$VH() {
        return _PangoRendererClass.draw_glyph$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_glyph)(PangoRenderer*,PangoFont*,PangoGlyph,double,double);
     * }
     */
    public static MemorySegment draw_glyph$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_glyph$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_glyph)(PangoRenderer*,PangoFont*,PangoGlyph,double,double);
     * }
     */
    public static void draw_glyph$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.draw_glyph$VH.set(seg, x);
    }
    public static MemorySegment draw_glyph$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_glyph$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_glyph$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.draw_glyph$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_glyph draw_glyph(MemorySegment segment, SegmentScope scope) {
        return draw_glyph.ofAddress(draw_glyph$get(segment), scope);
    }
    static final FunctionDescriptor part_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor part_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle part_changed_UP$MH = RuntimeHelper.upcallHandle(part_changed.class, "apply", _PangoRendererClass.part_changed_UP$FUNC);
    static final FunctionDescriptor part_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle part_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.part_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*part_changed)(PangoRenderer*,PangoRenderPart);
     * }
     */
    public interface part_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(part_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.part_changed_UP$MH, fi, _PangoRendererClass.part_changed$FUNC, scope);
        }
        static part_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _PangoRendererClass.part_changed_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle part_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("part_changed"));
    public static VarHandle part_changed$VH() {
        return _PangoRendererClass.part_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*part_changed)(PangoRenderer*,PangoRenderPart);
     * }
     */
    public static MemorySegment part_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.part_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*part_changed)(PangoRenderer*,PangoRenderPart);
     * }
     */
    public static void part_changed$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.part_changed$VH.set(seg, x);
    }
    public static MemorySegment part_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.part_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void part_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.part_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static part_changed part_changed(MemorySegment segment, SegmentScope scope) {
        return part_changed.ofAddress(part_changed$get(segment), scope);
    }
    static final FunctionDescriptor begin$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor begin_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle begin_UP$MH = RuntimeHelper.upcallHandle(begin.class, "apply", _PangoRendererClass.begin_UP$FUNC);
    static final FunctionDescriptor begin_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle begin_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.begin_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*begin)(PangoRenderer*);
     * }
     */
    public interface begin {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(begin fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.begin_UP$MH, fi, _PangoRendererClass.begin$FUNC, scope);
        }
        static begin ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _PangoRendererClass.begin_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle begin$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("begin"));
    public static VarHandle begin$VH() {
        return _PangoRendererClass.begin$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*begin)(PangoRenderer*);
     * }
     */
    public static MemorySegment begin$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.begin$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*begin)(PangoRenderer*);
     * }
     */
    public static void begin$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.begin$VH.set(seg, x);
    }
    public static MemorySegment begin$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.begin$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void begin$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.begin$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static begin begin(MemorySegment segment, SegmentScope scope) {
        return begin.ofAddress(begin$get(segment), scope);
    }
    static final FunctionDescriptor end$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor end_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle end_UP$MH = RuntimeHelper.upcallHandle(end.class, "apply", _PangoRendererClass.end_UP$FUNC);
    static final FunctionDescriptor end_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle end_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.end_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*end)(PangoRenderer*);
     * }
     */
    public interface end {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(end fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.end_UP$MH, fi, _PangoRendererClass.end$FUNC, scope);
        }
        static end ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _PangoRendererClass.end_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle end$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end"));
    public static VarHandle end$VH() {
        return _PangoRendererClass.end$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*end)(PangoRenderer*);
     * }
     */
    public static MemorySegment end$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.end$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*end)(PangoRenderer*);
     * }
     */
    public static void end$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.end$VH.set(seg, x);
    }
    public static MemorySegment end$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.end$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.end$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static end end(MemorySegment segment, SegmentScope scope) {
        return end.ofAddress(end$get(segment), scope);
    }
    static final FunctionDescriptor prepare_run$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor prepare_run_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle prepare_run_UP$MH = RuntimeHelper.upcallHandle(prepare_run.class, "apply", _PangoRendererClass.prepare_run_UP$FUNC);
    static final FunctionDescriptor prepare_run_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle prepare_run_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.prepare_run_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*prepare_run)(PangoRenderer*,PangoLayoutRun*);
     * }
     */
    public interface prepare_run {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(prepare_run fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.prepare_run_UP$MH, fi, _PangoRendererClass.prepare_run$FUNC, scope);
        }
        static prepare_run ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _PangoRendererClass.prepare_run_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle prepare_run$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("prepare_run"));
    public static VarHandle prepare_run$VH() {
        return _PangoRendererClass.prepare_run$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*prepare_run)(PangoRenderer*,PangoLayoutRun*);
     * }
     */
    public static MemorySegment prepare_run$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.prepare_run$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*prepare_run)(PangoRenderer*,PangoLayoutRun*);
     * }
     */
    public static void prepare_run$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.prepare_run$VH.set(seg, x);
    }
    public static MemorySegment prepare_run$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.prepare_run$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void prepare_run$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.prepare_run$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static prepare_run prepare_run(MemorySegment segment, SegmentScope scope) {
        return prepare_run.ofAddress(prepare_run$get(segment), scope);
    }
    static final FunctionDescriptor draw_glyph_item$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor draw_glyph_item_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_glyph_item_UP$MH = RuntimeHelper.upcallHandle(draw_glyph_item.class, "apply", _PangoRendererClass.draw_glyph_item_UP$FUNC);
    static final FunctionDescriptor draw_glyph_item_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_glyph_item_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_glyph_item_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*draw_glyph_item)(PangoRenderer*,char*,PangoGlyphItem*,int,int);
     * }
     */
    public interface draw_glyph_item {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4);
        static MemorySegment allocate(draw_glyph_item fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass.draw_glyph_item_UP$MH, fi, _PangoRendererClass.draw_glyph_item$FUNC, scope);
        }
        static draw_glyph_item ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4) -> {
                try {
                    _PangoRendererClass.draw_glyph_item_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_glyph_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_glyph_item"));
    public static VarHandle draw_glyph_item$VH() {
        return _PangoRendererClass.draw_glyph_item$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*draw_glyph_item)(PangoRenderer*,char*,PangoGlyphItem*,int,int);
     * }
     */
    public static MemorySegment draw_glyph_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_glyph_item$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*draw_glyph_item)(PangoRenderer*,char*,PangoGlyphItem*,int,int);
     * }
     */
    public static void draw_glyph_item$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass.draw_glyph_item$VH.set(seg, x);
    }
    public static MemorySegment draw_glyph_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass.draw_glyph_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_glyph_item$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass.draw_glyph_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_glyph_item draw_glyph_item(MemorySegment segment, SegmentScope scope) {
        return draw_glyph_item.ofAddress(draw_glyph_item$get(segment), scope);
    }
    static final FunctionDescriptor _pango_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _pango_reserved2_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved2_UP$MH = RuntimeHelper.upcallHandle(_pango_reserved2.class, "apply", _PangoRendererClass._pango_reserved2_UP$FUNC);
    static final FunctionDescriptor _pango_reserved2_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved2_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass._pango_reserved2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_pango_reserved2)();
     * }
     */
    public interface _pango_reserved2 {

        void apply();
        static MemorySegment allocate(_pango_reserved2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass._pango_reserved2_UP$MH, fi, _PangoRendererClass._pango_reserved2$FUNC, scope);
        }
        static _pango_reserved2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _PangoRendererClass._pango_reserved2_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved2"));
    public static VarHandle _pango_reserved2$VH() {
        return _PangoRendererClass._pango_reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_pango_reserved2)();
     * }
     */
    public static MemorySegment _pango_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass._pango_reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_pango_reserved2)();
     * }
     */
    public static void _pango_reserved2$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass._pango_reserved2$VH.set(seg, x);
    }
    public static MemorySegment _pango_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass._pango_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass._pango_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved2 _pango_reserved2(MemorySegment segment, SegmentScope scope) {
        return _pango_reserved2.ofAddress(_pango_reserved2$get(segment), scope);
    }
    static final FunctionDescriptor _pango_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _pango_reserved3_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved3_UP$MH = RuntimeHelper.upcallHandle(_pango_reserved3.class, "apply", _PangoRendererClass._pango_reserved3_UP$FUNC);
    static final FunctionDescriptor _pango_reserved3_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved3_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass._pango_reserved3_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_pango_reserved3)();
     * }
     */
    public interface _pango_reserved3 {

        void apply();
        static MemorySegment allocate(_pango_reserved3 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass._pango_reserved3_UP$MH, fi, _PangoRendererClass._pango_reserved3$FUNC, scope);
        }
        static _pango_reserved3 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _PangoRendererClass._pango_reserved3_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved3"));
    public static VarHandle _pango_reserved3$VH() {
        return _PangoRendererClass._pango_reserved3$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_pango_reserved3)();
     * }
     */
    public static MemorySegment _pango_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass._pango_reserved3$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_pango_reserved3)();
     * }
     */
    public static void _pango_reserved3$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass._pango_reserved3$VH.set(seg, x);
    }
    public static MemorySegment _pango_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass._pango_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass._pango_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved3 _pango_reserved3(MemorySegment segment, SegmentScope scope) {
        return _pango_reserved3.ofAddress(_pango_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _pango_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _pango_reserved4_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved4_UP$MH = RuntimeHelper.upcallHandle(_pango_reserved4.class, "apply", _PangoRendererClass._pango_reserved4_UP$FUNC);
    static final FunctionDescriptor _pango_reserved4_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved4_DOWN$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass._pango_reserved4_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_pango_reserved4)();
     * }
     */
    public interface _pango_reserved4 {

        void apply();
        static MemorySegment allocate(_pango_reserved4 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_PangoRendererClass._pango_reserved4_UP$MH, fi, _PangoRendererClass._pango_reserved4$FUNC, scope);
        }
        static _pango_reserved4 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _PangoRendererClass._pango_reserved4_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved4"));
    public static VarHandle _pango_reserved4$VH() {
        return _PangoRendererClass._pango_reserved4$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_pango_reserved4)();
     * }
     */
    public static MemorySegment _pango_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass._pango_reserved4$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_pango_reserved4)();
     * }
     */
    public static void _pango_reserved4$set(MemorySegment seg, MemorySegment x) {
        _PangoRendererClass._pango_reserved4$VH.set(seg, x);
    }
    public static MemorySegment _pango_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_PangoRendererClass._pango_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        _PangoRendererClass._pango_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved4 _pango_reserved4(MemorySegment segment, SegmentScope scope) {
        return _pango_reserved4.ofAddress(_pango_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


