// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PangoRendererClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_glyphs"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_rectangle"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_error_underline"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_shape"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_trapezoid"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_glyph"),
        Constants$root.C_POINTER$LAYOUT.withName("part_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("begin"),
        Constants$root.C_POINTER$LAYOUT.withName("end"),
        Constants$root.C_POINTER$LAYOUT.withName("prepare_run"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_glyph_item"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_pango_reserved4")
    ).withName("_PangoRendererClass");
    public static MemoryLayout $LAYOUT() {
        return _PangoRendererClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor draw_glyphs$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_glyphs$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_glyphs$FUNC
    );
    public interface draw_glyphs {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, int _x4);
        static MemorySegment allocate(draw_glyphs fi, MemorySession session) {
            return RuntimeHelper.upcallStub(draw_glyphs.class, fi, _PangoRendererClass.draw_glyphs$FUNC, session);
        }
        static draw_glyphs ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, int __x4) -> {
                try {
                    _PangoRendererClass.draw_glyphs$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_glyphs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_glyphs"));
    public static VarHandle draw_glyphs$VH() {
        return _PangoRendererClass.draw_glyphs$VH;
    }
    public static MemoryAddress draw_glyphs$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_glyphs$VH.get(seg);
    }
    public static void draw_glyphs$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.draw_glyphs$VH.set(seg, x);
    }
    public static MemoryAddress draw_glyphs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_glyphs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_glyphs$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.draw_glyphs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_glyphs draw_glyphs (MemorySegment segment, MemorySession session) {
        return draw_glyphs.ofAddress(draw_glyphs$get(segment), session);
    }
    static final FunctionDescriptor draw_rectangle$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_rectangle$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_rectangle$FUNC
    );
    public interface draw_rectangle {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3, int _x4, int _x5);
        static MemorySegment allocate(draw_rectangle fi, MemorySession session) {
            return RuntimeHelper.upcallStub(draw_rectangle.class, fi, _PangoRendererClass.draw_rectangle$FUNC, session);
        }
        static draw_rectangle ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3, int __x4, int __x5) -> {
                try {
                    _PangoRendererClass.draw_rectangle$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_rectangle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_rectangle"));
    public static VarHandle draw_rectangle$VH() {
        return _PangoRendererClass.draw_rectangle$VH;
    }
    public static MemoryAddress draw_rectangle$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_rectangle$VH.get(seg);
    }
    public static void draw_rectangle$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.draw_rectangle$VH.set(seg, x);
    }
    public static MemoryAddress draw_rectangle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_rectangle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_rectangle$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.draw_rectangle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_rectangle draw_rectangle (MemorySegment segment, MemorySession session) {
        return draw_rectangle.ofAddress(draw_rectangle$get(segment), session);
    }
    static final FunctionDescriptor draw_error_underline$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_error_underline$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_error_underline$FUNC
    );
    public interface draw_error_underline {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2, int _x3, int _x4);
        static MemorySegment allocate(draw_error_underline fi, MemorySession session) {
            return RuntimeHelper.upcallStub(draw_error_underline.class, fi, _PangoRendererClass.draw_error_underline$FUNC, session);
        }
        static draw_error_underline ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2, int __x3, int __x4) -> {
                try {
                    _PangoRendererClass.draw_error_underline$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_error_underline$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_error_underline"));
    public static VarHandle draw_error_underline$VH() {
        return _PangoRendererClass.draw_error_underline$VH;
    }
    public static MemoryAddress draw_error_underline$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_error_underline$VH.get(seg);
    }
    public static void draw_error_underline$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.draw_error_underline$VH.set(seg, x);
    }
    public static MemoryAddress draw_error_underline$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_error_underline$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_error_underline$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.draw_error_underline$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_error_underline draw_error_underline (MemorySegment segment, MemorySession session) {
        return draw_error_underline.ofAddress(draw_error_underline$get(segment), session);
    }
    static final FunctionDescriptor draw_shape$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_shape$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_shape$FUNC
    );
    public interface draw_shape {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, int _x3);
        static MemorySegment allocate(draw_shape fi, MemorySession session) {
            return RuntimeHelper.upcallStub(draw_shape.class, fi, _PangoRendererClass.draw_shape$FUNC, session);
        }
        static draw_shape ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, int __x3) -> {
                try {
                    _PangoRendererClass.draw_shape$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_shape$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_shape"));
    public static VarHandle draw_shape$VH() {
        return _PangoRendererClass.draw_shape$VH;
    }
    public static MemoryAddress draw_shape$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_shape$VH.get(seg);
    }
    public static void draw_shape$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.draw_shape$VH.set(seg, x);
    }
    public static MemoryAddress draw_shape$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_shape$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_shape$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.draw_shape$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_shape draw_shape (MemorySegment segment, MemorySession session) {
        return draw_shape.ofAddress(draw_shape$get(segment), session);
    }
    static final FunctionDescriptor draw_trapezoid$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle draw_trapezoid$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_trapezoid$FUNC
    );
    public interface draw_trapezoid {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, double _x2, double _x3, double _x4, double _x5, double _x6, double _x7);
        static MemorySegment allocate(draw_trapezoid fi, MemorySession session) {
            return RuntimeHelper.upcallStub(draw_trapezoid.class, fi, _PangoRendererClass.draw_trapezoid$FUNC, session);
        }
        static draw_trapezoid ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, double __x2, double __x3, double __x4, double __x5, double __x6, double __x7) -> {
                try {
                    _PangoRendererClass.draw_trapezoid$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_trapezoid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_trapezoid"));
    public static VarHandle draw_trapezoid$VH() {
        return _PangoRendererClass.draw_trapezoid$VH;
    }
    public static MemoryAddress draw_trapezoid$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_trapezoid$VH.get(seg);
    }
    public static void draw_trapezoid$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.draw_trapezoid$VH.set(seg, x);
    }
    public static MemoryAddress draw_trapezoid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_trapezoid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_trapezoid$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.draw_trapezoid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_trapezoid draw_trapezoid (MemorySegment segment, MemorySession session) {
        return draw_trapezoid.ofAddress(draw_trapezoid$get(segment), session);
    }
    static final FunctionDescriptor draw_glyph$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle draw_glyph$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_glyph$FUNC
    );
    public interface draw_glyph {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, double _x3, double _x4);
        static MemorySegment allocate(draw_glyph fi, MemorySession session) {
            return RuntimeHelper.upcallStub(draw_glyph.class, fi, _PangoRendererClass.draw_glyph$FUNC, session);
        }
        static draw_glyph ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, double __x3, double __x4) -> {
                try {
                    _PangoRendererClass.draw_glyph$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_glyph$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_glyph"));
    public static VarHandle draw_glyph$VH() {
        return _PangoRendererClass.draw_glyph$VH;
    }
    public static MemoryAddress draw_glyph$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_glyph$VH.get(seg);
    }
    public static void draw_glyph$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.draw_glyph$VH.set(seg, x);
    }
    public static MemoryAddress draw_glyph$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_glyph$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_glyph$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.draw_glyph$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_glyph draw_glyph (MemorySegment segment, MemorySession session) {
        return draw_glyph.ofAddress(draw_glyph$get(segment), session);
    }
    static final FunctionDescriptor part_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle part_changed$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.part_changed$FUNC
    );
    public interface part_changed {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(part_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(part_changed.class, fi, _PangoRendererClass.part_changed$FUNC, session);
        }
        static part_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _PangoRendererClass.part_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle part_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("part_changed"));
    public static VarHandle part_changed$VH() {
        return _PangoRendererClass.part_changed$VH;
    }
    public static MemoryAddress part_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.part_changed$VH.get(seg);
    }
    public static void part_changed$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.part_changed$VH.set(seg, x);
    }
    public static MemoryAddress part_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.part_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void part_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.part_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static part_changed part_changed (MemorySegment segment, MemorySession session) {
        return part_changed.ofAddress(part_changed$get(segment), session);
    }
    static final FunctionDescriptor begin$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle begin$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.begin$FUNC
    );
    public interface begin {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(begin fi, MemorySession session) {
            return RuntimeHelper.upcallStub(begin.class, fi, _PangoRendererClass.begin$FUNC, session);
        }
        static begin ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _PangoRendererClass.begin$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle begin$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("begin"));
    public static VarHandle begin$VH() {
        return _PangoRendererClass.begin$VH;
    }
    public static MemoryAddress begin$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.begin$VH.get(seg);
    }
    public static void begin$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.begin$VH.set(seg, x);
    }
    public static MemoryAddress begin$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.begin$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void begin$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.begin$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static begin begin (MemorySegment segment, MemorySession session) {
        return begin.ofAddress(begin$get(segment), session);
    }
    static final FunctionDescriptor end$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle end$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.end$FUNC
    );
    public interface end {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(end fi, MemorySession session) {
            return RuntimeHelper.upcallStub(end.class, fi, _PangoRendererClass.end$FUNC, session);
        }
        static end ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _PangoRendererClass.end$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle end$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end"));
    public static VarHandle end$VH() {
        return _PangoRendererClass.end$VH;
    }
    public static MemoryAddress end$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.end$VH.get(seg);
    }
    public static void end$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.end$VH.set(seg, x);
    }
    public static MemoryAddress end$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.end$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.end$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static end end (MemorySegment segment, MemorySession session) {
        return end.ofAddress(end$get(segment), session);
    }
    static final FunctionDescriptor prepare_run$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle prepare_run$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.prepare_run$FUNC
    );
    public interface prepare_run {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(prepare_run fi, MemorySession session) {
            return RuntimeHelper.upcallStub(prepare_run.class, fi, _PangoRendererClass.prepare_run$FUNC, session);
        }
        static prepare_run ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _PangoRendererClass.prepare_run$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle prepare_run$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("prepare_run"));
    public static VarHandle prepare_run$VH() {
        return _PangoRendererClass.prepare_run$VH;
    }
    public static MemoryAddress prepare_run$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.prepare_run$VH.get(seg);
    }
    public static void prepare_run$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.prepare_run$VH.set(seg, x);
    }
    public static MemoryAddress prepare_run$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.prepare_run$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void prepare_run$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.prepare_run$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static prepare_run prepare_run (MemorySegment segment, MemorySession session) {
        return prepare_run.ofAddress(prepare_run$get(segment), session);
    }
    static final FunctionDescriptor draw_glyph_item$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_glyph_item$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass.draw_glyph_item$FUNC
    );
    public interface draw_glyph_item {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, int _x4);
        static MemorySegment allocate(draw_glyph_item fi, MemorySession session) {
            return RuntimeHelper.upcallStub(draw_glyph_item.class, fi, _PangoRendererClass.draw_glyph_item$FUNC, session);
        }
        static draw_glyph_item ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, int __x4) -> {
                try {
                    _PangoRendererClass.draw_glyph_item$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_glyph_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_glyph_item"));
    public static VarHandle draw_glyph_item$VH() {
        return _PangoRendererClass.draw_glyph_item$VH;
    }
    public static MemoryAddress draw_glyph_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_glyph_item$VH.get(seg);
    }
    public static void draw_glyph_item$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass.draw_glyph_item$VH.set(seg, x);
    }
    public static MemoryAddress draw_glyph_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass.draw_glyph_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_glyph_item$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass.draw_glyph_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_glyph_item draw_glyph_item (MemorySegment segment, MemorySession session) {
        return draw_glyph_item.ofAddress(draw_glyph_item$get(segment), session);
    }
    static final FunctionDescriptor _pango_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved2$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass._pango_reserved2$FUNC
    );
    public interface _pango_reserved2 {

        void apply();
        static MemorySegment allocate(_pango_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_pango_reserved2.class, fi, _PangoRendererClass._pango_reserved2$FUNC, session);
        }
        static _pango_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _PangoRendererClass._pango_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved2"));
    public static VarHandle _pango_reserved2$VH() {
        return _PangoRendererClass._pango_reserved2$VH;
    }
    public static MemoryAddress _pango_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass._pango_reserved2$VH.get(seg);
    }
    public static void _pango_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass._pango_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _pango_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass._pango_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass._pango_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved2 _pango_reserved2 (MemorySegment segment, MemorySession session) {
        return _pango_reserved2.ofAddress(_pango_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _pango_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved3$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass._pango_reserved3$FUNC
    );
    public interface _pango_reserved3 {

        void apply();
        static MemorySegment allocate(_pango_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_pango_reserved3.class, fi, _PangoRendererClass._pango_reserved3$FUNC, session);
        }
        static _pango_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _PangoRendererClass._pango_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved3"));
    public static VarHandle _pango_reserved3$VH() {
        return _PangoRendererClass._pango_reserved3$VH;
    }
    public static MemoryAddress _pango_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass._pango_reserved3$VH.get(seg);
    }
    public static void _pango_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass._pango_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _pango_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass._pango_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass._pango_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved3 _pango_reserved3 (MemorySegment segment, MemorySession session) {
        return _pango_reserved3.ofAddress(_pango_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _pango_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _pango_reserved4$MH = RuntimeHelper.downcallHandle(
        _PangoRendererClass._pango_reserved4$FUNC
    );
    public interface _pango_reserved4 {

        void apply();
        static MemorySegment allocate(_pango_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_pango_reserved4.class, fi, _PangoRendererClass._pango_reserved4$FUNC, session);
        }
        static _pango_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _PangoRendererClass._pango_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _pango_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_pango_reserved4"));
    public static VarHandle _pango_reserved4$VH() {
        return _PangoRendererClass._pango_reserved4$VH;
    }
    public static MemoryAddress _pango_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass._pango_reserved4$VH.get(seg);
    }
    public static void _pango_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _PangoRendererClass._pango_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _pango_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoRendererClass._pango_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _pango_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoRendererClass._pango_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _pango_reserved4 _pango_reserved4 (MemorySegment segment, MemorySession session) {
        return _pango_reserved4.ofAddress(_pango_reserved4$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


