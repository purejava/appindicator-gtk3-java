// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkTreeCellDataFunc {

    void apply(java.lang.foreign.MemoryAddress tree_column, java.lang.foreign.MemoryAddress cell, java.lang.foreign.MemoryAddress tree_model, java.lang.foreign.MemoryAddress iter, java.lang.foreign.MemoryAddress data);
    static MemorySegment allocate(GtkTreeCellDataFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkTreeCellDataFunc.class, fi, constants$1578.GtkTreeCellDataFunc$FUNC, session);
    }
    static GtkTreeCellDataFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _tree_column, java.lang.foreign.MemoryAddress _cell, java.lang.foreign.MemoryAddress _tree_model, java.lang.foreign.MemoryAddress _iter, java.lang.foreign.MemoryAddress _data) -> {
            try {
                constants$1578.GtkTreeCellDataFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_tree_column, (java.lang.foreign.Addressable)_cell, (java.lang.foreign.Addressable)_tree_model, (java.lang.foreign.Addressable)_iter, (java.lang.foreign.Addressable)_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


