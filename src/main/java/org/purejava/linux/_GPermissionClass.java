// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GPermissionClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("acquire"),
        Constants$root.C_POINTER$LAYOUT.withName("acquire_async"),
        Constants$root.C_POINTER$LAYOUT.withName("acquire_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("release"),
        Constants$root.C_POINTER$LAYOUT.withName("release_async"),
        Constants$root.C_POINTER$LAYOUT.withName("release_finish"),
        MemoryLayout.sequenceLayout(16, Constants$root.C_POINTER$LAYOUT).withName("reserved")
    ).withName("_GPermissionClass");
    public static MemoryLayout $LAYOUT() {
        return _GPermissionClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor acquire$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle acquire$MH = RuntimeHelper.downcallHandle(
        _GPermissionClass.acquire$FUNC
    );
    public interface acquire {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(acquire fi, MemorySession session) {
            return RuntimeHelper.upcallStub(acquire.class, fi, _GPermissionClass.acquire$FUNC, session);
        }
        static acquire ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GPermissionClass.acquire$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle acquire$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("acquire"));
    public static VarHandle acquire$VH() {
        return _GPermissionClass.acquire$VH;
    }
    public static MemoryAddress acquire$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.acquire$VH.get(seg);
    }
    public static void acquire$set( MemorySegment seg, MemoryAddress x) {
        _GPermissionClass.acquire$VH.set(seg, x);
    }
    public static MemoryAddress acquire$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.acquire$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void acquire$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPermissionClass.acquire$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static acquire acquire (MemorySegment segment, MemorySession session) {
        return acquire.ofAddress(acquire$get(segment), session);
    }
    static final FunctionDescriptor acquire_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle acquire_async$MH = RuntimeHelper.downcallHandle(
        _GPermissionClass.acquire_async$FUNC
    );
    public interface acquire_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(acquire_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(acquire_async.class, fi, _GPermissionClass.acquire_async$FUNC, session);
        }
        static acquire_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GPermissionClass.acquire_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle acquire_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("acquire_async"));
    public static VarHandle acquire_async$VH() {
        return _GPermissionClass.acquire_async$VH;
    }
    public static MemoryAddress acquire_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.acquire_async$VH.get(seg);
    }
    public static void acquire_async$set( MemorySegment seg, MemoryAddress x) {
        _GPermissionClass.acquire_async$VH.set(seg, x);
    }
    public static MemoryAddress acquire_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.acquire_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void acquire_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPermissionClass.acquire_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static acquire_async acquire_async (MemorySegment segment, MemorySession session) {
        return acquire_async.ofAddress(acquire_async$get(segment), session);
    }
    static final FunctionDescriptor acquire_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle acquire_finish$MH = RuntimeHelper.downcallHandle(
        _GPermissionClass.acquire_finish$FUNC
    );
    public interface acquire_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(acquire_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(acquire_finish.class, fi, _GPermissionClass.acquire_finish$FUNC, session);
        }
        static acquire_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GPermissionClass.acquire_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle acquire_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("acquire_finish"));
    public static VarHandle acquire_finish$VH() {
        return _GPermissionClass.acquire_finish$VH;
    }
    public static MemoryAddress acquire_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.acquire_finish$VH.get(seg);
    }
    public static void acquire_finish$set( MemorySegment seg, MemoryAddress x) {
        _GPermissionClass.acquire_finish$VH.set(seg, x);
    }
    public static MemoryAddress acquire_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.acquire_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void acquire_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPermissionClass.acquire_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static acquire_finish acquire_finish (MemorySegment segment, MemorySession session) {
        return acquire_finish.ofAddress(acquire_finish$get(segment), session);
    }
    static final FunctionDescriptor release$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle release$MH = RuntimeHelper.downcallHandle(
        _GPermissionClass.release$FUNC
    );
    public interface release {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(release fi, MemorySession session) {
            return RuntimeHelper.upcallStub(release.class, fi, _GPermissionClass.release$FUNC, session);
        }
        static release ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GPermissionClass.release$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle release$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("release"));
    public static VarHandle release$VH() {
        return _GPermissionClass.release$VH;
    }
    public static MemoryAddress release$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.release$VH.get(seg);
    }
    public static void release$set( MemorySegment seg, MemoryAddress x) {
        _GPermissionClass.release$VH.set(seg, x);
    }
    public static MemoryAddress release$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.release$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void release$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPermissionClass.release$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static release release (MemorySegment segment, MemorySession session) {
        return release.ofAddress(release$get(segment), session);
    }
    static final FunctionDescriptor release_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle release_async$MH = RuntimeHelper.downcallHandle(
        _GPermissionClass.release_async$FUNC
    );
    public interface release_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(release_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(release_async.class, fi, _GPermissionClass.release_async$FUNC, session);
        }
        static release_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GPermissionClass.release_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle release_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("release_async"));
    public static VarHandle release_async$VH() {
        return _GPermissionClass.release_async$VH;
    }
    public static MemoryAddress release_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.release_async$VH.get(seg);
    }
    public static void release_async$set( MemorySegment seg, MemoryAddress x) {
        _GPermissionClass.release_async$VH.set(seg, x);
    }
    public static MemoryAddress release_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.release_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void release_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPermissionClass.release_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static release_async release_async (MemorySegment segment, MemorySession session) {
        return release_async.ofAddress(release_async$get(segment), session);
    }
    static final FunctionDescriptor release_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle release_finish$MH = RuntimeHelper.downcallHandle(
        _GPermissionClass.release_finish$FUNC
    );
    public interface release_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(release_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(release_finish.class, fi, _GPermissionClass.release_finish$FUNC, session);
        }
        static release_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GPermissionClass.release_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle release_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("release_finish"));
    public static VarHandle release_finish$VH() {
        return _GPermissionClass.release_finish$VH;
    }
    public static MemoryAddress release_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.release_finish$VH.get(seg);
    }
    public static void release_finish$set( MemorySegment seg, MemoryAddress x) {
        _GPermissionClass.release_finish$VH.set(seg, x);
    }
    public static MemoryAddress release_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GPermissionClass.release_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void release_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GPermissionClass.release_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static release_finish release_finish (MemorySegment segment, MemorySession session) {
        return release_finish.ofAddress(release_finish$get(segment), session);
    }
    public static MemorySegment reserved$slice(MemorySegment seg) {
        return seg.asSlice(184, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


