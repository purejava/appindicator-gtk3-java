// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GQueue {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("head"),
        Constants$root.C_POINTER$LAYOUT.withName("tail"),
        Constants$root.C_INT$LAYOUT.withName("length"),
        MemoryLayout.paddingLayout(32)
    ).withName("_GQueue");
    public static MemoryLayout $LAYOUT() {
        return _GQueue.$struct$LAYOUT;
    }
    static final VarHandle head$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("head"));
    public static VarHandle head$VH() {
        return _GQueue.head$VH;
    }
    public static MemoryAddress head$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GQueue.head$VH.get(seg);
    }
    public static void head$set( MemorySegment seg, MemoryAddress x) {
        _GQueue.head$VH.set(seg, x);
    }
    public static MemoryAddress head$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GQueue.head$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void head$set(MemorySegment seg, long index, MemoryAddress x) {
        _GQueue.head$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tail$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tail"));
    public static VarHandle tail$VH() {
        return _GQueue.tail$VH;
    }
    public static MemoryAddress tail$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GQueue.tail$VH.get(seg);
    }
    public static void tail$set( MemorySegment seg, MemoryAddress x) {
        _GQueue.tail$VH.set(seg, x);
    }
    public static MemoryAddress tail$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GQueue.tail$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tail$set(MemorySegment seg, long index, MemoryAddress x) {
        _GQueue.tail$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle length$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("length"));
    public static VarHandle length$VH() {
        return _GQueue.length$VH;
    }
    public static int length$get(MemorySegment seg) {
        return (int)_GQueue.length$VH.get(seg);
    }
    public static void length$set( MemorySegment seg, int x) {
        _GQueue.length$VH.set(seg, x);
    }
    public static int length$get(MemorySegment seg, long index) {
        return (int)_GQueue.length$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void length$set(MemorySegment seg, long index, int x) {
        _GQueue.length$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


