// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PangoGlyphString {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("num_glyphs"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("glyphs"),
        Constants$root.C_POINTER$LAYOUT.withName("log_clusters"),
        Constants$root.C_INT$LAYOUT.withName("space"),
        MemoryLayout.paddingLayout(32)
    ).withName("_PangoGlyphString");
    public static MemoryLayout $LAYOUT() {
        return _PangoGlyphString.$struct$LAYOUT;
    }
    static final VarHandle num_glyphs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("num_glyphs"));
    public static VarHandle num_glyphs$VH() {
        return _PangoGlyphString.num_glyphs$VH;
    }
    public static int num_glyphs$get(MemorySegment seg) {
        return (int)_PangoGlyphString.num_glyphs$VH.get(seg);
    }
    public static void num_glyphs$set( MemorySegment seg, int x) {
        _PangoGlyphString.num_glyphs$VH.set(seg, x);
    }
    public static int num_glyphs$get(MemorySegment seg, long index) {
        return (int)_PangoGlyphString.num_glyphs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void num_glyphs$set(MemorySegment seg, long index, int x) {
        _PangoGlyphString.num_glyphs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle glyphs$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("glyphs"));
    public static VarHandle glyphs$VH() {
        return _PangoGlyphString.glyphs$VH;
    }
    public static MemoryAddress glyphs$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoGlyphString.glyphs$VH.get(seg);
    }
    public static void glyphs$set( MemorySegment seg, MemoryAddress x) {
        _PangoGlyphString.glyphs$VH.set(seg, x);
    }
    public static MemoryAddress glyphs$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoGlyphString.glyphs$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void glyphs$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoGlyphString.glyphs$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle log_clusters$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("log_clusters"));
    public static VarHandle log_clusters$VH() {
        return _PangoGlyphString.log_clusters$VH;
    }
    public static MemoryAddress log_clusters$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoGlyphString.log_clusters$VH.get(seg);
    }
    public static void log_clusters$set( MemorySegment seg, MemoryAddress x) {
        _PangoGlyphString.log_clusters$VH.set(seg, x);
    }
    public static MemoryAddress log_clusters$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoGlyphString.log_clusters$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void log_clusters$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoGlyphString.log_clusters$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle space$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("space"));
    public static VarHandle space$VH() {
        return _PangoGlyphString.space$VH;
    }
    public static int space$get(MemorySegment seg) {
        return (int)_PangoGlyphString.space$VH.get(seg);
    }
    public static void space$set( MemorySegment seg, int x) {
        _PangoGlyphString.space$VH.set(seg, x);
    }
    public static int space$get(MemorySegment seg, long index) {
        return (int)_PangoGlyphString.space$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void space$set(MemorySegment seg, long index, int x) {
        _PangoGlyphString.space$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


