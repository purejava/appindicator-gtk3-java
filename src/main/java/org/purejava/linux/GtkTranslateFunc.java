// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkTranslateFunc {

    java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress path, java.lang.foreign.MemoryAddress func_data);
    static MemorySegment allocate(GtkTranslateFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkTranslateFunc.class, fi, constants$2113.GtkTranslateFunc$FUNC, session);
    }
    static GtkTranslateFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _path, java.lang.foreign.MemoryAddress _func_data) -> {
            try {
                return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)constants$2113.GtkTranslateFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_path, (java.lang.foreign.Addressable)_func_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


