// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkToggleActionEntry {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("stock_id"),
        Constants$root.C_POINTER$LAYOUT.withName("label"),
        Constants$root.C_POINTER$LAYOUT.withName("accelerator"),
        Constants$root.C_POINTER$LAYOUT.withName("tooltip"),
        Constants$root.C_POINTER$LAYOUT.withName("callback"),
        Constants$root.C_INT$LAYOUT.withName("is_active"),
        MemoryLayout.paddingLayout(32)
    ).withName("_GtkToggleActionEntry");
    public static MemoryLayout $LAYOUT() {
        return _GtkToggleActionEntry.$struct$LAYOUT;
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return _GtkToggleActionEntry.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        _GtkToggleActionEntry.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkToggleActionEntry.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle stock_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("stock_id"));
    public static VarHandle stock_id$VH() {
        return _GtkToggleActionEntry.stock_id$VH;
    }
    public static MemoryAddress stock_id$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.stock_id$VH.get(seg);
    }
    public static void stock_id$set( MemorySegment seg, MemoryAddress x) {
        _GtkToggleActionEntry.stock_id$VH.set(seg, x);
    }
    public static MemoryAddress stock_id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.stock_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void stock_id$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkToggleActionEntry.stock_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle label$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("label"));
    public static VarHandle label$VH() {
        return _GtkToggleActionEntry.label$VH;
    }
    public static MemoryAddress label$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.label$VH.get(seg);
    }
    public static void label$set( MemorySegment seg, MemoryAddress x) {
        _GtkToggleActionEntry.label$VH.set(seg, x);
    }
    public static MemoryAddress label$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.label$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void label$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkToggleActionEntry.label$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle accelerator$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("accelerator"));
    public static VarHandle accelerator$VH() {
        return _GtkToggleActionEntry.accelerator$VH;
    }
    public static MemoryAddress accelerator$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.accelerator$VH.get(seg);
    }
    public static void accelerator$set( MemorySegment seg, MemoryAddress x) {
        _GtkToggleActionEntry.accelerator$VH.set(seg, x);
    }
    public static MemoryAddress accelerator$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.accelerator$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void accelerator$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkToggleActionEntry.accelerator$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle tooltip$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tooltip"));
    public static VarHandle tooltip$VH() {
        return _GtkToggleActionEntry.tooltip$VH;
    }
    public static MemoryAddress tooltip$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.tooltip$VH.get(seg);
    }
    public static void tooltip$set( MemorySegment seg, MemoryAddress x) {
        _GtkToggleActionEntry.tooltip$VH.set(seg, x);
    }
    public static MemoryAddress tooltip$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.tooltip$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tooltip$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkToggleActionEntry.tooltip$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle callback$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("callback"));
    public static VarHandle callback$VH() {
        return _GtkToggleActionEntry.callback$VH;
    }
    public static MemoryAddress callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.callback$VH.get(seg);
    }
    public static void callback$set( MemorySegment seg, MemoryAddress x) {
        _GtkToggleActionEntry.callback$VH.set(seg, x);
    }
    public static MemoryAddress callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkToggleActionEntry.callback$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void callback$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkToggleActionEntry.callback$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static GCallback callback (MemorySegment segment, MemorySession session) {
        return GCallback.ofAddress(callback$get(segment), session);
    }
    static final VarHandle is_active$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_active"));
    public static VarHandle is_active$VH() {
        return _GtkToggleActionEntry.is_active$VH;
    }
    public static int is_active$get(MemorySegment seg) {
        return (int)_GtkToggleActionEntry.is_active$VH.get(seg);
    }
    public static void is_active$set( MemorySegment seg, int x) {
        _GtkToggleActionEntry.is_active$VH.set(seg, x);
    }
    public static int is_active$get(MemorySegment seg, long index) {
        return (int)_GtkToggleActionEntry.is_active$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_active$set(MemorySegment seg, long index, int x) {
        _GtkToggleActionEntry.is_active$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


