// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GValue {
 *     GType g_type;
 *     union  data[2];
 * };
 * }
 */
public class _GValue {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
        MemoryLayout.sequenceLayout(2, MemoryLayout.unionLayout(
            Constants$root.C_INT$LAYOUT.withName("v_int"),
            Constants$root.C_INT$LAYOUT.withName("v_uint"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("v_long"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("v_ulong"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("v_int64"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("v_uint64"),
            Constants$root.C_FLOAT$LAYOUT.withName("v_float"),
            Constants$root.C_DOUBLE$LAYOUT.withName("v_double"),
            Constants$root.C_POINTER$LAYOUT.withName("v_pointer")
        )).withName("data")
    ).withName("_GValue");
    public static MemoryLayout $LAYOUT() {
        return _GValue.$struct$LAYOUT;
    }
    static final VarHandle g_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("g_type"));
    public static VarHandle g_type$VH() {
        return _GValue.g_type$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GType g_type;
     * }
     */
    public static long g_type$get(MemorySegment seg) {
        return (long)_GValue.g_type$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GType g_type;
     * }
     */
    public static void g_type$set(MemorySegment seg, long x) {
        _GValue.g_type$VH.set(seg, x);
    }
    public static long g_type$get(MemorySegment seg, long index) {
        return (long)_GValue.g_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void g_type$set(MemorySegment seg, long index, long x) {
        _GValue.g_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment data$slice(MemorySegment seg) {
        return seg.asSlice(8, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


