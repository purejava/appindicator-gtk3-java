// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkEventGrabBroken {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("window"),
        Constants$root.C_CHAR$LAYOUT.withName("send_event"),
        MemoryLayout.paddingLayout(24),
        Constants$root.C_INT$LAYOUT.withName("keyboard"),
        Constants$root.C_INT$LAYOUT.withName("implicit"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("grab_window")
    ).withName("_GdkEventGrabBroken");
    public static MemoryLayout $LAYOUT() {
        return _GdkEventGrabBroken.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _GdkEventGrabBroken.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)_GdkEventGrabBroken.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        _GdkEventGrabBroken.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)_GdkEventGrabBroken.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        _GdkEventGrabBroken.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle window$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("window"));
    public static VarHandle window$VH() {
        return _GdkEventGrabBroken.window$VH;
    }
    public static MemoryAddress window$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkEventGrabBroken.window$VH.get(seg);
    }
    public static void window$set( MemorySegment seg, MemoryAddress x) {
        _GdkEventGrabBroken.window$VH.set(seg, x);
    }
    public static MemoryAddress window$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkEventGrabBroken.window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void window$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkEventGrabBroken.window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle send_event$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("send_event"));
    public static VarHandle send_event$VH() {
        return _GdkEventGrabBroken.send_event$VH;
    }
    public static byte send_event$get(MemorySegment seg) {
        return (byte)_GdkEventGrabBroken.send_event$VH.get(seg);
    }
    public static void send_event$set( MemorySegment seg, byte x) {
        _GdkEventGrabBroken.send_event$VH.set(seg, x);
    }
    public static byte send_event$get(MemorySegment seg, long index) {
        return (byte)_GdkEventGrabBroken.send_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void send_event$set(MemorySegment seg, long index, byte x) {
        _GdkEventGrabBroken.send_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle keyboard$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("keyboard"));
    public static VarHandle keyboard$VH() {
        return _GdkEventGrabBroken.keyboard$VH;
    }
    public static int keyboard$get(MemorySegment seg) {
        return (int)_GdkEventGrabBroken.keyboard$VH.get(seg);
    }
    public static void keyboard$set( MemorySegment seg, int x) {
        _GdkEventGrabBroken.keyboard$VH.set(seg, x);
    }
    public static int keyboard$get(MemorySegment seg, long index) {
        return (int)_GdkEventGrabBroken.keyboard$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void keyboard$set(MemorySegment seg, long index, int x) {
        _GdkEventGrabBroken.keyboard$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle implicit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("implicit"));
    public static VarHandle implicit$VH() {
        return _GdkEventGrabBroken.implicit$VH;
    }
    public static int implicit$get(MemorySegment seg) {
        return (int)_GdkEventGrabBroken.implicit$VH.get(seg);
    }
    public static void implicit$set( MemorySegment seg, int x) {
        _GdkEventGrabBroken.implicit$VH.set(seg, x);
    }
    public static int implicit$get(MemorySegment seg, long index) {
        return (int)_GdkEventGrabBroken.implicit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void implicit$set(MemorySegment seg, long index, int x) {
        _GdkEventGrabBroken.implicit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle grab_window$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("grab_window"));
    public static VarHandle grab_window$VH() {
        return _GdkEventGrabBroken.grab_window$VH;
    }
    public static MemoryAddress grab_window$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkEventGrabBroken.grab_window$VH.get(seg);
    }
    public static void grab_window$set( MemorySegment seg, MemoryAddress x) {
        _GdkEventGrabBroken.grab_window$VH.set(seg, x);
    }
    public static MemoryAddress grab_window$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkEventGrabBroken.grab_window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void grab_window$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkEventGrabBroken.grab_window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


