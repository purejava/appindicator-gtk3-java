// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkMenuItemClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        MemoryLayout.structLayout(
                            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                        ).withName("g_type_class"),
                        Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                        Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                        Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                        Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                        Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                        Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                        Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                        Constants$root.C_POINTER$LAYOUT.withName("notify"),
                        Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                        Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                        MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
                    ).withName("parent_class"),
                    Constants$root.C_INT$LAYOUT.withName("activate_signal"),
                    MemoryLayout.paddingLayout(32),
                    Constants$root.C_POINTER$LAYOUT.withName("dispatch_child_properties_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("destroy"),
                    Constants$root.C_POINTER$LAYOUT.withName("show"),
                    Constants$root.C_POINTER$LAYOUT.withName("show_all"),
                    Constants$root.C_POINTER$LAYOUT.withName("hide"),
                    Constants$root.C_POINTER$LAYOUT.withName("map"),
                    Constants$root.C_POINTER$LAYOUT.withName("unmap"),
                    Constants$root.C_POINTER$LAYOUT.withName("realize"),
                    Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
                    Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
                    Constants$root.C_POINTER$LAYOUT.withName("state_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("parent_set"),
                    Constants$root.C_POINTER$LAYOUT.withName("hierarchy_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("style_set"),
                    Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("grab_notify"),
                    Constants$root.C_POINTER$LAYOUT.withName("child_notify"),
                    Constants$root.C_POINTER$LAYOUT.withName("draw"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width_for_height"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_for_width"),
                    Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
                    Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
                    Constants$root.C_POINTER$LAYOUT.withName("focus"),
                    Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
                    Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
                    Constants$root.C_POINTER$LAYOUT.withName("event"),
                    Constants$root.C_POINTER$LAYOUT.withName("button_press_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("button_release_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("scroll_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("motion_notify_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("delete_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("destroy_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("key_press_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("key_release_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("enter_notify_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("leave_notify_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("configure_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("focus_in_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("focus_out_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("map_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("unmap_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("property_notify_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("selection_clear_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("selection_request_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("selection_notify_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("proximity_in_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("proximity_out_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("visibility_notify_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("window_state_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("damage_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("grab_broken_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("selection_get"),
                    Constants$root.C_POINTER$LAYOUT.withName("selection_received"),
                    Constants$root.C_POINTER$LAYOUT.withName("drag_begin"),
                    Constants$root.C_POINTER$LAYOUT.withName("drag_end"),
                    Constants$root.C_POINTER$LAYOUT.withName("drag_data_get"),
                    Constants$root.C_POINTER$LAYOUT.withName("drag_data_delete"),
                    Constants$root.C_POINTER$LAYOUT.withName("drag_leave"),
                    Constants$root.C_POINTER$LAYOUT.withName("drag_motion"),
                    Constants$root.C_POINTER$LAYOUT.withName("drag_drop"),
                    Constants$root.C_POINTER$LAYOUT.withName("drag_data_received"),
                    Constants$root.C_POINTER$LAYOUT.withName("drag_failed"),
                    Constants$root.C_POINTER$LAYOUT.withName("popup_menu"),
                    Constants$root.C_POINTER$LAYOUT.withName("show_help"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_accessible"),
                    Constants$root.C_POINTER$LAYOUT.withName("screen_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("can_activate_accel"),
                    Constants$root.C_POINTER$LAYOUT.withName("composited_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
                    Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
                    Constants$root.C_POINTER$LAYOUT.withName("adjust_size_request"),
                    Constants$root.C_POINTER$LAYOUT.withName("adjust_size_allocation"),
                    Constants$root.C_POINTER$LAYOUT.withName("style_updated"),
                    Constants$root.C_POINTER$LAYOUT.withName("touch_event"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_and_baseline_for_width"),
                    Constants$root.C_POINTER$LAYOUT.withName("adjust_baseline_request"),
                    Constants$root.C_POINTER$LAYOUT.withName("adjust_baseline_allocation"),
                    Constants$root.C_POINTER$LAYOUT.withName("queue_draw_region"),
                    Constants$root.C_POINTER$LAYOUT.withName("priv"),
                    Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
                    Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7")
                ).withName("parent_class"),
                Constants$root.C_POINTER$LAYOUT.withName("add"),
                Constants$root.C_POINTER$LAYOUT.withName("remove"),
                Constants$root.C_POINTER$LAYOUT.withName("check_resize"),
                Constants$root.C_POINTER$LAYOUT.withName("forall"),
                Constants$root.C_POINTER$LAYOUT.withName("set_focus_child"),
                Constants$root.C_POINTER$LAYOUT.withName("child_type"),
                Constants$root.C_POINTER$LAYOUT.withName("composite_name"),
                Constants$root.C_POINTER$LAYOUT.withName("set_child_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_child_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_path_for_child"),
                MemoryLayout.structLayout(
                    MemoryLayout.paddingLayout(1).withName("_handle_border_width"),
                    MemoryLayout.paddingLayout(63)
                ),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved8")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4")
        ).withName("parent_class"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(1).withName("hide_on_activate"),
            MemoryLayout.paddingLayout(63)
        ),
        Constants$root.C_POINTER$LAYOUT.withName("activate"),
        Constants$root.C_POINTER$LAYOUT.withName("activate_item"),
        Constants$root.C_POINTER$LAYOUT.withName("toggle_size_request"),
        Constants$root.C_POINTER$LAYOUT.withName("toggle_size_allocate"),
        Constants$root.C_POINTER$LAYOUT.withName("set_label"),
        Constants$root.C_POINTER$LAYOUT.withName("get_label"),
        Constants$root.C_POINTER$LAYOUT.withName("select"),
        Constants$root.C_POINTER$LAYOUT.withName("deselect"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4")
    ).withName("_GtkMenuItemClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkMenuItemClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 1008);
    }
    static final FunctionDescriptor activate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass.activate$FUNC
    );
    public interface activate {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(activate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(activate.class, fi, _GtkMenuItemClass.activate$FUNC, session);
        }
        static activate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkMenuItemClass.activate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate"));
    public static VarHandle activate$VH() {
        return _GtkMenuItemClass.activate$VH;
    }
    public static MemoryAddress activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.activate$VH.get(seg);
    }
    public static void activate$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass.activate$VH.set(seg, x);
    }
    public static MemoryAddress activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass.activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate (MemorySegment segment, MemorySession session) {
        return activate.ofAddress(activate$get(segment), session);
    }
    static final FunctionDescriptor activate_item$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate_item$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass.activate_item$FUNC
    );
    public interface activate_item {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(activate_item fi, MemorySession session) {
            return RuntimeHelper.upcallStub(activate_item.class, fi, _GtkMenuItemClass.activate_item$FUNC, session);
        }
        static activate_item ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkMenuItemClass.activate_item$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate_item"));
    public static VarHandle activate_item$VH() {
        return _GtkMenuItemClass.activate_item$VH;
    }
    public static MemoryAddress activate_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.activate_item$VH.get(seg);
    }
    public static void activate_item$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass.activate_item$VH.set(seg, x);
    }
    public static MemoryAddress activate_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.activate_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate_item$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass.activate_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate_item activate_item (MemorySegment segment, MemorySession session) {
        return activate_item.ofAddress(activate_item$get(segment), session);
    }
    static final FunctionDescriptor toggle_size_request$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle toggle_size_request$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass.toggle_size_request$FUNC
    );
    public interface toggle_size_request {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(toggle_size_request fi, MemorySession session) {
            return RuntimeHelper.upcallStub(toggle_size_request.class, fi, _GtkMenuItemClass.toggle_size_request$FUNC, session);
        }
        static toggle_size_request ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkMenuItemClass.toggle_size_request$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle toggle_size_request$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("toggle_size_request"));
    public static VarHandle toggle_size_request$VH() {
        return _GtkMenuItemClass.toggle_size_request$VH;
    }
    public static MemoryAddress toggle_size_request$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.toggle_size_request$VH.get(seg);
    }
    public static void toggle_size_request$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass.toggle_size_request$VH.set(seg, x);
    }
    public static MemoryAddress toggle_size_request$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.toggle_size_request$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_size_request$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass.toggle_size_request$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_size_request toggle_size_request (MemorySegment segment, MemorySession session) {
        return toggle_size_request.ofAddress(toggle_size_request$get(segment), session);
    }
    static final FunctionDescriptor toggle_size_allocate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle toggle_size_allocate$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass.toggle_size_allocate$FUNC
    );
    public interface toggle_size_allocate {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(toggle_size_allocate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(toggle_size_allocate.class, fi, _GtkMenuItemClass.toggle_size_allocate$FUNC, session);
        }
        static toggle_size_allocate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _GtkMenuItemClass.toggle_size_allocate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle toggle_size_allocate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("toggle_size_allocate"));
    public static VarHandle toggle_size_allocate$VH() {
        return _GtkMenuItemClass.toggle_size_allocate$VH;
    }
    public static MemoryAddress toggle_size_allocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.toggle_size_allocate$VH.get(seg);
    }
    public static void toggle_size_allocate$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass.toggle_size_allocate$VH.set(seg, x);
    }
    public static MemoryAddress toggle_size_allocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.toggle_size_allocate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_size_allocate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass.toggle_size_allocate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_size_allocate toggle_size_allocate (MemorySegment segment, MemorySession session) {
        return toggle_size_allocate.ofAddress(toggle_size_allocate$get(segment), session);
    }
    static final FunctionDescriptor set_label$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_label$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass.set_label$FUNC
    );
    public interface set_label {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_label fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_label.class, fi, _GtkMenuItemClass.set_label$FUNC, session);
        }
        static set_label ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkMenuItemClass.set_label$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_label$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_label"));
    public static VarHandle set_label$VH() {
        return _GtkMenuItemClass.set_label$VH;
    }
    public static MemoryAddress set_label$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.set_label$VH.get(seg);
    }
    public static void set_label$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass.set_label$VH.set(seg, x);
    }
    public static MemoryAddress set_label$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.set_label$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_label$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass.set_label$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_label set_label (MemorySegment segment, MemorySession session) {
        return set_label.ofAddress(set_label$get(segment), session);
    }
    static final FunctionDescriptor get_label$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_label$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass.get_label$FUNC
    );
    public interface get_label {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_label fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_label.class, fi, _GtkMenuItemClass.get_label$FUNC, session);
        }
        static get_label ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkMenuItemClass.get_label$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_label$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_label"));
    public static VarHandle get_label$VH() {
        return _GtkMenuItemClass.get_label$VH;
    }
    public static MemoryAddress get_label$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.get_label$VH.get(seg);
    }
    public static void get_label$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass.get_label$VH.set(seg, x);
    }
    public static MemoryAddress get_label$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.get_label$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_label$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass.get_label$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_label get_label (MemorySegment segment, MemorySession session) {
        return get_label.ofAddress(get_label$get(segment), session);
    }
    static final FunctionDescriptor select$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle select$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass.select$FUNC
    );
    public interface select {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(select fi, MemorySession session) {
            return RuntimeHelper.upcallStub(select.class, fi, _GtkMenuItemClass.select$FUNC, session);
        }
        static select ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkMenuItemClass.select$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle select$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("select"));
    public static VarHandle select$VH() {
        return _GtkMenuItemClass.select$VH;
    }
    public static MemoryAddress select$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.select$VH.get(seg);
    }
    public static void select$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass.select$VH.set(seg, x);
    }
    public static MemoryAddress select$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.select$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void select$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass.select$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static select select (MemorySegment segment, MemorySession session) {
        return select.ofAddress(select$get(segment), session);
    }
    static final FunctionDescriptor deselect$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle deselect$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass.deselect$FUNC
    );
    public interface deselect {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(deselect fi, MemorySession session) {
            return RuntimeHelper.upcallStub(deselect.class, fi, _GtkMenuItemClass.deselect$FUNC, session);
        }
        static deselect ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkMenuItemClass.deselect$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle deselect$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("deselect"));
    public static VarHandle deselect$VH() {
        return _GtkMenuItemClass.deselect$VH;
    }
    public static MemoryAddress deselect$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.deselect$VH.get(seg);
    }
    public static void deselect$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass.deselect$VH.set(seg, x);
    }
    public static MemoryAddress deselect$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass.deselect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void deselect$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass.deselect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static deselect deselect (MemorySegment segment, MemorySession session) {
        return deselect.ofAddress(deselect$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass._gtk_reserved1$FUNC
    );
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved1.class, fi, _GtkMenuItemClass._gtk_reserved1$FUNC, session);
        }
        static _gtk_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkMenuItemClass._gtk_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkMenuItemClass._gtk_reserved1$VH;
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass._gtk_reserved1$VH.get(seg);
    }
    public static void _gtk_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass._gtk_reserved2$FUNC
    );
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved2.class, fi, _GtkMenuItemClass._gtk_reserved2$FUNC, session);
        }
        static _gtk_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkMenuItemClass._gtk_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkMenuItemClass._gtk_reserved2$VH;
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass._gtk_reserved2$VH.get(seg);
    }
    public static void _gtk_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass._gtk_reserved3$FUNC
    );
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved3.class, fi, _GtkMenuItemClass._gtk_reserved3$FUNC, session);
        }
        static _gtk_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkMenuItemClass._gtk_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkMenuItemClass._gtk_reserved3$VH;
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass._gtk_reserved3$VH.get(seg);
    }
    public static void _gtk_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4$MH = RuntimeHelper.downcallHandle(
        _GtkMenuItemClass._gtk_reserved4$FUNC
    );
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved4.class, fi, _GtkMenuItemClass._gtk_reserved4$FUNC, session);
        }
        static _gtk_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkMenuItemClass._gtk_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkMenuItemClass._gtk_reserved4$VH;
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass._gtk_reserved4$VH.get(seg);
    }
    public static void _gtk_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GtkMenuItemClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkMenuItemClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkMenuItemClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


