// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkIMContextClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("preedit_start"),
        Constants$root.C_POINTER$LAYOUT.withName("preedit_end"),
        Constants$root.C_POINTER$LAYOUT.withName("preedit_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("commit"),
        Constants$root.C_POINTER$LAYOUT.withName("retrieve_surrounding"),
        Constants$root.C_POINTER$LAYOUT.withName("delete_surrounding"),
        Constants$root.C_POINTER$LAYOUT.withName("set_client_window"),
        Constants$root.C_POINTER$LAYOUT.withName("get_preedit_string"),
        Constants$root.C_POINTER$LAYOUT.withName("filter_keypress"),
        Constants$root.C_POINTER$LAYOUT.withName("focus_in"),
        Constants$root.C_POINTER$LAYOUT.withName("focus_out"),
        Constants$root.C_POINTER$LAYOUT.withName("reset"),
        Constants$root.C_POINTER$LAYOUT.withName("set_cursor_location"),
        Constants$root.C_POINTER$LAYOUT.withName("set_use_preedit"),
        Constants$root.C_POINTER$LAYOUT.withName("set_surrounding"),
        Constants$root.C_POINTER$LAYOUT.withName("get_surrounding"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6")
    ).withName("_GtkIMContextClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkIMContextClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor preedit_start$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle preedit_start$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.preedit_start$FUNC
    );
    public interface preedit_start {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(preedit_start fi, MemorySession session) {
            return RuntimeHelper.upcallStub(preedit_start.class, fi, _GtkIMContextClass.preedit_start$FUNC, session);
        }
        static preedit_start ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkIMContextClass.preedit_start$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle preedit_start$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("preedit_start"));
    public static VarHandle preedit_start$VH() {
        return _GtkIMContextClass.preedit_start$VH;
    }
    public static MemoryAddress preedit_start$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.preedit_start$VH.get(seg);
    }
    public static void preedit_start$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.preedit_start$VH.set(seg, x);
    }
    public static MemoryAddress preedit_start$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.preedit_start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void preedit_start$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.preedit_start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static preedit_start preedit_start (MemorySegment segment, MemorySession session) {
        return preedit_start.ofAddress(preedit_start$get(segment), session);
    }
    static final FunctionDescriptor preedit_end$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle preedit_end$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.preedit_end$FUNC
    );
    public interface preedit_end {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(preedit_end fi, MemorySession session) {
            return RuntimeHelper.upcallStub(preedit_end.class, fi, _GtkIMContextClass.preedit_end$FUNC, session);
        }
        static preedit_end ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkIMContextClass.preedit_end$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle preedit_end$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("preedit_end"));
    public static VarHandle preedit_end$VH() {
        return _GtkIMContextClass.preedit_end$VH;
    }
    public static MemoryAddress preedit_end$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.preedit_end$VH.get(seg);
    }
    public static void preedit_end$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.preedit_end$VH.set(seg, x);
    }
    public static MemoryAddress preedit_end$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.preedit_end$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void preedit_end$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.preedit_end$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static preedit_end preedit_end (MemorySegment segment, MemorySession session) {
        return preedit_end.ofAddress(preedit_end$get(segment), session);
    }
    static final FunctionDescriptor preedit_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle preedit_changed$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.preedit_changed$FUNC
    );
    public interface preedit_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(preedit_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(preedit_changed.class, fi, _GtkIMContextClass.preedit_changed$FUNC, session);
        }
        static preedit_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkIMContextClass.preedit_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle preedit_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("preedit_changed"));
    public static VarHandle preedit_changed$VH() {
        return _GtkIMContextClass.preedit_changed$VH;
    }
    public static MemoryAddress preedit_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.preedit_changed$VH.get(seg);
    }
    public static void preedit_changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.preedit_changed$VH.set(seg, x);
    }
    public static MemoryAddress preedit_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.preedit_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void preedit_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.preedit_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static preedit_changed preedit_changed (MemorySegment segment, MemorySession session) {
        return preedit_changed.ofAddress(preedit_changed$get(segment), session);
    }
    static final FunctionDescriptor commit$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle commit$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.commit$FUNC
    );
    public interface commit {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(commit fi, MemorySession session) {
            return RuntimeHelper.upcallStub(commit.class, fi, _GtkIMContextClass.commit$FUNC, session);
        }
        static commit ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkIMContextClass.commit$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle commit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("commit"));
    public static VarHandle commit$VH() {
        return _GtkIMContextClass.commit$VH;
    }
    public static MemoryAddress commit$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.commit$VH.get(seg);
    }
    public static void commit$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.commit$VH.set(seg, x);
    }
    public static MemoryAddress commit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.commit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void commit$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.commit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static commit commit (MemorySegment segment, MemorySession session) {
        return commit.ofAddress(commit$get(segment), session);
    }
    static final FunctionDescriptor retrieve_surrounding$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle retrieve_surrounding$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.retrieve_surrounding$FUNC
    );
    public interface retrieve_surrounding {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(retrieve_surrounding fi, MemorySession session) {
            return RuntimeHelper.upcallStub(retrieve_surrounding.class, fi, _GtkIMContextClass.retrieve_surrounding$FUNC, session);
        }
        static retrieve_surrounding ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkIMContextClass.retrieve_surrounding$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle retrieve_surrounding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("retrieve_surrounding"));
    public static VarHandle retrieve_surrounding$VH() {
        return _GtkIMContextClass.retrieve_surrounding$VH;
    }
    public static MemoryAddress retrieve_surrounding$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.retrieve_surrounding$VH.get(seg);
    }
    public static void retrieve_surrounding$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.retrieve_surrounding$VH.set(seg, x);
    }
    public static MemoryAddress retrieve_surrounding$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.retrieve_surrounding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void retrieve_surrounding$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.retrieve_surrounding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static retrieve_surrounding retrieve_surrounding (MemorySegment segment, MemorySession session) {
        return retrieve_surrounding.ofAddress(retrieve_surrounding$get(segment), session);
    }
    static final FunctionDescriptor delete_surrounding$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle delete_surrounding$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.delete_surrounding$FUNC
    );
    public interface delete_surrounding {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(delete_surrounding fi, MemorySession session) {
            return RuntimeHelper.upcallStub(delete_surrounding.class, fi, _GtkIMContextClass.delete_surrounding$FUNC, session);
        }
        static delete_surrounding ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    return (int)_GtkIMContextClass.delete_surrounding$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle delete_surrounding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delete_surrounding"));
    public static VarHandle delete_surrounding$VH() {
        return _GtkIMContextClass.delete_surrounding$VH;
    }
    public static MemoryAddress delete_surrounding$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.delete_surrounding$VH.get(seg);
    }
    public static void delete_surrounding$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.delete_surrounding$VH.set(seg, x);
    }
    public static MemoryAddress delete_surrounding$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.delete_surrounding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_surrounding$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.delete_surrounding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_surrounding delete_surrounding (MemorySegment segment, MemorySession session) {
        return delete_surrounding.ofAddress(delete_surrounding$get(segment), session);
    }
    static final FunctionDescriptor set_client_window$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_client_window$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.set_client_window$FUNC
    );
    public interface set_client_window {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_client_window fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_client_window.class, fi, _GtkIMContextClass.set_client_window$FUNC, session);
        }
        static set_client_window ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkIMContextClass.set_client_window$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_client_window$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_client_window"));
    public static VarHandle set_client_window$VH() {
        return _GtkIMContextClass.set_client_window$VH;
    }
    public static MemoryAddress set_client_window$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.set_client_window$VH.get(seg);
    }
    public static void set_client_window$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.set_client_window$VH.set(seg, x);
    }
    public static MemoryAddress set_client_window$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.set_client_window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_client_window$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.set_client_window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_client_window set_client_window (MemorySegment segment, MemorySession session) {
        return set_client_window.ofAddress(set_client_window$get(segment), session);
    }
    static final FunctionDescriptor get_preedit_string$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_preedit_string$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.get_preedit_string$FUNC
    );
    public interface get_preedit_string {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(get_preedit_string fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_preedit_string.class, fi, _GtkIMContextClass.get_preedit_string$FUNC, session);
        }
        static get_preedit_string ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkIMContextClass.get_preedit_string$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_preedit_string$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_preedit_string"));
    public static VarHandle get_preedit_string$VH() {
        return _GtkIMContextClass.get_preedit_string$VH;
    }
    public static MemoryAddress get_preedit_string$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.get_preedit_string$VH.get(seg);
    }
    public static void get_preedit_string$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.get_preedit_string$VH.set(seg, x);
    }
    public static MemoryAddress get_preedit_string$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.get_preedit_string$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preedit_string$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.get_preedit_string$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preedit_string get_preedit_string (MemorySegment segment, MemorySession session) {
        return get_preedit_string.ofAddress(get_preedit_string$get(segment), session);
    }
    static final FunctionDescriptor filter_keypress$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle filter_keypress$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.filter_keypress$FUNC
    );
    public interface filter_keypress {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(filter_keypress fi, MemorySession session) {
            return RuntimeHelper.upcallStub(filter_keypress.class, fi, _GtkIMContextClass.filter_keypress$FUNC, session);
        }
        static filter_keypress ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_GtkIMContextClass.filter_keypress$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle filter_keypress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("filter_keypress"));
    public static VarHandle filter_keypress$VH() {
        return _GtkIMContextClass.filter_keypress$VH;
    }
    public static MemoryAddress filter_keypress$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.filter_keypress$VH.get(seg);
    }
    public static void filter_keypress$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.filter_keypress$VH.set(seg, x);
    }
    public static MemoryAddress filter_keypress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.filter_keypress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void filter_keypress$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.filter_keypress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static filter_keypress filter_keypress (MemorySegment segment, MemorySession session) {
        return filter_keypress.ofAddress(filter_keypress$get(segment), session);
    }
    static final FunctionDescriptor focus_in$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle focus_in$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.focus_in$FUNC
    );
    public interface focus_in {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(focus_in fi, MemorySession session) {
            return RuntimeHelper.upcallStub(focus_in.class, fi, _GtkIMContextClass.focus_in$FUNC, session);
        }
        static focus_in ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkIMContextClass.focus_in$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle focus_in$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("focus_in"));
    public static VarHandle focus_in$VH() {
        return _GtkIMContextClass.focus_in$VH;
    }
    public static MemoryAddress focus_in$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.focus_in$VH.get(seg);
    }
    public static void focus_in$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.focus_in$VH.set(seg, x);
    }
    public static MemoryAddress focus_in$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.focus_in$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void focus_in$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.focus_in$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus_in focus_in (MemorySegment segment, MemorySession session) {
        return focus_in.ofAddress(focus_in$get(segment), session);
    }
    static final FunctionDescriptor focus_out$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle focus_out$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.focus_out$FUNC
    );
    public interface focus_out {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(focus_out fi, MemorySession session) {
            return RuntimeHelper.upcallStub(focus_out.class, fi, _GtkIMContextClass.focus_out$FUNC, session);
        }
        static focus_out ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkIMContextClass.focus_out$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle focus_out$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("focus_out"));
    public static VarHandle focus_out$VH() {
        return _GtkIMContextClass.focus_out$VH;
    }
    public static MemoryAddress focus_out$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.focus_out$VH.get(seg);
    }
    public static void focus_out$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.focus_out$VH.set(seg, x);
    }
    public static MemoryAddress focus_out$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.focus_out$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void focus_out$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.focus_out$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus_out focus_out (MemorySegment segment, MemorySession session) {
        return focus_out.ofAddress(focus_out$get(segment), session);
    }
    static final FunctionDescriptor reset$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle reset$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.reset$FUNC
    );
    public interface reset {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(reset fi, MemorySession session) {
            return RuntimeHelper.upcallStub(reset.class, fi, _GtkIMContextClass.reset$FUNC, session);
        }
        static reset ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkIMContextClass.reset$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle reset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reset"));
    public static VarHandle reset$VH() {
        return _GtkIMContextClass.reset$VH;
    }
    public static MemoryAddress reset$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.reset$VH.get(seg);
    }
    public static void reset$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.reset$VH.set(seg, x);
    }
    public static MemoryAddress reset$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.reset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reset$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.reset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static reset reset (MemorySegment segment, MemorySession session) {
        return reset.ofAddress(reset$get(segment), session);
    }
    static final FunctionDescriptor set_cursor_location$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_cursor_location$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.set_cursor_location$FUNC
    );
    public interface set_cursor_location {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_cursor_location fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_cursor_location.class, fi, _GtkIMContextClass.set_cursor_location$FUNC, session);
        }
        static set_cursor_location ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkIMContextClass.set_cursor_location$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_cursor_location$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_cursor_location"));
    public static VarHandle set_cursor_location$VH() {
        return _GtkIMContextClass.set_cursor_location$VH;
    }
    public static MemoryAddress set_cursor_location$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.set_cursor_location$VH.get(seg);
    }
    public static void set_cursor_location$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.set_cursor_location$VH.set(seg, x);
    }
    public static MemoryAddress set_cursor_location$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.set_cursor_location$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_cursor_location$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.set_cursor_location$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_cursor_location set_cursor_location (MemorySegment segment, MemorySession session) {
        return set_cursor_location.ofAddress(set_cursor_location$get(segment), session);
    }
    static final FunctionDescriptor set_use_preedit$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_use_preedit$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.set_use_preedit$FUNC
    );
    public interface set_use_preedit {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(set_use_preedit fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_use_preedit.class, fi, _GtkIMContextClass.set_use_preedit$FUNC, session);
        }
        static set_use_preedit ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _GtkIMContextClass.set_use_preedit$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_use_preedit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_use_preedit"));
    public static VarHandle set_use_preedit$VH() {
        return _GtkIMContextClass.set_use_preedit$VH;
    }
    public static MemoryAddress set_use_preedit$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.set_use_preedit$VH.get(seg);
    }
    public static void set_use_preedit$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.set_use_preedit$VH.set(seg, x);
    }
    public static MemoryAddress set_use_preedit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.set_use_preedit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_use_preedit$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.set_use_preedit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_use_preedit set_use_preedit (MemorySegment segment, MemorySession session) {
        return set_use_preedit.ofAddress(set_use_preedit$get(segment), session);
    }
    static final FunctionDescriptor set_surrounding$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_surrounding$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.set_surrounding$FUNC
    );
    public interface set_surrounding {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, int _x3);
        static MemorySegment allocate(set_surrounding fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_surrounding.class, fi, _GtkIMContextClass.set_surrounding$FUNC, session);
        }
        static set_surrounding ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, int __x3) -> {
                try {
                    _GtkIMContextClass.set_surrounding$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_surrounding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_surrounding"));
    public static VarHandle set_surrounding$VH() {
        return _GtkIMContextClass.set_surrounding$VH;
    }
    public static MemoryAddress set_surrounding$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.set_surrounding$VH.get(seg);
    }
    public static void set_surrounding$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.set_surrounding$VH.set(seg, x);
    }
    public static MemoryAddress set_surrounding$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.set_surrounding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_surrounding$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.set_surrounding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_surrounding set_surrounding (MemorySegment segment, MemorySession session) {
        return set_surrounding.ofAddress(set_surrounding$get(segment), session);
    }
    static final FunctionDescriptor get_surrounding$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_surrounding$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass.get_surrounding$FUNC
    );
    public interface get_surrounding {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(get_surrounding fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_surrounding.class, fi, _GtkIMContextClass.get_surrounding$FUNC, session);
        }
        static get_surrounding ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GtkIMContextClass.get_surrounding$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_surrounding$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_surrounding"));
    public static VarHandle get_surrounding$VH() {
        return _GtkIMContextClass.get_surrounding$VH;
    }
    public static MemoryAddress get_surrounding$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.get_surrounding$VH.get(seg);
    }
    public static void get_surrounding$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass.get_surrounding$VH.set(seg, x);
    }
    public static MemoryAddress get_surrounding$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass.get_surrounding$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_surrounding$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass.get_surrounding$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_surrounding get_surrounding (MemorySegment segment, MemorySession session) {
        return get_surrounding.ofAddress(get_surrounding$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass._gtk_reserved1$FUNC
    );
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved1.class, fi, _GtkIMContextClass._gtk_reserved1$FUNC, session);
        }
        static _gtk_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkIMContextClass._gtk_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkIMContextClass._gtk_reserved1$VH;
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved1$VH.get(seg);
    }
    public static void _gtk_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass._gtk_reserved2$FUNC
    );
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved2.class, fi, _GtkIMContextClass._gtk_reserved2$FUNC, session);
        }
        static _gtk_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkIMContextClass._gtk_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkIMContextClass._gtk_reserved2$VH;
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved2$VH.get(seg);
    }
    public static void _gtk_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass._gtk_reserved3$FUNC
    );
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved3.class, fi, _GtkIMContextClass._gtk_reserved3$FUNC, session);
        }
        static _gtk_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkIMContextClass._gtk_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkIMContextClass._gtk_reserved3$VH;
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved3$VH.get(seg);
    }
    public static void _gtk_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass._gtk_reserved4$FUNC
    );
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved4.class, fi, _GtkIMContextClass._gtk_reserved4$FUNC, session);
        }
        static _gtk_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkIMContextClass._gtk_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkIMContextClass._gtk_reserved4$VH;
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved4$VH.get(seg);
    }
    public static void _gtk_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass._gtk_reserved5$FUNC
    );
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved5.class, fi, _GtkIMContextClass._gtk_reserved5$FUNC, session);
        }
        static _gtk_reserved5 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkIMContextClass._gtk_reserved5$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved5"));
    public static VarHandle _gtk_reserved5$VH() {
        return _GtkIMContextClass._gtk_reserved5$VH;
    }
    public static MemoryAddress _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved5$VH.get(seg);
    }
    public static void _gtk_reserved5$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved5$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6$MH = RuntimeHelper.downcallHandle(
        _GtkIMContextClass._gtk_reserved6$FUNC
    );
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved6.class, fi, _GtkIMContextClass._gtk_reserved6$FUNC, session);
        }
        static _gtk_reserved6 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkIMContextClass._gtk_reserved6$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved6"));
    public static VarHandle _gtk_reserved6$VH() {
        return _GtkIMContextClass._gtk_reserved6$VH;
    }
    public static MemoryAddress _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved6$VH.get(seg);
    }
    public static void _gtk_reserved6$set( MemorySegment seg, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved6$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkIMContextClass._gtk_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkIMContextClass._gtk_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


