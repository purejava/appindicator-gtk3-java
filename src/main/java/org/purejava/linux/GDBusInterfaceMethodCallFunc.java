// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GDBusInterfaceMethodCallFunc {

    void apply(java.lang.foreign.MemoryAddress connection, java.lang.foreign.MemoryAddress sender, java.lang.foreign.MemoryAddress object_path, java.lang.foreign.MemoryAddress interface_name, java.lang.foreign.MemoryAddress method_name, java.lang.foreign.MemoryAddress parameters, java.lang.foreign.MemoryAddress invocation, java.lang.foreign.MemoryAddress user_data);
    static MemorySegment allocate(GDBusInterfaceMethodCallFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GDBusInterfaceMethodCallFunc.class, fi, constants$601.GDBusInterfaceMethodCallFunc$FUNC, session);
    }
    static GDBusInterfaceMethodCallFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _connection, java.lang.foreign.MemoryAddress _sender, java.lang.foreign.MemoryAddress _object_path, java.lang.foreign.MemoryAddress _interface_name, java.lang.foreign.MemoryAddress _method_name, java.lang.foreign.MemoryAddress _parameters, java.lang.foreign.MemoryAddress _invocation, java.lang.foreign.MemoryAddress _user_data) -> {
            try {
                constants$601.GDBusInterfaceMethodCallFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_connection, (java.lang.foreign.Addressable)_sender, (java.lang.foreign.Addressable)_object_path, (java.lang.foreign.Addressable)_interface_name, (java.lang.foreign.Addressable)_method_name, (java.lang.foreign.Addressable)_parameters, (java.lang.foreign.Addressable)_invocation, (java.lang.foreign.Addressable)_user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


