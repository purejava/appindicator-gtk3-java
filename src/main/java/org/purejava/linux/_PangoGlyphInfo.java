// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _PangoGlyphInfo {
 *     PangoGlyph glyph;
 *     PangoGlyphGeometry geometry;
 *     PangoGlyphVisAttr attr;
 * };
 * }
 */
public class _PangoGlyphInfo {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("glyph"),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("x_offset"),
            Constants$root.C_INT$LAYOUT.withName("y_offset")
        ).withName("geometry"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(32)
        ).withName("attr")
    ).withName("_PangoGlyphInfo");
    public static MemoryLayout $LAYOUT() {
        return _PangoGlyphInfo.$struct$LAYOUT;
    }
    static final VarHandle glyph$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("glyph"));
    public static VarHandle glyph$VH() {
        return _PangoGlyphInfo.glyph$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * PangoGlyph glyph;
     * }
     */
    public static int glyph$get(MemorySegment seg) {
        return (int)_PangoGlyphInfo.glyph$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * PangoGlyph glyph;
     * }
     */
    public static void glyph$set(MemorySegment seg, int x) {
        _PangoGlyphInfo.glyph$VH.set(seg, x);
    }
    public static int glyph$get(MemorySegment seg, long index) {
        return (int)_PangoGlyphInfo.glyph$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void glyph$set(MemorySegment seg, long index, int x) {
        _PangoGlyphInfo.glyph$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment geometry$slice(MemorySegment seg) {
        return seg.asSlice(4, 12);
    }
    public static MemorySegment attr$slice(MemorySegment seg) {
        return seg.asSlice(16, 4);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


