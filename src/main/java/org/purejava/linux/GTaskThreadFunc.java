// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GTaskThreadFunc {

    void apply(java.lang.foreign.MemoryAddress task, java.lang.foreign.MemoryAddress source_object, java.lang.foreign.MemoryAddress task_data, java.lang.foreign.MemoryAddress cancellable);
    static MemorySegment allocate(GTaskThreadFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GTaskThreadFunc.class, fi, constants$848.GTaskThreadFunc$FUNC, session);
    }
    static GTaskThreadFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _task, java.lang.foreign.MemoryAddress _source_object, java.lang.foreign.MemoryAddress _task_data, java.lang.foreign.MemoryAddress _cancellable) -> {
            try {
                constants$848.GTaskThreadFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_task, (java.lang.foreign.Addressable)_source_object, (java.lang.foreign.Addressable)_task_data, (java.lang.foreign.Addressable)_cancellable);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


