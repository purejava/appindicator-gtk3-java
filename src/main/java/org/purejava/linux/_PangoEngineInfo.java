// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PangoEngineInfo {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("id"),
        Constants$root.C_POINTER$LAYOUT.withName("engine_type"),
        Constants$root.C_POINTER$LAYOUT.withName("render_type"),
        Constants$root.C_POINTER$LAYOUT.withName("scripts"),
        Constants$root.C_INT$LAYOUT.withName("n_scripts"),
        MemoryLayout.paddingLayout(32)
    ).withName("_PangoEngineInfo");
    public static MemoryLayout $LAYOUT() {
        return _PangoEngineInfo.$struct$LAYOUT;
    }
    static final VarHandle id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("id"));
    public static VarHandle id$VH() {
        return _PangoEngineInfo.id$VH;
    }
    public static MemoryAddress id$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineInfo.id$VH.get(seg);
    }
    public static void id$set( MemorySegment seg, MemoryAddress x) {
        _PangoEngineInfo.id$VH.set(seg, x);
    }
    public static MemoryAddress id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineInfo.id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void id$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoEngineInfo.id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle engine_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("engine_type"));
    public static VarHandle engine_type$VH() {
        return _PangoEngineInfo.engine_type$VH;
    }
    public static MemoryAddress engine_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineInfo.engine_type$VH.get(seg);
    }
    public static void engine_type$set( MemorySegment seg, MemoryAddress x) {
        _PangoEngineInfo.engine_type$VH.set(seg, x);
    }
    public static MemoryAddress engine_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineInfo.engine_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void engine_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoEngineInfo.engine_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle render_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_type"));
    public static VarHandle render_type$VH() {
        return _PangoEngineInfo.render_type$VH;
    }
    public static MemoryAddress render_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineInfo.render_type$VH.get(seg);
    }
    public static void render_type$set( MemorySegment seg, MemoryAddress x) {
        _PangoEngineInfo.render_type$VH.set(seg, x);
    }
    public static MemoryAddress render_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineInfo.render_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoEngineInfo.render_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle scripts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("scripts"));
    public static VarHandle scripts$VH() {
        return _PangoEngineInfo.scripts$VH;
    }
    public static MemoryAddress scripts$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineInfo.scripts$VH.get(seg);
    }
    public static void scripts$set( MemorySegment seg, MemoryAddress x) {
        _PangoEngineInfo.scripts$VH.set(seg, x);
    }
    public static MemoryAddress scripts$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineInfo.scripts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void scripts$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoEngineInfo.scripts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n_scripts$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_scripts"));
    public static VarHandle n_scripts$VH() {
        return _PangoEngineInfo.n_scripts$VH;
    }
    public static int n_scripts$get(MemorySegment seg) {
        return (int)_PangoEngineInfo.n_scripts$VH.get(seg);
    }
    public static void n_scripts$set( MemorySegment seg, int x) {
        _PangoEngineInfo.n_scripts$VH.set(seg, x);
    }
    public static int n_scripts$get(MemorySegment seg, long index) {
        return (int)_PangoEngineInfo.n_scripts$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_scripts$set(MemorySegment seg, long index, int x) {
        _PangoEngineInfo.n_scripts$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


