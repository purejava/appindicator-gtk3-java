// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkSpinButtonClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                    ).withName("g_type_class"),
                    Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                    Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                    Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                    Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                    Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                    Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("notify"),
                    Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                    MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
                ).withName("parent_class"),
                Constants$root.C_INT$LAYOUT.withName("activate_signal"),
                MemoryLayout.paddingLayout(32),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_child_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("destroy"),
                Constants$root.C_POINTER$LAYOUT.withName("show"),
                Constants$root.C_POINTER$LAYOUT.withName("show_all"),
                Constants$root.C_POINTER$LAYOUT.withName("hide"),
                Constants$root.C_POINTER$LAYOUT.withName("map"),
                Constants$root.C_POINTER$LAYOUT.withName("unmap"),
                Constants$root.C_POINTER$LAYOUT.withName("realize"),
                Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
                Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
                Constants$root.C_POINTER$LAYOUT.withName("state_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("parent_set"),
                Constants$root.C_POINTER$LAYOUT.withName("hierarchy_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("style_set"),
                Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("grab_notify"),
                Constants$root.C_POINTER$LAYOUT.withName("child_notify"),
                Constants$root.C_POINTER$LAYOUT.withName("draw"),
                Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
                Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height"),
                Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width_for_height"),
                Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width"),
                Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_for_width"),
                Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
                Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
                Constants$root.C_POINTER$LAYOUT.withName("focus"),
                Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
                Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
                Constants$root.C_POINTER$LAYOUT.withName("event"),
                Constants$root.C_POINTER$LAYOUT.withName("button_press_event"),
                Constants$root.C_POINTER$LAYOUT.withName("button_release_event"),
                Constants$root.C_POINTER$LAYOUT.withName("scroll_event"),
                Constants$root.C_POINTER$LAYOUT.withName("motion_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("delete_event"),
                Constants$root.C_POINTER$LAYOUT.withName("destroy_event"),
                Constants$root.C_POINTER$LAYOUT.withName("key_press_event"),
                Constants$root.C_POINTER$LAYOUT.withName("key_release_event"),
                Constants$root.C_POINTER$LAYOUT.withName("enter_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("leave_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("configure_event"),
                Constants$root.C_POINTER$LAYOUT.withName("focus_in_event"),
                Constants$root.C_POINTER$LAYOUT.withName("focus_out_event"),
                Constants$root.C_POINTER$LAYOUT.withName("map_event"),
                Constants$root.C_POINTER$LAYOUT.withName("unmap_event"),
                Constants$root.C_POINTER$LAYOUT.withName("property_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("selection_clear_event"),
                Constants$root.C_POINTER$LAYOUT.withName("selection_request_event"),
                Constants$root.C_POINTER$LAYOUT.withName("selection_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("proximity_in_event"),
                Constants$root.C_POINTER$LAYOUT.withName("proximity_out_event"),
                Constants$root.C_POINTER$LAYOUT.withName("visibility_notify_event"),
                Constants$root.C_POINTER$LAYOUT.withName("window_state_event"),
                Constants$root.C_POINTER$LAYOUT.withName("damage_event"),
                Constants$root.C_POINTER$LAYOUT.withName("grab_broken_event"),
                Constants$root.C_POINTER$LAYOUT.withName("selection_get"),
                Constants$root.C_POINTER$LAYOUT.withName("selection_received"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_begin"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_end"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_data_get"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_data_delete"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_leave"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_motion"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_drop"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_data_received"),
                Constants$root.C_POINTER$LAYOUT.withName("drag_failed"),
                Constants$root.C_POINTER$LAYOUT.withName("popup_menu"),
                Constants$root.C_POINTER$LAYOUT.withName("show_help"),
                Constants$root.C_POINTER$LAYOUT.withName("get_accessible"),
                Constants$root.C_POINTER$LAYOUT.withName("screen_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("can_activate_accel"),
                Constants$root.C_POINTER$LAYOUT.withName("composited_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
                Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
                Constants$root.C_POINTER$LAYOUT.withName("adjust_size_request"),
                Constants$root.C_POINTER$LAYOUT.withName("adjust_size_allocation"),
                Constants$root.C_POINTER$LAYOUT.withName("style_updated"),
                Constants$root.C_POINTER$LAYOUT.withName("touch_event"),
                Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_and_baseline_for_width"),
                Constants$root.C_POINTER$LAYOUT.withName("adjust_baseline_request"),
                Constants$root.C_POINTER$LAYOUT.withName("adjust_baseline_allocation"),
                Constants$root.C_POINTER$LAYOUT.withName("queue_draw_region"),
                Constants$root.C_POINTER$LAYOUT.withName("priv"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
                Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("populate_popup"),
            Constants$root.C_POINTER$LAYOUT.withName("activate"),
            Constants$root.C_POINTER$LAYOUT.withName("move_cursor"),
            Constants$root.C_POINTER$LAYOUT.withName("insert_at_cursor"),
            Constants$root.C_POINTER$LAYOUT.withName("delete_from_cursor"),
            Constants$root.C_POINTER$LAYOUT.withName("backspace"),
            Constants$root.C_POINTER$LAYOUT.withName("cut_clipboard"),
            Constants$root.C_POINTER$LAYOUT.withName("copy_clipboard"),
            Constants$root.C_POINTER$LAYOUT.withName("paste_clipboard"),
            Constants$root.C_POINTER$LAYOUT.withName("toggle_overwrite"),
            Constants$root.C_POINTER$LAYOUT.withName("get_text_area_size"),
            Constants$root.C_POINTER$LAYOUT.withName("get_frame_size"),
            Constants$root.C_POINTER$LAYOUT.withName("insert_emoji"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("input"),
        Constants$root.C_POINTER$LAYOUT.withName("output"),
        Constants$root.C_POINTER$LAYOUT.withName("value_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("change_value"),
        Constants$root.C_POINTER$LAYOUT.withName("wrapped"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4")
    ).withName("_GtkSpinButtonClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkSpinButtonClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 976);
    }
    static final FunctionDescriptor input$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle input$MH = RuntimeHelper.downcallHandle(
        _GtkSpinButtonClass.input$FUNC
    );
    public interface input {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(input fi, MemorySession session) {
            return RuntimeHelper.upcallStub(input.class, fi, _GtkSpinButtonClass.input$FUNC, session);
        }
        static input ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_GtkSpinButtonClass.input$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle input$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("input"));
    public static VarHandle input$VH() {
        return _GtkSpinButtonClass.input$VH;
    }
    public static MemoryAddress input$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass.input$VH.get(seg);
    }
    public static void input$set( MemorySegment seg, MemoryAddress x) {
        _GtkSpinButtonClass.input$VH.set(seg, x);
    }
    public static MemoryAddress input$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass.input$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void input$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSpinButtonClass.input$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static input input (MemorySegment segment, MemorySession session) {
        return input.ofAddress(input$get(segment), session);
    }
    static final FunctionDescriptor output$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle output$MH = RuntimeHelper.downcallHandle(
        _GtkSpinButtonClass.output$FUNC
    );
    public interface output {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(output fi, MemorySession session) {
            return RuntimeHelper.upcallStub(output.class, fi, _GtkSpinButtonClass.output$FUNC, session);
        }
        static output ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkSpinButtonClass.output$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle output$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("output"));
    public static VarHandle output$VH() {
        return _GtkSpinButtonClass.output$VH;
    }
    public static MemoryAddress output$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass.output$VH.get(seg);
    }
    public static void output$set( MemorySegment seg, MemoryAddress x) {
        _GtkSpinButtonClass.output$VH.set(seg, x);
    }
    public static MemoryAddress output$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass.output$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void output$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSpinButtonClass.output$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static output output (MemorySegment segment, MemorySession session) {
        return output.ofAddress(output$get(segment), session);
    }
    static final FunctionDescriptor value_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle value_changed$MH = RuntimeHelper.downcallHandle(
        _GtkSpinButtonClass.value_changed$FUNC
    );
    public interface value_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(value_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(value_changed.class, fi, _GtkSpinButtonClass.value_changed$FUNC, session);
        }
        static value_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkSpinButtonClass.value_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle value_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("value_changed"));
    public static VarHandle value_changed$VH() {
        return _GtkSpinButtonClass.value_changed$VH;
    }
    public static MemoryAddress value_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass.value_changed$VH.get(seg);
    }
    public static void value_changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkSpinButtonClass.value_changed$VH.set(seg, x);
    }
    public static MemoryAddress value_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass.value_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSpinButtonClass.value_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static value_changed value_changed (MemorySegment segment, MemorySession session) {
        return value_changed.ofAddress(value_changed$get(segment), session);
    }
    static final FunctionDescriptor change_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle change_value$MH = RuntimeHelper.downcallHandle(
        _GtkSpinButtonClass.change_value$FUNC
    );
    public interface change_value {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(change_value fi, MemorySession session) {
            return RuntimeHelper.upcallStub(change_value.class, fi, _GtkSpinButtonClass.change_value$FUNC, session);
        }
        static change_value ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _GtkSpinButtonClass.change_value$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle change_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("change_value"));
    public static VarHandle change_value$VH() {
        return _GtkSpinButtonClass.change_value$VH;
    }
    public static MemoryAddress change_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass.change_value$VH.get(seg);
    }
    public static void change_value$set( MemorySegment seg, MemoryAddress x) {
        _GtkSpinButtonClass.change_value$VH.set(seg, x);
    }
    public static MemoryAddress change_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass.change_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void change_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSpinButtonClass.change_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static change_value change_value (MemorySegment segment, MemorySession session) {
        return change_value.ofAddress(change_value$get(segment), session);
    }
    static final FunctionDescriptor wrapped$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle wrapped$MH = RuntimeHelper.downcallHandle(
        _GtkSpinButtonClass.wrapped$FUNC
    );
    public interface wrapped {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(wrapped fi, MemorySession session) {
            return RuntimeHelper.upcallStub(wrapped.class, fi, _GtkSpinButtonClass.wrapped$FUNC, session);
        }
        static wrapped ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkSpinButtonClass.wrapped$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle wrapped$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wrapped"));
    public static VarHandle wrapped$VH() {
        return _GtkSpinButtonClass.wrapped$VH;
    }
    public static MemoryAddress wrapped$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass.wrapped$VH.get(seg);
    }
    public static void wrapped$set( MemorySegment seg, MemoryAddress x) {
        _GtkSpinButtonClass.wrapped$VH.set(seg, x);
    }
    public static MemoryAddress wrapped$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass.wrapped$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wrapped$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSpinButtonClass.wrapped$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static wrapped wrapped (MemorySegment segment, MemorySession session) {
        return wrapped.ofAddress(wrapped$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1$MH = RuntimeHelper.downcallHandle(
        _GtkSpinButtonClass._gtk_reserved1$FUNC
    );
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved1.class, fi, _GtkSpinButtonClass._gtk_reserved1$FUNC, session);
        }
        static _gtk_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkSpinButtonClass._gtk_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkSpinButtonClass._gtk_reserved1$VH;
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass._gtk_reserved1$VH.get(seg);
    }
    public static void _gtk_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GtkSpinButtonClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSpinButtonClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2$MH = RuntimeHelper.downcallHandle(
        _GtkSpinButtonClass._gtk_reserved2$FUNC
    );
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved2.class, fi, _GtkSpinButtonClass._gtk_reserved2$FUNC, session);
        }
        static _gtk_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkSpinButtonClass._gtk_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkSpinButtonClass._gtk_reserved2$VH;
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass._gtk_reserved2$VH.get(seg);
    }
    public static void _gtk_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GtkSpinButtonClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSpinButtonClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3$MH = RuntimeHelper.downcallHandle(
        _GtkSpinButtonClass._gtk_reserved3$FUNC
    );
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved3.class, fi, _GtkSpinButtonClass._gtk_reserved3$FUNC, session);
        }
        static _gtk_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkSpinButtonClass._gtk_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkSpinButtonClass._gtk_reserved3$VH;
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass._gtk_reserved3$VH.get(seg);
    }
    public static void _gtk_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GtkSpinButtonClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSpinButtonClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4$MH = RuntimeHelper.downcallHandle(
        _GtkSpinButtonClass._gtk_reserved4$FUNC
    );
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved4.class, fi, _GtkSpinButtonClass._gtk_reserved4$FUNC, session);
        }
        static _gtk_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkSpinButtonClass._gtk_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkSpinButtonClass._gtk_reserved4$VH;
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass._gtk_reserved4$VH.get(seg);
    }
    public static void _gtk_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GtkSpinButtonClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkSpinButtonClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkSpinButtonClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


