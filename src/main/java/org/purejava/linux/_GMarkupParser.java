// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GMarkupParser {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("start_element"),
        Constants$root.C_POINTER$LAYOUT.withName("end_element"),
        Constants$root.C_POINTER$LAYOUT.withName("text"),
        Constants$root.C_POINTER$LAYOUT.withName("passthrough"),
        Constants$root.C_POINTER$LAYOUT.withName("error")
    ).withName("_GMarkupParser");
    public static MemoryLayout $LAYOUT() {
        return _GMarkupParser.$struct$LAYOUT;
    }
    static final FunctionDescriptor start_element$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle start_element$MH = RuntimeHelper.downcallHandle(
        _GMarkupParser.start_element$FUNC
    );
    public interface start_element {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(start_element fi, MemorySession session) {
            return RuntimeHelper.upcallStub(start_element.class, fi, _GMarkupParser.start_element$FUNC, session);
        }
        static start_element ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    _GMarkupParser.start_element$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle start_element$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_element"));
    public static VarHandle start_element$VH() {
        return _GMarkupParser.start_element$VH;
    }
    public static MemoryAddress start_element$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMarkupParser.start_element$VH.get(seg);
    }
    public static void start_element$set( MemorySegment seg, MemoryAddress x) {
        _GMarkupParser.start_element$VH.set(seg, x);
    }
    public static MemoryAddress start_element$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMarkupParser.start_element$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_element$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMarkupParser.start_element$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_element start_element (MemorySegment segment, MemorySession session) {
        return start_element.ofAddress(start_element$get(segment), session);
    }
    static final FunctionDescriptor end_element$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle end_element$MH = RuntimeHelper.downcallHandle(
        _GMarkupParser.end_element$FUNC
    );
    public interface end_element {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(end_element fi, MemorySession session) {
            return RuntimeHelper.upcallStub(end_element.class, fi, _GMarkupParser.end_element$FUNC, session);
        }
        static end_element ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GMarkupParser.end_element$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle end_element$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_element"));
    public static VarHandle end_element$VH() {
        return _GMarkupParser.end_element$VH;
    }
    public static MemoryAddress end_element$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMarkupParser.end_element$VH.get(seg);
    }
    public static void end_element$set( MemorySegment seg, MemoryAddress x) {
        _GMarkupParser.end_element$VH.set(seg, x);
    }
    public static MemoryAddress end_element$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMarkupParser.end_element$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_element$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMarkupParser.end_element$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static end_element end_element (MemorySegment segment, MemorySession session) {
        return end_element.ofAddress(end_element$get(segment), session);
    }
    static final FunctionDescriptor text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle text$MH = RuntimeHelper.downcallHandle(
        _GMarkupParser.text$FUNC
    );
    public interface text {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(text.class, fi, _GMarkupParser.text$FUNC, session);
        }
        static text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GMarkupParser.text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("text"));
    public static VarHandle text$VH() {
        return _GMarkupParser.text$VH;
    }
    public static MemoryAddress text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMarkupParser.text$VH.get(seg);
    }
    public static void text$set( MemorySegment seg, MemoryAddress x) {
        _GMarkupParser.text$VH.set(seg, x);
    }
    public static MemoryAddress text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMarkupParser.text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void text$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMarkupParser.text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static text text (MemorySegment segment, MemorySession session) {
        return text.ofAddress(text$get(segment), session);
    }
    static final FunctionDescriptor passthrough$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle passthrough$MH = RuntimeHelper.downcallHandle(
        _GMarkupParser.passthrough$FUNC
    );
    public interface passthrough {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(passthrough fi, MemorySession session) {
            return RuntimeHelper.upcallStub(passthrough.class, fi, _GMarkupParser.passthrough$FUNC, session);
        }
        static passthrough ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GMarkupParser.passthrough$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle passthrough$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("passthrough"));
    public static VarHandle passthrough$VH() {
        return _GMarkupParser.passthrough$VH;
    }
    public static MemoryAddress passthrough$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMarkupParser.passthrough$VH.get(seg);
    }
    public static void passthrough$set( MemorySegment seg, MemoryAddress x) {
        _GMarkupParser.passthrough$VH.set(seg, x);
    }
    public static MemoryAddress passthrough$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMarkupParser.passthrough$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void passthrough$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMarkupParser.passthrough$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static passthrough passthrough (MemorySegment segment, MemorySession session) {
        return passthrough.ofAddress(passthrough$get(segment), session);
    }
    static final FunctionDescriptor error$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle error$MH = RuntimeHelper.downcallHandle(
        _GMarkupParser.error$FUNC
    );
    public interface error {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(error fi, MemorySession session) {
            return RuntimeHelper.upcallStub(error.class, fi, _GMarkupParser.error$FUNC, session);
        }
        static error ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GMarkupParser.error$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle error$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("error"));
    public static VarHandle error$VH() {
        return _GMarkupParser.error$VH;
    }
    public static MemoryAddress error$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMarkupParser.error$VH.get(seg);
    }
    public static void error$set( MemorySegment seg, MemoryAddress x) {
        _GMarkupParser.error$VH.set(seg, x);
    }
    public static MemoryAddress error$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMarkupParser.error$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void error$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMarkupParser.error$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static error error (MemorySegment segment, MemorySession session) {
        return error.ofAddress(error$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


