// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GTlsClientConnectionInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("copy_session_state")
    ).withName("_GTlsClientConnectionInterface");
    public static MemoryLayout $LAYOUT() {
        return _GTlsClientConnectionInterface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor copy_session_state$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle copy_session_state$MH = RuntimeHelper.downcallHandle(
        _GTlsClientConnectionInterface.copy_session_state$FUNC
    );
    public interface copy_session_state {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(copy_session_state fi, MemorySession session) {
            return RuntimeHelper.upcallStub(copy_session_state.class, fi, _GTlsClientConnectionInterface.copy_session_state$FUNC, session);
        }
        static copy_session_state ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GTlsClientConnectionInterface.copy_session_state$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle copy_session_state$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("copy_session_state"));
    public static VarHandle copy_session_state$VH() {
        return _GTlsClientConnectionInterface.copy_session_state$VH;
    }
    public static MemoryAddress copy_session_state$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GTlsClientConnectionInterface.copy_session_state$VH.get(seg);
    }
    public static void copy_session_state$set( MemorySegment seg, MemoryAddress x) {
        _GTlsClientConnectionInterface.copy_session_state$VH.set(seg, x);
    }
    public static MemoryAddress copy_session_state$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GTlsClientConnectionInterface.copy_session_state$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_session_state$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTlsClientConnectionInterface.copy_session_state$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_session_state copy_session_state (MemorySegment segment, MemorySession session) {
        return copy_session_state.ofAddress(copy_session_state$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


