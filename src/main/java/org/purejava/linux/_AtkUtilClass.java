// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkUtilClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("add_global_event_listener"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_global_event_listener"),
        Constants$root.C_POINTER$LAYOUT.withName("add_key_event_listener"),
        Constants$root.C_POINTER$LAYOUT.withName("remove_key_event_listener"),
        Constants$root.C_POINTER$LAYOUT.withName("get_root"),
        Constants$root.C_POINTER$LAYOUT.withName("get_toolkit_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_toolkit_version")
    ).withName("_AtkUtilClass");
    public static MemoryLayout $LAYOUT() {
        return _AtkUtilClass.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor add_global_event_listener$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_global_event_listener$MH = RuntimeHelper.downcallHandle(
        _AtkUtilClass.add_global_event_listener$FUNC
    );
    public interface add_global_event_listener {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(add_global_event_listener fi, MemorySession session) {
            return RuntimeHelper.upcallStub(add_global_event_listener.class, fi, _AtkUtilClass.add_global_event_listener$FUNC, session);
        }
        static add_global_event_listener ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_AtkUtilClass.add_global_event_listener$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_global_event_listener$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_global_event_listener"));
    public static VarHandle add_global_event_listener$VH() {
        return _AtkUtilClass.add_global_event_listener$VH;
    }
    public static MemoryAddress add_global_event_listener$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.add_global_event_listener$VH.get(seg);
    }
    public static void add_global_event_listener$set( MemorySegment seg, MemoryAddress x) {
        _AtkUtilClass.add_global_event_listener$VH.set(seg, x);
    }
    public static MemoryAddress add_global_event_listener$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.add_global_event_listener$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_global_event_listener$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkUtilClass.add_global_event_listener$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_global_event_listener add_global_event_listener (MemorySegment segment, MemorySession session) {
        return add_global_event_listener.ofAddress(add_global_event_listener$get(segment), session);
    }
    static final FunctionDescriptor remove_global_event_listener$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_global_event_listener$MH = RuntimeHelper.downcallHandle(
        _AtkUtilClass.remove_global_event_listener$FUNC
    );
    public interface remove_global_event_listener {

        void apply(int _x0);
        static MemorySegment allocate(remove_global_event_listener fi, MemorySession session) {
            return RuntimeHelper.upcallStub(remove_global_event_listener.class, fi, _AtkUtilClass.remove_global_event_listener$FUNC, session);
        }
        static remove_global_event_listener ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (int __x0) -> {
                try {
                    _AtkUtilClass.remove_global_event_listener$MH.invokeExact((Addressable)symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_global_event_listener$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_global_event_listener"));
    public static VarHandle remove_global_event_listener$VH() {
        return _AtkUtilClass.remove_global_event_listener$VH;
    }
    public static MemoryAddress remove_global_event_listener$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.remove_global_event_listener$VH.get(seg);
    }
    public static void remove_global_event_listener$set( MemorySegment seg, MemoryAddress x) {
        _AtkUtilClass.remove_global_event_listener$VH.set(seg, x);
    }
    public static MemoryAddress remove_global_event_listener$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.remove_global_event_listener$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_global_event_listener$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkUtilClass.remove_global_event_listener$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_global_event_listener remove_global_event_listener (MemorySegment segment, MemorySession session) {
        return remove_global_event_listener.ofAddress(remove_global_event_listener$get(segment), session);
    }
    static final FunctionDescriptor add_key_event_listener$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_key_event_listener$MH = RuntimeHelper.downcallHandle(
        _AtkUtilClass.add_key_event_listener$FUNC
    );
    public interface add_key_event_listener {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(add_key_event_listener fi, MemorySession session) {
            return RuntimeHelper.upcallStub(add_key_event_listener.class, fi, _AtkUtilClass.add_key_event_listener$FUNC, session);
        }
        static add_key_event_listener ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_AtkUtilClass.add_key_event_listener$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_key_event_listener$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_key_event_listener"));
    public static VarHandle add_key_event_listener$VH() {
        return _AtkUtilClass.add_key_event_listener$VH;
    }
    public static MemoryAddress add_key_event_listener$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.add_key_event_listener$VH.get(seg);
    }
    public static void add_key_event_listener$set( MemorySegment seg, MemoryAddress x) {
        _AtkUtilClass.add_key_event_listener$VH.set(seg, x);
    }
    public static MemoryAddress add_key_event_listener$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.add_key_event_listener$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_key_event_listener$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkUtilClass.add_key_event_listener$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_key_event_listener add_key_event_listener (MemorySegment segment, MemorySession session) {
        return add_key_event_listener.ofAddress(add_key_event_listener$get(segment), session);
    }
    static final FunctionDescriptor remove_key_event_listener$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle remove_key_event_listener$MH = RuntimeHelper.downcallHandle(
        _AtkUtilClass.remove_key_event_listener$FUNC
    );
    public interface remove_key_event_listener {

        void apply(int _x0);
        static MemorySegment allocate(remove_key_event_listener fi, MemorySession session) {
            return RuntimeHelper.upcallStub(remove_key_event_listener.class, fi, _AtkUtilClass.remove_key_event_listener$FUNC, session);
        }
        static remove_key_event_listener ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (int __x0) -> {
                try {
                    _AtkUtilClass.remove_key_event_listener$MH.invokeExact((Addressable)symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove_key_event_listener$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove_key_event_listener"));
    public static VarHandle remove_key_event_listener$VH() {
        return _AtkUtilClass.remove_key_event_listener$VH;
    }
    public static MemoryAddress remove_key_event_listener$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.remove_key_event_listener$VH.get(seg);
    }
    public static void remove_key_event_listener$set( MemorySegment seg, MemoryAddress x) {
        _AtkUtilClass.remove_key_event_listener$VH.set(seg, x);
    }
    public static MemoryAddress remove_key_event_listener$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.remove_key_event_listener$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_key_event_listener$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkUtilClass.remove_key_event_listener$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_key_event_listener remove_key_event_listener (MemorySegment segment, MemorySession session) {
        return remove_key_event_listener.ofAddress(remove_key_event_listener$get(segment), session);
    }
    static final FunctionDescriptor get_root$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle get_root$MH = RuntimeHelper.downcallHandle(
        _AtkUtilClass.get_root$FUNC
    );
    public interface get_root {

        java.lang.foreign.Addressable apply();
        static MemorySegment allocate(get_root fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_root.class, fi, _AtkUtilClass.get_root$FUNC, session);
        }
        static get_root ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkUtilClass.get_root$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_root$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_root"));
    public static VarHandle get_root$VH() {
        return _AtkUtilClass.get_root$VH;
    }
    public static MemoryAddress get_root$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.get_root$VH.get(seg);
    }
    public static void get_root$set( MemorySegment seg, MemoryAddress x) {
        _AtkUtilClass.get_root$VH.set(seg, x);
    }
    public static MemoryAddress get_root$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.get_root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_root$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkUtilClass.get_root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_root get_root (MemorySegment segment, MemorySession session) {
        return get_root.ofAddress(get_root$get(segment), session);
    }
    static final FunctionDescriptor get_toolkit_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle get_toolkit_name$MH = RuntimeHelper.downcallHandle(
        _AtkUtilClass.get_toolkit_name$FUNC
    );
    public interface get_toolkit_name {

        java.lang.foreign.Addressable apply();
        static MemorySegment allocate(get_toolkit_name fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_toolkit_name.class, fi, _AtkUtilClass.get_toolkit_name$FUNC, session);
        }
        static get_toolkit_name ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkUtilClass.get_toolkit_name$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_toolkit_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_toolkit_name"));
    public static VarHandle get_toolkit_name$VH() {
        return _AtkUtilClass.get_toolkit_name$VH;
    }
    public static MemoryAddress get_toolkit_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.get_toolkit_name$VH.get(seg);
    }
    public static void get_toolkit_name$set( MemorySegment seg, MemoryAddress x) {
        _AtkUtilClass.get_toolkit_name$VH.set(seg, x);
    }
    public static MemoryAddress get_toolkit_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.get_toolkit_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_toolkit_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkUtilClass.get_toolkit_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_toolkit_name get_toolkit_name (MemorySegment segment, MemorySession session) {
        return get_toolkit_name.ofAddress(get_toolkit_name$get(segment), session);
    }
    static final FunctionDescriptor get_toolkit_version$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle get_toolkit_version$MH = RuntimeHelper.downcallHandle(
        _AtkUtilClass.get_toolkit_version$FUNC
    );
    public interface get_toolkit_version {

        java.lang.foreign.Addressable apply();
        static MemorySegment allocate(get_toolkit_version fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_toolkit_version.class, fi, _AtkUtilClass.get_toolkit_version$FUNC, session);
        }
        static get_toolkit_version ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkUtilClass.get_toolkit_version$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_toolkit_version$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_toolkit_version"));
    public static VarHandle get_toolkit_version$VH() {
        return _AtkUtilClass.get_toolkit_version$VH;
    }
    public static MemoryAddress get_toolkit_version$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.get_toolkit_version$VH.get(seg);
    }
    public static void get_toolkit_version$set( MemorySegment seg, MemoryAddress x) {
        _AtkUtilClass.get_toolkit_version$VH.set(seg, x);
    }
    public static MemoryAddress get_toolkit_version$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkUtilClass.get_toolkit_version$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_toolkit_version$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkUtilClass.get_toolkit_version$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_toolkit_version get_toolkit_version (MemorySegment segment, MemorySession session) {
        return get_toolkit_version.ofAddress(get_toolkit_version$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


