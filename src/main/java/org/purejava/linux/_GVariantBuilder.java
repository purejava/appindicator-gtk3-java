// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GVariantBuilder {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("partial_magic"),
                Constants$root.C_POINTER$LAYOUT.withName("type"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_LONG_LONG$LAYOUT).withName("y")
            ).withName("s"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_LONG_LONG$LAYOUT).withName("x")
        ).withName("u")
    ).withName("_GVariantBuilder");
    public static MemoryLayout $LAYOUT() {
        return _GVariantBuilder.$struct$LAYOUT;
    }
    public static class u {

        static final  GroupLayout u$union$LAYOUT = MemoryLayout.unionLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("partial_magic"),
                Constants$root.C_POINTER$LAYOUT.withName("type"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_LONG_LONG$LAYOUT).withName("y")
            ).withName("s"),
            MemoryLayout.sequenceLayout(16, Constants$root.C_LONG_LONG$LAYOUT).withName("x")
        );
        public static MemoryLayout $LAYOUT() {
            return u.u$union$LAYOUT;
        }
        public static class s {

            static final  GroupLayout u$s$struct$LAYOUT = MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("partial_magic"),
                Constants$root.C_POINTER$LAYOUT.withName("type"),
                MemoryLayout.sequenceLayout(14, Constants$root.C_LONG_LONG$LAYOUT).withName("y")
            );
            public static MemoryLayout $LAYOUT() {
                return s.u$s$struct$LAYOUT;
            }
            static final VarHandle partial_magic$VH = u$s$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("partial_magic"));
            public static VarHandle partial_magic$VH() {
                return s.partial_magic$VH;
            }
            public static long partial_magic$get(MemorySegment seg) {
                return (long)s.partial_magic$VH.get(seg);
            }
            public static void partial_magic$set( MemorySegment seg, long x) {
                s.partial_magic$VH.set(seg, x);
            }
            public static long partial_magic$get(MemorySegment seg, long index) {
                return (long)s.partial_magic$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void partial_magic$set(MemorySegment seg, long index, long x) {
                s.partial_magic$VH.set(seg.asSlice(index*sizeof()), x);
            }
            static final VarHandle type$VH = u$s$struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
            public static VarHandle type$VH() {
                return s.type$VH;
            }
            public static MemoryAddress type$get(MemorySegment seg) {
                return (java.lang.foreign.MemoryAddress)s.type$VH.get(seg);
            }
            public static void type$set( MemorySegment seg, MemoryAddress x) {
                s.type$VH.set(seg, x);
            }
            public static MemoryAddress type$get(MemorySegment seg, long index) {
                return (java.lang.foreign.MemoryAddress)s.type$VH.get(seg.asSlice(index*sizeof()));
            }
            public static void type$set(MemorySegment seg, long index, MemoryAddress x) {
                s.type$VH.set(seg.asSlice(index*sizeof()), x);
            }
            public static MemorySegment y$slice(MemorySegment seg) {
                return seg.asSlice(16, 112);
            }
            public static long sizeof() { return $LAYOUT().byteSize(); }
            public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
            public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
                return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
            }
            public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
        }

        public static MemorySegment s$slice(MemorySegment seg) {
            return seg.asSlice(0, 128);
        }
        public static MemorySegment x$slice(MemorySegment seg) {
            return seg.asSlice(0, 128);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
    }

    public static MemorySegment u$slice(MemorySegment seg) {
        return seg.asSlice(0, 128);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


