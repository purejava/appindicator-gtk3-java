// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkTableRowCol {
 *     guint16 requisition;
 *     guint16 allocation;
 *     guint16 spacing;
 *      *     guint need_expand;
 *     guint need_shrink;
 *     guint expand;
 *     guint shrink;
 *     guint empty;
 * };
 * }
 */
public class _GtkTableRowCol {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_SHORT$LAYOUT.withName("requisition"),
        Constants$root.C_SHORT$LAYOUT.withName("allocation"),
        Constants$root.C_SHORT$LAYOUT.withName("spacing"),
        MemoryLayout.paddingLayout(16)
    ).withName("_GtkTableRowCol");
    public static MemoryLayout $LAYOUT() {
        return _GtkTableRowCol.$struct$LAYOUT;
    }
    static final VarHandle requisition$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("requisition"));
    public static VarHandle requisition$VH() {
        return _GtkTableRowCol.requisition$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint16 requisition;
     * }
     */
    public static short requisition$get(MemorySegment seg) {
        return (short)_GtkTableRowCol.requisition$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint16 requisition;
     * }
     */
    public static void requisition$set(MemorySegment seg, short x) {
        _GtkTableRowCol.requisition$VH.set(seg, x);
    }
    public static short requisition$get(MemorySegment seg, long index) {
        return (short)_GtkTableRowCol.requisition$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void requisition$set(MemorySegment seg, long index, short x) {
        _GtkTableRowCol.requisition$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle allocation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("allocation"));
    public static VarHandle allocation$VH() {
        return _GtkTableRowCol.allocation$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint16 allocation;
     * }
     */
    public static short allocation$get(MemorySegment seg) {
        return (short)_GtkTableRowCol.allocation$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint16 allocation;
     * }
     */
    public static void allocation$set(MemorySegment seg, short x) {
        _GtkTableRowCol.allocation$VH.set(seg, x);
    }
    public static short allocation$get(MemorySegment seg, long index) {
        return (short)_GtkTableRowCol.allocation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void allocation$set(MemorySegment seg, long index, short x) {
        _GtkTableRowCol.allocation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle spacing$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("spacing"));
    public static VarHandle spacing$VH() {
        return _GtkTableRowCol.spacing$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * guint16 spacing;
     * }
     */
    public static short spacing$get(MemorySegment seg) {
        return (short)_GtkTableRowCol.spacing$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * guint16 spacing;
     * }
     */
    public static void spacing$set(MemorySegment seg, short x) {
        _GtkTableRowCol.spacing$VH.set(seg, x);
    }
    public static short spacing$get(MemorySegment seg, long index) {
        return (short)_GtkTableRowCol.spacing$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void spacing$set(MemorySegment seg, long index, short x) {
        _GtkTableRowCol.spacing$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


