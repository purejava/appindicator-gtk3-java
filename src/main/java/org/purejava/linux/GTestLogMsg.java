// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class GTestLogMsg {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("log_type"),
        Constants$root.C_INT$LAYOUT.withName("n_strings"),
        Constants$root.C_POINTER$LAYOUT.withName("strings"),
        Constants$root.C_INT$LAYOUT.withName("n_nums"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("nums")
    );
    public static MemoryLayout $LAYOUT() {
        return GTestLogMsg.$struct$LAYOUT;
    }
    static final VarHandle log_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("log_type"));
    public static VarHandle log_type$VH() {
        return GTestLogMsg.log_type$VH;
    }
    public static int log_type$get(MemorySegment seg) {
        return (int)GTestLogMsg.log_type$VH.get(seg);
    }
    public static void log_type$set( MemorySegment seg, int x) {
        GTestLogMsg.log_type$VH.set(seg, x);
    }
    public static int log_type$get(MemorySegment seg, long index) {
        return (int)GTestLogMsg.log_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void log_type$set(MemorySegment seg, long index, int x) {
        GTestLogMsg.log_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n_strings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_strings"));
    public static VarHandle n_strings$VH() {
        return GTestLogMsg.n_strings$VH;
    }
    public static int n_strings$get(MemorySegment seg) {
        return (int)GTestLogMsg.n_strings$VH.get(seg);
    }
    public static void n_strings$set( MemorySegment seg, int x) {
        GTestLogMsg.n_strings$VH.set(seg, x);
    }
    public static int n_strings$get(MemorySegment seg, long index) {
        return (int)GTestLogMsg.n_strings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_strings$set(MemorySegment seg, long index, int x) {
        GTestLogMsg.n_strings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle strings$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("strings"));
    public static VarHandle strings$VH() {
        return GTestLogMsg.strings$VH;
    }
    public static MemoryAddress strings$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)GTestLogMsg.strings$VH.get(seg);
    }
    public static void strings$set( MemorySegment seg, MemoryAddress x) {
        GTestLogMsg.strings$VH.set(seg, x);
    }
    public static MemoryAddress strings$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)GTestLogMsg.strings$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void strings$set(MemorySegment seg, long index, MemoryAddress x) {
        GTestLogMsg.strings$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle n_nums$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("n_nums"));
    public static VarHandle n_nums$VH() {
        return GTestLogMsg.n_nums$VH;
    }
    public static int n_nums$get(MemorySegment seg) {
        return (int)GTestLogMsg.n_nums$VH.get(seg);
    }
    public static void n_nums$set( MemorySegment seg, int x) {
        GTestLogMsg.n_nums$VH.set(seg, x);
    }
    public static int n_nums$get(MemorySegment seg, long index) {
        return (int)GTestLogMsg.n_nums$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void n_nums$set(MemorySegment seg, long index, int x) {
        GTestLogMsg.n_nums$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle nums$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("nums"));
    public static VarHandle nums$VH() {
        return GTestLogMsg.nums$VH;
    }
    public static MemoryAddress nums$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)GTestLogMsg.nums$VH.get(seg);
    }
    public static void nums$set( MemorySegment seg, MemoryAddress x) {
        GTestLogMsg.nums$VH.set(seg, x);
    }
    public static MemoryAddress nums$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)GTestLogMsg.nums$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void nums$set(MemorySegment seg, long index, MemoryAddress x) {
        GTestLogMsg.nums$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


