// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GMountOperationClass {
 *     GObjectClass parent_class;
 *     void (*ask_password)(GMountOperation*,char*,char*,char*,GAskPasswordFlags);
 *     void (*ask_question)(GMountOperation*,char*,char**);
 *     void (*reply)(GMountOperation*,GMountOperationResult);
 *     void (*aborted)(GMountOperation*);
 *     void (*show_processes)(GMountOperation*,const gchar*,GArray*,const gchar**);
 *     void (*show_unmount_progress)(GMountOperation*,const gchar*,gint64,gint64);
 *     void (*_g_reserved1)();
 *     void (*_g_reserved2)();
 *     void (*_g_reserved3)();
 *     void (*_g_reserved4)();
 *     void (*_g_reserved5)();
 *     void (*_g_reserved6)();
 *     void (*_g_reserved7)();
 *     void (*_g_reserved8)();
 *     void (*_g_reserved9)();
 * };
 * }
 */
public class _GMountOperationClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("ask_password"),
        Constants$root.C_POINTER$LAYOUT.withName("ask_question"),
        Constants$root.C_POINTER$LAYOUT.withName("reply"),
        Constants$root.C_POINTER$LAYOUT.withName("aborted"),
        Constants$root.C_POINTER$LAYOUT.withName("show_processes"),
        Constants$root.C_POINTER$LAYOUT.withName("show_unmount_progress"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved6"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved7"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved8"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved9")
    ).withName("_GMountOperationClass");
    public static MemoryLayout $LAYOUT() {
        return _GMountOperationClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor ask_password$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor ask_password_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle ask_password_UP$MH = RuntimeHelper.upcallHandle(ask_password.class, "apply", _GMountOperationClass.ask_password_UP$FUNC);
    static final FunctionDescriptor ask_password_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle ask_password_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass.ask_password_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ask_password)(GMountOperation*,char*,char*,char*,GAskPasswordFlags);
     * }
     */
    public interface ask_password {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4);
        static MemorySegment allocate(ask_password fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass.ask_password_UP$MH, fi, _GMountOperationClass.ask_password$FUNC, scope);
        }
        static ask_password ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4) -> {
                try {
                    _GMountOperationClass.ask_password_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ask_password$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ask_password"));
    public static VarHandle ask_password$VH() {
        return _GMountOperationClass.ask_password$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ask_password)(GMountOperation*,char*,char*,char*,GAskPasswordFlags);
     * }
     */
    public static MemorySegment ask_password$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.ask_password$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ask_password)(GMountOperation*,char*,char*,char*,GAskPasswordFlags);
     * }
     */
    public static void ask_password$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass.ask_password$VH.set(seg, x);
    }
    public static MemorySegment ask_password$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.ask_password$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ask_password$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass.ask_password$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ask_password ask_password(MemorySegment segment, SegmentScope scope) {
        return ask_password.ofAddress(ask_password$get(segment), scope);
    }
    static final FunctionDescriptor ask_question$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor ask_question_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ask_question_UP$MH = RuntimeHelper.upcallHandle(ask_question.class, "apply", _GMountOperationClass.ask_question_UP$FUNC);
    static final FunctionDescriptor ask_question_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle ask_question_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass.ask_question_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*ask_question)(GMountOperation*,char*,char**);
     * }
     */
    public interface ask_question {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(ask_question fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass.ask_question_UP$MH, fi, _GMountOperationClass.ask_question$FUNC, scope);
        }
        static ask_question ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    _GMountOperationClass.ask_question_DOWN$MH.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle ask_question$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("ask_question"));
    public static VarHandle ask_question$VH() {
        return _GMountOperationClass.ask_question$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*ask_question)(GMountOperation*,char*,char**);
     * }
     */
    public static MemorySegment ask_question$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.ask_question$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*ask_question)(GMountOperation*,char*,char**);
     * }
     */
    public static void ask_question$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass.ask_question$VH.set(seg, x);
    }
    public static MemorySegment ask_question$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.ask_question$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void ask_question$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass.ask_question$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static ask_question ask_question(MemorySegment segment, SegmentScope scope) {
        return ask_question.ofAddress(ask_question$get(segment), scope);
    }
    static final FunctionDescriptor reply$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor reply_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle reply_UP$MH = RuntimeHelper.upcallHandle(reply.class, "apply", _GMountOperationClass.reply_UP$FUNC);
    static final FunctionDescriptor reply_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle reply_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass.reply_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*reply)(GMountOperation*,GMountOperationResult);
     * }
     */
    public interface reply {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(reply fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass.reply_UP$MH, fi, _GMountOperationClass.reply$FUNC, scope);
        }
        static reply ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    _GMountOperationClass.reply_DOWN$MH.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle reply$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reply"));
    public static VarHandle reply$VH() {
        return _GMountOperationClass.reply$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*reply)(GMountOperation*,GMountOperationResult);
     * }
     */
    public static MemorySegment reply$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.reply$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*reply)(GMountOperation*,GMountOperationResult);
     * }
     */
    public static void reply$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass.reply$VH.set(seg, x);
    }
    public static MemorySegment reply$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.reply$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reply$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass.reply$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static reply reply(MemorySegment segment, SegmentScope scope) {
        return reply.ofAddress(reply$get(segment), scope);
    }
    static final FunctionDescriptor aborted$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor aborted_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle aborted_UP$MH = RuntimeHelper.upcallHandle(aborted.class, "apply", _GMountOperationClass.aborted_UP$FUNC);
    static final FunctionDescriptor aborted_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle aborted_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass.aborted_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*aborted)(GMountOperation*);
     * }
     */
    public interface aborted {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(aborted fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass.aborted_UP$MH, fi, _GMountOperationClass.aborted$FUNC, scope);
        }
        static aborted ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _GMountOperationClass.aborted_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle aborted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("aborted"));
    public static VarHandle aborted$VH() {
        return _GMountOperationClass.aborted$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*aborted)(GMountOperation*);
     * }
     */
    public static MemorySegment aborted$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.aborted$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*aborted)(GMountOperation*);
     * }
     */
    public static void aborted$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass.aborted$VH.set(seg, x);
    }
    public static MemorySegment aborted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.aborted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void aborted$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass.aborted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static aborted aborted(MemorySegment segment, SegmentScope scope) {
        return aborted.ofAddress(aborted$get(segment), scope);
    }
    static final FunctionDescriptor show_processes$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor show_processes_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle show_processes_UP$MH = RuntimeHelper.upcallHandle(show_processes.class, "apply", _GMountOperationClass.show_processes_UP$FUNC);
    static final FunctionDescriptor show_processes_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle show_processes_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass.show_processes_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*show_processes)(GMountOperation*,const gchar*,GArray*,const gchar**);
     * }
     */
    public interface show_processes {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(show_processes fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass.show_processes_UP$MH, fi, _GMountOperationClass.show_processes$FUNC, scope);
        }
        static show_processes ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GMountOperationClass.show_processes_DOWN$MH.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle show_processes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("show_processes"));
    public static VarHandle show_processes$VH() {
        return _GMountOperationClass.show_processes$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*show_processes)(GMountOperation*,const gchar*,GArray*,const gchar**);
     * }
     */
    public static MemorySegment show_processes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.show_processes$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*show_processes)(GMountOperation*,const gchar*,GArray*,const gchar**);
     * }
     */
    public static void show_processes$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass.show_processes$VH.set(seg, x);
    }
    public static MemorySegment show_processes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.show_processes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void show_processes$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass.show_processes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static show_processes show_processes(MemorySegment segment, SegmentScope scope) {
        return show_processes.ofAddress(show_processes$get(segment), scope);
    }
    static final FunctionDescriptor show_unmount_progress$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final FunctionDescriptor show_unmount_progress_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle show_unmount_progress_UP$MH = RuntimeHelper.upcallHandle(show_unmount_progress.class, "apply", _GMountOperationClass.show_unmount_progress_UP$FUNC);
    static final FunctionDescriptor show_unmount_progress_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle show_unmount_progress_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass.show_unmount_progress_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*show_unmount_progress)(GMountOperation*,const gchar*,gint64,gint64);
     * }
     */
    public interface show_unmount_progress {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, long _x2, long _x3);
        static MemorySegment allocate(show_unmount_progress fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass.show_unmount_progress_UP$MH, fi, _GMountOperationClass.show_unmount_progress$FUNC, scope);
        }
        static show_unmount_progress ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, long __x2, long __x3) -> {
                try {
                    _GMountOperationClass.show_unmount_progress_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle show_unmount_progress$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("show_unmount_progress"));
    public static VarHandle show_unmount_progress$VH() {
        return _GMountOperationClass.show_unmount_progress$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*show_unmount_progress)(GMountOperation*,const gchar*,gint64,gint64);
     * }
     */
    public static MemorySegment show_unmount_progress$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.show_unmount_progress$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*show_unmount_progress)(GMountOperation*,const gchar*,gint64,gint64);
     * }
     */
    public static void show_unmount_progress$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass.show_unmount_progress$VH.set(seg, x);
    }
    public static MemorySegment show_unmount_progress$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass.show_unmount_progress$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void show_unmount_progress$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass.show_unmount_progress$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static show_unmount_progress show_unmount_progress(MemorySegment segment, SegmentScope scope) {
        return show_unmount_progress.ofAddress(show_unmount_progress$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved1_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved1_UP$MH = RuntimeHelper.upcallHandle(_g_reserved1.class, "apply", _GMountOperationClass._g_reserved1_UP$FUNC);
    static final FunctionDescriptor _g_reserved1_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved1_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass._g_reserved1_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved1)();
     * }
     */
    public interface _g_reserved1 {

        void apply();
        static MemorySegment allocate(_g_reserved1 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass._g_reserved1_UP$MH, fi, _GMountOperationClass._g_reserved1$FUNC, scope);
        }
        static _g_reserved1 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GMountOperationClass._g_reserved1_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved1"));
    public static VarHandle _g_reserved1$VH() {
        return _GMountOperationClass._g_reserved1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static MemorySegment _g_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static void _g_reserved1$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass._g_reserved1$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass._g_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved1 _g_reserved1(MemorySegment segment, SegmentScope scope) {
        return _g_reserved1.ofAddress(_g_reserved1$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved2_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved2_UP$MH = RuntimeHelper.upcallHandle(_g_reserved2.class, "apply", _GMountOperationClass._g_reserved2_UP$FUNC);
    static final FunctionDescriptor _g_reserved2_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved2_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass._g_reserved2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved2)();
     * }
     */
    public interface _g_reserved2 {

        void apply();
        static MemorySegment allocate(_g_reserved2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass._g_reserved2_UP$MH, fi, _GMountOperationClass._g_reserved2$FUNC, scope);
        }
        static _g_reserved2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GMountOperationClass._g_reserved2_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved2"));
    public static VarHandle _g_reserved2$VH() {
        return _GMountOperationClass._g_reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static MemorySegment _g_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static void _g_reserved2$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass._g_reserved2$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass._g_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved2 _g_reserved2(MemorySegment segment, SegmentScope scope) {
        return _g_reserved2.ofAddress(_g_reserved2$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved3_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved3_UP$MH = RuntimeHelper.upcallHandle(_g_reserved3.class, "apply", _GMountOperationClass._g_reserved3_UP$FUNC);
    static final FunctionDescriptor _g_reserved3_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved3_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass._g_reserved3_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved3)();
     * }
     */
    public interface _g_reserved3 {

        void apply();
        static MemorySegment allocate(_g_reserved3 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass._g_reserved3_UP$MH, fi, _GMountOperationClass._g_reserved3$FUNC, scope);
        }
        static _g_reserved3 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GMountOperationClass._g_reserved3_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved3"));
    public static VarHandle _g_reserved3$VH() {
        return _GMountOperationClass._g_reserved3$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static MemorySegment _g_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved3$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static void _g_reserved3$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass._g_reserved3$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass._g_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved3 _g_reserved3(MemorySegment segment, SegmentScope scope) {
        return _g_reserved3.ofAddress(_g_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved4_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved4_UP$MH = RuntimeHelper.upcallHandle(_g_reserved4.class, "apply", _GMountOperationClass._g_reserved4_UP$FUNC);
    static final FunctionDescriptor _g_reserved4_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved4_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass._g_reserved4_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved4)();
     * }
     */
    public interface _g_reserved4 {

        void apply();
        static MemorySegment allocate(_g_reserved4 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass._g_reserved4_UP$MH, fi, _GMountOperationClass._g_reserved4$FUNC, scope);
        }
        static _g_reserved4 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GMountOperationClass._g_reserved4_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved4"));
    public static VarHandle _g_reserved4$VH() {
        return _GMountOperationClass._g_reserved4$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static MemorySegment _g_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved4$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static void _g_reserved4$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass._g_reserved4$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass._g_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved4 _g_reserved4(MemorySegment segment, SegmentScope scope) {
        return _g_reserved4.ofAddress(_g_reserved4$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved5_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved5_UP$MH = RuntimeHelper.upcallHandle(_g_reserved5.class, "apply", _GMountOperationClass._g_reserved5_UP$FUNC);
    static final FunctionDescriptor _g_reserved5_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved5_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass._g_reserved5_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved5)();
     * }
     */
    public interface _g_reserved5 {

        void apply();
        static MemorySegment allocate(_g_reserved5 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass._g_reserved5_UP$MH, fi, _GMountOperationClass._g_reserved5$FUNC, scope);
        }
        static _g_reserved5 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GMountOperationClass._g_reserved5_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved5"));
    public static VarHandle _g_reserved5$VH() {
        return _GMountOperationClass._g_reserved5$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static MemorySegment _g_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved5$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static void _g_reserved5$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass._g_reserved5$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass._g_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved5 _g_reserved5(MemorySegment segment, SegmentScope scope) {
        return _g_reserved5.ofAddress(_g_reserved5$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved6_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved6_UP$MH = RuntimeHelper.upcallHandle(_g_reserved6.class, "apply", _GMountOperationClass._g_reserved6_UP$FUNC);
    static final FunctionDescriptor _g_reserved6_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved6_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass._g_reserved6_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved6)();
     * }
     */
    public interface _g_reserved6 {

        void apply();
        static MemorySegment allocate(_g_reserved6 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass._g_reserved6_UP$MH, fi, _GMountOperationClass._g_reserved6$FUNC, scope);
        }
        static _g_reserved6 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GMountOperationClass._g_reserved6_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved6"));
    public static VarHandle _g_reserved6$VH() {
        return _GMountOperationClass._g_reserved6$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved6)();
     * }
     */
    public static MemorySegment _g_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved6$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved6)();
     * }
     */
    public static void _g_reserved6$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass._g_reserved6$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass._g_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved6 _g_reserved6(MemorySegment segment, SegmentScope scope) {
        return _g_reserved6.ofAddress(_g_reserved6$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved7$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved7_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved7_UP$MH = RuntimeHelper.upcallHandle(_g_reserved7.class, "apply", _GMountOperationClass._g_reserved7_UP$FUNC);
    static final FunctionDescriptor _g_reserved7_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved7_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass._g_reserved7_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved7)();
     * }
     */
    public interface _g_reserved7 {

        void apply();
        static MemorySegment allocate(_g_reserved7 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass._g_reserved7_UP$MH, fi, _GMountOperationClass._g_reserved7$FUNC, scope);
        }
        static _g_reserved7 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GMountOperationClass._g_reserved7_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved7$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved7"));
    public static VarHandle _g_reserved7$VH() {
        return _GMountOperationClass._g_reserved7$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved7)();
     * }
     */
    public static MemorySegment _g_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved7$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved7)();
     * }
     */
    public static void _g_reserved7$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass._g_reserved7$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved7$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass._g_reserved7$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved7 _g_reserved7(MemorySegment segment, SegmentScope scope) {
        return _g_reserved7.ofAddress(_g_reserved7$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved8$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved8_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved8_UP$MH = RuntimeHelper.upcallHandle(_g_reserved8.class, "apply", _GMountOperationClass._g_reserved8_UP$FUNC);
    static final FunctionDescriptor _g_reserved8_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved8_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass._g_reserved8_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved8)();
     * }
     */
    public interface _g_reserved8 {

        void apply();
        static MemorySegment allocate(_g_reserved8 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass._g_reserved8_UP$MH, fi, _GMountOperationClass._g_reserved8$FUNC, scope);
        }
        static _g_reserved8 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GMountOperationClass._g_reserved8_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved8$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved8"));
    public static VarHandle _g_reserved8$VH() {
        return _GMountOperationClass._g_reserved8$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved8)();
     * }
     */
    public static MemorySegment _g_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved8$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved8)();
     * }
     */
    public static void _g_reserved8$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass._g_reserved8$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass._g_reserved8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved8 _g_reserved8(MemorySegment segment, SegmentScope scope) {
        return _g_reserved8.ofAddress(_g_reserved8$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved9$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved9_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved9_UP$MH = RuntimeHelper.upcallHandle(_g_reserved9.class, "apply", _GMountOperationClass._g_reserved9_UP$FUNC);
    static final FunctionDescriptor _g_reserved9_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved9_DOWN$MH = RuntimeHelper.downcallHandle(
        _GMountOperationClass._g_reserved9_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved9)();
     * }
     */
    public interface _g_reserved9 {

        void apply();
        static MemorySegment allocate(_g_reserved9 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GMountOperationClass._g_reserved9_UP$MH, fi, _GMountOperationClass._g_reserved9$FUNC, scope);
        }
        static _g_reserved9 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GMountOperationClass._g_reserved9_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved9$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved9"));
    public static VarHandle _g_reserved9$VH() {
        return _GMountOperationClass._g_reserved9$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved9)();
     * }
     */
    public static MemorySegment _g_reserved9$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved9$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved9)();
     * }
     */
    public static void _g_reserved9$set(MemorySegment seg, MemorySegment x) {
        _GMountOperationClass._g_reserved9$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved9$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GMountOperationClass._g_reserved9$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved9$set(MemorySegment seg, long index, MemorySegment x) {
        _GMountOperationClass._g_reserved9$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved9 _g_reserved9(MemorySegment segment, SegmentScope scope) {
        return _g_reserved9.ofAddress(_g_reserved9$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


