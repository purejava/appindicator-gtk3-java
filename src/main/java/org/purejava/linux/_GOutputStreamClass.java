// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GOutputStreamClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("write_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("splice"),
        Constants$root.C_POINTER$LAYOUT.withName("flush"),
        Constants$root.C_POINTER$LAYOUT.withName("close_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("write_async"),
        Constants$root.C_POINTER$LAYOUT.withName("write_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("splice_async"),
        Constants$root.C_POINTER$LAYOUT.withName("splice_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("flush_async"),
        Constants$root.C_POINTER$LAYOUT.withName("flush_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("close_async"),
        Constants$root.C_POINTER$LAYOUT.withName("close_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("writev_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("writev_async"),
        Constants$root.C_POINTER$LAYOUT.withName("writev_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved6"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved7"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved8")
    ).withName("_GOutputStreamClass");
    public static MemoryLayout $LAYOUT() {
        return _GOutputStreamClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor write_fn$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle write_fn$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.write_fn$FUNC
    );
    public interface write_fn {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(write_fn fi, MemorySession session) {
            return RuntimeHelper.upcallStub(write_fn.class, fi, _GOutputStreamClass.write_fn$FUNC, session);
        }
        static write_fn ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (long)_GOutputStreamClass.write_fn$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_fn"));
    public static VarHandle write_fn$VH() {
        return _GOutputStreamClass.write_fn$VH;
    }
    public static MemoryAddress write_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.write_fn$VH.get(seg);
    }
    public static void write_fn$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.write_fn$VH.set(seg, x);
    }
    public static MemoryAddress write_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.write_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.write_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_fn write_fn (MemorySegment segment, MemorySession session) {
        return write_fn.ofAddress(write_fn$get(segment), session);
    }
    static final FunctionDescriptor splice$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle splice$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.splice$FUNC
    );
    public interface splice {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(splice fi, MemorySession session) {
            return RuntimeHelper.upcallStub(splice.class, fi, _GOutputStreamClass.splice$FUNC, session);
        }
        static splice ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    return (long)_GOutputStreamClass.splice$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle splice$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("splice"));
    public static VarHandle splice$VH() {
        return _GOutputStreamClass.splice$VH;
    }
    public static MemoryAddress splice$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.splice$VH.get(seg);
    }
    public static void splice$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.splice$VH.set(seg, x);
    }
    public static MemoryAddress splice$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.splice$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void splice$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.splice$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static splice splice (MemorySegment segment, MemorySession session) {
        return splice.ofAddress(splice$get(segment), session);
    }
    static final FunctionDescriptor flush$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle flush$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.flush$FUNC
    );
    public interface flush {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(flush fi, MemorySession session) {
            return RuntimeHelper.upcallStub(flush.class, fi, _GOutputStreamClass.flush$FUNC, session);
        }
        static flush ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GOutputStreamClass.flush$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle flush$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flush"));
    public static VarHandle flush$VH() {
        return _GOutputStreamClass.flush$VH;
    }
    public static MemoryAddress flush$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.flush$VH.get(seg);
    }
    public static void flush$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.flush$VH.set(seg, x);
    }
    public static MemoryAddress flush$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.flush$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flush$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.flush$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static flush flush (MemorySegment segment, MemorySession session) {
        return flush.ofAddress(flush$get(segment), session);
    }
    static final FunctionDescriptor close_fn$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle close_fn$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.close_fn$FUNC
    );
    public interface close_fn {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(close_fn fi, MemorySession session) {
            return RuntimeHelper.upcallStub(close_fn.class, fi, _GOutputStreamClass.close_fn$FUNC, session);
        }
        static close_fn ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GOutputStreamClass.close_fn$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle close_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("close_fn"));
    public static VarHandle close_fn$VH() {
        return _GOutputStreamClass.close_fn$VH;
    }
    public static MemoryAddress close_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.close_fn$VH.get(seg);
    }
    public static void close_fn$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.close_fn$VH.set(seg, x);
    }
    public static MemoryAddress close_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.close_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.close_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static close_fn close_fn (MemorySegment segment, MemorySession session) {
        return close_fn.ofAddress(close_fn$get(segment), session);
    }
    static final FunctionDescriptor write_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle write_async$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.write_async$FUNC
    );
    public interface write_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6);
        static MemorySegment allocate(write_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(write_async.class, fi, _GOutputStreamClass.write_async$FUNC, session);
        }
        static write_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6) -> {
                try {
                    _GOutputStreamClass.write_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_async"));
    public static VarHandle write_async$VH() {
        return _GOutputStreamClass.write_async$VH;
    }
    public static MemoryAddress write_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.write_async$VH.get(seg);
    }
    public static void write_async$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.write_async$VH.set(seg, x);
    }
    public static MemoryAddress write_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.write_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.write_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_async write_async (MemorySegment segment, MemorySession session) {
        return write_async.ofAddress(write_async$get(segment), session);
    }
    static final FunctionDescriptor write_finish$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle write_finish$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.write_finish$FUNC
    );
    public interface write_finish {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(write_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(write_finish.class, fi, _GOutputStreamClass.write_finish$FUNC, session);
        }
        static write_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (long)_GOutputStreamClass.write_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle write_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("write_finish"));
    public static VarHandle write_finish$VH() {
        return _GOutputStreamClass.write_finish$VH;
    }
    public static MemoryAddress write_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.write_finish$VH.get(seg);
    }
    public static void write_finish$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.write_finish$VH.set(seg, x);
    }
    public static MemoryAddress write_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.write_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void write_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.write_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static write_finish write_finish (MemorySegment segment, MemorySession session) {
        return write_finish.ofAddress(write_finish$get(segment), session);
    }
    static final FunctionDescriptor splice_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle splice_async$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.splice_async$FUNC
    );
    public interface splice_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6);
        static MemorySegment allocate(splice_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(splice_async.class, fi, _GOutputStreamClass.splice_async$FUNC, session);
        }
        static splice_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6) -> {
                try {
                    _GOutputStreamClass.splice_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle splice_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("splice_async"));
    public static VarHandle splice_async$VH() {
        return _GOutputStreamClass.splice_async$VH;
    }
    public static MemoryAddress splice_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.splice_async$VH.get(seg);
    }
    public static void splice_async$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.splice_async$VH.set(seg, x);
    }
    public static MemoryAddress splice_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.splice_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void splice_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.splice_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static splice_async splice_async (MemorySegment segment, MemorySession session) {
        return splice_async.ofAddress(splice_async$get(segment), session);
    }
    static final FunctionDescriptor splice_finish$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle splice_finish$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.splice_finish$FUNC
    );
    public interface splice_finish {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(splice_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(splice_finish.class, fi, _GOutputStreamClass.splice_finish$FUNC, session);
        }
        static splice_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (long)_GOutputStreamClass.splice_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle splice_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("splice_finish"));
    public static VarHandle splice_finish$VH() {
        return _GOutputStreamClass.splice_finish$VH;
    }
    public static MemoryAddress splice_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.splice_finish$VH.get(seg);
    }
    public static void splice_finish$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.splice_finish$VH.set(seg, x);
    }
    public static MemoryAddress splice_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.splice_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void splice_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.splice_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static splice_finish splice_finish (MemorySegment segment, MemorySession session) {
        return splice_finish.ofAddress(splice_finish$get(segment), session);
    }
    static final FunctionDescriptor flush_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle flush_async$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.flush_async$FUNC
    );
    public interface flush_async {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(flush_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(flush_async.class, fi, _GOutputStreamClass.flush_async$FUNC, session);
        }
        static flush_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GOutputStreamClass.flush_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle flush_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flush_async"));
    public static VarHandle flush_async$VH() {
        return _GOutputStreamClass.flush_async$VH;
    }
    public static MemoryAddress flush_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.flush_async$VH.get(seg);
    }
    public static void flush_async$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.flush_async$VH.set(seg, x);
    }
    public static MemoryAddress flush_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.flush_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flush_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.flush_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static flush_async flush_async (MemorySegment segment, MemorySession session) {
        return flush_async.ofAddress(flush_async$get(segment), session);
    }
    static final FunctionDescriptor flush_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle flush_finish$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.flush_finish$FUNC
    );
    public interface flush_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(flush_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(flush_finish.class, fi, _GOutputStreamClass.flush_finish$FUNC, session);
        }
        static flush_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GOutputStreamClass.flush_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle flush_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("flush_finish"));
    public static VarHandle flush_finish$VH() {
        return _GOutputStreamClass.flush_finish$VH;
    }
    public static MemoryAddress flush_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.flush_finish$VH.get(seg);
    }
    public static void flush_finish$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.flush_finish$VH.set(seg, x);
    }
    public static MemoryAddress flush_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.flush_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void flush_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.flush_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static flush_finish flush_finish (MemorySegment segment, MemorySession session) {
        return flush_finish.ofAddress(flush_finish$get(segment), session);
    }
    static final FunctionDescriptor close_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle close_async$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.close_async$FUNC
    );
    public interface close_async {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(close_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(close_async.class, fi, _GOutputStreamClass.close_async$FUNC, session);
        }
        static close_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GOutputStreamClass.close_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle close_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("close_async"));
    public static VarHandle close_async$VH() {
        return _GOutputStreamClass.close_async$VH;
    }
    public static MemoryAddress close_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.close_async$VH.get(seg);
    }
    public static void close_async$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.close_async$VH.set(seg, x);
    }
    public static MemoryAddress close_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.close_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.close_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static close_async close_async (MemorySegment segment, MemorySession session) {
        return close_async.ofAddress(close_async$get(segment), session);
    }
    static final FunctionDescriptor close_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle close_finish$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.close_finish$FUNC
    );
    public interface close_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(close_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(close_finish.class, fi, _GOutputStreamClass.close_finish$FUNC, session);
        }
        static close_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GOutputStreamClass.close_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle close_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("close_finish"));
    public static VarHandle close_finish$VH() {
        return _GOutputStreamClass.close_finish$VH;
    }
    public static MemoryAddress close_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.close_finish$VH.get(seg);
    }
    public static void close_finish$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.close_finish$VH.set(seg, x);
    }
    public static MemoryAddress close_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.close_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void close_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.close_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static close_finish close_finish (MemorySegment segment, MemorySession session) {
        return close_finish.ofAddress(close_finish$get(segment), session);
    }
    static final FunctionDescriptor writev_fn$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle writev_fn$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.writev_fn$FUNC
    );
    public interface writev_fn {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(writev_fn fi, MemorySession session) {
            return RuntimeHelper.upcallStub(writev_fn.class, fi, _GOutputStreamClass.writev_fn$FUNC, session);
        }
        static writev_fn ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)_GOutputStreamClass.writev_fn$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle writev_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("writev_fn"));
    public static VarHandle writev_fn$VH() {
        return _GOutputStreamClass.writev_fn$VH;
    }
    public static MemoryAddress writev_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.writev_fn$VH.get(seg);
    }
    public static void writev_fn$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.writev_fn$VH.set(seg, x);
    }
    public static MemoryAddress writev_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.writev_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void writev_fn$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.writev_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static writev_fn writev_fn (MemorySegment segment, MemorySession session) {
        return writev_fn.ofAddress(writev_fn$get(segment), session);
    }
    static final FunctionDescriptor writev_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle writev_async$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.writev_async$FUNC
    );
    public interface writev_async {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6);
        static MemorySegment allocate(writev_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(writev_async.class, fi, _GOutputStreamClass.writev_async$FUNC, session);
        }
        static writev_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6) -> {
                try {
                    _GOutputStreamClass.writev_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle writev_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("writev_async"));
    public static VarHandle writev_async$VH() {
        return _GOutputStreamClass.writev_async$VH;
    }
    public static MemoryAddress writev_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.writev_async$VH.get(seg);
    }
    public static void writev_async$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.writev_async$VH.set(seg, x);
    }
    public static MemoryAddress writev_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.writev_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void writev_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.writev_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static writev_async writev_async (MemorySegment segment, MemorySession session) {
        return writev_async.ofAddress(writev_async$get(segment), session);
    }
    static final FunctionDescriptor writev_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle writev_finish$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass.writev_finish$FUNC
    );
    public interface writev_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(writev_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(writev_finish.class, fi, _GOutputStreamClass.writev_finish$FUNC, session);
        }
        static writev_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)_GOutputStreamClass.writev_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle writev_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("writev_finish"));
    public static VarHandle writev_finish$VH() {
        return _GOutputStreamClass.writev_finish$VH;
    }
    public static MemoryAddress writev_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.writev_finish$VH.get(seg);
    }
    public static void writev_finish$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass.writev_finish$VH.set(seg, x);
    }
    public static MemoryAddress writev_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass.writev_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void writev_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass.writev_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static writev_finish writev_finish (MemorySegment segment, MemorySession session) {
        return writev_finish.ofAddress(writev_finish$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved4$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass._g_reserved4$FUNC
    );
    public interface _g_reserved4 {

        void apply();
        static MemorySegment allocate(_g_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved4.class, fi, _GOutputStreamClass._g_reserved4$FUNC, session);
        }
        static _g_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GOutputStreamClass._g_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved4"));
    public static VarHandle _g_reserved4$VH() {
        return _GOutputStreamClass._g_reserved4$VH;
    }
    public static MemoryAddress _g_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass._g_reserved4$VH.get(seg);
    }
    public static void _g_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass._g_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass._g_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass._g_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved4 _g_reserved4 (MemorySegment segment, MemorySession session) {
        return _g_reserved4.ofAddress(_g_reserved4$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved5$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass._g_reserved5$FUNC
    );
    public interface _g_reserved5 {

        void apply();
        static MemorySegment allocate(_g_reserved5 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved5.class, fi, _GOutputStreamClass._g_reserved5$FUNC, session);
        }
        static _g_reserved5 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GOutputStreamClass._g_reserved5$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved5"));
    public static VarHandle _g_reserved5$VH() {
        return _GOutputStreamClass._g_reserved5$VH;
    }
    public static MemoryAddress _g_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass._g_reserved5$VH.get(seg);
    }
    public static void _g_reserved5$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass._g_reserved5$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass._g_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved5$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass._g_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved5 _g_reserved5 (MemorySegment segment, MemorySession session) {
        return _g_reserved5.ofAddress(_g_reserved5$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved6$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass._g_reserved6$FUNC
    );
    public interface _g_reserved6 {

        void apply();
        static MemorySegment allocate(_g_reserved6 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved6.class, fi, _GOutputStreamClass._g_reserved6$FUNC, session);
        }
        static _g_reserved6 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GOutputStreamClass._g_reserved6$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved6"));
    public static VarHandle _g_reserved6$VH() {
        return _GOutputStreamClass._g_reserved6$VH;
    }
    public static MemoryAddress _g_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass._g_reserved6$VH.get(seg);
    }
    public static void _g_reserved6$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass._g_reserved6$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass._g_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved6$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass._g_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved6 _g_reserved6 (MemorySegment segment, MemorySession session) {
        return _g_reserved6.ofAddress(_g_reserved6$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved7$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved7$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass._g_reserved7$FUNC
    );
    public interface _g_reserved7 {

        void apply();
        static MemorySegment allocate(_g_reserved7 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved7.class, fi, _GOutputStreamClass._g_reserved7$FUNC, session);
        }
        static _g_reserved7 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GOutputStreamClass._g_reserved7$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved7$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved7"));
    public static VarHandle _g_reserved7$VH() {
        return _GOutputStreamClass._g_reserved7$VH;
    }
    public static MemoryAddress _g_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass._g_reserved7$VH.get(seg);
    }
    public static void _g_reserved7$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass._g_reserved7$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass._g_reserved7$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved7$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass._g_reserved7$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved7 _g_reserved7 (MemorySegment segment, MemorySession session) {
        return _g_reserved7.ofAddress(_g_reserved7$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved8$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved8$MH = RuntimeHelper.downcallHandle(
        _GOutputStreamClass._g_reserved8$FUNC
    );
    public interface _g_reserved8 {

        void apply();
        static MemorySegment allocate(_g_reserved8 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved8.class, fi, _GOutputStreamClass._g_reserved8$FUNC, session);
        }
        static _g_reserved8 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GOutputStreamClass._g_reserved8$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved8$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved8"));
    public static VarHandle _g_reserved8$VH() {
        return _GOutputStreamClass._g_reserved8$VH;
    }
    public static MemoryAddress _g_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass._g_reserved8$VH.get(seg);
    }
    public static void _g_reserved8$set( MemorySegment seg, MemoryAddress x) {
        _GOutputStreamClass._g_reserved8$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GOutputStreamClass._g_reserved8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved8$set(MemorySegment seg, long index, MemoryAddress x) {
        _GOutputStreamClass._g_reserved8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved8 _g_reserved8 (MemorySegment segment, MemorySession session) {
        return _g_reserved8.ofAddress(_g_reserved8$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


