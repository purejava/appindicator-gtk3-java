// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkActionClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("activate"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("menu_item_type"),
        Constants$root.C_LONG_LONG$LAYOUT.withName("toolbar_item_type"),
        Constants$root.C_POINTER$LAYOUT.withName("create_menu_item"),
        Constants$root.C_POINTER$LAYOUT.withName("create_tool_item"),
        Constants$root.C_POINTER$LAYOUT.withName("connect_proxy"),
        Constants$root.C_POINTER$LAYOUT.withName("disconnect_proxy"),
        Constants$root.C_POINTER$LAYOUT.withName("create_menu"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4")
    ).withName("_GtkActionClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkActionClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor activate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle activate$MH = RuntimeHelper.downcallHandle(
        _GtkActionClass.activate$FUNC
    );
    public interface activate {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(activate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(activate.class, fi, _GtkActionClass.activate$FUNC, session);
        }
        static activate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkActionClass.activate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("activate"));
    public static VarHandle activate$VH() {
        return _GtkActionClass.activate$VH;
    }
    public static MemoryAddress activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.activate$VH.get(seg);
    }
    public static void activate$set( MemorySegment seg, MemoryAddress x) {
        _GtkActionClass.activate$VH.set(seg, x);
    }
    public static MemoryAddress activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActionClass.activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate (MemorySegment segment, MemorySession session) {
        return activate.ofAddress(activate$get(segment), session);
    }
    static final VarHandle menu_item_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("menu_item_type"));
    public static VarHandle menu_item_type$VH() {
        return _GtkActionClass.menu_item_type$VH;
    }
    public static long menu_item_type$get(MemorySegment seg) {
        return (long)_GtkActionClass.menu_item_type$VH.get(seg);
    }
    public static void menu_item_type$set( MemorySegment seg, long x) {
        _GtkActionClass.menu_item_type$VH.set(seg, x);
    }
    public static long menu_item_type$get(MemorySegment seg, long index) {
        return (long)_GtkActionClass.menu_item_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void menu_item_type$set(MemorySegment seg, long index, long x) {
        _GtkActionClass.menu_item_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle toolbar_item_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("toolbar_item_type"));
    public static VarHandle toolbar_item_type$VH() {
        return _GtkActionClass.toolbar_item_type$VH;
    }
    public static long toolbar_item_type$get(MemorySegment seg) {
        return (long)_GtkActionClass.toolbar_item_type$VH.get(seg);
    }
    public static void toolbar_item_type$set( MemorySegment seg, long x) {
        _GtkActionClass.toolbar_item_type$VH.set(seg, x);
    }
    public static long toolbar_item_type$get(MemorySegment seg, long index) {
        return (long)_GtkActionClass.toolbar_item_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void toolbar_item_type$set(MemorySegment seg, long index, long x) {
        _GtkActionClass.toolbar_item_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor create_menu_item$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_menu_item$MH = RuntimeHelper.downcallHandle(
        _GtkActionClass.create_menu_item$FUNC
    );
    public interface create_menu_item {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(create_menu_item fi, MemorySession session) {
            return RuntimeHelper.upcallStub(create_menu_item.class, fi, _GtkActionClass.create_menu_item$FUNC, session);
        }
        static create_menu_item ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkActionClass.create_menu_item$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_menu_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_menu_item"));
    public static VarHandle create_menu_item$VH() {
        return _GtkActionClass.create_menu_item$VH;
    }
    public static MemoryAddress create_menu_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.create_menu_item$VH.get(seg);
    }
    public static void create_menu_item$set( MemorySegment seg, MemoryAddress x) {
        _GtkActionClass.create_menu_item$VH.set(seg, x);
    }
    public static MemoryAddress create_menu_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.create_menu_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_menu_item$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActionClass.create_menu_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_menu_item create_menu_item (MemorySegment segment, MemorySession session) {
        return create_menu_item.ofAddress(create_menu_item$get(segment), session);
    }
    static final FunctionDescriptor create_tool_item$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_tool_item$MH = RuntimeHelper.downcallHandle(
        _GtkActionClass.create_tool_item$FUNC
    );
    public interface create_tool_item {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(create_tool_item fi, MemorySession session) {
            return RuntimeHelper.upcallStub(create_tool_item.class, fi, _GtkActionClass.create_tool_item$FUNC, session);
        }
        static create_tool_item ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkActionClass.create_tool_item$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_tool_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_tool_item"));
    public static VarHandle create_tool_item$VH() {
        return _GtkActionClass.create_tool_item$VH;
    }
    public static MemoryAddress create_tool_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.create_tool_item$VH.get(seg);
    }
    public static void create_tool_item$set( MemorySegment seg, MemoryAddress x) {
        _GtkActionClass.create_tool_item$VH.set(seg, x);
    }
    public static MemoryAddress create_tool_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.create_tool_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_tool_item$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActionClass.create_tool_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_tool_item create_tool_item (MemorySegment segment, MemorySession session) {
        return create_tool_item.ofAddress(create_tool_item$get(segment), session);
    }
    static final FunctionDescriptor connect_proxy$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle connect_proxy$MH = RuntimeHelper.downcallHandle(
        _GtkActionClass.connect_proxy$FUNC
    );
    public interface connect_proxy {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(connect_proxy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(connect_proxy.class, fi, _GtkActionClass.connect_proxy$FUNC, session);
        }
        static connect_proxy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkActionClass.connect_proxy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle connect_proxy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("connect_proxy"));
    public static VarHandle connect_proxy$VH() {
        return _GtkActionClass.connect_proxy$VH;
    }
    public static MemoryAddress connect_proxy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.connect_proxy$VH.get(seg);
    }
    public static void connect_proxy$set( MemorySegment seg, MemoryAddress x) {
        _GtkActionClass.connect_proxy$VH.set(seg, x);
    }
    public static MemoryAddress connect_proxy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.connect_proxy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void connect_proxy$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActionClass.connect_proxy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static connect_proxy connect_proxy (MemorySegment segment, MemorySession session) {
        return connect_proxy.ofAddress(connect_proxy$get(segment), session);
    }
    static final FunctionDescriptor disconnect_proxy$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle disconnect_proxy$MH = RuntimeHelper.downcallHandle(
        _GtkActionClass.disconnect_proxy$FUNC
    );
    public interface disconnect_proxy {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(disconnect_proxy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(disconnect_proxy.class, fi, _GtkActionClass.disconnect_proxy$FUNC, session);
        }
        static disconnect_proxy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkActionClass.disconnect_proxy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle disconnect_proxy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("disconnect_proxy"));
    public static VarHandle disconnect_proxy$VH() {
        return _GtkActionClass.disconnect_proxy$VH;
    }
    public static MemoryAddress disconnect_proxy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.disconnect_proxy$VH.get(seg);
    }
    public static void disconnect_proxy$set( MemorySegment seg, MemoryAddress x) {
        _GtkActionClass.disconnect_proxy$VH.set(seg, x);
    }
    public static MemoryAddress disconnect_proxy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.disconnect_proxy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void disconnect_proxy$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActionClass.disconnect_proxy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static disconnect_proxy disconnect_proxy (MemorySegment segment, MemorySession session) {
        return disconnect_proxy.ofAddress(disconnect_proxy$get(segment), session);
    }
    static final FunctionDescriptor create_menu$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_menu$MH = RuntimeHelper.downcallHandle(
        _GtkActionClass.create_menu$FUNC
    );
    public interface create_menu {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(create_menu fi, MemorySession session) {
            return RuntimeHelper.upcallStub(create_menu.class, fi, _GtkActionClass.create_menu$FUNC, session);
        }
        static create_menu ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkActionClass.create_menu$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_menu$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_menu"));
    public static VarHandle create_menu$VH() {
        return _GtkActionClass.create_menu$VH;
    }
    public static MemoryAddress create_menu$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.create_menu$VH.get(seg);
    }
    public static void create_menu$set( MemorySegment seg, MemoryAddress x) {
        _GtkActionClass.create_menu$VH.set(seg, x);
    }
    public static MemoryAddress create_menu$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass.create_menu$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_menu$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActionClass.create_menu$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_menu create_menu (MemorySegment segment, MemorySession session) {
        return create_menu.ofAddress(create_menu$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1$MH = RuntimeHelper.downcallHandle(
        _GtkActionClass._gtk_reserved1$FUNC
    );
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved1.class, fi, _GtkActionClass._gtk_reserved1$FUNC, session);
        }
        static _gtk_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkActionClass._gtk_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkActionClass._gtk_reserved1$VH;
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass._gtk_reserved1$VH.get(seg);
    }
    public static void _gtk_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GtkActionClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActionClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2$MH = RuntimeHelper.downcallHandle(
        _GtkActionClass._gtk_reserved2$FUNC
    );
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved2.class, fi, _GtkActionClass._gtk_reserved2$FUNC, session);
        }
        static _gtk_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkActionClass._gtk_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkActionClass._gtk_reserved2$VH;
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass._gtk_reserved2$VH.get(seg);
    }
    public static void _gtk_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GtkActionClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActionClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3$MH = RuntimeHelper.downcallHandle(
        _GtkActionClass._gtk_reserved3$FUNC
    );
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved3.class, fi, _GtkActionClass._gtk_reserved3$FUNC, session);
        }
        static _gtk_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkActionClass._gtk_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkActionClass._gtk_reserved3$VH;
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass._gtk_reserved3$VH.get(seg);
    }
    public static void _gtk_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GtkActionClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActionClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4$MH = RuntimeHelper.downcallHandle(
        _GtkActionClass._gtk_reserved4$FUNC
    );
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved4.class, fi, _GtkActionClass._gtk_reserved4$FUNC, session);
        }
        static _gtk_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkActionClass._gtk_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkActionClass._gtk_reserved4$VH;
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass._gtk_reserved4$VH.get(seg);
    }
    public static void _gtk_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GtkActionClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActionClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActionClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


