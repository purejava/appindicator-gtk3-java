// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkValueIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_current_value"),
        Constants$root.C_POINTER$LAYOUT.withName("get_maximum_value"),
        Constants$root.C_POINTER$LAYOUT.withName("get_minimum_value"),
        Constants$root.C_POINTER$LAYOUT.withName("set_current_value"),
        Constants$root.C_POINTER$LAYOUT.withName("get_minimum_increment"),
        Constants$root.C_POINTER$LAYOUT.withName("get_value_and_text"),
        Constants$root.C_POINTER$LAYOUT.withName("get_range"),
        Constants$root.C_POINTER$LAYOUT.withName("get_increment"),
        Constants$root.C_POINTER$LAYOUT.withName("get_sub_ranges"),
        Constants$root.C_POINTER$LAYOUT.withName("set_value")
    ).withName("_AtkValueIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkValueIface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_current_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_current_value$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_current_value$FUNC
    );
    public interface get_current_value {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_current_value fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_current_value.class, fi, _AtkValueIface.get_current_value$FUNC, session);
        }
        static get_current_value ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkValueIface.get_current_value$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_current_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_current_value"));
    public static VarHandle get_current_value$VH() {
        return _AtkValueIface.get_current_value$VH;
    }
    public static MemoryAddress get_current_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_current_value$VH.get(seg);
    }
    public static void get_current_value$set( MemorySegment seg, MemoryAddress x) {
        _AtkValueIface.get_current_value$VH.set(seg, x);
    }
    public static MemoryAddress get_current_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_current_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_current_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkValueIface.get_current_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_current_value get_current_value (MemorySegment segment, MemorySession session) {
        return get_current_value.ofAddress(get_current_value$get(segment), session);
    }
    static final FunctionDescriptor get_maximum_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_maximum_value$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_maximum_value$FUNC
    );
    public interface get_maximum_value {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_maximum_value fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_maximum_value.class, fi, _AtkValueIface.get_maximum_value$FUNC, session);
        }
        static get_maximum_value ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkValueIface.get_maximum_value$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_maximum_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_maximum_value"));
    public static VarHandle get_maximum_value$VH() {
        return _AtkValueIface.get_maximum_value$VH;
    }
    public static MemoryAddress get_maximum_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_maximum_value$VH.get(seg);
    }
    public static void get_maximum_value$set( MemorySegment seg, MemoryAddress x) {
        _AtkValueIface.get_maximum_value$VH.set(seg, x);
    }
    public static MemoryAddress get_maximum_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_maximum_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_maximum_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkValueIface.get_maximum_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_maximum_value get_maximum_value (MemorySegment segment, MemorySession session) {
        return get_maximum_value.ofAddress(get_maximum_value$get(segment), session);
    }
    static final FunctionDescriptor get_minimum_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_minimum_value$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_minimum_value$FUNC
    );
    public interface get_minimum_value {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_minimum_value fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_minimum_value.class, fi, _AtkValueIface.get_minimum_value$FUNC, session);
        }
        static get_minimum_value ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkValueIface.get_minimum_value$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_minimum_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_minimum_value"));
    public static VarHandle get_minimum_value$VH() {
        return _AtkValueIface.get_minimum_value$VH;
    }
    public static MemoryAddress get_minimum_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_minimum_value$VH.get(seg);
    }
    public static void get_minimum_value$set( MemorySegment seg, MemoryAddress x) {
        _AtkValueIface.get_minimum_value$VH.set(seg, x);
    }
    public static MemoryAddress get_minimum_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_minimum_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_minimum_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkValueIface.get_minimum_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_minimum_value get_minimum_value (MemorySegment segment, MemorySession session) {
        return get_minimum_value.ofAddress(get_minimum_value$get(segment), session);
    }
    static final FunctionDescriptor set_current_value$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_current_value$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.set_current_value$FUNC
    );
    public interface set_current_value {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_current_value fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_current_value.class, fi, _AtkValueIface.set_current_value$FUNC, session);
        }
        static set_current_value ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_AtkValueIface.set_current_value$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_current_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_current_value"));
    public static VarHandle set_current_value$VH() {
        return _AtkValueIface.set_current_value$VH;
    }
    public static MemoryAddress set_current_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.set_current_value$VH.get(seg);
    }
    public static void set_current_value$set( MemorySegment seg, MemoryAddress x) {
        _AtkValueIface.set_current_value$VH.set(seg, x);
    }
    public static MemoryAddress set_current_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.set_current_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_current_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkValueIface.set_current_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_current_value set_current_value (MemorySegment segment, MemorySession session) {
        return set_current_value.ofAddress(set_current_value$get(segment), session);
    }
    static final FunctionDescriptor get_minimum_increment$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_minimum_increment$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_minimum_increment$FUNC
    );
    public interface get_minimum_increment {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_minimum_increment fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_minimum_increment.class, fi, _AtkValueIface.get_minimum_increment$FUNC, session);
        }
        static get_minimum_increment ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _AtkValueIface.get_minimum_increment$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_minimum_increment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_minimum_increment"));
    public static VarHandle get_minimum_increment$VH() {
        return _AtkValueIface.get_minimum_increment$VH;
    }
    public static MemoryAddress get_minimum_increment$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_minimum_increment$VH.get(seg);
    }
    public static void get_minimum_increment$set( MemorySegment seg, MemoryAddress x) {
        _AtkValueIface.get_minimum_increment$VH.set(seg, x);
    }
    public static MemoryAddress get_minimum_increment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_minimum_increment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_minimum_increment$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkValueIface.get_minimum_increment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_minimum_increment get_minimum_increment (MemorySegment segment, MemorySession session) {
        return get_minimum_increment.ofAddress(get_minimum_increment$get(segment), session);
    }
    static final FunctionDescriptor get_value_and_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_value_and_text$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_value_and_text$FUNC
    );
    public interface get_value_and_text {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(get_value_and_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_value_and_text.class, fi, _AtkValueIface.get_value_and_text$FUNC, session);
        }
        static get_value_and_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _AtkValueIface.get_value_and_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_value_and_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_value_and_text"));
    public static VarHandle get_value_and_text$VH() {
        return _AtkValueIface.get_value_and_text$VH;
    }
    public static MemoryAddress get_value_and_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_value_and_text$VH.get(seg);
    }
    public static void get_value_and_text$set( MemorySegment seg, MemoryAddress x) {
        _AtkValueIface.get_value_and_text$VH.set(seg, x);
    }
    public static MemoryAddress get_value_and_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_value_and_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_value_and_text$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkValueIface.get_value_and_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_value_and_text get_value_and_text (MemorySegment segment, MemorySession session) {
        return get_value_and_text.ofAddress(get_value_and_text$get(segment), session);
    }
    static final FunctionDescriptor get_range$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_range$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_range$FUNC
    );
    public interface get_range {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_range fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_range.class, fi, _AtkValueIface.get_range$FUNC, session);
        }
        static get_range ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkValueIface.get_range$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_range$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_range"));
    public static VarHandle get_range$VH() {
        return _AtkValueIface.get_range$VH;
    }
    public static MemoryAddress get_range$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_range$VH.get(seg);
    }
    public static void get_range$set( MemorySegment seg, MemoryAddress x) {
        _AtkValueIface.get_range$VH.set(seg, x);
    }
    public static MemoryAddress get_range$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_range$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_range$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkValueIface.get_range$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_range get_range (MemorySegment segment, MemorySession session) {
        return get_range.ofAddress(get_range$get(segment), session);
    }
    static final FunctionDescriptor get_increment$FUNC = FunctionDescriptor.of(Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_increment$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_increment$FUNC
    );
    public interface get_increment {

        double apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_increment fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_increment.class, fi, _AtkValueIface.get_increment$FUNC, session);
        }
        static get_increment ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (double)_AtkValueIface.get_increment$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_increment$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_increment"));
    public static VarHandle get_increment$VH() {
        return _AtkValueIface.get_increment$VH;
    }
    public static MemoryAddress get_increment$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_increment$VH.get(seg);
    }
    public static void get_increment$set( MemorySegment seg, MemoryAddress x) {
        _AtkValueIface.get_increment$VH.set(seg, x);
    }
    public static MemoryAddress get_increment$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_increment$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_increment$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkValueIface.get_increment$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_increment get_increment (MemorySegment segment, MemorySession session) {
        return get_increment.ofAddress(get_increment$get(segment), session);
    }
    static final FunctionDescriptor get_sub_ranges$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_sub_ranges$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.get_sub_ranges$FUNC
    );
    public interface get_sub_ranges {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_sub_ranges fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_sub_ranges.class, fi, _AtkValueIface.get_sub_ranges$FUNC, session);
        }
        static get_sub_ranges ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkValueIface.get_sub_ranges$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_sub_ranges$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_sub_ranges"));
    public static VarHandle get_sub_ranges$VH() {
        return _AtkValueIface.get_sub_ranges$VH;
    }
    public static MemoryAddress get_sub_ranges$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_sub_ranges$VH.get(seg);
    }
    public static void get_sub_ranges$set( MemorySegment seg, MemoryAddress x) {
        _AtkValueIface.get_sub_ranges$VH.set(seg, x);
    }
    public static MemoryAddress get_sub_ranges$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.get_sub_ranges$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_sub_ranges$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkValueIface.get_sub_ranges$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_sub_ranges get_sub_ranges (MemorySegment segment, MemorySession session) {
        return get_sub_ranges.ofAddress(get_sub_ranges$get(segment), session);
    }
    static final FunctionDescriptor set_value$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle set_value$MH = RuntimeHelper.downcallHandle(
        _AtkValueIface.set_value$FUNC
    );
    public interface set_value {

        void apply(java.lang.foreign.MemoryAddress _x0, double _x1);
        static MemorySegment allocate(set_value fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_value.class, fi, _AtkValueIface.set_value$FUNC, session);
        }
        static set_value ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, double __x1) -> {
                try {
                    _AtkValueIface.set_value$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_value"));
    public static VarHandle set_value$VH() {
        return _AtkValueIface.set_value$VH;
    }
    public static MemoryAddress set_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.set_value$VH.get(seg);
    }
    public static void set_value$set( MemorySegment seg, MemoryAddress x) {
        _AtkValueIface.set_value$VH.set(seg, x);
    }
    public static MemoryAddress set_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkValueIface.set_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkValueIface.set_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_value set_value (MemorySegment segment, MemorySession session) {
        return set_value.ofAddress(set_value$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


