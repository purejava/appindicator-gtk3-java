// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkTreeSortableIface {
 *     GTypeInterface g_iface;
 *     void (*sort_column_changed)(GtkTreeSortable*);
 *     gboolean (*get_sort_column_id)(GtkTreeSortable*,gint*,GtkSortType*);
 *     void (*set_sort_column_id)(GtkTreeSortable*,gint,GtkSortType);
 *     void (*set_sort_func)(GtkTreeSortable*,gint,GtkTreeIterCompareFunc,gpointer,GDestroyNotify);
 *     void (*set_default_sort_func)(GtkTreeSortable*,GtkTreeIterCompareFunc,gpointer,GDestroyNotify);
 *     gboolean (*has_default_sort_func)(GtkTreeSortable*);
 * };
 * }
 */
public class _GtkTreeSortableIface {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("sort_column_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("get_sort_column_id"),
        Constants$root.C_POINTER$LAYOUT.withName("set_sort_column_id"),
        Constants$root.C_POINTER$LAYOUT.withName("set_sort_func"),
        Constants$root.C_POINTER$LAYOUT.withName("set_default_sort_func"),
        Constants$root.C_POINTER$LAYOUT.withName("has_default_sort_func")
    ).withName("_GtkTreeSortableIface");
    public static MemoryLayout $LAYOUT() {
        return _GtkTreeSortableIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor sort_column_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor sort_column_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle sort_column_changed_UP$MH = RuntimeHelper.upcallHandle(sort_column_changed.class, "apply", _GtkTreeSortableIface.sort_column_changed_UP$FUNC);
    static final FunctionDescriptor sort_column_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle sort_column_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTreeSortableIface.sort_column_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*sort_column_changed)(GtkTreeSortable*);
     * }
     */
    public interface sort_column_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(sort_column_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTreeSortableIface.sort_column_changed_UP$MH, fi, _GtkTreeSortableIface.sort_column_changed$FUNC, scope);
        }
        static sort_column_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    _GtkTreeSortableIface.sort_column_changed_DOWN$MH.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle sort_column_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sort_column_changed"));
    public static VarHandle sort_column_changed$VH() {
        return _GtkTreeSortableIface.sort_column_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*sort_column_changed)(GtkTreeSortable*);
     * }
     */
    public static MemorySegment sort_column_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.sort_column_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*sort_column_changed)(GtkTreeSortable*);
     * }
     */
    public static void sort_column_changed$set(MemorySegment seg, MemorySegment x) {
        _GtkTreeSortableIface.sort_column_changed$VH.set(seg, x);
    }
    public static MemorySegment sort_column_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.sort_column_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sort_column_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTreeSortableIface.sort_column_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static sort_column_changed sort_column_changed(MemorySegment segment, SegmentScope scope) {
        return sort_column_changed.ofAddress(sort_column_changed$get(segment), scope);
    }
    static final FunctionDescriptor get_sort_column_id$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_sort_column_id_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_sort_column_id_UP$MH = RuntimeHelper.upcallHandle(get_sort_column_id.class, "apply", _GtkTreeSortableIface.get_sort_column_id_UP$FUNC);
    static final FunctionDescriptor get_sort_column_id_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_sort_column_id_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTreeSortableIface.get_sort_column_id_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*get_sort_column_id)(GtkTreeSortable*,gint*,GtkSortType*);
     * }
     */
    public interface get_sort_column_id {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(get_sort_column_id fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTreeSortableIface.get_sort_column_id_UP$MH, fi, _GtkTreeSortableIface.get_sort_column_id$FUNC, scope);
        }
        static get_sort_column_id ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    return (int)_GtkTreeSortableIface.get_sort_column_id_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_sort_column_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_sort_column_id"));
    public static VarHandle get_sort_column_id$VH() {
        return _GtkTreeSortableIface.get_sort_column_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*get_sort_column_id)(GtkTreeSortable*,gint*,GtkSortType*);
     * }
     */
    public static MemorySegment get_sort_column_id$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.get_sort_column_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*get_sort_column_id)(GtkTreeSortable*,gint*,GtkSortType*);
     * }
     */
    public static void get_sort_column_id$set(MemorySegment seg, MemorySegment x) {
        _GtkTreeSortableIface.get_sort_column_id$VH.set(seg, x);
    }
    public static MemorySegment get_sort_column_id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.get_sort_column_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_sort_column_id$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTreeSortableIface.get_sort_column_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_sort_column_id get_sort_column_id(MemorySegment segment, SegmentScope scope) {
        return get_sort_column_id.ofAddress(get_sort_column_id$get(segment), scope);
    }
    static final FunctionDescriptor set_sort_column_id$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor set_sort_column_id_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_sort_column_id_UP$MH = RuntimeHelper.upcallHandle(set_sort_column_id.class, "apply", _GtkTreeSortableIface.set_sort_column_id_UP$FUNC);
    static final FunctionDescriptor set_sort_column_id_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_sort_column_id_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTreeSortableIface.set_sort_column_id_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_sort_column_id)(GtkTreeSortable*,gint,GtkSortType);
     * }
     */
    public interface set_sort_column_id {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(set_sort_column_id fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTreeSortableIface.set_sort_column_id_UP$MH, fi, _GtkTreeSortableIface.set_sort_column_id$FUNC, scope);
        }
        static set_sort_column_id ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    _GtkTreeSortableIface.set_sort_column_id_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_sort_column_id$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_sort_column_id"));
    public static VarHandle set_sort_column_id$VH() {
        return _GtkTreeSortableIface.set_sort_column_id$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_sort_column_id)(GtkTreeSortable*,gint,GtkSortType);
     * }
     */
    public static MemorySegment set_sort_column_id$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.set_sort_column_id$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_sort_column_id)(GtkTreeSortable*,gint,GtkSortType);
     * }
     */
    public static void set_sort_column_id$set(MemorySegment seg, MemorySegment x) {
        _GtkTreeSortableIface.set_sort_column_id$VH.set(seg, x);
    }
    public static MemorySegment set_sort_column_id$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.set_sort_column_id$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_sort_column_id$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTreeSortableIface.set_sort_column_id$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_sort_column_id set_sort_column_id(MemorySegment segment, SegmentScope scope) {
        return set_sort_column_id.ofAddress(set_sort_column_id$get(segment), scope);
    }
    static final FunctionDescriptor set_sort_func$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_sort_func_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_sort_func_UP$MH = RuntimeHelper.upcallHandle(set_sort_func.class, "apply", _GtkTreeSortableIface.set_sort_func_UP$FUNC);
    static final FunctionDescriptor set_sort_func_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_sort_func_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTreeSortableIface.set_sort_func_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_sort_func)(GtkTreeSortable*,gint,GtkTreeIterCompareFunc,gpointer,GDestroyNotify);
     * }
     */
    public interface set_sort_func {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(set_sort_func fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTreeSortableIface.set_sort_func_UP$MH, fi, _GtkTreeSortableIface.set_sort_func$FUNC, scope);
        }
        static set_sort_func ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    _GtkTreeSortableIface.set_sort_func_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_sort_func$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_sort_func"));
    public static VarHandle set_sort_func$VH() {
        return _GtkTreeSortableIface.set_sort_func$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_sort_func)(GtkTreeSortable*,gint,GtkTreeIterCompareFunc,gpointer,GDestroyNotify);
     * }
     */
    public static MemorySegment set_sort_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.set_sort_func$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_sort_func)(GtkTreeSortable*,gint,GtkTreeIterCompareFunc,gpointer,GDestroyNotify);
     * }
     */
    public static void set_sort_func$set(MemorySegment seg, MemorySegment x) {
        _GtkTreeSortableIface.set_sort_func$VH.set(seg, x);
    }
    public static MemorySegment set_sort_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.set_sort_func$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_sort_func$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTreeSortableIface.set_sort_func$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_sort_func set_sort_func(MemorySegment segment, SegmentScope scope) {
        return set_sort_func.ofAddress(set_sort_func$get(segment), scope);
    }
    static final FunctionDescriptor set_default_sort_func$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor set_default_sort_func_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_default_sort_func_UP$MH = RuntimeHelper.upcallHandle(set_default_sort_func.class, "apply", _GtkTreeSortableIface.set_default_sort_func_UP$FUNC);
    static final FunctionDescriptor set_default_sort_func_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_default_sort_func_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTreeSortableIface.set_default_sort_func_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*set_default_sort_func)(GtkTreeSortable*,GtkTreeIterCompareFunc,gpointer,GDestroyNotify);
     * }
     */
    public interface set_default_sort_func {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(set_default_sort_func fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTreeSortableIface.set_default_sort_func_UP$MH, fi, _GtkTreeSortableIface.set_default_sort_func$FUNC, scope);
        }
        static set_default_sort_func ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    _GtkTreeSortableIface.set_default_sort_func_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_default_sort_func$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_default_sort_func"));
    public static VarHandle set_default_sort_func$VH() {
        return _GtkTreeSortableIface.set_default_sort_func$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_default_sort_func)(GtkTreeSortable*,GtkTreeIterCompareFunc,gpointer,GDestroyNotify);
     * }
     */
    public static MemorySegment set_default_sort_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.set_default_sort_func$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_default_sort_func)(GtkTreeSortable*,GtkTreeIterCompareFunc,gpointer,GDestroyNotify);
     * }
     */
    public static void set_default_sort_func$set(MemorySegment seg, MemorySegment x) {
        _GtkTreeSortableIface.set_default_sort_func$VH.set(seg, x);
    }
    public static MemorySegment set_default_sort_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.set_default_sort_func$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_default_sort_func$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTreeSortableIface.set_default_sort_func$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_default_sort_func set_default_sort_func(MemorySegment segment, SegmentScope scope) {
        return set_default_sort_func.ofAddress(set_default_sort_func$get(segment), scope);
    }
    static final FunctionDescriptor has_default_sort_func$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor has_default_sort_func_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle has_default_sort_func_UP$MH = RuntimeHelper.upcallHandle(has_default_sort_func.class, "apply", _GtkTreeSortableIface.has_default_sort_func_UP$FUNC);
    static final FunctionDescriptor has_default_sort_func_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle has_default_sort_func_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTreeSortableIface.has_default_sort_func_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*has_default_sort_func)(GtkTreeSortable*);
     * }
     */
    public interface has_default_sort_func {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(has_default_sort_func fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTreeSortableIface.has_default_sort_func_UP$MH, fi, _GtkTreeSortableIface.has_default_sort_func$FUNC, scope);
        }
        static has_default_sort_func ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GtkTreeSortableIface.has_default_sort_func_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle has_default_sort_func$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("has_default_sort_func"));
    public static VarHandle has_default_sort_func$VH() {
        return _GtkTreeSortableIface.has_default_sort_func$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*has_default_sort_func)(GtkTreeSortable*);
     * }
     */
    public static MemorySegment has_default_sort_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.has_default_sort_func$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*has_default_sort_func)(GtkTreeSortable*);
     * }
     */
    public static void has_default_sort_func$set(MemorySegment seg, MemorySegment x) {
        _GtkTreeSortableIface.has_default_sort_func$VH.set(seg, x);
    }
    public static MemorySegment has_default_sort_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTreeSortableIface.has_default_sort_func$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void has_default_sort_func$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTreeSortableIface.has_default_sort_func$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static has_default_sort_func has_default_sort_func(MemorySegment segment, SegmentScope scope) {
        return has_default_sort_func.ofAddress(has_default_sort_func$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


