// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkAccelGroupActivate {

    int apply(java.lang.foreign.MemoryAddress accel_group, java.lang.foreign.MemoryAddress acceleratable, int keyval, int modifier);
    static MemorySegment allocate(GtkAccelGroupActivate fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkAccelGroupActivate.class, fi, constants$1365.GtkAccelGroupActivate$FUNC, session);
    }
    static GtkAccelGroupActivate ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _accel_group, java.lang.foreign.MemoryAddress _acceleratable, int _keyval, int _modifier) -> {
            try {
                return (int)constants$1366.GtkAccelGroupActivate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_accel_group, (java.lang.foreign.Addressable)_acceleratable, _keyval, _modifier);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


