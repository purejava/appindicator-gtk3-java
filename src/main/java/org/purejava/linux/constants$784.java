// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
final class constants$784 {

    // Suppresses default constructor, ensuring non-instantiability.
    private constants$784() {}
    static final FunctionDescriptor g_subprocess_get_stdin_pipe$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_subprocess_get_stdin_pipe$MH = RuntimeHelper.downcallHandle(
        "g_subprocess_get_stdin_pipe",
        constants$784.g_subprocess_get_stdin_pipe$FUNC
    );
    static final FunctionDescriptor g_subprocess_get_stdout_pipe$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_subprocess_get_stdout_pipe$MH = RuntimeHelper.downcallHandle(
        "g_subprocess_get_stdout_pipe",
        constants$784.g_subprocess_get_stdout_pipe$FUNC
    );
    static final FunctionDescriptor g_subprocess_get_stderr_pipe$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_subprocess_get_stderr_pipe$MH = RuntimeHelper.downcallHandle(
        "g_subprocess_get_stderr_pipe",
        constants$784.g_subprocess_get_stderr_pipe$FUNC
    );
    static final FunctionDescriptor g_subprocess_get_identifier$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_subprocess_get_identifier$MH = RuntimeHelper.downcallHandle(
        "g_subprocess_get_identifier",
        constants$784.g_subprocess_get_identifier$FUNC
    );
    static final FunctionDescriptor g_subprocess_send_signal$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle g_subprocess_send_signal$MH = RuntimeHelper.downcallHandle(
        "g_subprocess_send_signal",
        constants$784.g_subprocess_send_signal$FUNC
    );
    static final FunctionDescriptor g_subprocess_force_exit$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle g_subprocess_force_exit$MH = RuntimeHelper.downcallHandle(
        "g_subprocess_force_exit",
        constants$784.g_subprocess_force_exit$FUNC
    );
}


