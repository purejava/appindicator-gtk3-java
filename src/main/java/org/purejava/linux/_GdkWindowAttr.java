// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkWindowAttr {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("title"),
        Constants$root.C_INT$LAYOUT.withName("event_mask"),
        Constants$root.C_INT$LAYOUT.withName("x"),
        Constants$root.C_INT$LAYOUT.withName("y"),
        Constants$root.C_INT$LAYOUT.withName("width"),
        Constants$root.C_INT$LAYOUT.withName("height"),
        Constants$root.C_INT$LAYOUT.withName("wclass"),
        Constants$root.C_POINTER$LAYOUT.withName("visual"),
        Constants$root.C_INT$LAYOUT.withName("window_type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("cursor"),
        Constants$root.C_POINTER$LAYOUT.withName("wmclass_name"),
        Constants$root.C_POINTER$LAYOUT.withName("wmclass_class"),
        Constants$root.C_INT$LAYOUT.withName("override_redirect"),
        Constants$root.C_INT$LAYOUT.withName("type_hint")
    ).withName("_GdkWindowAttr");
    public static MemoryLayout $LAYOUT() {
        return _GdkWindowAttr.$struct$LAYOUT;
    }
    static final VarHandle title$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("title"));
    public static VarHandle title$VH() {
        return _GdkWindowAttr.title$VH;
    }
    public static MemoryAddress title$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkWindowAttr.title$VH.get(seg);
    }
    public static void title$set( MemorySegment seg, MemoryAddress x) {
        _GdkWindowAttr.title$VH.set(seg, x);
    }
    public static MemoryAddress title$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkWindowAttr.title$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void title$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkWindowAttr.title$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle event_mask$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("event_mask"));
    public static VarHandle event_mask$VH() {
        return _GdkWindowAttr.event_mask$VH;
    }
    public static int event_mask$get(MemorySegment seg) {
        return (int)_GdkWindowAttr.event_mask$VH.get(seg);
    }
    public static void event_mask$set( MemorySegment seg, int x) {
        _GdkWindowAttr.event_mask$VH.set(seg, x);
    }
    public static int event_mask$get(MemorySegment seg, long index) {
        return (int)_GdkWindowAttr.event_mask$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void event_mask$set(MemorySegment seg, long index, int x) {
        _GdkWindowAttr.event_mask$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle x$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("x"));
    public static VarHandle x$VH() {
        return _GdkWindowAttr.x$VH;
    }
    public static int x$get(MemorySegment seg) {
        return (int)_GdkWindowAttr.x$VH.get(seg);
    }
    public static void x$set( MemorySegment seg, int x) {
        _GdkWindowAttr.x$VH.set(seg, x);
    }
    public static int x$get(MemorySegment seg, long index) {
        return (int)_GdkWindowAttr.x$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void x$set(MemorySegment seg, long index, int x) {
        _GdkWindowAttr.x$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle y$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("y"));
    public static VarHandle y$VH() {
        return _GdkWindowAttr.y$VH;
    }
    public static int y$get(MemorySegment seg) {
        return (int)_GdkWindowAttr.y$VH.get(seg);
    }
    public static void y$set( MemorySegment seg, int x) {
        _GdkWindowAttr.y$VH.set(seg, x);
    }
    public static int y$get(MemorySegment seg, long index) {
        return (int)_GdkWindowAttr.y$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void y$set(MemorySegment seg, long index, int x) {
        _GdkWindowAttr.y$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle width$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("width"));
    public static VarHandle width$VH() {
        return _GdkWindowAttr.width$VH;
    }
    public static int width$get(MemorySegment seg) {
        return (int)_GdkWindowAttr.width$VH.get(seg);
    }
    public static void width$set( MemorySegment seg, int x) {
        _GdkWindowAttr.width$VH.set(seg, x);
    }
    public static int width$get(MemorySegment seg, long index) {
        return (int)_GdkWindowAttr.width$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void width$set(MemorySegment seg, long index, int x) {
        _GdkWindowAttr.width$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle height$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("height"));
    public static VarHandle height$VH() {
        return _GdkWindowAttr.height$VH;
    }
    public static int height$get(MemorySegment seg) {
        return (int)_GdkWindowAttr.height$VH.get(seg);
    }
    public static void height$set( MemorySegment seg, int x) {
        _GdkWindowAttr.height$VH.set(seg, x);
    }
    public static int height$get(MemorySegment seg, long index) {
        return (int)_GdkWindowAttr.height$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void height$set(MemorySegment seg, long index, int x) {
        _GdkWindowAttr.height$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wclass$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wclass"));
    public static VarHandle wclass$VH() {
        return _GdkWindowAttr.wclass$VH;
    }
    public static int wclass$get(MemorySegment seg) {
        return (int)_GdkWindowAttr.wclass$VH.get(seg);
    }
    public static void wclass$set( MemorySegment seg, int x) {
        _GdkWindowAttr.wclass$VH.set(seg, x);
    }
    public static int wclass$get(MemorySegment seg, long index) {
        return (int)_GdkWindowAttr.wclass$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wclass$set(MemorySegment seg, long index, int x) {
        _GdkWindowAttr.wclass$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle visual$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("visual"));
    public static VarHandle visual$VH() {
        return _GdkWindowAttr.visual$VH;
    }
    public static MemoryAddress visual$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkWindowAttr.visual$VH.get(seg);
    }
    public static void visual$set( MemorySegment seg, MemoryAddress x) {
        _GdkWindowAttr.visual$VH.set(seg, x);
    }
    public static MemoryAddress visual$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkWindowAttr.visual$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void visual$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkWindowAttr.visual$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle window_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("window_type"));
    public static VarHandle window_type$VH() {
        return _GdkWindowAttr.window_type$VH;
    }
    public static int window_type$get(MemorySegment seg) {
        return (int)_GdkWindowAttr.window_type$VH.get(seg);
    }
    public static void window_type$set( MemorySegment seg, int x) {
        _GdkWindowAttr.window_type$VH.set(seg, x);
    }
    public static int window_type$get(MemorySegment seg, long index) {
        return (int)_GdkWindowAttr.window_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void window_type$set(MemorySegment seg, long index, int x) {
        _GdkWindowAttr.window_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle cursor$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cursor"));
    public static VarHandle cursor$VH() {
        return _GdkWindowAttr.cursor$VH;
    }
    public static MemoryAddress cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkWindowAttr.cursor$VH.get(seg);
    }
    public static void cursor$set( MemorySegment seg, MemoryAddress x) {
        _GdkWindowAttr.cursor$VH.set(seg, x);
    }
    public static MemoryAddress cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkWindowAttr.cursor$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cursor$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkWindowAttr.cursor$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wmclass_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wmclass_name"));
    public static VarHandle wmclass_name$VH() {
        return _GdkWindowAttr.wmclass_name$VH;
    }
    public static MemoryAddress wmclass_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkWindowAttr.wmclass_name$VH.get(seg);
    }
    public static void wmclass_name$set( MemorySegment seg, MemoryAddress x) {
        _GdkWindowAttr.wmclass_name$VH.set(seg, x);
    }
    public static MemoryAddress wmclass_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkWindowAttr.wmclass_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wmclass_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkWindowAttr.wmclass_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle wmclass_class$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("wmclass_class"));
    public static VarHandle wmclass_class$VH() {
        return _GdkWindowAttr.wmclass_class$VH;
    }
    public static MemoryAddress wmclass_class$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkWindowAttr.wmclass_class$VH.get(seg);
    }
    public static void wmclass_class$set( MemorySegment seg, MemoryAddress x) {
        _GdkWindowAttr.wmclass_class$VH.set(seg, x);
    }
    public static MemoryAddress wmclass_class$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkWindowAttr.wmclass_class$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void wmclass_class$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkWindowAttr.wmclass_class$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle override_redirect$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("override_redirect"));
    public static VarHandle override_redirect$VH() {
        return _GdkWindowAttr.override_redirect$VH;
    }
    public static int override_redirect$get(MemorySegment seg) {
        return (int)_GdkWindowAttr.override_redirect$VH.get(seg);
    }
    public static void override_redirect$set( MemorySegment seg, int x) {
        _GdkWindowAttr.override_redirect$VH.set(seg, x);
    }
    public static int override_redirect$get(MemorySegment seg, long index) {
        return (int)_GdkWindowAttr.override_redirect$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void override_redirect$set(MemorySegment seg, long index, int x) {
        _GdkWindowAttr.override_redirect$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle type_hint$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type_hint"));
    public static VarHandle type_hint$VH() {
        return _GdkWindowAttr.type_hint$VH;
    }
    public static int type_hint$get(MemorySegment seg) {
        return (int)_GdkWindowAttr.type_hint$VH.get(seg);
    }
    public static void type_hint$set( MemorySegment seg, int x) {
        _GdkWindowAttr.type_hint$VH.set(seg, x);
    }
    public static int type_hint$get(MemorySegment seg, long index) {
        return (int)_GdkWindowAttr.type_hint$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type_hint$set(MemorySegment seg, long index, int x) {
        _GdkWindowAttr.type_hint$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


