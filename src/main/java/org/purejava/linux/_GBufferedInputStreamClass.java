// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GBufferedInputStreamClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    MemoryLayout.structLayout(
                        Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                    ).withName("g_type_class"),
                    Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                    Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                    Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                    Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                    Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                    Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                    Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                    Constants$root.C_POINTER$LAYOUT.withName("notify"),
                    Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                    Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                    MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
                ).withName("parent_class"),
                Constants$root.C_POINTER$LAYOUT.withName("read_fn"),
                Constants$root.C_POINTER$LAYOUT.withName("skip"),
                Constants$root.C_POINTER$LAYOUT.withName("close_fn"),
                Constants$root.C_POINTER$LAYOUT.withName("read_async"),
                Constants$root.C_POINTER$LAYOUT.withName("read_finish"),
                Constants$root.C_POINTER$LAYOUT.withName("skip_async"),
                Constants$root.C_POINTER$LAYOUT.withName("skip_finish"),
                Constants$root.C_POINTER$LAYOUT.withName("close_async"),
                Constants$root.C_POINTER$LAYOUT.withName("close_finish"),
                Constants$root.C_POINTER$LAYOUT.withName("_g_reserved1"),
                Constants$root.C_POINTER$LAYOUT.withName("_g_reserved2"),
                Constants$root.C_POINTER$LAYOUT.withName("_g_reserved3"),
                Constants$root.C_POINTER$LAYOUT.withName("_g_reserved4"),
                Constants$root.C_POINTER$LAYOUT.withName("_g_reserved5")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("_g_reserved1"),
            Constants$root.C_POINTER$LAYOUT.withName("_g_reserved2"),
            Constants$root.C_POINTER$LAYOUT.withName("_g_reserved3")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("fill"),
        Constants$root.C_POINTER$LAYOUT.withName("fill_async"),
        Constants$root.C_POINTER$LAYOUT.withName("fill_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved5")
    ).withName("_GBufferedInputStreamClass");
    public static MemoryLayout $LAYOUT() {
        return _GBufferedInputStreamClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 272);
    }
    static final FunctionDescriptor fill$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle fill$MH = RuntimeHelper.downcallHandle(
        _GBufferedInputStreamClass.fill$FUNC
    );
    public interface fill {

        long apply(java.lang.foreign.MemoryAddress _x0, long _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(fill fi, MemorySession session) {
            return RuntimeHelper.upcallStub(fill.class, fi, _GBufferedInputStreamClass.fill$FUNC, session);
        }
        static fill ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (long)_GBufferedInputStreamClass.fill$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle fill$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fill"));
    public static VarHandle fill$VH() {
        return _GBufferedInputStreamClass.fill$VH;
    }
    public static MemoryAddress fill$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass.fill$VH.get(seg);
    }
    public static void fill$set( MemorySegment seg, MemoryAddress x) {
        _GBufferedInputStreamClass.fill$VH.set(seg, x);
    }
    public static MemoryAddress fill$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass.fill$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fill$set(MemorySegment seg, long index, MemoryAddress x) {
        _GBufferedInputStreamClass.fill$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static fill fill (MemorySegment segment, MemorySession session) {
        return fill.ofAddress(fill$get(segment), session);
    }
    static final FunctionDescriptor fill_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle fill_async$MH = RuntimeHelper.downcallHandle(
        _GBufferedInputStreamClass.fill_async$FUNC
    );
    public interface fill_async {

        void apply(java.lang.foreign.MemoryAddress _x0, long _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(fill_async fi, MemorySession session) {
            return RuntimeHelper.upcallStub(fill_async.class, fi, _GBufferedInputStreamClass.fill_async$FUNC, session);
        }
        static fill_async ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    _GBufferedInputStreamClass.fill_async$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle fill_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fill_async"));
    public static VarHandle fill_async$VH() {
        return _GBufferedInputStreamClass.fill_async$VH;
    }
    public static MemoryAddress fill_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass.fill_async$VH.get(seg);
    }
    public static void fill_async$set( MemorySegment seg, MemoryAddress x) {
        _GBufferedInputStreamClass.fill_async$VH.set(seg, x);
    }
    public static MemoryAddress fill_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass.fill_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fill_async$set(MemorySegment seg, long index, MemoryAddress x) {
        _GBufferedInputStreamClass.fill_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static fill_async fill_async (MemorySegment segment, MemorySession session) {
        return fill_async.ofAddress(fill_async$get(segment), session);
    }
    static final FunctionDescriptor fill_finish$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle fill_finish$MH = RuntimeHelper.downcallHandle(
        _GBufferedInputStreamClass.fill_finish$FUNC
    );
    public interface fill_finish {

        long apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(fill_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(fill_finish.class, fi, _GBufferedInputStreamClass.fill_finish$FUNC, session);
        }
        static fill_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (long)_GBufferedInputStreamClass.fill_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle fill_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("fill_finish"));
    public static VarHandle fill_finish$VH() {
        return _GBufferedInputStreamClass.fill_finish$VH;
    }
    public static MemoryAddress fill_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass.fill_finish$VH.get(seg);
    }
    public static void fill_finish$set( MemorySegment seg, MemoryAddress x) {
        _GBufferedInputStreamClass.fill_finish$VH.set(seg, x);
    }
    public static MemoryAddress fill_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass.fill_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void fill_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GBufferedInputStreamClass.fill_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static fill_finish fill_finish (MemorySegment segment, MemorySession session) {
        return fill_finish.ofAddress(fill_finish$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved1$MH = RuntimeHelper.downcallHandle(
        _GBufferedInputStreamClass._g_reserved1$FUNC
    );
    public interface _g_reserved1 {

        void apply();
        static MemorySegment allocate(_g_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved1.class, fi, _GBufferedInputStreamClass._g_reserved1$FUNC, session);
        }
        static _g_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GBufferedInputStreamClass._g_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved1"));
    public static VarHandle _g_reserved1$VH() {
        return _GBufferedInputStreamClass._g_reserved1$VH;
    }
    public static MemoryAddress _g_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass._g_reserved1$VH.get(seg);
    }
    public static void _g_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GBufferedInputStreamClass._g_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass._g_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GBufferedInputStreamClass._g_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved1 _g_reserved1 (MemorySegment segment, MemorySession session) {
        return _g_reserved1.ofAddress(_g_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved2$MH = RuntimeHelper.downcallHandle(
        _GBufferedInputStreamClass._g_reserved2$FUNC
    );
    public interface _g_reserved2 {

        void apply();
        static MemorySegment allocate(_g_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved2.class, fi, _GBufferedInputStreamClass._g_reserved2$FUNC, session);
        }
        static _g_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GBufferedInputStreamClass._g_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved2"));
    public static VarHandle _g_reserved2$VH() {
        return _GBufferedInputStreamClass._g_reserved2$VH;
    }
    public static MemoryAddress _g_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass._g_reserved2$VH.get(seg);
    }
    public static void _g_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GBufferedInputStreamClass._g_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass._g_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GBufferedInputStreamClass._g_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved2 _g_reserved2 (MemorySegment segment, MemorySession session) {
        return _g_reserved2.ofAddress(_g_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved3$MH = RuntimeHelper.downcallHandle(
        _GBufferedInputStreamClass._g_reserved3$FUNC
    );
    public interface _g_reserved3 {

        void apply();
        static MemorySegment allocate(_g_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved3.class, fi, _GBufferedInputStreamClass._g_reserved3$FUNC, session);
        }
        static _g_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GBufferedInputStreamClass._g_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved3"));
    public static VarHandle _g_reserved3$VH() {
        return _GBufferedInputStreamClass._g_reserved3$VH;
    }
    public static MemoryAddress _g_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass._g_reserved3$VH.get(seg);
    }
    public static void _g_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GBufferedInputStreamClass._g_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass._g_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GBufferedInputStreamClass._g_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved3 _g_reserved3 (MemorySegment segment, MemorySession session) {
        return _g_reserved3.ofAddress(_g_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved4$MH = RuntimeHelper.downcallHandle(
        _GBufferedInputStreamClass._g_reserved4$FUNC
    );
    public interface _g_reserved4 {

        void apply();
        static MemorySegment allocate(_g_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved4.class, fi, _GBufferedInputStreamClass._g_reserved4$FUNC, session);
        }
        static _g_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GBufferedInputStreamClass._g_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved4"));
    public static VarHandle _g_reserved4$VH() {
        return _GBufferedInputStreamClass._g_reserved4$VH;
    }
    public static MemoryAddress _g_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass._g_reserved4$VH.get(seg);
    }
    public static void _g_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GBufferedInputStreamClass._g_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass._g_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GBufferedInputStreamClass._g_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved4 _g_reserved4 (MemorySegment segment, MemorySession session) {
        return _g_reserved4.ofAddress(_g_reserved4$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved5$MH = RuntimeHelper.downcallHandle(
        _GBufferedInputStreamClass._g_reserved5$FUNC
    );
    public interface _g_reserved5 {

        void apply();
        static MemorySegment allocate(_g_reserved5 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved5.class, fi, _GBufferedInputStreamClass._g_reserved5$FUNC, session);
        }
        static _g_reserved5 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GBufferedInputStreamClass._g_reserved5$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved5"));
    public static VarHandle _g_reserved5$VH() {
        return _GBufferedInputStreamClass._g_reserved5$VH;
    }
    public static MemoryAddress _g_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass._g_reserved5$VH.get(seg);
    }
    public static void _g_reserved5$set( MemorySegment seg, MemoryAddress x) {
        _GBufferedInputStreamClass._g_reserved5$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GBufferedInputStreamClass._g_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved5$set(MemorySegment seg, long index, MemoryAddress x) {
        _GBufferedInputStreamClass._g_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved5 _g_reserved5 (MemorySegment segment, MemorySession session) {
        return _g_reserved5.ofAddress(_g_reserved5$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


