// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkActivatableIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("update"),
        Constants$root.C_POINTER$LAYOUT.withName("sync_action_properties")
    ).withName("_GtkActivatableIface");
    public static MemoryLayout $LAYOUT() {
        return _GtkActivatableIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor update$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle update$MH = RuntimeHelper.downcallHandle(
        _GtkActivatableIface.update$FUNC
    );
    public interface update {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(update fi, MemorySession session) {
            return RuntimeHelper.upcallStub(update.class, fi, _GtkActivatableIface.update$FUNC, session);
        }
        static update ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkActivatableIface.update$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle update$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("update"));
    public static VarHandle update$VH() {
        return _GtkActivatableIface.update$VH;
    }
    public static MemoryAddress update$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActivatableIface.update$VH.get(seg);
    }
    public static void update$set( MemorySegment seg, MemoryAddress x) {
        _GtkActivatableIface.update$VH.set(seg, x);
    }
    public static MemoryAddress update$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActivatableIface.update$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void update$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActivatableIface.update$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static update update (MemorySegment segment, MemorySession session) {
        return update.ofAddress(update$get(segment), session);
    }
    static final FunctionDescriptor sync_action_properties$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle sync_action_properties$MH = RuntimeHelper.downcallHandle(
        _GtkActivatableIface.sync_action_properties$FUNC
    );
    public interface sync_action_properties {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(sync_action_properties fi, MemorySession session) {
            return RuntimeHelper.upcallStub(sync_action_properties.class, fi, _GtkActivatableIface.sync_action_properties$FUNC, session);
        }
        static sync_action_properties ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkActivatableIface.sync_action_properties$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle sync_action_properties$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("sync_action_properties"));
    public static VarHandle sync_action_properties$VH() {
        return _GtkActivatableIface.sync_action_properties$VH;
    }
    public static MemoryAddress sync_action_properties$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkActivatableIface.sync_action_properties$VH.get(seg);
    }
    public static void sync_action_properties$set( MemorySegment seg, MemoryAddress x) {
        _GtkActivatableIface.sync_action_properties$VH.set(seg, x);
    }
    public static MemoryAddress sync_action_properties$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkActivatableIface.sync_action_properties$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void sync_action_properties$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkActivatableIface.sync_action_properties$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static sync_action_properties sync_action_properties (MemorySegment segment, MemorySession session) {
        return sync_action_properties.ofAddress(sync_action_properties$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


