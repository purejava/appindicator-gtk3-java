// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
 class app_indicator_h_5 extends app_indicator_h_4 {

    public static MethodHandle g_rand_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$267.g_rand_copy$MH,"g_rand_copy");
    }
    public static MemoryAddress g_rand_copy ( Addressable rand_) {
        var mh$ = g_rand_copy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_set_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$267.g_rand_set_seed$MH,"g_rand_set_seed");
    }
    public static void g_rand_set_seed ( Addressable rand_,  int seed) {
        var mh$ = g_rand_set_seed$MH();
        try {
            mh$.invokeExact(rand_, seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_set_seed_array$MH() {
        return RuntimeHelper.requireNonNull(constants$267.g_rand_set_seed_array$MH,"g_rand_set_seed_array");
    }
    public static void g_rand_set_seed_array ( Addressable rand_,  Addressable seed,  int seed_length) {
        var mh$ = g_rand_set_seed_array$MH();
        try {
            mh$.invokeExact(rand_, seed, seed_length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_int$MH() {
        return RuntimeHelper.requireNonNull(constants$267.g_rand_int$MH,"g_rand_int");
    }
    public static int g_rand_int ( Addressable rand_) {
        var mh$ = g_rand_int$MH();
        try {
            return (int)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_int_range$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_rand_int_range$MH,"g_rand_int_range");
    }
    public static int g_rand_int_range ( Addressable rand_,  int begin,  int end) {
        var mh$ = g_rand_int_range$MH();
        try {
            return (int)mh$.invokeExact(rand_, begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_double$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_rand_double$MH,"g_rand_double");
    }
    public static double g_rand_double ( Addressable rand_) {
        var mh$ = g_rand_double$MH();
        try {
            return (double)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_double_range$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_rand_double_range$MH,"g_rand_double_range");
    }
    public static double g_rand_double_range ( Addressable rand_,  double begin,  double end) {
        var mh$ = g_rand_double_range$MH();
        try {
            return (double)mh$.invokeExact(rand_, begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_set_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_random_set_seed$MH,"g_random_set_seed");
    }
    public static void g_random_set_seed ( int seed) {
        var mh$ = g_random_set_seed$MH();
        try {
            mh$.invokeExact(seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_int$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_random_int$MH,"g_random_int");
    }
    public static int g_random_int () {
        var mh$ = g_random_int$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_int_range$MH() {
        return RuntimeHelper.requireNonNull(constants$268.g_random_int_range$MH,"g_random_int_range");
    }
    public static int g_random_int_range ( int begin,  int end) {
        var mh$ = g_random_int_range$MH();
        try {
            return (int)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_double$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_random_double$MH,"g_random_double");
    }
    public static double g_random_double () {
        var mh$ = g_random_double$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_double_range$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_random_double_range$MH,"g_random_double_range");
    }
    public static double g_random_double_range ( double begin,  double end) {
        var mh$ = g_random_double_range$MH();
        try {
            return (double)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_rc_box_alloc$MH,"g_rc_box_alloc");
    }
    public static MemoryAddress g_rc_box_alloc ( long block_size) {
        var mh$ = g_rc_box_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_rc_box_alloc0$MH,"g_rc_box_alloc0");
    }
    public static MemoryAddress g_rc_box_alloc0 ( long block_size) {
        var mh$ = g_rc_box_alloc0$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_rc_box_dup$MH,"g_rc_box_dup");
    }
    public static MemoryAddress g_rc_box_dup ( long block_size,  Addressable mem_block) {
        var mh$ = g_rc_box_dup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$269.g_rc_box_acquire$MH,"g_rc_box_acquire");
    }
    public static MemoryAddress g_rc_box_acquire ( Addressable mem_block) {
        var mh$ = g_rc_box_acquire$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_release$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_rc_box_release$MH,"g_rc_box_release");
    }
    public static void g_rc_box_release ( Addressable mem_block) {
        var mh$ = g_rc_box_release$MH();
        try {
            mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_release_full$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_rc_box_release_full$MH,"g_rc_box_release_full");
    }
    public static void g_rc_box_release_full ( Addressable mem_block,  Addressable clear_func) {
        var mh$ = g_rc_box_release_full$MH();
        try {
            mh$.invokeExact(mem_block, clear_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_rc_box_get_size$MH,"g_rc_box_get_size");
    }
    public static long g_rc_box_get_size ( Addressable mem_block) {
        var mh$ = g_rc_box_get_size$MH();
        try {
            return (long)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_atomic_rc_box_alloc$MH,"g_atomic_rc_box_alloc");
    }
    public static MemoryAddress g_atomic_rc_box_alloc ( long block_size) {
        var mh$ = g_atomic_rc_box_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_atomic_rc_box_alloc0$MH,"g_atomic_rc_box_alloc0");
    }
    public static MemoryAddress g_atomic_rc_box_alloc0 ( long block_size) {
        var mh$ = g_atomic_rc_box_alloc0$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$270.g_atomic_rc_box_dup$MH,"g_atomic_rc_box_dup");
    }
    public static MemoryAddress g_atomic_rc_box_dup ( long block_size,  Addressable mem_block) {
        var mh$ = g_atomic_rc_box_dup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_atomic_rc_box_acquire$MH,"g_atomic_rc_box_acquire");
    }
    public static MemoryAddress g_atomic_rc_box_acquire ( Addressable mem_block) {
        var mh$ = g_atomic_rc_box_acquire$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_release$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_atomic_rc_box_release$MH,"g_atomic_rc_box_release");
    }
    public static void g_atomic_rc_box_release ( Addressable mem_block) {
        var mh$ = g_atomic_rc_box_release$MH();
        try {
            mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_release_full$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_atomic_rc_box_release_full$MH,"g_atomic_rc_box_release_full");
    }
    public static void g_atomic_rc_box_release_full ( Addressable mem_block,  Addressable clear_func) {
        var mh$ = g_atomic_rc_box_release_full$MH();
        try {
            mh$.invokeExact(mem_block, clear_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_atomic_rc_box_get_size$MH,"g_atomic_rc_box_get_size");
    }
    public static long g_atomic_rc_box_get_size ( Addressable mem_block) {
        var mh$ = g_atomic_rc_box_get_size$MH();
        try {
            return (long)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_init$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_ref_count_init$MH,"g_ref_count_init");
    }
    public static void g_ref_count_init ( Addressable rc) {
        var mh$ = g_ref_count_init$MH();
        try {
            mh$.invokeExact(rc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_inc$MH() {
        return RuntimeHelper.requireNonNull(constants$271.g_ref_count_inc$MH,"g_ref_count_inc");
    }
    public static void g_ref_count_inc ( Addressable rc) {
        var mh$ = g_ref_count_inc$MH();
        try {
            mh$.invokeExact(rc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_dec$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_ref_count_dec$MH,"g_ref_count_dec");
    }
    public static int g_ref_count_dec ( Addressable rc) {
        var mh$ = g_ref_count_dec$MH();
        try {
            return (int)mh$.invokeExact(rc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_ref_count_compare$MH,"g_ref_count_compare");
    }
    public static int g_ref_count_compare ( Addressable rc,  int val) {
        var mh$ = g_ref_count_compare$MH();
        try {
            return (int)mh$.invokeExact(rc, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_init$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_atomic_ref_count_init$MH,"g_atomic_ref_count_init");
    }
    public static void g_atomic_ref_count_init ( Addressable arc) {
        var mh$ = g_atomic_ref_count_init$MH();
        try {
            mh$.invokeExact(arc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_inc$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_atomic_ref_count_inc$MH,"g_atomic_ref_count_inc");
    }
    public static void g_atomic_ref_count_inc ( Addressable arc) {
        var mh$ = g_atomic_ref_count_inc$MH();
        try {
            mh$.invokeExact(arc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_dec$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_atomic_ref_count_dec$MH,"g_atomic_ref_count_dec");
    }
    public static int g_atomic_ref_count_dec ( Addressable arc) {
        var mh$ = g_atomic_ref_count_dec$MH();
        try {
            return (int)mh$.invokeExact(arc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$272.g_atomic_ref_count_compare$MH,"g_atomic_ref_count_compare");
    }
    public static int g_atomic_ref_count_compare ( Addressable arc,  int val) {
        var mh$ = g_atomic_ref_count_compare$MH();
        try {
            return (int)mh$.invokeExact(arc, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_new$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_ref_string_new$MH,"g_ref_string_new");
    }
    public static MemoryAddress g_ref_string_new ( Addressable str) {
        var mh$ = g_ref_string_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_new_len$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_ref_string_new_len$MH,"g_ref_string_new_len");
    }
    public static MemoryAddress g_ref_string_new_len ( Addressable str,  long len) {
        var mh$ = g_ref_string_new_len$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_new_intern$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_ref_string_new_intern$MH,"g_ref_string_new_intern");
    }
    public static MemoryAddress g_ref_string_new_intern ( Addressable str) {
        var mh$ = g_ref_string_new_intern$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_ref_string_acquire$MH,"g_ref_string_acquire");
    }
    public static MemoryAddress g_ref_string_acquire ( Addressable str) {
        var mh$ = g_ref_string_acquire$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_release$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_ref_string_release$MH,"g_ref_string_release");
    }
    public static void g_ref_string_release ( Addressable str) {
        var mh$ = g_ref_string_release$MH();
        try {
            mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_length$MH() {
        return RuntimeHelper.requireNonNull(constants$273.g_ref_string_length$MH,"g_ref_string_length");
    }
    public static long g_ref_string_length ( Addressable str) {
        var mh$ = g_ref_string_length$MH();
        try {
            return (long)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfByte GRefString = Constants$root.C_CHAR$LAYOUT;
    public static int G_REGEX_ERROR_COMPILE() {
        return (int)0L;
    }
    public static int G_REGEX_ERROR_OPTIMIZE() {
        return (int)1L;
    }
    public static int G_REGEX_ERROR_REPLACE() {
        return (int)2L;
    }
    public static int G_REGEX_ERROR_MATCH() {
        return (int)3L;
    }
    public static int G_REGEX_ERROR_INTERNAL() {
        return (int)4L;
    }
    public static int G_REGEX_ERROR_STRAY_BACKSLASH() {
        return (int)101L;
    }
    public static int G_REGEX_ERROR_MISSING_CONTROL_CHAR() {
        return (int)102L;
    }
    public static int G_REGEX_ERROR_UNRECOGNIZED_ESCAPE() {
        return (int)103L;
    }
    public static int G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER() {
        return (int)104L;
    }
    public static int G_REGEX_ERROR_QUANTIFIER_TOO_BIG() {
        return (int)105L;
    }
    public static int G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS() {
        return (int)106L;
    }
    public static int G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS() {
        return (int)107L;
    }
    public static int G_REGEX_ERROR_RANGE_OUT_OF_ORDER() {
        return (int)108L;
    }
    public static int G_REGEX_ERROR_NOTHING_TO_REPEAT() {
        return (int)109L;
    }
    public static int G_REGEX_ERROR_UNRECOGNIZED_CHARACTER() {
        return (int)112L;
    }
    public static int G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS() {
        return (int)113L;
    }
    public static int G_REGEX_ERROR_UNMATCHED_PARENTHESIS() {
        return (int)114L;
    }
    public static int G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE() {
        return (int)115L;
    }
    public static int G_REGEX_ERROR_UNTERMINATED_COMMENT() {
        return (int)118L;
    }
    public static int G_REGEX_ERROR_EXPRESSION_TOO_LARGE() {
        return (int)120L;
    }
    public static int G_REGEX_ERROR_MEMORY_ERROR() {
        return (int)121L;
    }
    public static int G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND() {
        return (int)125L;
    }
    public static int G_REGEX_ERROR_MALFORMED_CONDITION() {
        return (int)126L;
    }
    public static int G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES() {
        return (int)127L;
    }
    public static int G_REGEX_ERROR_ASSERTION_EXPECTED() {
        return (int)128L;
    }
    public static int G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME() {
        return (int)130L;
    }
    public static int G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED() {
        return (int)131L;
    }
    public static int G_REGEX_ERROR_HEX_CODE_TOO_LARGE() {
        return (int)134L;
    }
    public static int G_REGEX_ERROR_INVALID_CONDITION() {
        return (int)135L;
    }
    public static int G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND() {
        return (int)136L;
    }
    public static int G_REGEX_ERROR_INFINITE_LOOP() {
        return (int)140L;
    }
    public static int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR() {
        return (int)142L;
    }
    public static int G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME() {
        return (int)143L;
    }
    public static int G_REGEX_ERROR_MALFORMED_PROPERTY() {
        return (int)146L;
    }
    public static int G_REGEX_ERROR_UNKNOWN_PROPERTY() {
        return (int)147L;
    }
    public static int G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG() {
        return (int)148L;
    }
    public static int G_REGEX_ERROR_TOO_MANY_SUBPATTERNS() {
        return (int)149L;
    }
    public static int G_REGEX_ERROR_INVALID_OCTAL_VALUE() {
        return (int)151L;
    }
    public static int G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE() {
        return (int)154L;
    }
    public static int G_REGEX_ERROR_DEFINE_REPETION() {
        return (int)155L;
    }
    public static int G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS() {
        return (int)156L;
    }
    public static int G_REGEX_ERROR_MISSING_BACK_REFERENCE() {
        return (int)157L;
    }
    public static int G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE() {
        return (int)158L;
    }
    public static int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN() {
        return (int)159L;
    }
    public static int G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB() {
        return (int)160L;
    }
    public static int G_REGEX_ERROR_NUMBER_TOO_BIG() {
        return (int)161L;
    }
    public static int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME() {
        return (int)162L;
    }
    public static int G_REGEX_ERROR_MISSING_DIGIT() {
        return (int)163L;
    }
    public static int G_REGEX_ERROR_INVALID_DATA_CHARACTER() {
        return (int)164L;
    }
    public static int G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME() {
        return (int)165L;
    }
    public static int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED() {
        return (int)166L;
    }
    public static int G_REGEX_ERROR_INVALID_CONTROL_CHAR() {
        return (int)168L;
    }
    public static int G_REGEX_ERROR_MISSING_NAME() {
        return (int)169L;
    }
    public static int G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS() {
        return (int)171L;
    }
    public static int G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES() {
        return (int)172L;
    }
    public static int G_REGEX_ERROR_NAME_TOO_LONG() {
        return (int)175L;
    }
    public static int G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE() {
        return (int)176L;
    }
    public static MethodHandle g_regex_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$274.g_regex_error_quark$MH,"g_regex_error_quark");
    }
    public static int g_regex_error_quark () {
        var mh$ = g_regex_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_REGEX_CASELESS() {
        return (int)1L;
    }
    public static int G_REGEX_MULTILINE() {
        return (int)2L;
    }
    public static int G_REGEX_DOTALL() {
        return (int)4L;
    }
    public static int G_REGEX_EXTENDED() {
        return (int)8L;
    }
    public static int G_REGEX_ANCHORED() {
        return (int)16L;
    }
    public static int G_REGEX_DOLLAR_ENDONLY() {
        return (int)32L;
    }
    public static int G_REGEX_UNGREEDY() {
        return (int)512L;
    }
    public static int G_REGEX_RAW() {
        return (int)2048L;
    }
    public static int G_REGEX_NO_AUTO_CAPTURE() {
        return (int)4096L;
    }
    public static int G_REGEX_OPTIMIZE() {
        return (int)8192L;
    }
    public static int G_REGEX_FIRSTLINE() {
        return (int)262144L;
    }
    public static int G_REGEX_DUPNAMES() {
        return (int)524288L;
    }
    public static int G_REGEX_NEWLINE_CR() {
        return (int)1048576L;
    }
    public static int G_REGEX_NEWLINE_LF() {
        return (int)2097152L;
    }
    public static int G_REGEX_NEWLINE_CRLF() {
        return (int)3145728L;
    }
    public static int G_REGEX_NEWLINE_ANYCRLF() {
        return (int)5242880L;
    }
    public static int G_REGEX_BSR_ANYCRLF() {
        return (int)8388608L;
    }
    public static int G_REGEX_JAVASCRIPT_COMPAT() {
        return (int)33554432L;
    }
    public static int G_REGEX_MATCH_ANCHORED() {
        return (int)16L;
    }
    public static int G_REGEX_MATCH_NOTBOL() {
        return (int)128L;
    }
    public static int G_REGEX_MATCH_NOTEOL() {
        return (int)256L;
    }
    public static int G_REGEX_MATCH_NOTEMPTY() {
        return (int)1024L;
    }
    public static int G_REGEX_MATCH_PARTIAL() {
        return (int)32768L;
    }
    public static int G_REGEX_MATCH_NEWLINE_CR() {
        return (int)1048576L;
    }
    public static int G_REGEX_MATCH_NEWLINE_LF() {
        return (int)2097152L;
    }
    public static int G_REGEX_MATCH_NEWLINE_CRLF() {
        return (int)3145728L;
    }
    public static int G_REGEX_MATCH_NEWLINE_ANY() {
        return (int)4194304L;
    }
    public static int G_REGEX_MATCH_NEWLINE_ANYCRLF() {
        return (int)5242880L;
    }
    public static int G_REGEX_MATCH_BSR_ANYCRLF() {
        return (int)8388608L;
    }
    public static int G_REGEX_MATCH_BSR_ANY() {
        return (int)16777216L;
    }
    public static int G_REGEX_MATCH_PARTIAL_SOFT() {
        return (int)32768L;
    }
    public static int G_REGEX_MATCH_PARTIAL_HARD() {
        return (int)134217728L;
    }
    public static int G_REGEX_MATCH_NOTEMPTY_ATSTART() {
        return (int)268435456L;
    }
    public static MethodHandle g_regex_new$MH() {
        return RuntimeHelper.requireNonNull(constants$274.g_regex_new$MH,"g_regex_new");
    }
    public static MemoryAddress g_regex_new ( Addressable pattern,  int compile_options,  int match_options,  Addressable error) {
        var mh$ = g_regex_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pattern, compile_options, match_options, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$274.g_regex_ref$MH,"g_regex_ref");
    }
    public static MemoryAddress g_regex_ref ( Addressable regex) {
        var mh$ = g_regex_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$274.g_regex_unref$MH,"g_regex_unref");
    }
    public static void g_regex_unref ( Addressable regex) {
        var mh$ = g_regex_unref$MH();
        try {
            mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_pattern$MH() {
        return RuntimeHelper.requireNonNull(constants$275.g_regex_get_pattern$MH,"g_regex_get_pattern");
    }
    public static MemoryAddress g_regex_get_pattern ( Addressable regex) {
        var mh$ = g_regex_get_pattern$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_max_backref$MH() {
        return RuntimeHelper.requireNonNull(constants$275.g_regex_get_max_backref$MH,"g_regex_get_max_backref");
    }
    public static int g_regex_get_max_backref ( Addressable regex) {
        var mh$ = g_regex_get_max_backref$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_capture_count$MH() {
        return RuntimeHelper.requireNonNull(constants$275.g_regex_get_capture_count$MH,"g_regex_get_capture_count");
    }
    public static int g_regex_get_capture_count ( Addressable regex) {
        var mh$ = g_regex_get_capture_count$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_has_cr_or_lf$MH() {
        return RuntimeHelper.requireNonNull(constants$275.g_regex_get_has_cr_or_lf$MH,"g_regex_get_has_cr_or_lf");
    }
    public static int g_regex_get_has_cr_or_lf ( Addressable regex) {
        var mh$ = g_regex_get_has_cr_or_lf$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_max_lookbehind$MH() {
        return RuntimeHelper.requireNonNull(constants$275.g_regex_get_max_lookbehind$MH,"g_regex_get_max_lookbehind");
    }
    public static int g_regex_get_max_lookbehind ( Addressable regex) {
        var mh$ = g_regex_get_max_lookbehind$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_string_number$MH() {
        return RuntimeHelper.requireNonNull(constants$275.g_regex_get_string_number$MH,"g_regex_get_string_number");
    }
    public static int g_regex_get_string_number ( Addressable regex,  Addressable name) {
        var mh$ = g_regex_get_string_number$MH();
        try {
            return (int)mh$.invokeExact(regex, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_escape_string$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_regex_escape_string$MH,"g_regex_escape_string");
    }
    public static MemoryAddress g_regex_escape_string ( Addressable string,  int length) {
        var mh$ = g_regex_escape_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_escape_nul$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_regex_escape_nul$MH,"g_regex_escape_nul");
    }
    public static MemoryAddress g_regex_escape_nul ( Addressable string,  int length) {
        var mh$ = g_regex_escape_nul$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_compile_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_regex_get_compile_flags$MH,"g_regex_get_compile_flags");
    }
    public static int g_regex_get_compile_flags ( Addressable regex) {
        var mh$ = g_regex_get_compile_flags$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_match_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_regex_get_match_flags$MH,"g_regex_get_match_flags");
    }
    public static int g_regex_get_match_flags ( Addressable regex) {
        var mh$ = g_regex_get_match_flags$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_simple$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_regex_match_simple$MH,"g_regex_match_simple");
    }
    public static int g_regex_match_simple ( Addressable pattern,  Addressable string,  int compile_options,  int match_options) {
        var mh$ = g_regex_match_simple$MH();
        try {
            return (int)mh$.invokeExact(pattern, string, compile_options, match_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match$MH() {
        return RuntimeHelper.requireNonNull(constants$276.g_regex_match$MH,"g_regex_match");
    }
    public static int g_regex_match ( Addressable regex,  Addressable string,  int match_options,  Addressable match_info) {
        var mh$ = g_regex_match$MH();
        try {
            return (int)mh$.invokeExact(regex, string, match_options, match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_full$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_regex_match_full$MH,"g_regex_match_full");
    }
    public static int g_regex_match_full ( Addressable regex,  Addressable string,  long string_len,  int start_position,  int match_options,  Addressable match_info,  Addressable error) {
        var mh$ = g_regex_match_full$MH();
        try {
            return (int)mh$.invokeExact(regex, string, string_len, start_position, match_options, match_info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_all$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_regex_match_all$MH,"g_regex_match_all");
    }
    public static int g_regex_match_all ( Addressable regex,  Addressable string,  int match_options,  Addressable match_info) {
        var mh$ = g_regex_match_all$MH();
        try {
            return (int)mh$.invokeExact(regex, string, match_options, match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_all_full$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_regex_match_all_full$MH,"g_regex_match_all_full");
    }
    public static int g_regex_match_all_full ( Addressable regex,  Addressable string,  long string_len,  int start_position,  int match_options,  Addressable match_info,  Addressable error) {
        var mh$ = g_regex_match_all_full$MH();
        try {
            return (int)mh$.invokeExact(regex, string, string_len, start_position, match_options, match_info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_split_simple$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_regex_split_simple$MH,"g_regex_split_simple");
    }
    public static MemoryAddress g_regex_split_simple ( Addressable pattern,  Addressable string,  int compile_options,  int match_options) {
        var mh$ = g_regex_split_simple$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(pattern, string, compile_options, match_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_split$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_regex_split$MH,"g_regex_split");
    }
    public static MemoryAddress g_regex_split ( Addressable regex,  Addressable string,  int match_options) {
        var mh$ = g_regex_split$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(regex, string, match_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_split_full$MH() {
        return RuntimeHelper.requireNonNull(constants$277.g_regex_split_full$MH,"g_regex_split_full");
    }
    public static MemoryAddress g_regex_split_full ( Addressable regex,  Addressable string,  long string_len,  int start_position,  int match_options,  int max_tokens,  Addressable error) {
        var mh$ = g_regex_split_full$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(regex, string, string_len, start_position, match_options, max_tokens, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_regex_replace$MH,"g_regex_replace");
    }
    public static MemoryAddress g_regex_replace ( Addressable regex,  Addressable string,  long string_len,  int start_position,  Addressable replacement,  int match_options,  Addressable error) {
        var mh$ = g_regex_replace$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(regex, string, string_len, start_position, replacement, match_options, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_replace_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_regex_replace_literal$MH,"g_regex_replace_literal");
    }
    public static MemoryAddress g_regex_replace_literal ( Addressable regex,  Addressable string,  long string_len,  int start_position,  Addressable replacement,  int match_options,  Addressable error) {
        var mh$ = g_regex_replace_literal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(regex, string, string_len, start_position, replacement, match_options, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_replace_eval$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_regex_replace_eval$MH,"g_regex_replace_eval");
    }
    public static MemoryAddress g_regex_replace_eval ( Addressable regex,  Addressable string,  long string_len,  int start_position,  int match_options,  Addressable eval,  Addressable user_data,  Addressable error) {
        var mh$ = g_regex_replace_eval$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(regex, string, string_len, start_position, match_options, eval, user_data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_check_replacement$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_regex_check_replacement$MH,"g_regex_check_replacement");
    }
    public static int g_regex_check_replacement ( Addressable replacement,  Addressable has_references,  Addressable error) {
        var mh$ = g_regex_check_replacement$MH();
        try {
            return (int)mh$.invokeExact(replacement, has_references, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_get_regex$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_match_info_get_regex$MH,"g_match_info_get_regex");
    }
    public static MemoryAddress g_match_info_get_regex ( Addressable match_info) {
        var mh$ = g_match_info_get_regex$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$278.g_match_info_get_string$MH,"g_match_info_get_string");
    }
    public static MemoryAddress g_match_info_get_string ( Addressable match_info) {
        var mh$ = g_match_info_get_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_match_info_ref$MH,"g_match_info_ref");
    }
    public static MemoryAddress g_match_info_ref ( Addressable match_info) {
        var mh$ = g_match_info_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_match_info_unref$MH,"g_match_info_unref");
    }
    public static void g_match_info_unref ( Addressable match_info) {
        var mh$ = g_match_info_unref$MH();
        try {
            mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_free$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_match_info_free$MH,"g_match_info_free");
    }
    public static void g_match_info_free ( Addressable match_info) {
        var mh$ = g_match_info_free$MH();
        try {
            mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_next$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_match_info_next$MH,"g_match_info_next");
    }
    public static int g_match_info_next ( Addressable match_info,  Addressable error) {
        var mh$ = g_match_info_next$MH();
        try {
            return (int)mh$.invokeExact(match_info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_matches$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_match_info_matches$MH,"g_match_info_matches");
    }
    public static int g_match_info_matches ( Addressable match_info) {
        var mh$ = g_match_info_matches$MH();
        try {
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_get_match_count$MH() {
        return RuntimeHelper.requireNonNull(constants$279.g_match_info_get_match_count$MH,"g_match_info_get_match_count");
    }
    public static int g_match_info_get_match_count ( Addressable match_info) {
        var mh$ = g_match_info_get_match_count$MH();
        try {
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_is_partial_match$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_match_info_is_partial_match$MH,"g_match_info_is_partial_match");
    }
    public static int g_match_info_is_partial_match ( Addressable match_info) {
        var mh$ = g_match_info_is_partial_match$MH();
        try {
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_expand_references$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_match_info_expand_references$MH,"g_match_info_expand_references");
    }
    public static MemoryAddress g_match_info_expand_references ( Addressable match_info,  Addressable string_to_expand,  Addressable error) {
        var mh$ = g_match_info_expand_references$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(match_info, string_to_expand, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_match_info_fetch$MH,"g_match_info_fetch");
    }
    public static MemoryAddress g_match_info_fetch ( Addressable match_info,  int match_num) {
        var mh$ = g_match_info_fetch$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(match_info, match_num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_match_info_fetch_pos$MH,"g_match_info_fetch_pos");
    }
    public static int g_match_info_fetch_pos ( Addressable match_info,  int match_num,  Addressable start_pos,  Addressable end_pos) {
        var mh$ = g_match_info_fetch_pos$MH();
        try {
            return (int)mh$.invokeExact(match_info, match_num, start_pos, end_pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_named$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_match_info_fetch_named$MH,"g_match_info_fetch_named");
    }
    public static MemoryAddress g_match_info_fetch_named ( Addressable match_info,  Addressable name) {
        var mh$ = g_match_info_fetch_named$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(match_info, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_named_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$280.g_match_info_fetch_named_pos$MH,"g_match_info_fetch_named_pos");
    }
    public static int g_match_info_fetch_named_pos ( Addressable match_info,  Addressable name,  Addressable start_pos,  Addressable end_pos) {
        var mh$ = g_match_info_fetch_named_pos$MH();
        try {
            return (int)mh$.invokeExact(match_info, name, start_pos, end_pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_all$MH() {
        return RuntimeHelper.requireNonNull(constants$281.g_match_info_fetch_all$MH,"g_match_info_fetch_all");
    }
    public static MemoryAddress g_match_info_fetch_all ( Addressable match_info) {
        var mh$ = g_match_info_fetch_all$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_ERR_UNKNOWN() {
        return (int)0L;
    }
    public static int G_ERR_UNEXP_EOF() {
        return (int)1L;
    }
    public static int G_ERR_UNEXP_EOF_IN_STRING() {
        return (int)2L;
    }
    public static int G_ERR_UNEXP_EOF_IN_COMMENT() {
        return (int)3L;
    }
    public static int G_ERR_NON_DIGIT_IN_CONST() {
        return (int)4L;
    }
    public static int G_ERR_DIGIT_RADIX() {
        return (int)5L;
    }
    public static int G_ERR_FLOAT_RADIX() {
        return (int)6L;
    }
    public static int G_ERR_FLOAT_MALFORMED() {
        return (int)7L;
    }
    public static int G_TOKEN_EOF() {
        return (int)0L;
    }
    public static int G_TOKEN_LEFT_PAREN() {
        return (int)40L;
    }
    public static int G_TOKEN_RIGHT_PAREN() {
        return (int)41L;
    }
    public static int G_TOKEN_LEFT_CURLY() {
        return (int)123L;
    }
    public static int G_TOKEN_RIGHT_CURLY() {
        return (int)125L;
    }
    public static int G_TOKEN_LEFT_BRACE() {
        return (int)91L;
    }
    public static int G_TOKEN_RIGHT_BRACE() {
        return (int)93L;
    }
    public static int G_TOKEN_EQUAL_SIGN() {
        return (int)61L;
    }
    public static int G_TOKEN_COMMA() {
        return (int)44L;
    }
    public static int G_TOKEN_NONE() {
        return (int)256L;
    }
    public static int G_TOKEN_ERROR() {
        return (int)257L;
    }
    public static int G_TOKEN_CHAR() {
        return (int)258L;
    }
    public static int G_TOKEN_BINARY() {
        return (int)259L;
    }
    public static int G_TOKEN_OCTAL() {
        return (int)260L;
    }
    public static int G_TOKEN_INT() {
        return (int)261L;
    }
    public static int G_TOKEN_HEX() {
        return (int)262L;
    }
    public static int G_TOKEN_FLOAT() {
        return (int)263L;
    }
    public static int G_TOKEN_STRING() {
        return (int)264L;
    }
    public static int G_TOKEN_SYMBOL() {
        return (int)265L;
    }
    public static int G_TOKEN_IDENTIFIER() {
        return (int)266L;
    }
    public static int G_TOKEN_IDENTIFIER_NULL() {
        return (int)267L;
    }
    public static int G_TOKEN_COMMENT_SINGLE() {
        return (int)268L;
    }
    public static int G_TOKEN_COMMENT_MULTI() {
        return (int)269L;
    }
    public static int G_TOKEN_LAST() {
        return (int)270L;
    }
    public static MethodHandle g_scanner_new$MH() {
        return RuntimeHelper.requireNonNull(constants$281.g_scanner_new$MH,"g_scanner_new");
    }
    public static MemoryAddress g_scanner_new ( Addressable config_templ) {
        var mh$ = g_scanner_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(config_templ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$281.g_scanner_destroy$MH,"g_scanner_destroy");
    }
    public static void g_scanner_destroy ( Addressable scanner) {
        var mh$ = g_scanner_destroy$MH();
        try {
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_input_file$MH() {
        return RuntimeHelper.requireNonNull(constants$281.g_scanner_input_file$MH,"g_scanner_input_file");
    }
    public static void g_scanner_input_file ( Addressable scanner,  int input_fd) {
        var mh$ = g_scanner_input_file$MH();
        try {
            mh$.invokeExact(scanner, input_fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_sync_file_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_scanner_sync_file_offset$MH,"g_scanner_sync_file_offset");
    }
    public static void g_scanner_sync_file_offset ( Addressable scanner) {
        var mh$ = g_scanner_sync_file_offset$MH();
        try {
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_input_text$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_scanner_input_text$MH,"g_scanner_input_text");
    }
    public static void g_scanner_input_text ( Addressable scanner,  Addressable text,  int text_len) {
        var mh$ = g_scanner_input_text$MH();
        try {
            mh$.invokeExact(scanner, text, text_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_get_next_token$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_scanner_get_next_token$MH,"g_scanner_get_next_token");
    }
    public static int g_scanner_get_next_token ( Addressable scanner) {
        var mh$ = g_scanner_get_next_token$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_peek_next_token$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_scanner_peek_next_token$MH,"g_scanner_peek_next_token");
    }
    public static int g_scanner_peek_next_token ( Addressable scanner) {
        var mh$ = g_scanner_peek_next_token$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_token$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_scanner_cur_token$MH,"g_scanner_cur_token");
    }
    public static int g_scanner_cur_token ( Addressable scanner) {
        var mh$ = g_scanner_cur_token$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_value$MH() {
        return RuntimeHelper.requireNonNull(constants$282.g_scanner_cur_value$MH,"g_scanner_cur_value");
    }
    public static MemorySegment g_scanner_cur_value ( SegmentAllocator allocator,  Addressable scanner) {
        var mh$ = g_scanner_cur_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_line$MH() {
        return RuntimeHelper.requireNonNull(constants$283.g_scanner_cur_line$MH,"g_scanner_cur_line");
    }
    public static int g_scanner_cur_line ( Addressable scanner) {
        var mh$ = g_scanner_cur_line$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_position$MH() {
        return RuntimeHelper.requireNonNull(constants$283.g_scanner_cur_position$MH,"g_scanner_cur_position");
    }
    public static int g_scanner_cur_position ( Addressable scanner) {
        var mh$ = g_scanner_cur_position$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_eof$MH() {
        return RuntimeHelper.requireNonNull(constants$283.g_scanner_eof$MH,"g_scanner_eof");
    }
    public static int g_scanner_eof ( Addressable scanner) {
        var mh$ = g_scanner_eof$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_set_scope$MH() {
        return RuntimeHelper.requireNonNull(constants$283.g_scanner_set_scope$MH,"g_scanner_set_scope");
    }
    public static int g_scanner_set_scope ( Addressable scanner,  int scope_id) {
        var mh$ = g_scanner_set_scope$MH();
        try {
            return (int)mh$.invokeExact(scanner, scope_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_add_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$283.g_scanner_scope_add_symbol$MH,"g_scanner_scope_add_symbol");
    }
    public static void g_scanner_scope_add_symbol ( Addressable scanner,  int scope_id,  Addressable symbol,  Addressable value) {
        var mh$ = g_scanner_scope_add_symbol$MH();
        try {
            mh$.invokeExact(scanner, scope_id, symbol, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_remove_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$283.g_scanner_scope_remove_symbol$MH,"g_scanner_scope_remove_symbol");
    }
    public static void g_scanner_scope_remove_symbol ( Addressable scanner,  int scope_id,  Addressable symbol) {
        var mh$ = g_scanner_scope_remove_symbol$MH();
        try {
            mh$.invokeExact(scanner, scope_id, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_lookup_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$284.g_scanner_scope_lookup_symbol$MH,"g_scanner_scope_lookup_symbol");
    }
    public static MemoryAddress g_scanner_scope_lookup_symbol ( Addressable scanner,  int scope_id,  Addressable symbol) {
        var mh$ = g_scanner_scope_lookup_symbol$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(scanner, scope_id, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_foreach_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$284.g_scanner_scope_foreach_symbol$MH,"g_scanner_scope_foreach_symbol");
    }
    public static void g_scanner_scope_foreach_symbol ( Addressable scanner,  int scope_id,  Addressable func,  Addressable user_data) {
        var mh$ = g_scanner_scope_foreach_symbol$MH();
        try {
            mh$.invokeExact(scanner, scope_id, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_lookup_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$284.g_scanner_lookup_symbol$MH,"g_scanner_lookup_symbol");
    }
    public static MemoryAddress g_scanner_lookup_symbol ( Addressable scanner,  Addressable symbol) {
        var mh$ = g_scanner_lookup_symbol$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(scanner, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_unexp_token$MH() {
        return RuntimeHelper.requireNonNull(constants$284.g_scanner_unexp_token$MH,"g_scanner_unexp_token");
    }
    public static void g_scanner_unexp_token ( Addressable scanner,  int expected_token,  Addressable identifier_spec,  Addressable symbol_spec,  Addressable symbol_name,  Addressable message,  int is_error) {
        var mh$ = g_scanner_unexp_token$MH();
        try {
            mh$.invokeExact(scanner, expected_token, identifier_spec, symbol_spec, symbol_name, message, is_error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_error$MH() {
        return RuntimeHelper.requireNonNull(constants$284.g_scanner_error$MH,"g_scanner_error");
    }
    public static void g_scanner_error ( Addressable scanner,  Addressable format, Object... x2) {
        var mh$ = g_scanner_error$MH();
        try {
            mh$.invokeExact(scanner, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_warn$MH() {
        return RuntimeHelper.requireNonNull(constants$284.g_scanner_warn$MH,"g_scanner_warn");
    }
    public static void g_scanner_warn ( Addressable scanner,  Addressable format, Object... x2) {
        var mh$ = g_scanner_warn$MH();
        try {
            mh$.invokeExact(scanner, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_new$MH() {
        return RuntimeHelper.requireNonNull(constants$285.g_sequence_new$MH,"g_sequence_new");
    }
    public static MemoryAddress g_sequence_new ( Addressable data_destroy) {
        var mh$ = g_sequence_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(data_destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_free$MH() {
        return RuntimeHelper.requireNonNull(constants$285.g_sequence_free$MH,"g_sequence_free");
    }
    public static void g_sequence_free ( Addressable seq) {
        var mh$ = g_sequence_free$MH();
        try {
            mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_length$MH() {
        return RuntimeHelper.requireNonNull(constants$285.g_sequence_get_length$MH,"g_sequence_get_length");
    }
    public static int g_sequence_get_length ( Addressable seq) {
        var mh$ = g_sequence_get_length$MH();
        try {
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$285.g_sequence_foreach$MH,"g_sequence_foreach");
    }
    public static void g_sequence_foreach ( Addressable seq,  Addressable func,  Addressable user_data) {
        var mh$ = g_sequence_foreach$MH();
        try {
            mh$.invokeExact(seq, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_foreach_range$MH() {
        return RuntimeHelper.requireNonNull(constants$286.g_sequence_foreach_range$MH,"g_sequence_foreach_range");
    }
    public static void g_sequence_foreach_range ( Addressable begin,  Addressable end,  Addressable func,  Addressable user_data) {
        var mh$ = g_sequence_foreach_range$MH();
        try {
            mh$.invokeExact(begin, end, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$286.g_sequence_sort$MH,"g_sequence_sort");
    }
    public static void g_sequence_sort ( Addressable seq,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = g_sequence_sort$MH();
        try {
            mh$.invokeExact(seq, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$286.g_sequence_sort_iter$MH,"g_sequence_sort_iter");
    }
    public static void g_sequence_sort_iter ( Addressable seq,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = g_sequence_sort_iter$MH();
        try {
            mh$.invokeExact(seq, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$286.g_sequence_is_empty$MH,"g_sequence_is_empty");
    }
    public static int g_sequence_is_empty ( Addressable seq) {
        var mh$ = g_sequence_is_empty$MH();
        try {
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_begin_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$286.g_sequence_get_begin_iter$MH,"g_sequence_get_begin_iter");
    }
    public static MemoryAddress g_sequence_get_begin_iter ( Addressable seq) {
        var mh$ = g_sequence_get_begin_iter$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_end_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$286.g_sequence_get_end_iter$MH,"g_sequence_get_end_iter");
    }
    public static MemoryAddress g_sequence_get_end_iter ( Addressable seq) {
        var mh$ = g_sequence_get_end_iter$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_iter_at_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$287.g_sequence_get_iter_at_pos$MH,"g_sequence_get_iter_at_pos");
    }
    public static MemoryAddress g_sequence_get_iter_at_pos ( Addressable seq,  int pos) {
        var mh$ = g_sequence_get_iter_at_pos$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_append$MH() {
        return RuntimeHelper.requireNonNull(constants$287.g_sequence_append$MH,"g_sequence_append");
    }
    public static MemoryAddress g_sequence_append ( Addressable seq,  Addressable data) {
        var mh$ = g_sequence_append$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$287.g_sequence_prepend$MH,"g_sequence_prepend");
    }
    public static MemoryAddress g_sequence_prepend ( Addressable seq,  Addressable data) {
        var mh$ = g_sequence_prepend$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_insert_before$MH() {
        return RuntimeHelper.requireNonNull(constants$287.g_sequence_insert_before$MH,"g_sequence_insert_before");
    }
    public static MemoryAddress g_sequence_insert_before ( Addressable iter,  Addressable data) {
        var mh$ = g_sequence_insert_before$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iter, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_move$MH() {
        return RuntimeHelper.requireNonNull(constants$287.g_sequence_move$MH,"g_sequence_move");
    }
    public static void g_sequence_move ( Addressable src,  Addressable dest) {
        var mh$ = g_sequence_move$MH();
        try {
            mh$.invokeExact(src, dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_swap$MH() {
        return RuntimeHelper.requireNonNull(constants$287.g_sequence_swap$MH,"g_sequence_swap");
    }
    public static void g_sequence_swap ( Addressable a,  Addressable b) {
        var mh$ = g_sequence_swap$MH();
        try {
            mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_insert_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$288.g_sequence_insert_sorted$MH,"g_sequence_insert_sorted");
    }
    public static MemoryAddress g_sequence_insert_sorted ( Addressable seq,  Addressable data,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = g_sequence_insert_sorted$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_insert_sorted_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$288.g_sequence_insert_sorted_iter$MH,"g_sequence_insert_sorted_iter");
    }
    public static MemoryAddress g_sequence_insert_sorted_iter ( Addressable seq,  Addressable data,  Addressable iter_cmp,  Addressable cmp_data) {
        var mh$ = g_sequence_insert_sorted_iter$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort_changed$MH() {
        return RuntimeHelper.requireNonNull(constants$288.g_sequence_sort_changed$MH,"g_sequence_sort_changed");
    }
    public static void g_sequence_sort_changed ( Addressable iter,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = g_sequence_sort_changed$MH();
        try {
            mh$.invokeExact(iter, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort_changed_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$288.g_sequence_sort_changed_iter$MH,"g_sequence_sort_changed_iter");
    }
    public static void g_sequence_sort_changed_iter ( Addressable iter,  Addressable iter_cmp,  Addressable cmp_data) {
        var mh$ = g_sequence_sort_changed_iter$MH();
        try {
            mh$.invokeExact(iter, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$288.g_sequence_remove$MH,"g_sequence_remove");
    }
    public static void g_sequence_remove ( Addressable iter) {
        var mh$ = g_sequence_remove$MH();
        try {
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$288.g_sequence_remove_range$MH,"g_sequence_remove_range");
    }
    public static void g_sequence_remove_range ( Addressable begin,  Addressable end) {
        var mh$ = g_sequence_remove_range$MH();
        try {
            mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_move_range$MH() {
        return RuntimeHelper.requireNonNull(constants$289.g_sequence_move_range$MH,"g_sequence_move_range");
    }
    public static void g_sequence_move_range ( Addressable dest,  Addressable begin,  Addressable end) {
        var mh$ = g_sequence_move_range$MH();
        try {
            mh$.invokeExact(dest, begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_search$MH() {
        return RuntimeHelper.requireNonNull(constants$289.g_sequence_search$MH,"g_sequence_search");
    }
    public static MemoryAddress g_sequence_search ( Addressable seq,  Addressable data,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = g_sequence_search$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_search_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$289.g_sequence_search_iter$MH,"g_sequence_search_iter");
    }
    public static MemoryAddress g_sequence_search_iter ( Addressable seq,  Addressable data,  Addressable iter_cmp,  Addressable cmp_data) {
        var mh$ = g_sequence_search_iter$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$289.g_sequence_lookup$MH,"g_sequence_lookup");
    }
    public static MemoryAddress g_sequence_lookup ( Addressable seq,  Addressable data,  Addressable cmp_func,  Addressable cmp_data) {
        var mh$ = g_sequence_lookup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_lookup_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$289.g_sequence_lookup_iter$MH,"g_sequence_lookup_iter");
    }
    public static MemoryAddress g_sequence_lookup_iter ( Addressable seq,  Addressable data,  Addressable iter_cmp,  Addressable cmp_data) {
        var mh$ = g_sequence_lookup_iter$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get$MH() {
        return RuntimeHelper.requireNonNull(constants$289.g_sequence_get$MH,"g_sequence_get");
    }
    public static MemoryAddress g_sequence_get ( Addressable iter) {
        var mh$ = g_sequence_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_set$MH() {
        return RuntimeHelper.requireNonNull(constants$290.g_sequence_set$MH,"g_sequence_set");
    }
    public static void g_sequence_set ( Addressable iter,  Addressable data) {
        var mh$ = g_sequence_set$MH();
        try {
            mh$.invokeExact(iter, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_is_begin$MH() {
        return RuntimeHelper.requireNonNull(constants$290.g_sequence_iter_is_begin$MH,"g_sequence_iter_is_begin");
    }
    public static int g_sequence_iter_is_begin ( Addressable iter) {
        var mh$ = g_sequence_iter_is_begin$MH();
        try {
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_is_end$MH() {
        return RuntimeHelper.requireNonNull(constants$290.g_sequence_iter_is_end$MH,"g_sequence_iter_is_end");
    }
    public static int g_sequence_iter_is_end ( Addressable iter) {
        var mh$ = g_sequence_iter_is_end$MH();
        try {
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_next$MH() {
        return RuntimeHelper.requireNonNull(constants$290.g_sequence_iter_next$MH,"g_sequence_iter_next");
    }
    public static MemoryAddress g_sequence_iter_next ( Addressable iter) {
        var mh$ = g_sequence_iter_next$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_prev$MH() {
        return RuntimeHelper.requireNonNull(constants$290.g_sequence_iter_prev$MH,"g_sequence_iter_prev");
    }
    public static MemoryAddress g_sequence_iter_prev ( Addressable iter) {
        var mh$ = g_sequence_iter_prev$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_get_position$MH() {
        return RuntimeHelper.requireNonNull(constants$290.g_sequence_iter_get_position$MH,"g_sequence_iter_get_position");
    }
    public static int g_sequence_iter_get_position ( Addressable iter) {
        var mh$ = g_sequence_iter_get_position$MH();
        try {
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_move$MH() {
        return RuntimeHelper.requireNonNull(constants$291.g_sequence_iter_move$MH,"g_sequence_iter_move");
    }
    public static MemoryAddress g_sequence_iter_move ( Addressable iter,  int delta) {
        var mh$ = g_sequence_iter_move$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iter, delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_get_sequence$MH() {
        return RuntimeHelper.requireNonNull(constants$291.g_sequence_iter_get_sequence$MH,"g_sequence_iter_get_sequence");
    }
    public static MemoryAddress g_sequence_iter_get_sequence ( Addressable iter) {
        var mh$ = g_sequence_iter_get_sequence$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$291.g_sequence_iter_compare$MH,"g_sequence_iter_compare");
    }
    public static int g_sequence_iter_compare ( Addressable a,  Addressable b) {
        var mh$ = g_sequence_iter_compare$MH();
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_range_get_midpoint$MH() {
        return RuntimeHelper.requireNonNull(constants$291.g_sequence_range_get_midpoint$MH,"g_sequence_range_get_midpoint");
    }
    public static MemoryAddress g_sequence_range_get_midpoint ( Addressable begin,  Addressable end) {
        var mh$ = g_sequence_range_get_midpoint$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_SHELL_ERROR_BAD_QUOTING() {
        return (int)0L;
    }
    public static int G_SHELL_ERROR_EMPTY_STRING() {
        return (int)1L;
    }
    public static int G_SHELL_ERROR_FAILED() {
        return (int)2L;
    }
    public static MethodHandle g_shell_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$291.g_shell_error_quark$MH,"g_shell_error_quark");
    }
    public static int g_shell_error_quark () {
        var mh$ = g_shell_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_shell_quote$MH() {
        return RuntimeHelper.requireNonNull(constants$291.g_shell_quote$MH,"g_shell_quote");
    }
    public static MemoryAddress g_shell_quote ( Addressable unquoted_string) {
        var mh$ = g_shell_quote$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(unquoted_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_shell_unquote$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_shell_unquote$MH,"g_shell_unquote");
    }
    public static MemoryAddress g_shell_unquote ( Addressable quoted_string,  Addressable error) {
        var mh$ = g_shell_unquote$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(quoted_string, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_shell_parse_argv$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_shell_parse_argv$MH,"g_shell_parse_argv");
    }
    public static int g_shell_parse_argv ( Addressable command_line,  Addressable argcp,  Addressable argvp,  Addressable error) {
        var mh$ = g_shell_parse_argv$MH();
        try {
            return (int)mh$.invokeExact(command_line, argcp, argvp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_slice_alloc$MH,"g_slice_alloc");
    }
    public static MemoryAddress g_slice_alloc ( long block_size) {
        var mh$ = g_slice_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_slice_alloc0$MH,"g_slice_alloc0");
    }
    public static MemoryAddress g_slice_alloc0 ( long block_size) {
        var mh$ = g_slice_alloc0$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_slice_copy$MH,"g_slice_copy");
    }
    public static MemoryAddress g_slice_copy ( long block_size,  Addressable mem_block) {
        var mh$ = g_slice_copy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_free1$MH() {
        return RuntimeHelper.requireNonNull(constants$292.g_slice_free1$MH,"g_slice_free1");
    }
    public static void g_slice_free1 ( long block_size,  Addressable mem_block) {
        var mh$ = g_slice_free1$MH();
        try {
            mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_free_chain_with_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$293.g_slice_free_chain_with_offset$MH,"g_slice_free_chain_with_offset");
    }
    public static void g_slice_free_chain_with_offset ( long block_size,  Addressable mem_chain,  long next_offset) {
        var mh$ = g_slice_free_chain_with_offset$MH();
        try {
            mh$.invokeExact(block_size, mem_chain, next_offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_SLICE_CONFIG_ALWAYS_MALLOC() {
        return (int)1L;
    }
    public static int G_SLICE_CONFIG_BYPASS_MAGAZINES() {
        return (int)2L;
    }
    public static int G_SLICE_CONFIG_WORKING_SET_MSECS() {
        return (int)3L;
    }
    public static int G_SLICE_CONFIG_COLOR_INCREMENT() {
        return (int)4L;
    }
    public static int G_SLICE_CONFIG_CHUNK_SIZES() {
        return (int)5L;
    }
    public static int G_SLICE_CONFIG_CONTENTION_COUNTER() {
        return (int)6L;
    }
    public static MethodHandle g_slice_set_config$MH() {
        return RuntimeHelper.requireNonNull(constants$293.g_slice_set_config$MH,"g_slice_set_config");
    }
    public static void g_slice_set_config ( int ckey,  long value) {
        var mh$ = g_slice_set_config$MH();
        try {
            mh$.invokeExact(ckey, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_get_config$MH() {
        return RuntimeHelper.requireNonNull(constants$293.g_slice_get_config$MH,"g_slice_get_config");
    }
    public static long g_slice_get_config ( int ckey) {
        var mh$ = g_slice_get_config$MH();
        try {
            return (long)mh$.invokeExact(ckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_get_config_state$MH() {
        return RuntimeHelper.requireNonNull(constants$293.g_slice_get_config_state$MH,"g_slice_get_config_state");
    }
    public static MemoryAddress g_slice_get_config_state ( int ckey,  long address,  Addressable n_values) {
        var mh$ = g_slice_get_config_state$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(ckey, address, n_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_SPAWN_ERROR_FORK() {
        return (int)0L;
    }
    public static int G_SPAWN_ERROR_READ() {
        return (int)1L;
    }
    public static int G_SPAWN_ERROR_CHDIR() {
        return (int)2L;
    }
    public static int G_SPAWN_ERROR_ACCES() {
        return (int)3L;
    }
    public static int G_SPAWN_ERROR_PERM() {
        return (int)4L;
    }
    public static int G_SPAWN_ERROR_TOO_BIG() {
        return (int)5L;
    }
    public static int G_SPAWN_ERROR_2BIG() {
        return (int)5L;
    }
    public static int G_SPAWN_ERROR_NOEXEC() {
        return (int)6L;
    }
    public static int G_SPAWN_ERROR_NAMETOOLONG() {
        return (int)7L;
    }
    public static int G_SPAWN_ERROR_NOENT() {
        return (int)8L;
    }
    public static int G_SPAWN_ERROR_NOMEM() {
        return (int)9L;
    }
    public static int G_SPAWN_ERROR_NOTDIR() {
        return (int)10L;
    }
    public static int G_SPAWN_ERROR_LOOP() {
        return (int)11L;
    }
    public static int G_SPAWN_ERROR_TXTBUSY() {
        return (int)12L;
    }
    public static int G_SPAWN_ERROR_IO() {
        return (int)13L;
    }
    public static int G_SPAWN_ERROR_NFILE() {
        return (int)14L;
    }
    public static int G_SPAWN_ERROR_MFILE() {
        return (int)15L;
    }
    public static int G_SPAWN_ERROR_INVAL() {
        return (int)16L;
    }
    public static int G_SPAWN_ERROR_ISDIR() {
        return (int)17L;
    }
    public static int G_SPAWN_ERROR_LIBBAD() {
        return (int)18L;
    }
    public static int G_SPAWN_ERROR_FAILED() {
        return (int)19L;
    }
    public static int G_SPAWN_DEFAULT() {
        return (int)0L;
    }
    public static int G_SPAWN_LEAVE_DESCRIPTORS_OPEN() {
        return (int)1L;
    }
    public static int G_SPAWN_DO_NOT_REAP_CHILD() {
        return (int)2L;
    }
    public static int G_SPAWN_SEARCH_PATH() {
        return (int)4L;
    }
    public static int G_SPAWN_STDOUT_TO_DEV_NULL() {
        return (int)8L;
    }
    public static int G_SPAWN_STDERR_TO_DEV_NULL() {
        return (int)16L;
    }
    public static int G_SPAWN_CHILD_INHERITS_STDIN() {
        return (int)32L;
    }
    public static int G_SPAWN_FILE_AND_ARGV_ZERO() {
        return (int)64L;
    }
    public static int G_SPAWN_SEARCH_PATH_FROM_ENVP() {
        return (int)128L;
    }
    public static int G_SPAWN_CLOEXEC_PIPES() {
        return (int)256L;
    }
    public static MethodHandle g_spawn_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_error_quark$MH,"g_spawn_error_quark");
    }
    public static int g_spawn_error_quark () {
        var mh$ = g_spawn_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_exit_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_exit_error_quark$MH,"g_spawn_exit_error_quark");
    }
    public static int g_spawn_exit_error_quark () {
        var mh$ = g_spawn_exit_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_async$MH,"g_spawn_async");
    }
    public static int g_spawn_async ( Addressable working_directory,  Addressable argv,  Addressable envp,  int flags,  Addressable child_setup,  Addressable user_data,  Addressable child_pid,  Addressable error) {
        var mh$ = g_spawn_async$MH();
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async_with_pipes$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_async_with_pipes$MH,"g_spawn_async_with_pipes");
    }
    public static int g_spawn_async_with_pipes ( Addressable working_directory,  Addressable argv,  Addressable envp,  int flags,  Addressable child_setup,  Addressable user_data,  Addressable child_pid,  Addressable standard_input,  Addressable standard_output,  Addressable standard_error,  Addressable error) {
        var mh$ = g_spawn_async_with_pipes$MH();
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, standard_input, standard_output, standard_error, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async_with_pipes_and_fds$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_async_with_pipes_and_fds$MH,"g_spawn_async_with_pipes_and_fds");
    }
    public static int g_spawn_async_with_pipes_and_fds ( Addressable working_directory,  Addressable argv,  Addressable envp,  int flags,  Addressable child_setup,  Addressable user_data,  int stdin_fd,  int stdout_fd,  int stderr_fd,  Addressable source_fds,  Addressable target_fds,  long n_fds,  Addressable child_pid_out,  Addressable stdin_pipe_out,  Addressable stdout_pipe_out,  Addressable stderr_pipe_out,  Addressable error) {
        var mh$ = g_spawn_async_with_pipes_and_fds$MH();
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, stdin_fd, stdout_fd, stderr_fd, source_fds, target_fds, n_fds, child_pid_out, stdin_pipe_out, stdout_pipe_out, stderr_pipe_out, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async_with_fds$MH() {
        return RuntimeHelper.requireNonNull(constants$294.g_spawn_async_with_fds$MH,"g_spawn_async_with_fds");
    }
    public static int g_spawn_async_with_fds ( Addressable working_directory,  Addressable argv,  Addressable envp,  int flags,  Addressable child_setup,  Addressable user_data,  Addressable child_pid,  int stdin_fd,  int stdout_fd,  int stderr_fd,  Addressable error) {
        var mh$ = g_spawn_async_with_fds$MH();
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, stdin_fd, stdout_fd, stderr_fd, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_sync$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_spawn_sync$MH,"g_spawn_sync");
    }
    public static int g_spawn_sync ( Addressable working_directory,  Addressable argv,  Addressable envp,  int flags,  Addressable child_setup,  Addressable user_data,  Addressable standard_output,  Addressable standard_error,  Addressable wait_status,  Addressable error) {
        var mh$ = g_spawn_sync$MH();
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, standard_output, standard_error, wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_command_line_sync$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_spawn_command_line_sync$MH,"g_spawn_command_line_sync");
    }
    public static int g_spawn_command_line_sync ( Addressable command_line,  Addressable standard_output,  Addressable standard_error,  Addressable wait_status,  Addressable error) {
        var mh$ = g_spawn_command_line_sync$MH();
        try {
            return (int)mh$.invokeExact(command_line, standard_output, standard_error, wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_command_line_async$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_spawn_command_line_async$MH,"g_spawn_command_line_async");
    }
    public static int g_spawn_command_line_async ( Addressable command_line,  Addressable error) {
        var mh$ = g_spawn_command_line_async$MH();
        try {
            return (int)mh$.invokeExact(command_line, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_check_wait_status$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_spawn_check_wait_status$MH,"g_spawn_check_wait_status");
    }
    public static int g_spawn_check_wait_status ( int wait_status,  Addressable error) {
        var mh$ = g_spawn_check_wait_status$MH();
        try {
            return (int)mh$.invokeExact(wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_check_exit_status$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_spawn_check_exit_status$MH,"g_spawn_check_exit_status");
    }
    public static int g_spawn_check_exit_status ( int wait_status,  Addressable error) {
        var mh$ = g_spawn_check_exit_status$MH();
        try {
            return (int)mh$.invokeExact(wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_close_pid$MH() {
        return RuntimeHelper.requireNonNull(constants$295.g_spawn_close_pid$MH,"g_spawn_close_pid");
    }
    public static void g_spawn_close_pid ( int pid) {
        var mh$ = g_spawn_close_pid$MH();
        try {
            mh$.invokeExact(pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_ASCII_ALNUM() {
        return (int)1L;
    }
    public static int G_ASCII_ALPHA() {
        return (int)2L;
    }
    public static int G_ASCII_CNTRL() {
        return (int)4L;
    }
    public static int G_ASCII_DIGIT() {
        return (int)8L;
    }
    public static int G_ASCII_GRAPH() {
        return (int)16L;
    }
    public static int G_ASCII_LOWER() {
        return (int)32L;
    }
    public static int G_ASCII_PRINT() {
        return (int)64L;
    }
    public static int G_ASCII_PUNCT() {
        return (int)128L;
    }
    public static int G_ASCII_SPACE() {
        return (int)256L;
    }
    public static int G_ASCII_UPPER() {
        return (int)512L;
    }
    public static int G_ASCII_XDIGIT() {
        return (int)1024L;
    }
    public static MemoryLayout g_ascii_table$LAYOUT() {
        return constants$296.g_ascii_table$LAYOUT;
    }
    public static VarHandle g_ascii_table$VH() {
        return constants$296.g_ascii_table$VH;
    }
    public static MemorySegment g_ascii_table$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$296.g_ascii_table$SEGMENT,"g_ascii_table");
    }
    public static MemoryAddress g_ascii_table$get() {
        return (java.lang.foreign.MemoryAddress) constants$296.g_ascii_table$VH.get(RuntimeHelper.requireNonNull(constants$296.g_ascii_table$SEGMENT, "g_ascii_table"));
    }
    public static void g_ascii_table$set( MemoryAddress x) {
        constants$296.g_ascii_table$VH.set(RuntimeHelper.requireNonNull(constants$296.g_ascii_table$SEGMENT, "g_ascii_table"), x);
    }
    public static MethodHandle g_ascii_tolower$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_ascii_tolower$MH,"g_ascii_tolower");
    }
    public static byte g_ascii_tolower ( byte c) {
        var mh$ = g_ascii_tolower$MH();
        try {
            return (byte)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_toupper$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_ascii_toupper$MH,"g_ascii_toupper");
    }
    public static byte g_ascii_toupper ( byte c) {
        var mh$ = g_ascii_toupper$MH();
        try {
            return (byte)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_digit_value$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_ascii_digit_value$MH,"g_ascii_digit_value");
    }
    public static int g_ascii_digit_value ( byte c) {
        var mh$ = g_ascii_digit_value$MH();
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_xdigit_value$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_ascii_xdigit_value$MH,"g_ascii_xdigit_value");
    }
    public static int g_ascii_xdigit_value ( byte c) {
        var mh$ = g_ascii_xdigit_value$MH();
        try {
            return (int)mh$.invokeExact(c);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strdelimit$MH() {
        return RuntimeHelper.requireNonNull(constants$296.g_strdelimit$MH,"g_strdelimit");
    }
    public static MemoryAddress g_strdelimit ( Addressable string,  Addressable delimiters,  byte new_delimiter) {
        var mh$ = g_strdelimit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string, delimiters, new_delimiter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strcanon$MH() {
        return RuntimeHelper.requireNonNull(constants$297.g_strcanon$MH,"g_strcanon");
    }
    public static MemoryAddress g_strcanon ( Addressable string,  Addressable valid_chars,  byte substitutor) {
        var mh$ = g_strcanon$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string, valid_chars, substitutor);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strerror$MH() {
        return RuntimeHelper.requireNonNull(constants$297.g_strerror$MH,"g_strerror");
    }
    public static MemoryAddress g_strerror ( int errnum) {
        var mh$ = g_strerror$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(errnum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strsignal$MH() {
        return RuntimeHelper.requireNonNull(constants$297.g_strsignal$MH,"g_strsignal");
    }
    public static MemoryAddress g_strsignal ( int signum) {
        var mh$ = g_strsignal$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(signum);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strreverse$MH() {
        return RuntimeHelper.requireNonNull(constants$297.g_strreverse$MH,"g_strreverse");
    }
    public static MemoryAddress g_strreverse ( Addressable string) {
        var mh$ = g_strreverse$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strlcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$297.g_strlcpy$MH,"g_strlcpy");
    }
    public static long g_strlcpy ( Addressable dest,  Addressable src,  long dest_size) {
        var mh$ = g_strlcpy$MH();
        try {
            return (long)mh$.invokeExact(dest, src, dest_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strlcat$MH() {
        return RuntimeHelper.requireNonNull(constants$297.g_strlcat$MH,"g_strlcat");
    }
    public static long g_strlcat ( Addressable dest,  Addressable src,  long dest_size) {
        var mh$ = g_strlcat$MH();
        try {
            return (long)mh$.invokeExact(dest, src, dest_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strstr_len$MH() {
        return RuntimeHelper.requireNonNull(constants$298.g_strstr_len$MH,"g_strstr_len");
    }
    public static MemoryAddress g_strstr_len ( Addressable haystack,  long haystack_len,  Addressable needle) {
        var mh$ = g_strstr_len$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(haystack, haystack_len, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strrstr$MH() {
        return RuntimeHelper.requireNonNull(constants$298.g_strrstr$MH,"g_strrstr");
    }
    public static MemoryAddress g_strrstr ( Addressable haystack,  Addressable needle) {
        var mh$ = g_strrstr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(haystack, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strrstr_len$MH() {
        return RuntimeHelper.requireNonNull(constants$298.g_strrstr_len$MH,"g_strrstr_len");
    }
    public static MemoryAddress g_strrstr_len ( Addressable haystack,  long haystack_len,  Addressable needle) {
        var mh$ = g_strrstr_len$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(haystack, haystack_len, needle);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_str_has_suffix$MH() {
        return RuntimeHelper.requireNonNull(constants$298.g_str_has_suffix$MH,"g_str_has_suffix");
    }
    public static int g_str_has_suffix ( Addressable str,  Addressable suffix) {
        var mh$ = g_str_has_suffix$MH();
        try {
            return (int)mh$.invokeExact(str, suffix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_str_has_prefix$MH() {
        return RuntimeHelper.requireNonNull(constants$298.g_str_has_prefix$MH,"g_str_has_prefix");
    }
    public static int g_str_has_prefix ( Addressable str,  Addressable prefix) {
        var mh$ = g_str_has_prefix$MH();
        try {
            return (int)mh$.invokeExact(str, prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$298.g_strtod$MH,"g_strtod");
    }
    public static double g_strtod ( Addressable nptr,  Addressable endptr) {
        var mh$ = g_strtod$MH();
        try {
            return (double)mh$.invokeExact(nptr, endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_strtod$MH() {
        return RuntimeHelper.requireNonNull(constants$299.g_ascii_strtod$MH,"g_ascii_strtod");
    }
    public static double g_ascii_strtod ( Addressable nptr,  Addressable endptr) {
        var mh$ = g_ascii_strtod$MH();
        try {
            return (double)mh$.invokeExact(nptr, endptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_strtoull$MH() {
        return RuntimeHelper.requireNonNull(constants$299.g_ascii_strtoull$MH,"g_ascii_strtoull");
    }
    public static long g_ascii_strtoull ( Addressable nptr,  Addressable endptr,  int base) {
        var mh$ = g_ascii_strtoull$MH();
        try {
            return (long)mh$.invokeExact(nptr, endptr, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_strtoll$MH() {
        return RuntimeHelper.requireNonNull(constants$299.g_ascii_strtoll$MH,"g_ascii_strtoll");
    }
    public static long g_ascii_strtoll ( Addressable nptr,  Addressable endptr,  int base) {
        var mh$ = g_ascii_strtoll$MH();
        try {
            return (long)mh$.invokeExact(nptr, endptr, base);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_dtostr$MH() {
        return RuntimeHelper.requireNonNull(constants$299.g_ascii_dtostr$MH,"g_ascii_dtostr");
    }
    public static MemoryAddress g_ascii_dtostr ( Addressable buffer,  int buf_len,  double d) {
        var mh$ = g_ascii_dtostr$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(buffer, buf_len, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_formatd$MH() {
        return RuntimeHelper.requireNonNull(constants$299.g_ascii_formatd$MH,"g_ascii_formatd");
    }
    public static MemoryAddress g_ascii_formatd ( Addressable buffer,  int buf_len,  Addressable format,  double d) {
        var mh$ = g_ascii_formatd$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(buffer, buf_len, format, d);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strchug$MH() {
        return RuntimeHelper.requireNonNull(constants$299.g_strchug$MH,"g_strchug");
    }
    public static MemoryAddress g_strchug ( Addressable string) {
        var mh$ = g_strchug$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strchomp$MH() {
        return RuntimeHelper.requireNonNull(constants$300.g_strchomp$MH,"g_strchomp");
    }
    public static MemoryAddress g_strchomp ( Addressable string) {
        var mh$ = g_strchomp$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$300.g_ascii_strcasecmp$MH,"g_ascii_strcasecmp");
    }
    public static int g_ascii_strcasecmp ( Addressable s1,  Addressable s2) {
        var mh$ = g_ascii_strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$300.g_ascii_strncasecmp$MH,"g_ascii_strncasecmp");
    }
    public static int g_ascii_strncasecmp ( Addressable s1,  Addressable s2,  long n) {
        var mh$ = g_ascii_strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(s1, s2, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_strdown$MH() {
        return RuntimeHelper.requireNonNull(constants$300.g_ascii_strdown$MH,"g_ascii_strdown");
    }
    public static MemoryAddress g_ascii_strdown ( Addressable str,  long len) {
        var mh$ = g_ascii_strdown$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_strup$MH() {
        return RuntimeHelper.requireNonNull(constants$300.g_ascii_strup$MH,"g_ascii_strup");
    }
    public static MemoryAddress g_ascii_strup ( Addressable str,  long len) {
        var mh$ = g_ascii_strup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_str_is_ascii$MH() {
        return RuntimeHelper.requireNonNull(constants$300.g_str_is_ascii$MH,"g_str_is_ascii");
    }
    public static int g_str_is_ascii ( Addressable str) {
        var mh$ = g_str_is_ascii$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strcasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$301.g_strcasecmp$MH,"g_strcasecmp");
    }
    public static int g_strcasecmp ( Addressable s1,  Addressable s2) {
        var mh$ = g_strcasecmp$MH();
        try {
            return (int)mh$.invokeExact(s1, s2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strncasecmp$MH() {
        return RuntimeHelper.requireNonNull(constants$301.g_strncasecmp$MH,"g_strncasecmp");
    }
    public static int g_strncasecmp ( Addressable s1,  Addressable s2,  int n) {
        var mh$ = g_strncasecmp$MH();
        try {
            return (int)mh$.invokeExact(s1, s2, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strdown$MH() {
        return RuntimeHelper.requireNonNull(constants$301.g_strdown$MH,"g_strdown");
    }
    public static MemoryAddress g_strdown ( Addressable string) {
        var mh$ = g_strdown$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strup$MH() {
        return RuntimeHelper.requireNonNull(constants$301.g_strup$MH,"g_strup");
    }
    public static MemoryAddress g_strup ( Addressable string) {
        var mh$ = g_strup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strdup$MH() {
        return RuntimeHelper.requireNonNull(constants$301.g_strdup$MH,"g_strdup");
    }
    public static MemoryAddress g_strdup ( Addressable str) {
        var mh$ = g_strdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strdup_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$301.g_strdup_printf$MH,"g_strdup_printf");
    }
    public static MemoryAddress g_strdup_printf ( Addressable format, Object... x1) {
        var mh$ = g_strdup_printf$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strdup_vprintf$MH() {
        return RuntimeHelper.requireNonNull(constants$302.g_strdup_vprintf$MH,"g_strdup_vprintf");
    }
    public static MemoryAddress g_strdup_vprintf ( Addressable format,  Addressable args) {
        var mh$ = g_strdup_vprintf$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strndup$MH() {
        return RuntimeHelper.requireNonNull(constants$302.g_strndup$MH,"g_strndup");
    }
    public static MemoryAddress g_strndup ( Addressable str,  long n) {
        var mh$ = g_strndup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strnfill$MH() {
        return RuntimeHelper.requireNonNull(constants$302.g_strnfill$MH,"g_strnfill");
    }
    public static MemoryAddress g_strnfill ( long length,  byte fill_char) {
        var mh$ = g_strnfill$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(length, fill_char);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strconcat$MH() {
        return RuntimeHelper.requireNonNull(constants$302.g_strconcat$MH,"g_strconcat");
    }
    public static MemoryAddress g_strconcat ( Addressable string1, Object... x1) {
        var mh$ = g_strconcat$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string1, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strjoin$MH() {
        return RuntimeHelper.requireNonNull(constants$302.g_strjoin$MH,"g_strjoin");
    }
    public static MemoryAddress g_strjoin ( Addressable separator, Object... x1) {
        var mh$ = g_strjoin$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(separator, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strcompress$MH() {
        return RuntimeHelper.requireNonNull(constants$302.g_strcompress$MH,"g_strcompress");
    }
    public static MemoryAddress g_strcompress ( Addressable source) {
        var mh$ = g_strcompress$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(source);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strescape$MH() {
        return RuntimeHelper.requireNonNull(constants$303.g_strescape$MH,"g_strescape");
    }
    public static MemoryAddress g_strescape ( Addressable source,  Addressable exceptions) {
        var mh$ = g_strescape$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(source, exceptions);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_memdup$MH() {
        return RuntimeHelper.requireNonNull(constants$303.g_memdup$MH,"g_memdup");
    }
    public static MemoryAddress g_memdup ( Addressable mem,  int byte_size) {
        var mh$ = g_memdup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mem, byte_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_memdup2$MH() {
        return RuntimeHelper.requireNonNull(constants$303.g_memdup2$MH,"g_memdup2");
    }
    public static MemoryAddress g_memdup2 ( Addressable mem,  long byte_size) {
        var mh$ = g_memdup2$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mem, byte_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GStrv = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle g_strsplit$MH() {
        return RuntimeHelper.requireNonNull(constants$303.g_strsplit$MH,"g_strsplit");
    }
    public static MemoryAddress g_strsplit ( Addressable string,  Addressable delimiter,  int max_tokens) {
        var mh$ = g_strsplit$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string, delimiter, max_tokens);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strsplit_set$MH() {
        return RuntimeHelper.requireNonNull(constants$303.g_strsplit_set$MH,"g_strsplit_set");
    }
    public static MemoryAddress g_strsplit_set ( Addressable string,  Addressable delimiters,  int max_tokens) {
        var mh$ = g_strsplit_set$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string, delimiters, max_tokens);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strjoinv$MH() {
        return RuntimeHelper.requireNonNull(constants$303.g_strjoinv$MH,"g_strjoinv");
    }
    public static MemoryAddress g_strjoinv ( Addressable separator,  Addressable str_array) {
        var mh$ = g_strjoinv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(separator, str_array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strfreev$MH() {
        return RuntimeHelper.requireNonNull(constants$304.g_strfreev$MH,"g_strfreev");
    }
    public static void g_strfreev ( Addressable str_array) {
        var mh$ = g_strfreev$MH();
        try {
            mh$.invokeExact(str_array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strdupv$MH() {
        return RuntimeHelper.requireNonNull(constants$304.g_strdupv$MH,"g_strdupv");
    }
    public static MemoryAddress g_strdupv ( Addressable str_array) {
        var mh$ = g_strdupv$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str_array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_length$MH() {
        return RuntimeHelper.requireNonNull(constants$304.g_strv_length$MH,"g_strv_length");
    }
    public static int g_strv_length ( Addressable str_array) {
        var mh$ = g_strv_length$MH();
        try {
            return (int)mh$.invokeExact(str_array);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_stpcpy$MH() {
        return RuntimeHelper.requireNonNull(constants$304.g_stpcpy$MH,"g_stpcpy");
    }
    public static MemoryAddress g_stpcpy ( Addressable dest,  Addressable src) {
        var mh$ = g_stpcpy$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(dest, src);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_str_to_ascii$MH() {
        return RuntimeHelper.requireNonNull(constants$304.g_str_to_ascii$MH,"g_str_to_ascii");
    }
    public static MemoryAddress g_str_to_ascii ( Addressable str,  Addressable from_locale) {
        var mh$ = g_str_to_ascii$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(str, from_locale);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_str_tokenize_and_fold$MH() {
        return RuntimeHelper.requireNonNull(constants$304.g_str_tokenize_and_fold$MH,"g_str_tokenize_and_fold");
    }
    public static MemoryAddress g_str_tokenize_and_fold ( Addressable string,  Addressable translit_locale,  Addressable ascii_alternates) {
        var mh$ = g_str_tokenize_and_fold$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(string, translit_locale, ascii_alternates);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_str_match_string$MH() {
        return RuntimeHelper.requireNonNull(constants$305.g_str_match_string$MH,"g_str_match_string");
    }
    public static int g_str_match_string ( Addressable search_term,  Addressable potential_hit,  int accept_alternates) {
        var mh$ = g_str_match_string$MH();
        try {
            return (int)mh$.invokeExact(search_term, potential_hit, accept_alternates);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$305.g_strv_contains$MH,"g_strv_contains");
    }
    public static int g_strv_contains ( Addressable strv,  Addressable str) {
        var mh$ = g_strv_contains$MH();
        try {
            return (int)mh$.invokeExact(strv, str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$305.g_strv_equal$MH,"g_strv_equal");
    }
    public static int g_strv_equal ( Addressable strv1,  Addressable strv2) {
        var mh$ = g_strv_equal$MH();
        try {
            return (int)mh$.invokeExact(strv1, strv2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_NUMBER_PARSER_ERROR_INVALID() {
        return (int)0L;
    }
    public static int G_NUMBER_PARSER_ERROR_OUT_OF_BOUNDS() {
        return (int)1L;
    }
    public static MethodHandle g_number_parser_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$305.g_number_parser_error_quark$MH,"g_number_parser_error_quark");
    }
    public static int g_number_parser_error_quark () {
        var mh$ = g_number_parser_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_string_to_signed$MH() {
        return RuntimeHelper.requireNonNull(constants$305.g_ascii_string_to_signed$MH,"g_ascii_string_to_signed");
    }
    public static int g_ascii_string_to_signed ( Addressable str,  int base,  long min,  long max,  Addressable out_num,  Addressable error) {
        var mh$ = g_ascii_string_to_signed$MH();
        try {
            return (int)mh$.invokeExact(str, base, min, max, out_num, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ascii_string_to_unsigned$MH() {
        return RuntimeHelper.requireNonNull(constants$305.g_ascii_string_to_unsigned$MH,"g_ascii_string_to_unsigned");
    }
    public static int g_ascii_string_to_unsigned ( Addressable str,  int base,  long min,  long max,  Addressable out_num,  Addressable error) {
        var mh$ = g_ascii_string_to_unsigned$MH();
        try {
            return (int)mh$.invokeExact(str, base, min, max, out_num, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_new$MH() {
        return RuntimeHelper.requireNonNull(constants$306.g_string_chunk_new$MH,"g_string_chunk_new");
    }
    public static MemoryAddress g_string_chunk_new ( long size) {
        var mh$ = g_string_chunk_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_free$MH() {
        return RuntimeHelper.requireNonNull(constants$306.g_string_chunk_free$MH,"g_string_chunk_free");
    }
    public static void g_string_chunk_free ( Addressable chunk) {
        var mh$ = g_string_chunk_free$MH();
        try {
            mh$.invokeExact(chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$306.g_string_chunk_clear$MH,"g_string_chunk_clear");
    }
    public static void g_string_chunk_clear ( Addressable chunk) {
        var mh$ = g_string_chunk_clear$MH();
        try {
            mh$.invokeExact(chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$306.g_string_chunk_insert$MH,"g_string_chunk_insert");
    }
    public static MemoryAddress g_string_chunk_insert ( Addressable chunk,  Addressable string) {
        var mh$ = g_string_chunk_insert$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(chunk, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_insert_len$MH() {
        return RuntimeHelper.requireNonNull(constants$306.g_string_chunk_insert_len$MH,"g_string_chunk_insert_len");
    }
    public static MemoryAddress g_string_chunk_insert_len ( Addressable chunk,  Addressable string,  long len) {
        var mh$ = g_string_chunk_insert_len$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(chunk, string, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_insert_const$MH() {
        return RuntimeHelper.requireNonNull(constants$306.g_string_chunk_insert_const$MH,"g_string_chunk_insert_const");
    }
    public static MemoryAddress g_string_chunk_insert_const ( Addressable chunk,  Addressable string) {
        var mh$ = g_string_chunk_insert_const$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(chunk, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_new$MH() {
        return RuntimeHelper.requireNonNull(constants$307.g_strv_builder_new$MH,"g_strv_builder_new");
    }
    public static MemoryAddress g_strv_builder_new () {
        var mh$ = g_strv_builder_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$307.g_strv_builder_unref$MH,"g_strv_builder_unref");
    }
    public static void g_strv_builder_unref ( Addressable builder) {
        var mh$ = g_strv_builder_unref$MH();
        try {
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$307.g_strv_builder_ref$MH,"g_strv_builder_ref");
    }
    public static MemoryAddress g_strv_builder_ref ( Addressable builder) {
        var mh$ = g_strv_builder_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_add$MH() {
        return RuntimeHelper.requireNonNull(constants$307.g_strv_builder_add$MH,"g_strv_builder_add");
    }
    public static void g_strv_builder_add ( Addressable builder,  Addressable value) {
        var mh$ = g_strv_builder_add$MH();
        try {
            mh$.invokeExact(builder, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_addv$MH() {
        return RuntimeHelper.requireNonNull(constants$307.g_strv_builder_addv$MH,"g_strv_builder_addv");
    }
    public static void g_strv_builder_addv ( Addressable builder,  Addressable value) {
        var mh$ = g_strv_builder_addv$MH();
        try {
            mh$.invokeExact(builder, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_add_many$MH() {
        return RuntimeHelper.requireNonNull(constants$307.g_strv_builder_add_many$MH,"g_strv_builder_add_many");
    }
    public static void g_strv_builder_add_many ( Addressable builder, Object... x1) {
        var mh$ = g_strv_builder_add_many$MH();
        try {
            mh$.invokeExact(builder, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_end$MH() {
        return RuntimeHelper.requireNonNull(constants$308.g_strv_builder_end$MH,"g_strv_builder_end");
    }
    public static MemoryAddress g_strv_builder_end ( Addressable builder) {
        var mh$ = g_strv_builder_end$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __errno_location$MH() {
        return RuntimeHelper.requireNonNull(constants$308.__errno_location$MH,"__errno_location");
    }
    public static MemoryAddress __errno_location () {
        var mh$ = __errno_location$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strcmp0$MH() {
        return RuntimeHelper.requireNonNull(constants$309.g_strcmp0$MH,"g_strcmp0");
    }
    public static int g_strcmp0 ( Addressable str1,  Addressable str2) {
        var mh$ = g_strcmp0$MH();
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_minimized_result$MH() {
        return RuntimeHelper.requireNonNull(constants$309.g_test_minimized_result$MH,"g_test_minimized_result");
    }
    public static void g_test_minimized_result ( double minimized_quantity,  Addressable format, Object... x2) {
        var mh$ = g_test_minimized_result$MH();
        try {
            mh$.invokeExact(minimized_quantity, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_maximized_result$MH() {
        return RuntimeHelper.requireNonNull(constants$309.g_test_maximized_result$MH,"g_test_maximized_result");
    }
    public static void g_test_maximized_result ( double maximized_quantity,  Addressable format, Object... x2) {
        var mh$ = g_test_maximized_result$MH();
        try {
            mh$.invokeExact(maximized_quantity, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_init$MH() {
        return RuntimeHelper.requireNonNull(constants$309.g_test_init$MH,"g_test_init");
    }
    public static void g_test_init ( Addressable argc,  Addressable argv, Object... x2) {
        var mh$ = g_test_init$MH();
        try {
            mh$.invokeExact(argc, argv, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_subprocess$MH() {
        return RuntimeHelper.requireNonNull(constants$310.g_test_subprocess$MH,"g_test_subprocess");
    }
    public static int g_test_subprocess () {
        var mh$ = g_test_subprocess$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_run$MH() {
        return RuntimeHelper.requireNonNull(constants$310.g_test_run$MH,"g_test_run");
    }
    public static int g_test_run () {
        var mh$ = g_test_run$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_add_func$MH() {
        return RuntimeHelper.requireNonNull(constants$310.g_test_add_func$MH,"g_test_add_func");
    }
    public static void g_test_add_func ( Addressable testpath,  Addressable test_func) {
        var mh$ = g_test_add_func$MH();
        try {
            mh$.invokeExact(testpath, test_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_add_data_func$MH() {
        return RuntimeHelper.requireNonNull(constants$310.g_test_add_data_func$MH,"g_test_add_data_func");
    }
    public static void g_test_add_data_func ( Addressable testpath,  Addressable test_data,  Addressable test_func) {
        var mh$ = g_test_add_data_func$MH();
        try {
            mh$.invokeExact(testpath, test_data, test_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_add_data_func_full$MH() {
        return RuntimeHelper.requireNonNull(constants$310.g_test_add_data_func_full$MH,"g_test_add_data_func_full");
    }
    public static void g_test_add_data_func_full ( Addressable testpath,  Addressable test_data,  Addressable test_func,  Addressable data_free_func) {
        var mh$ = g_test_add_data_func_full$MH();
        try {
            mh$.invokeExact(testpath, test_data, test_func, data_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_get_path$MH() {
        return RuntimeHelper.requireNonNull(constants$310.g_test_get_path$MH,"g_test_get_path");
    }
    public static MemoryAddress g_test_get_path () {
        var mh$ = g_test_get_path$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_fail$MH() {
        return RuntimeHelper.requireNonNull(constants$311.g_test_fail$MH,"g_test_fail");
    }
    public static void g_test_fail () {
        var mh$ = g_test_fail$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_fail_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$311.g_test_fail_printf$MH,"g_test_fail_printf");
    }
    public static void g_test_fail_printf ( Addressable format, Object... x1) {
        var mh$ = g_test_fail_printf$MH();
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_incomplete$MH() {
        return RuntimeHelper.requireNonNull(constants$311.g_test_incomplete$MH,"g_test_incomplete");
    }
    public static void g_test_incomplete ( Addressable msg) {
        var mh$ = g_test_incomplete$MH();
        try {
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_incomplete_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$311.g_test_incomplete_printf$MH,"g_test_incomplete_printf");
    }
    public static void g_test_incomplete_printf ( Addressable format, Object... x1) {
        var mh$ = g_test_incomplete_printf$MH();
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_skip$MH() {
        return RuntimeHelper.requireNonNull(constants$311.g_test_skip$MH,"g_test_skip");
    }
    public static void g_test_skip ( Addressable msg) {
        var mh$ = g_test_skip$MH();
        try {
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_skip_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$311.g_test_skip_printf$MH,"g_test_skip_printf");
    }
    public static void g_test_skip_printf ( Addressable format, Object... x1) {
        var mh$ = g_test_skip_printf$MH();
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_failed$MH() {
        return RuntimeHelper.requireNonNull(constants$312.g_test_failed$MH,"g_test_failed");
    }
    public static int g_test_failed () {
        var mh$ = g_test_failed$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_set_nonfatal_assertions$MH() {
        return RuntimeHelper.requireNonNull(constants$312.g_test_set_nonfatal_assertions$MH,"g_test_set_nonfatal_assertions");
    }
    public static void g_test_set_nonfatal_assertions () {
        var mh$ = g_test_set_nonfatal_assertions$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_message$MH() {
        return RuntimeHelper.requireNonNull(constants$312.g_test_message$MH,"g_test_message");
    }
    public static void g_test_message ( Addressable format, Object... x1) {
        var mh$ = g_test_message$MH();
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_bug_base$MH() {
        return RuntimeHelper.requireNonNull(constants$312.g_test_bug_base$MH,"g_test_bug_base");
    }
    public static void g_test_bug_base ( Addressable uri_pattern) {
        var mh$ = g_test_bug_base$MH();
        try {
            mh$.invokeExact(uri_pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_bug$MH() {
        return RuntimeHelper.requireNonNull(constants$312.g_test_bug$MH,"g_test_bug");
    }
    public static void g_test_bug ( Addressable bug_uri_snippet) {
        var mh$ = g_test_bug$MH();
        try {
            mh$.invokeExact(bug_uri_snippet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_summary$MH() {
        return RuntimeHelper.requireNonNull(constants$312.g_test_summary$MH,"g_test_summary");
    }
    public static void g_test_summary ( Addressable summary) {
        var mh$ = g_test_summary$MH();
        try {
            mh$.invokeExact(summary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_timer_start$MH() {
        return RuntimeHelper.requireNonNull(constants$313.g_test_timer_start$MH,"g_test_timer_start");
    }
    public static void g_test_timer_start () {
        var mh$ = g_test_timer_start$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_timer_elapsed$MH() {
        return RuntimeHelper.requireNonNull(constants$313.g_test_timer_elapsed$MH,"g_test_timer_elapsed");
    }
    public static double g_test_timer_elapsed () {
        var mh$ = g_test_timer_elapsed$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_timer_last$MH() {
        return RuntimeHelper.requireNonNull(constants$313.g_test_timer_last$MH,"g_test_timer_last");
    }
    public static double g_test_timer_last () {
        var mh$ = g_test_timer_last$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_queue_free$MH() {
        return RuntimeHelper.requireNonNull(constants$313.g_test_queue_free$MH,"g_test_queue_free");
    }
    public static void g_test_queue_free ( Addressable gfree_pointer) {
        var mh$ = g_test_queue_free$MH();
        try {
            mh$.invokeExact(gfree_pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_queue_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$313.g_test_queue_destroy$MH,"g_test_queue_destroy");
    }
    public static void g_test_queue_destroy ( Addressable destroy_func,  Addressable destroy_data) {
        var mh$ = g_test_queue_destroy$MH();
        try {
            mh$.invokeExact(destroy_func, destroy_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_TEST_TRAP_SILENCE_STDOUT() {
        return (int)128L;
    }
    public static int G_TEST_TRAP_SILENCE_STDERR() {
        return (int)256L;
    }
    public static int G_TEST_TRAP_INHERIT_STDIN() {
        return (int)512L;
    }
    public static MethodHandle g_test_trap_fork$MH() {
        return RuntimeHelper.requireNonNull(constants$313.g_test_trap_fork$MH,"g_test_trap_fork");
    }
    public static int g_test_trap_fork ( long usec_timeout,  int test_trap_flags) {
        var mh$ = g_test_trap_fork$MH();
        try {
            return (int)mh$.invokeExact(usec_timeout, test_trap_flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_TEST_SUBPROCESS_INHERIT_STDIN() {
        return (int)1L;
    }
    public static int G_TEST_SUBPROCESS_INHERIT_STDOUT() {
        return (int)2L;
    }
    public static int G_TEST_SUBPROCESS_INHERIT_STDERR() {
        return (int)4L;
    }
    public static MethodHandle g_test_trap_subprocess$MH() {
        return RuntimeHelper.requireNonNull(constants$314.g_test_trap_subprocess$MH,"g_test_trap_subprocess");
    }
    public static void g_test_trap_subprocess ( Addressable test_path,  long usec_timeout,  int test_flags) {
        var mh$ = g_test_trap_subprocess$MH();
        try {
            mh$.invokeExact(test_path, usec_timeout, test_flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_trap_has_passed$MH() {
        return RuntimeHelper.requireNonNull(constants$314.g_test_trap_has_passed$MH,"g_test_trap_has_passed");
    }
    public static int g_test_trap_has_passed () {
        var mh$ = g_test_trap_has_passed$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_trap_reached_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$314.g_test_trap_reached_timeout$MH,"g_test_trap_reached_timeout");
    }
    public static int g_test_trap_reached_timeout () {
        var mh$ = g_test_trap_reached_timeout$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_rand_int$MH() {
        return RuntimeHelper.requireNonNull(constants$314.g_test_rand_int$MH,"g_test_rand_int");
    }
    public static int g_test_rand_int () {
        var mh$ = g_test_rand_int$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_rand_int_range$MH() {
        return RuntimeHelper.requireNonNull(constants$314.g_test_rand_int_range$MH,"g_test_rand_int_range");
    }
    public static int g_test_rand_int_range ( int begin,  int end) {
        var mh$ = g_test_rand_int_range$MH();
        try {
            return (int)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_rand_double$MH() {
        return RuntimeHelper.requireNonNull(constants$314.g_test_rand_double$MH,"g_test_rand_double");
    }
    public static double g_test_rand_double () {
        var mh$ = g_test_rand_double$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_rand_double_range$MH() {
        return RuntimeHelper.requireNonNull(constants$315.g_test_rand_double_range$MH,"g_test_rand_double_range");
    }
    public static double g_test_rand_double_range ( double range_start,  double range_end) {
        var mh$ = g_test_rand_double_range$MH();
        try {
            return (double)mh$.invokeExact(range_start, range_end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_create_case$MH() {
        return RuntimeHelper.requireNonNull(constants$315.g_test_create_case$MH,"g_test_create_case");
    }
    public static MemoryAddress g_test_create_case ( Addressable test_name,  long data_size,  Addressable test_data,  Addressable data_setup,  Addressable data_test,  Addressable data_teardown) {
        var mh$ = g_test_create_case$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(test_name, data_size, test_data, data_setup, data_test, data_teardown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_create_suite$MH() {
        return RuntimeHelper.requireNonNull(constants$315.g_test_create_suite$MH,"g_test_create_suite");
    }
    public static MemoryAddress g_test_create_suite ( Addressable suite_name) {
        var mh$ = g_test_create_suite$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(suite_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_get_root$MH() {
        return RuntimeHelper.requireNonNull(constants$315.g_test_get_root$MH,"g_test_get_root");
    }
    public static MemoryAddress g_test_get_root () {
        var mh$ = g_test_get_root$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_suite_add$MH() {
        return RuntimeHelper.requireNonNull(constants$315.g_test_suite_add$MH,"g_test_suite_add");
    }
    public static void g_test_suite_add ( Addressable suite,  Addressable test_case) {
        var mh$ = g_test_suite_add$MH();
        try {
            mh$.invokeExact(suite, test_case);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_suite_add_suite$MH() {
        return RuntimeHelper.requireNonNull(constants$315.g_test_suite_add_suite$MH,"g_test_suite_add_suite");
    }
    public static void g_test_suite_add_suite ( Addressable suite,  Addressable nestedsuite) {
        var mh$ = g_test_suite_add_suite$MH();
        try {
            mh$.invokeExact(suite, nestedsuite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_run_suite$MH() {
        return RuntimeHelper.requireNonNull(constants$316.g_test_run_suite$MH,"g_test_run_suite");
    }
    public static int g_test_run_suite ( Addressable suite) {
        var mh$ = g_test_run_suite$MH();
        try {
            return (int)mh$.invokeExact(suite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_case_free$MH() {
        return RuntimeHelper.requireNonNull(constants$316.g_test_case_free$MH,"g_test_case_free");
    }
    public static void g_test_case_free ( Addressable test_case) {
        var mh$ = g_test_case_free$MH();
        try {
            mh$.invokeExact(test_case);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_suite_free$MH() {
        return RuntimeHelper.requireNonNull(constants$316.g_test_suite_free$MH,"g_test_suite_free");
    }
    public static void g_test_suite_free ( Addressable suite) {
        var mh$ = g_test_suite_free$MH();
        try {
            mh$.invokeExact(suite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_trap_assertions$MH() {
        return RuntimeHelper.requireNonNull(constants$316.g_test_trap_assertions$MH,"g_test_trap_assertions");
    }
    public static void g_test_trap_assertions ( Addressable domain,  Addressable file,  int line,  Addressable func,  long assertion_flags,  Addressable pattern) {
        var mh$ = g_test_trap_assertions$MH();
        try {
            mh$.invokeExact(domain, file, line, func, assertion_flags, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assertion_message$MH() {
        return RuntimeHelper.requireNonNull(constants$316.g_assertion_message$MH,"g_assertion_message");
    }
    public static void g_assertion_message ( Addressable domain,  Addressable file,  int line,  Addressable func,  Addressable message) {
        var mh$ = g_assertion_message$MH();
        try {
            mh$.invokeExact(domain, file, line, func, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assertion_message_expr$MH() {
        return RuntimeHelper.requireNonNull(constants$316.g_assertion_message_expr$MH,"g_assertion_message_expr");
    }
    public static void g_assertion_message_expr ( Addressable domain,  Addressable file,  int line,  Addressable func,  Addressable expr) {
        var mh$ = g_assertion_message_expr$MH();
        try {
            mh$.invokeExact(domain, file, line, func, expr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assertion_message_cmpstr$MH() {
        return RuntimeHelper.requireNonNull(constants$317.g_assertion_message_cmpstr$MH,"g_assertion_message_cmpstr");
    }
    public static void g_assertion_message_cmpstr ( Addressable domain,  Addressable file,  int line,  Addressable func,  Addressable expr,  Addressable arg1,  Addressable cmp,  Addressable arg2) {
        var mh$ = g_assertion_message_cmpstr$MH();
        try {
            mh$.invokeExact(domain, file, line, func, expr, arg1, cmp, arg2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assertion_message_cmpstrv$MH() {
        return RuntimeHelper.requireNonNull(constants$317.g_assertion_message_cmpstrv$MH,"g_assertion_message_cmpstrv");
    }
    public static void g_assertion_message_cmpstrv ( Addressable domain,  Addressable file,  int line,  Addressable func,  Addressable expr,  Addressable arg1,  Addressable arg2,  long first_wrong_idx) {
        var mh$ = g_assertion_message_cmpstrv$MH();
        try {
            mh$.invokeExact(domain, file, line, func, expr, arg1, arg2, first_wrong_idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assertion_message_error$MH() {
        return RuntimeHelper.requireNonNull(constants$317.g_assertion_message_error$MH,"g_assertion_message_error");
    }
    public static void g_assertion_message_error ( Addressable domain,  Addressable file,  int line,  Addressable func,  Addressable expr,  Addressable error,  int error_domain,  int error_code) {
        var mh$ = g_assertion_message_error$MH();
        try {
            mh$.invokeExact(domain, file, line, func, expr, error, error_domain, error_code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_add_vtable$MH() {
        return RuntimeHelper.requireNonNull(constants$317.g_test_add_vtable$MH,"g_test_add_vtable");
    }
    public static void g_test_add_vtable ( Addressable testpath,  long data_size,  Addressable test_data,  Addressable data_setup,  Addressable data_test,  Addressable data_teardown) {
        var mh$ = g_test_add_vtable$MH();
        try {
            mh$.invokeExact(testpath, data_size, test_data, data_setup, data_test, data_teardown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout g_test_config_vars$LAYOUT() {
        return constants$317.g_test_config_vars$LAYOUT;
    }
    public static VarHandle g_test_config_vars$VH() {
        return constants$317.g_test_config_vars$VH;
    }
    public static MemorySegment g_test_config_vars$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$317.g_test_config_vars$SEGMENT,"g_test_config_vars");
    }
    public static MemoryAddress g_test_config_vars$get() {
        return (java.lang.foreign.MemoryAddress) constants$317.g_test_config_vars$VH.get(RuntimeHelper.requireNonNull(constants$317.g_test_config_vars$SEGMENT, "g_test_config_vars"));
    }
    public static void g_test_config_vars$set( MemoryAddress x) {
        constants$317.g_test_config_vars$VH.set(RuntimeHelper.requireNonNull(constants$317.g_test_config_vars$SEGMENT, "g_test_config_vars"), x);
    }
    public static int G_TEST_RUN_SUCCESS() {
        return (int)0L;
    }
    public static int G_TEST_RUN_SKIPPED() {
        return (int)1L;
    }
    public static int G_TEST_RUN_FAILURE() {
        return (int)2L;
    }
    public static int G_TEST_RUN_INCOMPLETE() {
        return (int)3L;
    }
    public static int G_TEST_LOG_NONE() {
        return (int)0L;
    }
    public static int G_TEST_LOG_ERROR() {
        return (int)1L;
    }
    public static int G_TEST_LOG_START_BINARY() {
        return (int)2L;
    }
    public static int G_TEST_LOG_LIST_CASE() {
        return (int)3L;
    }
    public static int G_TEST_LOG_SKIP_CASE() {
        return (int)4L;
    }
    public static int G_TEST_LOG_START_CASE() {
        return (int)5L;
    }
    public static int G_TEST_LOG_STOP_CASE() {
        return (int)6L;
    }
    public static int G_TEST_LOG_MIN_RESULT() {
        return (int)7L;
    }
    public static int G_TEST_LOG_MAX_RESULT() {
        return (int)8L;
    }
    public static int G_TEST_LOG_MESSAGE() {
        return (int)9L;
    }
    public static int G_TEST_LOG_START_SUITE() {
        return (int)10L;
    }
    public static int G_TEST_LOG_STOP_SUITE() {
        return (int)11L;
    }
    public static MethodHandle g_test_log_type_name$MH() {
        return RuntimeHelper.requireNonNull(constants$317.g_test_log_type_name$MH,"g_test_log_type_name");
    }
    public static MemoryAddress g_test_log_type_name ( int log_type) {
        var mh$ = g_test_log_type_name$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(log_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_buffer_new$MH() {
        return RuntimeHelper.requireNonNull(constants$318.g_test_log_buffer_new$MH,"g_test_log_buffer_new");
    }
    public static MemoryAddress g_test_log_buffer_new () {
        var mh$ = g_test_log_buffer_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_buffer_free$MH() {
        return RuntimeHelper.requireNonNull(constants$318.g_test_log_buffer_free$MH,"g_test_log_buffer_free");
    }
    public static void g_test_log_buffer_free ( Addressable tbuffer) {
        var mh$ = g_test_log_buffer_free$MH();
        try {
            mh$.invokeExact(tbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_buffer_push$MH() {
        return RuntimeHelper.requireNonNull(constants$318.g_test_log_buffer_push$MH,"g_test_log_buffer_push");
    }
    public static void g_test_log_buffer_push ( Addressable tbuffer,  int n_bytes,  Addressable bytes) {
        var mh$ = g_test_log_buffer_push$MH();
        try {
            mh$.invokeExact(tbuffer, n_bytes, bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_buffer_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$318.g_test_log_buffer_pop$MH,"g_test_log_buffer_pop");
    }
    public static MemoryAddress g_test_log_buffer_pop ( Addressable tbuffer) {
        var mh$ = g_test_log_buffer_pop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_msg_free$MH() {
        return RuntimeHelper.requireNonNull(constants$318.g_test_log_msg_free$MH,"g_test_log_msg_free");
    }
    public static void g_test_log_msg_free ( Addressable tmsg) {
        var mh$ = g_test_log_msg_free$MH();
        try {
            mh$.invokeExact(tmsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_set_fatal_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$319.g_test_log_set_fatal_handler$MH,"g_test_log_set_fatal_handler");
    }
    public static void g_test_log_set_fatal_handler ( Addressable log_func,  Addressable user_data) {
        var mh$ = g_test_log_set_fatal_handler$MH();
        try {
            mh$.invokeExact(log_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_expect_message$MH() {
        return RuntimeHelper.requireNonNull(constants$319.g_test_expect_message$MH,"g_test_expect_message");
    }
    public static void g_test_expect_message ( Addressable log_domain,  int log_level,  Addressable pattern) {
        var mh$ = g_test_expect_message$MH();
        try {
            mh$.invokeExact(log_domain, log_level, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_assert_expected_messages_internal$MH() {
        return RuntimeHelper.requireNonNull(constants$319.g_test_assert_expected_messages_internal$MH,"g_test_assert_expected_messages_internal");
    }
    public static void g_test_assert_expected_messages_internal ( Addressable domain,  Addressable file,  int line,  Addressable func) {
        var mh$ = g_test_assert_expected_messages_internal$MH();
        try {
            mh$.invokeExact(domain, file, line, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_TEST_DIST() {
        return (int)0L;
    }
    public static int G_TEST_BUILT() {
        return (int)1L;
    }
    public static MethodHandle g_test_build_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$319.g_test_build_filename$MH,"g_test_build_filename");
    }
    public static MemoryAddress g_test_build_filename ( int file_type,  Addressable first_path, Object... x2) {
        var mh$ = g_test_build_filename$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(file_type, first_path, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_get_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$319.g_test_get_dir$MH,"g_test_get_dir");
    }
    public static MemoryAddress g_test_get_dir ( int file_type) {
        var mh$ = g_test_get_dir$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(file_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_get_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$320.g_test_get_filename$MH,"g_test_get_filename");
    }
    public static MemoryAddress g_test_get_filename ( int file_type,  Addressable first_path, Object... x2) {
        var mh$ = g_test_get_filename$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(file_type, first_path, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_new$MH() {
        return RuntimeHelper.requireNonNull(constants$320.g_thread_pool_new$MH,"g_thread_pool_new");
    }
    public static MemoryAddress g_thread_pool_new ( Addressable func,  Addressable user_data,  int max_threads,  int exclusive,  Addressable error) {
        var mh$ = g_thread_pool_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(func, user_data, max_threads, exclusive, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$320.g_thread_pool_new_full$MH,"g_thread_pool_new_full");
    }
    public static MemoryAddress g_thread_pool_new_full ( Addressable func,  Addressable user_data,  Addressable item_free_func,  int max_threads,  int exclusive,  Addressable error) {
        var mh$ = g_thread_pool_new_full$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(func, user_data, item_free_func, max_threads, exclusive, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_free$MH() {
        return RuntimeHelper.requireNonNull(constants$320.g_thread_pool_free$MH,"g_thread_pool_free");
    }
    public static void g_thread_pool_free ( Addressable pool,  int immediate,  int wait_) {
        var mh$ = g_thread_pool_free$MH();
        try {
            mh$.invokeExact(pool, immediate, wait_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_push$MH() {
        return RuntimeHelper.requireNonNull(constants$320.g_thread_pool_push$MH,"g_thread_pool_push");
    }
    public static int g_thread_pool_push ( Addressable pool,  Addressable data,  Addressable error) {
        var mh$ = g_thread_pool_push$MH();
        try {
            return (int)mh$.invokeExact(pool, data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_unprocessed$MH() {
        return RuntimeHelper.requireNonNull(constants$320.g_thread_pool_unprocessed$MH,"g_thread_pool_unprocessed");
    }
    public static int g_thread_pool_unprocessed ( Addressable pool) {
        var mh$ = g_thread_pool_unprocessed$MH();
        try {
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_set_sort_function$MH() {
        return RuntimeHelper.requireNonNull(constants$321.g_thread_pool_set_sort_function$MH,"g_thread_pool_set_sort_function");
    }
    public static void g_thread_pool_set_sort_function ( Addressable pool,  Addressable func,  Addressable user_data) {
        var mh$ = g_thread_pool_set_sort_function$MH();
        try {
            mh$.invokeExact(pool, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_move_to_front$MH() {
        return RuntimeHelper.requireNonNull(constants$321.g_thread_pool_move_to_front$MH,"g_thread_pool_move_to_front");
    }
    public static int g_thread_pool_move_to_front ( Addressable pool,  Addressable data) {
        var mh$ = g_thread_pool_move_to_front$MH();
        try {
            return (int)mh$.invokeExact(pool, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_set_max_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$321.g_thread_pool_set_max_threads$MH,"g_thread_pool_set_max_threads");
    }
    public static int g_thread_pool_set_max_threads ( Addressable pool,  int max_threads,  Addressable error) {
        var mh$ = g_thread_pool_set_max_threads$MH();
        try {
            return (int)mh$.invokeExact(pool, max_threads, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_get_max_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$321.g_thread_pool_get_max_threads$MH,"g_thread_pool_get_max_threads");
    }
    public static int g_thread_pool_get_max_threads ( Addressable pool) {
        var mh$ = g_thread_pool_get_max_threads$MH();
        try {
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_get_num_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$321.g_thread_pool_get_num_threads$MH,"g_thread_pool_get_num_threads");
    }
    public static int g_thread_pool_get_num_threads ( Addressable pool) {
        var mh$ = g_thread_pool_get_num_threads$MH();
        try {
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_set_max_unused_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$321.g_thread_pool_set_max_unused_threads$MH,"g_thread_pool_set_max_unused_threads");
    }
    public static void g_thread_pool_set_max_unused_threads ( int max_threads) {
        var mh$ = g_thread_pool_set_max_unused_threads$MH();
        try {
            mh$.invokeExact(max_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_get_max_unused_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$322.g_thread_pool_get_max_unused_threads$MH,"g_thread_pool_get_max_unused_threads");
    }
    public static int g_thread_pool_get_max_unused_threads () {
        var mh$ = g_thread_pool_get_max_unused_threads$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_get_num_unused_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$322.g_thread_pool_get_num_unused_threads$MH,"g_thread_pool_get_num_unused_threads");
    }
    public static int g_thread_pool_get_num_unused_threads () {
        var mh$ = g_thread_pool_get_num_unused_threads$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_stop_unused_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$322.g_thread_pool_stop_unused_threads$MH,"g_thread_pool_stop_unused_threads");
    }
    public static void g_thread_pool_stop_unused_threads () {
        var mh$ = g_thread_pool_stop_unused_threads$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_set_max_idle_time$MH() {
        return RuntimeHelper.requireNonNull(constants$322.g_thread_pool_set_max_idle_time$MH,"g_thread_pool_set_max_idle_time");
    }
    public static void g_thread_pool_set_max_idle_time ( int interval) {
        var mh$ = g_thread_pool_set_max_idle_time$MH();
        try {
            mh$.invokeExact(interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_get_max_idle_time$MH() {
        return RuntimeHelper.requireNonNull(constants$322.g_thread_pool_get_max_idle_time$MH,"g_thread_pool_get_max_idle_time");
    }
    public static int g_thread_pool_get_max_idle_time () {
        var mh$ = g_thread_pool_get_max_idle_time$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_new$MH() {
        return RuntimeHelper.requireNonNull(constants$322.g_timer_new$MH,"g_timer_new");
    }
    public static MemoryAddress g_timer_new () {
        var mh$ = g_timer_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$323.g_timer_destroy$MH,"g_timer_destroy");
    }
    public static void g_timer_destroy ( Addressable timer) {
        var mh$ = g_timer_destroy$MH();
        try {
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_start$MH() {
        return RuntimeHelper.requireNonNull(constants$323.g_timer_start$MH,"g_timer_start");
    }
    public static void g_timer_start ( Addressable timer) {
        var mh$ = g_timer_start$MH();
        try {
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_stop$MH() {
        return RuntimeHelper.requireNonNull(constants$323.g_timer_stop$MH,"g_timer_stop");
    }
    public static void g_timer_stop ( Addressable timer) {
        var mh$ = g_timer_stop$MH();
        try {
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$323.g_timer_reset$MH,"g_timer_reset");
    }
    public static void g_timer_reset ( Addressable timer) {
        var mh$ = g_timer_reset$MH();
        try {
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_continue$MH() {
        return RuntimeHelper.requireNonNull(constants$323.g_timer_continue$MH,"g_timer_continue");
    }
    public static void g_timer_continue ( Addressable timer) {
        var mh$ = g_timer_continue$MH();
        try {
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_elapsed$MH() {
        return RuntimeHelper.requireNonNull(constants$323.g_timer_elapsed$MH,"g_timer_elapsed");
    }
    public static double g_timer_elapsed ( Addressable timer,  Addressable microseconds) {
        var mh$ = g_timer_elapsed$MH();
        try {
            return (double)mh$.invokeExact(timer, microseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_is_active$MH() {
        return RuntimeHelper.requireNonNull(constants$324.g_timer_is_active$MH,"g_timer_is_active");
    }
    public static int g_timer_is_active ( Addressable timer) {
        var mh$ = g_timer_is_active$MH();
        try {
            return (int)mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_usleep$MH() {
        return RuntimeHelper.requireNonNull(constants$324.g_usleep$MH,"g_usleep");
    }
    public static void g_usleep ( long microseconds) {
        var mh$ = g_usleep$MH();
        try {
            mh$.invokeExact(microseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_val_add$MH() {
        return RuntimeHelper.requireNonNull(constants$324.g_time_val_add$MH,"g_time_val_add");
    }
    public static void g_time_val_add ( Addressable time_,  long microseconds) {
        var mh$ = g_time_val_add$MH();
        try {
            mh$.invokeExact(time_, microseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_val_from_iso8601$MH() {
        return RuntimeHelper.requireNonNull(constants$324.g_time_val_from_iso8601$MH,"g_time_val_from_iso8601");
    }
    public static int g_time_val_from_iso8601 ( Addressable iso_date,  Addressable time_) {
        var mh$ = g_time_val_from_iso8601$MH();
        try {
            return (int)mh$.invokeExact(iso_date, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_val_to_iso8601$MH() {
        return RuntimeHelper.requireNonNull(constants$324.g_time_val_to_iso8601$MH,"g_time_val_to_iso8601");
    }
    public static MemoryAddress g_time_val_to_iso8601 ( Addressable time_) {
        var mh$ = g_time_val_to_iso8601$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_trash_stack_push$MH() {
        return RuntimeHelper.requireNonNull(constants$324.g_trash_stack_push$MH,"g_trash_stack_push");
    }
    public static void g_trash_stack_push ( Addressable stack_p,  Addressable data_p) {
        var mh$ = g_trash_stack_push$MH();
        try {
            mh$.invokeExact(stack_p, data_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_trash_stack_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$325.g_trash_stack_pop$MH,"g_trash_stack_pop");
    }
    public static MemoryAddress g_trash_stack_pop ( Addressable stack_p) {
        var mh$ = g_trash_stack_pop$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(stack_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_trash_stack_peek$MH() {
        return RuntimeHelper.requireNonNull(constants$325.g_trash_stack_peek$MH,"g_trash_stack_peek");
    }
    public static MemoryAddress g_trash_stack_peek ( Addressable stack_p) {
        var mh$ = g_trash_stack_peek$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(stack_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_trash_stack_height$MH() {
        return RuntimeHelper.requireNonNull(constants$325.g_trash_stack_height$MH,"g_trash_stack_height");
    }
    public static int g_trash_stack_height ( Addressable stack_p) {
        var mh$ = g_trash_stack_height$MH();
        try {
            return (int)mh$.invokeExact(stack_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_new$MH() {
        return RuntimeHelper.requireNonNull(constants$326.g_tree_new$MH,"g_tree_new");
    }
    public static MemoryAddress g_tree_new ( Addressable key_compare_func) {
        var mh$ = g_tree_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(key_compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_new_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$326.g_tree_new_with_data$MH,"g_tree_new_with_data");
    }
    public static MemoryAddress g_tree_new_with_data ( Addressable key_compare_func,  Addressable key_compare_data) {
        var mh$ = g_tree_new_with_data$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(key_compare_func, key_compare_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$326.g_tree_new_full$MH,"g_tree_new_full");
    }
    public static MemoryAddress g_tree_new_full ( Addressable key_compare_func,  Addressable key_compare_data,  Addressable key_destroy_func,  Addressable value_destroy_func) {
        var mh$ = g_tree_new_full$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(key_compare_func, key_compare_data, key_destroy_func, value_destroy_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_first$MH() {
        return RuntimeHelper.requireNonNull(constants$326.g_tree_node_first$MH,"g_tree_node_first");
    }
    public static MemoryAddress g_tree_node_first ( Addressable tree) {
        var mh$ = g_tree_node_first$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_last$MH() {
        return RuntimeHelper.requireNonNull(constants$326.g_tree_node_last$MH,"g_tree_node_last");
    }
    public static MemoryAddress g_tree_node_last ( Addressable tree) {
        var mh$ = g_tree_node_last$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_previous$MH() {
        return RuntimeHelper.requireNonNull(constants$327.g_tree_node_previous$MH,"g_tree_node_previous");
    }
    public static MemoryAddress g_tree_node_previous ( Addressable node) {
        var mh$ = g_tree_node_previous$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_next$MH() {
        return RuntimeHelper.requireNonNull(constants$327.g_tree_node_next$MH,"g_tree_node_next");
    }
    public static MemoryAddress g_tree_node_next ( Addressable node) {
        var mh$ = g_tree_node_next$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$327.g_tree_ref$MH,"g_tree_ref");
    }
    public static MemoryAddress g_tree_ref ( Addressable tree) {
        var mh$ = g_tree_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$327.g_tree_unref$MH,"g_tree_unref");
    }
    public static void g_tree_unref ( Addressable tree) {
        var mh$ = g_tree_unref$MH();
        try {
            mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$327.g_tree_destroy$MH,"g_tree_destroy");
    }
    public static void g_tree_destroy ( Addressable tree) {
        var mh$ = g_tree_destroy$MH();
        try {
            mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_insert_node$MH() {
        return RuntimeHelper.requireNonNull(constants$327.g_tree_insert_node$MH,"g_tree_insert_node");
    }
    public static MemoryAddress g_tree_insert_node ( Addressable tree,  Addressable key,  Addressable value) {
        var mh$ = g_tree_insert_node$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$328.g_tree_insert$MH,"g_tree_insert");
    }
    public static void g_tree_insert ( Addressable tree,  Addressable key,  Addressable value) {
        var mh$ = g_tree_insert$MH();
        try {
            mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_replace_node$MH() {
        return RuntimeHelper.requireNonNull(constants$328.g_tree_replace_node$MH,"g_tree_replace_node");
    }
    public static MemoryAddress g_tree_replace_node ( Addressable tree,  Addressable key,  Addressable value) {
        var mh$ = g_tree_replace_node$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$328.g_tree_replace$MH,"g_tree_replace");
    }
    public static void g_tree_replace ( Addressable tree,  Addressable key,  Addressable value) {
        var mh$ = g_tree_replace$MH();
        try {
            mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$328.g_tree_remove$MH,"g_tree_remove");
    }
    public static int g_tree_remove ( Addressable tree,  Addressable key) {
        var mh$ = g_tree_remove$MH();
        try {
            return (int)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_remove_all$MH() {
        return RuntimeHelper.requireNonNull(constants$328.g_tree_remove_all$MH,"g_tree_remove_all");
    }
    public static void g_tree_remove_all ( Addressable tree) {
        var mh$ = g_tree_remove_all$MH();
        try {
            mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$328.g_tree_steal$MH,"g_tree_steal");
    }
    public static int g_tree_steal ( Addressable tree,  Addressable key) {
        var mh$ = g_tree_steal$MH();
        try {
            return (int)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_key$MH() {
        return RuntimeHelper.requireNonNull(constants$329.g_tree_node_key$MH,"g_tree_node_key");
    }
    public static MemoryAddress g_tree_node_key ( Addressable node) {
        var mh$ = g_tree_node_key$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_value$MH() {
        return RuntimeHelper.requireNonNull(constants$329.g_tree_node_value$MH,"g_tree_node_value");
    }
    public static MemoryAddress g_tree_node_value ( Addressable node) {
        var mh$ = g_tree_node_value$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_lookup_node$MH() {
        return RuntimeHelper.requireNonNull(constants$329.g_tree_lookup_node$MH,"g_tree_lookup_node");
    }
    public static MemoryAddress g_tree_lookup_node ( Addressable tree,  Addressable key) {
        var mh$ = g_tree_lookup_node$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$329.g_tree_lookup$MH,"g_tree_lookup");
    }
    public static MemoryAddress g_tree_lookup ( Addressable tree,  Addressable key) {
        var mh$ = g_tree_lookup$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_lookup_extended$MH() {
        return RuntimeHelper.requireNonNull(constants$329.g_tree_lookup_extended$MH,"g_tree_lookup_extended");
    }
    public static int g_tree_lookup_extended ( Addressable tree,  Addressable lookup_key,  Addressable orig_key,  Addressable value) {
        var mh$ = g_tree_lookup_extended$MH();
        try {
            return (int)mh$.invokeExact(tree, lookup_key, orig_key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$329.g_tree_foreach$MH,"g_tree_foreach");
    }
    public static void g_tree_foreach ( Addressable tree,  Addressable func,  Addressable user_data) {
        var mh$ = g_tree_foreach$MH();
        try {
            mh$.invokeExact(tree, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_foreach_node$MH() {
        return RuntimeHelper.requireNonNull(constants$330.g_tree_foreach_node$MH,"g_tree_foreach_node");
    }
    public static void g_tree_foreach_node ( Addressable tree,  Addressable func,  Addressable user_data) {
        var mh$ = g_tree_foreach_node$MH();
        try {
            mh$.invokeExact(tree, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_traverse$MH() {
        return RuntimeHelper.requireNonNull(constants$330.g_tree_traverse$MH,"g_tree_traverse");
    }
    public static void g_tree_traverse ( Addressable tree,  Addressable traverse_func,  int traverse_type,  Addressable user_data) {
        var mh$ = g_tree_traverse$MH();
        try {
            mh$.invokeExact(tree, traverse_func, traverse_type, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_search_node$MH() {
        return RuntimeHelper.requireNonNull(constants$330.g_tree_search_node$MH,"g_tree_search_node");
    }
    public static MemoryAddress g_tree_search_node ( Addressable tree,  Addressable search_func,  Addressable user_data) {
        var mh$ = g_tree_search_node$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree, search_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_search$MH() {
        return RuntimeHelper.requireNonNull(constants$330.g_tree_search$MH,"g_tree_search");
    }
    public static MemoryAddress g_tree_search ( Addressable tree,  Addressable search_func,  Addressable user_data) {
        var mh$ = g_tree_search$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree, search_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_lower_bound$MH() {
        return RuntimeHelper.requireNonNull(constants$330.g_tree_lower_bound$MH,"g_tree_lower_bound");
    }
    public static MemoryAddress g_tree_lower_bound ( Addressable tree,  Addressable key) {
        var mh$ = g_tree_lower_bound$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_upper_bound$MH() {
        return RuntimeHelper.requireNonNull(constants$330.g_tree_upper_bound$MH,"g_tree_upper_bound");
    }
    public static MemoryAddress g_tree_upper_bound ( Addressable tree,  Addressable key) {
        var mh$ = g_tree_upper_bound$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_height$MH() {
        return RuntimeHelper.requireNonNull(constants$331.g_tree_height$MH,"g_tree_height");
    }
    public static int g_tree_height ( Addressable tree) {
        var mh$ = g_tree_height$MH();
        try {
            return (int)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_nnodes$MH() {
        return RuntimeHelper.requireNonNull(constants$331.g_tree_nnodes$MH,"g_tree_nnodes");
    }
    public static int g_tree_nnodes ( Addressable tree) {
        var mh$ = g_tree_nnodes$MH();
        try {
            return (int)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$331.g_uri_ref$MH,"g_uri_ref");
    }
    public static MemoryAddress g_uri_ref ( Addressable uri) {
        var mh$ = g_uri_ref$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$331.g_uri_unref$MH,"g_uri_unref");
    }
    public static void g_uri_unref ( Addressable uri) {
        var mh$ = g_uri_unref$MH();
        try {
            mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_URI_FLAGS_NONE() {
        return (int)0L;
    }
    public static int G_URI_FLAGS_PARSE_RELAXED() {
        return (int)1L;
    }
    public static int G_URI_FLAGS_HAS_PASSWORD() {
        return (int)2L;
    }
    public static int G_URI_FLAGS_HAS_AUTH_PARAMS() {
        return (int)4L;
    }
    public static int G_URI_FLAGS_ENCODED() {
        return (int)8L;
    }
    public static int G_URI_FLAGS_NON_DNS() {
        return (int)16L;
    }
    public static int G_URI_FLAGS_ENCODED_QUERY() {
        return (int)32L;
    }
    public static int G_URI_FLAGS_ENCODED_PATH() {
        return (int)64L;
    }
    public static int G_URI_FLAGS_ENCODED_FRAGMENT() {
        return (int)128L;
    }
    public static int G_URI_FLAGS_SCHEME_NORMALIZE() {
        return (int)256L;
    }
    public static MethodHandle g_uri_split$MH() {
        return RuntimeHelper.requireNonNull(constants$331.g_uri_split$MH,"g_uri_split");
    }
    public static int g_uri_split ( Addressable uri_ref,  int flags,  Addressable scheme,  Addressable userinfo,  Addressable host,  Addressable port,  Addressable path,  Addressable query,  Addressable fragment,  Addressable error) {
        var mh$ = g_uri_split$MH();
        try {
            return (int)mh$.invokeExact(uri_ref, flags, scheme, userinfo, host, port, path, query, fragment, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_split_with_user$MH() {
        return RuntimeHelper.requireNonNull(constants$331.g_uri_split_with_user$MH,"g_uri_split_with_user");
    }
    public static int g_uri_split_with_user ( Addressable uri_ref,  int flags,  Addressable scheme,  Addressable user,  Addressable password,  Addressable auth_params,  Addressable host,  Addressable port,  Addressable path,  Addressable query,  Addressable fragment,  Addressable error) {
        var mh$ = g_uri_split_with_user$MH();
        try {
            return (int)mh$.invokeExact(uri_ref, flags, scheme, user, password, auth_params, host, port, path, query, fragment, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_split_network$MH() {
        return RuntimeHelper.requireNonNull(constants$332.g_uri_split_network$MH,"g_uri_split_network");
    }
    public static int g_uri_split_network ( Addressable uri_string,  int flags,  Addressable scheme,  Addressable host,  Addressable port,  Addressable error) {
        var mh$ = g_uri_split_network$MH();
        try {
            return (int)mh$.invokeExact(uri_string, flags, scheme, host, port, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_is_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$332.g_uri_is_valid$MH,"g_uri_is_valid");
    }
    public static int g_uri_is_valid ( Addressable uri_string,  int flags,  Addressable error) {
        var mh$ = g_uri_is_valid$MH();
        try {
            return (int)mh$.invokeExact(uri_string, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_join$MH() {
        return RuntimeHelper.requireNonNull(constants$332.g_uri_join$MH,"g_uri_join");
    }
    public static MemoryAddress g_uri_join ( int flags,  Addressable scheme,  Addressable userinfo,  Addressable host,  int port,  Addressable path,  Addressable query,  Addressable fragment) {
        var mh$ = g_uri_join$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(flags, scheme, userinfo, host, port, path, query, fragment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_join_with_user$MH() {
        return RuntimeHelper.requireNonNull(constants$332.g_uri_join_with_user$MH,"g_uri_join_with_user");
    }
    public static MemoryAddress g_uri_join_with_user ( int flags,  Addressable scheme,  Addressable user,  Addressable password,  Addressable auth_params,  Addressable host,  int port,  Addressable path,  Addressable query,  Addressable fragment) {
        var mh$ = g_uri_join_with_user$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(flags, scheme, user, password, auth_params, host, port, path, query, fragment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$332.g_uri_parse$MH,"g_uri_parse");
    }
    public static MemoryAddress g_uri_parse ( Addressable uri_string,  int flags,  Addressable error) {
        var mh$ = g_uri_parse$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri_string, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_parse_relative$MH() {
        return RuntimeHelper.requireNonNull(constants$332.g_uri_parse_relative$MH,"g_uri_parse_relative");
    }
    public static MemoryAddress g_uri_parse_relative ( Addressable base_uri,  Addressable uri_ref,  int flags,  Addressable error) {
        var mh$ = g_uri_parse_relative$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(base_uri, uri_ref, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_resolve_relative$MH() {
        return RuntimeHelper.requireNonNull(constants$333.g_uri_resolve_relative$MH,"g_uri_resolve_relative");
    }
    public static MemoryAddress g_uri_resolve_relative ( Addressable base_uri_string,  Addressable uri_ref,  int flags,  Addressable error) {
        var mh$ = g_uri_resolve_relative$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(base_uri_string, uri_ref, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_build$MH() {
        return RuntimeHelper.requireNonNull(constants$333.g_uri_build$MH,"g_uri_build");
    }
    public static MemoryAddress g_uri_build ( int flags,  Addressable scheme,  Addressable userinfo,  Addressable host,  int port,  Addressable path,  Addressable query,  Addressable fragment) {
        var mh$ = g_uri_build$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(flags, scheme, userinfo, host, port, path, query, fragment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_build_with_user$MH() {
        return RuntimeHelper.requireNonNull(constants$333.g_uri_build_with_user$MH,"g_uri_build_with_user");
    }
    public static MemoryAddress g_uri_build_with_user ( int flags,  Addressable scheme,  Addressable user,  Addressable password,  Addressable auth_params,  Addressable host,  int port,  Addressable path,  Addressable query,  Addressable fragment) {
        var mh$ = g_uri_build_with_user$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(flags, scheme, user, password, auth_params, host, port, path, query, fragment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_URI_HIDE_NONE() {
        return (int)0L;
    }
    public static int G_URI_HIDE_USERINFO() {
        return (int)1L;
    }
    public static int G_URI_HIDE_PASSWORD() {
        return (int)2L;
    }
    public static int G_URI_HIDE_AUTH_PARAMS() {
        return (int)4L;
    }
    public static int G_URI_HIDE_QUERY() {
        return (int)8L;
    }
    public static int G_URI_HIDE_FRAGMENT() {
        return (int)16L;
    }
    public static MethodHandle g_uri_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$333.g_uri_to_string$MH,"g_uri_to_string");
    }
    public static MemoryAddress g_uri_to_string ( Addressable uri) {
        var mh$ = g_uri_to_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_to_string_partial$MH() {
        return RuntimeHelper.requireNonNull(constants$333.g_uri_to_string_partial$MH,"g_uri_to_string_partial");
    }
    public static MemoryAddress g_uri_to_string_partial ( Addressable uri,  int flags) {
        var mh$ = g_uri_to_string_partial$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_scheme$MH() {
        return RuntimeHelper.requireNonNull(constants$333.g_uri_get_scheme$MH,"g_uri_get_scheme");
    }
    public static MemoryAddress g_uri_get_scheme ( Addressable uri) {
        var mh$ = g_uri_get_scheme$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_userinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$334.g_uri_get_userinfo$MH,"g_uri_get_userinfo");
    }
    public static MemoryAddress g_uri_get_userinfo ( Addressable uri) {
        var mh$ = g_uri_get_userinfo$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_user$MH() {
        return RuntimeHelper.requireNonNull(constants$334.g_uri_get_user$MH,"g_uri_get_user");
    }
    public static MemoryAddress g_uri_get_user ( Addressable uri) {
        var mh$ = g_uri_get_user$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_password$MH() {
        return RuntimeHelper.requireNonNull(constants$334.g_uri_get_password$MH,"g_uri_get_password");
    }
    public static MemoryAddress g_uri_get_password ( Addressable uri) {
        var mh$ = g_uri_get_password$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_auth_params$MH() {
        return RuntimeHelper.requireNonNull(constants$334.g_uri_get_auth_params$MH,"g_uri_get_auth_params");
    }
    public static MemoryAddress g_uri_get_auth_params ( Addressable uri) {
        var mh$ = g_uri_get_auth_params$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_host$MH() {
        return RuntimeHelper.requireNonNull(constants$334.g_uri_get_host$MH,"g_uri_get_host");
    }
    public static MemoryAddress g_uri_get_host ( Addressable uri) {
        var mh$ = g_uri_get_host$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_port$MH() {
        return RuntimeHelper.requireNonNull(constants$334.g_uri_get_port$MH,"g_uri_get_port");
    }
    public static int g_uri_get_port ( Addressable uri) {
        var mh$ = g_uri_get_port$MH();
        try {
            return (int)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_path$MH() {
        return RuntimeHelper.requireNonNull(constants$335.g_uri_get_path$MH,"g_uri_get_path");
    }
    public static MemoryAddress g_uri_get_path ( Addressable uri) {
        var mh$ = g_uri_get_path$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_query$MH() {
        return RuntimeHelper.requireNonNull(constants$335.g_uri_get_query$MH,"g_uri_get_query");
    }
    public static MemoryAddress g_uri_get_query ( Addressable uri) {
        var mh$ = g_uri_get_query$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_fragment$MH() {
        return RuntimeHelper.requireNonNull(constants$335.g_uri_get_fragment$MH,"g_uri_get_fragment");
    }
    public static MemoryAddress g_uri_get_fragment ( Addressable uri) {
        var mh$ = g_uri_get_fragment$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$335.g_uri_get_flags$MH,"g_uri_get_flags");
    }
    public static int g_uri_get_flags ( Addressable uri) {
        var mh$ = g_uri_get_flags$MH();
        try {
            return (int)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_URI_PARAMS_NONE() {
        return (int)0L;
    }
    public static int G_URI_PARAMS_CASE_INSENSITIVE() {
        return (int)1L;
    }
    public static int G_URI_PARAMS_WWW_FORM() {
        return (int)2L;
    }
    public static int G_URI_PARAMS_PARSE_RELAXED() {
        return (int)4L;
    }
    public static MethodHandle g_uri_parse_params$MH() {
        return RuntimeHelper.requireNonNull(constants$335.g_uri_parse_params$MH,"g_uri_parse_params");
    }
    public static MemoryAddress g_uri_parse_params ( Addressable params,  long length,  Addressable separators,  int flags,  Addressable error) {
        var mh$ = g_uri_parse_params$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(params, length, separators, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_params_iter_init$MH() {
        return RuntimeHelper.requireNonNull(constants$335.g_uri_params_iter_init$MH,"g_uri_params_iter_init");
    }
    public static void g_uri_params_iter_init ( Addressable iter,  Addressable params,  long length,  Addressable separators,  int flags) {
        var mh$ = g_uri_params_iter_init$MH();
        try {
            mh$.invokeExact(iter, params, length, separators, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_params_iter_next$MH() {
        return RuntimeHelper.requireNonNull(constants$336.g_uri_params_iter_next$MH,"g_uri_params_iter_next");
    }
    public static int g_uri_params_iter_next ( Addressable iter,  Addressable attribute,  Addressable value,  Addressable error) {
        var mh$ = g_uri_params_iter_next$MH();
        try {
            return (int)mh$.invokeExact(iter, attribute, value, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$336.g_uri_error_quark$MH,"g_uri_error_quark");
    }
    public static int g_uri_error_quark () {
        var mh$ = g_uri_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_URI_ERROR_FAILED() {
        return (int)0L;
    }
    public static int G_URI_ERROR_BAD_SCHEME() {
        return (int)1L;
    }
    public static int G_URI_ERROR_BAD_USER() {
        return (int)2L;
    }
    public static int G_URI_ERROR_BAD_PASSWORD() {
        return (int)3L;
    }
    public static int G_URI_ERROR_BAD_AUTH_PARAMS() {
        return (int)4L;
    }
    public static int G_URI_ERROR_BAD_HOST() {
        return (int)5L;
    }
    public static int G_URI_ERROR_BAD_PORT() {
        return (int)6L;
    }
    public static int G_URI_ERROR_BAD_PATH() {
        return (int)7L;
    }
    public static int G_URI_ERROR_BAD_QUERY() {
        return (int)8L;
    }
    public static int G_URI_ERROR_BAD_FRAGMENT() {
        return (int)9L;
    }
    public static MethodHandle g_uri_unescape_string$MH() {
        return RuntimeHelper.requireNonNull(constants$336.g_uri_unescape_string$MH,"g_uri_unescape_string");
    }
    public static MemoryAddress g_uri_unescape_string ( Addressable escaped_string,  Addressable illegal_characters) {
        var mh$ = g_uri_unescape_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(escaped_string, illegal_characters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_unescape_segment$MH() {
        return RuntimeHelper.requireNonNull(constants$336.g_uri_unescape_segment$MH,"g_uri_unescape_segment");
    }
    public static MemoryAddress g_uri_unescape_segment ( Addressable escaped_string,  Addressable escaped_string_end,  Addressable illegal_characters) {
        var mh$ = g_uri_unescape_segment$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(escaped_string, escaped_string_end, illegal_characters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_parse_scheme$MH() {
        return RuntimeHelper.requireNonNull(constants$336.g_uri_parse_scheme$MH,"g_uri_parse_scheme");
    }
    public static MemoryAddress g_uri_parse_scheme ( Addressable uri) {
        var mh$ = g_uri_parse_scheme$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_peek_scheme$MH() {
        return RuntimeHelper.requireNonNull(constants$336.g_uri_peek_scheme$MH,"g_uri_peek_scheme");
    }
    public static MemoryAddress g_uri_peek_scheme ( Addressable uri) {
        var mh$ = g_uri_peek_scheme$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_escape_string$MH() {
        return RuntimeHelper.requireNonNull(constants$337.g_uri_escape_string$MH,"g_uri_escape_string");
    }
    public static MemoryAddress g_uri_escape_string ( Addressable unescaped,  Addressable reserved_chars_allowed,  int allow_utf8) {
        var mh$ = g_uri_escape_string$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(unescaped, reserved_chars_allowed, allow_utf8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_unescape_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$337.g_uri_unescape_bytes$MH,"g_uri_unescape_bytes");
    }
    public static MemoryAddress g_uri_unescape_bytes ( Addressable escaped_string,  long length,  Addressable illegal_characters,  Addressable error) {
        var mh$ = g_uri_unescape_bytes$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(escaped_string, length, illegal_characters, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_escape_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$337.g_uri_escape_bytes$MH,"g_uri_escape_bytes");
    }
    public static MemoryAddress g_uri_escape_bytes ( Addressable unescaped,  long length,  Addressable reserved_chars_allowed) {
        var mh$ = g_uri_escape_bytes$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(unescaped, length, reserved_chars_allowed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uuid_string_is_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$337.g_uuid_string_is_valid$MH,"g_uuid_string_is_valid");
    }
    public static int g_uuid_string_is_valid ( Addressable str) {
        var mh$ = g_uuid_string_is_valid$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uuid_string_random$MH() {
        return RuntimeHelper.requireNonNull(constants$337.g_uuid_string_random$MH,"g_uuid_string_random");
    }
    public static MemoryAddress g_uuid_string_random () {
        var mh$ = g_uuid_string_random$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout glib_major_version$LAYOUT() {
        return constants$337.glib_major_version$LAYOUT;
    }
    public static VarHandle glib_major_version$VH() {
        return constants$337.glib_major_version$VH;
    }
    public static MemorySegment glib_major_version$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$337.glib_major_version$SEGMENT,"glib_major_version");
    }
    public static int glib_major_version$get() {
        return (int) constants$337.glib_major_version$VH.get(RuntimeHelper.requireNonNull(constants$337.glib_major_version$SEGMENT, "glib_major_version"));
    }
    public static void glib_major_version$set( int x) {
        constants$337.glib_major_version$VH.set(RuntimeHelper.requireNonNull(constants$337.glib_major_version$SEGMENT, "glib_major_version"), x);
    }
    public static MemoryLayout glib_minor_version$LAYOUT() {
        return constants$338.glib_minor_version$LAYOUT;
    }
    public static VarHandle glib_minor_version$VH() {
        return constants$338.glib_minor_version$VH;
    }
    public static MemorySegment glib_minor_version$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$338.glib_minor_version$SEGMENT,"glib_minor_version");
    }
    public static int glib_minor_version$get() {
        return (int) constants$338.glib_minor_version$VH.get(RuntimeHelper.requireNonNull(constants$338.glib_minor_version$SEGMENT, "glib_minor_version"));
    }
    public static void glib_minor_version$set( int x) {
        constants$338.glib_minor_version$VH.set(RuntimeHelper.requireNonNull(constants$338.glib_minor_version$SEGMENT, "glib_minor_version"), x);
    }
    public static MemoryLayout glib_micro_version$LAYOUT() {
        return constants$338.glib_micro_version$LAYOUT;
    }
    public static VarHandle glib_micro_version$VH() {
        return constants$338.glib_micro_version$VH;
    }
    public static MemorySegment glib_micro_version$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$338.glib_micro_version$SEGMENT,"glib_micro_version");
    }
    public static int glib_micro_version$get() {
        return (int) constants$338.glib_micro_version$VH.get(RuntimeHelper.requireNonNull(constants$338.glib_micro_version$SEGMENT, "glib_micro_version"));
    }
    public static void glib_micro_version$set( int x) {
        constants$338.glib_micro_version$VH.set(RuntimeHelper.requireNonNull(constants$338.glib_micro_version$SEGMENT, "glib_micro_version"), x);
    }
    public static MemoryLayout glib_interface_age$LAYOUT() {
        return constants$338.glib_interface_age$LAYOUT;
    }
    public static VarHandle glib_interface_age$VH() {
        return constants$338.glib_interface_age$VH;
    }
    public static MemorySegment glib_interface_age$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$338.glib_interface_age$SEGMENT,"glib_interface_age");
    }
    public static int glib_interface_age$get() {
        return (int) constants$338.glib_interface_age$VH.get(RuntimeHelper.requireNonNull(constants$338.glib_interface_age$SEGMENT, "glib_interface_age"));
    }
    public static void glib_interface_age$set( int x) {
        constants$338.glib_interface_age$VH.set(RuntimeHelper.requireNonNull(constants$338.glib_interface_age$SEGMENT, "glib_interface_age"), x);
    }
    public static MemoryLayout glib_binary_age$LAYOUT() {
        return constants$338.glib_binary_age$LAYOUT;
    }
    public static VarHandle glib_binary_age$VH() {
        return constants$338.glib_binary_age$VH;
    }
    public static MemorySegment glib_binary_age$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$338.glib_binary_age$SEGMENT,"glib_binary_age");
    }
    public static int glib_binary_age$get() {
        return (int) constants$338.glib_binary_age$VH.get(RuntimeHelper.requireNonNull(constants$338.glib_binary_age$SEGMENT, "glib_binary_age"));
    }
    public static void glib_binary_age$set( int x) {
        constants$338.glib_binary_age$VH.set(RuntimeHelper.requireNonNull(constants$338.glib_binary_age$SEGMENT, "glib_binary_age"), x);
    }
    public static MethodHandle glib_check_version$MH() {
        return RuntimeHelper.requireNonNull(constants$338.glib_check_version$MH,"glib_check_version");
    }
    public static MemoryAddress glib_check_version ( int required_major,  int required_minor,  int required_micro) {
        var mh$ = glib_check_version$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(required_major, required_minor, required_micro);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_new$MH() {
        return RuntimeHelper.requireNonNull(constants$338.g_mem_chunk_new$MH,"g_mem_chunk_new");
    }
    public static MemoryAddress g_mem_chunk_new ( Addressable name,  int atom_size,  long area_size,  int type) {
        var mh$ = g_mem_chunk_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, atom_size, area_size, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$339.g_mem_chunk_destroy$MH,"g_mem_chunk_destroy");
    }
    public static void g_mem_chunk_destroy ( Addressable mem_chunk) {
        var mh$ = g_mem_chunk_destroy$MH();
        try {
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$339.g_mem_chunk_alloc$MH,"g_mem_chunk_alloc");
    }
    public static MemoryAddress g_mem_chunk_alloc ( Addressable mem_chunk) {
        var mh$ = g_mem_chunk_alloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$339.g_mem_chunk_alloc0$MH,"g_mem_chunk_alloc0");
    }
    public static MemoryAddress g_mem_chunk_alloc0 ( Addressable mem_chunk) {
        var mh$ = g_mem_chunk_alloc0$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_free$MH() {
        return RuntimeHelper.requireNonNull(constants$339.g_mem_chunk_free$MH,"g_mem_chunk_free");
    }
    public static void g_mem_chunk_free ( Addressable mem_chunk,  Addressable mem) {
        var mh$ = g_mem_chunk_free$MH();
        try {
            mh$.invokeExact(mem_chunk, mem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_clean$MH() {
        return RuntimeHelper.requireNonNull(constants$339.g_mem_chunk_clean$MH,"g_mem_chunk_clean");
    }
    public static void g_mem_chunk_clean ( Addressable mem_chunk) {
        var mh$ = g_mem_chunk_clean$MH();
        try {
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$339.g_mem_chunk_reset$MH,"g_mem_chunk_reset");
    }
    public static void g_mem_chunk_reset ( Addressable mem_chunk) {
        var mh$ = g_mem_chunk_reset$MH();
        try {
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_print$MH() {
        return RuntimeHelper.requireNonNull(constants$340.g_mem_chunk_print$MH,"g_mem_chunk_print");
    }
    public static void g_mem_chunk_print ( Addressable mem_chunk) {
        var mh$ = g_mem_chunk_print$MH();
        try {
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_info$MH() {
        return RuntimeHelper.requireNonNull(constants$340.g_mem_chunk_info$MH,"g_mem_chunk_info");
    }
    public static void g_mem_chunk_info () {
        var mh$ = g_mem_chunk_info$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_blow_chunks$MH() {
        return RuntimeHelper.requireNonNull(constants$340.g_blow_chunks$MH,"g_blow_chunks");
    }
    public static void g_blow_chunks () {
        var mh$ = g_blow_chunks$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_allocator_new$MH() {
        return RuntimeHelper.requireNonNull(constants$340.g_allocator_new$MH,"g_allocator_new");
    }
    public static MemoryAddress g_allocator_new ( Addressable name,  int n_preallocs) {
        var mh$ = g_allocator_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(name, n_preallocs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_allocator_free$MH() {
        return RuntimeHelper.requireNonNull(constants$340.g_allocator_free$MH,"g_allocator_free");
    }
    public static void g_allocator_free ( Addressable allocator) {
        var mh$ = g_allocator_free$MH();
        try {
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_push_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$340.g_list_push_allocator$MH,"g_list_push_allocator");
    }
    public static void g_list_push_allocator ( Addressable allocator) {
        var mh$ = g_list_push_allocator$MH();
        try {
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_pop_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$341.g_list_pop_allocator$MH,"g_list_pop_allocator");
    }
    public static void g_list_pop_allocator () {
        var mh$ = g_list_pop_allocator$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_push_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$341.g_slist_push_allocator$MH,"g_slist_push_allocator");
    }
    public static void g_slist_push_allocator ( Addressable allocator) {
        var mh$ = g_slist_push_allocator$MH();
        try {
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_pop_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$341.g_slist_pop_allocator$MH,"g_slist_pop_allocator");
    }
    public static void g_slist_pop_allocator () {
        var mh$ = g_slist_pop_allocator$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_push_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$341.g_node_push_allocator$MH,"g_node_push_allocator");
    }
    public static void g_node_push_allocator ( Addressable allocator) {
        var mh$ = g_node_push_allocator$MH();
        try {
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_pop_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$341.g_node_pop_allocator$MH,"g_node_pop_allocator");
    }
    public static void g_node_pop_allocator () {
        var mh$ = g_node_pop_allocator$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_new$MH() {
        return RuntimeHelper.requireNonNull(constants$342.g_cache_new$MH,"g_cache_new");
    }
    public static MemoryAddress g_cache_new ( Addressable value_new_func,  Addressable value_destroy_func,  Addressable key_dup_func,  Addressable key_destroy_func,  Addressable hash_key_func,  Addressable hash_value_func,  Addressable key_equal_func) {
        var mh$ = g_cache_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(value_new_func, value_destroy_func, key_dup_func, key_destroy_func, hash_key_func, hash_value_func, key_equal_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$343.g_cache_destroy$MH,"g_cache_destroy");
    }
    public static void g_cache_destroy ( Addressable cache) {
        var mh$ = g_cache_destroy$MH();
        try {
            mh$.invokeExact(cache);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$343.g_cache_insert$MH,"g_cache_insert");
    }
    public static MemoryAddress g_cache_insert ( Addressable cache,  Addressable key) {
        var mh$ = g_cache_insert$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cache, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$343.g_cache_remove$MH,"g_cache_remove");
    }
    public static void g_cache_remove ( Addressable cache,  Addressable value) {
        var mh$ = g_cache_remove$MH();
        try {
            mh$.invokeExact(cache, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_key_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$343.g_cache_key_foreach$MH,"g_cache_key_foreach");
    }
    public static void g_cache_key_foreach ( Addressable cache,  Addressable func,  Addressable user_data) {
        var mh$ = g_cache_key_foreach$MH();
        try {
            mh$.invokeExact(cache, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_value_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$343.g_cache_value_foreach$MH,"g_cache_value_foreach");
    }
    public static void g_cache_value_foreach ( Addressable cache,  Addressable func,  Addressable user_data) {
        var mh$ = g_cache_value_foreach$MH();
        try {
            mh$.invokeExact(cache, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_new$MH() {
        return RuntimeHelper.requireNonNull(constants$344.g_completion_new$MH,"g_completion_new");
    }
    public static MemoryAddress g_completion_new ( Addressable func) {
        var mh$ = g_completion_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_add_items$MH() {
        return RuntimeHelper.requireNonNull(constants$344.g_completion_add_items$MH,"g_completion_add_items");
    }
    public static void g_completion_add_items ( Addressable cmp,  Addressable items) {
        var mh$ = g_completion_add_items$MH();
        try {
            mh$.invokeExact(cmp, items);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_remove_items$MH() {
        return RuntimeHelper.requireNonNull(constants$344.g_completion_remove_items$MH,"g_completion_remove_items");
    }
    public static void g_completion_remove_items ( Addressable cmp,  Addressable items) {
        var mh$ = g_completion_remove_items$MH();
        try {
            mh$.invokeExact(cmp, items);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_clear_items$MH() {
        return RuntimeHelper.requireNonNull(constants$345.g_completion_clear_items$MH,"g_completion_clear_items");
    }
    public static void g_completion_clear_items ( Addressable cmp) {
        var mh$ = g_completion_clear_items$MH();
        try {
            mh$.invokeExact(cmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_complete$MH() {
        return RuntimeHelper.requireNonNull(constants$345.g_completion_complete$MH,"g_completion_complete");
    }
    public static MemoryAddress g_completion_complete ( Addressable cmp,  Addressable prefix,  Addressable new_prefix) {
        var mh$ = g_completion_complete$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cmp, prefix, new_prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_complete_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$345.g_completion_complete_utf8$MH,"g_completion_complete_utf8");
    }
    public static MemoryAddress g_completion_complete_utf8 ( Addressable cmp,  Addressable prefix,  Addressable new_prefix) {
        var mh$ = g_completion_complete_utf8$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(cmp, prefix, new_prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_set_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$345.g_completion_set_compare$MH,"g_completion_set_compare");
    }
    public static void g_completion_set_compare ( Addressable cmp,  Addressable strncmp_func) {
        var mh$ = g_completion_set_compare$MH();
        try {
            mh$.invokeExact(cmp, strncmp_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_free$MH() {
        return RuntimeHelper.requireNonNull(constants$345.g_completion_free$MH,"g_completion_free");
    }
    public static void g_completion_free ( Addressable cmp) {
        var mh$ = g_completion_free$MH();
        try {
            mh$.invokeExact(cmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_new$MH() {
        return RuntimeHelper.requireNonNull(constants$345.g_relation_new$MH,"g_relation_new");
    }
    public static MemoryAddress g_relation_new ( int fields) {
        var mh$ = g_relation_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$346.g_relation_destroy$MH,"g_relation_destroy");
    }
    public static void g_relation_destroy ( Addressable relation) {
        var mh$ = g_relation_destroy$MH();
        try {
            mh$.invokeExact(relation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_index$MH() {
        return RuntimeHelper.requireNonNull(constants$346.g_relation_index$MH,"g_relation_index");
    }
    public static void g_relation_index ( Addressable relation,  int field,  Addressable hash_func,  Addressable key_equal_func) {
        var mh$ = g_relation_index$MH();
        try {
            mh$.invokeExact(relation, field, hash_func, key_equal_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$346.g_relation_insert$MH,"g_relation_insert");
    }
    public static void g_relation_insert ( Addressable relation, Object... x1) {
        var mh$ = g_relation_insert$MH();
        try {
            mh$.invokeExact(relation, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$346.g_relation_delete$MH,"g_relation_delete");
    }
    public static int g_relation_delete ( Addressable relation,  Addressable key,  int field) {
        var mh$ = g_relation_delete$MH();
        try {
            return (int)mh$.invokeExact(relation, key, field);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_select$MH() {
        return RuntimeHelper.requireNonNull(constants$346.g_relation_select$MH,"g_relation_select");
    }
    public static MemoryAddress g_relation_select ( Addressable relation,  Addressable key,  int field) {
        var mh$ = g_relation_select$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(relation, key, field);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_count$MH() {
        return RuntimeHelper.requireNonNull(constants$346.g_relation_count$MH,"g_relation_count");
    }
    public static int g_relation_count ( Addressable relation,  Addressable key,  int field) {
        var mh$ = g_relation_count$MH();
        try {
            return (int)mh$.invokeExact(relation, key, field);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_exists$MH() {
        return RuntimeHelper.requireNonNull(constants$347.g_relation_exists$MH,"g_relation_exists");
    }
    public static int g_relation_exists ( Addressable relation, Object... x1) {
        var mh$ = g_relation_exists$MH();
        try {
            return (int)mh$.invokeExact(relation, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_print$MH() {
        return RuntimeHelper.requireNonNull(constants$347.g_relation_print$MH,"g_relation_print");
    }
    public static void g_relation_print ( Addressable relation) {
        var mh$ = g_relation_print$MH();
        try {
            mh$.invokeExact(relation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tuples_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$347.g_tuples_destroy$MH,"g_tuples_destroy");
    }
    public static void g_tuples_destroy ( Addressable tuples) {
        var mh$ = g_tuples_destroy$MH();
        try {
            mh$.invokeExact(tuples);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tuples_index$MH() {
        return RuntimeHelper.requireNonNull(constants$347.g_tuples_index$MH,"g_tuples_index");
    }
    public static MemoryAddress g_tuples_index ( Addressable tuples,  int index_,  int field) {
        var mh$ = g_tuples_index$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(tuples, index_, field);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int G_THREAD_PRIORITY_LOW() {
        return (int)0L;
    }
    public static int G_THREAD_PRIORITY_NORMAL() {
        return (int)1L;
    }
    public static int G_THREAD_PRIORITY_HIGH() {
        return (int)2L;
    }
    public static int G_THREAD_PRIORITY_URGENT() {
        return (int)3L;
    }
    public static MemorySegment g_thread_functions_for_glib_use$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$347.g_thread_functions_for_glib_use$SEGMENT,"g_thread_functions_for_glib_use");
    }
    public static MemoryLayout g_thread_use_default_impl$LAYOUT() {
        return constants$347.g_thread_use_default_impl$LAYOUT;
    }
    public static VarHandle g_thread_use_default_impl$VH() {
        return constants$347.g_thread_use_default_impl$VH;
    }
    public static MemorySegment g_thread_use_default_impl$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$347.g_thread_use_default_impl$SEGMENT,"g_thread_use_default_impl");
    }
    public static int g_thread_use_default_impl$get() {
        return (int) constants$347.g_thread_use_default_impl$VH.get(RuntimeHelper.requireNonNull(constants$347.g_thread_use_default_impl$SEGMENT, "g_thread_use_default_impl"));
    }
    public static void g_thread_use_default_impl$set( int x) {
        constants$347.g_thread_use_default_impl$VH.set(RuntimeHelper.requireNonNull(constants$347.g_thread_use_default_impl$SEGMENT, "g_thread_use_default_impl"), x);
    }
    public static MemoryLayout g_thread_gettime$LAYOUT() {
        return constants$348.g_thread_gettime$LAYOUT;
    }
    public static VarHandle g_thread_gettime$VH() {
        return constants$348.g_thread_gettime$VH;
    }
    public static MemorySegment g_thread_gettime$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$348.g_thread_gettime$SEGMENT,"g_thread_gettime");
    }
    public static MemoryAddress g_thread_gettime$get() {
        return (java.lang.foreign.MemoryAddress) constants$348.g_thread_gettime$VH.get(RuntimeHelper.requireNonNull(constants$348.g_thread_gettime$SEGMENT, "g_thread_gettime"));
    }
    public static void g_thread_gettime$set( MemoryAddress x) {
        constants$348.g_thread_gettime$VH.set(RuntimeHelper.requireNonNull(constants$348.g_thread_gettime$SEGMENT, "g_thread_gettime"), x);
    }
    public static g_thread_gettime g_thread_gettime () {
        return g_thread_gettime.ofAddress(g_thread_gettime$get(), MemorySession.global());
    }
    public static MethodHandle g_thread_create$MH() {
        return RuntimeHelper.requireNonNull(constants$348.g_thread_create$MH,"g_thread_create");
    }
    public static MemoryAddress g_thread_create ( Addressable func,  Addressable data,  int joinable,  Addressable error) {
        var mh$ = g_thread_create$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(func, data, joinable, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_create_full$MH() {
        return RuntimeHelper.requireNonNull(constants$348.g_thread_create_full$MH,"g_thread_create_full");
    }
    public static MemoryAddress g_thread_create_full ( Addressable func,  Addressable data,  long stack_size,  int joinable,  int bound,  int priority,  Addressable error) {
        var mh$ = g_thread_create_full$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(func, data, stack_size, joinable, bound, priority, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_set_priority$MH() {
        return RuntimeHelper.requireNonNull(constants$348.g_thread_set_priority$MH,"g_thread_set_priority");
    }
    public static void g_thread_set_priority ( Addressable thread,  int priority) {
        var mh$ = g_thread_set_priority$MH();
        try {
            mh$.invokeExact(thread, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$349.g_thread_foreach$MH,"g_thread_foreach");
    }
    public static void g_thread_foreach ( Addressable thread_func,  Addressable user_data) {
        var mh$ = g_thread_foreach$MH();
        try {
            mh$.invokeExact(thread_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpucount$MH() {
        return RuntimeHelper.requireNonNull(constants$349.__sched_cpucount$MH,"__sched_cpucount");
    }
    public static int __sched_cpucount ( long __setsize,  Addressable __setp) {
        var mh$ = __sched_cpucount$MH();
        try {
            return (int)mh$.invokeExact(__setsize, __setp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpualloc$MH() {
        return RuntimeHelper.requireNonNull(constants$349.__sched_cpualloc$MH,"__sched_cpualloc");
    }
    public static MemoryAddress __sched_cpualloc ( long __count) {
        var mh$ = __sched_cpualloc$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpufree$MH() {
        return RuntimeHelper.requireNonNull(constants$349.__sched_cpufree$MH,"__sched_cpufree");
    }
    public static void __sched_cpufree ( Addressable __set) {
        var mh$ = __sched_cpufree$MH();
        try {
            mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setparam$MH() {
        return RuntimeHelper.requireNonNull(constants$349.sched_setparam$MH,"sched_setparam");
    }
    public static int sched_setparam ( int __pid,  Addressable __param) {
        var mh$ = sched_setparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getparam$MH() {
        return RuntimeHelper.requireNonNull(constants$349.sched_getparam$MH,"sched_getparam");
    }
    public static int sched_getparam ( int __pid,  Addressable __param) {
        var mh$ = sched_getparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$350.sched_setscheduler$MH,"sched_setscheduler");
    }
    public static int sched_setscheduler ( int __pid,  int __policy,  Addressable __param) {
        var mh$ = sched_setscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$350.sched_getscheduler$MH,"sched_getscheduler");
    }
    public static int sched_getscheduler ( int __pid) {
        var mh$ = sched_getscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$350.sched_yield$MH,"sched_yield");
    }
    public static int sched_yield () {
        var mh$ = sched_yield$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_max$MH() {
        return RuntimeHelper.requireNonNull(constants$350.sched_get_priority_max$MH,"sched_get_priority_max");
    }
    public static int sched_get_priority_max ( int __algorithm) {
        var mh$ = sched_get_priority_max$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_min$MH() {
        return RuntimeHelper.requireNonNull(constants$350.sched_get_priority_min$MH,"sched_get_priority_min");
    }
    public static int sched_get_priority_min ( int __algorithm) {
        var mh$ = sched_get_priority_min$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_rr_get_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$350.sched_rr_get_interval$MH,"sched_rr_get_interval");
    }
    public static int sched_rr_get_interval ( int __pid,  Addressable __t) {
        var mh$ = sched_rr_get_interval$MH();
        try {
            return (int)mh$.invokeExact(__pid, __t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static int PTHREAD_CREATE_JOINABLE() {
        return (int)0L;
    }
    public static int PTHREAD_CREATE_DETACHED() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_TIMED_NP() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_RECURSIVE_NP() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_ERRORCHECK_NP() {
        return (int)2L;
    }
    public static int PTHREAD_MUTEX_ADAPTIVE_NP() {
        return (int)3L;
    }
    public static int PTHREAD_MUTEX_NORMAL() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_RECURSIVE() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_ERRORCHECK() {
        return (int)2L;
    }
    public static int PTHREAD_MUTEX_DEFAULT() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_STALLED() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_STALLED_NP() {
        return (int)0L;
    }
    public static int PTHREAD_MUTEX_ROBUST() {
        return (int)1L;
    }
    public static int PTHREAD_MUTEX_ROBUST_NP() {
        return (int)1L;
    }
    public static int PTHREAD_PRIO_NONE() {
        return (int)0L;
    }
    public static int PTHREAD_PRIO_INHERIT() {
        return (int)1L;
    }
    public static int PTHREAD_PRIO_PROTECT() {
        return (int)2L;
    }
    public static int PTHREAD_RWLOCK_PREFER_READER_NP() {
        return (int)0L;
    }
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NP() {
        return (int)1L;
    }
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP() {
        return (int)2L;
    }
    public static int PTHREAD_RWLOCK_DEFAULT_NP() {
        return (int)0L;
    }
    public static int PTHREAD_INHERIT_SCHED() {
        return (int)0L;
    }
    public static int PTHREAD_EXPLICIT_SCHED() {
        return (int)1L;
    }
    public static int PTHREAD_SCOPE_SYSTEM() {
        return (int)0L;
    }
    public static int PTHREAD_SCOPE_PROCESS() {
        return (int)1L;
    }
    public static int PTHREAD_PROCESS_PRIVATE() {
        return (int)0L;
    }
    public static int PTHREAD_PROCESS_SHARED() {
        return (int)1L;
    }
    public static int PTHREAD_CANCEL_ENABLE() {
        return (int)0L;
    }
    public static int PTHREAD_CANCEL_DISABLE() {
        return (int)1L;
    }
    public static int PTHREAD_CANCEL_DEFERRED() {
        return (int)0L;
    }
    public static int PTHREAD_CANCEL_ASYNCHRONOUS() {
        return (int)1L;
    }
    public static MethodHandle pthread_create$MH() {
        return RuntimeHelper.requireNonNull(constants$351.pthread_create$MH,"pthread_create");
    }
    public static int pthread_create ( Addressable __newthread,  Addressable __attr,  Addressable __start_routine,  Addressable __arg) {
        var mh$ = pthread_create$MH();
        try {
            return (int)mh$.invokeExact(__newthread, __attr, __start_routine, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$351.pthread_exit$MH,"pthread_exit");
    }
    public static void pthread_exit ( Addressable __retval) {
        var mh$ = pthread_exit$MH();
        try {
            mh$.invokeExact(__retval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_join$MH() {
        return RuntimeHelper.requireNonNull(constants$351.pthread_join$MH,"pthread_join");
    }
    public static int pthread_join ( long __th,  Addressable __thread_return) {
        var mh$ = pthread_join$MH();
        try {
            return (int)mh$.invokeExact(__th, __thread_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_detach$MH() {
        return RuntimeHelper.requireNonNull(constants$351.pthread_detach$MH,"pthread_detach");
    }
    public static int pthread_detach ( long __th) {
        var mh$ = pthread_detach$MH();
        try {
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_self$MH() {
        return RuntimeHelper.requireNonNull(constants$352.pthread_self$MH,"pthread_self");
    }
    public static long pthread_self () {
        var mh$ = pthread_self$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$352.pthread_equal$MH,"pthread_equal");
    }
    public static int pthread_equal ( long __thread1,  long __thread2) {
        var mh$ = pthread_equal$MH();
        try {
            return (int)mh$.invokeExact(__thread1, __thread2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$352.pthread_attr_init$MH,"pthread_attr_init");
    }
    public static int pthread_attr_init ( Addressable __attr) {
        var mh$ = pthread_attr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$352.pthread_attr_destroy$MH,"pthread_attr_destroy");
    }
    public static int pthread_attr_destroy ( Addressable __attr) {
        var mh$ = pthread_attr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getdetachstate$MH() {
        return RuntimeHelper.requireNonNull(constants$352.pthread_attr_getdetachstate$MH,"pthread_attr_getdetachstate");
    }
    public static int pthread_attr_getdetachstate ( Addressable __attr,  Addressable __detachstate) {
        var mh$ = pthread_attr_getdetachstate$MH();
        try {
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setdetachstate$MH() {
        return RuntimeHelper.requireNonNull(constants$352.pthread_attr_setdetachstate$MH,"pthread_attr_setdetachstate");
    }
    public static int pthread_attr_setdetachstate ( Addressable __attr,  int __detachstate) {
        var mh$ = pthread_attr_setdetachstate$MH();
        try {
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getguardsize$MH() {
        return RuntimeHelper.requireNonNull(constants$353.pthread_attr_getguardsize$MH,"pthread_attr_getguardsize");
    }
    public static int pthread_attr_getguardsize ( Addressable __attr,  Addressable __guardsize) {
        var mh$ = pthread_attr_getguardsize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setguardsize$MH() {
        return RuntimeHelper.requireNonNull(constants$353.pthread_attr_setguardsize$MH,"pthread_attr_setguardsize");
    }
    public static int pthread_attr_setguardsize ( Addressable __attr,  long __guardsize) {
        var mh$ = pthread_attr_setguardsize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$353.pthread_attr_getschedparam$MH,"pthread_attr_getschedparam");
    }
    public static int pthread_attr_getschedparam ( Addressable __attr,  Addressable __param) {
        var mh$ = pthread_attr_getschedparam$MH();
        try {
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$353.pthread_attr_setschedparam$MH,"pthread_attr_setschedparam");
    }
    public static int pthread_attr_setschedparam ( Addressable __attr,  Addressable __param) {
        var mh$ = pthread_attr_setschedparam$MH();
        try {
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getschedpolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$353.pthread_attr_getschedpolicy$MH,"pthread_attr_getschedpolicy");
    }
    public static int pthread_attr_getschedpolicy ( Addressable __attr,  Addressable __policy) {
        var mh$ = pthread_attr_getschedpolicy$MH();
        try {
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setschedpolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$353.pthread_attr_setschedpolicy$MH,"pthread_attr_setschedpolicy");
    }
    public static int pthread_attr_setschedpolicy ( Addressable __attr,  int __policy) {
        var mh$ = pthread_attr_setschedpolicy$MH();
        try {
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getinheritsched$MH() {
        return RuntimeHelper.requireNonNull(constants$354.pthread_attr_getinheritsched$MH,"pthread_attr_getinheritsched");
    }
    public static int pthread_attr_getinheritsched ( Addressable __attr,  Addressable __inherit) {
        var mh$ = pthread_attr_getinheritsched$MH();
        try {
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setinheritsched$MH() {
        return RuntimeHelper.requireNonNull(constants$354.pthread_attr_setinheritsched$MH,"pthread_attr_setinheritsched");
    }
    public static int pthread_attr_setinheritsched ( Addressable __attr,  int __inherit) {
        var mh$ = pthread_attr_setinheritsched$MH();
        try {
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getscope$MH() {
        return RuntimeHelper.requireNonNull(constants$354.pthread_attr_getscope$MH,"pthread_attr_getscope");
    }
    public static int pthread_attr_getscope ( Addressable __attr,  Addressable __scope) {
        var mh$ = pthread_attr_getscope$MH();
        try {
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setscope$MH() {
        return RuntimeHelper.requireNonNull(constants$354.pthread_attr_setscope$MH,"pthread_attr_setscope");
    }
    public static int pthread_attr_setscope ( Addressable __attr,  int __scope) {
        var mh$ = pthread_attr_setscope$MH();
        try {
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstackaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$354.pthread_attr_getstackaddr$MH,"pthread_attr_getstackaddr");
    }
    public static int pthread_attr_getstackaddr ( Addressable __attr,  Addressable __stackaddr) {
        var mh$ = pthread_attr_getstackaddr$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstackaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$354.pthread_attr_setstackaddr$MH,"pthread_attr_setstackaddr");
    }
    public static int pthread_attr_setstackaddr ( Addressable __attr,  Addressable __stackaddr) {
        var mh$ = pthread_attr_setstackaddr$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstacksize$MH() {
        return RuntimeHelper.requireNonNull(constants$355.pthread_attr_getstacksize$MH,"pthread_attr_getstacksize");
    }
    public static int pthread_attr_getstacksize ( Addressable __attr,  Addressable __stacksize) {
        var mh$ = pthread_attr_getstacksize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstacksize$MH() {
        return RuntimeHelper.requireNonNull(constants$355.pthread_attr_setstacksize$MH,"pthread_attr_setstacksize");
    }
    public static int pthread_attr_setstacksize ( Addressable __attr,  long __stacksize) {
        var mh$ = pthread_attr_setstacksize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstack$MH() {
        return RuntimeHelper.requireNonNull(constants$355.pthread_attr_getstack$MH,"pthread_attr_getstack");
    }
    public static int pthread_attr_getstack ( Addressable __attr,  Addressable __stackaddr,  Addressable __stacksize) {
        var mh$ = pthread_attr_getstack$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstack$MH() {
        return RuntimeHelper.requireNonNull(constants$355.pthread_attr_setstack$MH,"pthread_attr_setstack");
    }
    public static int pthread_attr_setstack ( Addressable __attr,  Addressable __stackaddr,  long __stacksize) {
        var mh$ = pthread_attr_setstack$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$355.pthread_setschedparam$MH,"pthread_setschedparam");
    }
    public static int pthread_setschedparam ( long __target_thread,  int __policy,  Addressable __param) {
        var mh$ = pthread_setschedparam$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$355.pthread_getschedparam$MH,"pthread_getschedparam");
    }
    public static int pthread_getschedparam ( long __target_thread,  Addressable __policy,  Addressable __param) {
        var mh$ = pthread_getschedparam$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setschedprio$MH() {
        return RuntimeHelper.requireNonNull(constants$356.pthread_setschedprio$MH,"pthread_setschedprio");
    }
    public static int pthread_setschedprio ( long __target_thread,  int __prio) {
        var mh$ = pthread_setschedprio$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __prio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_once$MH() {
        return RuntimeHelper.requireNonNull(constants$356.pthread_once$MH,"pthread_once");
    }
    public static int pthread_once ( Addressable __once_control,  Addressable __init_routine) {
        var mh$ = pthread_once$MH();
        try {
            return (int)mh$.invokeExact(__once_control, __init_routine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setcancelstate$MH() {
        return RuntimeHelper.requireNonNull(constants$356.pthread_setcancelstate$MH,"pthread_setcancelstate");
    }
    public static int pthread_setcancelstate ( int __state,  Addressable __oldstate) {
        var mh$ = pthread_setcancelstate$MH();
        try {
            return (int)mh$.invokeExact(__state, __oldstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setcanceltype$MH() {
        return RuntimeHelper.requireNonNull(constants$356.pthread_setcanceltype$MH,"pthread_setcanceltype");
    }
    public static int pthread_setcanceltype ( int __type,  Addressable __oldtype) {
        var mh$ = pthread_setcanceltype$MH();
        try {
            return (int)mh$.invokeExact(__type, __oldtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$357.pthread_cancel$MH,"pthread_cancel");
    }
    public static int pthread_cancel ( long __th) {
        var mh$ = pthread_cancel$MH();
        try {
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_testcancel$MH() {
        return RuntimeHelper.requireNonNull(constants$357.pthread_testcancel$MH,"pthread_testcancel");
    }
    public static void pthread_testcancel () {
        var mh$ = pthread_testcancel$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_register_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$357.__pthread_register_cancel$MH,"__pthread_register_cancel");
    }
    public static void __pthread_register_cancel ( Addressable __buf) {
        var mh$ = __pthread_register_cancel$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_unregister_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$357.__pthread_unregister_cancel$MH,"__pthread_unregister_cancel");
    }
    public static void __pthread_unregister_cancel ( Addressable __buf) {
        var mh$ = __pthread_unregister_cancel$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_unwind_next$MH() {
        return RuntimeHelper.requireNonNull(constants$357.__pthread_unwind_next$MH,"__pthread_unwind_next");
    }
    public static void __pthread_unwind_next ( Addressable __buf) {
        var mh$ = __pthread_unwind_next$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sigsetjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$357.__sigsetjmp$MH,"__sigsetjmp");
    }
    public static int __sigsetjmp ( Addressable __env,  int __savemask) {
        var mh$ = __sigsetjmp$MH();
        try {
            return (int)mh$.invokeExact(__env, __savemask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$358.pthread_mutex_init$MH,"pthread_mutex_init");
    }
    public static int pthread_mutex_init ( Addressable __mutex,  Addressable __mutexattr) {
        var mh$ = pthread_mutex_init$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __mutexattr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$358.pthread_mutex_destroy$MH,"pthread_mutex_destroy");
    }
    public static int pthread_mutex_destroy ( Addressable __mutex) {
        var mh$ = pthread_mutex_destroy$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$358.pthread_mutex_trylock$MH,"pthread_mutex_trylock");
    }
    public static int pthread_mutex_trylock ( Addressable __mutex) {
        var mh$ = pthread_mutex_trylock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$358.pthread_mutex_lock$MH,"pthread_mutex_lock");
    }
    public static int pthread_mutex_lock ( Addressable __mutex) {
        var mh$ = pthread_mutex_lock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_timedlock$MH() {
        return RuntimeHelper.requireNonNull(constants$358.pthread_mutex_timedlock$MH,"pthread_mutex_timedlock");
    }
    public static int pthread_mutex_timedlock ( Addressable __mutex,  Addressable __abstime) {
        var mh$ = pthread_mutex_timedlock$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$358.pthread_mutex_unlock$MH,"pthread_mutex_unlock");
    }
    public static int pthread_mutex_unlock ( Addressable __mutex) {
        var mh$ = pthread_mutex_unlock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_getprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$359.pthread_mutex_getprioceiling$MH,"pthread_mutex_getprioceiling");
    }
    public static int pthread_mutex_getprioceiling ( Addressable __mutex,  Addressable __prioceiling) {
        var mh$ = pthread_mutex_getprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_setprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$359.pthread_mutex_setprioceiling$MH,"pthread_mutex_setprioceiling");
    }
    public static int pthread_mutex_setprioceiling ( Addressable __mutex,  int __prioceiling,  Addressable __old_ceiling) {
        var mh$ = pthread_mutex_setprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __prioceiling, __old_ceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_consistent$MH() {
        return RuntimeHelper.requireNonNull(constants$359.pthread_mutex_consistent$MH,"pthread_mutex_consistent");
    }
    public static int pthread_mutex_consistent ( Addressable __mutex) {
        var mh$ = pthread_mutex_consistent$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$359.pthread_mutexattr_init$MH,"pthread_mutexattr_init");
    }
    public static int pthread_mutexattr_init ( Addressable __attr) {
        var mh$ = pthread_mutexattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$359.pthread_mutexattr_destroy$MH,"pthread_mutexattr_destroy");
    }
    public static int pthread_mutexattr_destroy ( Addressable __attr) {
        var mh$ = pthread_mutexattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$359.pthread_mutexattr_getpshared$MH,"pthread_mutexattr_getpshared");
    }
    public static int pthread_mutexattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = pthread_mutexattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$360.pthread_mutexattr_setpshared$MH,"pthread_mutexattr_setpshared");
    }
    public static int pthread_mutexattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = pthread_mutexattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_gettype$MH() {
        return RuntimeHelper.requireNonNull(constants$360.pthread_mutexattr_gettype$MH,"pthread_mutexattr_gettype");
    }
    public static int pthread_mutexattr_gettype ( Addressable __attr,  Addressable __kind) {
        var mh$ = pthread_mutexattr_gettype$MH();
        try {
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_settype$MH() {
        return RuntimeHelper.requireNonNull(constants$360.pthread_mutexattr_settype$MH,"pthread_mutexattr_settype");
    }
    public static int pthread_mutexattr_settype ( Addressable __attr,  int __kind) {
        var mh$ = pthread_mutexattr_settype$MH();
        try {
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getprotocol$MH() {
        return RuntimeHelper.requireNonNull(constants$360.pthread_mutexattr_getprotocol$MH,"pthread_mutexattr_getprotocol");
    }
    public static int pthread_mutexattr_getprotocol ( Addressable __attr,  Addressable __protocol) {
        var mh$ = pthread_mutexattr_getprotocol$MH();
        try {
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setprotocol$MH() {
        return RuntimeHelper.requireNonNull(constants$360.pthread_mutexattr_setprotocol$MH,"pthread_mutexattr_setprotocol");
    }
    public static int pthread_mutexattr_setprotocol ( Addressable __attr,  int __protocol) {
        var mh$ = pthread_mutexattr_setprotocol$MH();
        try {
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$360.pthread_mutexattr_getprioceiling$MH,"pthread_mutexattr_getprioceiling");
    }
    public static int pthread_mutexattr_getprioceiling ( Addressable __attr,  Addressable __prioceiling) {
        var mh$ = pthread_mutexattr_getprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$361.pthread_mutexattr_setprioceiling$MH,"pthread_mutexattr_setprioceiling");
    }
    public static int pthread_mutexattr_setprioceiling ( Addressable __attr,  int __prioceiling) {
        var mh$ = pthread_mutexattr_setprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getrobust$MH() {
        return RuntimeHelper.requireNonNull(constants$361.pthread_mutexattr_getrobust$MH,"pthread_mutexattr_getrobust");
    }
    public static int pthread_mutexattr_getrobust ( Addressable __attr,  Addressable __robustness) {
        var mh$ = pthread_mutexattr_getrobust$MH();
        try {
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setrobust$MH() {
        return RuntimeHelper.requireNonNull(constants$361.pthread_mutexattr_setrobust$MH,"pthread_mutexattr_setrobust");
    }
    public static int pthread_mutexattr_setrobust ( Addressable __attr,  int __robustness) {
        var mh$ = pthread_mutexattr_setrobust$MH();
        try {
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$361.pthread_rwlock_init$MH,"pthread_rwlock_init");
    }
    public static int pthread_rwlock_init ( Addressable __rwlock,  Addressable __attr) {
        var mh$ = pthread_rwlock_init$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$361.pthread_rwlock_destroy$MH,"pthread_rwlock_destroy");
    }
    public static int pthread_rwlock_destroy ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_destroy$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_rdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$361.pthread_rwlock_rdlock$MH,"pthread_rwlock_rdlock");
    }
    public static int pthread_rwlock_rdlock ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_rdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_tryrdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$362.pthread_rwlock_tryrdlock$MH,"pthread_rwlock_tryrdlock");
    }
    public static int pthread_rwlock_tryrdlock ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_tryrdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_timedrdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$362.pthread_rwlock_timedrdlock$MH,"pthread_rwlock_timedrdlock");
    }
    public static int pthread_rwlock_timedrdlock ( Addressable __rwlock,  Addressable __abstime) {
        var mh$ = pthread_rwlock_timedrdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_wrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$362.pthread_rwlock_wrlock$MH,"pthread_rwlock_wrlock");
    }
    public static int pthread_rwlock_wrlock ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_wrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_trywrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$362.pthread_rwlock_trywrlock$MH,"pthread_rwlock_trywrlock");
    }
    public static int pthread_rwlock_trywrlock ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_trywrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_timedwrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$362.pthread_rwlock_timedwrlock$MH,"pthread_rwlock_timedwrlock");
    }
    public static int pthread_rwlock_timedwrlock ( Addressable __rwlock,  Addressable __abstime) {
        var mh$ = pthread_rwlock_timedwrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$362.pthread_rwlock_unlock$MH,"pthread_rwlock_unlock");
    }
    public static int pthread_rwlock_unlock ( Addressable __rwlock) {
        var mh$ = pthread_rwlock_unlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$363.pthread_rwlockattr_init$MH,"pthread_rwlockattr_init");
    }
    public static int pthread_rwlockattr_init ( Addressable __attr) {
        var mh$ = pthread_rwlockattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$363.pthread_rwlockattr_destroy$MH,"pthread_rwlockattr_destroy");
    }
    public static int pthread_rwlockattr_destroy ( Addressable __attr) {
        var mh$ = pthread_rwlockattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$363.pthread_rwlockattr_getpshared$MH,"pthread_rwlockattr_getpshared");
    }
    public static int pthread_rwlockattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = pthread_rwlockattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$363.pthread_rwlockattr_setpshared$MH,"pthread_rwlockattr_setpshared");
    }
    public static int pthread_rwlockattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = pthread_rwlockattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_getkind_np$MH() {
        return RuntimeHelper.requireNonNull(constants$363.pthread_rwlockattr_getkind_np$MH,"pthread_rwlockattr_getkind_np");
    }
    public static int pthread_rwlockattr_getkind_np ( Addressable __attr,  Addressable __pref) {
        var mh$ = pthread_rwlockattr_getkind_np$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_setkind_np$MH() {
        return RuntimeHelper.requireNonNull(constants$363.pthread_rwlockattr_setkind_np$MH,"pthread_rwlockattr_setkind_np");
    }
    public static int pthread_rwlockattr_setkind_np ( Addressable __attr,  int __pref) {
        var mh$ = pthread_rwlockattr_setkind_np$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_init$MH() {
        return RuntimeHelper.requireNonNull(constants$364.pthread_cond_init$MH,"pthread_cond_init");
    }
    public static int pthread_cond_init ( Addressable __cond,  Addressable __cond_attr) {
        var mh$ = pthread_cond_init$MH();
        try {
            return (int)mh$.invokeExact(__cond, __cond_attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$364.pthread_cond_destroy$MH,"pthread_cond_destroy");
    }
    public static int pthread_cond_destroy ( Addressable __cond) {
        var mh$ = pthread_cond_destroy$MH();
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_signal$MH() {
        return RuntimeHelper.requireNonNull(constants$364.pthread_cond_signal$MH,"pthread_cond_signal");
    }
    public static int pthread_cond_signal ( Addressable __cond) {
        var mh$ = pthread_cond_signal$MH();
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_broadcast$MH() {
        return RuntimeHelper.requireNonNull(constants$364.pthread_cond_broadcast$MH,"pthread_cond_broadcast");
    }
    public static int pthread_cond_broadcast ( Addressable __cond) {
        var mh$ = pthread_cond_broadcast$MH();
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$364.pthread_cond_wait$MH,"pthread_cond_wait");
    }
    public static int pthread_cond_wait ( Addressable __cond,  Addressable __mutex) {
        var mh$ = pthread_cond_wait$MH();
        try {
            return (int)mh$.invokeExact(__cond, __mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_timedwait$MH() {
        return RuntimeHelper.requireNonNull(constants$364.pthread_cond_timedwait$MH,"pthread_cond_timedwait");
    }
    public static int pthread_cond_timedwait ( Addressable __cond,  Addressable __mutex,  Addressable __abstime) {
        var mh$ = pthread_cond_timedwait$MH();
        try {
            return (int)mh$.invokeExact(__cond, __mutex, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$365.pthread_condattr_init$MH,"pthread_condattr_init");
    }
    public static int pthread_condattr_init ( Addressable __attr) {
        var mh$ = pthread_condattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$365.pthread_condattr_destroy$MH,"pthread_condattr_destroy");
    }
    public static int pthread_condattr_destroy ( Addressable __attr) {
        var mh$ = pthread_condattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$365.pthread_condattr_getpshared$MH,"pthread_condattr_getpshared");
    }
    public static int pthread_condattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = pthread_condattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$365.pthread_condattr_setpshared$MH,"pthread_condattr_setpshared");
    }
    public static int pthread_condattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = pthread_condattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_getclock$MH() {
        return RuntimeHelper.requireNonNull(constants$365.pthread_condattr_getclock$MH,"pthread_condattr_getclock");
    }
    public static int pthread_condattr_getclock ( Addressable __attr,  Addressable __clock_id) {
        var mh$ = pthread_condattr_getclock$MH();
        try {
            return (int)mh$.invokeExact(__attr, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_condattr_setclock$MH() {
        return RuntimeHelper.requireNonNull(constants$365.pthread_condattr_setclock$MH,"pthread_condattr_setclock");
    }
    public static int pthread_condattr_setclock ( Addressable __attr,  int __clock_id) {
        var mh$ = pthread_condattr_setclock$MH();
        try {
            return (int)mh$.invokeExact(__attr, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_init$MH() {
        return RuntimeHelper.requireNonNull(constants$366.pthread_spin_init$MH,"pthread_spin_init");
    }
    public static int pthread_spin_init ( Addressable __lock,  int __pshared) {
        var mh$ = pthread_spin_init$MH();
        try {
            return (int)mh$.invokeExact(__lock, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$366.pthread_spin_destroy$MH,"pthread_spin_destroy");
    }
    public static int pthread_spin_destroy ( Addressable __lock) {
        var mh$ = pthread_spin_destroy$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$366.pthread_spin_lock$MH,"pthread_spin_lock");
    }
    public static int pthread_spin_lock ( Addressable __lock) {
        var mh$ = pthread_spin_lock$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$366.pthread_spin_trylock$MH,"pthread_spin_trylock");
    }
    public static int pthread_spin_trylock ( Addressable __lock) {
        var mh$ = pthread_spin_trylock$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_spin_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$366.pthread_spin_unlock$MH,"pthread_spin_unlock");
    }
    public static int pthread_spin_unlock ( Addressable __lock) {
        var mh$ = pthread_spin_unlock$MH();
        try {
            return (int)mh$.invokeExact(__lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_init$MH() {
        return RuntimeHelper.requireNonNull(constants$366.pthread_barrier_init$MH,"pthread_barrier_init");
    }
    public static int pthread_barrier_init ( Addressable __barrier,  Addressable __attr,  int __count) {
        var mh$ = pthread_barrier_init$MH();
        try {
            return (int)mh$.invokeExact(__barrier, __attr, __count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$367.pthread_barrier_destroy$MH,"pthread_barrier_destroy");
    }
    public static int pthread_barrier_destroy ( Addressable __barrier) {
        var mh$ = pthread_barrier_destroy$MH();
        try {
            return (int)mh$.invokeExact(__barrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrier_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$367.pthread_barrier_wait$MH,"pthread_barrier_wait");
    }
    public static int pthread_barrier_wait ( Addressable __barrier) {
        var mh$ = pthread_barrier_wait$MH();
        try {
            return (int)mh$.invokeExact(__barrier);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$367.pthread_barrierattr_init$MH,"pthread_barrierattr_init");
    }
    public static int pthread_barrierattr_init ( Addressable __attr) {
        var mh$ = pthread_barrierattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$367.pthread_barrierattr_destroy$MH,"pthread_barrierattr_destroy");
    }
    public static int pthread_barrierattr_destroy ( Addressable __attr) {
        var mh$ = pthread_barrierattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$367.pthread_barrierattr_getpshared$MH,"pthread_barrierattr_getpshared");
    }
    public static int pthread_barrierattr_getpshared ( Addressable __attr,  Addressable __pshared) {
        var mh$ = pthread_barrierattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_barrierattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$367.pthread_barrierattr_setpshared$MH,"pthread_barrierattr_setpshared");
    }
    public static int pthread_barrierattr_setpshared ( Addressable __attr,  int __pshared) {
        var mh$ = pthread_barrierattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_key_create$MH() {
        return RuntimeHelper.requireNonNull(constants$368.pthread_key_create$MH,"pthread_key_create");
    }
    public static int pthread_key_create ( Addressable __key,  Addressable __destr_function) {
        var mh$ = pthread_key_create$MH();
        try {
            return (int)mh$.invokeExact(__key, __destr_function);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_key_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$368.pthread_key_delete$MH,"pthread_key_delete");
    }
    public static int pthread_key_delete ( int __key) {
        var mh$ = pthread_key_delete$MH();
        try {
            return (int)mh$.invokeExact(__key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getspecific$MH() {
        return RuntimeHelper.requireNonNull(constants$368.pthread_getspecific$MH,"pthread_getspecific");
    }
    public static MemoryAddress pthread_getspecific ( int __key) {
        var mh$ = pthread_getspecific$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(__key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setspecific$MH() {
        return RuntimeHelper.requireNonNull(constants$368.pthread_setspecific$MH,"pthread_setspecific");
    }
    public static int pthread_setspecific ( int __key,  Addressable __pointer) {
        var mh$ = pthread_setspecific$MH();
        try {
            return (int)mh$.invokeExact(__key, __pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getcpuclockid$MH() {
        return RuntimeHelper.requireNonNull(constants$369.pthread_getcpuclockid$MH,"pthread_getcpuclockid");
    }
    public static int pthread_getcpuclockid ( long __thread_id,  Addressable __clock_id) {
        var mh$ = pthread_getcpuclockid$MH();
        try {
            return (int)mh$.invokeExact(__thread_id, __clock_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_atfork$MH() {
        return RuntimeHelper.requireNonNull(constants$370.pthread_atfork$MH,"pthread_atfork");
    }
    public static int pthread_atfork ( Addressable __prepare,  Addressable __parent,  Addressable __child) {
        var mh$ = pthread_atfork$MH();
        try {
            return (int)mh$.invokeExact(__prepare, __parent, __child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$370.g_static_mutex_init$MH,"g_static_mutex_init");
    }
    public static void g_static_mutex_init ( Addressable mutex) {
        var mh$ = g_static_mutex_init$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_mutex_free$MH() {
        return RuntimeHelper.requireNonNull(constants$370.g_static_mutex_free$MH,"g_static_mutex_free");
    }
    public static void g_static_mutex_free ( Addressable mutex) {
        var mh$ = g_static_mutex_free$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_mutex_get_mutex_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$370.g_static_mutex_get_mutex_impl$MH,"g_static_mutex_get_mutex_impl");
    }
    public static MemoryAddress g_static_mutex_get_mutex_impl ( Addressable mutex) {
        var mh$ = g_static_mutex_get_mutex_impl$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rec_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$370.g_static_rec_mutex_init$MH,"g_static_rec_mutex_init");
    }
    public static void g_static_rec_mutex_init ( Addressable mutex) {
        var mh$ = g_static_rec_mutex_init$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rec_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$371.g_static_rec_mutex_lock$MH,"g_static_rec_mutex_lock");
    }
    public static void g_static_rec_mutex_lock ( Addressable mutex) {
        var mh$ = g_static_rec_mutex_lock$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rec_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$371.g_static_rec_mutex_trylock$MH,"g_static_rec_mutex_trylock");
    }
    public static int g_static_rec_mutex_trylock ( Addressable mutex) {
        var mh$ = g_static_rec_mutex_trylock$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rec_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$371.g_static_rec_mutex_unlock$MH,"g_static_rec_mutex_unlock");
    }
    public static void g_static_rec_mutex_unlock ( Addressable mutex) {
        var mh$ = g_static_rec_mutex_unlock$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rec_mutex_lock_full$MH() {
        return RuntimeHelper.requireNonNull(constants$371.g_static_rec_mutex_lock_full$MH,"g_static_rec_mutex_lock_full");
    }
    public static void g_static_rec_mutex_lock_full ( Addressable mutex,  int depth) {
        var mh$ = g_static_rec_mutex_lock_full$MH();
        try {
            mh$.invokeExact(mutex, depth);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rec_mutex_unlock_full$MH() {
        return RuntimeHelper.requireNonNull(constants$371.g_static_rec_mutex_unlock_full$MH,"g_static_rec_mutex_unlock_full");
    }
    public static int g_static_rec_mutex_unlock_full ( Addressable mutex) {
        var mh$ = g_static_rec_mutex_unlock_full$MH();
        try {
            return (int)mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rec_mutex_free$MH() {
        return RuntimeHelper.requireNonNull(constants$371.g_static_rec_mutex_free$MH,"g_static_rec_mutex_free");
    }
    public static void g_static_rec_mutex_free ( Addressable mutex) {
        var mh$ = g_static_rec_mutex_free$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rw_lock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$372.g_static_rw_lock_init$MH,"g_static_rw_lock_init");
    }
    public static void g_static_rw_lock_init ( Addressable lock) {
        var mh$ = g_static_rw_lock_init$MH();
        try {
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rw_lock_reader_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$372.g_static_rw_lock_reader_lock$MH,"g_static_rw_lock_reader_lock");
    }
    public static void g_static_rw_lock_reader_lock ( Addressable lock) {
        var mh$ = g_static_rw_lock_reader_lock$MH();
        try {
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rw_lock_reader_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$372.g_static_rw_lock_reader_trylock$MH,"g_static_rw_lock_reader_trylock");
    }
    public static int g_static_rw_lock_reader_trylock ( Addressable lock) {
        var mh$ = g_static_rw_lock_reader_trylock$MH();
        try {
            return (int)mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rw_lock_reader_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$372.g_static_rw_lock_reader_unlock$MH,"g_static_rw_lock_reader_unlock");
    }
    public static void g_static_rw_lock_reader_unlock ( Addressable lock) {
        var mh$ = g_static_rw_lock_reader_unlock$MH();
        try {
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rw_lock_writer_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$372.g_static_rw_lock_writer_lock$MH,"g_static_rw_lock_writer_lock");
    }
    public static void g_static_rw_lock_writer_lock ( Addressable lock) {
        var mh$ = g_static_rw_lock_writer_lock$MH();
        try {
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rw_lock_writer_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$372.g_static_rw_lock_writer_trylock$MH,"g_static_rw_lock_writer_trylock");
    }
    public static int g_static_rw_lock_writer_trylock ( Addressable lock) {
        var mh$ = g_static_rw_lock_writer_trylock$MH();
        try {
            return (int)mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rw_lock_writer_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$373.g_static_rw_lock_writer_unlock$MH,"g_static_rw_lock_writer_unlock");
    }
    public static void g_static_rw_lock_writer_unlock ( Addressable lock) {
        var mh$ = g_static_rw_lock_writer_unlock$MH();
        try {
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_rw_lock_free$MH() {
        return RuntimeHelper.requireNonNull(constants$373.g_static_rw_lock_free$MH,"g_static_rw_lock_free");
    }
    public static void g_static_rw_lock_free ( Addressable lock) {
        var mh$ = g_static_rw_lock_free$MH();
        try {
            mh$.invokeExact(lock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_private_new$MH() {
        return RuntimeHelper.requireNonNull(constants$373.g_private_new$MH,"g_private_new");
    }
    public static MemoryAddress g_private_new ( Addressable notify) {
        var mh$ = g_private_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_private_init$MH() {
        return RuntimeHelper.requireNonNull(constants$373.g_static_private_init$MH,"g_static_private_init");
    }
    public static void g_static_private_init ( Addressable private_key) {
        var mh$ = g_static_private_init$MH();
        try {
            mh$.invokeExact(private_key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_private_get$MH() {
        return RuntimeHelper.requireNonNull(constants$373.g_static_private_get$MH,"g_static_private_get");
    }
    public static MemoryAddress g_static_private_get ( Addressable private_key) {
        var mh$ = g_static_private_get$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact(private_key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_private_set$MH() {
        return RuntimeHelper.requireNonNull(constants$373.g_static_private_set$MH,"g_static_private_set");
    }
    public static void g_static_private_set ( Addressable private_key,  Addressable data,  Addressable notify) {
        var mh$ = g_static_private_set$MH();
        try {
            mh$.invokeExact(private_key, data, notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_static_private_free$MH() {
        return RuntimeHelper.requireNonNull(constants$374.g_static_private_free$MH,"g_static_private_free");
    }
    public static void g_static_private_free ( Addressable private_key) {
        var mh$ = g_static_private_free$MH();
        try {
            mh$.invokeExact(private_key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_once_init_enter_impl$MH() {
        return RuntimeHelper.requireNonNull(constants$374.g_once_init_enter_impl$MH,"g_once_init_enter_impl");
    }
    public static int g_once_init_enter_impl ( Addressable location) {
        var mh$ = g_once_init_enter_impl$MH();
        try {
            return (int)mh$.invokeExact(location);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_init$MH() {
        return RuntimeHelper.requireNonNull(constants$374.g_thread_init$MH,"g_thread_init");
    }
    public static void g_thread_init ( Addressable vtable) {
        var mh$ = g_thread_init$MH();
        try {
            mh$.invokeExact(vtable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_init_with_errorcheck_mutexes$MH() {
        return RuntimeHelper.requireNonNull(constants$374.g_thread_init_with_errorcheck_mutexes$MH,"g_thread_init_with_errorcheck_mutexes");
    }
    public static void g_thread_init_with_errorcheck_mutexes ( Addressable vtable) {
        var mh$ = g_thread_init_with_errorcheck_mutexes$MH();
        try {
            mh$.invokeExact(vtable);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_get_initialized$MH() {
        return RuntimeHelper.requireNonNull(constants$374.g_thread_get_initialized$MH,"g_thread_get_initialized");
    }
    public static int g_thread_get_initialized () {
        var mh$ = g_thread_get_initialized$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout g_threads_got_initialized$LAYOUT() {
        return constants$374.g_threads_got_initialized$LAYOUT;
    }
    public static VarHandle g_threads_got_initialized$VH() {
        return constants$374.g_threads_got_initialized$VH;
    }
    public static MemorySegment g_threads_got_initialized$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$374.g_threads_got_initialized$SEGMENT,"g_threads_got_initialized");
    }
    public static int g_threads_got_initialized$get() {
        return (int) constants$374.g_threads_got_initialized$VH.get(RuntimeHelper.requireNonNull(constants$374.g_threads_got_initialized$SEGMENT, "g_threads_got_initialized"));
    }
    public static void g_threads_got_initialized$set( int x) {
        constants$374.g_threads_got_initialized$VH.set(RuntimeHelper.requireNonNull(constants$374.g_threads_got_initialized$SEGMENT, "g_threads_got_initialized"), x);
    }
    public static MethodHandle g_mutex_new$MH() {
        return RuntimeHelper.requireNonNull(constants$375.g_mutex_new$MH,"g_mutex_new");
    }
    public static MemoryAddress g_mutex_new () {
        var mh$ = g_mutex_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mutex_free$MH() {
        return RuntimeHelper.requireNonNull(constants$375.g_mutex_free$MH,"g_mutex_free");
    }
    public static void g_mutex_free ( Addressable mutex) {
        var mh$ = g_mutex_free$MH();
        try {
            mh$.invokeExact(mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_new$MH() {
        return RuntimeHelper.requireNonNull(constants$375.g_cond_new$MH,"g_cond_new");
    }
    public static MemoryAddress g_cond_new () {
        var mh$ = g_cond_new$MH();
        try {
            return (java.lang.foreign.MemoryAddress)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_free$MH() {
        return RuntimeHelper.requireNonNull(constants$375.g_cond_free$MH,"g_cond_free");
    }
    public static void g_cond_free ( Addressable cond) {
        var mh$ = g_cond_free$MH();
        try {
            mh$.invokeExact(cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cond_timed_wait$MH() {
        return RuntimeHelper.requireNonNull(constants$375.g_cond_timed_wait$MH,"g_cond_timed_wait");
    }
    public static int g_cond_timed_wait ( Addressable cond,  Addressable mutex,  Addressable timeval) {
        var mh$ = g_cond_timed_wait$MH();
        try {
            return (int)mh$.invokeExact(cond, mutex, timeval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_autoptr_cleanup_generic_gfree$MH() {
        return RuntimeHelper.requireNonNull(constants$375.g_autoptr_cleanup_generic_gfree$MH,"g_autoptr_cleanup_generic_gfree");
    }
    public static void g_autoptr_cleanup_generic_gfree ( Addressable p) {
        var mh$ = g_autoptr_cleanup_generic_gfree$MH();
        try {
            mh$.invokeExact(p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_autoptr_cleanup_gstring_free$MH() {
        return RuntimeHelper.requireNonNull(constants$376.g_autoptr_cleanup_gstring_free$MH,"g_autoptr_cleanup_gstring_free");
    }
    public static void g_autoptr_cleanup_gstring_free ( Addressable string) {
        var mh$ = g_autoptr_cleanup_gstring_free$MH();
        try {
            mh$.invokeExact(string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GAsyncQueue_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GAsyncQueue_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GAsyncQueue_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GAsyncQueue_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GAsyncQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$376.glib_autoptr_clear_GAsyncQueue$MH,"glib_autoptr_clear_GAsyncQueue");
    }
    public static void glib_autoptr_clear_GAsyncQueue ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GAsyncQueue$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GAsyncQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$376.glib_autoptr_cleanup_GAsyncQueue$MH,"glib_autoptr_cleanup_GAsyncQueue");
    }
    public static void glib_autoptr_cleanup_GAsyncQueue ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GAsyncQueue$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GAsyncQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$376.glib_listautoptr_cleanup_GAsyncQueue$MH,"glib_listautoptr_cleanup_GAsyncQueue");
    }
    public static void glib_listautoptr_cleanup_GAsyncQueue ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GAsyncQueue$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GAsyncQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$376.glib_slistautoptr_cleanup_GAsyncQueue$MH,"glib_slistautoptr_cleanup_GAsyncQueue");
    }
    public static void glib_slistautoptr_cleanup_GAsyncQueue ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GAsyncQueue$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GAsyncQueue$MH() {
        return RuntimeHelper.requireNonNull(constants$376.glib_queueautoptr_cleanup_GAsyncQueue$MH,"glib_queueautoptr_cleanup_GAsyncQueue");
    }
    public static void glib_queueautoptr_cleanup_GAsyncQueue ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GAsyncQueue$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GBookmarkFile_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GBookmarkFile_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GBookmarkFile_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GBookmarkFile_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GBookmarkFile$MH() {
        return RuntimeHelper.requireNonNull(constants$377.glib_autoptr_clear_GBookmarkFile$MH,"glib_autoptr_clear_GBookmarkFile");
    }
    public static void glib_autoptr_clear_GBookmarkFile ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GBookmarkFile$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GBookmarkFile$MH() {
        return RuntimeHelper.requireNonNull(constants$377.glib_autoptr_cleanup_GBookmarkFile$MH,"glib_autoptr_cleanup_GBookmarkFile");
    }
    public static void glib_autoptr_cleanup_GBookmarkFile ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GBookmarkFile$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GBookmarkFile$MH() {
        return RuntimeHelper.requireNonNull(constants$377.glib_listautoptr_cleanup_GBookmarkFile$MH,"glib_listautoptr_cleanup_GBookmarkFile");
    }
    public static void glib_listautoptr_cleanup_GBookmarkFile ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GBookmarkFile$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GBookmarkFile$MH() {
        return RuntimeHelper.requireNonNull(constants$377.glib_slistautoptr_cleanup_GBookmarkFile$MH,"glib_slistautoptr_cleanup_GBookmarkFile");
    }
    public static void glib_slistautoptr_cleanup_GBookmarkFile ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GBookmarkFile$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GBookmarkFile$MH() {
        return RuntimeHelper.requireNonNull(constants$377.glib_queueautoptr_cleanup_GBookmarkFile$MH,"glib_queueautoptr_cleanup_GBookmarkFile");
    }
    public static void glib_queueautoptr_cleanup_GBookmarkFile ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GBookmarkFile$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GBytes_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GBytes_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GBytes_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GBytes_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$377.glib_autoptr_clear_GBytes$MH,"glib_autoptr_clear_GBytes");
    }
    public static void glib_autoptr_clear_GBytes ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GBytes$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$378.glib_autoptr_cleanup_GBytes$MH,"glib_autoptr_cleanup_GBytes");
    }
    public static void glib_autoptr_cleanup_GBytes ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GBytes$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$378.glib_listautoptr_cleanup_GBytes$MH,"glib_listautoptr_cleanup_GBytes");
    }
    public static void glib_listautoptr_cleanup_GBytes ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GBytes$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$378.glib_slistautoptr_cleanup_GBytes$MH,"glib_slistautoptr_cleanup_GBytes");
    }
    public static void glib_slistautoptr_cleanup_GBytes ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GBytes$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GBytes$MH() {
        return RuntimeHelper.requireNonNull(constants$378.glib_queueautoptr_cleanup_GBytes$MH,"glib_queueautoptr_cleanup_GBytes");
    }
    public static void glib_queueautoptr_cleanup_GBytes ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GBytes$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GChecksum_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GChecksum_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GChecksum_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GChecksum_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GChecksum$MH() {
        return RuntimeHelper.requireNonNull(constants$378.glib_autoptr_clear_GChecksum$MH,"glib_autoptr_clear_GChecksum");
    }
    public static void glib_autoptr_clear_GChecksum ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GChecksum$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GChecksum$MH() {
        return RuntimeHelper.requireNonNull(constants$378.glib_autoptr_cleanup_GChecksum$MH,"glib_autoptr_cleanup_GChecksum");
    }
    public static void glib_autoptr_cleanup_GChecksum ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GChecksum$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GChecksum$MH() {
        return RuntimeHelper.requireNonNull(constants$379.glib_listautoptr_cleanup_GChecksum$MH,"glib_listautoptr_cleanup_GChecksum");
    }
    public static void glib_listautoptr_cleanup_GChecksum ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GChecksum$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GChecksum$MH() {
        return RuntimeHelper.requireNonNull(constants$379.glib_slistautoptr_cleanup_GChecksum$MH,"glib_slistautoptr_cleanup_GChecksum");
    }
    public static void glib_slistautoptr_cleanup_GChecksum ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GChecksum$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GChecksum$MH() {
        return RuntimeHelper.requireNonNull(constants$379.glib_queueautoptr_cleanup_GChecksum$MH,"glib_queueautoptr_cleanup_GChecksum");
    }
    public static void glib_queueautoptr_cleanup_GChecksum ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GChecksum$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GDateTime_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GDateTime_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GDateTime_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GDateTime_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GDateTime$MH() {
        return RuntimeHelper.requireNonNull(constants$379.glib_autoptr_clear_GDateTime$MH,"glib_autoptr_clear_GDateTime");
    }
    public static void glib_autoptr_clear_GDateTime ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GDateTime$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GDateTime$MH() {
        return RuntimeHelper.requireNonNull(constants$379.glib_autoptr_cleanup_GDateTime$MH,"glib_autoptr_cleanup_GDateTime");
    }
    public static void glib_autoptr_cleanup_GDateTime ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GDateTime$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GDateTime$MH() {
        return RuntimeHelper.requireNonNull(constants$379.glib_listautoptr_cleanup_GDateTime$MH,"glib_listautoptr_cleanup_GDateTime");
    }
    public static void glib_listautoptr_cleanup_GDateTime ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GDateTime$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GDateTime$MH() {
        return RuntimeHelper.requireNonNull(constants$380.glib_slistautoptr_cleanup_GDateTime$MH,"glib_slistautoptr_cleanup_GDateTime");
    }
    public static void glib_slistautoptr_cleanup_GDateTime ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GDateTime$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GDateTime$MH() {
        return RuntimeHelper.requireNonNull(constants$380.glib_queueautoptr_cleanup_GDateTime$MH,"glib_queueautoptr_cleanup_GDateTime");
    }
    public static void glib_queueautoptr_cleanup_GDateTime ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GDateTime$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GDate_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GDate_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GDate_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GDate_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GDate$MH() {
        return RuntimeHelper.requireNonNull(constants$380.glib_autoptr_clear_GDate$MH,"glib_autoptr_clear_GDate");
    }
    public static void glib_autoptr_clear_GDate ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GDate$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GDate$MH() {
        return RuntimeHelper.requireNonNull(constants$380.glib_autoptr_cleanup_GDate$MH,"glib_autoptr_cleanup_GDate");
    }
    public static void glib_autoptr_cleanup_GDate ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GDate$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GDate$MH() {
        return RuntimeHelper.requireNonNull(constants$380.glib_listautoptr_cleanup_GDate$MH,"glib_listautoptr_cleanup_GDate");
    }
    public static void glib_listautoptr_cleanup_GDate ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GDate$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GDate$MH() {
        return RuntimeHelper.requireNonNull(constants$380.glib_slistautoptr_cleanup_GDate$MH,"glib_slistautoptr_cleanup_GDate");
    }
    public static void glib_slistautoptr_cleanup_GDate ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GDate$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GDate$MH() {
        return RuntimeHelper.requireNonNull(constants$381.glib_queueautoptr_cleanup_GDate$MH,"glib_queueautoptr_cleanup_GDate");
    }
    public static void glib_queueautoptr_cleanup_GDate ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GDate$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GDir_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GDir_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GDir_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GDir_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GDir$MH() {
        return RuntimeHelper.requireNonNull(constants$381.glib_autoptr_clear_GDir$MH,"glib_autoptr_clear_GDir");
    }
    public static void glib_autoptr_clear_GDir ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GDir$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GDir$MH() {
        return RuntimeHelper.requireNonNull(constants$381.glib_autoptr_cleanup_GDir$MH,"glib_autoptr_cleanup_GDir");
    }
    public static void glib_autoptr_cleanup_GDir ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GDir$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GDir$MH() {
        return RuntimeHelper.requireNonNull(constants$381.glib_listautoptr_cleanup_GDir$MH,"glib_listautoptr_cleanup_GDir");
    }
    public static void glib_listautoptr_cleanup_GDir ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GDir$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GDir$MH() {
        return RuntimeHelper.requireNonNull(constants$381.glib_slistautoptr_cleanup_GDir$MH,"glib_slistautoptr_cleanup_GDir");
    }
    public static void glib_slistautoptr_cleanup_GDir ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GDir$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GDir$MH() {
        return RuntimeHelper.requireNonNull(constants$381.glib_queueautoptr_cleanup_GDir$MH,"glib_queueautoptr_cleanup_GDir");
    }
    public static void glib_queueautoptr_cleanup_GDir ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GDir$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GError_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GError_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GError_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GError_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GError$MH() {
        return RuntimeHelper.requireNonNull(constants$382.glib_autoptr_clear_GError$MH,"glib_autoptr_clear_GError");
    }
    public static void glib_autoptr_clear_GError ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GError$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GError$MH() {
        return RuntimeHelper.requireNonNull(constants$382.glib_autoptr_cleanup_GError$MH,"glib_autoptr_cleanup_GError");
    }
    public static void glib_autoptr_cleanup_GError ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GError$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GError$MH() {
        return RuntimeHelper.requireNonNull(constants$382.glib_listautoptr_cleanup_GError$MH,"glib_listautoptr_cleanup_GError");
    }
    public static void glib_listautoptr_cleanup_GError ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GError$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GError$MH() {
        return RuntimeHelper.requireNonNull(constants$382.glib_slistautoptr_cleanup_GError$MH,"glib_slistautoptr_cleanup_GError");
    }
    public static void glib_slistautoptr_cleanup_GError ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GError$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GError$MH() {
        return RuntimeHelper.requireNonNull(constants$382.glib_queueautoptr_cleanup_GError$MH,"glib_queueautoptr_cleanup_GError");
    }
    public static void glib_queueautoptr_cleanup_GError ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GError$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GHashTable_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GHashTable_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GHashTable_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GHashTable_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GHashTable$MH() {
        return RuntimeHelper.requireNonNull(constants$382.glib_autoptr_clear_GHashTable$MH,"glib_autoptr_clear_GHashTable");
    }
    public static void glib_autoptr_clear_GHashTable ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GHashTable$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GHashTable$MH() {
        return RuntimeHelper.requireNonNull(constants$383.glib_autoptr_cleanup_GHashTable$MH,"glib_autoptr_cleanup_GHashTable");
    }
    public static void glib_autoptr_cleanup_GHashTable ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GHashTable$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GHashTable$MH() {
        return RuntimeHelper.requireNonNull(constants$383.glib_listautoptr_cleanup_GHashTable$MH,"glib_listautoptr_cleanup_GHashTable");
    }
    public static void glib_listautoptr_cleanup_GHashTable ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GHashTable$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GHashTable$MH() {
        return RuntimeHelper.requireNonNull(constants$383.glib_slistautoptr_cleanup_GHashTable$MH,"glib_slistautoptr_cleanup_GHashTable");
    }
    public static void glib_slistautoptr_cleanup_GHashTable ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GHashTable$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GHashTable$MH() {
        return RuntimeHelper.requireNonNull(constants$383.glib_queueautoptr_cleanup_GHashTable$MH,"glib_queueautoptr_cleanup_GHashTable");
    }
    public static void glib_queueautoptr_cleanup_GHashTable ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GHashTable$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GHmac_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GHmac_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GHmac_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GHmac_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GHmac$MH() {
        return RuntimeHelper.requireNonNull(constants$383.glib_autoptr_clear_GHmac$MH,"glib_autoptr_clear_GHmac");
    }
    public static void glib_autoptr_clear_GHmac ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GHmac$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GHmac$MH() {
        return RuntimeHelper.requireNonNull(constants$383.glib_autoptr_cleanup_GHmac$MH,"glib_autoptr_cleanup_GHmac");
    }
    public static void glib_autoptr_cleanup_GHmac ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GHmac$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GHmac$MH() {
        return RuntimeHelper.requireNonNull(constants$384.glib_listautoptr_cleanup_GHmac$MH,"glib_listautoptr_cleanup_GHmac");
    }
    public static void glib_listautoptr_cleanup_GHmac ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GHmac$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GHmac$MH() {
        return RuntimeHelper.requireNonNull(constants$384.glib_slistautoptr_cleanup_GHmac$MH,"glib_slistautoptr_cleanup_GHmac");
    }
    public static void glib_slistautoptr_cleanup_GHmac ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GHmac$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GHmac$MH() {
        return RuntimeHelper.requireNonNull(constants$384.glib_queueautoptr_cleanup_GHmac$MH,"glib_queueautoptr_cleanup_GHmac");
    }
    public static void glib_queueautoptr_cleanup_GHmac ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GHmac$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GIOChannel_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GIOChannel_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GIOChannel_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GIOChannel_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GIOChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$384.glib_autoptr_clear_GIOChannel$MH,"glib_autoptr_clear_GIOChannel");
    }
    public static void glib_autoptr_clear_GIOChannel ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GIOChannel$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GIOChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$384.glib_autoptr_cleanup_GIOChannel$MH,"glib_autoptr_cleanup_GIOChannel");
    }
    public static void glib_autoptr_cleanup_GIOChannel ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GIOChannel$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GIOChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$384.glib_listautoptr_cleanup_GIOChannel$MH,"glib_listautoptr_cleanup_GIOChannel");
    }
    public static void glib_listautoptr_cleanup_GIOChannel ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GIOChannel$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GIOChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$385.glib_slistautoptr_cleanup_GIOChannel$MH,"glib_slistautoptr_cleanup_GIOChannel");
    }
    public static void glib_slistautoptr_cleanup_GIOChannel ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GIOChannel$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GIOChannel$MH() {
        return RuntimeHelper.requireNonNull(constants$385.glib_queueautoptr_cleanup_GIOChannel$MH,"glib_queueautoptr_cleanup_GIOChannel");
    }
    public static void glib_queueautoptr_cleanup_GIOChannel ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GIOChannel$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GKeyFile_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GKeyFile_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GKeyFile_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GKeyFile_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GKeyFile$MH() {
        return RuntimeHelper.requireNonNull(constants$385.glib_autoptr_clear_GKeyFile$MH,"glib_autoptr_clear_GKeyFile");
    }
    public static void glib_autoptr_clear_GKeyFile ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GKeyFile$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GKeyFile$MH() {
        return RuntimeHelper.requireNonNull(constants$385.glib_autoptr_cleanup_GKeyFile$MH,"glib_autoptr_cleanup_GKeyFile");
    }
    public static void glib_autoptr_cleanup_GKeyFile ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GKeyFile$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GKeyFile$MH() {
        return RuntimeHelper.requireNonNull(constants$385.glib_listautoptr_cleanup_GKeyFile$MH,"glib_listautoptr_cleanup_GKeyFile");
    }
    public static void glib_listautoptr_cleanup_GKeyFile ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GKeyFile$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GKeyFile$MH() {
        return RuntimeHelper.requireNonNull(constants$385.glib_slistautoptr_cleanup_GKeyFile$MH,"glib_slistautoptr_cleanup_GKeyFile");
    }
    public static void glib_slistautoptr_cleanup_GKeyFile ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GKeyFile$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GKeyFile$MH() {
        return RuntimeHelper.requireNonNull(constants$386.glib_queueautoptr_cleanup_GKeyFile$MH,"glib_queueautoptr_cleanup_GKeyFile");
    }
    public static void glib_queueautoptr_cleanup_GKeyFile ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GKeyFile$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GList_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GList_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GList_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GList_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GList$MH() {
        return RuntimeHelper.requireNonNull(constants$386.glib_autoptr_clear_GList$MH,"glib_autoptr_clear_GList");
    }
    public static void glib_autoptr_clear_GList ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GList$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GList$MH() {
        return RuntimeHelper.requireNonNull(constants$386.glib_autoptr_cleanup_GList$MH,"glib_autoptr_cleanup_GList");
    }
    public static void glib_autoptr_cleanup_GList ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GList$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GList$MH() {
        return RuntimeHelper.requireNonNull(constants$386.glib_listautoptr_cleanup_GList$MH,"glib_listautoptr_cleanup_GList");
    }
    public static void glib_listautoptr_cleanup_GList ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GList$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GList$MH() {
        return RuntimeHelper.requireNonNull(constants$386.glib_slistautoptr_cleanup_GList$MH,"glib_slistautoptr_cleanup_GList");
    }
    public static void glib_slistautoptr_cleanup_GList ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GList$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_queueautoptr_cleanup_GList$MH() {
        return RuntimeHelper.requireNonNull(constants$386.glib_queueautoptr_cleanup_GList$MH,"glib_queueautoptr_cleanup_GList");
    }
    public static void glib_queueautoptr_cleanup_GList ( Addressable _q) {
        var mh$ = glib_queueautoptr_cleanup_GList$MH();
        try {
            mh$.invokeExact(_q);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static OfAddress GArray_autoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GArray_listautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GArray_slistautoptr = Constants$root.C_POINTER$LAYOUT;
    public static OfAddress GArray_queueautoptr = Constants$root.C_POINTER$LAYOUT;
    public static MethodHandle glib_autoptr_clear_GArray$MH() {
        return RuntimeHelper.requireNonNull(constants$387.glib_autoptr_clear_GArray$MH,"glib_autoptr_clear_GArray");
    }
    public static void glib_autoptr_clear_GArray ( Addressable _ptr) {
        var mh$ = glib_autoptr_clear_GArray$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_autoptr_cleanup_GArray$MH() {
        return RuntimeHelper.requireNonNull(constants$387.glib_autoptr_cleanup_GArray$MH,"glib_autoptr_cleanup_GArray");
    }
    public static void glib_autoptr_cleanup_GArray ( Addressable _ptr) {
        var mh$ = glib_autoptr_cleanup_GArray$MH();
        try {
            mh$.invokeExact(_ptr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_listautoptr_cleanup_GArray$MH() {
        return RuntimeHelper.requireNonNull(constants$387.glib_listautoptr_cleanup_GArray$MH,"glib_listautoptr_cleanup_GArray");
    }
    public static void glib_listautoptr_cleanup_GArray ( Addressable _l) {
        var mh$ = glib_listautoptr_cleanup_GArray$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle glib_slistautoptr_cleanup_GArray$MH() {
        return RuntimeHelper.requireNonNull(constants$387.glib_slistautoptr_cleanup_GArray$MH,"glib_slistautoptr_cleanup_GArray");
    }
    public static void glib_slistautoptr_cleanup_GArray ( Addressable _l) {
        var mh$ = glib_slistautoptr_cleanup_GArray$MH();
        try {
            mh$.invokeExact(_l);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


