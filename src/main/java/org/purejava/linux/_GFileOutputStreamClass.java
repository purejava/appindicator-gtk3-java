// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GFileOutputStreamClass {
 *     GOutputStreamClass parent_class;
 *     goffset (*tell)(GFileOutputStream*);
 *     gboolean (*can_seek)(GFileOutputStream*);
 *     gboolean (*seek)(GFileOutputStream*,goffset,GSeekType,GCancellable*,GError**);
 *     gboolean (*can_truncate)(GFileOutputStream*);
 *     gboolean (*truncate_fn)(GFileOutputStream*,goffset,GCancellable*,GError**);
 *     GFileInfo* (*query_info)(GFileOutputStream*,char*,GCancellable*,GError**);
 *     void (*query_info_async)(GFileOutputStream*,char*,int,GCancellable*,GAsyncReadyCallback,gpointer);
 *     GFileInfo* (*query_info_finish)(GFileOutputStream*,GAsyncResult*,GError**);
 *     char* (*get_etag)(GFileOutputStream*);
 *     void (*_g_reserved1)();
 *     void (*_g_reserved2)();
 *     void (*_g_reserved3)();
 *     void (*_g_reserved4)();
 *     void (*_g_reserved5)();
 * };
 * }
 */
public class _GFileOutputStreamClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
                MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class"),
            Constants$root.C_POINTER$LAYOUT.withName("write_fn"),
            Constants$root.C_POINTER$LAYOUT.withName("splice"),
            Constants$root.C_POINTER$LAYOUT.withName("flush"),
            Constants$root.C_POINTER$LAYOUT.withName("close_fn"),
            Constants$root.C_POINTER$LAYOUT.withName("write_async"),
            Constants$root.C_POINTER$LAYOUT.withName("write_finish"),
            Constants$root.C_POINTER$LAYOUT.withName("splice_async"),
            Constants$root.C_POINTER$LAYOUT.withName("splice_finish"),
            Constants$root.C_POINTER$LAYOUT.withName("flush_async"),
            Constants$root.C_POINTER$LAYOUT.withName("flush_finish"),
            Constants$root.C_POINTER$LAYOUT.withName("close_async"),
            Constants$root.C_POINTER$LAYOUT.withName("close_finish"),
            Constants$root.C_POINTER$LAYOUT.withName("writev_fn"),
            Constants$root.C_POINTER$LAYOUT.withName("writev_async"),
            Constants$root.C_POINTER$LAYOUT.withName("writev_finish"),
            Constants$root.C_POINTER$LAYOUT.withName("_g_reserved4"),
            Constants$root.C_POINTER$LAYOUT.withName("_g_reserved5"),
            Constants$root.C_POINTER$LAYOUT.withName("_g_reserved6"),
            Constants$root.C_POINTER$LAYOUT.withName("_g_reserved7"),
            Constants$root.C_POINTER$LAYOUT.withName("_g_reserved8")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("tell"),
        Constants$root.C_POINTER$LAYOUT.withName("can_seek"),
        Constants$root.C_POINTER$LAYOUT.withName("seek"),
        Constants$root.C_POINTER$LAYOUT.withName("can_truncate"),
        Constants$root.C_POINTER$LAYOUT.withName("truncate_fn"),
        Constants$root.C_POINTER$LAYOUT.withName("query_info"),
        Constants$root.C_POINTER$LAYOUT.withName("query_info_async"),
        Constants$root.C_POINTER$LAYOUT.withName("query_info_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("get_etag"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved5")
    ).withName("_GFileOutputStreamClass");
    public static MemoryLayout $LAYOUT() {
        return _GFileOutputStreamClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 296);
    }
    static final FunctionDescriptor tell$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor tell_UP$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle tell_UP$MH = RuntimeHelper.upcallHandle(tell.class, "apply", _GFileOutputStreamClass.tell_UP$FUNC);
    static final FunctionDescriptor tell_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle tell_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass.tell_DOWN$FUNC
    );
    /**
     * {@snippet :
 * goffset (*tell)(GFileOutputStream*);
     * }
     */
    public interface tell {

        long apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(tell fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass.tell_UP$MH, fi, _GFileOutputStreamClass.tell$FUNC, scope);
        }
        static tell ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (long)_GFileOutputStreamClass.tell_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle tell$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tell"));
    public static VarHandle tell$VH() {
        return _GFileOutputStreamClass.tell$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * goffset (*tell)(GFileOutputStream*);
     * }
     */
    public static MemorySegment tell$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.tell$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * goffset (*tell)(GFileOutputStream*);
     * }
     */
    public static void tell$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass.tell$VH.set(seg, x);
    }
    public static MemorySegment tell$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.tell$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tell$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass.tell$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static tell tell(MemorySegment segment, SegmentScope scope) {
        return tell.ofAddress(tell$get(segment), scope);
    }
    static final FunctionDescriptor can_seek$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor can_seek_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_seek_UP$MH = RuntimeHelper.upcallHandle(can_seek.class, "apply", _GFileOutputStreamClass.can_seek_UP$FUNC);
    static final FunctionDescriptor can_seek_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_seek_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass.can_seek_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*can_seek)(GFileOutputStream*);
     * }
     */
    public interface can_seek {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(can_seek fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass.can_seek_UP$MH, fi, _GFileOutputStreamClass.can_seek$FUNC, scope);
        }
        static can_seek ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GFileOutputStreamClass.can_seek_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("can_seek"));
    public static VarHandle can_seek$VH() {
        return _GFileOutputStreamClass.can_seek$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*can_seek)(GFileOutputStream*);
     * }
     */
    public static MemorySegment can_seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.can_seek$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*can_seek)(GFileOutputStream*);
     * }
     */
    public static void can_seek$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass.can_seek$VH.set(seg, x);
    }
    public static MemorySegment can_seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.can_seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_seek$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass.can_seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_seek can_seek(MemorySegment segment, SegmentScope scope) {
        return can_seek.ofAddress(can_seek$get(segment), scope);
    }
    static final FunctionDescriptor seek$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor seek_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle seek_UP$MH = RuntimeHelper.upcallHandle(seek.class, "apply", _GFileOutputStreamClass.seek_UP$FUNC);
    static final FunctionDescriptor seek_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle seek_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass.seek_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*seek)(GFileOutputStream*,goffset,GSeekType,GCancellable*,GError**);
     * }
     */
    public interface seek {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(seek fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass.seek_UP$MH, fi, _GFileOutputStreamClass.seek$FUNC, scope);
        }
        static seek ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, long __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)_GFileOutputStreamClass.seek_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle seek$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("seek"));
    public static VarHandle seek$VH() {
        return _GFileOutputStreamClass.seek$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*seek)(GFileOutputStream*,goffset,GSeekType,GCancellable*,GError**);
     * }
     */
    public static MemorySegment seek$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.seek$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*seek)(GFileOutputStream*,goffset,GSeekType,GCancellable*,GError**);
     * }
     */
    public static void seek$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass.seek$VH.set(seg, x);
    }
    public static MemorySegment seek$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.seek$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void seek$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass.seek$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static seek seek(MemorySegment segment, SegmentScope scope) {
        return seek.ofAddress(seek$get(segment), scope);
    }
    static final FunctionDescriptor can_truncate$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor can_truncate_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_truncate_UP$MH = RuntimeHelper.upcallHandle(can_truncate.class, "apply", _GFileOutputStreamClass.can_truncate_UP$FUNC);
    static final FunctionDescriptor can_truncate_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_truncate_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass.can_truncate_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*can_truncate)(GFileOutputStream*);
     * }
     */
    public interface can_truncate {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(can_truncate fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass.can_truncate_UP$MH, fi, _GFileOutputStreamClass.can_truncate$FUNC, scope);
        }
        static can_truncate ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)_GFileOutputStreamClass.can_truncate_DOWN$MH.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_truncate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("can_truncate"));
    public static VarHandle can_truncate$VH() {
        return _GFileOutputStreamClass.can_truncate$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*can_truncate)(GFileOutputStream*);
     * }
     */
    public static MemorySegment can_truncate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.can_truncate$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*can_truncate)(GFileOutputStream*);
     * }
     */
    public static void can_truncate$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass.can_truncate$VH.set(seg, x);
    }
    public static MemorySegment can_truncate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.can_truncate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_truncate$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass.can_truncate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_truncate can_truncate(MemorySegment segment, SegmentScope scope) {
        return can_truncate.ofAddress(can_truncate$get(segment), scope);
    }
    static final FunctionDescriptor truncate_fn$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor truncate_fn_UP$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle truncate_fn_UP$MH = RuntimeHelper.upcallHandle(truncate_fn.class, "apply", _GFileOutputStreamClass.truncate_fn_UP$FUNC);
    static final FunctionDescriptor truncate_fn_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle truncate_fn_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass.truncate_fn_DOWN$FUNC
    );
    /**
     * {@snippet :
 * gboolean (*truncate_fn)(GFileOutputStream*,goffset,GCancellable*,GError**);
     * }
     */
    public interface truncate_fn {

        int apply(java.lang.foreign.MemorySegment _x0, long _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(truncate_fn fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass.truncate_fn_UP$MH, fi, _GFileOutputStreamClass.truncate_fn$FUNC, scope);
        }
        static truncate_fn ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, long __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    return (int)_GFileOutputStreamClass.truncate_fn_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle truncate_fn$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("truncate_fn"));
    public static VarHandle truncate_fn$VH() {
        return _GFileOutputStreamClass.truncate_fn$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * gboolean (*truncate_fn)(GFileOutputStream*,goffset,GCancellable*,GError**);
     * }
     */
    public static MemorySegment truncate_fn$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.truncate_fn$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * gboolean (*truncate_fn)(GFileOutputStream*,goffset,GCancellable*,GError**);
     * }
     */
    public static void truncate_fn$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass.truncate_fn$VH.set(seg, x);
    }
    public static MemorySegment truncate_fn$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.truncate_fn$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void truncate_fn$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass.truncate_fn$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static truncate_fn truncate_fn(MemorySegment segment, SegmentScope scope) {
        return truncate_fn.ofAddress(truncate_fn$get(segment), scope);
    }
    static final FunctionDescriptor query_info$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor query_info_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle query_info_UP$MH = RuntimeHelper.upcallHandle(query_info.class, "apply", _GFileOutputStreamClass.query_info_UP$FUNC);
    static final FunctionDescriptor query_info_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle query_info_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass.query_info_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GFileInfo* (*query_info)(GFileOutputStream*,char*,GCancellable*,GError**);
     * }
     */
    public interface query_info {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment pattern, java.lang.foreign.MemorySegment callback_data, java.lang.foreign.MemorySegment target, java.lang.foreign.MemorySegment extents);
        static MemorySegment allocate(query_info fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass.query_info_UP$MH, fi, _GFileOutputStreamClass.query_info$FUNC, scope);
        }
        static query_info ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _pattern, java.lang.foreign.MemorySegment _callback_data, java.lang.foreign.MemorySegment _target, java.lang.foreign.MemorySegment _extents) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.query_info_DOWN$MH.invokeExact(symbol, _pattern, _callback_data, _target, _extents);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle query_info$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("query_info"));
    public static VarHandle query_info$VH() {
        return _GFileOutputStreamClass.query_info$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GFileInfo* (*query_info)(GFileOutputStream*,char*,GCancellable*,GError**);
     * }
     */
    public static MemorySegment query_info$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.query_info$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GFileInfo* (*query_info)(GFileOutputStream*,char*,GCancellable*,GError**);
     * }
     */
    public static void query_info$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass.query_info$VH.set(seg, x);
    }
    public static MemorySegment query_info$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.query_info$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void query_info$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass.query_info$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_info query_info(MemorySegment segment, SegmentScope scope) {
        return query_info.ofAddress(query_info$get(segment), scope);
    }
    static final FunctionDescriptor query_info_async$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor query_info_async_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle query_info_async_UP$MH = RuntimeHelper.upcallHandle(query_info_async.class, "apply", _GFileOutputStreamClass.query_info_async_UP$FUNC);
    static final FunctionDescriptor query_info_async_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle query_info_async_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass.query_info_async_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*query_info_async)(GFileOutputStream*,char*,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public interface query_info_async {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(query_info_async fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass.query_info_async_UP$MH, fi, _GFileOutputStreamClass.query_info_async$FUNC, scope);
        }
        static query_info_async ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    _GFileOutputStreamClass.query_info_async_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle query_info_async$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("query_info_async"));
    public static VarHandle query_info_async$VH() {
        return _GFileOutputStreamClass.query_info_async$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*query_info_async)(GFileOutputStream*,char*,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public static MemorySegment query_info_async$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.query_info_async$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*query_info_async)(GFileOutputStream*,char*,int,GCancellable*,GAsyncReadyCallback,gpointer);
     * }
     */
    public static void query_info_async$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass.query_info_async$VH.set(seg, x);
    }
    public static MemorySegment query_info_async$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.query_info_async$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void query_info_async$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass.query_info_async$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_info_async query_info_async(MemorySegment segment, SegmentScope scope) {
        return query_info_async.ofAddress(query_info_async$get(segment), scope);
    }
    static final FunctionDescriptor query_info_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor query_info_finish_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle query_info_finish_UP$MH = RuntimeHelper.upcallHandle(query_info_finish.class, "apply", _GFileOutputStreamClass.query_info_finish_UP$FUNC);
    static final FunctionDescriptor query_info_finish_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle query_info_finish_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass.query_info_finish_DOWN$FUNC
    );
    /**
     * {@snippet :
 * GFileInfo* (*query_info_finish)(GFileOutputStream*,GAsyncResult*,GError**);
     * }
     */
    public interface query_info_finish {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment vfs, java.lang.foreign.MemorySegment identifier, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(query_info_finish fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass.query_info_finish_UP$MH, fi, _GFileOutputStreamClass.query_info_finish$FUNC, scope);
        }
        static query_info_finish ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _vfs, java.lang.foreign.MemorySegment _identifier, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.query_info_finish_DOWN$MH.invokeExact(symbol, _vfs, _identifier, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle query_info_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("query_info_finish"));
    public static VarHandle query_info_finish$VH() {
        return _GFileOutputStreamClass.query_info_finish$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * GFileInfo* (*query_info_finish)(GFileOutputStream*,GAsyncResult*,GError**);
     * }
     */
    public static MemorySegment query_info_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.query_info_finish$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * GFileInfo* (*query_info_finish)(GFileOutputStream*,GAsyncResult*,GError**);
     * }
     */
    public static void query_info_finish$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass.query_info_finish$VH.set(seg, x);
    }
    public static MemorySegment query_info_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.query_info_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void query_info_finish$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass.query_info_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_info_finish query_info_finish(MemorySegment segment, SegmentScope scope) {
        return query_info_finish.ofAddress(query_info_finish$get(segment), scope);
    }
    static final FunctionDescriptor get_etag$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor get_etag_UP$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_etag_UP$MH = RuntimeHelper.upcallHandle(get_etag.class, "apply", _GFileOutputStreamClass.get_etag_UP$FUNC);
    static final FunctionDescriptor get_etag_DOWN$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_etag_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass.get_etag_DOWN$FUNC
    );
    /**
     * {@snippet :
 * char* (*get_etag)(GFileOutputStream*);
     * }
     */
    public interface get_etag {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_etag fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass.get_etag_UP$MH, fi, _GFileOutputStreamClass.get_etag$FUNC, scope);
        }
        static get_etag ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.get_etag_DOWN$MH.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_etag$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_etag"));
    public static VarHandle get_etag$VH() {
        return _GFileOutputStreamClass.get_etag$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_etag)(GFileOutputStream*);
     * }
     */
    public static MemorySegment get_etag$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.get_etag$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_etag)(GFileOutputStream*);
     * }
     */
    public static void get_etag$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass.get_etag$VH.set(seg, x);
    }
    public static MemorySegment get_etag$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass.get_etag$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_etag$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass.get_etag$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_etag get_etag(MemorySegment segment, SegmentScope scope) {
        return get_etag.ofAddress(get_etag$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved1_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved1_UP$MH = RuntimeHelper.upcallHandle(_g_reserved1.class, "apply", _GFileOutputStreamClass._g_reserved1_UP$FUNC);
    static final FunctionDescriptor _g_reserved1_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved1_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass._g_reserved1_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved1)();
     * }
     */
    public interface _g_reserved1 {

        void apply();
        static MemorySegment allocate(_g_reserved1 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass._g_reserved1_UP$MH, fi, _GFileOutputStreamClass._g_reserved1$FUNC, scope);
        }
        static _g_reserved1 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GFileOutputStreamClass._g_reserved1_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved1"));
    public static VarHandle _g_reserved1$VH() {
        return _GFileOutputStreamClass._g_reserved1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static MemorySegment _g_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass._g_reserved1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved1)();
     * }
     */
    public static void _g_reserved1$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass._g_reserved1$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass._g_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass._g_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved1 _g_reserved1(MemorySegment segment, SegmentScope scope) {
        return _g_reserved1.ofAddress(_g_reserved1$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved2_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved2_UP$MH = RuntimeHelper.upcallHandle(_g_reserved2.class, "apply", _GFileOutputStreamClass._g_reserved2_UP$FUNC);
    static final FunctionDescriptor _g_reserved2_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved2_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass._g_reserved2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved2)();
     * }
     */
    public interface _g_reserved2 {

        void apply();
        static MemorySegment allocate(_g_reserved2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass._g_reserved2_UP$MH, fi, _GFileOutputStreamClass._g_reserved2$FUNC, scope);
        }
        static _g_reserved2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GFileOutputStreamClass._g_reserved2_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved2"));
    public static VarHandle _g_reserved2$VH() {
        return _GFileOutputStreamClass._g_reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static MemorySegment _g_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass._g_reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved2)();
     * }
     */
    public static void _g_reserved2$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass._g_reserved2$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass._g_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass._g_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved2 _g_reserved2(MemorySegment segment, SegmentScope scope) {
        return _g_reserved2.ofAddress(_g_reserved2$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved3_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved3_UP$MH = RuntimeHelper.upcallHandle(_g_reserved3.class, "apply", _GFileOutputStreamClass._g_reserved3_UP$FUNC);
    static final FunctionDescriptor _g_reserved3_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved3_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass._g_reserved3_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved3)();
     * }
     */
    public interface _g_reserved3 {

        void apply();
        static MemorySegment allocate(_g_reserved3 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass._g_reserved3_UP$MH, fi, _GFileOutputStreamClass._g_reserved3$FUNC, scope);
        }
        static _g_reserved3 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GFileOutputStreamClass._g_reserved3_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved3"));
    public static VarHandle _g_reserved3$VH() {
        return _GFileOutputStreamClass._g_reserved3$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static MemorySegment _g_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass._g_reserved3$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved3)();
     * }
     */
    public static void _g_reserved3$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass._g_reserved3$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass._g_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass._g_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved3 _g_reserved3(MemorySegment segment, SegmentScope scope) {
        return _g_reserved3.ofAddress(_g_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved4_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved4_UP$MH = RuntimeHelper.upcallHandle(_g_reserved4.class, "apply", _GFileOutputStreamClass._g_reserved4_UP$FUNC);
    static final FunctionDescriptor _g_reserved4_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved4_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass._g_reserved4_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved4)();
     * }
     */
    public interface _g_reserved4 {

        void apply();
        static MemorySegment allocate(_g_reserved4 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass._g_reserved4_UP$MH, fi, _GFileOutputStreamClass._g_reserved4$FUNC, scope);
        }
        static _g_reserved4 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GFileOutputStreamClass._g_reserved4_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved4"));
    public static VarHandle _g_reserved4$VH() {
        return _GFileOutputStreamClass._g_reserved4$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static MemorySegment _g_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass._g_reserved4$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved4)();
     * }
     */
    public static void _g_reserved4$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass._g_reserved4$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass._g_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass._g_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved4 _g_reserved4(MemorySegment segment, SegmentScope scope) {
        return _g_reserved4.ofAddress(_g_reserved4$get(segment), scope);
    }
    static final FunctionDescriptor _g_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _g_reserved5_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved5_UP$MH = RuntimeHelper.upcallHandle(_g_reserved5.class, "apply", _GFileOutputStreamClass._g_reserved5_UP$FUNC);
    static final FunctionDescriptor _g_reserved5_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved5_DOWN$MH = RuntimeHelper.downcallHandle(
        _GFileOutputStreamClass._g_reserved5_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_g_reserved5)();
     * }
     */
    public interface _g_reserved5 {

        void apply();
        static MemorySegment allocate(_g_reserved5 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GFileOutputStreamClass._g_reserved5_UP$MH, fi, _GFileOutputStreamClass._g_reserved5$FUNC, scope);
        }
        static _g_reserved5 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GFileOutputStreamClass._g_reserved5_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved5"));
    public static VarHandle _g_reserved5$VH() {
        return _GFileOutputStreamClass._g_reserved5$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static MemorySegment _g_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass._g_reserved5$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_g_reserved5)();
     * }
     */
    public static void _g_reserved5$set(MemorySegment seg, MemorySegment x) {
        _GFileOutputStreamClass._g_reserved5$VH.set(seg, x);
    }
    public static MemorySegment _g_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GFileOutputStreamClass._g_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        _GFileOutputStreamClass._g_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved5 _g_reserved5(MemorySegment segment, SegmentScope scope) {
        return _g_reserved5.ofAddress(_g_reserved5$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


