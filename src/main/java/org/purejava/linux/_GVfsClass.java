// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GVfsClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("is_active"),
        Constants$root.C_POINTER$LAYOUT.withName("get_file_for_path"),
        Constants$root.C_POINTER$LAYOUT.withName("get_file_for_uri"),
        Constants$root.C_POINTER$LAYOUT.withName("get_supported_uri_schemes"),
        Constants$root.C_POINTER$LAYOUT.withName("parse_name"),
        Constants$root.C_POINTER$LAYOUT.withName("local_file_add_info"),
        Constants$root.C_POINTER$LAYOUT.withName("add_writable_namespaces"),
        Constants$root.C_POINTER$LAYOUT.withName("local_file_set_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("local_file_removed"),
        Constants$root.C_POINTER$LAYOUT.withName("local_file_moved"),
        Constants$root.C_POINTER$LAYOUT.withName("deserialize_icon"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_g_reserved6")
    ).withName("_GVfsClass");
    public static MemoryLayout $LAYOUT() {
        return _GVfsClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor is_active$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle is_active$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.is_active$FUNC
    );
    public interface is_active {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(is_active fi, MemorySession session) {
            return RuntimeHelper.upcallStub(is_active.class, fi, _GVfsClass.is_active$FUNC, session);
        }
        static is_active ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GVfsClass.is_active$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle is_active$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("is_active"));
    public static VarHandle is_active$VH() {
        return _GVfsClass.is_active$VH;
    }
    public static MemoryAddress is_active$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.is_active$VH.get(seg);
    }
    public static void is_active$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.is_active$VH.set(seg, x);
    }
    public static MemoryAddress is_active$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.is_active$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void is_active$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.is_active$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_active is_active (MemorySegment segment, MemorySession session) {
        return is_active.ofAddress(is_active$get(segment), session);
    }
    static final FunctionDescriptor get_file_for_path$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_file_for_path$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.get_file_for_path$FUNC
    );
    public interface get_file_for_path {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_file_for_path fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_file_for_path.class, fi, _GVfsClass.get_file_for_path$FUNC, session);
        }
        static get_file_for_path ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVfsClass.get_file_for_path$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_file_for_path$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_file_for_path"));
    public static VarHandle get_file_for_path$VH() {
        return _GVfsClass.get_file_for_path$VH;
    }
    public static MemoryAddress get_file_for_path$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.get_file_for_path$VH.get(seg);
    }
    public static void get_file_for_path$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.get_file_for_path$VH.set(seg, x);
    }
    public static MemoryAddress get_file_for_path$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.get_file_for_path$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_file_for_path$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.get_file_for_path$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_file_for_path get_file_for_path (MemorySegment segment, MemorySession session) {
        return get_file_for_path.ofAddress(get_file_for_path$get(segment), session);
    }
    static final FunctionDescriptor get_file_for_uri$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_file_for_uri$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.get_file_for_uri$FUNC
    );
    public interface get_file_for_uri {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_file_for_uri fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_file_for_uri.class, fi, _GVfsClass.get_file_for_uri$FUNC, session);
        }
        static get_file_for_uri ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVfsClass.get_file_for_uri$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_file_for_uri$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_file_for_uri"));
    public static VarHandle get_file_for_uri$VH() {
        return _GVfsClass.get_file_for_uri$VH;
    }
    public static MemoryAddress get_file_for_uri$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.get_file_for_uri$VH.get(seg);
    }
    public static void get_file_for_uri$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.get_file_for_uri$VH.set(seg, x);
    }
    public static MemoryAddress get_file_for_uri$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.get_file_for_uri$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_file_for_uri$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.get_file_for_uri$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_file_for_uri get_file_for_uri (MemorySegment segment, MemorySession session) {
        return get_file_for_uri.ofAddress(get_file_for_uri$get(segment), session);
    }
    static final FunctionDescriptor get_supported_uri_schemes$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_supported_uri_schemes$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.get_supported_uri_schemes$FUNC
    );
    public interface get_supported_uri_schemes {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_supported_uri_schemes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_supported_uri_schemes.class, fi, _GVfsClass.get_supported_uri_schemes$FUNC, session);
        }
        static get_supported_uri_schemes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVfsClass.get_supported_uri_schemes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_supported_uri_schemes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_supported_uri_schemes"));
    public static VarHandle get_supported_uri_schemes$VH() {
        return _GVfsClass.get_supported_uri_schemes$VH;
    }
    public static MemoryAddress get_supported_uri_schemes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.get_supported_uri_schemes$VH.get(seg);
    }
    public static void get_supported_uri_schemes$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.get_supported_uri_schemes$VH.set(seg, x);
    }
    public static MemoryAddress get_supported_uri_schemes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.get_supported_uri_schemes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_supported_uri_schemes$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.get_supported_uri_schemes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_supported_uri_schemes get_supported_uri_schemes (MemorySegment segment, MemorySession session) {
        return get_supported_uri_schemes.ofAddress(get_supported_uri_schemes$get(segment), session);
    }
    static final FunctionDescriptor parse_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle parse_name$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.parse_name$FUNC
    );
    public interface parse_name {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(parse_name fi, MemorySession session) {
            return RuntimeHelper.upcallStub(parse_name.class, fi, _GVfsClass.parse_name$FUNC, session);
        }
        static parse_name ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVfsClass.parse_name$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle parse_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("parse_name"));
    public static VarHandle parse_name$VH() {
        return _GVfsClass.parse_name$VH;
    }
    public static MemoryAddress parse_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.parse_name$VH.get(seg);
    }
    public static void parse_name$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.parse_name$VH.set(seg, x);
    }
    public static MemoryAddress parse_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.parse_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void parse_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.parse_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static parse_name parse_name (MemorySegment segment, MemorySession session) {
        return parse_name.ofAddress(parse_name$get(segment), session);
    }
    static final FunctionDescriptor local_file_add_info$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle local_file_add_info$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.local_file_add_info$FUNC
    );
    public interface local_file_add_info {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6, java.lang.foreign.MemoryAddress _x7);
        static MemorySegment allocate(local_file_add_info fi, MemorySession session) {
            return RuntimeHelper.upcallStub(local_file_add_info.class, fi, _GVfsClass.local_file_add_info$FUNC, session);
        }
        static local_file_add_info ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6, java.lang.foreign.MemoryAddress __x7) -> {
                try {
                    _GVfsClass.local_file_add_info$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6, (java.lang.foreign.Addressable)__x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle local_file_add_info$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("local_file_add_info"));
    public static VarHandle local_file_add_info$VH() {
        return _GVfsClass.local_file_add_info$VH;
    }
    public static MemoryAddress local_file_add_info$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.local_file_add_info$VH.get(seg);
    }
    public static void local_file_add_info$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.local_file_add_info$VH.set(seg, x);
    }
    public static MemoryAddress local_file_add_info$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.local_file_add_info$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void local_file_add_info$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.local_file_add_info$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static local_file_add_info local_file_add_info (MemorySegment segment, MemorySession session) {
        return local_file_add_info.ofAddress(local_file_add_info$get(segment), session);
    }
    static final FunctionDescriptor add_writable_namespaces$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_writable_namespaces$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.add_writable_namespaces$FUNC
    );
    public interface add_writable_namespaces {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(add_writable_namespaces fi, MemorySession session) {
            return RuntimeHelper.upcallStub(add_writable_namespaces.class, fi, _GVfsClass.add_writable_namespaces$FUNC, session);
        }
        static add_writable_namespaces ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVfsClass.add_writable_namespaces$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_writable_namespaces$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_writable_namespaces"));
    public static VarHandle add_writable_namespaces$VH() {
        return _GVfsClass.add_writable_namespaces$VH;
    }
    public static MemoryAddress add_writable_namespaces$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.add_writable_namespaces$VH.get(seg);
    }
    public static void add_writable_namespaces$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.add_writable_namespaces$VH.set(seg, x);
    }
    public static MemoryAddress add_writable_namespaces$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.add_writable_namespaces$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_writable_namespaces$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.add_writable_namespaces$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_writable_namespaces add_writable_namespaces (MemorySegment segment, MemorySession session) {
        return add_writable_namespaces.ofAddress(add_writable_namespaces$get(segment), session);
    }
    static final FunctionDescriptor local_file_set_attributes$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle local_file_set_attributes$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.local_file_set_attributes$FUNC
    );
    public interface local_file_set_attributes {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(local_file_set_attributes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(local_file_set_attributes.class, fi, _GVfsClass.local_file_set_attributes$FUNC, session);
        }
        static local_file_set_attributes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    return (int)_GVfsClass.local_file_set_attributes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle local_file_set_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("local_file_set_attributes"));
    public static VarHandle local_file_set_attributes$VH() {
        return _GVfsClass.local_file_set_attributes$VH;
    }
    public static MemoryAddress local_file_set_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.local_file_set_attributes$VH.get(seg);
    }
    public static void local_file_set_attributes$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.local_file_set_attributes$VH.set(seg, x);
    }
    public static MemoryAddress local_file_set_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.local_file_set_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void local_file_set_attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.local_file_set_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static local_file_set_attributes local_file_set_attributes (MemorySegment segment, MemorySession session) {
        return local_file_set_attributes.ofAddress(local_file_set_attributes$get(segment), session);
    }
    static final FunctionDescriptor local_file_removed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle local_file_removed$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.local_file_removed$FUNC
    );
    public interface local_file_removed {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(local_file_removed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(local_file_removed.class, fi, _GVfsClass.local_file_removed$FUNC, session);
        }
        static local_file_removed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GVfsClass.local_file_removed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle local_file_removed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("local_file_removed"));
    public static VarHandle local_file_removed$VH() {
        return _GVfsClass.local_file_removed$VH;
    }
    public static MemoryAddress local_file_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.local_file_removed$VH.get(seg);
    }
    public static void local_file_removed$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.local_file_removed$VH.set(seg, x);
    }
    public static MemoryAddress local_file_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.local_file_removed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void local_file_removed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.local_file_removed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static local_file_removed local_file_removed (MemorySegment segment, MemorySession session) {
        return local_file_removed.ofAddress(local_file_removed$get(segment), session);
    }
    static final FunctionDescriptor local_file_moved$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle local_file_moved$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.local_file_moved$FUNC
    );
    public interface local_file_moved {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(local_file_moved fi, MemorySession session) {
            return RuntimeHelper.upcallStub(local_file_moved.class, fi, _GVfsClass.local_file_moved$FUNC, session);
        }
        static local_file_moved ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GVfsClass.local_file_moved$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle local_file_moved$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("local_file_moved"));
    public static VarHandle local_file_moved$VH() {
        return _GVfsClass.local_file_moved$VH;
    }
    public static MemoryAddress local_file_moved$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.local_file_moved$VH.get(seg);
    }
    public static void local_file_moved$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.local_file_moved$VH.set(seg, x);
    }
    public static MemoryAddress local_file_moved$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.local_file_moved$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void local_file_moved$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.local_file_moved$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static local_file_moved local_file_moved (MemorySegment segment, MemorySession session) {
        return local_file_moved.ofAddress(local_file_moved$get(segment), session);
    }
    static final FunctionDescriptor deserialize_icon$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle deserialize_icon$MH = RuntimeHelper.downcallHandle(
        _GVfsClass.deserialize_icon$FUNC
    );
    public interface deserialize_icon {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(deserialize_icon fi, MemorySession session) {
            return RuntimeHelper.upcallStub(deserialize_icon.class, fi, _GVfsClass.deserialize_icon$FUNC, session);
        }
        static deserialize_icon ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GVfsClass.deserialize_icon$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle deserialize_icon$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("deserialize_icon"));
    public static VarHandle deserialize_icon$VH() {
        return _GVfsClass.deserialize_icon$VH;
    }
    public static MemoryAddress deserialize_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.deserialize_icon$VH.get(seg);
    }
    public static void deserialize_icon$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass.deserialize_icon$VH.set(seg, x);
    }
    public static MemoryAddress deserialize_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass.deserialize_icon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void deserialize_icon$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass.deserialize_icon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static deserialize_icon deserialize_icon (MemorySegment segment, MemorySession session) {
        return deserialize_icon.ofAddress(deserialize_icon$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved1$MH = RuntimeHelper.downcallHandle(
        _GVfsClass._g_reserved1$FUNC
    );
    public interface _g_reserved1 {

        void apply();
        static MemorySegment allocate(_g_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved1.class, fi, _GVfsClass._g_reserved1$FUNC, session);
        }
        static _g_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVfsClass._g_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved1"));
    public static VarHandle _g_reserved1$VH() {
        return _GVfsClass._g_reserved1$VH;
    }
    public static MemoryAddress _g_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved1$VH.get(seg);
    }
    public static void _g_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass._g_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass._g_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved1 _g_reserved1 (MemorySegment segment, MemorySession session) {
        return _g_reserved1.ofAddress(_g_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved2$MH = RuntimeHelper.downcallHandle(
        _GVfsClass._g_reserved2$FUNC
    );
    public interface _g_reserved2 {

        void apply();
        static MemorySegment allocate(_g_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved2.class, fi, _GVfsClass._g_reserved2$FUNC, session);
        }
        static _g_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVfsClass._g_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved2"));
    public static VarHandle _g_reserved2$VH() {
        return _GVfsClass._g_reserved2$VH;
    }
    public static MemoryAddress _g_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved2$VH.get(seg);
    }
    public static void _g_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass._g_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass._g_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved2 _g_reserved2 (MemorySegment segment, MemorySession session) {
        return _g_reserved2.ofAddress(_g_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved3$MH = RuntimeHelper.downcallHandle(
        _GVfsClass._g_reserved3$FUNC
    );
    public interface _g_reserved3 {

        void apply();
        static MemorySegment allocate(_g_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved3.class, fi, _GVfsClass._g_reserved3$FUNC, session);
        }
        static _g_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVfsClass._g_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved3"));
    public static VarHandle _g_reserved3$VH() {
        return _GVfsClass._g_reserved3$VH;
    }
    public static MemoryAddress _g_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved3$VH.get(seg);
    }
    public static void _g_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass._g_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass._g_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved3 _g_reserved3 (MemorySegment segment, MemorySession session) {
        return _g_reserved3.ofAddress(_g_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved4$MH = RuntimeHelper.downcallHandle(
        _GVfsClass._g_reserved4$FUNC
    );
    public interface _g_reserved4 {

        void apply();
        static MemorySegment allocate(_g_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved4.class, fi, _GVfsClass._g_reserved4$FUNC, session);
        }
        static _g_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVfsClass._g_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved4"));
    public static VarHandle _g_reserved4$VH() {
        return _GVfsClass._g_reserved4$VH;
    }
    public static MemoryAddress _g_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved4$VH.get(seg);
    }
    public static void _g_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass._g_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass._g_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved4 _g_reserved4 (MemorySegment segment, MemorySession session) {
        return _g_reserved4.ofAddress(_g_reserved4$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved5$MH = RuntimeHelper.downcallHandle(
        _GVfsClass._g_reserved5$FUNC
    );
    public interface _g_reserved5 {

        void apply();
        static MemorySegment allocate(_g_reserved5 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved5.class, fi, _GVfsClass._g_reserved5$FUNC, session);
        }
        static _g_reserved5 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVfsClass._g_reserved5$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved5"));
    public static VarHandle _g_reserved5$VH() {
        return _GVfsClass._g_reserved5$VH;
    }
    public static MemoryAddress _g_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved5$VH.get(seg);
    }
    public static void _g_reserved5$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass._g_reserved5$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved5$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass._g_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved5 _g_reserved5 (MemorySegment segment, MemorySession session) {
        return _g_reserved5.ofAddress(_g_reserved5$get(segment), session);
    }
    static final FunctionDescriptor _g_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _g_reserved6$MH = RuntimeHelper.downcallHandle(
        _GVfsClass._g_reserved6$FUNC
    );
    public interface _g_reserved6 {

        void apply();
        static MemorySegment allocate(_g_reserved6 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_g_reserved6.class, fi, _GVfsClass._g_reserved6$FUNC, session);
        }
        static _g_reserved6 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GVfsClass._g_reserved6$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _g_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_g_reserved6"));
    public static VarHandle _g_reserved6$VH() {
        return _GVfsClass._g_reserved6$VH;
    }
    public static MemoryAddress _g_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved6$VH.get(seg);
    }
    public static void _g_reserved6$set( MemorySegment seg, MemoryAddress x) {
        _GVfsClass._g_reserved6$VH.set(seg, x);
    }
    public static MemoryAddress _g_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GVfsClass._g_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _g_reserved6$set(MemorySegment seg, long index, MemoryAddress x) {
        _GVfsClass._g_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _g_reserved6 _g_reserved6 (MemorySegment segment, MemorySession session) {
        return _g_reserved6.ofAddress(_g_reserved6$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


