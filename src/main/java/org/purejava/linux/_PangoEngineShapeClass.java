// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PangoEngineShapeClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("script_shape"),
        Constants$root.C_POINTER$LAYOUT.withName("covers")
    ).withName("_PangoEngineShapeClass");
    public static MemoryLayout $LAYOUT() {
        return _PangoEngineShapeClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor script_shape$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle script_shape$MH = RuntimeHelper.downcallHandle(
        _PangoEngineShapeClass.script_shape$FUNC
    );
    public interface script_shape {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5, java.lang.foreign.MemoryAddress _x6, int _x7);
        static MemorySegment allocate(script_shape fi, MemorySession session) {
            return RuntimeHelper.upcallStub(script_shape.class, fi, _PangoEngineShapeClass.script_shape$FUNC, session);
        }
        static script_shape ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5, java.lang.foreign.MemoryAddress __x6, int __x7) -> {
                try {
                    _PangoEngineShapeClass.script_shape$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5, (java.lang.foreign.Addressable)__x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle script_shape$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("script_shape"));
    public static VarHandle script_shape$VH() {
        return _PangoEngineShapeClass.script_shape$VH;
    }
    public static MemoryAddress script_shape$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineShapeClass.script_shape$VH.get(seg);
    }
    public static void script_shape$set( MemorySegment seg, MemoryAddress x) {
        _PangoEngineShapeClass.script_shape$VH.set(seg, x);
    }
    public static MemoryAddress script_shape$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineShapeClass.script_shape$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void script_shape$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoEngineShapeClass.script_shape$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static script_shape script_shape (MemorySegment segment, MemorySession session) {
        return script_shape.ofAddress(script_shape$get(segment), session);
    }
    static final FunctionDescriptor covers$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle covers$MH = RuntimeHelper.downcallHandle(
        _PangoEngineShapeClass.covers$FUNC
    );
    public interface covers {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3);
        static MemorySegment allocate(covers fi, MemorySession session) {
            return RuntimeHelper.upcallStub(covers.class, fi, _PangoEngineShapeClass.covers$FUNC, session);
        }
        static covers ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3) -> {
                try {
                    return (int)_PangoEngineShapeClass.covers$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle covers$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("covers"));
    public static VarHandle covers$VH() {
        return _PangoEngineShapeClass.covers$VH;
    }
    public static MemoryAddress covers$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineShapeClass.covers$VH.get(seg);
    }
    public static void covers$set( MemorySegment seg, MemoryAddress x) {
        _PangoEngineShapeClass.covers$VH.set(seg, x);
    }
    public static MemoryAddress covers$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoEngineShapeClass.covers$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void covers$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoEngineShapeClass.covers$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static covers covers (MemorySegment segment, MemorySession session) {
        return covers.ofAddress(covers$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


