// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PangoAttrClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("copy"),
        Constants$root.C_POINTER$LAYOUT.withName("destroy"),
        Constants$root.C_POINTER$LAYOUT.withName("equal")
    ).withName("_PangoAttrClass");
    public static MemoryLayout $LAYOUT() {
        return _PangoAttrClass.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _PangoAttrClass.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)_PangoAttrClass.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        _PangoAttrClass.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)_PangoAttrClass.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        _PangoAttrClass.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor copy$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle copy$MH = RuntimeHelper.downcallHandle(
        _PangoAttrClass.copy$FUNC
    );
    public interface copy {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(copy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(copy.class, fi, _PangoAttrClass.copy$FUNC, session);
        }
        static copy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_PangoAttrClass.copy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle copy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("copy"));
    public static VarHandle copy$VH() {
        return _PangoAttrClass.copy$VH;
    }
    public static MemoryAddress copy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoAttrClass.copy$VH.get(seg);
    }
    public static void copy$set( MemorySegment seg, MemoryAddress x) {
        _PangoAttrClass.copy$VH.set(seg, x);
    }
    public static MemoryAddress copy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoAttrClass.copy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void copy$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoAttrClass.copy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy copy (MemorySegment segment, MemorySession session) {
        return copy.ofAddress(copy$get(segment), session);
    }
    static final FunctionDescriptor destroy$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle destroy$MH = RuntimeHelper.downcallHandle(
        _PangoAttrClass.destroy$FUNC
    );
    public interface destroy {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(destroy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(destroy.class, fi, _PangoAttrClass.destroy$FUNC, session);
        }
        static destroy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _PangoAttrClass.destroy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle destroy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("destroy"));
    public static VarHandle destroy$VH() {
        return _PangoAttrClass.destroy$VH;
    }
    public static MemoryAddress destroy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoAttrClass.destroy$VH.get(seg);
    }
    public static void destroy$set( MemorySegment seg, MemoryAddress x) {
        _PangoAttrClass.destroy$VH.set(seg, x);
    }
    public static MemoryAddress destroy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoAttrClass.destroy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void destroy$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoAttrClass.destroy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static destroy destroy (MemorySegment segment, MemorySession session) {
        return destroy.ofAddress(destroy$get(segment), session);
    }
    static final FunctionDescriptor equal$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle equal$MH = RuntimeHelper.downcallHandle(
        _PangoAttrClass.equal$FUNC
    );
    public interface equal {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(equal fi, MemorySession session) {
            return RuntimeHelper.upcallStub(equal.class, fi, _PangoAttrClass.equal$FUNC, session);
        }
        static equal ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_PangoAttrClass.equal$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle equal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("equal"));
    public static VarHandle equal$VH() {
        return _PangoAttrClass.equal$VH;
    }
    public static MemoryAddress equal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoAttrClass.equal$VH.get(seg);
    }
    public static void equal$set( MemorySegment seg, MemoryAddress x) {
        _PangoAttrClass.equal$VH.set(seg, x);
    }
    public static MemoryAddress equal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoAttrClass.equal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void equal$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoAttrClass.equal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static equal equal (MemorySegment segment, MemorySession session) {
        return equal.ofAddress(equal$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


