// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkEventOwnerChange {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("window"),
        Constants$root.C_CHAR$LAYOUT.withName("send_event"),
        MemoryLayout.paddingLayout(56),
        Constants$root.C_POINTER$LAYOUT.withName("owner"),
        Constants$root.C_INT$LAYOUT.withName("reason"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("selection"),
        Constants$root.C_INT$LAYOUT.withName("time"),
        Constants$root.C_INT$LAYOUT.withName("selection_time")
    ).withName("_GdkEventOwnerChange");
    public static MemoryLayout $LAYOUT() {
        return _GdkEventOwnerChange.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _GdkEventOwnerChange.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)_GdkEventOwnerChange.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        _GdkEventOwnerChange.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)_GdkEventOwnerChange.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        _GdkEventOwnerChange.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle window$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("window"));
    public static VarHandle window$VH() {
        return _GdkEventOwnerChange.window$VH;
    }
    public static MemoryAddress window$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkEventOwnerChange.window$VH.get(seg);
    }
    public static void window$set( MemorySegment seg, MemoryAddress x) {
        _GdkEventOwnerChange.window$VH.set(seg, x);
    }
    public static MemoryAddress window$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkEventOwnerChange.window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void window$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkEventOwnerChange.window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle send_event$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("send_event"));
    public static VarHandle send_event$VH() {
        return _GdkEventOwnerChange.send_event$VH;
    }
    public static byte send_event$get(MemorySegment seg) {
        return (byte)_GdkEventOwnerChange.send_event$VH.get(seg);
    }
    public static void send_event$set( MemorySegment seg, byte x) {
        _GdkEventOwnerChange.send_event$VH.set(seg, x);
    }
    public static byte send_event$get(MemorySegment seg, long index) {
        return (byte)_GdkEventOwnerChange.send_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void send_event$set(MemorySegment seg, long index, byte x) {
        _GdkEventOwnerChange.send_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle owner$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("owner"));
    public static VarHandle owner$VH() {
        return _GdkEventOwnerChange.owner$VH;
    }
    public static MemoryAddress owner$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkEventOwnerChange.owner$VH.get(seg);
    }
    public static void owner$set( MemorySegment seg, MemoryAddress x) {
        _GdkEventOwnerChange.owner$VH.set(seg, x);
    }
    public static MemoryAddress owner$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkEventOwnerChange.owner$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void owner$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkEventOwnerChange.owner$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle reason$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reason"));
    public static VarHandle reason$VH() {
        return _GdkEventOwnerChange.reason$VH;
    }
    public static int reason$get(MemorySegment seg) {
        return (int)_GdkEventOwnerChange.reason$VH.get(seg);
    }
    public static void reason$set( MemorySegment seg, int x) {
        _GdkEventOwnerChange.reason$VH.set(seg, x);
    }
    public static int reason$get(MemorySegment seg, long index) {
        return (int)_GdkEventOwnerChange.reason$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reason$set(MemorySegment seg, long index, int x) {
        _GdkEventOwnerChange.reason$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle selection$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("selection"));
    public static VarHandle selection$VH() {
        return _GdkEventOwnerChange.selection$VH;
    }
    public static MemoryAddress selection$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkEventOwnerChange.selection$VH.get(seg);
    }
    public static void selection$set( MemorySegment seg, MemoryAddress x) {
        _GdkEventOwnerChange.selection$VH.set(seg, x);
    }
    public static MemoryAddress selection$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkEventOwnerChange.selection$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void selection$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkEventOwnerChange.selection$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("time"));
    public static VarHandle time$VH() {
        return _GdkEventOwnerChange.time$VH;
    }
    public static int time$get(MemorySegment seg) {
        return (int)_GdkEventOwnerChange.time$VH.get(seg);
    }
    public static void time$set( MemorySegment seg, int x) {
        _GdkEventOwnerChange.time$VH.set(seg, x);
    }
    public static int time$get(MemorySegment seg, long index) {
        return (int)_GdkEventOwnerChange.time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void time$set(MemorySegment seg, long index, int x) {
        _GdkEventOwnerChange.time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle selection_time$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("selection_time"));
    public static VarHandle selection_time$VH() {
        return _GdkEventOwnerChange.selection_time$VH;
    }
    public static int selection_time$get(MemorySegment seg) {
        return (int)_GdkEventOwnerChange.selection_time$VH.get(seg);
    }
    public static void selection_time$set( MemorySegment seg, int x) {
        _GdkEventOwnerChange.selection_time$VH.set(seg, x);
    }
    public static int selection_time$get(MemorySegment seg, long index) {
        return (int)_GdkEventOwnerChange.selection_time$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void selection_time$set(MemorySegment seg, long index, int x) {
        _GdkEventOwnerChange.selection_time$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


