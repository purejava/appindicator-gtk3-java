// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkObject {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_POINTER$LAYOUT.withName("g_class")
            ).withName("g_type_instance"),
            Constants$root.C_INT$LAYOUT.withName("ref_count"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("qdata")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("description"),
        Constants$root.C_POINTER$LAYOUT.withName("name"),
        Constants$root.C_POINTER$LAYOUT.withName("accessible_parent"),
        Constants$root.C_INT$LAYOUT.withName("role"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("relation_set"),
        Constants$root.C_INT$LAYOUT.withName("layer"),
        MemoryLayout.paddingLayout(32)
    ).withName("_AtkObject");
    public static MemoryLayout $LAYOUT() {
        return _AtkObject.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    static final VarHandle description$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("description"));
    public static VarHandle description$VH() {
        return _AtkObject.description$VH;
    }
    public static MemoryAddress description$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObject.description$VH.get(seg);
    }
    public static void description$set( MemorySegment seg, MemoryAddress x) {
        _AtkObject.description$VH.set(seg, x);
    }
    public static MemoryAddress description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObject.description$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void description$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObject.description$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("name"));
    public static VarHandle name$VH() {
        return _AtkObject.name$VH;
    }
    public static MemoryAddress name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObject.name$VH.get(seg);
    }
    public static void name$set( MemorySegment seg, MemoryAddress x) {
        _AtkObject.name$VH.set(seg, x);
    }
    public static MemoryAddress name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObject.name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObject.name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle accessible_parent$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("accessible_parent"));
    public static VarHandle accessible_parent$VH() {
        return _AtkObject.accessible_parent$VH;
    }
    public static MemoryAddress accessible_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObject.accessible_parent$VH.get(seg);
    }
    public static void accessible_parent$set( MemorySegment seg, MemoryAddress x) {
        _AtkObject.accessible_parent$VH.set(seg, x);
    }
    public static MemoryAddress accessible_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObject.accessible_parent$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void accessible_parent$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObject.accessible_parent$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle role$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("role"));
    public static VarHandle role$VH() {
        return _AtkObject.role$VH;
    }
    public static int role$get(MemorySegment seg) {
        return (int)_AtkObject.role$VH.get(seg);
    }
    public static void role$set( MemorySegment seg, int x) {
        _AtkObject.role$VH.set(seg, x);
    }
    public static int role$get(MemorySegment seg, long index) {
        return (int)_AtkObject.role$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void role$set(MemorySegment seg, long index, int x) {
        _AtkObject.role$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle relation_set$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("relation_set"));
    public static VarHandle relation_set$VH() {
        return _AtkObject.relation_set$VH;
    }
    public static MemoryAddress relation_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkObject.relation_set$VH.get(seg);
    }
    public static void relation_set$set( MemorySegment seg, MemoryAddress x) {
        _AtkObject.relation_set$VH.set(seg, x);
    }
    public static MemoryAddress relation_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkObject.relation_set$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void relation_set$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkObject.relation_set$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle layer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("layer"));
    public static VarHandle layer$VH() {
        return _AtkObject.layer$VH;
    }
    public static int layer$get(MemorySegment seg) {
        return (int)_AtkObject.layer$VH.get(seg);
    }
    public static void layer$set( MemorySegment seg, int x) {
        _AtkObject.layer$VH.set(seg, x);
    }
    public static int layer$get(MemorySegment seg, long index) {
        return (int)_AtkObject.layer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void layer$set(MemorySegment seg, long index, int x) {
        _AtkObject.layer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


