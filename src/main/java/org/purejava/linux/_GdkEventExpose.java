// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GdkEventExpose {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_INT$LAYOUT.withName("type"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("window"),
        Constants$root.C_CHAR$LAYOUT.withName("send_event"),
        MemoryLayout.paddingLayout(24),
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("x"),
            Constants$root.C_INT$LAYOUT.withName("y"),
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height")
        ).withName("area"),
        MemoryLayout.paddingLayout(32),
        Constants$root.C_POINTER$LAYOUT.withName("region"),
        Constants$root.C_INT$LAYOUT.withName("count"),
        MemoryLayout.paddingLayout(32)
    ).withName("_GdkEventExpose");
    public static MemoryLayout $LAYOUT() {
        return _GdkEventExpose.$struct$LAYOUT;
    }
    static final VarHandle type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("type"));
    public static VarHandle type$VH() {
        return _GdkEventExpose.type$VH;
    }
    public static int type$get(MemorySegment seg) {
        return (int)_GdkEventExpose.type$VH.get(seg);
    }
    public static void type$set( MemorySegment seg, int x) {
        _GdkEventExpose.type$VH.set(seg, x);
    }
    public static int type$get(MemorySegment seg, long index) {
        return (int)_GdkEventExpose.type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void type$set(MemorySegment seg, long index, int x) {
        _GdkEventExpose.type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle window$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("window"));
    public static VarHandle window$VH() {
        return _GdkEventExpose.window$VH;
    }
    public static MemoryAddress window$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkEventExpose.window$VH.get(seg);
    }
    public static void window$set( MemorySegment seg, MemoryAddress x) {
        _GdkEventExpose.window$VH.set(seg, x);
    }
    public static MemoryAddress window$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkEventExpose.window$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void window$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkEventExpose.window$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle send_event$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("send_event"));
    public static VarHandle send_event$VH() {
        return _GdkEventExpose.send_event$VH;
    }
    public static byte send_event$get(MemorySegment seg) {
        return (byte)_GdkEventExpose.send_event$VH.get(seg);
    }
    public static void send_event$set( MemorySegment seg, byte x) {
        _GdkEventExpose.send_event$VH.set(seg, x);
    }
    public static byte send_event$get(MemorySegment seg, long index) {
        return (byte)_GdkEventExpose.send_event$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void send_event$set(MemorySegment seg, long index, byte x) {
        _GdkEventExpose.send_event$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static MemorySegment area$slice(MemorySegment seg) {
        return seg.asSlice(20, 16);
    }
    static final VarHandle region$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("region"));
    public static VarHandle region$VH() {
        return _GdkEventExpose.region$VH;
    }
    public static MemoryAddress region$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GdkEventExpose.region$VH.get(seg);
    }
    public static void region$set( MemorySegment seg, MemoryAddress x) {
        _GdkEventExpose.region$VH.set(seg, x);
    }
    public static MemoryAddress region$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GdkEventExpose.region$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void region$set(MemorySegment seg, long index, MemoryAddress x) {
        _GdkEventExpose.region$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle count$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("count"));
    public static VarHandle count$VH() {
        return _GdkEventExpose.count$VH;
    }
    public static int count$get(MemorySegment seg) {
        return (int)_GdkEventExpose.count$VH.get(seg);
    }
    public static void count$set( MemorySegment seg, int x) {
        _GdkEventExpose.count$VH.set(seg, x);
    }
    public static int count$get(MemorySegment seg, long index) {
        return (int)_GdkEventExpose.count$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void count$set(MemorySegment seg, long index, int x) {
        _GdkEventExpose.count$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


