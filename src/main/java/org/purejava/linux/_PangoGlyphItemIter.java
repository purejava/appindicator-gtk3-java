// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _PangoGlyphItemIter {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("glyph_item"),
        Constants$root.C_POINTER$LAYOUT.withName("text"),
        Constants$root.C_INT$LAYOUT.withName("start_glyph"),
        Constants$root.C_INT$LAYOUT.withName("start_index"),
        Constants$root.C_INT$LAYOUT.withName("start_char"),
        Constants$root.C_INT$LAYOUT.withName("end_glyph"),
        Constants$root.C_INT$LAYOUT.withName("end_index"),
        Constants$root.C_INT$LAYOUT.withName("end_char")
    ).withName("_PangoGlyphItemIter");
    public static MemoryLayout $LAYOUT() {
        return _PangoGlyphItemIter.$struct$LAYOUT;
    }
    static final VarHandle glyph_item$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("glyph_item"));
    public static VarHandle glyph_item$VH() {
        return _PangoGlyphItemIter.glyph_item$VH;
    }
    public static MemoryAddress glyph_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoGlyphItemIter.glyph_item$VH.get(seg);
    }
    public static void glyph_item$set( MemorySegment seg, MemoryAddress x) {
        _PangoGlyphItemIter.glyph_item$VH.set(seg, x);
    }
    public static MemoryAddress glyph_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoGlyphItemIter.glyph_item$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void glyph_item$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoGlyphItemIter.glyph_item$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("text"));
    public static VarHandle text$VH() {
        return _PangoGlyphItemIter.text$VH;
    }
    public static MemoryAddress text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_PangoGlyphItemIter.text$VH.get(seg);
    }
    public static void text$set( MemorySegment seg, MemoryAddress x) {
        _PangoGlyphItemIter.text$VH.set(seg, x);
    }
    public static MemoryAddress text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_PangoGlyphItemIter.text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void text$set(MemorySegment seg, long index, MemoryAddress x) {
        _PangoGlyphItemIter.text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle start_glyph$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_glyph"));
    public static VarHandle start_glyph$VH() {
        return _PangoGlyphItemIter.start_glyph$VH;
    }
    public static int start_glyph$get(MemorySegment seg) {
        return (int)_PangoGlyphItemIter.start_glyph$VH.get(seg);
    }
    public static void start_glyph$set( MemorySegment seg, int x) {
        _PangoGlyphItemIter.start_glyph$VH.set(seg, x);
    }
    public static int start_glyph$get(MemorySegment seg, long index) {
        return (int)_PangoGlyphItemIter.start_glyph$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_glyph$set(MemorySegment seg, long index, int x) {
        _PangoGlyphItemIter.start_glyph$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle start_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_index"));
    public static VarHandle start_index$VH() {
        return _PangoGlyphItemIter.start_index$VH;
    }
    public static int start_index$get(MemorySegment seg) {
        return (int)_PangoGlyphItemIter.start_index$VH.get(seg);
    }
    public static void start_index$set( MemorySegment seg, int x) {
        _PangoGlyphItemIter.start_index$VH.set(seg, x);
    }
    public static int start_index$get(MemorySegment seg, long index) {
        return (int)_PangoGlyphItemIter.start_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_index$set(MemorySegment seg, long index, int x) {
        _PangoGlyphItemIter.start_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle start_char$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_char"));
    public static VarHandle start_char$VH() {
        return _PangoGlyphItemIter.start_char$VH;
    }
    public static int start_char$get(MemorySegment seg) {
        return (int)_PangoGlyphItemIter.start_char$VH.get(seg);
    }
    public static void start_char$set( MemorySegment seg, int x) {
        _PangoGlyphItemIter.start_char$VH.set(seg, x);
    }
    public static int start_char$get(MemorySegment seg, long index) {
        return (int)_PangoGlyphItemIter.start_char$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_char$set(MemorySegment seg, long index, int x) {
        _PangoGlyphItemIter.start_char$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle end_glyph$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_glyph"));
    public static VarHandle end_glyph$VH() {
        return _PangoGlyphItemIter.end_glyph$VH;
    }
    public static int end_glyph$get(MemorySegment seg) {
        return (int)_PangoGlyphItemIter.end_glyph$VH.get(seg);
    }
    public static void end_glyph$set( MemorySegment seg, int x) {
        _PangoGlyphItemIter.end_glyph$VH.set(seg, x);
    }
    public static int end_glyph$get(MemorySegment seg, long index) {
        return (int)_PangoGlyphItemIter.end_glyph$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_glyph$set(MemorySegment seg, long index, int x) {
        _PangoGlyphItemIter.end_glyph$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle end_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_index"));
    public static VarHandle end_index$VH() {
        return _PangoGlyphItemIter.end_index$VH;
    }
    public static int end_index$get(MemorySegment seg) {
        return (int)_PangoGlyphItemIter.end_index$VH.get(seg);
    }
    public static void end_index$set( MemorySegment seg, int x) {
        _PangoGlyphItemIter.end_index$VH.set(seg, x);
    }
    public static int end_index$get(MemorySegment seg, long index) {
        return (int)_PangoGlyphItemIter.end_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_index$set(MemorySegment seg, long index, int x) {
        _PangoGlyphItemIter.end_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle end_char$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_char"));
    public static VarHandle end_char$VH() {
        return _PangoGlyphItemIter.end_char$VH;
    }
    public static int end_char$get(MemorySegment seg) {
        return (int)_PangoGlyphItemIter.end_char$VH.get(seg);
    }
    public static void end_char$set( MemorySegment seg, int x) {
        _PangoGlyphItemIter.end_char$VH.set(seg, x);
    }
    public static int end_char$get(MemorySegment seg, long index) {
        return (int)_PangoGlyphItemIter.end_char$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_char$set(MemorySegment seg, long index, int x) {
        _PangoGlyphItemIter.end_char$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


