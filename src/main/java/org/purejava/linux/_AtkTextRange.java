// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkTextRange {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_INT$LAYOUT.withName("x"),
            Constants$root.C_INT$LAYOUT.withName("y"),
            Constants$root.C_INT$LAYOUT.withName("width"),
            Constants$root.C_INT$LAYOUT.withName("height")
        ).withName("bounds"),
        Constants$root.C_INT$LAYOUT.withName("start_offset"),
        Constants$root.C_INT$LAYOUT.withName("end_offset"),
        Constants$root.C_POINTER$LAYOUT.withName("content")
    ).withName("_AtkTextRange");
    public static MemoryLayout $LAYOUT() {
        return _AtkTextRange.$struct$LAYOUT;
    }
    public static MemorySegment bounds$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final VarHandle start_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("start_offset"));
    public static VarHandle start_offset$VH() {
        return _AtkTextRange.start_offset$VH;
    }
    public static int start_offset$get(MemorySegment seg) {
        return (int)_AtkTextRange.start_offset$VH.get(seg);
    }
    public static void start_offset$set( MemorySegment seg, int x) {
        _AtkTextRange.start_offset$VH.set(seg, x);
    }
    public static int start_offset$get(MemorySegment seg, long index) {
        return (int)_AtkTextRange.start_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void start_offset$set(MemorySegment seg, long index, int x) {
        _AtkTextRange.start_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle end_offset$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_offset"));
    public static VarHandle end_offset$VH() {
        return _AtkTextRange.end_offset$VH;
    }
    public static int end_offset$get(MemorySegment seg) {
        return (int)_AtkTextRange.end_offset$VH.get(seg);
    }
    public static void end_offset$set( MemorySegment seg, int x) {
        _AtkTextRange.end_offset$VH.set(seg, x);
    }
    public static int end_offset$get(MemorySegment seg, long index) {
        return (int)_AtkTextRange.end_offset$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_offset$set(MemorySegment seg, long index, int x) {
        _AtkTextRange.end_offset$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final VarHandle content$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("content"));
    public static VarHandle content$VH() {
        return _AtkTextRange.content$VH;
    }
    public static MemoryAddress content$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkTextRange.content$VH.get(seg);
    }
    public static void content$set( MemorySegment seg, MemoryAddress x) {
        _AtkTextRange.content$VH.set(seg, x);
    }
    public static MemoryAddress content$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkTextRange.content$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void content$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkTextRange.content$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


