// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GMountIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("changed"),
        Constants$root.C_POINTER$LAYOUT.withName("unmounted"),
        Constants$root.C_POINTER$LAYOUT.withName("get_root"),
        Constants$root.C_POINTER$LAYOUT.withName("get_name"),
        Constants$root.C_POINTER$LAYOUT.withName("get_icon"),
        Constants$root.C_POINTER$LAYOUT.withName("get_uuid"),
        Constants$root.C_POINTER$LAYOUT.withName("get_volume"),
        Constants$root.C_POINTER$LAYOUT.withName("get_drive"),
        Constants$root.C_POINTER$LAYOUT.withName("can_unmount"),
        Constants$root.C_POINTER$LAYOUT.withName("can_eject"),
        Constants$root.C_POINTER$LAYOUT.withName("unmount"),
        Constants$root.C_POINTER$LAYOUT.withName("unmount_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("eject"),
        Constants$root.C_POINTER$LAYOUT.withName("eject_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("remount"),
        Constants$root.C_POINTER$LAYOUT.withName("remount_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("guess_content_type"),
        Constants$root.C_POINTER$LAYOUT.withName("guess_content_type_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("guess_content_type_sync"),
        Constants$root.C_POINTER$LAYOUT.withName("pre_unmount"),
        Constants$root.C_POINTER$LAYOUT.withName("unmount_with_operation"),
        Constants$root.C_POINTER$LAYOUT.withName("unmount_with_operation_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("eject_with_operation"),
        Constants$root.C_POINTER$LAYOUT.withName("eject_with_operation_finish"),
        Constants$root.C_POINTER$LAYOUT.withName("get_default_location"),
        Constants$root.C_POINTER$LAYOUT.withName("get_sort_key"),
        Constants$root.C_POINTER$LAYOUT.withName("get_symbolic_icon")
    ).withName("_GMountIface");
    public static MemoryLayout $LAYOUT() {
        return _GMountIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle changed$MH = RuntimeHelper.downcallHandle(
        _GMountIface.changed$FUNC
    );
    public interface changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(changed.class, fi, _GMountIface.changed$FUNC, session);
        }
        static changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GMountIface.changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("changed"));
    public static VarHandle changed$VH() {
        return _GMountIface.changed$VH;
    }
    public static MemoryAddress changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.changed$VH.get(seg);
    }
    public static void changed$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.changed$VH.set(seg, x);
    }
    public static MemoryAddress changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed (MemorySegment segment, MemorySession session) {
        return changed.ofAddress(changed$get(segment), session);
    }
    static final FunctionDescriptor unmounted$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unmounted$MH = RuntimeHelper.downcallHandle(
        _GMountIface.unmounted$FUNC
    );
    public interface unmounted {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(unmounted fi, MemorySession session) {
            return RuntimeHelper.upcallStub(unmounted.class, fi, _GMountIface.unmounted$FUNC, session);
        }
        static unmounted ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GMountIface.unmounted$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unmounted$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unmounted"));
    public static VarHandle unmounted$VH() {
        return _GMountIface.unmounted$VH;
    }
    public static MemoryAddress unmounted$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.unmounted$VH.get(seg);
    }
    public static void unmounted$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.unmounted$VH.set(seg, x);
    }
    public static MemoryAddress unmounted$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.unmounted$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unmounted$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.unmounted$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmounted unmounted (MemorySegment segment, MemorySession session) {
        return unmounted.ofAddress(unmounted$get(segment), session);
    }
    static final FunctionDescriptor get_root$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_root$MH = RuntimeHelper.downcallHandle(
        _GMountIface.get_root$FUNC
    );
    public interface get_root {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_root fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_root.class, fi, _GMountIface.get_root$FUNC, session);
        }
        static get_root ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.get_root$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_root$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_root"));
    public static VarHandle get_root$VH() {
        return _GMountIface.get_root$VH;
    }
    public static MemoryAddress get_root$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_root$VH.get(seg);
    }
    public static void get_root$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.get_root$VH.set(seg, x);
    }
    public static MemoryAddress get_root$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_root$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_root$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.get_root$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_root get_root (MemorySegment segment, MemorySession session) {
        return get_root.ofAddress(get_root$get(segment), session);
    }
    static final FunctionDescriptor get_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_name$MH = RuntimeHelper.downcallHandle(
        _GMountIface.get_name$FUNC
    );
    public interface get_name {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_name fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_name.class, fi, _GMountIface.get_name$FUNC, session);
        }
        static get_name ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.get_name$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_name"));
    public static VarHandle get_name$VH() {
        return _GMountIface.get_name$VH;
    }
    public static MemoryAddress get_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_name$VH.get(seg);
    }
    public static void get_name$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.get_name$VH.set(seg, x);
    }
    public static MemoryAddress get_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.get_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_name get_name (MemorySegment segment, MemorySession session) {
        return get_name.ofAddress(get_name$get(segment), session);
    }
    static final FunctionDescriptor get_icon$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_icon$MH = RuntimeHelper.downcallHandle(
        _GMountIface.get_icon$FUNC
    );
    public interface get_icon {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_icon fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_icon.class, fi, _GMountIface.get_icon$FUNC, session);
        }
        static get_icon ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.get_icon$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_icon$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_icon"));
    public static VarHandle get_icon$VH() {
        return _GMountIface.get_icon$VH;
    }
    public static MemoryAddress get_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_icon$VH.get(seg);
    }
    public static void get_icon$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.get_icon$VH.set(seg, x);
    }
    public static MemoryAddress get_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_icon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_icon$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.get_icon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_icon get_icon (MemorySegment segment, MemorySession session) {
        return get_icon.ofAddress(get_icon$get(segment), session);
    }
    static final FunctionDescriptor get_uuid$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_uuid$MH = RuntimeHelper.downcallHandle(
        _GMountIface.get_uuid$FUNC
    );
    public interface get_uuid {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_uuid fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_uuid.class, fi, _GMountIface.get_uuid$FUNC, session);
        }
        static get_uuid ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.get_uuid$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_uuid$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_uuid"));
    public static VarHandle get_uuid$VH() {
        return _GMountIface.get_uuid$VH;
    }
    public static MemoryAddress get_uuid$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_uuid$VH.get(seg);
    }
    public static void get_uuid$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.get_uuid$VH.set(seg, x);
    }
    public static MemoryAddress get_uuid$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_uuid$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_uuid$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.get_uuid$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_uuid get_uuid (MemorySegment segment, MemorySession session) {
        return get_uuid.ofAddress(get_uuid$get(segment), session);
    }
    static final FunctionDescriptor get_volume$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_volume$MH = RuntimeHelper.downcallHandle(
        _GMountIface.get_volume$FUNC
    );
    public interface get_volume {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_volume fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_volume.class, fi, _GMountIface.get_volume$FUNC, session);
        }
        static get_volume ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.get_volume$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_volume$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_volume"));
    public static VarHandle get_volume$VH() {
        return _GMountIface.get_volume$VH;
    }
    public static MemoryAddress get_volume$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_volume$VH.get(seg);
    }
    public static void get_volume$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.get_volume$VH.set(seg, x);
    }
    public static MemoryAddress get_volume$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_volume$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_volume$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.get_volume$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_volume get_volume (MemorySegment segment, MemorySession session) {
        return get_volume.ofAddress(get_volume$get(segment), session);
    }
    static final FunctionDescriptor get_drive$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_drive$MH = RuntimeHelper.downcallHandle(
        _GMountIface.get_drive$FUNC
    );
    public interface get_drive {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_drive fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_drive.class, fi, _GMountIface.get_drive$FUNC, session);
        }
        static get_drive ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.get_drive$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_drive$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_drive"));
    public static VarHandle get_drive$VH() {
        return _GMountIface.get_drive$VH;
    }
    public static MemoryAddress get_drive$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_drive$VH.get(seg);
    }
    public static void get_drive$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.get_drive$VH.set(seg, x);
    }
    public static MemoryAddress get_drive$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_drive$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_drive$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.get_drive$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_drive get_drive (MemorySegment segment, MemorySession session) {
        return get_drive.ofAddress(get_drive$get(segment), session);
    }
    static final FunctionDescriptor can_unmount$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_unmount$MH = RuntimeHelper.downcallHandle(
        _GMountIface.can_unmount$FUNC
    );
    public interface can_unmount {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(can_unmount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(can_unmount.class, fi, _GMountIface.can_unmount$FUNC, session);
        }
        static can_unmount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GMountIface.can_unmount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_unmount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("can_unmount"));
    public static VarHandle can_unmount$VH() {
        return _GMountIface.can_unmount$VH;
    }
    public static MemoryAddress can_unmount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.can_unmount$VH.get(seg);
    }
    public static void can_unmount$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.can_unmount$VH.set(seg, x);
    }
    public static MemoryAddress can_unmount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.can_unmount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_unmount$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.can_unmount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_unmount can_unmount (MemorySegment segment, MemorySession session) {
        return can_unmount.ofAddress(can_unmount$get(segment), session);
    }
    static final FunctionDescriptor can_eject$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle can_eject$MH = RuntimeHelper.downcallHandle(
        _GMountIface.can_eject$FUNC
    );
    public interface can_eject {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(can_eject fi, MemorySession session) {
            return RuntimeHelper.upcallStub(can_eject.class, fi, _GMountIface.can_eject$FUNC, session);
        }
        static can_eject ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GMountIface.can_eject$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle can_eject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("can_eject"));
    public static VarHandle can_eject$VH() {
        return _GMountIface.can_eject$VH;
    }
    public static MemoryAddress can_eject$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.can_eject$VH.get(seg);
    }
    public static void can_eject$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.can_eject$VH.set(seg, x);
    }
    public static MemoryAddress can_eject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.can_eject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void can_eject$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.can_eject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_eject can_eject (MemorySegment segment, MemorySession session) {
        return can_eject.ofAddress(can_eject$get(segment), session);
    }
    static final FunctionDescriptor unmount$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unmount$MH = RuntimeHelper.downcallHandle(
        _GMountIface.unmount$FUNC
    );
    public interface unmount {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(unmount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(unmount.class, fi, _GMountIface.unmount$FUNC, session);
        }
        static unmount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GMountIface.unmount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unmount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unmount"));
    public static VarHandle unmount$VH() {
        return _GMountIface.unmount$VH;
    }
    public static MemoryAddress unmount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.unmount$VH.get(seg);
    }
    public static void unmount$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.unmount$VH.set(seg, x);
    }
    public static MemoryAddress unmount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.unmount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.unmount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount unmount (MemorySegment segment, MemorySession session) {
        return unmount.ofAddress(unmount$get(segment), session);
    }
    static final FunctionDescriptor unmount_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unmount_finish$MH = RuntimeHelper.downcallHandle(
        _GMountIface.unmount_finish$FUNC
    );
    public interface unmount_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(unmount_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(unmount_finish.class, fi, _GMountIface.unmount_finish$FUNC, session);
        }
        static unmount_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GMountIface.unmount_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unmount_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unmount_finish"));
    public static VarHandle unmount_finish$VH() {
        return _GMountIface.unmount_finish$VH;
    }
    public static MemoryAddress unmount_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.unmount_finish$VH.get(seg);
    }
    public static void unmount_finish$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.unmount_finish$VH.set(seg, x);
    }
    public static MemoryAddress unmount_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.unmount_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.unmount_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount_finish unmount_finish (MemorySegment segment, MemorySession session) {
        return unmount_finish.ofAddress(unmount_finish$get(segment), session);
    }
    static final FunctionDescriptor eject$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject$MH = RuntimeHelper.downcallHandle(
        _GMountIface.eject$FUNC
    );
    public interface eject {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(eject fi, MemorySession session) {
            return RuntimeHelper.upcallStub(eject.class, fi, _GMountIface.eject$FUNC, session);
        }
        static eject ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GMountIface.eject$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("eject"));
    public static VarHandle eject$VH() {
        return _GMountIface.eject$VH;
    }
    public static MemoryAddress eject$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.eject$VH.get(seg);
    }
    public static void eject$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.eject$VH.set(seg, x);
    }
    public static MemoryAddress eject$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.eject$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.eject$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject eject (MemorySegment segment, MemorySession session) {
        return eject.ofAddress(eject$get(segment), session);
    }
    static final FunctionDescriptor eject_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject_finish$MH = RuntimeHelper.downcallHandle(
        _GMountIface.eject_finish$FUNC
    );
    public interface eject_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(eject_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(eject_finish.class, fi, _GMountIface.eject_finish$FUNC, session);
        }
        static eject_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GMountIface.eject_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("eject_finish"));
    public static VarHandle eject_finish$VH() {
        return _GMountIface.eject_finish$VH;
    }
    public static MemoryAddress eject_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.eject_finish$VH.get(seg);
    }
    public static void eject_finish$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.eject_finish$VH.set(seg, x);
    }
    public static MemoryAddress eject_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.eject_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.eject_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_finish eject_finish (MemorySegment segment, MemorySession session) {
        return eject_finish.ofAddress(eject_finish$get(segment), session);
    }
    static final FunctionDescriptor remount$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle remount$MH = RuntimeHelper.downcallHandle(
        _GMountIface.remount$FUNC
    );
    public interface remount {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(remount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(remount.class, fi, _GMountIface.remount$FUNC, session);
        }
        static remount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    _GMountIface.remount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remount"));
    public static VarHandle remount$VH() {
        return _GMountIface.remount$VH;
    }
    public static MemoryAddress remount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.remount$VH.get(seg);
    }
    public static void remount$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.remount$VH.set(seg, x);
    }
    public static MemoryAddress remount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.remount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remount$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.remount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remount remount (MemorySegment segment, MemorySession session) {
        return remount.ofAddress(remount$get(segment), session);
    }
    static final FunctionDescriptor remount_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle remount_finish$MH = RuntimeHelper.downcallHandle(
        _GMountIface.remount_finish$FUNC
    );
    public interface remount_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(remount_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(remount_finish.class, fi, _GMountIface.remount_finish$FUNC, session);
        }
        static remount_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GMountIface.remount_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remount_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remount_finish"));
    public static VarHandle remount_finish$VH() {
        return _GMountIface.remount_finish$VH;
    }
    public static MemoryAddress remount_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.remount_finish$VH.get(seg);
    }
    public static void remount_finish$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.remount_finish$VH.set(seg, x);
    }
    public static MemoryAddress remount_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.remount_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remount_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.remount_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remount_finish remount_finish (MemorySegment segment, MemorySession session) {
        return remount_finish.ofAddress(remount_finish$get(segment), session);
    }
    static final FunctionDescriptor guess_content_type$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle guess_content_type$MH = RuntimeHelper.downcallHandle(
        _GMountIface.guess_content_type$FUNC
    );
    public interface guess_content_type {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(guess_content_type fi, MemorySession session) {
            return RuntimeHelper.upcallStub(guess_content_type.class, fi, _GMountIface.guess_content_type$FUNC, session);
        }
        static guess_content_type ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GMountIface.guess_content_type$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle guess_content_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("guess_content_type"));
    public static VarHandle guess_content_type$VH() {
        return _GMountIface.guess_content_type$VH;
    }
    public static MemoryAddress guess_content_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.guess_content_type$VH.get(seg);
    }
    public static void guess_content_type$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.guess_content_type$VH.set(seg, x);
    }
    public static MemoryAddress guess_content_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.guess_content_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void guess_content_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.guess_content_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static guess_content_type guess_content_type (MemorySegment segment, MemorySession session) {
        return guess_content_type.ofAddress(guess_content_type$get(segment), session);
    }
    static final FunctionDescriptor guess_content_type_finish$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle guess_content_type_finish$MH = RuntimeHelper.downcallHandle(
        _GMountIface.guess_content_type_finish$FUNC
    );
    public interface guess_content_type_finish {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(guess_content_type_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(guess_content_type_finish.class, fi, _GMountIface.guess_content_type_finish$FUNC, session);
        }
        static guess_content_type_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.guess_content_type_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle guess_content_type_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("guess_content_type_finish"));
    public static VarHandle guess_content_type_finish$VH() {
        return _GMountIface.guess_content_type_finish$VH;
    }
    public static MemoryAddress guess_content_type_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.guess_content_type_finish$VH.get(seg);
    }
    public static void guess_content_type_finish$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.guess_content_type_finish$VH.set(seg, x);
    }
    public static MemoryAddress guess_content_type_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.guess_content_type_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void guess_content_type_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.guess_content_type_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static guess_content_type_finish guess_content_type_finish (MemorySegment segment, MemorySession session) {
        return guess_content_type_finish.ofAddress(guess_content_type_finish$get(segment), session);
    }
    static final FunctionDescriptor guess_content_type_sync$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle guess_content_type_sync$MH = RuntimeHelper.downcallHandle(
        _GMountIface.guess_content_type_sync$FUNC
    );
    public interface guess_content_type_sync {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(guess_content_type_sync fi, MemorySession session) {
            return RuntimeHelper.upcallStub(guess_content_type_sync.class, fi, _GMountIface.guess_content_type_sync$FUNC, session);
        }
        static guess_content_type_sync ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.guess_content_type_sync$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle guess_content_type_sync$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("guess_content_type_sync"));
    public static VarHandle guess_content_type_sync$VH() {
        return _GMountIface.guess_content_type_sync$VH;
    }
    public static MemoryAddress guess_content_type_sync$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.guess_content_type_sync$VH.get(seg);
    }
    public static void guess_content_type_sync$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.guess_content_type_sync$VH.set(seg, x);
    }
    public static MemoryAddress guess_content_type_sync$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.guess_content_type_sync$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void guess_content_type_sync$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.guess_content_type_sync$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static guess_content_type_sync guess_content_type_sync (MemorySegment segment, MemorySession session) {
        return guess_content_type_sync.ofAddress(guess_content_type_sync$get(segment), session);
    }
    static final FunctionDescriptor pre_unmount$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pre_unmount$MH = RuntimeHelper.downcallHandle(
        _GMountIface.pre_unmount$FUNC
    );
    public interface pre_unmount {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(pre_unmount fi, MemorySession session) {
            return RuntimeHelper.upcallStub(pre_unmount.class, fi, _GMountIface.pre_unmount$FUNC, session);
        }
        static pre_unmount ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GMountIface.pre_unmount$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pre_unmount$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pre_unmount"));
    public static VarHandle pre_unmount$VH() {
        return _GMountIface.pre_unmount$VH;
    }
    public static MemoryAddress pre_unmount$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.pre_unmount$VH.get(seg);
    }
    public static void pre_unmount$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.pre_unmount$VH.set(seg, x);
    }
    public static MemoryAddress pre_unmount$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.pre_unmount$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_unmount$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.pre_unmount$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pre_unmount pre_unmount (MemorySegment segment, MemorySession session) {
        return pre_unmount.ofAddress(pre_unmount$get(segment), session);
    }
    static final FunctionDescriptor unmount_with_operation$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unmount_with_operation$MH = RuntimeHelper.downcallHandle(
        _GMountIface.unmount_with_operation$FUNC
    );
    public interface unmount_with_operation {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(unmount_with_operation fi, MemorySession session) {
            return RuntimeHelper.upcallStub(unmount_with_operation.class, fi, _GMountIface.unmount_with_operation$FUNC, session);
        }
        static unmount_with_operation ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    _GMountIface.unmount_with_operation$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unmount_with_operation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unmount_with_operation"));
    public static VarHandle unmount_with_operation$VH() {
        return _GMountIface.unmount_with_operation$VH;
    }
    public static MemoryAddress unmount_with_operation$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.unmount_with_operation$VH.get(seg);
    }
    public static void unmount_with_operation$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.unmount_with_operation$VH.set(seg, x);
    }
    public static MemoryAddress unmount_with_operation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.unmount_with_operation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount_with_operation$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.unmount_with_operation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount_with_operation unmount_with_operation (MemorySegment segment, MemorySession session) {
        return unmount_with_operation.ofAddress(unmount_with_operation$get(segment), session);
    }
    static final FunctionDescriptor unmount_with_operation_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle unmount_with_operation_finish$MH = RuntimeHelper.downcallHandle(
        _GMountIface.unmount_with_operation_finish$FUNC
    );
    public interface unmount_with_operation_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(unmount_with_operation_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(unmount_with_operation_finish.class, fi, _GMountIface.unmount_with_operation_finish$FUNC, session);
        }
        static unmount_with_operation_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GMountIface.unmount_with_operation_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle unmount_with_operation_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("unmount_with_operation_finish"));
    public static VarHandle unmount_with_operation_finish$VH() {
        return _GMountIface.unmount_with_operation_finish$VH;
    }
    public static MemoryAddress unmount_with_operation_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.unmount_with_operation_finish$VH.get(seg);
    }
    public static void unmount_with_operation_finish$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.unmount_with_operation_finish$VH.set(seg, x);
    }
    public static MemoryAddress unmount_with_operation_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.unmount_with_operation_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void unmount_with_operation_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.unmount_with_operation_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmount_with_operation_finish unmount_with_operation_finish (MemorySegment segment, MemorySession session) {
        return unmount_with_operation_finish.ofAddress(unmount_with_operation_finish$get(segment), session);
    }
    static final FunctionDescriptor eject_with_operation$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject_with_operation$MH = RuntimeHelper.downcallHandle(
        _GMountIface.eject_with_operation$FUNC
    );
    public interface eject_with_operation {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4, java.lang.foreign.MemoryAddress _x5);
        static MemorySegment allocate(eject_with_operation fi, MemorySession session) {
            return RuntimeHelper.upcallStub(eject_with_operation.class, fi, _GMountIface.eject_with_operation$FUNC, session);
        }
        static eject_with_operation ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4, java.lang.foreign.MemoryAddress __x5) -> {
                try {
                    _GMountIface.eject_with_operation$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4, (java.lang.foreign.Addressable)__x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject_with_operation$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("eject_with_operation"));
    public static VarHandle eject_with_operation$VH() {
        return _GMountIface.eject_with_operation$VH;
    }
    public static MemoryAddress eject_with_operation$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.eject_with_operation$VH.get(seg);
    }
    public static void eject_with_operation$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.eject_with_operation$VH.set(seg, x);
    }
    public static MemoryAddress eject_with_operation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.eject_with_operation$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_with_operation$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.eject_with_operation$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_with_operation eject_with_operation (MemorySegment segment, MemorySession session) {
        return eject_with_operation.ofAddress(eject_with_operation$get(segment), session);
    }
    static final FunctionDescriptor eject_with_operation_finish$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle eject_with_operation_finish$MH = RuntimeHelper.downcallHandle(
        _GMountIface.eject_with_operation_finish$FUNC
    );
    public interface eject_with_operation_finish {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(eject_with_operation_finish fi, MemorySession session) {
            return RuntimeHelper.upcallStub(eject_with_operation_finish.class, fi, _GMountIface.eject_with_operation_finish$FUNC, session);
        }
        static eject_with_operation_finish ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GMountIface.eject_with_operation_finish$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle eject_with_operation_finish$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("eject_with_operation_finish"));
    public static VarHandle eject_with_operation_finish$VH() {
        return _GMountIface.eject_with_operation_finish$VH;
    }
    public static MemoryAddress eject_with_operation_finish$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.eject_with_operation_finish$VH.get(seg);
    }
    public static void eject_with_operation_finish$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.eject_with_operation_finish$VH.set(seg, x);
    }
    public static MemoryAddress eject_with_operation_finish$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.eject_with_operation_finish$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void eject_with_operation_finish$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.eject_with_operation_finish$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static eject_with_operation_finish eject_with_operation_finish (MemorySegment segment, MemorySession session) {
        return eject_with_operation_finish.ofAddress(eject_with_operation_finish$get(segment), session);
    }
    static final FunctionDescriptor get_default_location$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_default_location$MH = RuntimeHelper.downcallHandle(
        _GMountIface.get_default_location$FUNC
    );
    public interface get_default_location {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_default_location fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_default_location.class, fi, _GMountIface.get_default_location$FUNC, session);
        }
        static get_default_location ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.get_default_location$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_default_location$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_default_location"));
    public static VarHandle get_default_location$VH() {
        return _GMountIface.get_default_location$VH;
    }
    public static MemoryAddress get_default_location$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_default_location$VH.get(seg);
    }
    public static void get_default_location$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.get_default_location$VH.set(seg, x);
    }
    public static MemoryAddress get_default_location$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_default_location$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_default_location$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.get_default_location$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_default_location get_default_location (MemorySegment segment, MemorySession session) {
        return get_default_location.ofAddress(get_default_location$get(segment), session);
    }
    static final FunctionDescriptor get_sort_key$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_sort_key$MH = RuntimeHelper.downcallHandle(
        _GMountIface.get_sort_key$FUNC
    );
    public interface get_sort_key {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_sort_key fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_sort_key.class, fi, _GMountIface.get_sort_key$FUNC, session);
        }
        static get_sort_key ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.get_sort_key$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_sort_key$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_sort_key"));
    public static VarHandle get_sort_key$VH() {
        return _GMountIface.get_sort_key$VH;
    }
    public static MemoryAddress get_sort_key$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_sort_key$VH.get(seg);
    }
    public static void get_sort_key$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.get_sort_key$VH.set(seg, x);
    }
    public static MemoryAddress get_sort_key$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_sort_key$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_sort_key$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.get_sort_key$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_sort_key get_sort_key (MemorySegment segment, MemorySession session) {
        return get_sort_key.ofAddress(get_sort_key$get(segment), session);
    }
    static final FunctionDescriptor get_symbolic_icon$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_symbolic_icon$MH = RuntimeHelper.downcallHandle(
        _GMountIface.get_symbolic_icon$FUNC
    );
    public interface get_symbolic_icon {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_symbolic_icon fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_symbolic_icon.class, fi, _GMountIface.get_symbolic_icon$FUNC, session);
        }
        static get_symbolic_icon ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMountIface.get_symbolic_icon$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_symbolic_icon$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_symbolic_icon"));
    public static VarHandle get_symbolic_icon$VH() {
        return _GMountIface.get_symbolic_icon$VH;
    }
    public static MemoryAddress get_symbolic_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_symbolic_icon$VH.get(seg);
    }
    public static void get_symbolic_icon$set( MemorySegment seg, MemoryAddress x) {
        _GMountIface.get_symbolic_icon$VH.set(seg, x);
    }
    public static MemoryAddress get_symbolic_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMountIface.get_symbolic_icon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_symbolic_icon$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMountIface.get_symbolic_icon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_symbolic_icon get_symbolic_icon (MemorySegment segment, MemorySession session) {
        return get_symbolic_icon.ofAddress(get_symbolic_icon$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


