// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkEditableInterface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("base_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("insert_text"),
        Constants$root.C_POINTER$LAYOUT.withName("delete_text"),
        Constants$root.C_POINTER$LAYOUT.withName("changed"),
        Constants$root.C_POINTER$LAYOUT.withName("do_insert_text"),
        Constants$root.C_POINTER$LAYOUT.withName("do_delete_text"),
        Constants$root.C_POINTER$LAYOUT.withName("get_chars"),
        Constants$root.C_POINTER$LAYOUT.withName("set_selection_bounds"),
        Constants$root.C_POINTER$LAYOUT.withName("get_selection_bounds"),
        Constants$root.C_POINTER$LAYOUT.withName("set_position"),
        Constants$root.C_POINTER$LAYOUT.withName("get_position")
    ).withName("_GtkEditableInterface");
    public static MemoryLayout $LAYOUT() {
        return _GtkEditableInterface.$struct$LAYOUT;
    }
    public static MemorySegment base_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor insert_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle insert_text$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.insert_text$FUNC
    );
    public interface insert_text {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(insert_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(insert_text.class, fi, _GtkEditableInterface.insert_text$FUNC, session);
        }
        static insert_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkEditableInterface.insert_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle insert_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("insert_text"));
    public static VarHandle insert_text$VH() {
        return _GtkEditableInterface.insert_text$VH;
    }
    public static MemoryAddress insert_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.insert_text$VH.get(seg);
    }
    public static void insert_text$set( MemorySegment seg, MemoryAddress x) {
        _GtkEditableInterface.insert_text$VH.set(seg, x);
    }
    public static MemoryAddress insert_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.insert_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void insert_text$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEditableInterface.insert_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert_text insert_text (MemorySegment segment, MemorySession session) {
        return insert_text.ofAddress(insert_text$get(segment), session);
    }
    static final FunctionDescriptor delete_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle delete_text$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.delete_text$FUNC
    );
    public interface delete_text {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(delete_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(delete_text.class, fi, _GtkEditableInterface.delete_text$FUNC, session);
        }
        static delete_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    _GtkEditableInterface.delete_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle delete_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("delete_text"));
    public static VarHandle delete_text$VH() {
        return _GtkEditableInterface.delete_text$VH;
    }
    public static MemoryAddress delete_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.delete_text$VH.get(seg);
    }
    public static void delete_text$set( MemorySegment seg, MemoryAddress x) {
        _GtkEditableInterface.delete_text$VH.set(seg, x);
    }
    public static MemoryAddress delete_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.delete_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_text$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEditableInterface.delete_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_text delete_text (MemorySegment segment, MemorySession session) {
        return delete_text.ofAddress(delete_text$get(segment), session);
    }
    static final FunctionDescriptor changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle changed$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.changed$FUNC
    );
    public interface changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(changed.class, fi, _GtkEditableInterface.changed$FUNC, session);
        }
        static changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkEditableInterface.changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("changed"));
    public static VarHandle changed$VH() {
        return _GtkEditableInterface.changed$VH;
    }
    public static MemoryAddress changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.changed$VH.get(seg);
    }
    public static void changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkEditableInterface.changed$VH.set(seg, x);
    }
    public static MemoryAddress changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEditableInterface.changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static changed changed (MemorySegment segment, MemorySession session) {
        return changed.ofAddress(changed$get(segment), session);
    }
    static final FunctionDescriptor do_insert_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle do_insert_text$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.do_insert_text$FUNC
    );
    public interface do_insert_text {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(do_insert_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(do_insert_text.class, fi, _GtkEditableInterface.do_insert_text$FUNC, session);
        }
        static do_insert_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkEditableInterface.do_insert_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle do_insert_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("do_insert_text"));
    public static VarHandle do_insert_text$VH() {
        return _GtkEditableInterface.do_insert_text$VH;
    }
    public static MemoryAddress do_insert_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.do_insert_text$VH.get(seg);
    }
    public static void do_insert_text$set( MemorySegment seg, MemoryAddress x) {
        _GtkEditableInterface.do_insert_text$VH.set(seg, x);
    }
    public static MemoryAddress do_insert_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.do_insert_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void do_insert_text$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEditableInterface.do_insert_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static do_insert_text do_insert_text (MemorySegment segment, MemorySession session) {
        return do_insert_text.ofAddress(do_insert_text$get(segment), session);
    }
    static final FunctionDescriptor do_delete_text$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle do_delete_text$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.do_delete_text$FUNC
    );
    public interface do_delete_text {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(do_delete_text fi, MemorySession session) {
            return RuntimeHelper.upcallStub(do_delete_text.class, fi, _GtkEditableInterface.do_delete_text$FUNC, session);
        }
        static do_delete_text ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    _GtkEditableInterface.do_delete_text$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle do_delete_text$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("do_delete_text"));
    public static VarHandle do_delete_text$VH() {
        return _GtkEditableInterface.do_delete_text$VH;
    }
    public static MemoryAddress do_delete_text$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.do_delete_text$VH.get(seg);
    }
    public static void do_delete_text$set( MemorySegment seg, MemoryAddress x) {
        _GtkEditableInterface.do_delete_text$VH.set(seg, x);
    }
    public static MemoryAddress do_delete_text$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.do_delete_text$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void do_delete_text$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEditableInterface.do_delete_text$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static do_delete_text do_delete_text (MemorySegment segment, MemorySession session) {
        return do_delete_text.ofAddress(do_delete_text$get(segment), session);
    }
    static final FunctionDescriptor get_chars$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_chars$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.get_chars$FUNC
    );
    public interface get_chars {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(get_chars fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_chars.class, fi, _GtkEditableInterface.get_chars$FUNC, session);
        }
        static get_chars ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkEditableInterface.get_chars$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_chars$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_chars"));
    public static VarHandle get_chars$VH() {
        return _GtkEditableInterface.get_chars$VH;
    }
    public static MemoryAddress get_chars$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.get_chars$VH.get(seg);
    }
    public static void get_chars$set( MemorySegment seg, MemoryAddress x) {
        _GtkEditableInterface.get_chars$VH.set(seg, x);
    }
    public static MemoryAddress get_chars$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.get_chars$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_chars$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEditableInterface.get_chars$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_chars get_chars (MemorySegment segment, MemorySession session) {
        return get_chars.ofAddress(get_chars$get(segment), session);
    }
    static final FunctionDescriptor set_selection_bounds$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_selection_bounds$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.set_selection_bounds$FUNC
    );
    public interface set_selection_bounds {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, int _x2);
        static MemorySegment allocate(set_selection_bounds fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_selection_bounds.class, fi, _GtkEditableInterface.set_selection_bounds$FUNC, session);
        }
        static set_selection_bounds ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, int __x2) -> {
                try {
                    _GtkEditableInterface.set_selection_bounds$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_selection_bounds$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_selection_bounds"));
    public static VarHandle set_selection_bounds$VH() {
        return _GtkEditableInterface.set_selection_bounds$VH;
    }
    public static MemoryAddress set_selection_bounds$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.set_selection_bounds$VH.get(seg);
    }
    public static void set_selection_bounds$set( MemorySegment seg, MemoryAddress x) {
        _GtkEditableInterface.set_selection_bounds$VH.set(seg, x);
    }
    public static MemoryAddress set_selection_bounds$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.set_selection_bounds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_selection_bounds$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEditableInterface.set_selection_bounds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_selection_bounds set_selection_bounds (MemorySegment segment, MemorySession session) {
        return set_selection_bounds.ofAddress(set_selection_bounds$get(segment), session);
    }
    static final FunctionDescriptor get_selection_bounds$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_selection_bounds$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.get_selection_bounds$FUNC
    );
    public interface get_selection_bounds {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(get_selection_bounds fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_selection_bounds.class, fi, _GtkEditableInterface.get_selection_bounds$FUNC, session);
        }
        static get_selection_bounds ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GtkEditableInterface.get_selection_bounds$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_selection_bounds$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_selection_bounds"));
    public static VarHandle get_selection_bounds$VH() {
        return _GtkEditableInterface.get_selection_bounds$VH;
    }
    public static MemoryAddress get_selection_bounds$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.get_selection_bounds$VH.get(seg);
    }
    public static void get_selection_bounds$set( MemorySegment seg, MemoryAddress x) {
        _GtkEditableInterface.get_selection_bounds$VH.set(seg, x);
    }
    public static MemoryAddress get_selection_bounds$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.get_selection_bounds$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_selection_bounds$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEditableInterface.get_selection_bounds$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_selection_bounds get_selection_bounds (MemorySegment segment, MemorySession session) {
        return get_selection_bounds.ofAddress(get_selection_bounds$get(segment), session);
    }
    static final FunctionDescriptor set_position$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle set_position$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.set_position$FUNC
    );
    public interface set_position {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(set_position fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_position.class, fi, _GtkEditableInterface.set_position$FUNC, session);
        }
        static set_position ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _GtkEditableInterface.set_position$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_position"));
    public static VarHandle set_position$VH() {
        return _GtkEditableInterface.set_position$VH;
    }
    public static MemoryAddress set_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.set_position$VH.get(seg);
    }
    public static void set_position$set( MemorySegment seg, MemoryAddress x) {
        _GtkEditableInterface.set_position$VH.set(seg, x);
    }
    public static MemoryAddress set_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.set_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_position$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEditableInterface.set_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_position set_position (MemorySegment segment, MemorySession session) {
        return set_position.ofAddress(set_position$get(segment), session);
    }
    static final FunctionDescriptor get_position$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_position$MH = RuntimeHelper.downcallHandle(
        _GtkEditableInterface.get_position$FUNC
    );
    public interface get_position {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_position fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_position.class, fi, _GtkEditableInterface.get_position$FUNC, session);
        }
        static get_position ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GtkEditableInterface.get_position$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_position$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_position"));
    public static VarHandle get_position$VH() {
        return _GtkEditableInterface.get_position$VH;
    }
    public static MemoryAddress get_position$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.get_position$VH.get(seg);
    }
    public static void get_position$set( MemorySegment seg, MemoryAddress x) {
        _GtkEditableInterface.get_position$VH.set(seg, x);
    }
    public static MemoryAddress get_position$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkEditableInterface.get_position$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_position$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkEditableInterface.get_position$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_position get_position (MemorySegment segment, MemorySession session) {
        return get_position.ofAddress(get_position$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


