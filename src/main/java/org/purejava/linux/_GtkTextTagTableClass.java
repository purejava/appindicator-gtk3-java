// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkTextTagTableClass {
 *     GObjectClass parent_class;
 *     void (*tag_changed)(GtkTextTagTable*,GtkTextTag*,gboolean);
 *     void (*tag_added)(GtkTextTagTable*,GtkTextTag*);
 *     void (*tag_removed)(GtkTextTagTable*,GtkTextTag*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkTextTagTableClass {

    static final StructLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("pspecs"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("n_pspecs"),
            MemoryLayout.sequenceLayout(3, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("tag_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("tag_added"),
        Constants$root.C_POINTER$LAYOUT.withName("tag_removed"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4")
    ).withName("_GtkTextTagTableClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkTextTagTableClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor tag_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final FunctionDescriptor tag_changed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle tag_changed_UP$MH = RuntimeHelper.upcallHandle(tag_changed.class, "apply", _GtkTextTagTableClass.tag_changed_UP$FUNC);
    static final FunctionDescriptor tag_changed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle tag_changed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTextTagTableClass.tag_changed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*tag_changed)(GtkTextTagTable*,GtkTextTag*,gboolean);
     * }
     */
    public interface tag_changed {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(tag_changed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTextTagTableClass.tag_changed_UP$MH, fi, _GtkTextTagTableClass.tag_changed$FUNC, scope);
        }
        static tag_changed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    _GtkTextTagTableClass.tag_changed_DOWN$MH.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle tag_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tag_changed"));
    public static VarHandle tag_changed$VH() {
        return _GtkTextTagTableClass.tag_changed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*tag_changed)(GtkTextTagTable*,GtkTextTag*,gboolean);
     * }
     */
    public static MemorySegment tag_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass.tag_changed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*tag_changed)(GtkTextTagTable*,GtkTextTag*,gboolean);
     * }
     */
    public static void tag_changed$set(MemorySegment seg, MemorySegment x) {
        _GtkTextTagTableClass.tag_changed$VH.set(seg, x);
    }
    public static MemorySegment tag_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass.tag_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tag_changed$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTextTagTableClass.tag_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static tag_changed tag_changed(MemorySegment segment, SegmentScope scope) {
        return tag_changed.ofAddress(tag_changed$get(segment), scope);
    }
    static final FunctionDescriptor tag_added$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor tag_added_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle tag_added_UP$MH = RuntimeHelper.upcallHandle(tag_added.class, "apply", _GtkTextTagTableClass.tag_added_UP$FUNC);
    static final FunctionDescriptor tag_added_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle tag_added_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTextTagTableClass.tag_added_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*tag_added)(GtkTextTagTable*,GtkTextTag*);
     * }
     */
    public interface tag_added {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(tag_added fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTextTagTableClass.tag_added_UP$MH, fi, _GtkTextTagTableClass.tag_added$FUNC, scope);
        }
        static tag_added ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkTextTagTableClass.tag_added_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle tag_added$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tag_added"));
    public static VarHandle tag_added$VH() {
        return _GtkTextTagTableClass.tag_added$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*tag_added)(GtkTextTagTable*,GtkTextTag*);
     * }
     */
    public static MemorySegment tag_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass.tag_added$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*tag_added)(GtkTextTagTable*,GtkTextTag*);
     * }
     */
    public static void tag_added$set(MemorySegment seg, MemorySegment x) {
        _GtkTextTagTableClass.tag_added$VH.set(seg, x);
    }
    public static MemorySegment tag_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass.tag_added$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tag_added$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTextTagTableClass.tag_added$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static tag_added tag_added(MemorySegment segment, SegmentScope scope) {
        return tag_added.ofAddress(tag_added$get(segment), scope);
    }
    static final FunctionDescriptor tag_removed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final FunctionDescriptor tag_removed_UP$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle tag_removed_UP$MH = RuntimeHelper.upcallHandle(tag_removed.class, "apply", _GtkTextTagTableClass.tag_removed_UP$FUNC);
    static final FunctionDescriptor tag_removed_DOWN$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle tag_removed_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTextTagTableClass.tag_removed_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*tag_removed)(GtkTextTagTable*,GtkTextTag*);
     * }
     */
    public interface tag_removed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(tag_removed fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTextTagTableClass.tag_removed_UP$MH, fi, _GtkTextTagTableClass.tag_removed$FUNC, scope);
        }
        static tag_removed ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    _GtkTextTagTableClass.tag_removed_DOWN$MH.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle tag_removed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("tag_removed"));
    public static VarHandle tag_removed$VH() {
        return _GtkTextTagTableClass.tag_removed$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*tag_removed)(GtkTextTagTable*,GtkTextTag*);
     * }
     */
    public static MemorySegment tag_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass.tag_removed$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*tag_removed)(GtkTextTagTable*,GtkTextTag*);
     * }
     */
    public static void tag_removed$set(MemorySegment seg, MemorySegment x) {
        _GtkTextTagTableClass.tag_removed$VH.set(seg, x);
    }
    public static MemorySegment tag_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass.tag_removed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void tag_removed$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTextTagTableClass.tag_removed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static tag_removed tag_removed(MemorySegment segment, SegmentScope scope) {
        return tag_removed.ofAddress(tag_removed$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved1_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved1.class, "apply", _GtkTextTagTableClass._gtk_reserved1_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved1_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTextTagTableClass._gtk_reserved1_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTextTagTableClass._gtk_reserved1_UP$MH, fi, _GtkTextTagTableClass._gtk_reserved1$FUNC, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkTextTagTableClass._gtk_reserved1_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkTextTagTableClass._gtk_reserved1$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass._gtk_reserved1$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        _GtkTextTagTableClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTextTagTableClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved2_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved2.class, "apply", _GtkTextTagTableClass._gtk_reserved2_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved2_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTextTagTableClass._gtk_reserved2_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTextTagTableClass._gtk_reserved2_UP$MH, fi, _GtkTextTagTableClass._gtk_reserved2$FUNC, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkTextTagTableClass._gtk_reserved2_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkTextTagTableClass._gtk_reserved2$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass._gtk_reserved2$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        _GtkTextTagTableClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTextTagTableClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved3_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved3.class, "apply", _GtkTextTagTableClass._gtk_reserved3_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved3_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTextTagTableClass._gtk_reserved3_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTextTagTableClass._gtk_reserved3_UP$MH, fi, _GtkTextTagTableClass._gtk_reserved3$FUNC, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkTextTagTableClass._gtk_reserved3_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkTextTagTableClass._gtk_reserved3$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass._gtk_reserved3$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        _GtkTextTagTableClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTextTagTableClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final FunctionDescriptor _gtk_reserved4_UP$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4_UP$MH = RuntimeHelper.upcallHandle(_gtk_reserved4.class, "apply", _GtkTextTagTableClass._gtk_reserved4_UP$FUNC);
    static final FunctionDescriptor _gtk_reserved4_DOWN$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4_DOWN$MH = RuntimeHelper.downcallHandle(
        _GtkTextTagTableClass._gtk_reserved4_DOWN$FUNC
    );
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, SegmentScope scope) {
            return RuntimeHelper.upcallStub(_GtkTextTagTableClass._gtk_reserved4_UP$MH, fi, _GtkTextTagTableClass._gtk_reserved4$FUNC, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, SegmentScope scope) {
            MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
            return () -> {
                try {
                    _GtkTextTagTableClass._gtk_reserved4_DOWN$MH.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkTextTagTableClass._gtk_reserved4$VH;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass._gtk_reserved4$VH.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        _GtkTextTagTableClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)_GtkTextTagTableClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        _GtkTextTagTableClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, SegmentScope scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, SegmentScope scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


