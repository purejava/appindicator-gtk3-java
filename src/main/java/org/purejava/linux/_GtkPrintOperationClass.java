// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkPrintOperationClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("done"),
        Constants$root.C_POINTER$LAYOUT.withName("begin_print"),
        Constants$root.C_POINTER$LAYOUT.withName("paginate"),
        Constants$root.C_POINTER$LAYOUT.withName("request_page_setup"),
        Constants$root.C_POINTER$LAYOUT.withName("draw_page"),
        Constants$root.C_POINTER$LAYOUT.withName("end_print"),
        Constants$root.C_POINTER$LAYOUT.withName("status_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("create_custom_widget"),
        Constants$root.C_POINTER$LAYOUT.withName("custom_widget_apply"),
        Constants$root.C_POINTER$LAYOUT.withName("preview"),
        Constants$root.C_POINTER$LAYOUT.withName("update_custom_widget"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved8")
    ).withName("_GtkPrintOperationClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkPrintOperationClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor done$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle done$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.done$FUNC
    );
    public interface done {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(done fi, MemorySession session) {
            return RuntimeHelper.upcallStub(done.class, fi, _GtkPrintOperationClass.done$FUNC, session);
        }
        static done ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _GtkPrintOperationClass.done$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle done$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("done"));
    public static VarHandle done$VH() {
        return _GtkPrintOperationClass.done$VH;
    }
    public static MemoryAddress done$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.done$VH.get(seg);
    }
    public static void done$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.done$VH.set(seg, x);
    }
    public static MemoryAddress done$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.done$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void done$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.done$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static done done (MemorySegment segment, MemorySession session) {
        return done.ofAddress(done$get(segment), session);
    }
    static final FunctionDescriptor begin_print$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle begin_print$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.begin_print$FUNC
    );
    public interface begin_print {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(begin_print fi, MemorySession session) {
            return RuntimeHelper.upcallStub(begin_print.class, fi, _GtkPrintOperationClass.begin_print$FUNC, session);
        }
        static begin_print ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkPrintOperationClass.begin_print$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle begin_print$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("begin_print"));
    public static VarHandle begin_print$VH() {
        return _GtkPrintOperationClass.begin_print$VH;
    }
    public static MemoryAddress begin_print$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.begin_print$VH.get(seg);
    }
    public static void begin_print$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.begin_print$VH.set(seg, x);
    }
    public static MemoryAddress begin_print$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.begin_print$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void begin_print$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.begin_print$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static begin_print begin_print (MemorySegment segment, MemorySession session) {
        return begin_print.ofAddress(begin_print$get(segment), session);
    }
    static final FunctionDescriptor paginate$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle paginate$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.paginate$FUNC
    );
    public interface paginate {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(paginate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(paginate.class, fi, _GtkPrintOperationClass.paginate$FUNC, session);
        }
        static paginate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_GtkPrintOperationClass.paginate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle paginate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("paginate"));
    public static VarHandle paginate$VH() {
        return _GtkPrintOperationClass.paginate$VH;
    }
    public static MemoryAddress paginate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.paginate$VH.get(seg);
    }
    public static void paginate$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.paginate$VH.set(seg, x);
    }
    public static MemoryAddress paginate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.paginate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void paginate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.paginate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static paginate paginate (MemorySegment segment, MemorySession session) {
        return paginate.ofAddress(paginate$get(segment), session);
    }
    static final FunctionDescriptor request_page_setup$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle request_page_setup$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.request_page_setup$FUNC
    );
    public interface request_page_setup {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(request_page_setup fi, MemorySession session) {
            return RuntimeHelper.upcallStub(request_page_setup.class, fi, _GtkPrintOperationClass.request_page_setup$FUNC, session);
        }
        static request_page_setup ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkPrintOperationClass.request_page_setup$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle request_page_setup$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("request_page_setup"));
    public static VarHandle request_page_setup$VH() {
        return _GtkPrintOperationClass.request_page_setup$VH;
    }
    public static MemoryAddress request_page_setup$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.request_page_setup$VH.get(seg);
    }
    public static void request_page_setup$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.request_page_setup$VH.set(seg, x);
    }
    public static MemoryAddress request_page_setup$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.request_page_setup$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void request_page_setup$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.request_page_setup$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static request_page_setup request_page_setup (MemorySegment segment, MemorySession session) {
        return request_page_setup.ofAddress(request_page_setup$get(segment), session);
    }
    static final FunctionDescriptor draw_page$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle draw_page$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.draw_page$FUNC
    );
    public interface draw_page {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(draw_page fi, MemorySession session) {
            return RuntimeHelper.upcallStub(draw_page.class, fi, _GtkPrintOperationClass.draw_page$FUNC, session);
        }
        static draw_page ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    _GtkPrintOperationClass.draw_page$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle draw_page$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("draw_page"));
    public static VarHandle draw_page$VH() {
        return _GtkPrintOperationClass.draw_page$VH;
    }
    public static MemoryAddress draw_page$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.draw_page$VH.get(seg);
    }
    public static void draw_page$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.draw_page$VH.set(seg, x);
    }
    public static MemoryAddress draw_page$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.draw_page$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void draw_page$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.draw_page$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw_page draw_page (MemorySegment segment, MemorySession session) {
        return draw_page.ofAddress(draw_page$get(segment), session);
    }
    static final FunctionDescriptor end_print$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle end_print$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.end_print$FUNC
    );
    public interface end_print {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(end_print fi, MemorySession session) {
            return RuntimeHelper.upcallStub(end_print.class, fi, _GtkPrintOperationClass.end_print$FUNC, session);
        }
        static end_print ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkPrintOperationClass.end_print$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle end_print$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("end_print"));
    public static VarHandle end_print$VH() {
        return _GtkPrintOperationClass.end_print$VH;
    }
    public static MemoryAddress end_print$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.end_print$VH.get(seg);
    }
    public static void end_print$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.end_print$VH.set(seg, x);
    }
    public static MemoryAddress end_print$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.end_print$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void end_print$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.end_print$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static end_print end_print (MemorySegment segment, MemorySession session) {
        return end_print.ofAddress(end_print$get(segment), session);
    }
    static final FunctionDescriptor status_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle status_changed$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.status_changed$FUNC
    );
    public interface status_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(status_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(status_changed.class, fi, _GtkPrintOperationClass.status_changed$FUNC, session);
        }
        static status_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkPrintOperationClass.status_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle status_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("status_changed"));
    public static VarHandle status_changed$VH() {
        return _GtkPrintOperationClass.status_changed$VH;
    }
    public static MemoryAddress status_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.status_changed$VH.get(seg);
    }
    public static void status_changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.status_changed$VH.set(seg, x);
    }
    public static MemoryAddress status_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.status_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void status_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.status_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static status_changed status_changed (MemorySegment segment, MemorySession session) {
        return status_changed.ofAddress(status_changed$get(segment), session);
    }
    static final FunctionDescriptor create_custom_widget$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle create_custom_widget$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.create_custom_widget$FUNC
    );
    public interface create_custom_widget {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(create_custom_widget fi, MemorySession session) {
            return RuntimeHelper.upcallStub(create_custom_widget.class, fi, _GtkPrintOperationClass.create_custom_widget$FUNC, session);
        }
        static create_custom_widget ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.create_custom_widget$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle create_custom_widget$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("create_custom_widget"));
    public static VarHandle create_custom_widget$VH() {
        return _GtkPrintOperationClass.create_custom_widget$VH;
    }
    public static MemoryAddress create_custom_widget$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.create_custom_widget$VH.get(seg);
    }
    public static void create_custom_widget$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.create_custom_widget$VH.set(seg, x);
    }
    public static MemoryAddress create_custom_widget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.create_custom_widget$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void create_custom_widget$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.create_custom_widget$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_custom_widget create_custom_widget (MemorySegment segment, MemorySession session) {
        return create_custom_widget.ofAddress(create_custom_widget$get(segment), session);
    }
    static final FunctionDescriptor custom_widget_apply$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle custom_widget_apply$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.custom_widget_apply$FUNC
    );
    public interface custom_widget_apply {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(custom_widget_apply fi, MemorySession session) {
            return RuntimeHelper.upcallStub(custom_widget_apply.class, fi, _GtkPrintOperationClass.custom_widget_apply$FUNC, session);
        }
        static custom_widget_apply ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkPrintOperationClass.custom_widget_apply$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle custom_widget_apply$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("custom_widget_apply"));
    public static VarHandle custom_widget_apply$VH() {
        return _GtkPrintOperationClass.custom_widget_apply$VH;
    }
    public static MemoryAddress custom_widget_apply$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.custom_widget_apply$VH.get(seg);
    }
    public static void custom_widget_apply$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.custom_widget_apply$VH.set(seg, x);
    }
    public static MemoryAddress custom_widget_apply$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.custom_widget_apply$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void custom_widget_apply$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.custom_widget_apply$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static custom_widget_apply custom_widget_apply (MemorySegment segment, MemorySession session) {
        return custom_widget_apply.ofAddress(custom_widget_apply$get(segment), session);
    }
    static final FunctionDescriptor preview$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle preview$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.preview$FUNC
    );
    public interface preview {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(preview fi, MemorySession session) {
            return RuntimeHelper.upcallStub(preview.class, fi, _GtkPrintOperationClass.preview$FUNC, session);
        }
        static preview ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    return (int)_GtkPrintOperationClass.preview$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle preview$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("preview"));
    public static VarHandle preview$VH() {
        return _GtkPrintOperationClass.preview$VH;
    }
    public static MemoryAddress preview$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.preview$VH.get(seg);
    }
    public static void preview$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.preview$VH.set(seg, x);
    }
    public static MemoryAddress preview$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.preview$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void preview$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.preview$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static preview preview (MemorySegment segment, MemorySession session) {
        return preview.ofAddress(preview$get(segment), session);
    }
    static final FunctionDescriptor update_custom_widget$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle update_custom_widget$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass.update_custom_widget$FUNC
    );
    public interface update_custom_widget {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(update_custom_widget fi, MemorySession session) {
            return RuntimeHelper.upcallStub(update_custom_widget.class, fi, _GtkPrintOperationClass.update_custom_widget$FUNC, session);
        }
        static update_custom_widget ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkPrintOperationClass.update_custom_widget$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle update_custom_widget$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("update_custom_widget"));
    public static VarHandle update_custom_widget$VH() {
        return _GtkPrintOperationClass.update_custom_widget$VH;
    }
    public static MemoryAddress update_custom_widget$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.update_custom_widget$VH.get(seg);
    }
    public static void update_custom_widget$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass.update_custom_widget$VH.set(seg, x);
    }
    public static MemoryAddress update_custom_widget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass.update_custom_widget$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void update_custom_widget$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass.update_custom_widget$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static update_custom_widget update_custom_widget (MemorySegment segment, MemorySession session) {
        return update_custom_widget.ofAddress(update_custom_widget$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass._gtk_reserved1$FUNC
    );
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved1.class, fi, _GtkPrintOperationClass._gtk_reserved1$FUNC, session);
        }
        static _gtk_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationClass._gtk_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkPrintOperationClass._gtk_reserved1$VH;
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved1$VH.get(seg);
    }
    public static void _gtk_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass._gtk_reserved2$FUNC
    );
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved2.class, fi, _GtkPrintOperationClass._gtk_reserved2$FUNC, session);
        }
        static _gtk_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationClass._gtk_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkPrintOperationClass._gtk_reserved2$VH;
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved2$VH.get(seg);
    }
    public static void _gtk_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass._gtk_reserved3$FUNC
    );
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved3.class, fi, _GtkPrintOperationClass._gtk_reserved3$FUNC, session);
        }
        static _gtk_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationClass._gtk_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkPrintOperationClass._gtk_reserved3$VH;
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved3$VH.get(seg);
    }
    public static void _gtk_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass._gtk_reserved4$FUNC
    );
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved4.class, fi, _GtkPrintOperationClass._gtk_reserved4$FUNC, session);
        }
        static _gtk_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationClass._gtk_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkPrintOperationClass._gtk_reserved4$VH;
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved4$VH.get(seg);
    }
    public static void _gtk_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass._gtk_reserved5$FUNC
    );
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved5.class, fi, _GtkPrintOperationClass._gtk_reserved5$FUNC, session);
        }
        static _gtk_reserved5 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationClass._gtk_reserved5$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved5"));
    public static VarHandle _gtk_reserved5$VH() {
        return _GtkPrintOperationClass._gtk_reserved5$VH;
    }
    public static MemoryAddress _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved5$VH.get(seg);
    }
    public static void _gtk_reserved5$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved5$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass._gtk_reserved6$FUNC
    );
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved6.class, fi, _GtkPrintOperationClass._gtk_reserved6$FUNC, session);
        }
        static _gtk_reserved6 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationClass._gtk_reserved6$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved6"));
    public static VarHandle _gtk_reserved6$VH() {
        return _GtkPrintOperationClass._gtk_reserved6$VH;
    }
    public static MemoryAddress _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved6$VH.get(seg);
    }
    public static void _gtk_reserved6$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved6$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved7$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved7$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass._gtk_reserved7$FUNC
    );
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved7.class, fi, _GtkPrintOperationClass._gtk_reserved7$FUNC, session);
        }
        static _gtk_reserved7 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationClass._gtk_reserved7$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved7$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved7"));
    public static VarHandle _gtk_reserved7$VH() {
        return _GtkPrintOperationClass._gtk_reserved7$VH;
    }
    public static MemoryAddress _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved7$VH.get(seg);
    }
    public static void _gtk_reserved7$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved7$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved7$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved7$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved8$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved8$MH = RuntimeHelper.downcallHandle(
        _GtkPrintOperationClass._gtk_reserved8$FUNC
    );
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved8.class, fi, _GtkPrintOperationClass._gtk_reserved8$FUNC, session);
        }
        static _gtk_reserved8 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkPrintOperationClass._gtk_reserved8$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved8$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved8"));
    public static VarHandle _gtk_reserved8$VH() {
        return _GtkPrintOperationClass._gtk_reserved8$VH;
    }
    public static MemoryAddress _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved8$VH.get(seg);
    }
    public static void _gtk_reserved8$set( MemorySegment seg, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved8$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkPrintOperationClass._gtk_reserved8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkPrintOperationClass._gtk_reserved8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


