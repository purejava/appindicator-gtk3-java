// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkThemingEngineClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("render_line"),
        Constants$root.C_POINTER$LAYOUT.withName("render_background"),
        Constants$root.C_POINTER$LAYOUT.withName("render_frame"),
        Constants$root.C_POINTER$LAYOUT.withName("render_frame_gap"),
        Constants$root.C_POINTER$LAYOUT.withName("render_extension"),
        Constants$root.C_POINTER$LAYOUT.withName("render_check"),
        Constants$root.C_POINTER$LAYOUT.withName("render_option"),
        Constants$root.C_POINTER$LAYOUT.withName("render_arrow"),
        Constants$root.C_POINTER$LAYOUT.withName("render_expander"),
        Constants$root.C_POINTER$LAYOUT.withName("render_focus"),
        Constants$root.C_POINTER$LAYOUT.withName("render_layout"),
        Constants$root.C_POINTER$LAYOUT.withName("render_slider"),
        Constants$root.C_POINTER$LAYOUT.withName("render_handle"),
        Constants$root.C_POINTER$LAYOUT.withName("render_activity"),
        Constants$root.C_POINTER$LAYOUT.withName("render_icon_pixbuf"),
        Constants$root.C_POINTER$LAYOUT.withName("render_icon"),
        Constants$root.C_POINTER$LAYOUT.withName("render_icon_surface"),
        MemoryLayout.sequenceLayout(14, Constants$root.C_POINTER$LAYOUT).withName("padding")
    ).withName("_GtkThemingEngineClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkThemingEngineClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor render_line$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_line$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_line$FUNC
    );
    public interface render_line {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5);
        static MemorySegment allocate(render_line fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_line.class, fi, _GtkThemingEngineClass.render_line$FUNC, session);
        }
        static render_line ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5) -> {
                try {
                    _GtkThemingEngineClass.render_line$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_line$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_line"));
    public static VarHandle render_line$VH() {
        return _GtkThemingEngineClass.render_line$VH;
    }
    public static MemoryAddress render_line$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_line$VH.get(seg);
    }
    public static void render_line$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_line$VH.set(seg, x);
    }
    public static MemoryAddress render_line$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_line$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_line$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_line$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_line render_line (MemorySegment segment, MemorySession session) {
        return render_line.ofAddress(render_line$get(segment), session);
    }
    static final FunctionDescriptor render_background$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_background$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_background$FUNC
    );
    public interface render_background {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5);
        static MemorySegment allocate(render_background fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_background.class, fi, _GtkThemingEngineClass.render_background$FUNC, session);
        }
        static render_background ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5) -> {
                try {
                    _GtkThemingEngineClass.render_background$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_background$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_background"));
    public static VarHandle render_background$VH() {
        return _GtkThemingEngineClass.render_background$VH;
    }
    public static MemoryAddress render_background$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_background$VH.get(seg);
    }
    public static void render_background$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_background$VH.set(seg, x);
    }
    public static MemoryAddress render_background$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_background$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_background$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_background$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_background render_background (MemorySegment segment, MemorySession session) {
        return render_background.ofAddress(render_background$get(segment), session);
    }
    static final FunctionDescriptor render_frame$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_frame$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_frame$FUNC
    );
    public interface render_frame {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5);
        static MemorySegment allocate(render_frame fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_frame.class, fi, _GtkThemingEngineClass.render_frame$FUNC, session);
        }
        static render_frame ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5) -> {
                try {
                    _GtkThemingEngineClass.render_frame$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_frame$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_frame"));
    public static VarHandle render_frame$VH() {
        return _GtkThemingEngineClass.render_frame$VH;
    }
    public static MemoryAddress render_frame$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_frame$VH.get(seg);
    }
    public static void render_frame$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_frame$VH.set(seg, x);
    }
    public static MemoryAddress render_frame$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_frame$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_frame$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_frame$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_frame render_frame (MemorySegment segment, MemorySession session) {
        return render_frame.ofAddress(render_frame$get(segment), session);
    }
    static final FunctionDescriptor render_frame_gap$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_frame_gap$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_frame_gap$FUNC
    );
    public interface render_frame_gap {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5, int _x6, double _x7, double _x8);
        static MemorySegment allocate(render_frame_gap fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_frame_gap.class, fi, _GtkThemingEngineClass.render_frame_gap$FUNC, session);
        }
        static render_frame_gap ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5, int __x6, double __x7, double __x8) -> {
                try {
                    _GtkThemingEngineClass.render_frame_gap$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5, __x6, __x7, __x8);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_frame_gap$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_frame_gap"));
    public static VarHandle render_frame_gap$VH() {
        return _GtkThemingEngineClass.render_frame_gap$VH;
    }
    public static MemoryAddress render_frame_gap$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_frame_gap$VH.get(seg);
    }
    public static void render_frame_gap$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_frame_gap$VH.set(seg, x);
    }
    public static MemoryAddress render_frame_gap$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_frame_gap$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_frame_gap$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_frame_gap$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_frame_gap render_frame_gap (MemorySegment segment, MemorySession session) {
        return render_frame_gap.ofAddress(render_frame_gap$get(segment), session);
    }
    static final FunctionDescriptor render_extension$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle render_extension$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_extension$FUNC
    );
    public interface render_extension {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5, int _x6);
        static MemorySegment allocate(render_extension fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_extension.class, fi, _GtkThemingEngineClass.render_extension$FUNC, session);
        }
        static render_extension ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5, int __x6) -> {
                try {
                    _GtkThemingEngineClass.render_extension$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_extension$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_extension"));
    public static VarHandle render_extension$VH() {
        return _GtkThemingEngineClass.render_extension$VH;
    }
    public static MemoryAddress render_extension$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_extension$VH.get(seg);
    }
    public static void render_extension$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_extension$VH.set(seg, x);
    }
    public static MemoryAddress render_extension$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_extension$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_extension$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_extension$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_extension render_extension (MemorySegment segment, MemorySession session) {
        return render_extension.ofAddress(render_extension$get(segment), session);
    }
    static final FunctionDescriptor render_check$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_check$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_check$FUNC
    );
    public interface render_check {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5);
        static MemorySegment allocate(render_check fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_check.class, fi, _GtkThemingEngineClass.render_check$FUNC, session);
        }
        static render_check ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5) -> {
                try {
                    _GtkThemingEngineClass.render_check$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_check$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_check"));
    public static VarHandle render_check$VH() {
        return _GtkThemingEngineClass.render_check$VH;
    }
    public static MemoryAddress render_check$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_check$VH.get(seg);
    }
    public static void render_check$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_check$VH.set(seg, x);
    }
    public static MemoryAddress render_check$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_check$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_check$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_check$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_check render_check (MemorySegment segment, MemorySession session) {
        return render_check.ofAddress(render_check$get(segment), session);
    }
    static final FunctionDescriptor render_option$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_option$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_option$FUNC
    );
    public interface render_option {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5);
        static MemorySegment allocate(render_option fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_option.class, fi, _GtkThemingEngineClass.render_option$FUNC, session);
        }
        static render_option ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5) -> {
                try {
                    _GtkThemingEngineClass.render_option$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_option$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_option"));
    public static VarHandle render_option$VH() {
        return _GtkThemingEngineClass.render_option$VH;
    }
    public static MemoryAddress render_option$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_option$VH.get(seg);
    }
    public static void render_option$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_option$VH.set(seg, x);
    }
    public static MemoryAddress render_option$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_option$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_option$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_option$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_option render_option (MemorySegment segment, MemorySession session) {
        return render_option.ofAddress(render_option$get(segment), session);
    }
    static final FunctionDescriptor render_arrow$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_arrow$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_arrow$FUNC
    );
    public interface render_arrow {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5);
        static MemorySegment allocate(render_arrow fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_arrow.class, fi, _GtkThemingEngineClass.render_arrow$FUNC, session);
        }
        static render_arrow ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5) -> {
                try {
                    _GtkThemingEngineClass.render_arrow$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_arrow$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_arrow"));
    public static VarHandle render_arrow$VH() {
        return _GtkThemingEngineClass.render_arrow$VH;
    }
    public static MemoryAddress render_arrow$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_arrow$VH.get(seg);
    }
    public static void render_arrow$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_arrow$VH.set(seg, x);
    }
    public static MemoryAddress render_arrow$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_arrow$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_arrow$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_arrow$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_arrow render_arrow (MemorySegment segment, MemorySession session) {
        return render_arrow.ofAddress(render_arrow$get(segment), session);
    }
    static final FunctionDescriptor render_expander$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_expander$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_expander$FUNC
    );
    public interface render_expander {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5);
        static MemorySegment allocate(render_expander fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_expander.class, fi, _GtkThemingEngineClass.render_expander$FUNC, session);
        }
        static render_expander ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5) -> {
                try {
                    _GtkThemingEngineClass.render_expander$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_expander$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_expander"));
    public static VarHandle render_expander$VH() {
        return _GtkThemingEngineClass.render_expander$VH;
    }
    public static MemoryAddress render_expander$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_expander$VH.get(seg);
    }
    public static void render_expander$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_expander$VH.set(seg, x);
    }
    public static MemoryAddress render_expander$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_expander$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_expander$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_expander$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_expander render_expander (MemorySegment segment, MemorySession session) {
        return render_expander.ofAddress(render_expander$get(segment), session);
    }
    static final FunctionDescriptor render_focus$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_focus$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_focus$FUNC
    );
    public interface render_focus {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5);
        static MemorySegment allocate(render_focus fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_focus.class, fi, _GtkThemingEngineClass.render_focus$FUNC, session);
        }
        static render_focus ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5) -> {
                try {
                    _GtkThemingEngineClass.render_focus$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_focus$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_focus"));
    public static VarHandle render_focus$VH() {
        return _GtkThemingEngineClass.render_focus$VH;
    }
    public static MemoryAddress render_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_focus$VH.get(seg);
    }
    public static void render_focus$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_focus$VH.set(seg, x);
    }
    public static MemoryAddress render_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_focus$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_focus$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_focus$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_focus render_focus (MemorySegment segment, MemorySession session) {
        return render_focus.ofAddress(render_focus$get(segment), session);
    }
    static final FunctionDescriptor render_layout$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle render_layout$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_layout$FUNC
    );
    public interface render_layout {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(render_layout fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_layout.class, fi, _GtkThemingEngineClass.render_layout$FUNC, session);
        }
        static render_layout ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkThemingEngineClass.render_layout$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_layout$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_layout"));
    public static VarHandle render_layout$VH() {
        return _GtkThemingEngineClass.render_layout$VH;
    }
    public static MemoryAddress render_layout$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_layout$VH.get(seg);
    }
    public static void render_layout$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_layout$VH.set(seg, x);
    }
    public static MemoryAddress render_layout$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_layout$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_layout$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_layout$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_layout render_layout (MemorySegment segment, MemorySession session) {
        return render_layout.ofAddress(render_layout$get(segment), session);
    }
    static final FunctionDescriptor render_slider$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle render_slider$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_slider$FUNC
    );
    public interface render_slider {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5, int _x6);
        static MemorySegment allocate(render_slider fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_slider.class, fi, _GtkThemingEngineClass.render_slider$FUNC, session);
        }
        static render_slider ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5, int __x6) -> {
                try {
                    _GtkThemingEngineClass.render_slider$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_slider$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_slider"));
    public static VarHandle render_slider$VH() {
        return _GtkThemingEngineClass.render_slider$VH;
    }
    public static MemoryAddress render_slider$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_slider$VH.get(seg);
    }
    public static void render_slider$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_slider$VH.set(seg, x);
    }
    public static MemoryAddress render_slider$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_slider$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_slider$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_slider$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_slider render_slider (MemorySegment segment, MemorySession session) {
        return render_slider.ofAddress(render_slider$get(segment), session);
    }
    static final FunctionDescriptor render_handle$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_handle$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_handle$FUNC
    );
    public interface render_handle {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5);
        static MemorySegment allocate(render_handle fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_handle.class, fi, _GtkThemingEngineClass.render_handle$FUNC, session);
        }
        static render_handle ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5) -> {
                try {
                    _GtkThemingEngineClass.render_handle$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_handle$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_handle"));
    public static VarHandle render_handle$VH() {
        return _GtkThemingEngineClass.render_handle$VH;
    }
    public static MemoryAddress render_handle$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_handle$VH.get(seg);
    }
    public static void render_handle$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_handle$VH.set(seg, x);
    }
    public static MemoryAddress render_handle$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_handle$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_handle$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_handle$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_handle render_handle (MemorySegment segment, MemorySession session) {
        return render_handle.ofAddress(render_handle$get(segment), session);
    }
    static final FunctionDescriptor render_activity$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_activity$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_activity$FUNC
    );
    public interface render_activity {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, double _x2, double _x3, double _x4, double _x5);
        static MemorySegment allocate(render_activity fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_activity.class, fi, _GtkThemingEngineClass.render_activity$FUNC, session);
        }
        static render_activity ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, double __x2, double __x3, double __x4, double __x5) -> {
                try {
                    _GtkThemingEngineClass.render_activity$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_activity$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_activity"));
    public static VarHandle render_activity$VH() {
        return _GtkThemingEngineClass.render_activity$VH;
    }
    public static MemoryAddress render_activity$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_activity$VH.get(seg);
    }
    public static void render_activity$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_activity$VH.set(seg, x);
    }
    public static MemoryAddress render_activity$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_activity$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_activity$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_activity$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_activity render_activity (MemorySegment segment, MemorySession session) {
        return render_activity.ofAddress(render_activity$get(segment), session);
    }
    static final FunctionDescriptor render_icon_pixbuf$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle render_icon_pixbuf$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_icon_pixbuf$FUNC
    );
    public interface render_icon_pixbuf {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(render_icon_pixbuf fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_icon_pixbuf.class, fi, _GtkThemingEngineClass.render_icon_pixbuf$FUNC, session);
        }
        static render_icon_pixbuf ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_icon_pixbuf$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_icon_pixbuf$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_icon_pixbuf"));
    public static VarHandle render_icon_pixbuf$VH() {
        return _GtkThemingEngineClass.render_icon_pixbuf$VH;
    }
    public static MemoryAddress render_icon_pixbuf$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_icon_pixbuf$VH.get(seg);
    }
    public static void render_icon_pixbuf$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_icon_pixbuf$VH.set(seg, x);
    }
    public static MemoryAddress render_icon_pixbuf$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_icon_pixbuf$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_icon_pixbuf$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_icon_pixbuf$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_icon_pixbuf render_icon_pixbuf (MemorySegment segment, MemorySession session) {
        return render_icon_pixbuf.ofAddress(render_icon_pixbuf$get(segment), session);
    }
    static final FunctionDescriptor render_icon$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_icon$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_icon$FUNC
    );
    public interface render_icon {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, double _x3, double _x4);
        static MemorySegment allocate(render_icon fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_icon.class, fi, _GtkThemingEngineClass.render_icon$FUNC, session);
        }
        static render_icon ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, double __x3, double __x4) -> {
                try {
                    _GtkThemingEngineClass.render_icon$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_icon$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_icon"));
    public static VarHandle render_icon$VH() {
        return _GtkThemingEngineClass.render_icon$VH;
    }
    public static MemoryAddress render_icon$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_icon$VH.get(seg);
    }
    public static void render_icon$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_icon$VH.set(seg, x);
    }
    public static MemoryAddress render_icon$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_icon$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_icon$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_icon$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_icon render_icon (MemorySegment segment, MemorySession session) {
        return render_icon.ofAddress(render_icon$get(segment), session);
    }
    static final FunctionDescriptor render_icon_surface$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT,
        Constants$root.C_DOUBLE$LAYOUT
    );
    static final MethodHandle render_icon_surface$MH = RuntimeHelper.downcallHandle(
        _GtkThemingEngineClass.render_icon_surface$FUNC
    );
    public interface render_icon_surface {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, double _x3, double _x4);
        static MemorySegment allocate(render_icon_surface fi, MemorySession session) {
            return RuntimeHelper.upcallStub(render_icon_surface.class, fi, _GtkThemingEngineClass.render_icon_surface$FUNC, session);
        }
        static render_icon_surface ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, double __x3, double __x4) -> {
                try {
                    _GtkThemingEngineClass.render_icon_surface$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle render_icon_surface$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("render_icon_surface"));
    public static VarHandle render_icon_surface$VH() {
        return _GtkThemingEngineClass.render_icon_surface$VH;
    }
    public static MemoryAddress render_icon_surface$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_icon_surface$VH.get(seg);
    }
    public static void render_icon_surface$set( MemorySegment seg, MemoryAddress x) {
        _GtkThemingEngineClass.render_icon_surface$VH.set(seg, x);
    }
    public static MemoryAddress render_icon_surface$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkThemingEngineClass.render_icon_surface$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void render_icon_surface$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkThemingEngineClass.render_icon_surface$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static render_icon_surface render_icon_surface (MemorySegment segment, MemorySession session) {
        return render_icon_surface.ofAddress(render_icon_surface$get(segment), session);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(272, 112);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


