// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkUIManagerClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
            ).withName("g_type_class"),
            Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
            Constants$root.C_POINTER$LAYOUT.withName("constructor"),
            Constants$root.C_POINTER$LAYOUT.withName("set_property"),
            Constants$root.C_POINTER$LAYOUT.withName("get_property"),
            Constants$root.C_POINTER$LAYOUT.withName("dispose"),
            Constants$root.C_POINTER$LAYOUT.withName("finalize"),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("notify"),
            Constants$root.C_POINTER$LAYOUT.withName("constructed"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
            MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("add_widget"),
        Constants$root.C_POINTER$LAYOUT.withName("actions_changed"),
        Constants$root.C_POINTER$LAYOUT.withName("connect_proxy"),
        Constants$root.C_POINTER$LAYOUT.withName("disconnect_proxy"),
        Constants$root.C_POINTER$LAYOUT.withName("pre_activate"),
        Constants$root.C_POINTER$LAYOUT.withName("post_activate"),
        Constants$root.C_POINTER$LAYOUT.withName("get_widget"),
        Constants$root.C_POINTER$LAYOUT.withName("get_action"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4")
    ).withName("_GtkUIManagerClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkUIManagerClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    static final FunctionDescriptor add_widget$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add_widget$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass.add_widget$FUNC
    );
    public interface add_widget {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(add_widget fi, MemorySession session) {
            return RuntimeHelper.upcallStub(add_widget.class, fi, _GtkUIManagerClass.add_widget$FUNC, session);
        }
        static add_widget ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkUIManagerClass.add_widget$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_widget$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_widget"));
    public static VarHandle add_widget$VH() {
        return _GtkUIManagerClass.add_widget$VH;
    }
    public static MemoryAddress add_widget$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.add_widget$VH.get(seg);
    }
    public static void add_widget$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass.add_widget$VH.set(seg, x);
    }
    public static MemoryAddress add_widget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.add_widget$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_widget$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass.add_widget$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_widget add_widget (MemorySegment segment, MemorySession session) {
        return add_widget.ofAddress(add_widget$get(segment), session);
    }
    static final FunctionDescriptor actions_changed$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle actions_changed$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass.actions_changed$FUNC
    );
    public interface actions_changed {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(actions_changed fi, MemorySession session) {
            return RuntimeHelper.upcallStub(actions_changed.class, fi, _GtkUIManagerClass.actions_changed$FUNC, session);
        }
        static actions_changed ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkUIManagerClass.actions_changed$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle actions_changed$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("actions_changed"));
    public static VarHandle actions_changed$VH() {
        return _GtkUIManagerClass.actions_changed$VH;
    }
    public static MemoryAddress actions_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.actions_changed$VH.get(seg);
    }
    public static void actions_changed$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass.actions_changed$VH.set(seg, x);
    }
    public static MemoryAddress actions_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.actions_changed$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void actions_changed$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass.actions_changed$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static actions_changed actions_changed (MemorySegment segment, MemorySession session) {
        return actions_changed.ofAddress(actions_changed$get(segment), session);
    }
    static final FunctionDescriptor connect_proxy$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle connect_proxy$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass.connect_proxy$FUNC
    );
    public interface connect_proxy {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(connect_proxy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(connect_proxy.class, fi, _GtkUIManagerClass.connect_proxy$FUNC, session);
        }
        static connect_proxy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkUIManagerClass.connect_proxy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle connect_proxy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("connect_proxy"));
    public static VarHandle connect_proxy$VH() {
        return _GtkUIManagerClass.connect_proxy$VH;
    }
    public static MemoryAddress connect_proxy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.connect_proxy$VH.get(seg);
    }
    public static void connect_proxy$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass.connect_proxy$VH.set(seg, x);
    }
    public static MemoryAddress connect_proxy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.connect_proxy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void connect_proxy$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass.connect_proxy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static connect_proxy connect_proxy (MemorySegment segment, MemorySession session) {
        return connect_proxy.ofAddress(connect_proxy$get(segment), session);
    }
    static final FunctionDescriptor disconnect_proxy$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle disconnect_proxy$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass.disconnect_proxy$FUNC
    );
    public interface disconnect_proxy {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(disconnect_proxy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(disconnect_proxy.class, fi, _GtkUIManagerClass.disconnect_proxy$FUNC, session);
        }
        static disconnect_proxy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    _GtkUIManagerClass.disconnect_proxy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle disconnect_proxy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("disconnect_proxy"));
    public static VarHandle disconnect_proxy$VH() {
        return _GtkUIManagerClass.disconnect_proxy$VH;
    }
    public static MemoryAddress disconnect_proxy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.disconnect_proxy$VH.get(seg);
    }
    public static void disconnect_proxy$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass.disconnect_proxy$VH.set(seg, x);
    }
    public static MemoryAddress disconnect_proxy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.disconnect_proxy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void disconnect_proxy$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass.disconnect_proxy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static disconnect_proxy disconnect_proxy (MemorySegment segment, MemorySession session) {
        return disconnect_proxy.ofAddress(disconnect_proxy$get(segment), session);
    }
    static final FunctionDescriptor pre_activate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle pre_activate$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass.pre_activate$FUNC
    );
    public interface pre_activate {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(pre_activate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(pre_activate.class, fi, _GtkUIManagerClass.pre_activate$FUNC, session);
        }
        static pre_activate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkUIManagerClass.pre_activate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pre_activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pre_activate"));
    public static VarHandle pre_activate$VH() {
        return _GtkUIManagerClass.pre_activate$VH;
    }
    public static MemoryAddress pre_activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.pre_activate$VH.get(seg);
    }
    public static void pre_activate$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass.pre_activate$VH.set(seg, x);
    }
    public static MemoryAddress pre_activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.pre_activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pre_activate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass.pre_activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pre_activate pre_activate (MemorySegment segment, MemorySession session) {
        return pre_activate.ofAddress(pre_activate$get(segment), session);
    }
    static final FunctionDescriptor post_activate$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle post_activate$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass.post_activate$FUNC
    );
    public interface post_activate {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(post_activate fi, MemorySession session) {
            return RuntimeHelper.upcallStub(post_activate.class, fi, _GtkUIManagerClass.post_activate$FUNC, session);
        }
        static post_activate ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkUIManagerClass.post_activate$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle post_activate$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("post_activate"));
    public static VarHandle post_activate$VH() {
        return _GtkUIManagerClass.post_activate$VH;
    }
    public static MemoryAddress post_activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.post_activate$VH.get(seg);
    }
    public static void post_activate$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass.post_activate$VH.set(seg, x);
    }
    public static MemoryAddress post_activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.post_activate$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void post_activate$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass.post_activate$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static post_activate post_activate (MemorySegment segment, MemorySession session) {
        return post_activate.ofAddress(post_activate$get(segment), session);
    }
    static final FunctionDescriptor get_widget$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_widget$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass.get_widget$FUNC
    );
    public interface get_widget {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_widget fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_widget.class, fi, _GtkUIManagerClass.get_widget$FUNC, session);
        }
        static get_widget ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkUIManagerClass.get_widget$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_widget$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_widget"));
    public static VarHandle get_widget$VH() {
        return _GtkUIManagerClass.get_widget$VH;
    }
    public static MemoryAddress get_widget$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.get_widget$VH.get(seg);
    }
    public static void get_widget$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass.get_widget$VH.set(seg, x);
    }
    public static MemoryAddress get_widget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.get_widget$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_widget$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass.get_widget$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_widget get_widget (MemorySegment segment, MemorySession session) {
        return get_widget.ofAddress(get_widget$get(segment), session);
    }
    static final FunctionDescriptor get_action$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_action$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass.get_action$FUNC
    );
    public interface get_action {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_action fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_action.class, fi, _GtkUIManagerClass.get_action$FUNC, session);
        }
        static get_action ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkUIManagerClass.get_action$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_action$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_action"));
    public static VarHandle get_action$VH() {
        return _GtkUIManagerClass.get_action$VH;
    }
    public static MemoryAddress get_action$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.get_action$VH.get(seg);
    }
    public static void get_action$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass.get_action$VH.set(seg, x);
    }
    public static MemoryAddress get_action$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass.get_action$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_action$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass.get_action$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_action get_action (MemorySegment segment, MemorySession session) {
        return get_action.ofAddress(get_action$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass._gtk_reserved1$FUNC
    );
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved1.class, fi, _GtkUIManagerClass._gtk_reserved1$FUNC, session);
        }
        static _gtk_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkUIManagerClass._gtk_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkUIManagerClass._gtk_reserved1$VH;
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass._gtk_reserved1$VH.get(seg);
    }
    public static void _gtk_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass._gtk_reserved2$FUNC
    );
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved2.class, fi, _GtkUIManagerClass._gtk_reserved2$FUNC, session);
        }
        static _gtk_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkUIManagerClass._gtk_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkUIManagerClass._gtk_reserved2$VH;
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass._gtk_reserved2$VH.get(seg);
    }
    public static void _gtk_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass._gtk_reserved3$FUNC
    );
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved3.class, fi, _GtkUIManagerClass._gtk_reserved3$FUNC, session);
        }
        static _gtk_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkUIManagerClass._gtk_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkUIManagerClass._gtk_reserved3$VH;
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass._gtk_reserved3$VH.get(seg);
    }
    public static void _gtk_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4$MH = RuntimeHelper.downcallHandle(
        _GtkUIManagerClass._gtk_reserved4$FUNC
    );
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved4.class, fi, _GtkUIManagerClass._gtk_reserved4$FUNC, session);
        }
        static _gtk_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkUIManagerClass._gtk_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkUIManagerClass._gtk_reserved4$VH;
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass._gtk_reserved4$VH.get(seg);
    }
    public static void _gtk_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GtkUIManagerClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkUIManagerClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkUIManagerClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


