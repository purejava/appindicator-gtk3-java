// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkCellLayoutIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("g_iface"),
        Constants$root.C_POINTER$LAYOUT.withName("pack_start"),
        Constants$root.C_POINTER$LAYOUT.withName("pack_end"),
        Constants$root.C_POINTER$LAYOUT.withName("clear"),
        Constants$root.C_POINTER$LAYOUT.withName("add_attribute"),
        Constants$root.C_POINTER$LAYOUT.withName("set_cell_data_func"),
        Constants$root.C_POINTER$LAYOUT.withName("clear_attributes"),
        Constants$root.C_POINTER$LAYOUT.withName("reorder"),
        Constants$root.C_POINTER$LAYOUT.withName("get_cells"),
        Constants$root.C_POINTER$LAYOUT.withName("get_area")
    ).withName("_GtkCellLayoutIface");
    public static MemoryLayout $LAYOUT() {
        return _GtkCellLayoutIface.$struct$LAYOUT;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor pack_start$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle pack_start$MH = RuntimeHelper.downcallHandle(
        _GtkCellLayoutIface.pack_start$FUNC
    );
    public interface pack_start {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(pack_start fi, MemorySession session) {
            return RuntimeHelper.upcallStub(pack_start.class, fi, _GtkCellLayoutIface.pack_start$FUNC, session);
        }
        static pack_start ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    _GtkCellLayoutIface.pack_start$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pack_start$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pack_start"));
    public static VarHandle pack_start$VH() {
        return _GtkCellLayoutIface.pack_start$VH;
    }
    public static MemoryAddress pack_start$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.pack_start$VH.get(seg);
    }
    public static void pack_start$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellLayoutIface.pack_start$VH.set(seg, x);
    }
    public static MemoryAddress pack_start$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.pack_start$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pack_start$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellLayoutIface.pack_start$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pack_start pack_start (MemorySegment segment, MemorySession session) {
        return pack_start.ofAddress(pack_start$get(segment), session);
    }
    static final FunctionDescriptor pack_end$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle pack_end$MH = RuntimeHelper.downcallHandle(
        _GtkCellLayoutIface.pack_end$FUNC
    );
    public interface pack_end {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(pack_end fi, MemorySession session) {
            return RuntimeHelper.upcallStub(pack_end.class, fi, _GtkCellLayoutIface.pack_end$FUNC, session);
        }
        static pack_end ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    _GtkCellLayoutIface.pack_end$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle pack_end$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("pack_end"));
    public static VarHandle pack_end$VH() {
        return _GtkCellLayoutIface.pack_end$VH;
    }
    public static MemoryAddress pack_end$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.pack_end$VH.get(seg);
    }
    public static void pack_end$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellLayoutIface.pack_end$VH.set(seg, x);
    }
    public static MemoryAddress pack_end$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.pack_end$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void pack_end$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellLayoutIface.pack_end$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static pack_end pack_end (MemorySegment segment, MemorySession session) {
        return pack_end.ofAddress(pack_end$get(segment), session);
    }
    static final FunctionDescriptor clear$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle clear$MH = RuntimeHelper.downcallHandle(
        _GtkCellLayoutIface.clear$FUNC
    );
    public interface clear {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(clear fi, MemorySession session) {
            return RuntimeHelper.upcallStub(clear.class, fi, _GtkCellLayoutIface.clear$FUNC, session);
        }
        static clear ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkCellLayoutIface.clear$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle clear$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("clear"));
    public static VarHandle clear$VH() {
        return _GtkCellLayoutIface.clear$VH;
    }
    public static MemoryAddress clear$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.clear$VH.get(seg);
    }
    public static void clear$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellLayoutIface.clear$VH.set(seg, x);
    }
    public static MemoryAddress clear$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.clear$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void clear$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellLayoutIface.clear$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static clear clear (MemorySegment segment, MemorySession session) {
        return clear.ofAddress(clear$get(segment), session);
    }
    static final FunctionDescriptor add_attribute$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle add_attribute$MH = RuntimeHelper.downcallHandle(
        _GtkCellLayoutIface.add_attribute$FUNC
    );
    public interface add_attribute {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, int _x3);
        static MemorySegment allocate(add_attribute fi, MemorySession session) {
            return RuntimeHelper.upcallStub(add_attribute.class, fi, _GtkCellLayoutIface.add_attribute$FUNC, session);
        }
        static add_attribute ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, int __x3) -> {
                try {
                    _GtkCellLayoutIface.add_attribute$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add_attribute$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add_attribute"));
    public static VarHandle add_attribute$VH() {
        return _GtkCellLayoutIface.add_attribute$VH;
    }
    public static MemoryAddress add_attribute$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.add_attribute$VH.get(seg);
    }
    public static void add_attribute$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellLayoutIface.add_attribute$VH.set(seg, x);
    }
    public static MemoryAddress add_attribute$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.add_attribute$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add_attribute$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellLayoutIface.add_attribute$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_attribute add_attribute (MemorySegment segment, MemorySession session) {
        return add_attribute.ofAddress(add_attribute$get(segment), session);
    }
    static final FunctionDescriptor set_cell_data_func$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_cell_data_func$MH = RuntimeHelper.downcallHandle(
        _GtkCellLayoutIface.set_cell_data_func$FUNC
    );
    public interface set_cell_data_func {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(set_cell_data_func fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_cell_data_func.class, fi, _GtkCellLayoutIface.set_cell_data_func$FUNC, session);
        }
        static set_cell_data_func ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkCellLayoutIface.set_cell_data_func$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_cell_data_func$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_cell_data_func"));
    public static VarHandle set_cell_data_func$VH() {
        return _GtkCellLayoutIface.set_cell_data_func$VH;
    }
    public static MemoryAddress set_cell_data_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.set_cell_data_func$VH.get(seg);
    }
    public static void set_cell_data_func$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellLayoutIface.set_cell_data_func$VH.set(seg, x);
    }
    public static MemoryAddress set_cell_data_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.set_cell_data_func$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_cell_data_func$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellLayoutIface.set_cell_data_func$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_cell_data_func set_cell_data_func (MemorySegment segment, MemorySession session) {
        return set_cell_data_func.ofAddress(set_cell_data_func$get(segment), session);
    }
    static final FunctionDescriptor clear_attributes$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle clear_attributes$MH = RuntimeHelper.downcallHandle(
        _GtkCellLayoutIface.clear_attributes$FUNC
    );
    public interface clear_attributes {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(clear_attributes fi, MemorySession session) {
            return RuntimeHelper.upcallStub(clear_attributes.class, fi, _GtkCellLayoutIface.clear_attributes$FUNC, session);
        }
        static clear_attributes ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkCellLayoutIface.clear_attributes$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle clear_attributes$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("clear_attributes"));
    public static VarHandle clear_attributes$VH() {
        return _GtkCellLayoutIface.clear_attributes$VH;
    }
    public static MemoryAddress clear_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.clear_attributes$VH.get(seg);
    }
    public static void clear_attributes$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellLayoutIface.clear_attributes$VH.set(seg, x);
    }
    public static MemoryAddress clear_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.clear_attributes$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void clear_attributes$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellLayoutIface.clear_attributes$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static clear_attributes clear_attributes (MemorySegment segment, MemorySession session) {
        return clear_attributes.ofAddress(clear_attributes$get(segment), session);
    }
    static final FunctionDescriptor reorder$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle reorder$MH = RuntimeHelper.downcallHandle(
        _GtkCellLayoutIface.reorder$FUNC
    );
    public interface reorder {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2);
        static MemorySegment allocate(reorder fi, MemorySession session) {
            return RuntimeHelper.upcallStub(reorder.class, fi, _GtkCellLayoutIface.reorder$FUNC, session);
        }
        static reorder ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2) -> {
                try {
                    _GtkCellLayoutIface.reorder$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle reorder$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("reorder"));
    public static VarHandle reorder$VH() {
        return _GtkCellLayoutIface.reorder$VH;
    }
    public static MemoryAddress reorder$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.reorder$VH.get(seg);
    }
    public static void reorder$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellLayoutIface.reorder$VH.set(seg, x);
    }
    public static MemoryAddress reorder$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.reorder$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void reorder$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellLayoutIface.reorder$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static reorder reorder (MemorySegment segment, MemorySession session) {
        return reorder.ofAddress(reorder$get(segment), session);
    }
    static final FunctionDescriptor get_cells$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_cells$MH = RuntimeHelper.downcallHandle(
        _GtkCellLayoutIface.get_cells$FUNC
    );
    public interface get_cells {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_cells fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_cells.class, fi, _GtkCellLayoutIface.get_cells$FUNC, session);
        }
        static get_cells ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.get_cells$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_cells$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_cells"));
    public static VarHandle get_cells$VH() {
        return _GtkCellLayoutIface.get_cells$VH;
    }
    public static MemoryAddress get_cells$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.get_cells$VH.get(seg);
    }
    public static void get_cells$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellLayoutIface.get_cells$VH.set(seg, x);
    }
    public static MemoryAddress get_cells$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.get_cells$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_cells$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellLayoutIface.get_cells$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_cells get_cells (MemorySegment segment, MemorySession session) {
        return get_cells.ofAddress(get_cells$get(segment), session);
    }
    static final FunctionDescriptor get_area$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_area$MH = RuntimeHelper.downcallHandle(
        _GtkCellLayoutIface.get_area$FUNC
    );
    public interface get_area {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_area fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_area.class, fi, _GtkCellLayoutIface.get_area$FUNC, session);
        }
        static get_area ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.get_area$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_area$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_area"));
    public static VarHandle get_area$VH() {
        return _GtkCellLayoutIface.get_area$VH;
    }
    public static MemoryAddress get_area$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.get_area$VH.get(seg);
    }
    public static void get_area$set( MemorySegment seg, MemoryAddress x) {
        _GtkCellLayoutIface.get_area$VH.set(seg, x);
    }
    public static MemoryAddress get_area$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkCellLayoutIface.get_area$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_area$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkCellLayoutIface.get_area$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_area get_area (MemorySegment segment, MemorySession session) {
        return get_area.ofAddress(get_area$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


