// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * enum  (*GdkFilterFunc)(void* xevent,union _GdkEvent* event,void* data);
 * }
 */
public interface GdkFilterFunc {

    int apply(java.lang.foreign.MemorySegment xevent, java.lang.foreign.MemorySegment event, java.lang.foreign.MemorySegment data);
    static MemorySegment allocate(GdkFilterFunc fi, SegmentScope scope) {
        return RuntimeHelper.upcallStub(constants$1065.GdkFilterFunc_UP$MH, fi, constants$1065.GdkFilterFunc$FUNC, scope);
    }
    static GdkFilterFunc ofAddress(MemorySegment addr, SegmentScope scope) {
        MemorySegment symbol = MemorySegment.ofAddress(addr.address(), 0, scope);
        return (java.lang.foreign.MemorySegment _xevent, java.lang.foreign.MemorySegment _event, java.lang.foreign.MemorySegment _data) -> {
            try {
                return (int)constants$1065.GdkFilterFunc_DOWN$MH.invokeExact(symbol, _xevent, _event, _data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


