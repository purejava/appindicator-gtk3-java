// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkTreeSelectionFunc {

    int apply(java.lang.foreign.MemoryAddress selection, java.lang.foreign.MemoryAddress model, java.lang.foreign.MemoryAddress path, int path_currently_selected, java.lang.foreign.MemoryAddress data);
    static MemorySegment allocate(GtkTreeSelectionFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkTreeSelectionFunc.class, fi, constants$2066.GtkTreeSelectionFunc$FUNC, session);
    }
    static GtkTreeSelectionFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _selection, java.lang.foreign.MemoryAddress _model, java.lang.foreign.MemoryAddress _path, int _path_currently_selected, java.lang.foreign.MemoryAddress _data) -> {
            try {
                return (int)constants$2066.GtkTreeSelectionFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_selection, (java.lang.foreign.Addressable)_model, (java.lang.foreign.Addressable)_path, _path_currently_selected, (java.lang.foreign.Addressable)_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


