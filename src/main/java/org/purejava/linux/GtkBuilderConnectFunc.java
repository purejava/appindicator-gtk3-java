// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public interface GtkBuilderConnectFunc {

    void apply(java.lang.foreign.MemoryAddress builder, java.lang.foreign.MemoryAddress object, java.lang.foreign.MemoryAddress signal_name, java.lang.foreign.MemoryAddress handler_name, java.lang.foreign.MemoryAddress connect_object, int flags, java.lang.foreign.MemoryAddress user_data);
    static MemorySegment allocate(GtkBuilderConnectFunc fi, MemorySession session) {
        return RuntimeHelper.upcallStub(GtkBuilderConnectFunc.class, fi, constants$1373.GtkBuilderConnectFunc$FUNC, session);
    }
    static GtkBuilderConnectFunc ofAddress(MemoryAddress addr, MemorySession session) {
        MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
        return (java.lang.foreign.MemoryAddress _builder, java.lang.foreign.MemoryAddress _object, java.lang.foreign.MemoryAddress _signal_name, java.lang.foreign.MemoryAddress _handler_name, java.lang.foreign.MemoryAddress _connect_object, int _flags, java.lang.foreign.MemoryAddress _user_data) -> {
            try {
                constants$1373.GtkBuilderConnectFunc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)_builder, (java.lang.foreign.Addressable)_object, (java.lang.foreign.Addressable)_signal_name, (java.lang.foreign.Addressable)_handler_name, (java.lang.foreign.Addressable)_connect_object, _flags, (java.lang.foreign.Addressable)_user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


