// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _AtkHypertextIface {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_type"),
            Constants$root.C_LONG_LONG$LAYOUT.withName("g_instance_type")
        ).withName("parent"),
        Constants$root.C_POINTER$LAYOUT.withName("get_link"),
        Constants$root.C_POINTER$LAYOUT.withName("get_n_links"),
        Constants$root.C_POINTER$LAYOUT.withName("get_link_index"),
        Constants$root.C_POINTER$LAYOUT.withName("link_selected")
    ).withName("_AtkHypertextIface");
    public static MemoryLayout $LAYOUT() {
        return _AtkHypertextIface.$struct$LAYOUT;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    static final FunctionDescriptor get_link$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_link$MH = RuntimeHelper.downcallHandle(
        _AtkHypertextIface.get_link$FUNC
    );
    public interface get_link {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(get_link fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_link.class, fi, _AtkHypertextIface.get_link$FUNC, session);
        }
        static get_link ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_AtkHypertextIface.get_link$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_link$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_link"));
    public static VarHandle get_link$VH() {
        return _AtkHypertextIface.get_link$VH;
    }
    public static MemoryAddress get_link$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkHypertextIface.get_link$VH.get(seg);
    }
    public static void get_link$set( MemorySegment seg, MemoryAddress x) {
        _AtkHypertextIface.get_link$VH.set(seg, x);
    }
    public static MemoryAddress get_link$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkHypertextIface.get_link$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_link$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkHypertextIface.get_link$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_link get_link (MemorySegment segment, MemorySession session) {
        return get_link.ofAddress(get_link$get(segment), session);
    }
    static final FunctionDescriptor get_n_links$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_n_links$MH = RuntimeHelper.downcallHandle(
        _AtkHypertextIface.get_n_links$FUNC
    );
    public interface get_n_links {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(get_n_links fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_n_links.class, fi, _AtkHypertextIface.get_n_links$FUNC, session);
        }
        static get_n_links ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_AtkHypertextIface.get_n_links$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_n_links$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_n_links"));
    public static VarHandle get_n_links$VH() {
        return _AtkHypertextIface.get_n_links$VH;
    }
    public static MemoryAddress get_n_links$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkHypertextIface.get_n_links$VH.get(seg);
    }
    public static void get_n_links$set( MemorySegment seg, MemoryAddress x) {
        _AtkHypertextIface.get_n_links$VH.set(seg, x);
    }
    public static MemoryAddress get_n_links$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkHypertextIface.get_n_links$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_n_links$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkHypertextIface.get_n_links$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_n_links get_n_links (MemorySegment segment, MemorySession session) {
        return get_n_links.ofAddress(get_n_links$get(segment), session);
    }
    static final FunctionDescriptor get_link_index$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle get_link_index$MH = RuntimeHelper.downcallHandle(
        _AtkHypertextIface.get_link_index$FUNC
    );
    public interface get_link_index {

        int apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(get_link_index fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_link_index.class, fi, _AtkHypertextIface.get_link_index$FUNC, session);
        }
        static get_link_index ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    return (int)_AtkHypertextIface.get_link_index$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_link_index$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_link_index"));
    public static VarHandle get_link_index$VH() {
        return _AtkHypertextIface.get_link_index$VH;
    }
    public static MemoryAddress get_link_index$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkHypertextIface.get_link_index$VH.get(seg);
    }
    public static void get_link_index$set( MemorySegment seg, MemoryAddress x) {
        _AtkHypertextIface.get_link_index$VH.set(seg, x);
    }
    public static MemoryAddress get_link_index$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkHypertextIface.get_link_index$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_link_index$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkHypertextIface.get_link_index$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_link_index get_link_index (MemorySegment segment, MemorySession session) {
        return get_link_index.ofAddress(get_link_index$get(segment), session);
    }
    static final FunctionDescriptor link_selected$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle link_selected$MH = RuntimeHelper.downcallHandle(
        _AtkHypertextIface.link_selected$FUNC
    );
    public interface link_selected {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(link_selected fi, MemorySession session) {
            return RuntimeHelper.upcallStub(link_selected.class, fi, _AtkHypertextIface.link_selected$FUNC, session);
        }
        static link_selected ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _AtkHypertextIface.link_selected$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle link_selected$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("link_selected"));
    public static VarHandle link_selected$VH() {
        return _AtkHypertextIface.link_selected$VH;
    }
    public static MemoryAddress link_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_AtkHypertextIface.link_selected$VH.get(seg);
    }
    public static void link_selected$set( MemorySegment seg, MemoryAddress x) {
        _AtkHypertextIface.link_selected$VH.set(seg, x);
    }
    public static MemoryAddress link_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_AtkHypertextIface.link_selected$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void link_selected$set(MemorySegment seg, long index, MemoryAddress x) {
        _AtkHypertextIface.link_selected$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static link_selected link_selected (MemorySegment segment, MemorySession session) {
        return link_selected.ofAddress(link_selected$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


