// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GtkContainerClass {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        MemoryLayout.structLayout(
            MemoryLayout.structLayout(
                MemoryLayout.structLayout(
                    Constants$root.C_LONG_LONG$LAYOUT.withName("g_type")
                ).withName("g_type_class"),
                Constants$root.C_POINTER$LAYOUT.withName("construct_properties"),
                Constants$root.C_POINTER$LAYOUT.withName("constructor"),
                Constants$root.C_POINTER$LAYOUT.withName("set_property"),
                Constants$root.C_POINTER$LAYOUT.withName("get_property"),
                Constants$root.C_POINTER$LAYOUT.withName("dispose"),
                Constants$root.C_POINTER$LAYOUT.withName("finalize"),
                Constants$root.C_POINTER$LAYOUT.withName("dispatch_properties_changed"),
                Constants$root.C_POINTER$LAYOUT.withName("notify"),
                Constants$root.C_POINTER$LAYOUT.withName("constructed"),
                Constants$root.C_LONG_LONG$LAYOUT.withName("flags"),
                MemoryLayout.sequenceLayout(6, Constants$root.C_POINTER$LAYOUT).withName("pdummy")
            ).withName("parent_class"),
            Constants$root.C_INT$LAYOUT.withName("activate_signal"),
            MemoryLayout.paddingLayout(32),
            Constants$root.C_POINTER$LAYOUT.withName("dispatch_child_properties_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("destroy"),
            Constants$root.C_POINTER$LAYOUT.withName("show"),
            Constants$root.C_POINTER$LAYOUT.withName("show_all"),
            Constants$root.C_POINTER$LAYOUT.withName("hide"),
            Constants$root.C_POINTER$LAYOUT.withName("map"),
            Constants$root.C_POINTER$LAYOUT.withName("unmap"),
            Constants$root.C_POINTER$LAYOUT.withName("realize"),
            Constants$root.C_POINTER$LAYOUT.withName("unrealize"),
            Constants$root.C_POINTER$LAYOUT.withName("size_allocate"),
            Constants$root.C_POINTER$LAYOUT.withName("state_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("state_flags_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("parent_set"),
            Constants$root.C_POINTER$LAYOUT.withName("hierarchy_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("style_set"),
            Constants$root.C_POINTER$LAYOUT.withName("direction_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_notify"),
            Constants$root.C_POINTER$LAYOUT.withName("child_notify"),
            Constants$root.C_POINTER$LAYOUT.withName("draw"),
            Constants$root.C_POINTER$LAYOUT.withName("get_request_mode"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width_for_height"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_width"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_for_width"),
            Constants$root.C_POINTER$LAYOUT.withName("mnemonic_activate"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("focus"),
            Constants$root.C_POINTER$LAYOUT.withName("move_focus"),
            Constants$root.C_POINTER$LAYOUT.withName("keynav_failed"),
            Constants$root.C_POINTER$LAYOUT.withName("event"),
            Constants$root.C_POINTER$LAYOUT.withName("button_press_event"),
            Constants$root.C_POINTER$LAYOUT.withName("button_release_event"),
            Constants$root.C_POINTER$LAYOUT.withName("scroll_event"),
            Constants$root.C_POINTER$LAYOUT.withName("motion_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("delete_event"),
            Constants$root.C_POINTER$LAYOUT.withName("destroy_event"),
            Constants$root.C_POINTER$LAYOUT.withName("key_press_event"),
            Constants$root.C_POINTER$LAYOUT.withName("key_release_event"),
            Constants$root.C_POINTER$LAYOUT.withName("enter_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("leave_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("configure_event"),
            Constants$root.C_POINTER$LAYOUT.withName("focus_in_event"),
            Constants$root.C_POINTER$LAYOUT.withName("focus_out_event"),
            Constants$root.C_POINTER$LAYOUT.withName("map_event"),
            Constants$root.C_POINTER$LAYOUT.withName("unmap_event"),
            Constants$root.C_POINTER$LAYOUT.withName("property_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("selection_clear_event"),
            Constants$root.C_POINTER$LAYOUT.withName("selection_request_event"),
            Constants$root.C_POINTER$LAYOUT.withName("selection_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("proximity_in_event"),
            Constants$root.C_POINTER$LAYOUT.withName("proximity_out_event"),
            Constants$root.C_POINTER$LAYOUT.withName("visibility_notify_event"),
            Constants$root.C_POINTER$LAYOUT.withName("window_state_event"),
            Constants$root.C_POINTER$LAYOUT.withName("damage_event"),
            Constants$root.C_POINTER$LAYOUT.withName("grab_broken_event"),
            Constants$root.C_POINTER$LAYOUT.withName("selection_get"),
            Constants$root.C_POINTER$LAYOUT.withName("selection_received"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_begin"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_end"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_data_get"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_data_delete"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_leave"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_motion"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_drop"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_data_received"),
            Constants$root.C_POINTER$LAYOUT.withName("drag_failed"),
            Constants$root.C_POINTER$LAYOUT.withName("popup_menu"),
            Constants$root.C_POINTER$LAYOUT.withName("show_help"),
            Constants$root.C_POINTER$LAYOUT.withName("get_accessible"),
            Constants$root.C_POINTER$LAYOUT.withName("screen_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("can_activate_accel"),
            Constants$root.C_POINTER$LAYOUT.withName("composited_changed"),
            Constants$root.C_POINTER$LAYOUT.withName("query_tooltip"),
            Constants$root.C_POINTER$LAYOUT.withName("compute_expand"),
            Constants$root.C_POINTER$LAYOUT.withName("adjust_size_request"),
            Constants$root.C_POINTER$LAYOUT.withName("adjust_size_allocation"),
            Constants$root.C_POINTER$LAYOUT.withName("style_updated"),
            Constants$root.C_POINTER$LAYOUT.withName("touch_event"),
            Constants$root.C_POINTER$LAYOUT.withName("get_preferred_height_and_baseline_for_width"),
            Constants$root.C_POINTER$LAYOUT.withName("adjust_baseline_request"),
            Constants$root.C_POINTER$LAYOUT.withName("adjust_baseline_allocation"),
            Constants$root.C_POINTER$LAYOUT.withName("queue_draw_region"),
            Constants$root.C_POINTER$LAYOUT.withName("priv"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
            Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7")
        ).withName("parent_class"),
        Constants$root.C_POINTER$LAYOUT.withName("add"),
        Constants$root.C_POINTER$LAYOUT.withName("remove"),
        Constants$root.C_POINTER$LAYOUT.withName("check_resize"),
        Constants$root.C_POINTER$LAYOUT.withName("forall"),
        Constants$root.C_POINTER$LAYOUT.withName("set_focus_child"),
        Constants$root.C_POINTER$LAYOUT.withName("child_type"),
        Constants$root.C_POINTER$LAYOUT.withName("composite_name"),
        Constants$root.C_POINTER$LAYOUT.withName("set_child_property"),
        Constants$root.C_POINTER$LAYOUT.withName("get_child_property"),
        Constants$root.C_POINTER$LAYOUT.withName("get_path_for_child"),
        MemoryLayout.structLayout(
            MemoryLayout.paddingLayout(1).withName("_handle_border_width"),
            MemoryLayout.paddingLayout(63)
        ),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved1"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved2"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved3"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved4"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved5"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved6"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved7"),
        Constants$root.C_POINTER$LAYOUT.withName("_gtk_reserved8")
    ).withName("_GtkContainerClass");
    public static MemoryLayout $LAYOUT() {
        return _GtkContainerClass.$struct$LAYOUT;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 824);
    }
    static final FunctionDescriptor add$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle add$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass.add$FUNC
    );
    public interface add {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(add fi, MemorySession session) {
            return RuntimeHelper.upcallStub(add.class, fi, _GtkContainerClass.add$FUNC, session);
        }
        static add ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkContainerClass.add$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle add$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("add"));
    public static VarHandle add$VH() {
        return _GtkContainerClass.add$VH;
    }
    public static MemoryAddress add$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.add$VH.get(seg);
    }
    public static void add$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass.add$VH.set(seg, x);
    }
    public static MemoryAddress add$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.add$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void add$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass.add$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static add add (MemorySegment segment, MemorySession session) {
        return add.ofAddress(add$get(segment), session);
    }
    static final FunctionDescriptor remove$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle remove$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass.remove$FUNC
    );
    public interface remove {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(remove fi, MemorySession session) {
            return RuntimeHelper.upcallStub(remove.class, fi, _GtkContainerClass.remove$FUNC, session);
        }
        static remove ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkContainerClass.remove$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle remove$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("remove"));
    public static VarHandle remove$VH() {
        return _GtkContainerClass.remove$VH;
    }
    public static MemoryAddress remove$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.remove$VH.get(seg);
    }
    public static void remove$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass.remove$VH.set(seg, x);
    }
    public static MemoryAddress remove$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.remove$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void remove$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass.remove$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove remove (MemorySegment segment, MemorySession session) {
        return remove.ofAddress(remove$get(segment), session);
    }
    static final FunctionDescriptor check_resize$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle check_resize$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass.check_resize$FUNC
    );
    public interface check_resize {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(check_resize fi, MemorySession session) {
            return RuntimeHelper.upcallStub(check_resize.class, fi, _GtkContainerClass.check_resize$FUNC, session);
        }
        static check_resize ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GtkContainerClass.check_resize$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle check_resize$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("check_resize"));
    public static VarHandle check_resize$VH() {
        return _GtkContainerClass.check_resize$VH;
    }
    public static MemoryAddress check_resize$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.check_resize$VH.get(seg);
    }
    public static void check_resize$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass.check_resize$VH.set(seg, x);
    }
    public static MemoryAddress check_resize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.check_resize$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void check_resize$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass.check_resize$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static check_resize check_resize (MemorySegment segment, MemorySession session) {
        return check_resize.ofAddress(check_resize$get(segment), session);
    }
    static final FunctionDescriptor forall$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle forall$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass.forall$FUNC
    );
    public interface forall {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, java.lang.foreign.MemoryAddress _x3);
        static MemorySegment allocate(forall fi, MemorySession session) {
            return RuntimeHelper.upcallStub(forall.class, fi, _GtkContainerClass.forall$FUNC, session);
        }
        static forall ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, java.lang.foreign.MemoryAddress __x3) -> {
                try {
                    _GtkContainerClass.forall$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, (java.lang.foreign.Addressable)__x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle forall$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("forall"));
    public static VarHandle forall$VH() {
        return _GtkContainerClass.forall$VH;
    }
    public static MemoryAddress forall$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.forall$VH.get(seg);
    }
    public static void forall$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass.forall$VH.set(seg, x);
    }
    public static MemoryAddress forall$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.forall$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void forall$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass.forall$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static forall forall (MemorySegment segment, MemorySession session) {
        return forall.ofAddress(forall$get(segment), session);
    }
    static final FunctionDescriptor set_focus_child$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_focus_child$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass.set_focus_child$FUNC
    );
    public interface set_focus_child {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(set_focus_child fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_focus_child.class, fi, _GtkContainerClass.set_focus_child$FUNC, session);
        }
        static set_focus_child ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GtkContainerClass.set_focus_child$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_focus_child$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_focus_child"));
    public static VarHandle set_focus_child$VH() {
        return _GtkContainerClass.set_focus_child$VH;
    }
    public static MemoryAddress set_focus_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.set_focus_child$VH.get(seg);
    }
    public static void set_focus_child$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass.set_focus_child$VH.set(seg, x);
    }
    public static MemoryAddress set_focus_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.set_focus_child$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_focus_child$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass.set_focus_child$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_focus_child set_focus_child (MemorySegment segment, MemorySession session) {
        return set_focus_child.ofAddress(set_focus_child$get(segment), session);
    }
    static final FunctionDescriptor child_type$FUNC = FunctionDescriptor.of(Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle child_type$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass.child_type$FUNC
    );
    public interface child_type {

        long apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(child_type fi, MemorySession session) {
            return RuntimeHelper.upcallStub(child_type.class, fi, _GtkContainerClass.child_type$FUNC, session);
        }
        static child_type ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (long)_GtkContainerClass.child_type$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle child_type$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("child_type"));
    public static VarHandle child_type$VH() {
        return _GtkContainerClass.child_type$VH;
    }
    public static MemoryAddress child_type$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.child_type$VH.get(seg);
    }
    public static void child_type$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass.child_type$VH.set(seg, x);
    }
    public static MemoryAddress child_type$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.child_type$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void child_type$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass.child_type$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static child_type child_type (MemorySegment segment, MemorySession session) {
        return child_type.ofAddress(child_type$get(segment), session);
    }
    static final FunctionDescriptor composite_name$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle composite_name$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass.composite_name$FUNC
    );
    public interface composite_name {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(composite_name fi, MemorySession session) {
            return RuntimeHelper.upcallStub(composite_name.class, fi, _GtkContainerClass.composite_name$FUNC, session);
        }
        static composite_name ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkContainerClass.composite_name$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle composite_name$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("composite_name"));
    public static VarHandle composite_name$VH() {
        return _GtkContainerClass.composite_name$VH;
    }
    public static MemoryAddress composite_name$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.composite_name$VH.get(seg);
    }
    public static void composite_name$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass.composite_name$VH.set(seg, x);
    }
    public static MemoryAddress composite_name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.composite_name$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void composite_name$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass.composite_name$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static composite_name composite_name (MemorySegment segment, MemorySession session) {
        return composite_name.ofAddress(composite_name$get(segment), session);
    }
    static final FunctionDescriptor set_child_property$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle set_child_property$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass.set_child_property$FUNC
    );
    public interface set_child_property {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(set_child_property fi, MemorySession session) {
            return RuntimeHelper.upcallStub(set_child_property.class, fi, _GtkContainerClass.set_child_property$FUNC, session);
        }
        static set_child_property ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkContainerClass.set_child_property$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle set_child_property$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("set_child_property"));
    public static VarHandle set_child_property$VH() {
        return _GtkContainerClass.set_child_property$VH;
    }
    public static MemoryAddress set_child_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.set_child_property$VH.get(seg);
    }
    public static void set_child_property$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass.set_child_property$VH.set(seg, x);
    }
    public static MemoryAddress set_child_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.set_child_property$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void set_child_property$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass.set_child_property$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_child_property set_child_property (MemorySegment segment, MemorySession session) {
        return set_child_property.ofAddress(set_child_property$get(segment), session);
    }
    static final FunctionDescriptor get_child_property$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_child_property$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass.get_child_property$FUNC
    );
    public interface get_child_property {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, int _x2, java.lang.foreign.MemoryAddress _x3, java.lang.foreign.MemoryAddress _x4);
        static MemorySegment allocate(get_child_property fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_child_property.class, fi, _GtkContainerClass.get_child_property$FUNC, session);
        }
        static get_child_property ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, int __x2, java.lang.foreign.MemoryAddress __x3, java.lang.foreign.MemoryAddress __x4) -> {
                try {
                    _GtkContainerClass.get_child_property$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, (java.lang.foreign.Addressable)__x3, (java.lang.foreign.Addressable)__x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_child_property$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_child_property"));
    public static VarHandle get_child_property$VH() {
        return _GtkContainerClass.get_child_property$VH;
    }
    public static MemoryAddress get_child_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.get_child_property$VH.get(seg);
    }
    public static void get_child_property$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass.get_child_property$VH.set(seg, x);
    }
    public static MemoryAddress get_child_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.get_child_property$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_child_property$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass.get_child_property$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_child_property get_child_property (MemorySegment segment, MemorySession session) {
        return get_child_property.ofAddress(get_child_property$get(segment), session);
    }
    static final FunctionDescriptor get_path_for_child$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle get_path_for_child$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass.get_path_for_child$FUNC
    );
    public interface get_path_for_child {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(get_path_for_child fi, MemorySession session) {
            return RuntimeHelper.upcallStub(get_path_for_child.class, fi, _GtkContainerClass.get_path_for_child$FUNC, session);
        }
        static get_path_for_child ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GtkContainerClass.get_path_for_child$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle get_path_for_child$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("get_path_for_child"));
    public static VarHandle get_path_for_child$VH() {
        return _GtkContainerClass.get_path_for_child$VH;
    }
    public static MemoryAddress get_path_for_child$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.get_path_for_child$VH.get(seg);
    }
    public static void get_path_for_child$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass.get_path_for_child$VH.set(seg, x);
    }
    public static MemoryAddress get_path_for_child$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass.get_path_for_child$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void get_path_for_child$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass.get_path_for_child$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_path_for_child get_path_for_child (MemorySegment segment, MemorySession session) {
        return get_path_for_child.ofAddress(get_path_for_child$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved1$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved1$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass._gtk_reserved1$FUNC
    );
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved1.class, fi, _GtkContainerClass._gtk_reserved1$FUNC, session);
        }
        static _gtk_reserved1 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkContainerClass._gtk_reserved1$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved1$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved1"));
    public static VarHandle _gtk_reserved1$VH() {
        return _GtkContainerClass._gtk_reserved1$VH;
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved1$VH.get(seg);
    }
    public static void _gtk_reserved1$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved1$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved1$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved1$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved2$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved2$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass._gtk_reserved2$FUNC
    );
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved2.class, fi, _GtkContainerClass._gtk_reserved2$FUNC, session);
        }
        static _gtk_reserved2 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkContainerClass._gtk_reserved2$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved2$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved2"));
    public static VarHandle _gtk_reserved2$VH() {
        return _GtkContainerClass._gtk_reserved2$VH;
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved2$VH.get(seg);
    }
    public static void _gtk_reserved2$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved2$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved2$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved2$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved3$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved3$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass._gtk_reserved3$FUNC
    );
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved3.class, fi, _GtkContainerClass._gtk_reserved3$FUNC, session);
        }
        static _gtk_reserved3 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkContainerClass._gtk_reserved3$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved3$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved3"));
    public static VarHandle _gtk_reserved3$VH() {
        return _GtkContainerClass._gtk_reserved3$VH;
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved3$VH.get(seg);
    }
    public static void _gtk_reserved3$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved3$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved3$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved3$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved4$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved4$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass._gtk_reserved4$FUNC
    );
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved4.class, fi, _GtkContainerClass._gtk_reserved4$FUNC, session);
        }
        static _gtk_reserved4 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkContainerClass._gtk_reserved4$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved4$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved4"));
    public static VarHandle _gtk_reserved4$VH() {
        return _GtkContainerClass._gtk_reserved4$VH;
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved4$VH.get(seg);
    }
    public static void _gtk_reserved4$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved4$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved4$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved4$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved5$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved5$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass._gtk_reserved5$FUNC
    );
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved5.class, fi, _GtkContainerClass._gtk_reserved5$FUNC, session);
        }
        static _gtk_reserved5 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkContainerClass._gtk_reserved5$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved5$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved5"));
    public static VarHandle _gtk_reserved5$VH() {
        return _GtkContainerClass._gtk_reserved5$VH;
    }
    public static MemoryAddress _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved5$VH.get(seg);
    }
    public static void _gtk_reserved5$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved5$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved5$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved5$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved6$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved6$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass._gtk_reserved6$FUNC
    );
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved6.class, fi, _GtkContainerClass._gtk_reserved6$FUNC, session);
        }
        static _gtk_reserved6 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkContainerClass._gtk_reserved6$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved6$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved6"));
    public static VarHandle _gtk_reserved6$VH() {
        return _GtkContainerClass._gtk_reserved6$VH;
    }
    public static MemoryAddress _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved6$VH.get(seg);
    }
    public static void _gtk_reserved6$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved6$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved6$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved6$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved7$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved7$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass._gtk_reserved7$FUNC
    );
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved7.class, fi, _GtkContainerClass._gtk_reserved7$FUNC, session);
        }
        static _gtk_reserved7 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkContainerClass._gtk_reserved7$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved7$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved7"));
    public static VarHandle _gtk_reserved7$VH() {
        return _GtkContainerClass._gtk_reserved7$VH;
    }
    public static MemoryAddress _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved7$VH.get(seg);
    }
    public static void _gtk_reserved7$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved7$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved7$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved7$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), session);
    }
    static final FunctionDescriptor _gtk_reserved8$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle _gtk_reserved8$MH = RuntimeHelper.downcallHandle(
        _GtkContainerClass._gtk_reserved8$FUNC
    );
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, MemorySession session) {
            return RuntimeHelper.upcallStub(_gtk_reserved8.class, fi, _GtkContainerClass._gtk_reserved8$FUNC, session);
        }
        static _gtk_reserved8 ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GtkContainerClass._gtk_reserved8$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle _gtk_reserved8$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("_gtk_reserved8"));
    public static VarHandle _gtk_reserved8$VH() {
        return _GtkContainerClass._gtk_reserved8$VH;
    }
    public static MemoryAddress _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved8$VH.get(seg);
    }
    public static void _gtk_reserved8$set( MemorySegment seg, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved8$VH.set(seg, x);
    }
    public static MemoryAddress _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GtkContainerClass._gtk_reserved8$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemoryAddress x) {
        _GtkContainerClass._gtk_reserved8$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8 (MemorySegment segment, MemorySession session) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


