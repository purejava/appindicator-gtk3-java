// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GMemVTable {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("malloc"),
        Constants$root.C_POINTER$LAYOUT.withName("realloc"),
        Constants$root.C_POINTER$LAYOUT.withName("free"),
        Constants$root.C_POINTER$LAYOUT.withName("calloc"),
        Constants$root.C_POINTER$LAYOUT.withName("try_malloc"),
        Constants$root.C_POINTER$LAYOUT.withName("try_realloc")
    ).withName("_GMemVTable");
    public static MemoryLayout $LAYOUT() {
        return _GMemVTable.$struct$LAYOUT;
    }
    static final FunctionDescriptor malloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle malloc$MH = RuntimeHelper.downcallHandle(
        _GMemVTable.malloc$FUNC
    );
    public interface malloc {

        java.lang.foreign.Addressable apply(long _x0);
        static MemorySegment allocate(malloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(malloc.class, fi, _GMemVTable.malloc$FUNC, session);
        }
        static malloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (long __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMemVTable.malloc$MH.invokeExact((Addressable)symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle malloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("malloc"));
    public static VarHandle malloc$VH() {
        return _GMemVTable.malloc$VH;
    }
    public static MemoryAddress malloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.malloc$VH.get(seg);
    }
    public static void malloc$set( MemorySegment seg, MemoryAddress x) {
        _GMemVTable.malloc$VH.set(seg, x);
    }
    public static MemoryAddress malloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.malloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void malloc$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMemVTable.malloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static malloc malloc (MemorySegment segment, MemorySession session) {
        return malloc.ofAddress(malloc$get(segment), session);
    }
    static final FunctionDescriptor realloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle realloc$MH = RuntimeHelper.downcallHandle(
        _GMemVTable.realloc$FUNC
    );
    public interface realloc {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, long _x1);
        static MemorySegment allocate(realloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(realloc.class, fi, _GMemVTable.realloc$FUNC, session);
        }
        static realloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMemVTable.realloc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle realloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("realloc"));
    public static VarHandle realloc$VH() {
        return _GMemVTable.realloc$VH;
    }
    public static MemoryAddress realloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.realloc$VH.get(seg);
    }
    public static void realloc$set( MemorySegment seg, MemoryAddress x) {
        _GMemVTable.realloc$VH.set(seg, x);
    }
    public static MemoryAddress realloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.realloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void realloc$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMemVTable.realloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static realloc realloc (MemorySegment segment, MemorySession session) {
        return realloc.ofAddress(realloc$get(segment), session);
    }
    static final FunctionDescriptor free$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle free$MH = RuntimeHelper.downcallHandle(
        _GMemVTable.free$FUNC
    );
    public interface free {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(free fi, MemorySession session) {
            return RuntimeHelper.upcallStub(free.class, fi, _GMemVTable.free$FUNC, session);
        }
        static free ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GMemVTable.free$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("free"));
    public static VarHandle free$VH() {
        return _GMemVTable.free$VH;
    }
    public static MemoryAddress free$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.free$VH.get(seg);
    }
    public static void free$set( MemorySegment seg, MemoryAddress x) {
        _GMemVTable.free$VH.set(seg, x);
    }
    public static MemoryAddress free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void free$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMemVTable.free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static free free (MemorySegment segment, MemorySession session) {
        return free.ofAddress(free$get(segment), session);
    }
    static final FunctionDescriptor calloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle calloc$MH = RuntimeHelper.downcallHandle(
        _GMemVTable.calloc$FUNC
    );
    public interface calloc {

        java.lang.foreign.Addressable apply(long _x0, long _x1);
        static MemorySegment allocate(calloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(calloc.class, fi, _GMemVTable.calloc$FUNC, session);
        }
        static calloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (long __x0, long __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMemVTable.calloc$MH.invokeExact((Addressable)symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle calloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("calloc"));
    public static VarHandle calloc$VH() {
        return _GMemVTable.calloc$VH;
    }
    public static MemoryAddress calloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.calloc$VH.get(seg);
    }
    public static void calloc$set( MemorySegment seg, MemoryAddress x) {
        _GMemVTable.calloc$VH.set(seg, x);
    }
    public static MemoryAddress calloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.calloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void calloc$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMemVTable.calloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static calloc calloc (MemorySegment segment, MemorySession session) {
        return calloc.ofAddress(calloc$get(segment), session);
    }
    static final FunctionDescriptor try_malloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle try_malloc$MH = RuntimeHelper.downcallHandle(
        _GMemVTable.try_malloc$FUNC
    );
    public interface try_malloc {

        java.lang.foreign.Addressable apply(long _x0);
        static MemorySegment allocate(try_malloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(try_malloc.class, fi, _GMemVTable.try_malloc$FUNC, session);
        }
        static try_malloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (long __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMemVTable.try_malloc$MH.invokeExact((Addressable)symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle try_malloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("try_malloc"));
    public static VarHandle try_malloc$VH() {
        return _GMemVTable.try_malloc$VH;
    }
    public static MemoryAddress try_malloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.try_malloc$VH.get(seg);
    }
    public static void try_malloc$set( MemorySegment seg, MemoryAddress x) {
        _GMemVTable.try_malloc$VH.set(seg, x);
    }
    public static MemoryAddress try_malloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.try_malloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void try_malloc$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMemVTable.try_malloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static try_malloc try_malloc (MemorySegment segment, MemorySession session) {
        return try_malloc.ofAddress(try_malloc$get(segment), session);
    }
    static final FunctionDescriptor try_realloc$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT
    );
    static final MethodHandle try_realloc$MH = RuntimeHelper.downcallHandle(
        _GMemVTable.try_realloc$FUNC
    );
    public interface try_realloc {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, long _x1);
        static MemorySegment allocate(try_realloc fi, MemorySession session) {
            return RuntimeHelper.upcallStub(try_realloc.class, fi, _GMemVTable.try_realloc$FUNC, session);
        }
        static try_realloc ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, long __x1) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GMemVTable.try_realloc$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle try_realloc$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("try_realloc"));
    public static VarHandle try_realloc$VH() {
        return _GMemVTable.try_realloc$VH;
    }
    public static MemoryAddress try_realloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.try_realloc$VH.get(seg);
    }
    public static void try_realloc$set( MemorySegment seg, MemoryAddress x) {
        _GMemVTable.try_realloc$VH.set(seg, x);
    }
    public static MemoryAddress try_realloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GMemVTable.try_realloc$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void try_realloc$set(MemorySegment seg, long index, MemoryAddress x) {
        _GMemVTable.try_realloc$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static try_realloc try_realloc (MemorySegment segment, MemorySession session) {
        return try_realloc.ofAddress(try_realloc$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


