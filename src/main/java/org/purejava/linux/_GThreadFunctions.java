// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GThreadFunctions {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("mutex_new"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_lock"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_trylock"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_unlock"),
        Constants$root.C_POINTER$LAYOUT.withName("mutex_free"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_new"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_signal"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_broadcast"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_wait"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_timed_wait"),
        Constants$root.C_POINTER$LAYOUT.withName("cond_free"),
        Constants$root.C_POINTER$LAYOUT.withName("private_new"),
        Constants$root.C_POINTER$LAYOUT.withName("private_get"),
        Constants$root.C_POINTER$LAYOUT.withName("private_set"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_create"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_yield"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_join"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_exit"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_set_priority"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_self"),
        Constants$root.C_POINTER$LAYOUT.withName("thread_equal")
    ).withName("_GThreadFunctions");
    public static MemoryLayout $LAYOUT() {
        return _GThreadFunctions.$struct$LAYOUT;
    }
    static final FunctionDescriptor mutex_new$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle mutex_new$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.mutex_new$FUNC
    );
    public interface mutex_new {

        java.lang.foreign.Addressable apply();
        static MemorySegment allocate(mutex_new fi, MemorySession session) {
            return RuntimeHelper.upcallStub(mutex_new.class, fi, _GThreadFunctions.mutex_new$FUNC, session);
        }
        static mutex_new ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_new$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mutex_new$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mutex_new"));
    public static VarHandle mutex_new$VH() {
        return _GThreadFunctions.mutex_new$VH;
    }
    public static MemoryAddress mutex_new$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_new$VH.get(seg);
    }
    public static void mutex_new$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.mutex_new$VH.set(seg, x);
    }
    public static MemoryAddress mutex_new$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_new$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mutex_new$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.mutex_new$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mutex_new mutex_new (MemorySegment segment, MemorySession session) {
        return mutex_new.ofAddress(mutex_new$get(segment), session);
    }
    static final FunctionDescriptor mutex_lock$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mutex_lock$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.mutex_lock$FUNC
    );
    public interface mutex_lock {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(mutex_lock fi, MemorySession session) {
            return RuntimeHelper.upcallStub(mutex_lock.class, fi, _GThreadFunctions.mutex_lock$FUNC, session);
        }
        static mutex_lock ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GThreadFunctions.mutex_lock$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mutex_lock$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mutex_lock"));
    public static VarHandle mutex_lock$VH() {
        return _GThreadFunctions.mutex_lock$VH;
    }
    public static MemoryAddress mutex_lock$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_lock$VH.get(seg);
    }
    public static void mutex_lock$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.mutex_lock$VH.set(seg, x);
    }
    public static MemoryAddress mutex_lock$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_lock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mutex_lock$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.mutex_lock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mutex_lock mutex_lock (MemorySegment segment, MemorySession session) {
        return mutex_lock.ofAddress(mutex_lock$get(segment), session);
    }
    static final FunctionDescriptor mutex_trylock$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mutex_trylock$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.mutex_trylock$FUNC
    );
    public interface mutex_trylock {

        int apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(mutex_trylock fi, MemorySession session) {
            return RuntimeHelper.upcallStub(mutex_trylock.class, fi, _GThreadFunctions.mutex_trylock$FUNC, session);
        }
        static mutex_trylock ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (int)_GThreadFunctions.mutex_trylock$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mutex_trylock$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mutex_trylock"));
    public static VarHandle mutex_trylock$VH() {
        return _GThreadFunctions.mutex_trylock$VH;
    }
    public static MemoryAddress mutex_trylock$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_trylock$VH.get(seg);
    }
    public static void mutex_trylock$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.mutex_trylock$VH.set(seg, x);
    }
    public static MemoryAddress mutex_trylock$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_trylock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mutex_trylock$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.mutex_trylock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mutex_trylock mutex_trylock (MemorySegment segment, MemorySession session) {
        return mutex_trylock.ofAddress(mutex_trylock$get(segment), session);
    }
    static final FunctionDescriptor mutex_unlock$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mutex_unlock$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.mutex_unlock$FUNC
    );
    public interface mutex_unlock {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(mutex_unlock fi, MemorySession session) {
            return RuntimeHelper.upcallStub(mutex_unlock.class, fi, _GThreadFunctions.mutex_unlock$FUNC, session);
        }
        static mutex_unlock ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GThreadFunctions.mutex_unlock$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mutex_unlock$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mutex_unlock"));
    public static VarHandle mutex_unlock$VH() {
        return _GThreadFunctions.mutex_unlock$VH;
    }
    public static MemoryAddress mutex_unlock$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_unlock$VH.get(seg);
    }
    public static void mutex_unlock$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.mutex_unlock$VH.set(seg, x);
    }
    public static MemoryAddress mutex_unlock$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_unlock$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mutex_unlock$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.mutex_unlock$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mutex_unlock mutex_unlock (MemorySegment segment, MemorySession session) {
        return mutex_unlock.ofAddress(mutex_unlock$get(segment), session);
    }
    static final FunctionDescriptor mutex_free$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle mutex_free$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.mutex_free$FUNC
    );
    public interface mutex_free {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(mutex_free fi, MemorySession session) {
            return RuntimeHelper.upcallStub(mutex_free.class, fi, _GThreadFunctions.mutex_free$FUNC, session);
        }
        static mutex_free ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GThreadFunctions.mutex_free$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle mutex_free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("mutex_free"));
    public static VarHandle mutex_free$VH() {
        return _GThreadFunctions.mutex_free$VH;
    }
    public static MemoryAddress mutex_free$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_free$VH.get(seg);
    }
    public static void mutex_free$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.mutex_free$VH.set(seg, x);
    }
    public static MemoryAddress mutex_free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.mutex_free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void mutex_free$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.mutex_free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static mutex_free mutex_free (MemorySegment segment, MemorySession session) {
        return mutex_free.ofAddress(mutex_free$get(segment), session);
    }
    static final FunctionDescriptor cond_new$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT);
    static final MethodHandle cond_new$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.cond_new$FUNC
    );
    public interface cond_new {

        java.lang.foreign.Addressable apply();
        static MemorySegment allocate(cond_new fi, MemorySession session) {
            return RuntimeHelper.upcallStub(cond_new.class, fi, _GThreadFunctions.cond_new$FUNC, session);
        }
        static cond_new ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_new$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cond_new$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cond_new"));
    public static VarHandle cond_new$VH() {
        return _GThreadFunctions.cond_new$VH;
    }
    public static MemoryAddress cond_new$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_new$VH.get(seg);
    }
    public static void cond_new$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.cond_new$VH.set(seg, x);
    }
    public static MemoryAddress cond_new$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_new$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cond_new$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.cond_new$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cond_new cond_new (MemorySegment segment, MemorySession session) {
        return cond_new.ofAddress(cond_new$get(segment), session);
    }
    static final FunctionDescriptor cond_signal$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cond_signal$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.cond_signal$FUNC
    );
    public interface cond_signal {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(cond_signal fi, MemorySession session) {
            return RuntimeHelper.upcallStub(cond_signal.class, fi, _GThreadFunctions.cond_signal$FUNC, session);
        }
        static cond_signal ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GThreadFunctions.cond_signal$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cond_signal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cond_signal"));
    public static VarHandle cond_signal$VH() {
        return _GThreadFunctions.cond_signal$VH;
    }
    public static MemoryAddress cond_signal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_signal$VH.get(seg);
    }
    public static void cond_signal$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.cond_signal$VH.set(seg, x);
    }
    public static MemoryAddress cond_signal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_signal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cond_signal$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.cond_signal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cond_signal cond_signal (MemorySegment segment, MemorySession session) {
        return cond_signal.ofAddress(cond_signal$get(segment), session);
    }
    static final FunctionDescriptor cond_broadcast$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cond_broadcast$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.cond_broadcast$FUNC
    );
    public interface cond_broadcast {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(cond_broadcast fi, MemorySession session) {
            return RuntimeHelper.upcallStub(cond_broadcast.class, fi, _GThreadFunctions.cond_broadcast$FUNC, session);
        }
        static cond_broadcast ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GThreadFunctions.cond_broadcast$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cond_broadcast$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cond_broadcast"));
    public static VarHandle cond_broadcast$VH() {
        return _GThreadFunctions.cond_broadcast$VH;
    }
    public static MemoryAddress cond_broadcast$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_broadcast$VH.get(seg);
    }
    public static void cond_broadcast$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.cond_broadcast$VH.set(seg, x);
    }
    public static MemoryAddress cond_broadcast$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_broadcast$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cond_broadcast$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.cond_broadcast$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cond_broadcast cond_broadcast (MemorySegment segment, MemorySession session) {
        return cond_broadcast.ofAddress(cond_broadcast$get(segment), session);
    }
    static final FunctionDescriptor cond_wait$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cond_wait$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.cond_wait$FUNC
    );
    public interface cond_wait {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(cond_wait fi, MemorySession session) {
            return RuntimeHelper.upcallStub(cond_wait.class, fi, _GThreadFunctions.cond_wait$FUNC, session);
        }
        static cond_wait ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GThreadFunctions.cond_wait$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cond_wait$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cond_wait"));
    public static VarHandle cond_wait$VH() {
        return _GThreadFunctions.cond_wait$VH;
    }
    public static MemoryAddress cond_wait$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_wait$VH.get(seg);
    }
    public static void cond_wait$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.cond_wait$VH.set(seg, x);
    }
    public static MemoryAddress cond_wait$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_wait$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cond_wait$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.cond_wait$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cond_wait cond_wait (MemorySegment segment, MemorySession session) {
        return cond_wait.ofAddress(cond_wait$get(segment), session);
    }
    static final FunctionDescriptor cond_timed_wait$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cond_timed_wait$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.cond_timed_wait$FUNC
    );
    public interface cond_timed_wait {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, java.lang.foreign.MemoryAddress _x2);
        static MemorySegment allocate(cond_timed_wait fi, MemorySession session) {
            return RuntimeHelper.upcallStub(cond_timed_wait.class, fi, _GThreadFunctions.cond_timed_wait$FUNC, session);
        }
        static cond_timed_wait ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, java.lang.foreign.MemoryAddress __x2) -> {
                try {
                    return (int)_GThreadFunctions.cond_timed_wait$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, (java.lang.foreign.Addressable)__x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cond_timed_wait$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cond_timed_wait"));
    public static VarHandle cond_timed_wait$VH() {
        return _GThreadFunctions.cond_timed_wait$VH;
    }
    public static MemoryAddress cond_timed_wait$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_timed_wait$VH.get(seg);
    }
    public static void cond_timed_wait$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.cond_timed_wait$VH.set(seg, x);
    }
    public static MemoryAddress cond_timed_wait$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_timed_wait$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cond_timed_wait$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.cond_timed_wait$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cond_timed_wait cond_timed_wait (MemorySegment segment, MemorySession session) {
        return cond_timed_wait.ofAddress(cond_timed_wait$get(segment), session);
    }
    static final FunctionDescriptor cond_free$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle cond_free$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.cond_free$FUNC
    );
    public interface cond_free {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(cond_free fi, MemorySession session) {
            return RuntimeHelper.upcallStub(cond_free.class, fi, _GThreadFunctions.cond_free$FUNC, session);
        }
        static cond_free ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GThreadFunctions.cond_free$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle cond_free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("cond_free"));
    public static VarHandle cond_free$VH() {
        return _GThreadFunctions.cond_free$VH;
    }
    public static MemoryAddress cond_free$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_free$VH.get(seg);
    }
    public static void cond_free$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.cond_free$VH.set(seg, x);
    }
    public static MemoryAddress cond_free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.cond_free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void cond_free$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.cond_free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static cond_free cond_free (MemorySegment segment, MemorySession session) {
        return cond_free.ofAddress(cond_free$get(segment), session);
    }
    static final FunctionDescriptor private_new$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle private_new$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.private_new$FUNC
    );
    public interface private_new {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(private_new fi, MemorySession session) {
            return RuntimeHelper.upcallStub(private_new.class, fi, _GThreadFunctions.private_new$FUNC, session);
        }
        static private_new ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GThreadFunctions.private_new$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle private_new$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("private_new"));
    public static VarHandle private_new$VH() {
        return _GThreadFunctions.private_new$VH;
    }
    public static MemoryAddress private_new$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.private_new$VH.get(seg);
    }
    public static void private_new$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.private_new$VH.set(seg, x);
    }
    public static MemoryAddress private_new$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.private_new$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void private_new$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.private_new$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static private_new private_new (MemorySegment segment, MemorySession session) {
        return private_new.ofAddress(private_new$get(segment), session);
    }
    static final FunctionDescriptor private_get$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle private_get$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.private_get$FUNC
    );
    public interface private_get {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(private_get fi, MemorySession session) {
            return RuntimeHelper.upcallStub(private_get.class, fi, _GThreadFunctions.private_get$FUNC, session);
        }
        static private_get ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GThreadFunctions.private_get$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle private_get$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("private_get"));
    public static VarHandle private_get$VH() {
        return _GThreadFunctions.private_get$VH;
    }
    public static MemoryAddress private_get$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.private_get$VH.get(seg);
    }
    public static void private_get$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.private_get$VH.set(seg, x);
    }
    public static MemoryAddress private_get$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.private_get$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void private_get$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.private_get$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static private_get private_get (MemorySegment segment, MemorySession session) {
        return private_get.ofAddress(private_get$get(segment), session);
    }
    static final FunctionDescriptor private_set$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle private_set$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.private_set$FUNC
    );
    public interface private_set {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(private_set fi, MemorySession session) {
            return RuntimeHelper.upcallStub(private_set.class, fi, _GThreadFunctions.private_set$FUNC, session);
        }
        static private_set ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GThreadFunctions.private_set$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle private_set$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("private_set"));
    public static VarHandle private_set$VH() {
        return _GThreadFunctions.private_set$VH;
    }
    public static MemoryAddress private_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.private_set$VH.get(seg);
    }
    public static void private_set$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.private_set$VH.set(seg, x);
    }
    public static MemoryAddress private_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.private_set$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void private_set$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.private_set$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static private_set private_set (MemorySegment segment, MemorySession session) {
        return private_set.ofAddress(private_set$get(segment), session);
    }
    static final FunctionDescriptor thread_create$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_LONG_LONG$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle thread_create$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.thread_create$FUNC
    );
    public interface thread_create {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1, long _x2, int _x3, int _x4, int _x5, java.lang.foreign.MemoryAddress _x6, java.lang.foreign.MemoryAddress _x7);
        static MemorySegment allocate(thread_create fi, MemorySession session) {
            return RuntimeHelper.upcallStub(thread_create.class, fi, _GThreadFunctions.thread_create$FUNC, session);
        }
        static thread_create ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1, long __x2, int __x3, int __x4, int __x5, java.lang.foreign.MemoryAddress __x6, java.lang.foreign.MemoryAddress __x7) -> {
                try {
                    _GThreadFunctions.thread_create$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1, __x2, __x3, __x4, __x5, (java.lang.foreign.Addressable)__x6, (java.lang.foreign.Addressable)__x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle thread_create$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("thread_create"));
    public static VarHandle thread_create$VH() {
        return _GThreadFunctions.thread_create$VH;
    }
    public static MemoryAddress thread_create$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_create$VH.get(seg);
    }
    public static void thread_create$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.thread_create$VH.set(seg, x);
    }
    public static MemoryAddress thread_create$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_create$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void thread_create$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.thread_create$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static thread_create thread_create (MemorySegment segment, MemorySession session) {
        return thread_create.ofAddress(thread_create$get(segment), session);
    }
    static final FunctionDescriptor thread_yield$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle thread_yield$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.thread_yield$FUNC
    );
    public interface thread_yield {

        void apply();
        static MemorySegment allocate(thread_yield fi, MemorySession session) {
            return RuntimeHelper.upcallStub(thread_yield.class, fi, _GThreadFunctions.thread_yield$FUNC, session);
        }
        static thread_yield ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GThreadFunctions.thread_yield$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle thread_yield$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("thread_yield"));
    public static VarHandle thread_yield$VH() {
        return _GThreadFunctions.thread_yield$VH;
    }
    public static MemoryAddress thread_yield$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_yield$VH.get(seg);
    }
    public static void thread_yield$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.thread_yield$VH.set(seg, x);
    }
    public static MemoryAddress thread_yield$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_yield$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void thread_yield$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.thread_yield$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static thread_yield thread_yield (MemorySegment segment, MemorySession session) {
        return thread_yield.ofAddress(thread_yield$get(segment), session);
    }
    static final FunctionDescriptor thread_join$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle thread_join$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.thread_join$FUNC
    );
    public interface thread_join {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(thread_join fi, MemorySession session) {
            return RuntimeHelper.upcallStub(thread_join.class, fi, _GThreadFunctions.thread_join$FUNC, session);
        }
        static thread_join ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GThreadFunctions.thread_join$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle thread_join$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("thread_join"));
    public static VarHandle thread_join$VH() {
        return _GThreadFunctions.thread_join$VH;
    }
    public static MemoryAddress thread_join$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_join$VH.get(seg);
    }
    public static void thread_join$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.thread_join$VH.set(seg, x);
    }
    public static MemoryAddress thread_join$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_join$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void thread_join$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.thread_join$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static thread_join thread_join (MemorySegment segment, MemorySession session) {
        return thread_join.ofAddress(thread_join$get(segment), session);
    }
    static final FunctionDescriptor thread_exit$FUNC = FunctionDescriptor.ofVoid();
    static final MethodHandle thread_exit$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.thread_exit$FUNC
    );
    public interface thread_exit {

        void apply();
        static MemorySegment allocate(thread_exit fi, MemorySession session) {
            return RuntimeHelper.upcallStub(thread_exit.class, fi, _GThreadFunctions.thread_exit$FUNC, session);
        }
        static thread_exit ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return () -> {
                try {
                    _GThreadFunctions.thread_exit$MH.invokeExact((Addressable)symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle thread_exit$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("thread_exit"));
    public static VarHandle thread_exit$VH() {
        return _GThreadFunctions.thread_exit$VH;
    }
    public static MemoryAddress thread_exit$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_exit$VH.get(seg);
    }
    public static void thread_exit$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.thread_exit$VH.set(seg, x);
    }
    public static MemoryAddress thread_exit$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_exit$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void thread_exit$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.thread_exit$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static thread_exit thread_exit (MemorySegment segment, MemorySession session) {
        return thread_exit.ofAddress(thread_exit$get(segment), session);
    }
    static final FunctionDescriptor thread_set_priority$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle thread_set_priority$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.thread_set_priority$FUNC
    );
    public interface thread_set_priority {

        void apply(java.lang.foreign.MemoryAddress _x0, int _x1);
        static MemorySegment allocate(thread_set_priority fi, MemorySession session) {
            return RuntimeHelper.upcallStub(thread_set_priority.class, fi, _GThreadFunctions.thread_set_priority$FUNC, session);
        }
        static thread_set_priority ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1) -> {
                try {
                    _GThreadFunctions.thread_set_priority$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle thread_set_priority$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("thread_set_priority"));
    public static VarHandle thread_set_priority$VH() {
        return _GThreadFunctions.thread_set_priority$VH;
    }
    public static MemoryAddress thread_set_priority$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_set_priority$VH.get(seg);
    }
    public static void thread_set_priority$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.thread_set_priority$VH.set(seg, x);
    }
    public static MemoryAddress thread_set_priority$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_set_priority$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void thread_set_priority$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.thread_set_priority$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static thread_set_priority thread_set_priority (MemorySegment segment, MemorySession session) {
        return thread_set_priority.ofAddress(thread_set_priority$get(segment), session);
    }
    static final FunctionDescriptor thread_self$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle thread_self$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.thread_self$FUNC
    );
    public interface thread_self {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(thread_self fi, MemorySession session) {
            return RuntimeHelper.upcallStub(thread_self.class, fi, _GThreadFunctions.thread_self$FUNC, session);
        }
        static thread_self ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GThreadFunctions.thread_self$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle thread_self$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("thread_self"));
    public static VarHandle thread_self$VH() {
        return _GThreadFunctions.thread_self$VH;
    }
    public static MemoryAddress thread_self$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_self$VH.get(seg);
    }
    public static void thread_self$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.thread_self$VH.set(seg, x);
    }
    public static MemoryAddress thread_self$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_self$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void thread_self$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.thread_self$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static thread_self thread_self (MemorySegment segment, MemorySession session) {
        return thread_self.ofAddress(thread_self$get(segment), session);
    }
    static final FunctionDescriptor thread_equal$FUNC = FunctionDescriptor.of(Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle thread_equal$MH = RuntimeHelper.downcallHandle(
        _GThreadFunctions.thread_equal$FUNC
    );
    public interface thread_equal {

        int apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(thread_equal fi, MemorySession session) {
            return RuntimeHelper.upcallStub(thread_equal.class, fi, _GThreadFunctions.thread_equal$FUNC, session);
        }
        static thread_equal ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    return (int)_GThreadFunctions.thread_equal$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle thread_equal$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("thread_equal"));
    public static VarHandle thread_equal$VH() {
        return _GThreadFunctions.thread_equal$VH;
    }
    public static MemoryAddress thread_equal$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_equal$VH.get(seg);
    }
    public static void thread_equal$set( MemorySegment seg, MemoryAddress x) {
        _GThreadFunctions.thread_equal$VH.set(seg, x);
    }
    public static MemoryAddress thread_equal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GThreadFunctions.thread_equal$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void thread_equal$set(MemorySegment seg, long index, MemoryAddress x) {
        _GThreadFunctions.thread_equal$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static thread_equal thread_equal (MemorySegment segment, MemorySession session) {
        return thread_equal.ofAddress(thread_equal$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


