// Generated by jextract

package org.purejava.linux;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class _GTypeValueTable {

    static final  GroupLayout $struct$LAYOUT = MemoryLayout.structLayout(
        Constants$root.C_POINTER$LAYOUT.withName("value_init"),
        Constants$root.C_POINTER$LAYOUT.withName("value_free"),
        Constants$root.C_POINTER$LAYOUT.withName("value_copy"),
        Constants$root.C_POINTER$LAYOUT.withName("value_peek_pointer"),
        Constants$root.C_POINTER$LAYOUT.withName("collect_format"),
        Constants$root.C_POINTER$LAYOUT.withName("collect_value"),
        Constants$root.C_POINTER$LAYOUT.withName("lcopy_format"),
        Constants$root.C_POINTER$LAYOUT.withName("lcopy_value")
    ).withName("_GTypeValueTable");
    public static MemoryLayout $LAYOUT() {
        return _GTypeValueTable.$struct$LAYOUT;
    }
    static final FunctionDescriptor value_init$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle value_init$MH = RuntimeHelper.downcallHandle(
        _GTypeValueTable.value_init$FUNC
    );
    public interface value_init {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(value_init fi, MemorySession session) {
            return RuntimeHelper.upcallStub(value_init.class, fi, _GTypeValueTable.value_init$FUNC, session);
        }
        static value_init ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GTypeValueTable.value_init$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle value_init$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("value_init"));
    public static VarHandle value_init$VH() {
        return _GTypeValueTable.value_init$VH;
    }
    public static MemoryAddress value_init$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.value_init$VH.get(seg);
    }
    public static void value_init$set( MemorySegment seg, MemoryAddress x) {
        _GTypeValueTable.value_init$VH.set(seg, x);
    }
    public static MemoryAddress value_init$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.value_init$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value_init$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTypeValueTable.value_init$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static value_init value_init (MemorySegment segment, MemorySession session) {
        return value_init.ofAddress(value_init$get(segment), session);
    }
    static final FunctionDescriptor value_free$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle value_free$MH = RuntimeHelper.downcallHandle(
        _GTypeValueTable.value_free$FUNC
    );
    public interface value_free {

        void apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(value_free fi, MemorySession session) {
            return RuntimeHelper.upcallStub(value_free.class, fi, _GTypeValueTable.value_free$FUNC, session);
        }
        static value_free ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    _GTypeValueTable.value_free$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle value_free$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("value_free"));
    public static VarHandle value_free$VH() {
        return _GTypeValueTable.value_free$VH;
    }
    public static MemoryAddress value_free$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.value_free$VH.get(seg);
    }
    public static void value_free$set( MemorySegment seg, MemoryAddress x) {
        _GTypeValueTable.value_free$VH.set(seg, x);
    }
    public static MemoryAddress value_free$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.value_free$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value_free$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTypeValueTable.value_free$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static value_free value_free (MemorySegment segment, MemorySession session) {
        return value_free.ofAddress(value_free$get(segment), session);
    }
    static final FunctionDescriptor value_copy$FUNC = FunctionDescriptor.ofVoid(
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle value_copy$MH = RuntimeHelper.downcallHandle(
        _GTypeValueTable.value_copy$FUNC
    );
    public interface value_copy {

        void apply(java.lang.foreign.MemoryAddress _x0, java.lang.foreign.MemoryAddress _x1);
        static MemorySegment allocate(value_copy fi, MemorySession session) {
            return RuntimeHelper.upcallStub(value_copy.class, fi, _GTypeValueTable.value_copy$FUNC, session);
        }
        static value_copy ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, java.lang.foreign.MemoryAddress __x1) -> {
                try {
                    _GTypeValueTable.value_copy$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, (java.lang.foreign.Addressable)__x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle value_copy$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("value_copy"));
    public static VarHandle value_copy$VH() {
        return _GTypeValueTable.value_copy$VH;
    }
    public static MemoryAddress value_copy$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.value_copy$VH.get(seg);
    }
    public static void value_copy$set( MemorySegment seg, MemoryAddress x) {
        _GTypeValueTable.value_copy$VH.set(seg, x);
    }
    public static MemoryAddress value_copy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.value_copy$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value_copy$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTypeValueTable.value_copy$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static value_copy value_copy (MemorySegment segment, MemorySession session) {
        return value_copy.ofAddress(value_copy$get(segment), session);
    }
    static final FunctionDescriptor value_peek_pointer$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT
    );
    static final MethodHandle value_peek_pointer$MH = RuntimeHelper.downcallHandle(
        _GTypeValueTable.value_peek_pointer$FUNC
    );
    public interface value_peek_pointer {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0);
        static MemorySegment allocate(value_peek_pointer fi, MemorySession session) {
            return RuntimeHelper.upcallStub(value_peek_pointer.class, fi, _GTypeValueTable.value_peek_pointer$FUNC, session);
        }
        static value_peek_pointer ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GTypeValueTable.value_peek_pointer$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle value_peek_pointer$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("value_peek_pointer"));
    public static VarHandle value_peek_pointer$VH() {
        return _GTypeValueTable.value_peek_pointer$VH;
    }
    public static MemoryAddress value_peek_pointer$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.value_peek_pointer$VH.get(seg);
    }
    public static void value_peek_pointer$set( MemorySegment seg, MemoryAddress x) {
        _GTypeValueTable.value_peek_pointer$VH.set(seg, x);
    }
    public static MemoryAddress value_peek_pointer$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.value_peek_pointer$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void value_peek_pointer$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTypeValueTable.value_peek_pointer$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static value_peek_pointer value_peek_pointer (MemorySegment segment, MemorySession session) {
        return value_peek_pointer.ofAddress(value_peek_pointer$get(segment), session);
    }
    static final VarHandle collect_format$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("collect_format"));
    public static VarHandle collect_format$VH() {
        return _GTypeValueTable.collect_format$VH;
    }
    public static MemoryAddress collect_format$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.collect_format$VH.get(seg);
    }
    public static void collect_format$set( MemorySegment seg, MemoryAddress x) {
        _GTypeValueTable.collect_format$VH.set(seg, x);
    }
    public static MemoryAddress collect_format$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.collect_format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void collect_format$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTypeValueTable.collect_format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor collect_value$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle collect_value$MH = RuntimeHelper.downcallHandle(
        _GTypeValueTable.collect_value$FUNC
    );
    public interface collect_value {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, int _x3);
        static MemorySegment allocate(collect_value fi, MemorySession session) {
            return RuntimeHelper.upcallStub(collect_value.class, fi, _GTypeValueTable.collect_value$FUNC, session);
        }
        static collect_value ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, int __x3) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GTypeValueTable.collect_value$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle collect_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("collect_value"));
    public static VarHandle collect_value$VH() {
        return _GTypeValueTable.collect_value$VH;
    }
    public static MemoryAddress collect_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.collect_value$VH.get(seg);
    }
    public static void collect_value$set( MemorySegment seg, MemoryAddress x) {
        _GTypeValueTable.collect_value$VH.set(seg, x);
    }
    public static MemoryAddress collect_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.collect_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void collect_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTypeValueTable.collect_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static collect_value collect_value (MemorySegment segment, MemorySession session) {
        return collect_value.ofAddress(collect_value$get(segment), session);
    }
    static final VarHandle lcopy_format$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lcopy_format"));
    public static VarHandle lcopy_format$VH() {
        return _GTypeValueTable.lcopy_format$VH;
    }
    public static MemoryAddress lcopy_format$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.lcopy_format$VH.get(seg);
    }
    public static void lcopy_format$set( MemorySegment seg, MemoryAddress x) {
        _GTypeValueTable.lcopy_format$VH.set(seg, x);
    }
    public static MemoryAddress lcopy_format$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.lcopy_format$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lcopy_format$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTypeValueTable.lcopy_format$VH.set(seg.asSlice(index*sizeof()), x);
    }
    static final FunctionDescriptor lcopy_value$FUNC = FunctionDescriptor.of(Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT,
        Constants$root.C_POINTER$LAYOUT,
        Constants$root.C_INT$LAYOUT
    );
    static final MethodHandle lcopy_value$MH = RuntimeHelper.downcallHandle(
        _GTypeValueTable.lcopy_value$FUNC
    );
    public interface lcopy_value {

        java.lang.foreign.Addressable apply(java.lang.foreign.MemoryAddress _x0, int _x1, java.lang.foreign.MemoryAddress _x2, int _x3);
        static MemorySegment allocate(lcopy_value fi, MemorySession session) {
            return RuntimeHelper.upcallStub(lcopy_value.class, fi, _GTypeValueTable.lcopy_value$FUNC, session);
        }
        static lcopy_value ofAddress(MemoryAddress addr, MemorySession session) {
            MemorySegment symbol = MemorySegment.ofAddress(addr, 0, session);
            return (java.lang.foreign.MemoryAddress __x0, int __x1, java.lang.foreign.MemoryAddress __x2, int __x3) -> {
                try {
                    return (java.lang.foreign.Addressable)(java.lang.foreign.MemoryAddress)_GTypeValueTable.lcopy_value$MH.invokeExact((Addressable)symbol, (java.lang.foreign.Addressable)__x0, __x1, (java.lang.foreign.Addressable)__x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    static final VarHandle lcopy_value$VH = $struct$LAYOUT.varHandle(MemoryLayout.PathElement.groupElement("lcopy_value"));
    public static VarHandle lcopy_value$VH() {
        return _GTypeValueTable.lcopy_value$VH;
    }
    public static MemoryAddress lcopy_value$get(MemorySegment seg) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.lcopy_value$VH.get(seg);
    }
    public static void lcopy_value$set( MemorySegment seg, MemoryAddress x) {
        _GTypeValueTable.lcopy_value$VH.set(seg, x);
    }
    public static MemoryAddress lcopy_value$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemoryAddress)_GTypeValueTable.lcopy_value$VH.get(seg.asSlice(index*sizeof()));
    }
    public static void lcopy_value$set(MemorySegment seg, long index, MemoryAddress x) {
        _GTypeValueTable.lcopy_value$VH.set(seg.asSlice(index*sizeof()), x);
    }
    public static lcopy_value lcopy_value (MemorySegment segment, MemorySession session) {
        return lcopy_value.ofAddress(lcopy_value$get(segment), session);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(int len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemoryAddress addr, MemorySession session) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, session); }
}


