// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct fpsimd_context {
 *     struct _aarch64_ctx head;
 *     unsigned int fpsr;
 *     unsigned int fpcr;
 *     unsigned __int128 vregs[32];
 * };
 * }
 */
public class fpsimd_context {

    public static MemoryLayout $LAYOUT() {
        return constants$131.const$5;
    }
    public static MemorySegment head$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    public static VarHandle fpsr$VH() {
        return constants$132.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int fpsr;
     * }
     */
    public static int fpsr$get(MemorySegment seg) {
        return (int)constants$132.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int fpsr;
     * }
     */
    public static void fpsr$set(MemorySegment seg, int x) {
        constants$132.const$0.set(seg, x);
    }
    public static int fpsr$get(MemorySegment seg, long index) {
        return (int)constants$132.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void fpsr$set(MemorySegment seg, long index, int x) {
        constants$132.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle fpcr$VH() {
        return constants$132.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int fpcr;
     * }
     */
    public static int fpcr$get(MemorySegment seg) {
        return (int)constants$132.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int fpcr;
     * }
     */
    public static void fpcr$set(MemorySegment seg, int x) {
        constants$132.const$1.set(seg, x);
    }
    public static int fpcr$get(MemorySegment seg, long index) {
        return (int)constants$132.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void fpcr$set(MemorySegment seg, long index, int x) {
        constants$132.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


