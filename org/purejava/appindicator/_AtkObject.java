// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _AtkObject {
 *     struct _GObject parent;
 *     char* description;
 *     char* name;
 *     struct _AtkObject* accessible_parent;
 *     enum AtkRole role;
 *     struct _AtkRelationSet* relation_set;
 *     enum AtkLayer layer;
 * };
 * }
 */
public class _AtkObject {

    public static MemoryLayout $LAYOUT() {
        return constants$1965.const$3;
    }
    public static MemorySegment parent$slice(MemorySegment seg) {
        return seg.asSlice(0, 24);
    }
    public static VarHandle description$VH() {
        return constants$1965.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* description;
     * }
     */
    public static MemorySegment description$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1965.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* description;
     * }
     */
    public static void description$set(MemorySegment seg, MemorySegment x) {
        constants$1965.const$4.set(seg, x);
    }
    public static MemorySegment description$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1965.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void description$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1965.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle name$VH() {
        return constants$1965.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static MemorySegment name$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1965.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* name;
     * }
     */
    public static void name$set(MemorySegment seg, MemorySegment x) {
        constants$1965.const$5.set(seg, x);
    }
    public static MemorySegment name$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1965.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void name$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1965.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle accessible_parent$VH() {
        return constants$1966.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* accessible_parent;
     * }
     */
    public static MemorySegment accessible_parent$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1966.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* accessible_parent;
     * }
     */
    public static void accessible_parent$set(MemorySegment seg, MemorySegment x) {
        constants$1966.const$0.set(seg, x);
    }
    public static MemorySegment accessible_parent$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1966.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void accessible_parent$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1966.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle role$VH() {
        return constants$1966.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AtkRole role;
     * }
     */
    public static int role$get(MemorySegment seg) {
        return (int)constants$1966.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AtkRole role;
     * }
     */
    public static void role$set(MemorySegment seg, int x) {
        constants$1966.const$1.set(seg, x);
    }
    public static int role$get(MemorySegment seg, long index) {
        return (int)constants$1966.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void role$set(MemorySegment seg, long index, int x) {
        constants$1966.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle relation_set$VH() {
        return constants$1966.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkRelationSet* relation_set;
     * }
     */
    public static MemorySegment relation_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$1966.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkRelationSet* relation_set;
     * }
     */
    public static void relation_set$set(MemorySegment seg, MemorySegment x) {
        constants$1966.const$2.set(seg, x);
    }
    public static MemorySegment relation_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$1966.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void relation_set$set(MemorySegment seg, long index, MemorySegment x) {
        constants$1966.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static VarHandle layer$VH() {
        return constants$1966.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum AtkLayer layer;
     * }
     */
    public static int layer$get(MemorySegment seg) {
        return (int)constants$1966.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum AtkLayer layer;
     * }
     */
    public static void layer$set(MemorySegment seg, int x) {
        constants$1966.const$3.set(seg, x);
    }
    public static int layer$get(MemorySegment seg, long index) {
        return (int)constants$1966.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void layer$set(MemorySegment seg, long index, int x) {
        constants$1966.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


