// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkListBoxClass {
 *     struct _GtkContainerClass parent_class;
 *     void (*row_selected)(struct _GtkListBox*,struct _GtkListBoxRow*);
 *     void (*row_activated)(struct _GtkListBox*,struct _GtkListBoxRow*);
 *     void (*activate_cursor_row)(struct _GtkListBox*);
 *     void (*toggle_cursor_row)(struct _GtkListBox*);
 *     void (*move_cursor)(struct _GtkListBox*,enum GtkMovementStep,int);
 *     void (*selected_rows_changed)(struct _GtkListBox*);
 *     void (*select_all)(struct _GtkListBox*);
 *     void (*unselect_all)(struct _GtkListBox*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 * };
 * }
 */
public class _GtkListBoxClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2841.const$2;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 976);
    }
    /**
     * {@snippet :
 * void (*row_selected)(struct _GtkListBox*,struct _GtkListBoxRow*);
     * }
     */
    public interface row_selected {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(row_selected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2841.const$3, fi, constants$13.const$4, scope);
        }
        static row_selected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_selected$VH() {
        return constants$2841.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_selected)(struct _GtkListBox*,struct _GtkListBoxRow*);
     * }
     */
    public static MemorySegment row_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2841.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_selected)(struct _GtkListBox*,struct _GtkListBoxRow*);
     * }
     */
    public static void row_selected$set(MemorySegment seg, MemorySegment x) {
        constants$2841.const$4.set(seg, x);
    }
    public static MemorySegment row_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2841.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void row_selected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2841.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_selected row_selected(MemorySegment segment, Arena scope) {
        return row_selected.ofAddress(row_selected$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*row_activated)(struct _GtkListBox*,struct _GtkListBoxRow*);
     * }
     */
    public interface row_activated {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(row_activated fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2841.const$5, fi, constants$13.const$4, scope);
        }
        static row_activated ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle row_activated$VH() {
        return constants$2842.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*row_activated)(struct _GtkListBox*,struct _GtkListBoxRow*);
     * }
     */
    public static MemorySegment row_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2842.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*row_activated)(struct _GtkListBox*,struct _GtkListBoxRow*);
     * }
     */
    public static void row_activated$set(MemorySegment seg, MemorySegment x) {
        constants$2842.const$0.set(seg, x);
    }
    public static MemorySegment row_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2842.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void row_activated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2842.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static row_activated row_activated(MemorySegment segment, Arena scope) {
        return row_activated.ofAddress(row_activated$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*activate_cursor_row)(struct _GtkListBox*);
     * }
     */
    public interface activate_cursor_row {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(activate_cursor_row fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2842.const$1, fi, constants$13.const$1, scope);
        }
        static activate_cursor_row ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle activate_cursor_row$VH() {
        return constants$2842.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*activate_cursor_row)(struct _GtkListBox*);
     * }
     */
    public static MemorySegment activate_cursor_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2842.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*activate_cursor_row)(struct _GtkListBox*);
     * }
     */
    public static void activate_cursor_row$set(MemorySegment seg, MemorySegment x) {
        constants$2842.const$2.set(seg, x);
    }
    public static MemorySegment activate_cursor_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2842.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void activate_cursor_row$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2842.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate_cursor_row activate_cursor_row(MemorySegment segment, Arena scope) {
        return activate_cursor_row.ofAddress(activate_cursor_row$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*toggle_cursor_row)(struct _GtkListBox*);
     * }
     */
    public interface toggle_cursor_row {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(toggle_cursor_row fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2842.const$3, fi, constants$13.const$1, scope);
        }
        static toggle_cursor_row ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle toggle_cursor_row$VH() {
        return constants$2842.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*toggle_cursor_row)(struct _GtkListBox*);
     * }
     */
    public static MemorySegment toggle_cursor_row$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2842.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*toggle_cursor_row)(struct _GtkListBox*);
     * }
     */
    public static void toggle_cursor_row$set(MemorySegment seg, MemorySegment x) {
        constants$2842.const$4.set(seg, x);
    }
    public static MemorySegment toggle_cursor_row$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2842.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_cursor_row$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2842.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_cursor_row toggle_cursor_row(MemorySegment segment, Arena scope) {
        return toggle_cursor_row.ofAddress(toggle_cursor_row$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*move_cursor)(struct _GtkListBox*,enum GtkMovementStep,int);
     * }
     */
    public interface move_cursor {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2);
        static MemorySegment allocate(move_cursor fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2842.const$5, fi, constants$467.const$3, scope);
        }
        static move_cursor ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2) -> {
                try {
                    constants$1901.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_cursor$VH() {
        return constants$2843.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*move_cursor)(struct _GtkListBox*,enum GtkMovementStep,int);
     * }
     */
    public static MemorySegment move_cursor$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2843.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*move_cursor)(struct _GtkListBox*,enum GtkMovementStep,int);
     * }
     */
    public static void move_cursor$set(MemorySegment seg, MemorySegment x) {
        constants$2843.const$0.set(seg, x);
    }
    public static MemorySegment move_cursor$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2843.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void move_cursor$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2843.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_cursor move_cursor(MemorySegment segment, Arena scope) {
        return move_cursor.ofAddress(move_cursor$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*selected_rows_changed)(struct _GtkListBox*);
     * }
     */
    public interface selected_rows_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(selected_rows_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2843.const$1, fi, constants$13.const$1, scope);
        }
        static selected_rows_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selected_rows_changed$VH() {
        return constants$2843.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*selected_rows_changed)(struct _GtkListBox*);
     * }
     */
    public static MemorySegment selected_rows_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2843.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*selected_rows_changed)(struct _GtkListBox*);
     * }
     */
    public static void selected_rows_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2843.const$2.set(seg, x);
    }
    public static MemorySegment selected_rows_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2843.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void selected_rows_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2843.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static selected_rows_changed selected_rows_changed(MemorySegment segment, Arena scope) {
        return selected_rows_changed.ofAddress(selected_rows_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*select_all)(struct _GtkListBox*);
     * }
     */
    public interface select_all {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(select_all fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2843.const$3, fi, constants$13.const$1, scope);
        }
        static select_all ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle select_all$VH() {
        return constants$2843.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*select_all)(struct _GtkListBox*);
     * }
     */
    public static MemorySegment select_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2843.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*select_all)(struct _GtkListBox*);
     * }
     */
    public static void select_all$set(MemorySegment seg, MemorySegment x) {
        constants$2843.const$4.set(seg, x);
    }
    public static MemorySegment select_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2843.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void select_all$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2843.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_all select_all(MemorySegment segment, Arena scope) {
        return select_all.ofAddress(select_all$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unselect_all)(struct _GtkListBox*);
     * }
     */
    public interface unselect_all {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(unselect_all fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2843.const$5, fi, constants$13.const$1, scope);
        }
        static unselect_all ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unselect_all$VH() {
        return constants$2844.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unselect_all)(struct _GtkListBox*);
     * }
     */
    public static MemorySegment unselect_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2844.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unselect_all)(struct _GtkListBox*);
     * }
     */
    public static void unselect_all$set(MemorySegment seg, MemorySegment x) {
        constants$2844.const$0.set(seg, x);
    }
    public static MemorySegment unselect_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2844.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void unselect_all$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2844.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static unselect_all unselect_all(MemorySegment segment, Arena scope) {
        return unselect_all.ofAddress(unselect_all$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2844.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2844.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2844.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2844.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2844.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2844.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2844.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2844.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2844.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2844.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2844.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2844.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2844.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2845.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2845.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2845.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2845.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2845.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


