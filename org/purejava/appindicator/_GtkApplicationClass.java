// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkApplicationClass {
 *     struct _GApplicationClass parent_class;
 *     void (*window_added)(struct _GtkApplication*,struct _GtkWindow*);
 *     void (*window_removed)(struct _GtkApplication*,struct _GtkWindow*);
 *     void* padding[12];
 * };
 * }
 */
public class _GtkApplicationClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2166.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 312);
    }
    /**
     * {@snippet :
 * void (*window_added)(struct _GtkApplication*,struct _GtkWindow*);
     * }
     */
    public interface window_added {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(window_added fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2167.const$0, fi, constants$13.const$4, scope);
        }
        static window_added ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle window_added$VH() {
        return constants$2167.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*window_added)(struct _GtkApplication*,struct _GtkWindow*);
     * }
     */
    public static MemorySegment window_added$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2167.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*window_added)(struct _GtkApplication*,struct _GtkWindow*);
     * }
     */
    public static void window_added$set(MemorySegment seg, MemorySegment x) {
        constants$2167.const$1.set(seg, x);
    }
    public static MemorySegment window_added$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2167.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void window_added$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2167.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static window_added window_added(MemorySegment segment, Arena scope) {
        return window_added.ofAddress(window_added$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*window_removed)(struct _GtkApplication*,struct _GtkWindow*);
     * }
     */
    public interface window_removed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(window_removed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2167.const$2, fi, constants$13.const$4, scope);
        }
        static window_removed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle window_removed$VH() {
        return constants$2167.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*window_removed)(struct _GtkApplication*,struct _GtkWindow*);
     * }
     */
    public static MemorySegment window_removed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2167.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*window_removed)(struct _GtkApplication*,struct _GtkWindow*);
     * }
     */
    public static void window_removed$set(MemorySegment seg, MemorySegment x) {
        constants$2167.const$3.set(seg, x);
    }
    public static MemorySegment window_removed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2167.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void window_removed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2167.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static window_removed window_removed(MemorySegment segment, Arena scope) {
        return window_removed.ofAddress(window_removed$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(328, 96);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


