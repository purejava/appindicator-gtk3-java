// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkFontChooserIface {
 *     struct _GTypeInterface base_iface;
 *     struct _PangoFontFamily* (*get_font_family)(struct _GtkFontChooser*);
 *     struct _PangoFontFace* (*get_font_face)(struct _GtkFontChooser*);
 *     int (*get_font_size)(struct _GtkFontChooser*);
 *     void (*set_filter_func)(struct _GtkFontChooser*,int (*)(struct _PangoFontFamily*,struct _PangoFontFace*,void*),void*,void (*)(void*));
 *     void (*font_activated)(struct _GtkFontChooser*,char*);
 *     void (*set_font_map)(struct _GtkFontChooser*,struct _PangoFontMap*);
 *     struct _PangoFontMap* (*get_font_map)(struct _GtkFontChooser*);
 *     void* padding[10];
 * };
 * }
 */
public class _GtkFontChooserIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2722.const$1;
    }
    public static MemorySegment base_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * struct _PangoFontFamily* (*get_font_family)(struct _GtkFontChooser*);
     * }
     */
    public interface get_font_family {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_font_family fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2722.const$2, fi, constants$5.const$2, scope);
        }
        static get_font_family ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_font_family$VH() {
        return constants$2722.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontFamily* (*get_font_family)(struct _GtkFontChooser*);
     * }
     */
    public static MemorySegment get_font_family$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2722.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontFamily* (*get_font_family)(struct _GtkFontChooser*);
     * }
     */
    public static void get_font_family$set(MemorySegment seg, MemorySegment x) {
        constants$2722.const$3.set(seg, x);
    }
    public static MemorySegment get_font_family$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2722.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font_family$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2722.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font_family get_font_family(MemorySegment segment, Arena scope) {
        return get_font_family.ofAddress(get_font_family$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _PangoFontFace* (*get_font_face)(struct _GtkFontChooser*);
     * }
     */
    public interface get_font_face {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_font_face fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2722.const$4, fi, constants$5.const$2, scope);
        }
        static get_font_face ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_font_face$VH() {
        return constants$2722.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontFace* (*get_font_face)(struct _GtkFontChooser*);
     * }
     */
    public static MemorySegment get_font_face$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2722.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontFace* (*get_font_face)(struct _GtkFontChooser*);
     * }
     */
    public static void get_font_face$set(MemorySegment seg, MemorySegment x) {
        constants$2722.const$5.set(seg, x);
    }
    public static MemorySegment get_font_face$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2722.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font_face$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2722.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font_face get_font_face(MemorySegment segment, Arena scope) {
        return get_font_face.ofAddress(get_font_face$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_font_size)(struct _GtkFontChooser*);
     * }
     */
    public interface get_font_size {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_font_size fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2723.const$0, fi, constants$10.const$5, scope);
        }
        static get_font_size ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_font_size$VH() {
        return constants$2723.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_font_size)(struct _GtkFontChooser*);
     * }
     */
    public static MemorySegment get_font_size$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2723.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_font_size)(struct _GtkFontChooser*);
     * }
     */
    public static void get_font_size$set(MemorySegment seg, MemorySegment x) {
        constants$2723.const$1.set(seg, x);
    }
    public static MemorySegment get_font_size$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2723.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font_size$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2723.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font_size get_font_size(MemorySegment segment, Arena scope) {
        return get_font_size.ofAddress(get_font_size$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_filter_func)(struct _GtkFontChooser*,int (*)(struct _PangoFontFamily*,struct _PangoFontFace*,void*),void*,void (*)(void*));
     * }
     */
    public interface set_filter_func {

        void apply(java.lang.foreign.MemorySegment model, java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_filter_func fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2723.const$2, fi, constants$42.const$1, scope);
        }
        static set_filter_func ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _model, java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$259.const$4.invokeExact(symbol, _model, _path, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_filter_func$VH() {
        return constants$2723.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_filter_func)(struct _GtkFontChooser*,int (*)(struct _PangoFontFamily*,struct _PangoFontFace*,void*),void*,void (*)(void*));
     * }
     */
    public static MemorySegment set_filter_func$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2723.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_filter_func)(struct _GtkFontChooser*,int (*)(struct _PangoFontFamily*,struct _PangoFontFace*,void*),void*,void (*)(void*));
     * }
     */
    public static void set_filter_func$set(MemorySegment seg, MemorySegment x) {
        constants$2723.const$3.set(seg, x);
    }
    public static MemorySegment set_filter_func$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2723.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void set_filter_func$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2723.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_filter_func set_filter_func(MemorySegment segment, Arena scope) {
        return set_filter_func.ofAddress(set_filter_func$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*font_activated)(struct _GtkFontChooser*,char*);
     * }
     */
    public interface font_activated {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(font_activated fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2723.const$4, fi, constants$13.const$4, scope);
        }
        static font_activated ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle font_activated$VH() {
        return constants$2723.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*font_activated)(struct _GtkFontChooser*,char*);
     * }
     */
    public static MemorySegment font_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2723.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*font_activated)(struct _GtkFontChooser*,char*);
     * }
     */
    public static void font_activated$set(MemorySegment seg, MemorySegment x) {
        constants$2723.const$5.set(seg, x);
    }
    public static MemorySegment font_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2723.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void font_activated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2723.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static font_activated font_activated(MemorySegment segment, Arena scope) {
        return font_activated.ofAddress(font_activated$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_font_map)(struct _GtkFontChooser*,struct _PangoFontMap*);
     * }
     */
    public interface set_font_map {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_font_map fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2724.const$0, fi, constants$13.const$4, scope);
        }
        static set_font_map ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_font_map$VH() {
        return constants$2724.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_font_map)(struct _GtkFontChooser*,struct _PangoFontMap*);
     * }
     */
    public static MemorySegment set_font_map$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2724.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_font_map)(struct _GtkFontChooser*,struct _PangoFontMap*);
     * }
     */
    public static void set_font_map$set(MemorySegment seg, MemorySegment x) {
        constants$2724.const$1.set(seg, x);
    }
    public static MemorySegment set_font_map$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2724.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void set_font_map$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2724.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_font_map set_font_map(MemorySegment segment, Arena scope) {
        return set_font_map.ofAddress(set_font_map$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _PangoFontMap* (*get_font_map)(struct _GtkFontChooser*);
     * }
     */
    public interface get_font_map {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_font_map fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2724.const$2, fi, constants$5.const$2, scope);
        }
        static get_font_map ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_font_map$VH() {
        return constants$2724.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _PangoFontMap* (*get_font_map)(struct _GtkFontChooser*);
     * }
     */
    public static MemorySegment get_font_map$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2724.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _PangoFontMap* (*get_font_map)(struct _GtkFontChooser*);
     * }
     */
    public static void get_font_map$set(MemorySegment seg, MemorySegment x) {
        constants$2724.const$3.set(seg, x);
    }
    public static MemorySegment get_font_map$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2724.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_font_map$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2724.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_font_map get_font_map(MemorySegment segment, Arena scope) {
        return get_font_map.ofAddress(get_font_map$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(72, 80);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


