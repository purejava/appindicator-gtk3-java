// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GSourceFuncs {
 *     int (*prepare)(struct _GSource*,int*);
 *     int (*check)(struct _GSource*);
 *     int (*dispatch)(struct _GSource*,int (*)(void*),void*);
 *     void (*finalize)(struct _GSource*);
 *     int (*closure_callback)(void*);
 *     void (*closure_marshal)();
 * };
 * }
 */
public class _GSourceFuncs {

    public static MemoryLayout $LAYOUT() {
        return constants$260.const$1;
    }
    /**
     * {@snippet :
 * int (*prepare)(struct _GSource*,int*);
     * }
     */
    public interface prepare {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(prepare fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$260.const$2, fi, constants$9.const$0, scope);
        }
        static prepare ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle prepare$VH() {
        return constants$260.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*prepare)(struct _GSource*,int*);
     * }
     */
    public static MemorySegment prepare$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$260.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*prepare)(struct _GSource*,int*);
     * }
     */
    public static void prepare$set(MemorySegment seg, MemorySegment x) {
        constants$260.const$3.set(seg, x);
    }
    public static MemorySegment prepare$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$260.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void prepare$set(MemorySegment seg, long index, MemorySegment x) {
        constants$260.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static prepare prepare(MemorySegment segment, Arena scope) {
        return prepare.ofAddress(prepare$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*check)(struct _GSource*);
     * }
     */
    public interface check {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(check fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$260.const$4, fi, constants$10.const$5, scope);
        }
        static check ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle check$VH() {
        return constants$260.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*check)(struct _GSource*);
     * }
     */
    public static MemorySegment check$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$260.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*check)(struct _GSource*);
     * }
     */
    public static void check$set(MemorySegment seg, MemorySegment x) {
        constants$260.const$5.set(seg, x);
    }
    public static MemorySegment check$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$260.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void check$set(MemorySegment seg, long index, MemorySegment x) {
        constants$260.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static check check(MemorySegment segment, Arena scope) {
        return check.ofAddress(check$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*dispatch)(struct _GSource*,int (*)(void*),void*);
     * }
     */
    public interface dispatch {

        int apply(java.lang.foreign.MemorySegment a, java.lang.foreign.MemorySegment b, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(dispatch fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$261.const$0, fi, constants$12.const$2, scope);
        }
        static dispatch ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _a, java.lang.foreign.MemorySegment _b, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$4.invokeExact(symbol, _a, _b, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle dispatch$VH() {
        return constants$261.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*dispatch)(struct _GSource*,int (*)(void*),void*);
     * }
     */
    public static MemorySegment dispatch$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$261.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*dispatch)(struct _GSource*,int (*)(void*),void*);
     * }
     */
    public static void dispatch$set(MemorySegment seg, MemorySegment x) {
        constants$261.const$1.set(seg, x);
    }
    public static MemorySegment dispatch$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$261.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void dispatch$set(MemorySegment seg, long index, MemorySegment x) {
        constants$261.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static dispatch dispatch(MemorySegment segment, Arena scope) {
        return dispatch.ofAddress(dispatch$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*finalize)(struct _GSource*);
     * }
     */
    public interface finalize {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(finalize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$261.const$2, fi, constants$13.const$1, scope);
        }
        static finalize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle finalize$VH() {
        return constants$261.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*finalize)(struct _GSource*);
     * }
     */
    public static MemorySegment finalize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$261.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*finalize)(struct _GSource*);
     * }
     */
    public static void finalize$set(MemorySegment seg, MemorySegment x) {
        constants$261.const$3.set(seg, x);
    }
    public static MemorySegment finalize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$261.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void finalize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$261.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static finalize finalize(MemorySegment segment, Arena scope) {
        return finalize.ofAddress(finalize$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*closure_callback)(void*);
     * }
     */
    public interface closure_callback {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(closure_callback fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$261.const$4, fi, constants$10.const$5, scope);
        }
        static closure_callback ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle closure_callback$VH() {
        return constants$261.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*closure_callback)(void*);
     * }
     */
    public static MemorySegment closure_callback$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$261.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*closure_callback)(void*);
     * }
     */
    public static void closure_callback$set(MemorySegment seg, MemorySegment x) {
        constants$261.const$5.set(seg, x);
    }
    public static MemorySegment closure_callback$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$261.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void closure_callback$set(MemorySegment seg, long index, MemorySegment x) {
        constants$261.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static closure_callback closure_callback(MemorySegment segment, Arena scope) {
        return closure_callback.ofAddress(closure_callback$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*closure_marshal)();
     * }
     */
    public interface closure_marshal {

        void apply();
        static MemorySegment allocate(closure_marshal fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$262.const$0, fi, constants$7.const$5, scope);
        }
        static closure_marshal ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle closure_marshal$VH() {
        return constants$262.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*closure_marshal)();
     * }
     */
    public static MemorySegment closure_marshal$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$262.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*closure_marshal)();
     * }
     */
    public static void closure_marshal$set(MemorySegment seg, MemorySegment x) {
        constants$262.const$1.set(seg, x);
    }
    public static MemorySegment closure_marshal$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$262.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void closure_marshal$set(MemorySegment seg, long index, MemorySegment x) {
        constants$262.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static closure_marshal closure_marshal(MemorySegment segment, Arena scope) {
        return closure_marshal.ofAddress(closure_marshal$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


