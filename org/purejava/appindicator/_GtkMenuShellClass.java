// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkMenuShellClass {
 *     struct _GtkContainerClass parent_class;
 *      *     unsigned int submenu_placement;
 *     void (*deactivate)(struct _GtkMenuShell*);
 *     void (*selection_done)(struct _GtkMenuShell*);
 *     void (*move_current)(struct _GtkMenuShell*,enum GtkMenuDirectionType);
 *     void (*activate_current)(struct _GtkMenuShell*,int);
 *     void (*cancel)(struct _GtkMenuShell*);
 *     void (*select_item)(struct _GtkMenuShell*,struct _GtkWidget*);
 *     void (*insert)(struct _GtkMenuShell*,struct _GtkWidget*,int);
 *     int (*get_popup_delay)(struct _GtkMenuShell*);
 *     int (*move_selected)(struct _GtkMenuShell*,int);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkMenuShellClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2227.const$0;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 976);
    }
    /**
     * {@snippet :
 * void (*deactivate)(struct _GtkMenuShell*);
     * }
     */
    public interface deactivate {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(deactivate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2227.const$1, fi, constants$13.const$1, scope);
        }
        static deactivate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle deactivate$VH() {
        return constants$2227.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*deactivate)(struct _GtkMenuShell*);
     * }
     */
    public static MemorySegment deactivate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2227.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*deactivate)(struct _GtkMenuShell*);
     * }
     */
    public static void deactivate$set(MemorySegment seg, MemorySegment x) {
        constants$2227.const$2.set(seg, x);
    }
    public static MemorySegment deactivate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2227.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void deactivate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2227.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static deactivate deactivate(MemorySegment segment, Arena scope) {
        return deactivate.ofAddress(deactivate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*selection_done)(struct _GtkMenuShell*);
     * }
     */
    public interface selection_done {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(selection_done fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2227.const$3, fi, constants$13.const$1, scope);
        }
        static selection_done ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selection_done$VH() {
        return constants$2227.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*selection_done)(struct _GtkMenuShell*);
     * }
     */
    public static MemorySegment selection_done$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2227.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*selection_done)(struct _GtkMenuShell*);
     * }
     */
    public static void selection_done$set(MemorySegment seg, MemorySegment x) {
        constants$2227.const$4.set(seg, x);
    }
    public static MemorySegment selection_done$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2227.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void selection_done$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2227.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static selection_done selection_done(MemorySegment segment, Arena scope) {
        return selection_done.ofAddress(selection_done$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*move_current)(struct _GtkMenuShell*,enum GtkMenuDirectionType);
     * }
     */
    public interface move_current {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(move_current fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2227.const$5, fi, constants$40.const$2, scope);
        }
        static move_current ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_current$VH() {
        return constants$2228.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*move_current)(struct _GtkMenuShell*,enum GtkMenuDirectionType);
     * }
     */
    public static MemorySegment move_current$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2228.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*move_current)(struct _GtkMenuShell*,enum GtkMenuDirectionType);
     * }
     */
    public static void move_current$set(MemorySegment seg, MemorySegment x) {
        constants$2228.const$0.set(seg, x);
    }
    public static MemorySegment move_current$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2228.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void move_current$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2228.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_current move_current(MemorySegment segment, Arena scope) {
        return move_current.ofAddress(move_current$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*activate_current)(struct _GtkMenuShell*,int);
     * }
     */
    public interface activate_current {

        void apply(java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(activate_current fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2228.const$1, fi, constants$40.const$2, scope);
        }
        static activate_current ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle activate_current$VH() {
        return constants$2228.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*activate_current)(struct _GtkMenuShell*,int);
     * }
     */
    public static MemorySegment activate_current$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2228.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*activate_current)(struct _GtkMenuShell*,int);
     * }
     */
    public static void activate_current$set(MemorySegment seg, MemorySegment x) {
        constants$2228.const$2.set(seg, x);
    }
    public static MemorySegment activate_current$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2228.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void activate_current$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2228.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate_current activate_current(MemorySegment segment, Arena scope) {
        return activate_current.ofAddress(activate_current$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*cancel)(struct _GtkMenuShell*);
     * }
     */
    public interface cancel {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(cancel fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2228.const$3, fi, constants$13.const$1, scope);
        }
        static cancel ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle cancel$VH() {
        return constants$2228.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*cancel)(struct _GtkMenuShell*);
     * }
     */
    public static MemorySegment cancel$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2228.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*cancel)(struct _GtkMenuShell*);
     * }
     */
    public static void cancel$set(MemorySegment seg, MemorySegment x) {
        constants$2228.const$4.set(seg, x);
    }
    public static MemorySegment cancel$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2228.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void cancel$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2228.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static cancel cancel(MemorySegment segment, Arena scope) {
        return cancel.ofAddress(cancel$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*select_item)(struct _GtkMenuShell*,struct _GtkWidget*);
     * }
     */
    public interface select_item {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(select_item fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2228.const$5, fi, constants$13.const$4, scope);
        }
        static select_item ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle select_item$VH() {
        return constants$2229.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*select_item)(struct _GtkMenuShell*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment select_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2229.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*select_item)(struct _GtkMenuShell*,struct _GtkWidget*);
     * }
     */
    public static void select_item$set(MemorySegment seg, MemorySegment x) {
        constants$2229.const$0.set(seg, x);
    }
    public static MemorySegment select_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2229.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void select_item$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2229.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static select_item select_item(MemorySegment segment, Arena scope) {
        return select_item.ofAddress(select_item$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*insert)(struct _GtkMenuShell*,struct _GtkWidget*,int);
     * }
     */
    public interface insert {

        void apply(java.lang.foreign.MemorySegment screen, java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(insert fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2229.const$1, fi, constants$164.const$5, scope);
        }
        static insert ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _screen, java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, _screen, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle insert$VH() {
        return constants$2229.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*insert)(struct _GtkMenuShell*,struct _GtkWidget*,int);
     * }
     */
    public static MemorySegment insert$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2229.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*insert)(struct _GtkMenuShell*,struct _GtkWidget*,int);
     * }
     */
    public static void insert$set(MemorySegment seg, MemorySegment x) {
        constants$2229.const$2.set(seg, x);
    }
    public static MemorySegment insert$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2229.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void insert$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2229.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static insert insert(MemorySegment segment, Arena scope) {
        return insert.ofAddress(insert$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*get_popup_delay)(struct _GtkMenuShell*);
     * }
     */
    public interface get_popup_delay {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_popup_delay fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2229.const$3, fi, constants$10.const$5, scope);
        }
        static get_popup_delay ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_popup_delay$VH() {
        return constants$2229.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*get_popup_delay)(struct _GtkMenuShell*);
     * }
     */
    public static MemorySegment get_popup_delay$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2229.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*get_popup_delay)(struct _GtkMenuShell*);
     * }
     */
    public static void get_popup_delay$set(MemorySegment seg, MemorySegment x) {
        constants$2229.const$4.set(seg, x);
    }
    public static MemorySegment get_popup_delay$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2229.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_popup_delay$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2229.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_popup_delay get_popup_delay(MemorySegment segment, Arena scope) {
        return get_popup_delay.ofAddress(get_popup_delay$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*move_selected)(struct _GtkMenuShell*,int);
     * }
     */
    public interface move_selected {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(move_selected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2229.const$5, fi, constants$11.const$4, scope);
        }
        static move_selected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_selected$VH() {
        return constants$2230.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*move_selected)(struct _GtkMenuShell*,int);
     * }
     */
    public static MemorySegment move_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2230.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*move_selected)(struct _GtkMenuShell*,int);
     * }
     */
    public static void move_selected$set(MemorySegment seg, MemorySegment x) {
        constants$2230.const$0.set(seg, x);
    }
    public static MemorySegment move_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2230.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void move_selected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2230.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_selected move_selected(MemorySegment segment, Arena scope) {
        return move_selected.ofAddress(move_selected$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2230.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2230.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2230.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2230.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2230.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2230.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2230.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2230.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2230.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2230.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2230.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2230.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2230.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2231.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2231.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2231.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2231.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2231.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2231.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2231.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2231.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2231.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2231.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2231.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


