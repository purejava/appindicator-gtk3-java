// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkColorChooserInterface {
 *     struct _GTypeInterface base_interface;
 *     void (*get_rgba)(struct _GtkColorChooser*,struct _GdkRGBA*);
 *     void (*set_rgba)(struct _GtkColorChooser*,struct _GdkRGBA*);
 *     void (*add_palette)(struct _GtkColorChooser*,enum GtkOrientation,int,int,struct _GdkRGBA*);
 *     void (*color_activated)(struct _GtkColorChooser*,struct _GdkRGBA*);
 *     void* padding[12];
 * };
 * }
 */
public class _GtkColorChooserInterface {

    public static MemoryLayout $LAYOUT() {
        return constants$2637.const$0;
    }
    public static MemorySegment base_interface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*get_rgba)(struct _GtkColorChooser*,struct _GdkRGBA*);
     * }
     */
    public interface get_rgba {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_rgba fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2637.const$1, fi, constants$13.const$4, scope);
        }
        static get_rgba ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_rgba$VH() {
        return constants$2637.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_rgba)(struct _GtkColorChooser*,struct _GdkRGBA*);
     * }
     */
    public static MemorySegment get_rgba$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2637.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_rgba)(struct _GtkColorChooser*,struct _GdkRGBA*);
     * }
     */
    public static void get_rgba$set(MemorySegment seg, MemorySegment x) {
        constants$2637.const$2.set(seg, x);
    }
    public static MemorySegment get_rgba$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2637.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_rgba$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2637.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_rgba get_rgba(MemorySegment segment, Arena scope) {
        return get_rgba.ofAddress(get_rgba$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_rgba)(struct _GtkColorChooser*,struct _GdkRGBA*);
     * }
     */
    public interface set_rgba {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_rgba fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2637.const$3, fi, constants$13.const$4, scope);
        }
        static set_rgba ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_rgba$VH() {
        return constants$2637.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_rgba)(struct _GtkColorChooser*,struct _GdkRGBA*);
     * }
     */
    public static MemorySegment set_rgba$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2637.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_rgba)(struct _GtkColorChooser*,struct _GdkRGBA*);
     * }
     */
    public static void set_rgba$set(MemorySegment seg, MemorySegment x) {
        constants$2637.const$4.set(seg, x);
    }
    public static MemorySegment set_rgba$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2637.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void set_rgba$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2637.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_rgba set_rgba(MemorySegment segment, Arena scope) {
        return set_rgba.ofAddress(set_rgba$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*add_palette)(struct _GtkColorChooser*,enum GtkOrientation,int,int,struct _GdkRGBA*);
     * }
     */
    public interface add_palette {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(add_palette fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2637.const$5, fi, constants$1954.const$1, scope);
        }
        static add_palette ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    constants$2018.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle add_palette$VH() {
        return constants$2638.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*add_palette)(struct _GtkColorChooser*,enum GtkOrientation,int,int,struct _GdkRGBA*);
     * }
     */
    public static MemorySegment add_palette$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2638.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*add_palette)(struct _GtkColorChooser*,enum GtkOrientation,int,int,struct _GdkRGBA*);
     * }
     */
    public static void add_palette$set(MemorySegment seg, MemorySegment x) {
        constants$2638.const$0.set(seg, x);
    }
    public static MemorySegment add_palette$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2638.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void add_palette$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2638.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static add_palette add_palette(MemorySegment segment, Arena scope) {
        return add_palette.ofAddress(add_palette$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*color_activated)(struct _GtkColorChooser*,struct _GdkRGBA*);
     * }
     */
    public interface color_activated {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(color_activated fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2638.const$1, fi, constants$13.const$4, scope);
        }
        static color_activated ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle color_activated$VH() {
        return constants$2638.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*color_activated)(struct _GtkColorChooser*,struct _GdkRGBA*);
     * }
     */
    public static MemorySegment color_activated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2638.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*color_activated)(struct _GtkColorChooser*,struct _GdkRGBA*);
     * }
     */
    public static void color_activated$set(MemorySegment seg, MemorySegment x) {
        constants$2638.const$2.set(seg, x);
    }
    public static MemorySegment color_activated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2638.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void color_activated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2638.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static color_activated color_activated(MemorySegment segment, Arena scope) {
        return color_activated.ofAddress(color_activated$get(segment), scope);
    }
    public static MemorySegment padding$slice(MemorySegment seg) {
        return seg.asSlice(48, 96);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


