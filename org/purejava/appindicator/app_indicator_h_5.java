// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
public class app_indicator_h_5 extends app_indicator_h_4 {

    public static MethodHandle g_variant_new_maybe$MH() {
        return RuntimeHelper.requireNonNull(constants$358.const$3,"g_variant_new_maybe");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_new_maybe(struct _GVariantType* child_type, struct _GVariant* child);
     * }
     */
    public static MemorySegment g_variant_new_maybe(MemorySegment child_type, MemorySegment child) {
        var mh$ = g_variant_new_maybe$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(child_type, child);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_array$MH() {
        return RuntimeHelper.requireNonNull(constants$358.const$4,"g_variant_new_array");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_new_array(struct _GVariantType* child_type, struct _GVariant** children, unsigned long n_children);
     * }
     */
    public static MemorySegment g_variant_new_array(MemorySegment child_type, MemorySegment children, long n_children) {
        var mh$ = g_variant_new_array$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(child_type, children, n_children);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_tuple$MH() {
        return RuntimeHelper.requireNonNull(constants$358.const$5,"g_variant_new_tuple");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_new_tuple(struct _GVariant** children, unsigned long n_children);
     * }
     */
    public static MemorySegment g_variant_new_tuple(MemorySegment children, long n_children) {
        var mh$ = g_variant_new_tuple$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(children, n_children);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_dict_entry$MH() {
        return RuntimeHelper.requireNonNull(constants$359.const$0,"g_variant_new_dict_entry");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_new_dict_entry(struct _GVariant* key, struct _GVariant* value);
     * }
     */
    public static MemorySegment g_variant_new_dict_entry(MemorySegment key, MemorySegment value) {
        var mh$ = g_variant_new_dict_entry$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_maybe$MH() {
        return RuntimeHelper.requireNonNull(constants$359.const$1,"g_variant_get_maybe");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_get_maybe(struct _GVariant* value);
     * }
     */
    public static MemorySegment g_variant_get_maybe(MemorySegment value) {
        var mh$ = g_variant_get_maybe$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_n_children$MH() {
        return RuntimeHelper.requireNonNull(constants$359.const$2,"g_variant_n_children");
    }
    /**
     * {@snippet :
     * unsigned long g_variant_n_children(struct _GVariant* value);
     * }
     */
    public static long g_variant_n_children(MemorySegment value) {
        var mh$ = g_variant_n_children$MH();
        try {
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_child$MH() {
        return RuntimeHelper.requireNonNull(constants$359.const$4,"g_variant_get_child");
    }
    /**
     * {@snippet :
     * void g_variant_get_child(struct _GVariant* value, unsigned long index_, char* format_string,...);
     * }
     */
    public static void g_variant_get_child(MemorySegment value, long index_, MemorySegment format_string, Object... x3) {
        var mh$ = g_variant_get_child$MH();
        try {
            mh$.invokeExact(value, index_, format_string, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_child_value$MH() {
        return RuntimeHelper.requireNonNull(constants$359.const$5,"g_variant_get_child_value");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_get_child_value(struct _GVariant* value, unsigned long index_);
     * }
     */
    public static MemorySegment g_variant_get_child_value(MemorySegment value, long index_) {
        var mh$ = g_variant_get_child_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, index_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$360.const$0,"g_variant_lookup");
    }
    /**
     * {@snippet :
     * int g_variant_lookup(struct _GVariant* dictionary, char* key, char* format_string,...);
     * }
     */
    public static int g_variant_lookup(MemorySegment dictionary, MemorySegment key, MemorySegment format_string, Object... x3) {
        var mh$ = g_variant_lookup$MH();
        try {
            return (int)mh$.invokeExact(dictionary, key, format_string, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_lookup_value$MH() {
        return RuntimeHelper.requireNonNull(constants$360.const$1,"g_variant_lookup_value");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_lookup_value(struct _GVariant* dictionary, char* key, struct _GVariantType* expected_type);
     * }
     */
    public static MemorySegment g_variant_lookup_value(MemorySegment dictionary, MemorySegment key, MemorySegment expected_type) {
        var mh$ = g_variant_lookup_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dictionary, key, expected_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_fixed_array$MH() {
        return RuntimeHelper.requireNonNull(constants$360.const$2,"g_variant_get_fixed_array");
    }
    /**
     * {@snippet :
     * void* g_variant_get_fixed_array(struct _GVariant* value, unsigned long* n_elements, unsigned long element_size);
     * }
     */
    public static MemorySegment g_variant_get_fixed_array(MemorySegment value, MemorySegment n_elements, long element_size) {
        var mh$ = g_variant_get_fixed_array$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, n_elements, element_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$360.const$3,"g_variant_get_size");
    }
    /**
     * {@snippet :
     * unsigned long g_variant_get_size(struct _GVariant* value);
     * }
     */
    public static long g_variant_get_size(MemorySegment value) {
        var mh$ = g_variant_get_size$MH();
        try {
            return (long)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_data$MH() {
        return RuntimeHelper.requireNonNull(constants$360.const$4,"g_variant_get_data");
    }
    /**
     * {@snippet :
     * void* g_variant_get_data(struct _GVariant* value);
     * }
     */
    public static MemorySegment g_variant_get_data(MemorySegment value) {
        var mh$ = g_variant_get_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_data_as_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$360.const$5,"g_variant_get_data_as_bytes");
    }
    /**
     * {@snippet :
     * struct _GBytes* g_variant_get_data_as_bytes(struct _GVariant* value);
     * }
     */
    public static MemorySegment g_variant_get_data_as_bytes(MemorySegment value) {
        var mh$ = g_variant_get_data_as_bytes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_store$MH() {
        return RuntimeHelper.requireNonNull(constants$361.const$0,"g_variant_store");
    }
    /**
     * {@snippet :
     * void g_variant_store(struct _GVariant* value, void* data);
     * }
     */
    public static void g_variant_store(MemorySegment value, MemorySegment data) {
        var mh$ = g_variant_store$MH();
        try {
            mh$.invokeExact(value, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_print$MH() {
        return RuntimeHelper.requireNonNull(constants$361.const$1,"g_variant_print");
    }
    /**
     * {@snippet :
     * char* g_variant_print(struct _GVariant* value, int type_annotate);
     * }
     */
    public static MemorySegment g_variant_print(MemorySegment value, int type_annotate) {
        var mh$ = g_variant_print$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, type_annotate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_print_string$MH() {
        return RuntimeHelper.requireNonNull(constants$361.const$2,"g_variant_print_string");
    }
    /**
     * {@snippet :
     * struct _GString* g_variant_print_string(struct _GVariant* value, struct _GString* string, int type_annotate);
     * }
     */
    public static MemorySegment g_variant_print_string(MemorySegment value, MemorySegment string, int type_annotate) {
        var mh$ = g_variant_print_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value, string, type_annotate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_hash$MH() {
        return RuntimeHelper.requireNonNull(constants$361.const$3,"g_variant_hash");
    }
    /**
     * {@snippet :
     * unsigned int g_variant_hash(void* value);
     * }
     */
    public static int g_variant_hash(MemorySegment value) {
        var mh$ = g_variant_hash$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$361.const$4,"g_variant_equal");
    }
    /**
     * {@snippet :
     * int g_variant_equal(void* one, void* two);
     * }
     */
    public static int g_variant_equal(MemorySegment one, MemorySegment two) {
        var mh$ = g_variant_equal$MH();
        try {
            return (int)mh$.invokeExact(one, two);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_normal_form$MH() {
        return RuntimeHelper.requireNonNull(constants$361.const$5,"g_variant_get_normal_form");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_get_normal_form(struct _GVariant* value);
     * }
     */
    public static MemorySegment g_variant_get_normal_form(MemorySegment value) {
        var mh$ = g_variant_get_normal_form$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_is_normal_form$MH() {
        return RuntimeHelper.requireNonNull(constants$362.const$0,"g_variant_is_normal_form");
    }
    /**
     * {@snippet :
     * int g_variant_is_normal_form(struct _GVariant* value);
     * }
     */
    public static int g_variant_is_normal_form(MemorySegment value) {
        var mh$ = g_variant_is_normal_form$MH();
        try {
            return (int)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_byteswap$MH() {
        return RuntimeHelper.requireNonNull(constants$362.const$1,"g_variant_byteswap");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_byteswap(struct _GVariant* value);
     * }
     */
    public static MemorySegment g_variant_byteswap(MemorySegment value) {
        var mh$ = g_variant_byteswap$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_from_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$362.const$2,"g_variant_new_from_bytes");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_new_from_bytes(struct _GVariantType* type, struct _GBytes* bytes, int trusted);
     * }
     */
    public static MemorySegment g_variant_new_from_bytes(MemorySegment type, MemorySegment bytes, int trusted) {
        var mh$ = g_variant_new_from_bytes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type, bytes, trusted);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_from_data$MH() {
        return RuntimeHelper.requireNonNull(constants$362.const$5,"g_variant_new_from_data");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_new_from_data(struct _GVariantType* type, void* data, unsigned long size, int trusted, void (*notify)(void*), void* user_data);
     * }
     */
    public static MemorySegment g_variant_new_from_data(MemorySegment type, MemorySegment data, long size, int trusted, MemorySegment notify, MemorySegment user_data) {
        var mh$ = g_variant_new_from_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type, data, size, trusted, notify, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_new$MH() {
        return RuntimeHelper.requireNonNull(constants$363.const$1,"g_variant_iter_new");
    }
    /**
     * {@snippet :
     * struct _GVariantIter* g_variant_iter_new(struct _GVariant* value);
     * }
     */
    public static MemorySegment g_variant_iter_new(MemorySegment value) {
        var mh$ = g_variant_iter_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_init$MH() {
        return RuntimeHelper.requireNonNull(constants$363.const$2,"g_variant_iter_init");
    }
    /**
     * {@snippet :
     * unsigned long g_variant_iter_init(struct _GVariantIter* iter, struct _GVariant* value);
     * }
     */
    public static long g_variant_iter_init(MemorySegment iter, MemorySegment value) {
        var mh$ = g_variant_iter_init$MH();
        try {
            return (long)mh$.invokeExact(iter, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$363.const$3,"g_variant_iter_copy");
    }
    /**
     * {@snippet :
     * struct _GVariantIter* g_variant_iter_copy(struct _GVariantIter* iter);
     * }
     */
    public static MemorySegment g_variant_iter_copy(MemorySegment iter) {
        var mh$ = g_variant_iter_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_n_children$MH() {
        return RuntimeHelper.requireNonNull(constants$363.const$4,"g_variant_iter_n_children");
    }
    /**
     * {@snippet :
     * unsigned long g_variant_iter_n_children(struct _GVariantIter* iter);
     * }
     */
    public static long g_variant_iter_n_children(MemorySegment iter) {
        var mh$ = g_variant_iter_n_children$MH();
        try {
            return (long)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_free$MH() {
        return RuntimeHelper.requireNonNull(constants$363.const$5,"g_variant_iter_free");
    }
    /**
     * {@snippet :
     * void g_variant_iter_free(struct _GVariantIter* iter);
     * }
     */
    public static void g_variant_iter_free(MemorySegment iter) {
        var mh$ = g_variant_iter_free$MH();
        try {
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_next_value$MH() {
        return RuntimeHelper.requireNonNull(constants$364.const$0,"g_variant_iter_next_value");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_iter_next_value(struct _GVariantIter* iter);
     * }
     */
    public static MemorySegment g_variant_iter_next_value(MemorySegment iter) {
        var mh$ = g_variant_iter_next_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_next$MH() {
        return RuntimeHelper.requireNonNull(constants$364.const$1,"g_variant_iter_next");
    }
    /**
     * {@snippet :
     * int g_variant_iter_next(struct _GVariantIter* iter, char* format_string,...);
     * }
     */
    public static int g_variant_iter_next(MemorySegment iter, MemorySegment format_string, Object... x2) {
        var mh$ = g_variant_iter_next$MH();
        try {
            return (int)mh$.invokeExact(iter, format_string, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_iter_loop$MH() {
        return RuntimeHelper.requireNonNull(constants$364.const$2,"g_variant_iter_loop");
    }
    /**
     * {@snippet :
     * int g_variant_iter_loop(struct _GVariantIter* iter, char* format_string,...);
     * }
     */
    public static int g_variant_iter_loop(MemorySegment iter, MemorySegment format_string, Object... x2) {
        var mh$ = g_variant_iter_loop$MH();
        try {
            return (int)mh$.invokeExact(iter, format_string, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_FAILED = 0;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_FAILED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED = 1;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_BASIC_TYPE_EXPECTED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE = 2;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_CANNOT_INFER_TYPE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED = 3;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_DEFINITE_TYPE_EXPECTED() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END = 4;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INPUT_NOT_AT_END() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_INVALID_CHARACTER = 5;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INVALID_CHARACTER() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING = 6;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INVALID_FORMAT_STRING() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH = 7;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INVALID_OBJECT_PATH() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE = 8;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INVALID_SIGNATURE() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING = 9;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_INVALID_TYPE_STRING() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE = 10;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_NO_COMMON_TYPE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE = 11;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_NUMBER_OUT_OF_RANGE() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG = 12;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_NUMBER_TOO_BIG() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_TYPE_ERROR = 13;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_TYPE_ERROR() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN = 14;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_UNEXPECTED_TOKEN() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD = 15;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_UNKNOWN_KEYWORD() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT = 16;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_UNTERMINATED_STRING_CONSTANT() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_VALUE_EXPECTED = 17;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_VALUE_EXPECTED() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum GVariantParseError.G_VARIANT_PARSE_ERROR_RECURSION = 18;
     * }
     */
    public static int G_VARIANT_PARSE_ERROR_RECURSION() {
        return (int)18L;
    }
    public static MethodHandle g_variant_parser_get_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$365.const$2,"g_variant_parser_get_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_variant_parser_get_error_quark();
     * }
     */
    public static int g_variant_parser_get_error_quark() {
        var mh$ = g_variant_parser_get_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_parse_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$365.const$3,"g_variant_parse_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_variant_parse_error_quark();
     * }
     */
    public static int g_variant_parse_error_quark() {
        var mh$ = g_variant_parse_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_new$MH() {
        return RuntimeHelper.requireNonNull(constants$365.const$4,"g_variant_builder_new");
    }
    /**
     * {@snippet :
     * struct _GVariantBuilder* g_variant_builder_new(struct _GVariantType* type);
     * }
     */
    public static MemorySegment g_variant_builder_new(MemorySegment type) {
        var mh$ = g_variant_builder_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$365.const$5,"g_variant_builder_unref");
    }
    /**
     * {@snippet :
     * void g_variant_builder_unref(struct _GVariantBuilder* builder);
     * }
     */
    public static void g_variant_builder_unref(MemorySegment builder) {
        var mh$ = g_variant_builder_unref$MH();
        try {
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$366.const$0,"g_variant_builder_ref");
    }
    /**
     * {@snippet :
     * struct _GVariantBuilder* g_variant_builder_ref(struct _GVariantBuilder* builder);
     * }
     */
    public static MemorySegment g_variant_builder_ref(MemorySegment builder) {
        var mh$ = g_variant_builder_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_init$MH() {
        return RuntimeHelper.requireNonNull(constants$366.const$1,"g_variant_builder_init");
    }
    /**
     * {@snippet :
     * void g_variant_builder_init(struct _GVariantBuilder* builder, struct _GVariantType* type);
     * }
     */
    public static void g_variant_builder_init(MemorySegment builder, MemorySegment type) {
        var mh$ = g_variant_builder_init$MH();
        try {
            mh$.invokeExact(builder, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_end$MH() {
        return RuntimeHelper.requireNonNull(constants$366.const$2,"g_variant_builder_end");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_builder_end(struct _GVariantBuilder* builder);
     * }
     */
    public static MemorySegment g_variant_builder_end(MemorySegment builder) {
        var mh$ = g_variant_builder_end$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$366.const$3,"g_variant_builder_clear");
    }
    /**
     * {@snippet :
     * void g_variant_builder_clear(struct _GVariantBuilder* builder);
     * }
     */
    public static void g_variant_builder_clear(MemorySegment builder) {
        var mh$ = g_variant_builder_clear$MH();
        try {
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_open$MH() {
        return RuntimeHelper.requireNonNull(constants$366.const$4,"g_variant_builder_open");
    }
    /**
     * {@snippet :
     * void g_variant_builder_open(struct _GVariantBuilder* builder, struct _GVariantType* type);
     * }
     */
    public static void g_variant_builder_open(MemorySegment builder, MemorySegment type) {
        var mh$ = g_variant_builder_open$MH();
        try {
            mh$.invokeExact(builder, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_close$MH() {
        return RuntimeHelper.requireNonNull(constants$366.const$5,"g_variant_builder_close");
    }
    /**
     * {@snippet :
     * void g_variant_builder_close(struct _GVariantBuilder* builder);
     * }
     */
    public static void g_variant_builder_close(MemorySegment builder) {
        var mh$ = g_variant_builder_close$MH();
        try {
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_add_value$MH() {
        return RuntimeHelper.requireNonNull(constants$367.const$0,"g_variant_builder_add_value");
    }
    /**
     * {@snippet :
     * void g_variant_builder_add_value(struct _GVariantBuilder* builder, struct _GVariant* value);
     * }
     */
    public static void g_variant_builder_add_value(MemorySegment builder, MemorySegment value) {
        var mh$ = g_variant_builder_add_value$MH();
        try {
            mh$.invokeExact(builder, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_add$MH() {
        return RuntimeHelper.requireNonNull(constants$367.const$1,"g_variant_builder_add");
    }
    /**
     * {@snippet :
     * void g_variant_builder_add(struct _GVariantBuilder* builder, char* format_string,...);
     * }
     */
    public static void g_variant_builder_add(MemorySegment builder, MemorySegment format_string, Object... x2) {
        var mh$ = g_variant_builder_add$MH();
        try {
            mh$.invokeExact(builder, format_string, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_builder_add_parsed$MH() {
        return RuntimeHelper.requireNonNull(constants$367.const$2,"g_variant_builder_add_parsed");
    }
    /**
     * {@snippet :
     * void g_variant_builder_add_parsed(struct _GVariantBuilder* builder, char* format,...);
     * }
     */
    public static void g_variant_builder_add_parsed(MemorySegment builder, MemorySegment format, Object... x2) {
        var mh$ = g_variant_builder_add_parsed$MH();
        try {
            mh$.invokeExact(builder, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new$MH() {
        return RuntimeHelper.requireNonNull(constants$367.const$3,"g_variant_new");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_new(char* format_string,...);
     * }
     */
    public static MemorySegment g_variant_new(MemorySegment format_string, Object... x1) {
        var mh$ = g_variant_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(format_string, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get$MH() {
        return RuntimeHelper.requireNonNull(constants$367.const$4,"g_variant_get");
    }
    /**
     * {@snippet :
     * void g_variant_get(struct _GVariant* value, char* format_string,...);
     * }
     */
    public static void g_variant_get(MemorySegment value, MemorySegment format_string, Object... x2) {
        var mh$ = g_variant_get$MH();
        try {
            mh$.invokeExact(value, format_string, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_va$MH() {
        return RuntimeHelper.requireNonNull(constants$367.const$5,"g_variant_new_va");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_new_va(char* format_string, char** endptr, struct __va_list* app);
     * }
     */
    public static MemorySegment g_variant_new_va(MemorySegment format_string, MemorySegment endptr, MemorySegment app) {
        var mh$ = g_variant_new_va$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(format_string, endptr, app);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_get_va$MH() {
        return RuntimeHelper.requireNonNull(constants$368.const$0,"g_variant_get_va");
    }
    /**
     * {@snippet :
     * void g_variant_get_va(struct _GVariant* value, char* format_string, char** endptr, struct __va_list* app);
     * }
     */
    public static void g_variant_get_va(MemorySegment value, MemorySegment format_string, MemorySegment endptr, MemorySegment app) {
        var mh$ = g_variant_get_va$MH();
        try {
            mh$.invokeExact(value, format_string, endptr, app);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_check_format_string$MH() {
        return RuntimeHelper.requireNonNull(constants$368.const$1,"g_variant_check_format_string");
    }
    /**
     * {@snippet :
     * int g_variant_check_format_string(struct _GVariant* value, char* format_string, int copy_only);
     * }
     */
    public static int g_variant_check_format_string(MemorySegment value, MemorySegment format_string, int copy_only) {
        var mh$ = g_variant_check_format_string$MH();
        try {
            return (int)mh$.invokeExact(value, format_string, copy_only);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$368.const$2,"g_variant_parse");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_parse(struct _GVariantType* type, char* text, char* limit, char** endptr, struct _GError** error);
     * }
     */
    public static MemorySegment g_variant_parse(MemorySegment type, MemorySegment text, MemorySegment limit, MemorySegment endptr, MemorySegment error) {
        var mh$ = g_variant_parse$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(type, text, limit, endptr, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_parsed$MH() {
        return RuntimeHelper.requireNonNull(constants$368.const$3,"g_variant_new_parsed");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_new_parsed(char* format,...);
     * }
     */
    public static MemorySegment g_variant_new_parsed(MemorySegment format, Object... x1) {
        var mh$ = g_variant_new_parsed$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_new_parsed_va$MH() {
        return RuntimeHelper.requireNonNull(constants$368.const$4,"g_variant_new_parsed_va");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_new_parsed_va(char* format, struct __va_list* app);
     * }
     */
    public static MemorySegment g_variant_new_parsed_va(MemorySegment format, MemorySegment app) {
        var mh$ = g_variant_new_parsed_va$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(format, app);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_parse_error_print_context$MH() {
        return RuntimeHelper.requireNonNull(constants$368.const$5,"g_variant_parse_error_print_context");
    }
    /**
     * {@snippet :
     * char* g_variant_parse_error_print_context(struct _GError* error, char* source_str);
     * }
     */
    public static MemorySegment g_variant_parse_error_print_context(MemorySegment error, MemorySegment source_str) {
        var mh$ = g_variant_parse_error_print_context$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(error, source_str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$369.const$0,"g_variant_compare");
    }
    /**
     * {@snippet :
     * int g_variant_compare(void* one, void* two);
     * }
     */
    public static int g_variant_compare(MemorySegment one, MemorySegment two) {
        var mh$ = g_variant_compare$MH();
        try {
            return (int)mh$.invokeExact(one, two);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_new$MH() {
        return RuntimeHelper.requireNonNull(constants$370.const$0,"g_variant_dict_new");
    }
    /**
     * {@snippet :
     * struct _GVariantDict* g_variant_dict_new(struct _GVariant* from_asv);
     * }
     */
    public static MemorySegment g_variant_dict_new(MemorySegment from_asv) {
        var mh$ = g_variant_dict_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(from_asv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_init$MH() {
        return RuntimeHelper.requireNonNull(constants$370.const$1,"g_variant_dict_init");
    }
    /**
     * {@snippet :
     * void g_variant_dict_init(struct _GVariantDict* dict, struct _GVariant* from_asv);
     * }
     */
    public static void g_variant_dict_init(MemorySegment dict, MemorySegment from_asv) {
        var mh$ = g_variant_dict_init$MH();
        try {
            mh$.invokeExact(dict, from_asv);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$370.const$2,"g_variant_dict_lookup");
    }
    /**
     * {@snippet :
     * int g_variant_dict_lookup(struct _GVariantDict* dict, char* key, char* format_string,...);
     * }
     */
    public static int g_variant_dict_lookup(MemorySegment dict, MemorySegment key, MemorySegment format_string, Object... x3) {
        var mh$ = g_variant_dict_lookup$MH();
        try {
            return (int)mh$.invokeExact(dict, key, format_string, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_lookup_value$MH() {
        return RuntimeHelper.requireNonNull(constants$370.const$3,"g_variant_dict_lookup_value");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_dict_lookup_value(struct _GVariantDict* dict, char* key, struct _GVariantType* expected_type);
     * }
     */
    public static MemorySegment g_variant_dict_lookup_value(MemorySegment dict, MemorySegment key, MemorySegment expected_type) {
        var mh$ = g_variant_dict_lookup_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dict, key, expected_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_contains$MH() {
        return RuntimeHelper.requireNonNull(constants$370.const$4,"g_variant_dict_contains");
    }
    /**
     * {@snippet :
     * int g_variant_dict_contains(struct _GVariantDict* dict, char* key);
     * }
     */
    public static int g_variant_dict_contains(MemorySegment dict, MemorySegment key) {
        var mh$ = g_variant_dict_contains$MH();
        try {
            return (int)mh$.invokeExact(dict, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$370.const$5,"g_variant_dict_insert");
    }
    /**
     * {@snippet :
     * void g_variant_dict_insert(struct _GVariantDict* dict, char* key, char* format_string,...);
     * }
     */
    public static void g_variant_dict_insert(MemorySegment dict, MemorySegment key, MemorySegment format_string, Object... x3) {
        var mh$ = g_variant_dict_insert$MH();
        try {
            mh$.invokeExact(dict, key, format_string, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_insert_value$MH() {
        return RuntimeHelper.requireNonNull(constants$371.const$0,"g_variant_dict_insert_value");
    }
    /**
     * {@snippet :
     * void g_variant_dict_insert_value(struct _GVariantDict* dict, char* key, struct _GVariant* value);
     * }
     */
    public static void g_variant_dict_insert_value(MemorySegment dict, MemorySegment key, MemorySegment value) {
        var mh$ = g_variant_dict_insert_value$MH();
        try {
            mh$.invokeExact(dict, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$371.const$1,"g_variant_dict_remove");
    }
    /**
     * {@snippet :
     * int g_variant_dict_remove(struct _GVariantDict* dict, char* key);
     * }
     */
    public static int g_variant_dict_remove(MemorySegment dict, MemorySegment key) {
        var mh$ = g_variant_dict_remove$MH();
        try {
            return (int)mh$.invokeExact(dict, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$371.const$2,"g_variant_dict_clear");
    }
    /**
     * {@snippet :
     * void g_variant_dict_clear(struct _GVariantDict* dict);
     * }
     */
    public static void g_variant_dict_clear(MemorySegment dict) {
        var mh$ = g_variant_dict_clear$MH();
        try {
            mh$.invokeExact(dict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_end$MH() {
        return RuntimeHelper.requireNonNull(constants$371.const$3,"g_variant_dict_end");
    }
    /**
     * {@snippet :
     * struct _GVariant* g_variant_dict_end(struct _GVariantDict* dict);
     * }
     */
    public static MemorySegment g_variant_dict_end(MemorySegment dict) {
        var mh$ = g_variant_dict_end$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$371.const$4,"g_variant_dict_ref");
    }
    /**
     * {@snippet :
     * struct _GVariantDict* g_variant_dict_ref(struct _GVariantDict* dict);
     * }
     */
    public static MemorySegment g_variant_dict_ref(MemorySegment dict) {
        var mh$ = g_variant_dict_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(dict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_variant_dict_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$371.const$5,"g_variant_dict_unref");
    }
    /**
     * {@snippet :
     * void g_variant_dict_unref(struct _GVariantDict* dict);
     * }
     */
    public static void g_variant_dict_unref(MemorySegment dict) {
        var mh$ = g_variant_dict_unref$MH();
        try {
            mh$.invokeExact(dict);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_printf_string_upper_bound$MH() {
        return RuntimeHelper.requireNonNull(constants$372.const$1,"g_printf_string_upper_bound");
    }
    /**
     * {@snippet :
     * unsigned long g_printf_string_upper_bound(char* format, struct __va_list args);
     * }
     */
    public static long g_printf_string_upper_bound(MemorySegment format, MemorySegment args) {
        var mh$ = g_printf_string_upper_bound$MH();
        try {
            return (long)mh$.invokeExact(format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags.G_LOG_FLAG_RECURSION = 1;
     * }
     */
    public static int G_LOG_FLAG_RECURSION() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags.G_LOG_FLAG_FATAL = 2;
     * }
     */
    public static int G_LOG_FLAG_FATAL() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags.G_LOG_LEVEL_ERROR = 4;
     * }
     */
    public static int G_LOG_LEVEL_ERROR() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags.G_LOG_LEVEL_CRITICAL = 8;
     * }
     */
    public static int G_LOG_LEVEL_CRITICAL() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags.G_LOG_LEVEL_WARNING = 16;
     * }
     */
    public static int G_LOG_LEVEL_WARNING() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags.G_LOG_LEVEL_MESSAGE = 32;
     * }
     */
    public static int G_LOG_LEVEL_MESSAGE() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags.G_LOG_LEVEL_INFO = 64;
     * }
     */
    public static int G_LOG_LEVEL_INFO() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags.G_LOG_LEVEL_DEBUG = 128;
     * }
     */
    public static int G_LOG_LEVEL_DEBUG() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags.G_LOG_LEVEL_MASK = -4;
     * }
     */
    public static int G_LOG_LEVEL_MASK() {
        return (int)-4L;
    }
    public static MethodHandle g_log_set_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$372.const$5,"g_log_set_handler");
    }
    /**
     * {@snippet :
     * unsigned int g_log_set_handler(char* log_domain, enum GLogLevelFlags log_levels, void (*log_func)(char*,enum GLogLevelFlags,char*,void*), void* user_data);
     * }
     */
    public static int g_log_set_handler(MemorySegment log_domain, int log_levels, MemorySegment log_func, MemorySegment user_data) {
        var mh$ = g_log_set_handler$MH();
        try {
            return (int)mh$.invokeExact(log_domain, log_levels, log_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_handler_full$MH() {
        return RuntimeHelper.requireNonNull(constants$373.const$3,"g_log_set_handler_full");
    }
    /**
     * {@snippet :
     * unsigned int g_log_set_handler_full(char* log_domain, enum GLogLevelFlags log_levels, void (*log_func)(char*,enum GLogLevelFlags,char*,void*), void* user_data, void (*destroy)(void*));
     * }
     */
    public static int g_log_set_handler_full(MemorySegment log_domain, int log_levels, MemorySegment log_func, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = g_log_set_handler_full$MH();
        try {
            return (int)mh$.invokeExact(log_domain, log_levels, log_func, user_data, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_remove_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$373.const$4,"g_log_remove_handler");
    }
    /**
     * {@snippet :
     * void g_log_remove_handler(char* log_domain, unsigned int handler_id);
     * }
     */
    public static void g_log_remove_handler(MemorySegment log_domain, int handler_id) {
        var mh$ = g_log_remove_handler$MH();
        try {
            mh$.invokeExact(log_domain, handler_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_default_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$373.const$5,"g_log_default_handler");
    }
    /**
     * {@snippet :
     * void g_log_default_handler(char* log_domain, enum GLogLevelFlags log_level, char* message, void* unused_data);
     * }
     */
    public static void g_log_default_handler(MemorySegment log_domain, int log_level, MemorySegment message, MemorySegment unused_data) {
        var mh$ = g_log_default_handler$MH();
        try {
            mh$.invokeExact(log_domain, log_level, message, unused_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_default_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$374.const$2,"g_log_set_default_handler");
    }
    /**
     * {@snippet :
     * void (*g_log_set_default_handler(void (*log_func)(char*,enum GLogLevelFlags,char*,void*), void* user_data))(char*,enum GLogLevelFlags,char*,void*);
     * }
     */
    public static MemorySegment g_log_set_default_handler(MemorySegment log_func, MemorySegment user_data) {
        var mh$ = g_log_set_default_handler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(log_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log$MH() {
        return RuntimeHelper.requireNonNull(constants$374.const$3,"g_log");
    }
    /**
     * {@snippet :
     * void g_log(char* log_domain, enum GLogLevelFlags log_level, char* format,...);
     * }
     */
    public static void g_log(MemorySegment log_domain, int log_level, MemorySegment format, Object... x3) {
        var mh$ = g_log$MH();
        try {
            mh$.invokeExact(log_domain, log_level, format, x3);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_logv$MH() {
        return RuntimeHelper.requireNonNull(constants$374.const$5,"g_logv");
    }
    /**
     * {@snippet :
     * void g_logv(char* log_domain, enum GLogLevelFlags log_level, char* format, struct __va_list args);
     * }
     */
    public static void g_logv(MemorySegment log_domain, int log_level, MemorySegment format, MemorySegment args) {
        var mh$ = g_logv$MH();
        try {
            mh$.invokeExact(log_domain, log_level, format, args);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_fatal_mask$MH() {
        return RuntimeHelper.requireNonNull(constants$375.const$0,"g_log_set_fatal_mask");
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags g_log_set_fatal_mask(char* log_domain, enum GLogLevelFlags fatal_mask);
     * }
     */
    public static int g_log_set_fatal_mask(MemorySegment log_domain, int fatal_mask) {
        var mh$ = g_log_set_fatal_mask$MH();
        try {
            return (int)mh$.invokeExact(log_domain, fatal_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_always_fatal$MH() {
        return RuntimeHelper.requireNonNull(constants$375.const$1,"g_log_set_always_fatal");
    }
    /**
     * {@snippet :
     * enum GLogLevelFlags g_log_set_always_fatal(enum GLogLevelFlags fatal_mask);
     * }
     */
    public static int g_log_set_always_fatal(int fatal_mask) {
        var mh$ = g_log_set_always_fatal$MH();
        try {
            return (int)mh$.invokeExact(fatal_mask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GLogWriterOutput.G_LOG_WRITER_HANDLED = 1;
     * }
     */
    public static int G_LOG_WRITER_HANDLED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GLogWriterOutput.G_LOG_WRITER_UNHANDLED = 0;
     * }
     */
    public static int G_LOG_WRITER_UNHANDLED() {
        return (int)0L;
    }
    public static MethodHandle g_log_structured$MH() {
        return RuntimeHelper.requireNonNull(constants$376.const$2,"g_log_structured");
    }
    /**
     * {@snippet :
     * void g_log_structured(char* log_domain, enum GLogLevelFlags log_level,...);
     * }
     */
    public static void g_log_structured(MemorySegment log_domain, int log_level, Object... x2) {
        var mh$ = g_log_structured$MH();
        try {
            mh$.invokeExact(log_domain, log_level, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_structured_array$MH() {
        return RuntimeHelper.requireNonNull(constants$376.const$4,"g_log_structured_array");
    }
    /**
     * {@snippet :
     * void g_log_structured_array(enum GLogLevelFlags log_level, struct _GLogField* fields, unsigned long n_fields);
     * }
     */
    public static void g_log_structured_array(int log_level, MemorySegment fields, long n_fields) {
        var mh$ = g_log_structured_array$MH();
        try {
            mh$.invokeExact(log_level, fields, n_fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_variant$MH() {
        return RuntimeHelper.requireNonNull(constants$376.const$5,"g_log_variant");
    }
    /**
     * {@snippet :
     * void g_log_variant(char* log_domain, enum GLogLevelFlags log_level, struct _GVariant* fields);
     * }
     */
    public static void g_log_variant(MemorySegment log_domain, int log_level, MemorySegment fields) {
        var mh$ = g_log_variant$MH();
        try {
            mh$.invokeExact(log_domain, log_level, fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_writer_func$MH() {
        return RuntimeHelper.requireNonNull(constants$377.const$2,"g_log_set_writer_func");
    }
    /**
     * {@snippet :
     * void g_log_set_writer_func(enum GLogWriterOutput (*func)(enum GLogLevelFlags,struct _GLogField*,unsigned long,void*), void* user_data, void (*user_data_free)(void*));
     * }
     */
    public static void g_log_set_writer_func(MemorySegment func, MemorySegment user_data, MemorySegment user_data_free) {
        var mh$ = g_log_set_writer_func$MH();
        try {
            mh$.invokeExact(func, user_data, user_data_free);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_supports_color$MH() {
        return RuntimeHelper.requireNonNull(constants$377.const$3,"g_log_writer_supports_color");
    }
    /**
     * {@snippet :
     * int g_log_writer_supports_color(int output_fd);
     * }
     */
    public static int g_log_writer_supports_color(int output_fd) {
        var mh$ = g_log_writer_supports_color$MH();
        try {
            return (int)mh$.invokeExact(output_fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_is_journald$MH() {
        return RuntimeHelper.requireNonNull(constants$377.const$4,"g_log_writer_is_journald");
    }
    /**
     * {@snippet :
     * int g_log_writer_is_journald(int output_fd);
     * }
     */
    public static int g_log_writer_is_journald(int output_fd) {
        var mh$ = g_log_writer_is_journald$MH();
        try {
            return (int)mh$.invokeExact(output_fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_format_fields$MH() {
        return RuntimeHelper.requireNonNull(constants$377.const$6,"g_log_writer_format_fields");
    }
    /**
     * {@snippet :
     * char* g_log_writer_format_fields(enum GLogLevelFlags log_level, struct _GLogField* fields, unsigned long n_fields, int use_color);
     * }
     */
    public static MemorySegment g_log_writer_format_fields(int log_level, MemorySegment fields, long n_fields, int use_color) {
        var mh$ = g_log_writer_format_fields$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(log_level, fields, n_fields, use_color);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_journald$MH() {
        return RuntimeHelper.requireNonNull(constants$378.const$0,"g_log_writer_journald");
    }
    /**
     * {@snippet :
     * enum GLogWriterOutput g_log_writer_journald(enum GLogLevelFlags log_level, struct _GLogField* fields, unsigned long n_fields, void* user_data);
     * }
     */
    public static int g_log_writer_journald(int log_level, MemorySegment fields, long n_fields, MemorySegment user_data) {
        var mh$ = g_log_writer_journald$MH();
        try {
            return (int)mh$.invokeExact(log_level, fields, n_fields, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_standard_streams$MH() {
        return RuntimeHelper.requireNonNull(constants$378.const$1,"g_log_writer_standard_streams");
    }
    /**
     * {@snippet :
     * enum GLogWriterOutput g_log_writer_standard_streams(enum GLogLevelFlags log_level, struct _GLogField* fields, unsigned long n_fields, void* user_data);
     * }
     */
    public static int g_log_writer_standard_streams(int log_level, MemorySegment fields, long n_fields, MemorySegment user_data) {
        var mh$ = g_log_writer_standard_streams$MH();
        try {
            return (int)mh$.invokeExact(log_level, fields, n_fields, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_default$MH() {
        return RuntimeHelper.requireNonNull(constants$378.const$2,"g_log_writer_default");
    }
    /**
     * {@snippet :
     * enum GLogWriterOutput g_log_writer_default(enum GLogLevelFlags log_level, struct _GLogField* fields, unsigned long n_fields, void* user_data);
     * }
     */
    public static int g_log_writer_default(int log_level, MemorySegment fields, long n_fields, MemorySegment user_data) {
        var mh$ = g_log_writer_default$MH();
        try {
            return (int)mh$.invokeExact(log_level, fields, n_fields, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_default_set_use_stderr$MH() {
        return RuntimeHelper.requireNonNull(constants$378.const$3,"g_log_writer_default_set_use_stderr");
    }
    /**
     * {@snippet :
     * void g_log_writer_default_set_use_stderr(int use_stderr);
     * }
     */
    public static void g_log_writer_default_set_use_stderr(int use_stderr) {
        var mh$ = g_log_writer_default_set_use_stderr$MH();
        try {
            mh$.invokeExact(use_stderr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_writer_default_would_drop$MH() {
        return RuntimeHelper.requireNonNull(constants$378.const$4,"g_log_writer_default_would_drop");
    }
    /**
     * {@snippet :
     * int g_log_writer_default_would_drop(enum GLogLevelFlags log_level, char* log_domain);
     * }
     */
    public static int g_log_writer_default_would_drop(int log_level, MemorySegment log_domain) {
        var mh$ = g_log_writer_default_would_drop$MH();
        try {
            return (int)mh$.invokeExact(log_level, log_domain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_get_debug_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$378.const$5,"g_log_get_debug_enabled");
    }
    /**
     * {@snippet :
     * int g_log_get_debug_enabled();
     * }
     */
    public static int g_log_get_debug_enabled() {
        var mh$ = g_log_get_debug_enabled$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_set_debug_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$379.const$0,"g_log_set_debug_enabled");
    }
    /**
     * {@snippet :
     * void g_log_set_debug_enabled(int enabled);
     * }
     */
    public static void g_log_set_debug_enabled(int enabled) {
        var mh$ = g_log_set_debug_enabled$MH();
        try {
            mh$.invokeExact(enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle _g_log_fallback_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$379.const$1,"_g_log_fallback_handler");
    }
    /**
     * {@snippet :
     * void _g_log_fallback_handler(char* log_domain, enum GLogLevelFlags log_level, char* message, void* unused_data);
     * }
     */
    public static void _g_log_fallback_handler(MemorySegment log_domain, int log_level, MemorySegment message, MemorySegment unused_data) {
        var mh$ = _g_log_fallback_handler$MH();
        try {
            mh$.invokeExact(log_domain, log_level, message, unused_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_return_if_fail_warning$MH() {
        return RuntimeHelper.requireNonNull(constants$379.const$2,"g_return_if_fail_warning");
    }
    /**
     * {@snippet :
     * void g_return_if_fail_warning(char* log_domain, char* pretty_function, char* expression);
     * }
     */
    public static void g_return_if_fail_warning(MemorySegment log_domain, MemorySegment pretty_function, MemorySegment expression) {
        var mh$ = g_return_if_fail_warning$MH();
        try {
            mh$.invokeExact(log_domain, pretty_function, expression);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_warn_message$MH() {
        return RuntimeHelper.requireNonNull(constants$379.const$4,"g_warn_message");
    }
    /**
     * {@snippet :
     * void g_warn_message(char* domain, char* file, int line, char* func, char* warnexpr);
     * }
     */
    public static void g_warn_message(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment warnexpr) {
        var mh$ = g_warn_message$MH();
        try {
            mh$.invokeExact(domain, file, line, func, warnexpr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assert_warning$MH() {
        return RuntimeHelper.requireNonNull(constants$379.const$5,"g_assert_warning");
    }
    /**
     * {@snippet :
     * void g_assert_warning(char* log_domain, char* file, int line, char* pretty_function, char* expression);
     * }
     */
    public static void g_assert_warning(MemorySegment log_domain, MemorySegment file, int line, MemorySegment pretty_function, MemorySegment expression) {
        var mh$ = g_assert_warning$MH();
        try {
            mh$.invokeExact(log_domain, file, line, pretty_function, expression);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_log_structured_standard$MH() {
        return RuntimeHelper.requireNonNull(constants$380.const$1,"g_log_structured_standard");
    }
    /**
     * {@snippet :
     * void g_log_structured_standard(char* log_domain, enum GLogLevelFlags log_level, char* file, char* line, char* func, char* message_format,...);
     * }
     */
    public static void g_log_structured_standard(MemorySegment log_domain, int log_level, MemorySegment file, MemorySegment line, MemorySegment func, MemorySegment message_format, Object... x6) {
        var mh$ = g_log_structured_standard$MH();
        try {
            mh$.invokeExact(log_domain, log_level, file, line, func, message_format, x6);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_print$MH() {
        return RuntimeHelper.requireNonNull(constants$380.const$3,"g_print");
    }
    /**
     * {@snippet :
     * void g_print(char* format,...);
     * }
     */
    public static void g_print(MemorySegment format, Object... x1) {
        var mh$ = g_print$MH();
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_print_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$381.const$0,"g_set_print_handler");
    }
    /**
     * {@snippet :
     * void (*g_set_print_handler(void (*func)(char*)))(char*);
     * }
     */
    public static MemorySegment g_set_print_handler(MemorySegment func) {
        var mh$ = g_set_print_handler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_printerr$MH() {
        return RuntimeHelper.requireNonNull(constants$381.const$1,"g_printerr");
    }
    /**
     * {@snippet :
     * void g_printerr(char* format,...);
     * }
     */
    public static void g_printerr(MemorySegment format, Object... x1) {
        var mh$ = g_printerr$MH();
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_set_printerr_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$381.const$4,"g_set_printerr_handler");
    }
    /**
     * {@snippet :
     * void (*g_set_printerr_handler(void (*func)(char*)))(char*);
     * }
     */
    public static MemorySegment g_set_printerr_handler(MemorySegment func) {
        var mh$ = g_set_printerr_handler$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GOptionFlags.G_OPTION_FLAG_NONE = 0;
     * }
     */
    public static int G_OPTION_FLAG_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GOptionFlags.G_OPTION_FLAG_HIDDEN = 1;
     * }
     */
    public static int G_OPTION_FLAG_HIDDEN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GOptionFlags.G_OPTION_FLAG_IN_MAIN = 2;
     * }
     */
    public static int G_OPTION_FLAG_IN_MAIN() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GOptionFlags.G_OPTION_FLAG_REVERSE = 4;
     * }
     */
    public static int G_OPTION_FLAG_REVERSE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GOptionFlags.G_OPTION_FLAG_NO_ARG = 8;
     * }
     */
    public static int G_OPTION_FLAG_NO_ARG() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GOptionFlags.G_OPTION_FLAG_FILENAME = 16;
     * }
     */
    public static int G_OPTION_FLAG_FILENAME() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GOptionFlags.G_OPTION_FLAG_OPTIONAL_ARG = 32;
     * }
     */
    public static int G_OPTION_FLAG_OPTIONAL_ARG() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum GOptionFlags.G_OPTION_FLAG_NOALIAS = 64;
     * }
     */
    public static int G_OPTION_FLAG_NOALIAS() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum GOptionArg.G_OPTION_ARG_NONE = 0;
     * }
     */
    public static int G_OPTION_ARG_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GOptionArg.G_OPTION_ARG_STRING = 1;
     * }
     */
    public static int G_OPTION_ARG_STRING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GOptionArg.G_OPTION_ARG_INT = 2;
     * }
     */
    public static int G_OPTION_ARG_INT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GOptionArg.G_OPTION_ARG_CALLBACK = 3;
     * }
     */
    public static int G_OPTION_ARG_CALLBACK() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GOptionArg.G_OPTION_ARG_FILENAME = 4;
     * }
     */
    public static int G_OPTION_ARG_FILENAME() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GOptionArg.G_OPTION_ARG_STRING_ARRAY = 5;
     * }
     */
    public static int G_OPTION_ARG_STRING_ARRAY() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GOptionArg.G_OPTION_ARG_FILENAME_ARRAY = 6;
     * }
     */
    public static int G_OPTION_ARG_FILENAME_ARRAY() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GOptionArg.G_OPTION_ARG_DOUBLE = 7;
     * }
     */
    public static int G_OPTION_ARG_DOUBLE() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum GOptionArg.G_OPTION_ARG_INT64 = 8;
     * }
     */
    public static int G_OPTION_ARG_INT64() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GOptionError.G_OPTION_ERROR_UNKNOWN_OPTION = 0;
     * }
     */
    public static int G_OPTION_ERROR_UNKNOWN_OPTION() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GOptionError.G_OPTION_ERROR_BAD_VALUE = 1;
     * }
     */
    public static int G_OPTION_ERROR_BAD_VALUE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GOptionError.G_OPTION_ERROR_FAILED = 2;
     * }
     */
    public static int G_OPTION_ERROR_FAILED() {
        return (int)2L;
    }
    public static MethodHandle g_option_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$382.const$3,"g_option_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_option_error_quark();
     * }
     */
    public static int g_option_error_quark() {
        var mh$ = g_option_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_new$MH() {
        return RuntimeHelper.requireNonNull(constants$384.const$0,"g_option_context_new");
    }
    /**
     * {@snippet :
     * struct _GOptionContext* g_option_context_new(char* parameter_string);
     * }
     */
    public static MemorySegment g_option_context_new(MemorySegment parameter_string) {
        var mh$ = g_option_context_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(parameter_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_summary$MH() {
        return RuntimeHelper.requireNonNull(constants$384.const$1,"g_option_context_set_summary");
    }
    /**
     * {@snippet :
     * void g_option_context_set_summary(struct _GOptionContext* context, char* summary);
     * }
     */
    public static void g_option_context_set_summary(MemorySegment context, MemorySegment summary) {
        var mh$ = g_option_context_set_summary$MH();
        try {
            mh$.invokeExact(context, summary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_summary$MH() {
        return RuntimeHelper.requireNonNull(constants$384.const$2,"g_option_context_get_summary");
    }
    /**
     * {@snippet :
     * char* g_option_context_get_summary(struct _GOptionContext* context);
     * }
     */
    public static MemorySegment g_option_context_get_summary(MemorySegment context) {
        var mh$ = g_option_context_get_summary$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_description$MH() {
        return RuntimeHelper.requireNonNull(constants$384.const$3,"g_option_context_set_description");
    }
    /**
     * {@snippet :
     * void g_option_context_set_description(struct _GOptionContext* context, char* description);
     * }
     */
    public static void g_option_context_set_description(MemorySegment context, MemorySegment description) {
        var mh$ = g_option_context_set_description$MH();
        try {
            mh$.invokeExact(context, description);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_description$MH() {
        return RuntimeHelper.requireNonNull(constants$384.const$4,"g_option_context_get_description");
    }
    /**
     * {@snippet :
     * char* g_option_context_get_description(struct _GOptionContext* context);
     * }
     */
    public static MemorySegment g_option_context_get_description(MemorySegment context) {
        var mh$ = g_option_context_get_description$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_free$MH() {
        return RuntimeHelper.requireNonNull(constants$384.const$5,"g_option_context_free");
    }
    /**
     * {@snippet :
     * void g_option_context_free(struct _GOptionContext* context);
     * }
     */
    public static void g_option_context_free(MemorySegment context) {
        var mh$ = g_option_context_free$MH();
        try {
            mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_help_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$385.const$0,"g_option_context_set_help_enabled");
    }
    /**
     * {@snippet :
     * void g_option_context_set_help_enabled(struct _GOptionContext* context, int help_enabled);
     * }
     */
    public static void g_option_context_set_help_enabled(MemorySegment context, int help_enabled) {
        var mh$ = g_option_context_set_help_enabled$MH();
        try {
            mh$.invokeExact(context, help_enabled);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_help_enabled$MH() {
        return RuntimeHelper.requireNonNull(constants$385.const$1,"g_option_context_get_help_enabled");
    }
    /**
     * {@snippet :
     * int g_option_context_get_help_enabled(struct _GOptionContext* context);
     * }
     */
    public static int g_option_context_get_help_enabled(MemorySegment context) {
        var mh$ = g_option_context_get_help_enabled$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_ignore_unknown_options$MH() {
        return RuntimeHelper.requireNonNull(constants$385.const$2,"g_option_context_set_ignore_unknown_options");
    }
    /**
     * {@snippet :
     * void g_option_context_set_ignore_unknown_options(struct _GOptionContext* context, int ignore_unknown);
     * }
     */
    public static void g_option_context_set_ignore_unknown_options(MemorySegment context, int ignore_unknown) {
        var mh$ = g_option_context_set_ignore_unknown_options$MH();
        try {
            mh$.invokeExact(context, ignore_unknown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_ignore_unknown_options$MH() {
        return RuntimeHelper.requireNonNull(constants$385.const$3,"g_option_context_get_ignore_unknown_options");
    }
    /**
     * {@snippet :
     * int g_option_context_get_ignore_unknown_options(struct _GOptionContext* context);
     * }
     */
    public static int g_option_context_get_ignore_unknown_options(MemorySegment context) {
        var mh$ = g_option_context_get_ignore_unknown_options$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_strict_posix$MH() {
        return RuntimeHelper.requireNonNull(constants$385.const$4,"g_option_context_set_strict_posix");
    }
    /**
     * {@snippet :
     * void g_option_context_set_strict_posix(struct _GOptionContext* context, int strict_posix);
     * }
     */
    public static void g_option_context_set_strict_posix(MemorySegment context, int strict_posix) {
        var mh$ = g_option_context_set_strict_posix$MH();
        try {
            mh$.invokeExact(context, strict_posix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_strict_posix$MH() {
        return RuntimeHelper.requireNonNull(constants$385.const$5,"g_option_context_get_strict_posix");
    }
    /**
     * {@snippet :
     * int g_option_context_get_strict_posix(struct _GOptionContext* context);
     * }
     */
    public static int g_option_context_get_strict_posix(MemorySegment context) {
        var mh$ = g_option_context_get_strict_posix$MH();
        try {
            return (int)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_add_main_entries$MH() {
        return RuntimeHelper.requireNonNull(constants$386.const$0,"g_option_context_add_main_entries");
    }
    /**
     * {@snippet :
     * void g_option_context_add_main_entries(struct _GOptionContext* context, struct _GOptionEntry* entries, char* translation_domain);
     * }
     */
    public static void g_option_context_add_main_entries(MemorySegment context, MemorySegment entries, MemorySegment translation_domain) {
        var mh$ = g_option_context_add_main_entries$MH();
        try {
            mh$.invokeExact(context, entries, translation_domain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$386.const$1,"g_option_context_parse");
    }
    /**
     * {@snippet :
     * int g_option_context_parse(struct _GOptionContext* context, int* argc, char*** argv, struct _GError** error);
     * }
     */
    public static int g_option_context_parse(MemorySegment context, MemorySegment argc, MemorySegment argv, MemorySegment error) {
        var mh$ = g_option_context_parse$MH();
        try {
            return (int)mh$.invokeExact(context, argc, argv, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_parse_strv$MH() {
        return RuntimeHelper.requireNonNull(constants$386.const$2,"g_option_context_parse_strv");
    }
    /**
     * {@snippet :
     * int g_option_context_parse_strv(struct _GOptionContext* context, char*** arguments, struct _GError** error);
     * }
     */
    public static int g_option_context_parse_strv(MemorySegment context, MemorySegment arguments, MemorySegment error) {
        var mh$ = g_option_context_parse_strv$MH();
        try {
            return (int)mh$.invokeExact(context, arguments, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_translate_func$MH() {
        return RuntimeHelper.requireNonNull(constants$386.const$5,"g_option_context_set_translate_func");
    }
    /**
     * {@snippet :
     * void g_option_context_set_translate_func(struct _GOptionContext* context, char* (*func)(char*,void*), void* data, void (*destroy_notify)(void*));
     * }
     */
    public static void g_option_context_set_translate_func(MemorySegment context, MemorySegment func, MemorySegment data, MemorySegment destroy_notify) {
        var mh$ = g_option_context_set_translate_func$MH();
        try {
            mh$.invokeExact(context, func, data, destroy_notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_translation_domain$MH() {
        return RuntimeHelper.requireNonNull(constants$387.const$0,"g_option_context_set_translation_domain");
    }
    /**
     * {@snippet :
     * void g_option_context_set_translation_domain(struct _GOptionContext* context, char* domain);
     * }
     */
    public static void g_option_context_set_translation_domain(MemorySegment context, MemorySegment domain) {
        var mh$ = g_option_context_set_translation_domain$MH();
        try {
            mh$.invokeExact(context, domain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_add_group$MH() {
        return RuntimeHelper.requireNonNull(constants$387.const$1,"g_option_context_add_group");
    }
    /**
     * {@snippet :
     * void g_option_context_add_group(struct _GOptionContext* context, struct _GOptionGroup* group);
     * }
     */
    public static void g_option_context_add_group(MemorySegment context, MemorySegment group) {
        var mh$ = g_option_context_add_group$MH();
        try {
            mh$.invokeExact(context, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_set_main_group$MH() {
        return RuntimeHelper.requireNonNull(constants$387.const$2,"g_option_context_set_main_group");
    }
    /**
     * {@snippet :
     * void g_option_context_set_main_group(struct _GOptionContext* context, struct _GOptionGroup* group);
     * }
     */
    public static void g_option_context_set_main_group(MemorySegment context, MemorySegment group) {
        var mh$ = g_option_context_set_main_group$MH();
        try {
            mh$.invokeExact(context, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_main_group$MH() {
        return RuntimeHelper.requireNonNull(constants$387.const$3,"g_option_context_get_main_group");
    }
    /**
     * {@snippet :
     * struct _GOptionGroup* g_option_context_get_main_group(struct _GOptionContext* context);
     * }
     */
    public static MemorySegment g_option_context_get_main_group(MemorySegment context) {
        var mh$ = g_option_context_get_main_group$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_context_get_help$MH() {
        return RuntimeHelper.requireNonNull(constants$387.const$4,"g_option_context_get_help");
    }
    /**
     * {@snippet :
     * char* g_option_context_get_help(struct _GOptionContext* context, int main_help, struct _GOptionGroup* group);
     * }
     */
    public static MemorySegment g_option_context_get_help(MemorySegment context, int main_help, MemorySegment group) {
        var mh$ = g_option_context_get_help$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(context, main_help, group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_new$MH() {
        return RuntimeHelper.requireNonNull(constants$388.const$0,"g_option_group_new");
    }
    /**
     * {@snippet :
     * struct _GOptionGroup* g_option_group_new(char* name, char* description, char* help_description, void* user_data, void (*destroy)(void*));
     * }
     */
    public static MemorySegment g_option_group_new(MemorySegment name, MemorySegment description, MemorySegment help_description, MemorySegment user_data, MemorySegment destroy) {
        var mh$ = g_option_group_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, description, help_description, user_data, destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_set_parse_hooks$MH() {
        return RuntimeHelper.requireNonNull(constants$388.const$3,"g_option_group_set_parse_hooks");
    }
    /**
     * {@snippet :
     * void g_option_group_set_parse_hooks(struct _GOptionGroup* group, int (*pre_parse_func)(struct _GOptionContext*,struct _GOptionGroup*,void*,struct _GError**), int (*post_parse_func)(struct _GOptionContext*,struct _GOptionGroup*,void*,struct _GError**));
     * }
     */
    public static void g_option_group_set_parse_hooks(MemorySegment group, MemorySegment pre_parse_func, MemorySegment post_parse_func) {
        var mh$ = g_option_group_set_parse_hooks$MH();
        try {
            mh$.invokeExact(group, pre_parse_func, post_parse_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_set_error_hook$MH() {
        return RuntimeHelper.requireNonNull(constants$388.const$5,"g_option_group_set_error_hook");
    }
    /**
     * {@snippet :
     * void g_option_group_set_error_hook(struct _GOptionGroup* group, void (*error_func)(struct _GOptionContext*,struct _GOptionGroup*,void*,struct _GError**));
     * }
     */
    public static void g_option_group_set_error_hook(MemorySegment group, MemorySegment error_func) {
        var mh$ = g_option_group_set_error_hook$MH();
        try {
            mh$.invokeExact(group, error_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_free$MH() {
        return RuntimeHelper.requireNonNull(constants$389.const$0,"g_option_group_free");
    }
    /**
     * {@snippet :
     * void g_option_group_free(struct _GOptionGroup* group);
     * }
     */
    public static void g_option_group_free(MemorySegment group) {
        var mh$ = g_option_group_free$MH();
        try {
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$389.const$1,"g_option_group_ref");
    }
    /**
     * {@snippet :
     * struct _GOptionGroup* g_option_group_ref(struct _GOptionGroup* group);
     * }
     */
    public static MemorySegment g_option_group_ref(MemorySegment group) {
        var mh$ = g_option_group_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$389.const$2,"g_option_group_unref");
    }
    /**
     * {@snippet :
     * void g_option_group_unref(struct _GOptionGroup* group);
     * }
     */
    public static void g_option_group_unref(MemorySegment group) {
        var mh$ = g_option_group_unref$MH();
        try {
            mh$.invokeExact(group);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_add_entries$MH() {
        return RuntimeHelper.requireNonNull(constants$389.const$3,"g_option_group_add_entries");
    }
    /**
     * {@snippet :
     * void g_option_group_add_entries(struct _GOptionGroup* group, struct _GOptionEntry* entries);
     * }
     */
    public static void g_option_group_add_entries(MemorySegment group, MemorySegment entries) {
        var mh$ = g_option_group_add_entries$MH();
        try {
            mh$.invokeExact(group, entries);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_set_translate_func$MH() {
        return RuntimeHelper.requireNonNull(constants$390.const$0,"g_option_group_set_translate_func");
    }
    /**
     * {@snippet :
     * void g_option_group_set_translate_func(struct _GOptionGroup* group, char* (*func)(char*,void*), void* data, void (*destroy_notify)(void*));
     * }
     */
    public static void g_option_group_set_translate_func(MemorySegment group, MemorySegment func, MemorySegment data, MemorySegment destroy_notify) {
        var mh$ = g_option_group_set_translate_func$MH();
        try {
            mh$.invokeExact(group, func, data, destroy_notify);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_option_group_set_translation_domain$MH() {
        return RuntimeHelper.requireNonNull(constants$390.const$1,"g_option_group_set_translation_domain");
    }
    /**
     * {@snippet :
     * void g_option_group_set_translation_domain(struct _GOptionGroup* group, char* domain);
     * }
     */
    public static void g_option_group_set_translation_domain(MemorySegment group, MemorySegment domain) {
        var mh$ = g_option_group_set_translation_domain$MH();
        try {
            mh$.invokeExact(group, domain);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_new$MH() {
        return RuntimeHelper.requireNonNull(constants$390.const$3,"g_path_buf_new");
    }
    /**
     * {@snippet :
     * struct _GPathBuf* g_path_buf_new();
     * }
     */
    public static MemorySegment g_path_buf_new() {
        var mh$ = g_path_buf_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_new_from_path$MH() {
        return RuntimeHelper.requireNonNull(constants$390.const$4,"g_path_buf_new_from_path");
    }
    /**
     * {@snippet :
     * struct _GPathBuf* g_path_buf_new_from_path(char* path);
     * }
     */
    public static MemorySegment g_path_buf_new_from_path(MemorySegment path) {
        var mh$ = g_path_buf_new_from_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_init$MH() {
        return RuntimeHelper.requireNonNull(constants$390.const$5,"g_path_buf_init");
    }
    /**
     * {@snippet :
     * struct _GPathBuf* g_path_buf_init(struct _GPathBuf* buf);
     * }
     */
    public static MemorySegment g_path_buf_init(MemorySegment buf) {
        var mh$ = g_path_buf_init$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_init_from_path$MH() {
        return RuntimeHelper.requireNonNull(constants$391.const$0,"g_path_buf_init_from_path");
    }
    /**
     * {@snippet :
     * struct _GPathBuf* g_path_buf_init_from_path(struct _GPathBuf* buf, char* path);
     * }
     */
    public static MemorySegment g_path_buf_init_from_path(MemorySegment buf, MemorySegment path) {
        var mh$ = g_path_buf_init_from_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$391.const$1,"g_path_buf_clear");
    }
    /**
     * {@snippet :
     * void g_path_buf_clear(struct _GPathBuf* buf);
     * }
     */
    public static void g_path_buf_clear(MemorySegment buf) {
        var mh$ = g_path_buf_clear$MH();
        try {
            mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_clear_to_path$MH() {
        return RuntimeHelper.requireNonNull(constants$391.const$2,"g_path_buf_clear_to_path");
    }
    /**
     * {@snippet :
     * char* g_path_buf_clear_to_path(struct _GPathBuf* buf);
     * }
     */
    public static MemorySegment g_path_buf_clear_to_path(MemorySegment buf) {
        var mh$ = g_path_buf_clear_to_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_free$MH() {
        return RuntimeHelper.requireNonNull(constants$391.const$3,"g_path_buf_free");
    }
    /**
     * {@snippet :
     * void g_path_buf_free(struct _GPathBuf* buf);
     * }
     */
    public static void g_path_buf_free(MemorySegment buf) {
        var mh$ = g_path_buf_free$MH();
        try {
            mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_free_to_path$MH() {
        return RuntimeHelper.requireNonNull(constants$391.const$4,"g_path_buf_free_to_path");
    }
    /**
     * {@snippet :
     * char* g_path_buf_free_to_path(struct _GPathBuf* buf);
     * }
     */
    public static MemorySegment g_path_buf_free_to_path(MemorySegment buf) {
        var mh$ = g_path_buf_free_to_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$391.const$5,"g_path_buf_copy");
    }
    /**
     * {@snippet :
     * struct _GPathBuf* g_path_buf_copy(struct _GPathBuf* buf);
     * }
     */
    public static MemorySegment g_path_buf_copy(MemorySegment buf) {
        var mh$ = g_path_buf_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_push$MH() {
        return RuntimeHelper.requireNonNull(constants$392.const$0,"g_path_buf_push");
    }
    /**
     * {@snippet :
     * struct _GPathBuf* g_path_buf_push(struct _GPathBuf* buf, char* path);
     * }
     */
    public static MemorySegment g_path_buf_push(MemorySegment buf, MemorySegment path) {
        var mh$ = g_path_buf_push$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf, path);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$392.const$1,"g_path_buf_pop");
    }
    /**
     * {@snippet :
     * int g_path_buf_pop(struct _GPathBuf* buf);
     * }
     */
    public static int g_path_buf_pop(MemorySegment buf) {
        var mh$ = g_path_buf_pop$MH();
        try {
            return (int)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_set_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$392.const$2,"g_path_buf_set_filename");
    }
    /**
     * {@snippet :
     * int g_path_buf_set_filename(struct _GPathBuf* buf, char* file_name);
     * }
     */
    public static int g_path_buf_set_filename(MemorySegment buf, MemorySegment file_name) {
        var mh$ = g_path_buf_set_filename$MH();
        try {
            return (int)mh$.invokeExact(buf, file_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_set_extension$MH() {
        return RuntimeHelper.requireNonNull(constants$392.const$3,"g_path_buf_set_extension");
    }
    /**
     * {@snippet :
     * int g_path_buf_set_extension(struct _GPathBuf* buf, char* extension);
     * }
     */
    public static int g_path_buf_set_extension(MemorySegment buf, MemorySegment extension) {
        var mh$ = g_path_buf_set_extension$MH();
        try {
            return (int)mh$.invokeExact(buf, extension);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_to_path$MH() {
        return RuntimeHelper.requireNonNull(constants$392.const$4,"g_path_buf_to_path");
    }
    /**
     * {@snippet :
     * char* g_path_buf_to_path(struct _GPathBuf* buf);
     * }
     */
    public static MemorySegment g_path_buf_to_path(MemorySegment buf) {
        var mh$ = g_path_buf_to_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_path_buf_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$392.const$5,"g_path_buf_equal");
    }
    /**
     * {@snippet :
     * int g_path_buf_equal(void* v1, void* v2);
     * }
     */
    public static int g_path_buf_equal(MemorySegment v1, MemorySegment v2) {
        var mh$ = g_path_buf_equal$MH();
        try {
            return (int)mh$.invokeExact(v1, v2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_new$MH() {
        return RuntimeHelper.requireNonNull(constants$393.const$0,"g_pattern_spec_new");
    }
    /**
     * {@snippet :
     * struct _GPatternSpec* g_pattern_spec_new(char* pattern);
     * }
     */
    public static MemorySegment g_pattern_spec_new(MemorySegment pattern) {
        var mh$ = g_pattern_spec_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_free$MH() {
        return RuntimeHelper.requireNonNull(constants$393.const$1,"g_pattern_spec_free");
    }
    /**
     * {@snippet :
     * void g_pattern_spec_free(struct _GPatternSpec* pspec);
     * }
     */
    public static void g_pattern_spec_free(MemorySegment pspec) {
        var mh$ = g_pattern_spec_free$MH();
        try {
            mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$393.const$2,"g_pattern_spec_copy");
    }
    /**
     * {@snippet :
     * struct _GPatternSpec* g_pattern_spec_copy(struct _GPatternSpec* pspec);
     * }
     */
    public static MemorySegment g_pattern_spec_copy(MemorySegment pspec) {
        var mh$ = g_pattern_spec_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pspec);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$393.const$3,"g_pattern_spec_equal");
    }
    /**
     * {@snippet :
     * int g_pattern_spec_equal(struct _GPatternSpec* pspec1, struct _GPatternSpec* pspec2);
     * }
     */
    public static int g_pattern_spec_equal(MemorySegment pspec1, MemorySegment pspec2) {
        var mh$ = g_pattern_spec_equal$MH();
        try {
            return (int)mh$.invokeExact(pspec1, pspec2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_match$MH() {
        return RuntimeHelper.requireNonNull(constants$393.const$5,"g_pattern_spec_match");
    }
    /**
     * {@snippet :
     * int g_pattern_spec_match(struct _GPatternSpec* pspec, unsigned long string_length, char* string, char* string_reversed);
     * }
     */
    public static int g_pattern_spec_match(MemorySegment pspec, long string_length, MemorySegment string, MemorySegment string_reversed) {
        var mh$ = g_pattern_spec_match$MH();
        try {
            return (int)mh$.invokeExact(pspec, string_length, string, string_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_spec_match_string$MH() {
        return RuntimeHelper.requireNonNull(constants$394.const$0,"g_pattern_spec_match_string");
    }
    /**
     * {@snippet :
     * int g_pattern_spec_match_string(struct _GPatternSpec* pspec, char* string);
     * }
     */
    public static int g_pattern_spec_match_string(MemorySegment pspec, MemorySegment string) {
        var mh$ = g_pattern_spec_match_string$MH();
        try {
            return (int)mh$.invokeExact(pspec, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_match$MH() {
        return RuntimeHelper.requireNonNull(constants$394.const$1,"g_pattern_match");
    }
    /**
     * {@snippet :
     * int g_pattern_match(struct _GPatternSpec* pspec, unsigned int string_length, char* string, char* string_reversed);
     * }
     */
    public static int g_pattern_match(MemorySegment pspec, int string_length, MemorySegment string, MemorySegment string_reversed) {
        var mh$ = g_pattern_match$MH();
        try {
            return (int)mh$.invokeExact(pspec, string_length, string, string_reversed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_match_string$MH() {
        return RuntimeHelper.requireNonNull(constants$394.const$2,"g_pattern_match_string");
    }
    /**
     * {@snippet :
     * int g_pattern_match_string(struct _GPatternSpec* pspec, char* string);
     * }
     */
    public static int g_pattern_match_string(MemorySegment pspec, MemorySegment string) {
        var mh$ = g_pattern_match_string$MH();
        try {
            return (int)mh$.invokeExact(pspec, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_pattern_match_simple$MH() {
        return RuntimeHelper.requireNonNull(constants$394.const$3,"g_pattern_match_simple");
    }
    /**
     * {@snippet :
     * int g_pattern_match_simple(char* pattern, char* string);
     * }
     */
    public static int g_pattern_match_simple(MemorySegment pattern, MemorySegment string) {
        var mh$ = g_pattern_match_simple$MH();
        try {
            return (int)mh$.invokeExact(pattern, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spaced_primes_closest$MH() {
        return RuntimeHelper.requireNonNull(constants$394.const$4,"g_spaced_primes_closest");
    }
    /**
     * {@snippet :
     * unsigned int g_spaced_primes_closest(unsigned int num);
     * }
     */
    public static int g_spaced_primes_closest(int num) {
        var mh$ = g_spaced_primes_closest$MH();
        try {
            return (int)mh$.invokeExact(num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_qsort_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$395.const$1,"g_qsort_with_data");
    }
    /**
     * {@snippet :
     * void g_qsort_with_data(void* pbase, int total_elems, unsigned long size, int (*compare_func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_qsort_with_data(MemorySegment pbase, int total_elems, long size, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_qsort_with_data$MH();
        try {
            mh$.invokeExact(pbase, total_elems, size, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_new$MH() {
        return RuntimeHelper.requireNonNull(constants$396.const$0,"g_queue_new");
    }
    /**
     * {@snippet :
     * struct _GQueue* g_queue_new();
     * }
     */
    public static MemorySegment g_queue_new() {
        var mh$ = g_queue_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_free$MH() {
        return RuntimeHelper.requireNonNull(constants$396.const$1,"g_queue_free");
    }
    /**
     * {@snippet :
     * void g_queue_free(struct _GQueue* queue);
     * }
     */
    public static void g_queue_free(MemorySegment queue) {
        var mh$ = g_queue_free$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_free_full$MH() {
        return RuntimeHelper.requireNonNull(constants$396.const$3,"g_queue_free_full");
    }
    /**
     * {@snippet :
     * void g_queue_free_full(struct _GQueue* queue, void (*free_func)(void*));
     * }
     */
    public static void g_queue_free_full(MemorySegment queue, MemorySegment free_func) {
        var mh$ = g_queue_free_full$MH();
        try {
            mh$.invokeExact(queue, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_init$MH() {
        return RuntimeHelper.requireNonNull(constants$396.const$4,"g_queue_init");
    }
    /**
     * {@snippet :
     * void g_queue_init(struct _GQueue* queue);
     * }
     */
    public static void g_queue_init(MemorySegment queue) {
        var mh$ = g_queue_init$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$396.const$5,"g_queue_clear");
    }
    /**
     * {@snippet :
     * void g_queue_clear(struct _GQueue* queue);
     * }
     */
    public static void g_queue_clear(MemorySegment queue) {
        var mh$ = g_queue_clear$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$397.const$0,"g_queue_is_empty");
    }
    /**
     * {@snippet :
     * int g_queue_is_empty(struct _GQueue* queue);
     * }
     */
    public static int g_queue_is_empty(MemorySegment queue) {
        var mh$ = g_queue_is_empty$MH();
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_clear_full$MH() {
        return RuntimeHelper.requireNonNull(constants$397.const$2,"g_queue_clear_full");
    }
    /**
     * {@snippet :
     * void g_queue_clear_full(struct _GQueue* queue, void (*free_func)(void*));
     * }
     */
    public static void g_queue_clear_full(MemorySegment queue, MemorySegment free_func) {
        var mh$ = g_queue_clear_full$MH();
        try {
            mh$.invokeExact(queue, free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_get_length$MH() {
        return RuntimeHelper.requireNonNull(constants$397.const$3,"g_queue_get_length");
    }
    /**
     * {@snippet :
     * unsigned int g_queue_get_length(struct _GQueue* queue);
     * }
     */
    public static int g_queue_get_length(MemorySegment queue) {
        var mh$ = g_queue_get_length$MH();
        try {
            return (int)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_reverse$MH() {
        return RuntimeHelper.requireNonNull(constants$397.const$4,"g_queue_reverse");
    }
    /**
     * {@snippet :
     * void g_queue_reverse(struct _GQueue* queue);
     * }
     */
    public static void g_queue_reverse(MemorySegment queue) {
        var mh$ = g_queue_reverse$MH();
        try {
            mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$397.const$5,"g_queue_copy");
    }
    /**
     * {@snippet :
     * struct _GQueue* g_queue_copy(struct _GQueue* queue);
     * }
     */
    public static MemorySegment g_queue_copy(MemorySegment queue) {
        var mh$ = g_queue_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$398.const$1,"g_queue_foreach");
    }
    /**
     * {@snippet :
     * void g_queue_foreach(struct _GQueue* queue, void (*func)(void*,void*), void* user_data);
     * }
     */
    public static void g_queue_foreach(MemorySegment queue, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_queue_foreach$MH();
        try {
            mh$.invokeExact(queue, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_find$MH() {
        return RuntimeHelper.requireNonNull(constants$398.const$2,"g_queue_find");
    }
    /**
     * {@snippet :
     * struct _GList* g_queue_find(struct _GQueue* queue, void* data);
     * }
     */
    public static MemorySegment g_queue_find(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_find$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_find_custom$MH() {
        return RuntimeHelper.requireNonNull(constants$398.const$4,"g_queue_find_custom");
    }
    /**
     * {@snippet :
     * struct _GList* g_queue_find_custom(struct _GQueue* queue, void* data, int (*func)(void*,void*));
     * }
     */
    public static MemorySegment g_queue_find_custom(MemorySegment queue, MemorySegment data, MemorySegment func) {
        var mh$ = g_queue_find_custom$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue, data, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$399.const$0,"g_queue_sort");
    }
    /**
     * {@snippet :
     * void g_queue_sort(struct _GQueue* queue, int (*compare_func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_queue_sort(MemorySegment queue, MemorySegment compare_func, MemorySegment user_data) {
        var mh$ = g_queue_sort$MH();
        try {
            mh$.invokeExact(queue, compare_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_head$MH() {
        return RuntimeHelper.requireNonNull(constants$399.const$1,"g_queue_push_head");
    }
    /**
     * {@snippet :
     * void g_queue_push_head(struct _GQueue* queue, void* data);
     * }
     */
    public static void g_queue_push_head(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_push_head$MH();
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_tail$MH() {
        return RuntimeHelper.requireNonNull(constants$399.const$2,"g_queue_push_tail");
    }
    /**
     * {@snippet :
     * void g_queue_push_tail(struct _GQueue* queue, void* data);
     * }
     */
    public static void g_queue_push_tail(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_push_tail$MH();
        try {
            mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_nth$MH() {
        return RuntimeHelper.requireNonNull(constants$399.const$3,"g_queue_push_nth");
    }
    /**
     * {@snippet :
     * void g_queue_push_nth(struct _GQueue* queue, void* data, int n);
     * }
     */
    public static void g_queue_push_nth(MemorySegment queue, MemorySegment data, int n) {
        var mh$ = g_queue_push_nth$MH();
        try {
            mh$.invokeExact(queue, data, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_head$MH() {
        return RuntimeHelper.requireNonNull(constants$399.const$4,"g_queue_pop_head");
    }
    /**
     * {@snippet :
     * void* g_queue_pop_head(struct _GQueue* queue);
     * }
     */
    public static MemorySegment g_queue_pop_head(MemorySegment queue) {
        var mh$ = g_queue_pop_head$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_tail$MH() {
        return RuntimeHelper.requireNonNull(constants$399.const$5,"g_queue_pop_tail");
    }
    /**
     * {@snippet :
     * void* g_queue_pop_tail(struct _GQueue* queue);
     * }
     */
    public static MemorySegment g_queue_pop_tail(MemorySegment queue) {
        var mh$ = g_queue_pop_tail$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_nth$MH() {
        return RuntimeHelper.requireNonNull(constants$400.const$0,"g_queue_pop_nth");
    }
    /**
     * {@snippet :
     * void* g_queue_pop_nth(struct _GQueue* queue, unsigned int n);
     * }
     */
    public static MemorySegment g_queue_pop_nth(MemorySegment queue, int n) {
        var mh$ = g_queue_pop_nth$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_head$MH() {
        return RuntimeHelper.requireNonNull(constants$400.const$1,"g_queue_peek_head");
    }
    /**
     * {@snippet :
     * void* g_queue_peek_head(struct _GQueue* queue);
     * }
     */
    public static MemorySegment g_queue_peek_head(MemorySegment queue) {
        var mh$ = g_queue_peek_head$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_tail$MH() {
        return RuntimeHelper.requireNonNull(constants$400.const$2,"g_queue_peek_tail");
    }
    /**
     * {@snippet :
     * void* g_queue_peek_tail(struct _GQueue* queue);
     * }
     */
    public static MemorySegment g_queue_peek_tail(MemorySegment queue) {
        var mh$ = g_queue_peek_tail$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_nth$MH() {
        return RuntimeHelper.requireNonNull(constants$400.const$3,"g_queue_peek_nth");
    }
    /**
     * {@snippet :
     * void* g_queue_peek_nth(struct _GQueue* queue, unsigned int n);
     * }
     */
    public static MemorySegment g_queue_peek_nth(MemorySegment queue, int n) {
        var mh$ = g_queue_peek_nth$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_index$MH() {
        return RuntimeHelper.requireNonNull(constants$400.const$4,"g_queue_index");
    }
    /**
     * {@snippet :
     * int g_queue_index(struct _GQueue* queue, void* data);
     * }
     */
    public static int g_queue_index(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_index$MH();
        try {
            return (int)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$400.const$5,"g_queue_remove");
    }
    /**
     * {@snippet :
     * int g_queue_remove(struct _GQueue* queue, void* data);
     * }
     */
    public static int g_queue_remove(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_remove$MH();
        try {
            return (int)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_remove_all$MH() {
        return RuntimeHelper.requireNonNull(constants$401.const$0,"g_queue_remove_all");
    }
    /**
     * {@snippet :
     * unsigned int g_queue_remove_all(struct _GQueue* queue, void* data);
     * }
     */
    public static int g_queue_remove_all(MemorySegment queue, MemorySegment data) {
        var mh$ = g_queue_remove_all$MH();
        try {
            return (int)mh$.invokeExact(queue, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_insert_before$MH() {
        return RuntimeHelper.requireNonNull(constants$401.const$1,"g_queue_insert_before");
    }
    /**
     * {@snippet :
     * void g_queue_insert_before(struct _GQueue* queue, struct _GList* sibling, void* data);
     * }
     */
    public static void g_queue_insert_before(MemorySegment queue, MemorySegment sibling, MemorySegment data) {
        var mh$ = g_queue_insert_before$MH();
        try {
            mh$.invokeExact(queue, sibling, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_insert_before_link$MH() {
        return RuntimeHelper.requireNonNull(constants$401.const$2,"g_queue_insert_before_link");
    }
    /**
     * {@snippet :
     * void g_queue_insert_before_link(struct _GQueue* queue, struct _GList* sibling, struct _GList* link_);
     * }
     */
    public static void g_queue_insert_before_link(MemorySegment queue, MemorySegment sibling, MemorySegment link_) {
        var mh$ = g_queue_insert_before_link$MH();
        try {
            mh$.invokeExact(queue, sibling, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_insert_after$MH() {
        return RuntimeHelper.requireNonNull(constants$401.const$3,"g_queue_insert_after");
    }
    /**
     * {@snippet :
     * void g_queue_insert_after(struct _GQueue* queue, struct _GList* sibling, void* data);
     * }
     */
    public static void g_queue_insert_after(MemorySegment queue, MemorySegment sibling, MemorySegment data) {
        var mh$ = g_queue_insert_after$MH();
        try {
            mh$.invokeExact(queue, sibling, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_insert_after_link$MH() {
        return RuntimeHelper.requireNonNull(constants$401.const$4,"g_queue_insert_after_link");
    }
    /**
     * {@snippet :
     * void g_queue_insert_after_link(struct _GQueue* queue, struct _GList* sibling, struct _GList* link_);
     * }
     */
    public static void g_queue_insert_after_link(MemorySegment queue, MemorySegment sibling, MemorySegment link_) {
        var mh$ = g_queue_insert_after_link$MH();
        try {
            mh$.invokeExact(queue, sibling, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_insert_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$402.const$0,"g_queue_insert_sorted");
    }
    /**
     * {@snippet :
     * void g_queue_insert_sorted(struct _GQueue* queue, void* data, int (*func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_queue_insert_sorted(MemorySegment queue, MemorySegment data, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_queue_insert_sorted$MH();
        try {
            mh$.invokeExact(queue, data, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_head_link$MH() {
        return RuntimeHelper.requireNonNull(constants$402.const$1,"g_queue_push_head_link");
    }
    /**
     * {@snippet :
     * void g_queue_push_head_link(struct _GQueue* queue, struct _GList* link_);
     * }
     */
    public static void g_queue_push_head_link(MemorySegment queue, MemorySegment link_) {
        var mh$ = g_queue_push_head_link$MH();
        try {
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_tail_link$MH() {
        return RuntimeHelper.requireNonNull(constants$402.const$2,"g_queue_push_tail_link");
    }
    /**
     * {@snippet :
     * void g_queue_push_tail_link(struct _GQueue* queue, struct _GList* link_);
     * }
     */
    public static void g_queue_push_tail_link(MemorySegment queue, MemorySegment link_) {
        var mh$ = g_queue_push_tail_link$MH();
        try {
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_push_nth_link$MH() {
        return RuntimeHelper.requireNonNull(constants$402.const$3,"g_queue_push_nth_link");
    }
    /**
     * {@snippet :
     * void g_queue_push_nth_link(struct _GQueue* queue, int n, struct _GList* link_);
     * }
     */
    public static void g_queue_push_nth_link(MemorySegment queue, int n, MemorySegment link_) {
        var mh$ = g_queue_push_nth_link$MH();
        try {
            mh$.invokeExact(queue, n, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_head_link$MH() {
        return RuntimeHelper.requireNonNull(constants$402.const$4,"g_queue_pop_head_link");
    }
    /**
     * {@snippet :
     * struct _GList* g_queue_pop_head_link(struct _GQueue* queue);
     * }
     */
    public static MemorySegment g_queue_pop_head_link(MemorySegment queue) {
        var mh$ = g_queue_pop_head_link$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_tail_link$MH() {
        return RuntimeHelper.requireNonNull(constants$402.const$5,"g_queue_pop_tail_link");
    }
    /**
     * {@snippet :
     * struct _GList* g_queue_pop_tail_link(struct _GQueue* queue);
     * }
     */
    public static MemorySegment g_queue_pop_tail_link(MemorySegment queue) {
        var mh$ = g_queue_pop_tail_link$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_pop_nth_link$MH() {
        return RuntimeHelper.requireNonNull(constants$403.const$0,"g_queue_pop_nth_link");
    }
    /**
     * {@snippet :
     * struct _GList* g_queue_pop_nth_link(struct _GQueue* queue, unsigned int n);
     * }
     */
    public static MemorySegment g_queue_pop_nth_link(MemorySegment queue, int n) {
        var mh$ = g_queue_pop_nth_link$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_head_link$MH() {
        return RuntimeHelper.requireNonNull(constants$403.const$1,"g_queue_peek_head_link");
    }
    /**
     * {@snippet :
     * struct _GList* g_queue_peek_head_link(struct _GQueue* queue);
     * }
     */
    public static MemorySegment g_queue_peek_head_link(MemorySegment queue) {
        var mh$ = g_queue_peek_head_link$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_tail_link$MH() {
        return RuntimeHelper.requireNonNull(constants$403.const$2,"g_queue_peek_tail_link");
    }
    /**
     * {@snippet :
     * struct _GList* g_queue_peek_tail_link(struct _GQueue* queue);
     * }
     */
    public static MemorySegment g_queue_peek_tail_link(MemorySegment queue) {
        var mh$ = g_queue_peek_tail_link$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_peek_nth_link$MH() {
        return RuntimeHelper.requireNonNull(constants$403.const$3,"g_queue_peek_nth_link");
    }
    /**
     * {@snippet :
     * struct _GList* g_queue_peek_nth_link(struct _GQueue* queue, unsigned int n);
     * }
     */
    public static MemorySegment g_queue_peek_nth_link(MemorySegment queue, int n) {
        var mh$ = g_queue_peek_nth_link$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(queue, n);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_link_index$MH() {
        return RuntimeHelper.requireNonNull(constants$403.const$4,"g_queue_link_index");
    }
    /**
     * {@snippet :
     * int g_queue_link_index(struct _GQueue* queue, struct _GList* link_);
     * }
     */
    public static int g_queue_link_index(MemorySegment queue, MemorySegment link_) {
        var mh$ = g_queue_link_index$MH();
        try {
            return (int)mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_unlink$MH() {
        return RuntimeHelper.requireNonNull(constants$403.const$5,"g_queue_unlink");
    }
    /**
     * {@snippet :
     * void g_queue_unlink(struct _GQueue* queue, struct _GList* link_);
     * }
     */
    public static void g_queue_unlink(MemorySegment queue, MemorySegment link_) {
        var mh$ = g_queue_unlink$MH();
        try {
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_queue_delete_link$MH() {
        return RuntimeHelper.requireNonNull(constants$404.const$0,"g_queue_delete_link");
    }
    /**
     * {@snippet :
     * void g_queue_delete_link(struct _GQueue* queue, struct _GList* link_);
     * }
     */
    public static void g_queue_delete_link(MemorySegment queue, MemorySegment link_) {
        var mh$ = g_queue_delete_link$MH();
        try {
            mh$.invokeExact(queue, link_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_new_with_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$404.const$1,"g_rand_new_with_seed");
    }
    /**
     * {@snippet :
     * struct _GRand* g_rand_new_with_seed(unsigned int seed);
     * }
     */
    public static MemorySegment g_rand_new_with_seed(int seed) {
        var mh$ = g_rand_new_with_seed$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_new_with_seed_array$MH() {
        return RuntimeHelper.requireNonNull(constants$404.const$2,"g_rand_new_with_seed_array");
    }
    /**
     * {@snippet :
     * struct _GRand* g_rand_new_with_seed_array(unsigned int* seed, unsigned int seed_length);
     * }
     */
    public static MemorySegment g_rand_new_with_seed_array(MemorySegment seed, int seed_length) {
        var mh$ = g_rand_new_with_seed_array$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seed, seed_length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_new$MH() {
        return RuntimeHelper.requireNonNull(constants$404.const$3,"g_rand_new");
    }
    /**
     * {@snippet :
     * struct _GRand* g_rand_new();
     * }
     */
    public static MemorySegment g_rand_new() {
        var mh$ = g_rand_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_free$MH() {
        return RuntimeHelper.requireNonNull(constants$404.const$4,"g_rand_free");
    }
    /**
     * {@snippet :
     * void g_rand_free(struct _GRand* rand_);
     * }
     */
    public static void g_rand_free(MemorySegment rand_) {
        var mh$ = g_rand_free$MH();
        try {
            mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$404.const$5,"g_rand_copy");
    }
    /**
     * {@snippet :
     * struct _GRand* g_rand_copy(struct _GRand* rand_);
     * }
     */
    public static MemorySegment g_rand_copy(MemorySegment rand_) {
        var mh$ = g_rand_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_set_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$405.const$0,"g_rand_set_seed");
    }
    /**
     * {@snippet :
     * void g_rand_set_seed(struct _GRand* rand_, unsigned int seed);
     * }
     */
    public static void g_rand_set_seed(MemorySegment rand_, int seed) {
        var mh$ = g_rand_set_seed$MH();
        try {
            mh$.invokeExact(rand_, seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_set_seed_array$MH() {
        return RuntimeHelper.requireNonNull(constants$405.const$1,"g_rand_set_seed_array");
    }
    /**
     * {@snippet :
     * void g_rand_set_seed_array(struct _GRand* rand_, unsigned int* seed, unsigned int seed_length);
     * }
     */
    public static void g_rand_set_seed_array(MemorySegment rand_, MemorySegment seed, int seed_length) {
        var mh$ = g_rand_set_seed_array$MH();
        try {
            mh$.invokeExact(rand_, seed, seed_length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_int$MH() {
        return RuntimeHelper.requireNonNull(constants$405.const$2,"g_rand_int");
    }
    /**
     * {@snippet :
     * unsigned int g_rand_int(struct _GRand* rand_);
     * }
     */
    public static int g_rand_int(MemorySegment rand_) {
        var mh$ = g_rand_int$MH();
        try {
            return (int)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_int_range$MH() {
        return RuntimeHelper.requireNonNull(constants$405.const$3,"g_rand_int_range");
    }
    /**
     * {@snippet :
     * int g_rand_int_range(struct _GRand* rand_, int begin, int end);
     * }
     */
    public static int g_rand_int_range(MemorySegment rand_, int begin, int end) {
        var mh$ = g_rand_int_range$MH();
        try {
            return (int)mh$.invokeExact(rand_, begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_double$MH() {
        return RuntimeHelper.requireNonNull(constants$405.const$4,"g_rand_double");
    }
    /**
     * {@snippet :
     * double g_rand_double(struct _GRand* rand_);
     * }
     */
    public static double g_rand_double(MemorySegment rand_) {
        var mh$ = g_rand_double$MH();
        try {
            return (double)mh$.invokeExact(rand_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rand_double_range$MH() {
        return RuntimeHelper.requireNonNull(constants$405.const$6,"g_rand_double_range");
    }
    /**
     * {@snippet :
     * double g_rand_double_range(struct _GRand* rand_, double begin, double end);
     * }
     */
    public static double g_rand_double_range(MemorySegment rand_, double begin, double end) {
        var mh$ = g_rand_double_range$MH();
        try {
            return (double)mh$.invokeExact(rand_, begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_set_seed$MH() {
        return RuntimeHelper.requireNonNull(constants$406.const$0,"g_random_set_seed");
    }
    /**
     * {@snippet :
     * void g_random_set_seed(unsigned int seed);
     * }
     */
    public static void g_random_set_seed(int seed) {
        var mh$ = g_random_set_seed$MH();
        try {
            mh$.invokeExact(seed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_int$MH() {
        return RuntimeHelper.requireNonNull(constants$406.const$1,"g_random_int");
    }
    /**
     * {@snippet :
     * unsigned int g_random_int();
     * }
     */
    public static int g_random_int() {
        var mh$ = g_random_int$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_int_range$MH() {
        return RuntimeHelper.requireNonNull(constants$406.const$2,"g_random_int_range");
    }
    /**
     * {@snippet :
     * int g_random_int_range(int begin, int end);
     * }
     */
    public static int g_random_int_range(int begin, int end) {
        var mh$ = g_random_int_range$MH();
        try {
            return (int)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_double$MH() {
        return RuntimeHelper.requireNonNull(constants$406.const$3,"g_random_double");
    }
    /**
     * {@snippet :
     * double g_random_double();
     * }
     */
    public static double g_random_double() {
        var mh$ = g_random_double$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_random_double_range$MH() {
        return RuntimeHelper.requireNonNull(constants$406.const$5,"g_random_double_range");
    }
    /**
     * {@snippet :
     * double g_random_double_range(double begin, double end);
     * }
     */
    public static double g_random_double_range(double begin, double end) {
        var mh$ = g_random_double_range$MH();
        try {
            return (double)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$407.const$0,"g_rc_box_alloc");
    }
    /**
     * {@snippet :
     * void* g_rc_box_alloc(unsigned long block_size);
     * }
     */
    public static MemorySegment g_rc_box_alloc(long block_size) {
        var mh$ = g_rc_box_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$407.const$1,"g_rc_box_alloc0");
    }
    /**
     * {@snippet :
     * void* g_rc_box_alloc0(unsigned long block_size);
     * }
     */
    public static MemorySegment g_rc_box_alloc0(long block_size) {
        var mh$ = g_rc_box_alloc0$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$407.const$3,"g_rc_box_dup");
    }
    /**
     * {@snippet :
     * void* g_rc_box_dup(unsigned long block_size, void* mem_block);
     * }
     */
    public static MemorySegment g_rc_box_dup(long block_size, MemorySegment mem_block) {
        var mh$ = g_rc_box_dup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$407.const$4,"g_rc_box_acquire");
    }
    /**
     * {@snippet :
     * void* g_rc_box_acquire(void* mem_block);
     * }
     */
    public static MemorySegment g_rc_box_acquire(MemorySegment mem_block) {
        var mh$ = g_rc_box_acquire$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_release$MH() {
        return RuntimeHelper.requireNonNull(constants$407.const$5,"g_rc_box_release");
    }
    /**
     * {@snippet :
     * void g_rc_box_release(void* mem_block);
     * }
     */
    public static void g_rc_box_release(MemorySegment mem_block) {
        var mh$ = g_rc_box_release$MH();
        try {
            mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_release_full$MH() {
        return RuntimeHelper.requireNonNull(constants$408.const$1,"g_rc_box_release_full");
    }
    /**
     * {@snippet :
     * void g_rc_box_release_full(void* mem_block, void (*clear_func)(void*));
     * }
     */
    public static void g_rc_box_release_full(MemorySegment mem_block, MemorySegment clear_func) {
        var mh$ = g_rc_box_release_full$MH();
        try {
            mh$.invokeExact(mem_block, clear_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_rc_box_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$408.const$2,"g_rc_box_get_size");
    }
    /**
     * {@snippet :
     * unsigned long g_rc_box_get_size(void* mem_block);
     * }
     */
    public static long g_rc_box_get_size(MemorySegment mem_block) {
        var mh$ = g_rc_box_get_size$MH();
        try {
            return (long)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$408.const$3,"g_atomic_rc_box_alloc");
    }
    /**
     * {@snippet :
     * void* g_atomic_rc_box_alloc(unsigned long block_size);
     * }
     */
    public static MemorySegment g_atomic_rc_box_alloc(long block_size) {
        var mh$ = g_atomic_rc_box_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$408.const$4,"g_atomic_rc_box_alloc0");
    }
    /**
     * {@snippet :
     * void* g_atomic_rc_box_alloc0(unsigned long block_size);
     * }
     */
    public static MemorySegment g_atomic_rc_box_alloc0(long block_size) {
        var mh$ = g_atomic_rc_box_alloc0$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_dup$MH() {
        return RuntimeHelper.requireNonNull(constants$408.const$5,"g_atomic_rc_box_dup");
    }
    /**
     * {@snippet :
     * void* g_atomic_rc_box_dup(unsigned long block_size, void* mem_block);
     * }
     */
    public static MemorySegment g_atomic_rc_box_dup(long block_size, MemorySegment mem_block) {
        var mh$ = g_atomic_rc_box_dup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$409.const$0,"g_atomic_rc_box_acquire");
    }
    /**
     * {@snippet :
     * void* g_atomic_rc_box_acquire(void* mem_block);
     * }
     */
    public static MemorySegment g_atomic_rc_box_acquire(MemorySegment mem_block) {
        var mh$ = g_atomic_rc_box_acquire$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_release$MH() {
        return RuntimeHelper.requireNonNull(constants$409.const$1,"g_atomic_rc_box_release");
    }
    /**
     * {@snippet :
     * void g_atomic_rc_box_release(void* mem_block);
     * }
     */
    public static void g_atomic_rc_box_release(MemorySegment mem_block) {
        var mh$ = g_atomic_rc_box_release$MH();
        try {
            mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_release_full$MH() {
        return RuntimeHelper.requireNonNull(constants$409.const$3,"g_atomic_rc_box_release_full");
    }
    /**
     * {@snippet :
     * void g_atomic_rc_box_release_full(void* mem_block, void (*clear_func)(void*));
     * }
     */
    public static void g_atomic_rc_box_release_full(MemorySegment mem_block, MemorySegment clear_func) {
        var mh$ = g_atomic_rc_box_release_full$MH();
        try {
            mh$.invokeExact(mem_block, clear_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_rc_box_get_size$MH() {
        return RuntimeHelper.requireNonNull(constants$409.const$4,"g_atomic_rc_box_get_size");
    }
    /**
     * {@snippet :
     * unsigned long g_atomic_rc_box_get_size(void* mem_block);
     * }
     */
    public static long g_atomic_rc_box_get_size(MemorySegment mem_block) {
        var mh$ = g_atomic_rc_box_get_size$MH();
        try {
            return (long)mh$.invokeExact(mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_init$MH() {
        return RuntimeHelper.requireNonNull(constants$409.const$5,"g_ref_count_init");
    }
    /**
     * {@snippet :
     * void g_ref_count_init(int* rc);
     * }
     */
    public static void g_ref_count_init(MemorySegment rc) {
        var mh$ = g_ref_count_init$MH();
        try {
            mh$.invokeExact(rc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_inc$MH() {
        return RuntimeHelper.requireNonNull(constants$410.const$0,"g_ref_count_inc");
    }
    /**
     * {@snippet :
     * void g_ref_count_inc(int* rc);
     * }
     */
    public static void g_ref_count_inc(MemorySegment rc) {
        var mh$ = g_ref_count_inc$MH();
        try {
            mh$.invokeExact(rc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_dec$MH() {
        return RuntimeHelper.requireNonNull(constants$410.const$1,"g_ref_count_dec");
    }
    /**
     * {@snippet :
     * int g_ref_count_dec(int* rc);
     * }
     */
    public static int g_ref_count_dec(MemorySegment rc) {
        var mh$ = g_ref_count_dec$MH();
        try {
            return (int)mh$.invokeExact(rc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_count_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$410.const$2,"g_ref_count_compare");
    }
    /**
     * {@snippet :
     * int g_ref_count_compare(int* rc, int val);
     * }
     */
    public static int g_ref_count_compare(MemorySegment rc, int val) {
        var mh$ = g_ref_count_compare$MH();
        try {
            return (int)mh$.invokeExact(rc, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_init$MH() {
        return RuntimeHelper.requireNonNull(constants$410.const$3,"g_atomic_ref_count_init");
    }
    /**
     * {@snippet :
     * void g_atomic_ref_count_init(int* arc);
     * }
     */
    public static void g_atomic_ref_count_init(MemorySegment arc) {
        var mh$ = g_atomic_ref_count_init$MH();
        try {
            mh$.invokeExact(arc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_inc$MH() {
        return RuntimeHelper.requireNonNull(constants$410.const$4,"g_atomic_ref_count_inc");
    }
    /**
     * {@snippet :
     * void g_atomic_ref_count_inc(int* arc);
     * }
     */
    public static void g_atomic_ref_count_inc(MemorySegment arc) {
        var mh$ = g_atomic_ref_count_inc$MH();
        try {
            mh$.invokeExact(arc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_dec$MH() {
        return RuntimeHelper.requireNonNull(constants$410.const$5,"g_atomic_ref_count_dec");
    }
    /**
     * {@snippet :
     * int g_atomic_ref_count_dec(int* arc);
     * }
     */
    public static int g_atomic_ref_count_dec(MemorySegment arc) {
        var mh$ = g_atomic_ref_count_dec$MH();
        try {
            return (int)mh$.invokeExact(arc);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_atomic_ref_count_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$411.const$0,"g_atomic_ref_count_compare");
    }
    /**
     * {@snippet :
     * int g_atomic_ref_count_compare(int* arc, int val);
     * }
     */
    public static int g_atomic_ref_count_compare(MemorySegment arc, int val) {
        var mh$ = g_atomic_ref_count_compare$MH();
        try {
            return (int)mh$.invokeExact(arc, val);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_new$MH() {
        return RuntimeHelper.requireNonNull(constants$411.const$1,"g_ref_string_new");
    }
    /**
     * {@snippet :
     * char* g_ref_string_new(char* str);
     * }
     */
    public static MemorySegment g_ref_string_new(MemorySegment str) {
        var mh$ = g_ref_string_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_new_len$MH() {
        return RuntimeHelper.requireNonNull(constants$411.const$2,"g_ref_string_new_len");
    }
    /**
     * {@snippet :
     * char* g_ref_string_new_len(char* str, long len);
     * }
     */
    public static MemorySegment g_ref_string_new_len(MemorySegment str, long len) {
        var mh$ = g_ref_string_new_len$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_new_intern$MH() {
        return RuntimeHelper.requireNonNull(constants$411.const$3,"g_ref_string_new_intern");
    }
    /**
     * {@snippet :
     * char* g_ref_string_new_intern(char* str);
     * }
     */
    public static MemorySegment g_ref_string_new_intern(MemorySegment str) {
        var mh$ = g_ref_string_new_intern$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_acquire$MH() {
        return RuntimeHelper.requireNonNull(constants$411.const$4,"g_ref_string_acquire");
    }
    /**
     * {@snippet :
     * char* g_ref_string_acquire(char* str);
     * }
     */
    public static MemorySegment g_ref_string_acquire(MemorySegment str) {
        var mh$ = g_ref_string_acquire$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_release$MH() {
        return RuntimeHelper.requireNonNull(constants$411.const$5,"g_ref_string_release");
    }
    /**
     * {@snippet :
     * void g_ref_string_release(char* str);
     * }
     */
    public static void g_ref_string_release(MemorySegment str) {
        var mh$ = g_ref_string_release$MH();
        try {
            mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_ref_string_length$MH() {
        return RuntimeHelper.requireNonNull(constants$412.const$0,"g_ref_string_length");
    }
    /**
     * {@snippet :
     * unsigned long g_ref_string_length(char* str);
     * }
     */
    public static long g_ref_string_length(MemorySegment str) {
        var mh$ = g_ref_string_length$MH();
        try {
            return (long)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef char GRefString;
     * }
     */
    public static final OfByte GRefString = JAVA_BYTE;
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_COMPILE = 0;
     * }
     */
    public static int G_REGEX_ERROR_COMPILE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_OPTIMIZE = 1;
     * }
     */
    public static int G_REGEX_ERROR_OPTIMIZE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_REPLACE = 2;
     * }
     */
    public static int G_REGEX_ERROR_REPLACE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_MATCH = 3;
     * }
     */
    public static int G_REGEX_ERROR_MATCH() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_INTERNAL = 4;
     * }
     */
    public static int G_REGEX_ERROR_INTERNAL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_STRAY_BACKSLASH = 101;
     * }
     */
    public static int G_REGEX_ERROR_STRAY_BACKSLASH() {
        return (int)101L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_MISSING_CONTROL_CHAR = 102;
     * }
     */
    public static int G_REGEX_ERROR_MISSING_CONTROL_CHAR() {
        return (int)102L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_UNRECOGNIZED_ESCAPE = 103;
     * }
     */
    public static int G_REGEX_ERROR_UNRECOGNIZED_ESCAPE() {
        return (int)103L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER = 104;
     * }
     */
    public static int G_REGEX_ERROR_QUANTIFIERS_OUT_OF_ORDER() {
        return (int)104L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_QUANTIFIER_TOO_BIG = 105;
     * }
     */
    public static int G_REGEX_ERROR_QUANTIFIER_TOO_BIG() {
        return (int)105L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS = 106;
     * }
     */
    public static int G_REGEX_ERROR_UNTERMINATED_CHARACTER_CLASS() {
        return (int)106L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS = 107;
     * }
     */
    public static int G_REGEX_ERROR_INVALID_ESCAPE_IN_CHARACTER_CLASS() {
        return (int)107L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_RANGE_OUT_OF_ORDER = 108;
     * }
     */
    public static int G_REGEX_ERROR_RANGE_OUT_OF_ORDER() {
        return (int)108L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_NOTHING_TO_REPEAT = 109;
     * }
     */
    public static int G_REGEX_ERROR_NOTHING_TO_REPEAT() {
        return (int)109L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_UNRECOGNIZED_CHARACTER = 112;
     * }
     */
    public static int G_REGEX_ERROR_UNRECOGNIZED_CHARACTER() {
        return (int)112L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS = 113;
     * }
     */
    public static int G_REGEX_ERROR_POSIX_NAMED_CLASS_OUTSIDE_CLASS() {
        return (int)113L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_UNMATCHED_PARENTHESIS = 114;
     * }
     */
    public static int G_REGEX_ERROR_UNMATCHED_PARENTHESIS() {
        return (int)114L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE = 115;
     * }
     */
    public static int G_REGEX_ERROR_INEXISTENT_SUBPATTERN_REFERENCE() {
        return (int)115L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_UNTERMINATED_COMMENT = 118;
     * }
     */
    public static int G_REGEX_ERROR_UNTERMINATED_COMMENT() {
        return (int)118L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_EXPRESSION_TOO_LARGE = 120;
     * }
     */
    public static int G_REGEX_ERROR_EXPRESSION_TOO_LARGE() {
        return (int)120L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_MEMORY_ERROR = 121;
     * }
     */
    public static int G_REGEX_ERROR_MEMORY_ERROR() {
        return (int)121L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND = 125;
     * }
     */
    public static int G_REGEX_ERROR_VARIABLE_LENGTH_LOOKBEHIND() {
        return (int)125L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_MALFORMED_CONDITION = 126;
     * }
     */
    public static int G_REGEX_ERROR_MALFORMED_CONDITION() {
        return (int)126L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES = 127;
     * }
     */
    public static int G_REGEX_ERROR_TOO_MANY_CONDITIONAL_BRANCHES() {
        return (int)127L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_ASSERTION_EXPECTED = 128;
     * }
     */
    public static int G_REGEX_ERROR_ASSERTION_EXPECTED() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME = 130;
     * }
     */
    public static int G_REGEX_ERROR_UNKNOWN_POSIX_CLASS_NAME() {
        return (int)130L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED = 131;
     * }
     */
    public static int G_REGEX_ERROR_POSIX_COLLATING_ELEMENTS_NOT_SUPPORTED() {
        return (int)131L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_HEX_CODE_TOO_LARGE = 134;
     * }
     */
    public static int G_REGEX_ERROR_HEX_CODE_TOO_LARGE() {
        return (int)134L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_INVALID_CONDITION = 135;
     * }
     */
    public static int G_REGEX_ERROR_INVALID_CONDITION() {
        return (int)135L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND = 136;
     * }
     */
    public static int G_REGEX_ERROR_SINGLE_BYTE_MATCH_IN_LOOKBEHIND() {
        return (int)136L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_INFINITE_LOOP = 140;
     * }
     */
    public static int G_REGEX_ERROR_INFINITE_LOOP() {
        return (int)140L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR = 142;
     * }
     */
    public static int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME_TERMINATOR() {
        return (int)142L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME = 143;
     * }
     */
    public static int G_REGEX_ERROR_DUPLICATE_SUBPATTERN_NAME() {
        return (int)143L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_MALFORMED_PROPERTY = 146;
     * }
     */
    public static int G_REGEX_ERROR_MALFORMED_PROPERTY() {
        return (int)146L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_UNKNOWN_PROPERTY = 147;
     * }
     */
    public static int G_REGEX_ERROR_UNKNOWN_PROPERTY() {
        return (int)147L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG = 148;
     * }
     */
    public static int G_REGEX_ERROR_SUBPATTERN_NAME_TOO_LONG() {
        return (int)148L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_TOO_MANY_SUBPATTERNS = 149;
     * }
     */
    public static int G_REGEX_ERROR_TOO_MANY_SUBPATTERNS() {
        return (int)149L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_INVALID_OCTAL_VALUE = 151;
     * }
     */
    public static int G_REGEX_ERROR_INVALID_OCTAL_VALUE() {
        return (int)151L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE = 154;
     * }
     */
    public static int G_REGEX_ERROR_TOO_MANY_BRANCHES_IN_DEFINE() {
        return (int)154L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_DEFINE_REPETION = 155;
     * }
     */
    public static int G_REGEX_ERROR_DEFINE_REPETION() {
        return (int)155L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS = 156;
     * }
     */
    public static int G_REGEX_ERROR_INCONSISTENT_NEWLINE_OPTIONS() {
        return (int)156L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_MISSING_BACK_REFERENCE = 157;
     * }
     */
    public static int G_REGEX_ERROR_MISSING_BACK_REFERENCE() {
        return (int)157L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE = 158;
     * }
     */
    public static int G_REGEX_ERROR_INVALID_RELATIVE_REFERENCE() {
        return (int)158L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN = 159;
     * }
     */
    public static int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_FORBIDDEN() {
        return (int)159L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB = 160;
     * }
     */
    public static int G_REGEX_ERROR_UNKNOWN_BACKTRACKING_CONTROL_VERB() {
        return (int)160L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_NUMBER_TOO_BIG = 161;
     * }
     */
    public static int G_REGEX_ERROR_NUMBER_TOO_BIG() {
        return (int)161L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_MISSING_SUBPATTERN_NAME = 162;
     * }
     */
    public static int G_REGEX_ERROR_MISSING_SUBPATTERN_NAME() {
        return (int)162L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_MISSING_DIGIT = 163;
     * }
     */
    public static int G_REGEX_ERROR_MISSING_DIGIT() {
        return (int)163L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_INVALID_DATA_CHARACTER = 164;
     * }
     */
    public static int G_REGEX_ERROR_INVALID_DATA_CHARACTER() {
        return (int)164L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME = 165;
     * }
     */
    public static int G_REGEX_ERROR_EXTRA_SUBPATTERN_NAME() {
        return (int)165L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED = 166;
     * }
     */
    public static int G_REGEX_ERROR_BACKTRACKING_CONTROL_VERB_ARGUMENT_REQUIRED() {
        return (int)166L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_INVALID_CONTROL_CHAR = 168;
     * }
     */
    public static int G_REGEX_ERROR_INVALID_CONTROL_CHAR() {
        return (int)168L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_MISSING_NAME = 169;
     * }
     */
    public static int G_REGEX_ERROR_MISSING_NAME() {
        return (int)169L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS = 171;
     * }
     */
    public static int G_REGEX_ERROR_NOT_SUPPORTED_IN_CLASS() {
        return (int)171L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES = 172;
     * }
     */
    public static int G_REGEX_ERROR_TOO_MANY_FORWARD_REFERENCES() {
        return (int)172L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_NAME_TOO_LONG = 175;
     * }
     */
    public static int G_REGEX_ERROR_NAME_TOO_LONG() {
        return (int)175L;
    }
    /**
     * {@snippet :
     * enum GRegexError.G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE = 176;
     * }
     */
    public static int G_REGEX_ERROR_CHARACTER_VALUE_TOO_LARGE() {
        return (int)176L;
    }
    public static MethodHandle g_regex_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$412.const$1,"g_regex_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_regex_error_quark();
     * }
     */
    public static int g_regex_error_quark() {
        var mh$ = g_regex_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_DEFAULT = 0;
     * }
     */
    public static int G_REGEX_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_CASELESS = 1;
     * }
     */
    public static int G_REGEX_CASELESS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_MULTILINE = 2;
     * }
     */
    public static int G_REGEX_MULTILINE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_DOTALL = 4;
     * }
     */
    public static int G_REGEX_DOTALL() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_EXTENDED = 8;
     * }
     */
    public static int G_REGEX_EXTENDED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_ANCHORED = 16;
     * }
     */
    public static int G_REGEX_ANCHORED() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_DOLLAR_ENDONLY = 32;
     * }
     */
    public static int G_REGEX_DOLLAR_ENDONLY() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_UNGREEDY = 512;
     * }
     */
    public static int G_REGEX_UNGREEDY() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_RAW = 2048;
     * }
     */
    public static int G_REGEX_RAW() {
        return (int)2048L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_NO_AUTO_CAPTURE = 4096;
     * }
     */
    public static int G_REGEX_NO_AUTO_CAPTURE() {
        return (int)4096L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_OPTIMIZE = 8192;
     * }
     */
    public static int G_REGEX_OPTIMIZE() {
        return (int)8192L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_FIRSTLINE = 262144;
     * }
     */
    public static int G_REGEX_FIRSTLINE() {
        return (int)262144L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_DUPNAMES = 524288;
     * }
     */
    public static int G_REGEX_DUPNAMES() {
        return (int)524288L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_NEWLINE_CR = 1048576;
     * }
     */
    public static int G_REGEX_NEWLINE_CR() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_NEWLINE_LF = 2097152;
     * }
     */
    public static int G_REGEX_NEWLINE_LF() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_NEWLINE_CRLF = 3145728;
     * }
     */
    public static int G_REGEX_NEWLINE_CRLF() {
        return (int)3145728L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_NEWLINE_ANYCRLF = 5242880;
     * }
     */
    public static int G_REGEX_NEWLINE_ANYCRLF() {
        return (int)5242880L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_BSR_ANYCRLF = 8388608;
     * }
     */
    public static int G_REGEX_BSR_ANYCRLF() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags.G_REGEX_JAVASCRIPT_COMPAT = 33554432;
     * }
     */
    public static int G_REGEX_JAVASCRIPT_COMPAT() {
        return (int)33554432L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_DEFAULT = 0;
     * }
     */
    public static int G_REGEX_MATCH_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_ANCHORED = 16;
     * }
     */
    public static int G_REGEX_MATCH_ANCHORED() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_NOTBOL = 128;
     * }
     */
    public static int G_REGEX_MATCH_NOTBOL() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_NOTEOL = 256;
     * }
     */
    public static int G_REGEX_MATCH_NOTEOL() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_NOTEMPTY = 1024;
     * }
     */
    public static int G_REGEX_MATCH_NOTEMPTY() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_PARTIAL = 32768;
     * }
     */
    public static int G_REGEX_MATCH_PARTIAL() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_NEWLINE_CR = 1048576;
     * }
     */
    public static int G_REGEX_MATCH_NEWLINE_CR() {
        return (int)1048576L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_NEWLINE_LF = 2097152;
     * }
     */
    public static int G_REGEX_MATCH_NEWLINE_LF() {
        return (int)2097152L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_NEWLINE_CRLF = 3145728;
     * }
     */
    public static int G_REGEX_MATCH_NEWLINE_CRLF() {
        return (int)3145728L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_NEWLINE_ANY = 4194304;
     * }
     */
    public static int G_REGEX_MATCH_NEWLINE_ANY() {
        return (int)4194304L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_NEWLINE_ANYCRLF = 5242880;
     * }
     */
    public static int G_REGEX_MATCH_NEWLINE_ANYCRLF() {
        return (int)5242880L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_BSR_ANYCRLF = 8388608;
     * }
     */
    public static int G_REGEX_MATCH_BSR_ANYCRLF() {
        return (int)8388608L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_BSR_ANY = 16777216;
     * }
     */
    public static int G_REGEX_MATCH_BSR_ANY() {
        return (int)16777216L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_PARTIAL_SOFT = 32768;
     * }
     */
    public static int G_REGEX_MATCH_PARTIAL_SOFT() {
        return (int)32768L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_PARTIAL_HARD = 134217728;
     * }
     */
    public static int G_REGEX_MATCH_PARTIAL_HARD() {
        return (int)134217728L;
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags.G_REGEX_MATCH_NOTEMPTY_ATSTART = 268435456;
     * }
     */
    public static int G_REGEX_MATCH_NOTEMPTY_ATSTART() {
        return (int)268435456L;
    }
    public static MethodHandle g_regex_new$MH() {
        return RuntimeHelper.requireNonNull(constants$412.const$3,"g_regex_new");
    }
    /**
     * {@snippet :
     * struct _GRegex* g_regex_new(char* pattern, enum GRegexCompileFlags compile_options, enum GRegexMatchFlags match_options, struct _GError** error);
     * }
     */
    public static MemorySegment g_regex_new(MemorySegment pattern, int compile_options, int match_options, MemorySegment error) {
        var mh$ = g_regex_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pattern, compile_options, match_options, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$412.const$4,"g_regex_ref");
    }
    /**
     * {@snippet :
     * struct _GRegex* g_regex_ref(struct _GRegex* regex);
     * }
     */
    public static MemorySegment g_regex_ref(MemorySegment regex) {
        var mh$ = g_regex_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$412.const$5,"g_regex_unref");
    }
    /**
     * {@snippet :
     * void g_regex_unref(struct _GRegex* regex);
     * }
     */
    public static void g_regex_unref(MemorySegment regex) {
        var mh$ = g_regex_unref$MH();
        try {
            mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_pattern$MH() {
        return RuntimeHelper.requireNonNull(constants$413.const$0,"g_regex_get_pattern");
    }
    /**
     * {@snippet :
     * char* g_regex_get_pattern(struct _GRegex* regex);
     * }
     */
    public static MemorySegment g_regex_get_pattern(MemorySegment regex) {
        var mh$ = g_regex_get_pattern$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_max_backref$MH() {
        return RuntimeHelper.requireNonNull(constants$413.const$1,"g_regex_get_max_backref");
    }
    /**
     * {@snippet :
     * int g_regex_get_max_backref(struct _GRegex* regex);
     * }
     */
    public static int g_regex_get_max_backref(MemorySegment regex) {
        var mh$ = g_regex_get_max_backref$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_capture_count$MH() {
        return RuntimeHelper.requireNonNull(constants$413.const$2,"g_regex_get_capture_count");
    }
    /**
     * {@snippet :
     * int g_regex_get_capture_count(struct _GRegex* regex);
     * }
     */
    public static int g_regex_get_capture_count(MemorySegment regex) {
        var mh$ = g_regex_get_capture_count$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_has_cr_or_lf$MH() {
        return RuntimeHelper.requireNonNull(constants$413.const$3,"g_regex_get_has_cr_or_lf");
    }
    /**
     * {@snippet :
     * int g_regex_get_has_cr_or_lf(struct _GRegex* regex);
     * }
     */
    public static int g_regex_get_has_cr_or_lf(MemorySegment regex) {
        var mh$ = g_regex_get_has_cr_or_lf$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_max_lookbehind$MH() {
        return RuntimeHelper.requireNonNull(constants$413.const$4,"g_regex_get_max_lookbehind");
    }
    /**
     * {@snippet :
     * int g_regex_get_max_lookbehind(struct _GRegex* regex);
     * }
     */
    public static int g_regex_get_max_lookbehind(MemorySegment regex) {
        var mh$ = g_regex_get_max_lookbehind$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_string_number$MH() {
        return RuntimeHelper.requireNonNull(constants$413.const$5,"g_regex_get_string_number");
    }
    /**
     * {@snippet :
     * int g_regex_get_string_number(struct _GRegex* regex, char* name);
     * }
     */
    public static int g_regex_get_string_number(MemorySegment regex, MemorySegment name) {
        var mh$ = g_regex_get_string_number$MH();
        try {
            return (int)mh$.invokeExact(regex, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_escape_string$MH() {
        return RuntimeHelper.requireNonNull(constants$414.const$0,"g_regex_escape_string");
    }
    /**
     * {@snippet :
     * char* g_regex_escape_string(char* string, int length);
     * }
     */
    public static MemorySegment g_regex_escape_string(MemorySegment string, int length) {
        var mh$ = g_regex_escape_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_escape_nul$MH() {
        return RuntimeHelper.requireNonNull(constants$414.const$1,"g_regex_escape_nul");
    }
    /**
     * {@snippet :
     * char* g_regex_escape_nul(char* string, int length);
     * }
     */
    public static MemorySegment g_regex_escape_nul(MemorySegment string, int length) {
        var mh$ = g_regex_escape_nul$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(string, length);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_compile_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$414.const$2,"g_regex_get_compile_flags");
    }
    /**
     * {@snippet :
     * enum GRegexCompileFlags g_regex_get_compile_flags(struct _GRegex* regex);
     * }
     */
    public static int g_regex_get_compile_flags(MemorySegment regex) {
        var mh$ = g_regex_get_compile_flags$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_get_match_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$414.const$3,"g_regex_get_match_flags");
    }
    /**
     * {@snippet :
     * enum GRegexMatchFlags g_regex_get_match_flags(struct _GRegex* regex);
     * }
     */
    public static int g_regex_get_match_flags(MemorySegment regex) {
        var mh$ = g_regex_get_match_flags$MH();
        try {
            return (int)mh$.invokeExact(regex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_simple$MH() {
        return RuntimeHelper.requireNonNull(constants$414.const$5,"g_regex_match_simple");
    }
    /**
     * {@snippet :
     * int g_regex_match_simple(char* pattern, char* string, enum GRegexCompileFlags compile_options, enum GRegexMatchFlags match_options);
     * }
     */
    public static int g_regex_match_simple(MemorySegment pattern, MemorySegment string, int compile_options, int match_options) {
        var mh$ = g_regex_match_simple$MH();
        try {
            return (int)mh$.invokeExact(pattern, string, compile_options, match_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match$MH() {
        return RuntimeHelper.requireNonNull(constants$415.const$0,"g_regex_match");
    }
    /**
     * {@snippet :
     * int g_regex_match(struct _GRegex* regex, char* string, enum GRegexMatchFlags match_options, struct _GMatchInfo** match_info);
     * }
     */
    public static int g_regex_match(MemorySegment regex, MemorySegment string, int match_options, MemorySegment match_info) {
        var mh$ = g_regex_match$MH();
        try {
            return (int)mh$.invokeExact(regex, string, match_options, match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_full$MH() {
        return RuntimeHelper.requireNonNull(constants$415.const$2,"g_regex_match_full");
    }
    /**
     * {@snippet :
     * int g_regex_match_full(struct _GRegex* regex, char* string, long string_len, int start_position, enum GRegexMatchFlags match_options, struct _GMatchInfo** match_info, struct _GError** error);
     * }
     */
    public static int g_regex_match_full(MemorySegment regex, MemorySegment string, long string_len, int start_position, int match_options, MemorySegment match_info, MemorySegment error) {
        var mh$ = g_regex_match_full$MH();
        try {
            return (int)mh$.invokeExact(regex, string, string_len, start_position, match_options, match_info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_all$MH() {
        return RuntimeHelper.requireNonNull(constants$415.const$3,"g_regex_match_all");
    }
    /**
     * {@snippet :
     * int g_regex_match_all(struct _GRegex* regex, char* string, enum GRegexMatchFlags match_options, struct _GMatchInfo** match_info);
     * }
     */
    public static int g_regex_match_all(MemorySegment regex, MemorySegment string, int match_options, MemorySegment match_info) {
        var mh$ = g_regex_match_all$MH();
        try {
            return (int)mh$.invokeExact(regex, string, match_options, match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_match_all_full$MH() {
        return RuntimeHelper.requireNonNull(constants$415.const$4,"g_regex_match_all_full");
    }
    /**
     * {@snippet :
     * int g_regex_match_all_full(struct _GRegex* regex, char* string, long string_len, int start_position, enum GRegexMatchFlags match_options, struct _GMatchInfo** match_info, struct _GError** error);
     * }
     */
    public static int g_regex_match_all_full(MemorySegment regex, MemorySegment string, long string_len, int start_position, int match_options, MemorySegment match_info, MemorySegment error) {
        var mh$ = g_regex_match_all_full$MH();
        try {
            return (int)mh$.invokeExact(regex, string, string_len, start_position, match_options, match_info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_split_simple$MH() {
        return RuntimeHelper.requireNonNull(constants$415.const$6,"g_regex_split_simple");
    }
    /**
     * {@snippet :
     * char** g_regex_split_simple(char* pattern, char* string, enum GRegexCompileFlags compile_options, enum GRegexMatchFlags match_options);
     * }
     */
    public static MemorySegment g_regex_split_simple(MemorySegment pattern, MemorySegment string, int compile_options, int match_options) {
        var mh$ = g_regex_split_simple$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(pattern, string, compile_options, match_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_split$MH() {
        return RuntimeHelper.requireNonNull(constants$416.const$0,"g_regex_split");
    }
    /**
     * {@snippet :
     * char** g_regex_split(struct _GRegex* regex, char* string, enum GRegexMatchFlags match_options);
     * }
     */
    public static MemorySegment g_regex_split(MemorySegment regex, MemorySegment string, int match_options) {
        var mh$ = g_regex_split$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(regex, string, match_options);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_split_full$MH() {
        return RuntimeHelper.requireNonNull(constants$416.const$2,"g_regex_split_full");
    }
    /**
     * {@snippet :
     * char** g_regex_split_full(struct _GRegex* regex, char* string, long string_len, int start_position, enum GRegexMatchFlags match_options, int max_tokens, struct _GError** error);
     * }
     */
    public static MemorySegment g_regex_split_full(MemorySegment regex, MemorySegment string, long string_len, int start_position, int match_options, int max_tokens, MemorySegment error) {
        var mh$ = g_regex_split_full$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(regex, string, string_len, start_position, match_options, max_tokens, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$416.const$4,"g_regex_replace");
    }
    /**
     * {@snippet :
     * char* g_regex_replace(struct _GRegex* regex, char* string, long string_len, int start_position, char* replacement, enum GRegexMatchFlags match_options, struct _GError** error);
     * }
     */
    public static MemorySegment g_regex_replace(MemorySegment regex, MemorySegment string, long string_len, int start_position, MemorySegment replacement, int match_options, MemorySegment error) {
        var mh$ = g_regex_replace$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(regex, string, string_len, start_position, replacement, match_options, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_replace_literal$MH() {
        return RuntimeHelper.requireNonNull(constants$416.const$5,"g_regex_replace_literal");
    }
    /**
     * {@snippet :
     * char* g_regex_replace_literal(struct _GRegex* regex, char* string, long string_len, int start_position, char* replacement, enum GRegexMatchFlags match_options, struct _GError** error);
     * }
     */
    public static MemorySegment g_regex_replace_literal(MemorySegment regex, MemorySegment string, long string_len, int start_position, MemorySegment replacement, int match_options, MemorySegment error) {
        var mh$ = g_regex_replace_literal$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(regex, string, string_len, start_position, replacement, match_options, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_replace_eval$MH() {
        return RuntimeHelper.requireNonNull(constants$417.const$2,"g_regex_replace_eval");
    }
    /**
     * {@snippet :
     * char* g_regex_replace_eval(struct _GRegex* regex, char* string, long string_len, int start_position, enum GRegexMatchFlags match_options, int (*eval)(struct _GMatchInfo*,struct _GString*,void*), void* user_data, struct _GError** error);
     * }
     */
    public static MemorySegment g_regex_replace_eval(MemorySegment regex, MemorySegment string, long string_len, int start_position, int match_options, MemorySegment eval, MemorySegment user_data, MemorySegment error) {
        var mh$ = g_regex_replace_eval$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(regex, string, string_len, start_position, match_options, eval, user_data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_regex_check_replacement$MH() {
        return RuntimeHelper.requireNonNull(constants$417.const$3,"g_regex_check_replacement");
    }
    /**
     * {@snippet :
     * int g_regex_check_replacement(char* replacement, int* has_references, struct _GError** error);
     * }
     */
    public static int g_regex_check_replacement(MemorySegment replacement, MemorySegment has_references, MemorySegment error) {
        var mh$ = g_regex_check_replacement$MH();
        try {
            return (int)mh$.invokeExact(replacement, has_references, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_get_regex$MH() {
        return RuntimeHelper.requireNonNull(constants$417.const$4,"g_match_info_get_regex");
    }
    /**
     * {@snippet :
     * struct _GRegex* g_match_info_get_regex(struct _GMatchInfo* match_info);
     * }
     */
    public static MemorySegment g_match_info_get_regex(MemorySegment match_info) {
        var mh$ = g_match_info_get_regex$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_get_string$MH() {
        return RuntimeHelper.requireNonNull(constants$417.const$5,"g_match_info_get_string");
    }
    /**
     * {@snippet :
     * char* g_match_info_get_string(struct _GMatchInfo* match_info);
     * }
     */
    public static MemorySegment g_match_info_get_string(MemorySegment match_info) {
        var mh$ = g_match_info_get_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$418.const$0,"g_match_info_ref");
    }
    /**
     * {@snippet :
     * struct _GMatchInfo* g_match_info_ref(struct _GMatchInfo* match_info);
     * }
     */
    public static MemorySegment g_match_info_ref(MemorySegment match_info) {
        var mh$ = g_match_info_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$418.const$1,"g_match_info_unref");
    }
    /**
     * {@snippet :
     * void g_match_info_unref(struct _GMatchInfo* match_info);
     * }
     */
    public static void g_match_info_unref(MemorySegment match_info) {
        var mh$ = g_match_info_unref$MH();
        try {
            mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_free$MH() {
        return RuntimeHelper.requireNonNull(constants$418.const$2,"g_match_info_free");
    }
    /**
     * {@snippet :
     * void g_match_info_free(struct _GMatchInfo* match_info);
     * }
     */
    public static void g_match_info_free(MemorySegment match_info) {
        var mh$ = g_match_info_free$MH();
        try {
            mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_next$MH() {
        return RuntimeHelper.requireNonNull(constants$418.const$3,"g_match_info_next");
    }
    /**
     * {@snippet :
     * int g_match_info_next(struct _GMatchInfo* match_info, struct _GError** error);
     * }
     */
    public static int g_match_info_next(MemorySegment match_info, MemorySegment error) {
        var mh$ = g_match_info_next$MH();
        try {
            return (int)mh$.invokeExact(match_info, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_matches$MH() {
        return RuntimeHelper.requireNonNull(constants$418.const$4,"g_match_info_matches");
    }
    /**
     * {@snippet :
     * int g_match_info_matches(struct _GMatchInfo* match_info);
     * }
     */
    public static int g_match_info_matches(MemorySegment match_info) {
        var mh$ = g_match_info_matches$MH();
        try {
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_get_match_count$MH() {
        return RuntimeHelper.requireNonNull(constants$418.const$5,"g_match_info_get_match_count");
    }
    /**
     * {@snippet :
     * int g_match_info_get_match_count(struct _GMatchInfo* match_info);
     * }
     */
    public static int g_match_info_get_match_count(MemorySegment match_info) {
        var mh$ = g_match_info_get_match_count$MH();
        try {
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_is_partial_match$MH() {
        return RuntimeHelper.requireNonNull(constants$419.const$0,"g_match_info_is_partial_match");
    }
    /**
     * {@snippet :
     * int g_match_info_is_partial_match(struct _GMatchInfo* match_info);
     * }
     */
    public static int g_match_info_is_partial_match(MemorySegment match_info) {
        var mh$ = g_match_info_is_partial_match$MH();
        try {
            return (int)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_expand_references$MH() {
        return RuntimeHelper.requireNonNull(constants$419.const$1,"g_match_info_expand_references");
    }
    /**
     * {@snippet :
     * char* g_match_info_expand_references(struct _GMatchInfo* match_info, char* string_to_expand, struct _GError** error);
     * }
     */
    public static MemorySegment g_match_info_expand_references(MemorySegment match_info, MemorySegment string_to_expand, MemorySegment error) {
        var mh$ = g_match_info_expand_references$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(match_info, string_to_expand, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch$MH() {
        return RuntimeHelper.requireNonNull(constants$419.const$2,"g_match_info_fetch");
    }
    /**
     * {@snippet :
     * char* g_match_info_fetch(struct _GMatchInfo* match_info, int match_num);
     * }
     */
    public static MemorySegment g_match_info_fetch(MemorySegment match_info, int match_num) {
        var mh$ = g_match_info_fetch$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(match_info, match_num);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$419.const$3,"g_match_info_fetch_pos");
    }
    /**
     * {@snippet :
     * int g_match_info_fetch_pos(struct _GMatchInfo* match_info, int match_num, int* start_pos, int* end_pos);
     * }
     */
    public static int g_match_info_fetch_pos(MemorySegment match_info, int match_num, MemorySegment start_pos, MemorySegment end_pos) {
        var mh$ = g_match_info_fetch_pos$MH();
        try {
            return (int)mh$.invokeExact(match_info, match_num, start_pos, end_pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_named$MH() {
        return RuntimeHelper.requireNonNull(constants$419.const$4,"g_match_info_fetch_named");
    }
    /**
     * {@snippet :
     * char* g_match_info_fetch_named(struct _GMatchInfo* match_info, char* name);
     * }
     */
    public static MemorySegment g_match_info_fetch_named(MemorySegment match_info, MemorySegment name) {
        var mh$ = g_match_info_fetch_named$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(match_info, name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_named_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$419.const$5,"g_match_info_fetch_named_pos");
    }
    /**
     * {@snippet :
     * int g_match_info_fetch_named_pos(struct _GMatchInfo* match_info, char* name, int* start_pos, int* end_pos);
     * }
     */
    public static int g_match_info_fetch_named_pos(MemorySegment match_info, MemorySegment name, MemorySegment start_pos, MemorySegment end_pos) {
        var mh$ = g_match_info_fetch_named_pos$MH();
        try {
            return (int)mh$.invokeExact(match_info, name, start_pos, end_pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_match_info_fetch_all$MH() {
        return RuntimeHelper.requireNonNull(constants$420.const$0,"g_match_info_fetch_all");
    }
    /**
     * {@snippet :
     * char** g_match_info_fetch_all(struct _GMatchInfo* match_info);
     * }
     */
    public static MemorySegment g_match_info_fetch_all(MemorySegment match_info) {
        var mh$ = g_match_info_fetch_all$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(match_info);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GErrorType.G_ERR_UNKNOWN = 0;
     * }
     */
    public static int G_ERR_UNKNOWN() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GErrorType.G_ERR_UNEXP_EOF = 1;
     * }
     */
    public static int G_ERR_UNEXP_EOF() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GErrorType.G_ERR_UNEXP_EOF_IN_STRING = 2;
     * }
     */
    public static int G_ERR_UNEXP_EOF_IN_STRING() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GErrorType.G_ERR_UNEXP_EOF_IN_COMMENT = 3;
     * }
     */
    public static int G_ERR_UNEXP_EOF_IN_COMMENT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GErrorType.G_ERR_NON_DIGIT_IN_CONST = 4;
     * }
     */
    public static int G_ERR_NON_DIGIT_IN_CONST() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GErrorType.G_ERR_DIGIT_RADIX = 5;
     * }
     */
    public static int G_ERR_DIGIT_RADIX() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GErrorType.G_ERR_FLOAT_RADIX = 6;
     * }
     */
    public static int G_ERR_FLOAT_RADIX() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GErrorType.G_ERR_FLOAT_MALFORMED = 7;
     * }
     */
    public static int G_ERR_FLOAT_MALFORMED() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_EOF = 0;
     * }
     */
    public static int G_TOKEN_EOF() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_LEFT_PAREN = 40;
     * }
     */
    public static int G_TOKEN_LEFT_PAREN() {
        return (int)40L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_RIGHT_PAREN = 41;
     * }
     */
    public static int G_TOKEN_RIGHT_PAREN() {
        return (int)41L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_LEFT_CURLY = 123;
     * }
     */
    public static int G_TOKEN_LEFT_CURLY() {
        return (int)123L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_RIGHT_CURLY = 125;
     * }
     */
    public static int G_TOKEN_RIGHT_CURLY() {
        return (int)125L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_LEFT_BRACE = 91;
     * }
     */
    public static int G_TOKEN_LEFT_BRACE() {
        return (int)91L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_RIGHT_BRACE = 93;
     * }
     */
    public static int G_TOKEN_RIGHT_BRACE() {
        return (int)93L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_EQUAL_SIGN = 61;
     * }
     */
    public static int G_TOKEN_EQUAL_SIGN() {
        return (int)61L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_COMMA = 44;
     * }
     */
    public static int G_TOKEN_COMMA() {
        return (int)44L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_NONE = 256;
     * }
     */
    public static int G_TOKEN_NONE() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_ERROR = 257;
     * }
     */
    public static int G_TOKEN_ERROR() {
        return (int)257L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_CHAR = 258;
     * }
     */
    public static int G_TOKEN_CHAR() {
        return (int)258L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_BINARY = 259;
     * }
     */
    public static int G_TOKEN_BINARY() {
        return (int)259L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_OCTAL = 260;
     * }
     */
    public static int G_TOKEN_OCTAL() {
        return (int)260L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_INT = 261;
     * }
     */
    public static int G_TOKEN_INT() {
        return (int)261L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_HEX = 262;
     * }
     */
    public static int G_TOKEN_HEX() {
        return (int)262L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_FLOAT = 263;
     * }
     */
    public static int G_TOKEN_FLOAT() {
        return (int)263L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_STRING = 264;
     * }
     */
    public static int G_TOKEN_STRING() {
        return (int)264L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_SYMBOL = 265;
     * }
     */
    public static int G_TOKEN_SYMBOL() {
        return (int)265L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_IDENTIFIER = 266;
     * }
     */
    public static int G_TOKEN_IDENTIFIER() {
        return (int)266L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_IDENTIFIER_NULL = 267;
     * }
     */
    public static int G_TOKEN_IDENTIFIER_NULL() {
        return (int)267L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_COMMENT_SINGLE = 268;
     * }
     */
    public static int G_TOKEN_COMMENT_SINGLE() {
        return (int)268L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_COMMENT_MULTI = 269;
     * }
     */
    public static int G_TOKEN_COMMENT_MULTI() {
        return (int)269L;
    }
    /**
     * {@snippet :
     * enum GTokenType.G_TOKEN_LAST = 270;
     * }
     */
    public static int G_TOKEN_LAST() {
        return (int)270L;
    }
    public static MethodHandle g_scanner_new$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$1,"g_scanner_new");
    }
    /**
     * {@snippet :
     * struct _GScanner* g_scanner_new(struct _GScannerConfig* config_templ);
     * }
     */
    public static MemorySegment g_scanner_new(MemorySegment config_templ) {
        var mh$ = g_scanner_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(config_templ);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$2,"g_scanner_destroy");
    }
    /**
     * {@snippet :
     * void g_scanner_destroy(struct _GScanner* scanner);
     * }
     */
    public static void g_scanner_destroy(MemorySegment scanner) {
        var mh$ = g_scanner_destroy$MH();
        try {
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_input_file$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$3,"g_scanner_input_file");
    }
    /**
     * {@snippet :
     * void g_scanner_input_file(struct _GScanner* scanner, int input_fd);
     * }
     */
    public static void g_scanner_input_file(MemorySegment scanner, int input_fd) {
        var mh$ = g_scanner_input_file$MH();
        try {
            mh$.invokeExact(scanner, input_fd);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_sync_file_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$4,"g_scanner_sync_file_offset");
    }
    /**
     * {@snippet :
     * void g_scanner_sync_file_offset(struct _GScanner* scanner);
     * }
     */
    public static void g_scanner_sync_file_offset(MemorySegment scanner) {
        var mh$ = g_scanner_sync_file_offset$MH();
        try {
            mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_input_text$MH() {
        return RuntimeHelper.requireNonNull(constants$427.const$5,"g_scanner_input_text");
    }
    /**
     * {@snippet :
     * void g_scanner_input_text(struct _GScanner* scanner, char* text, unsigned int text_len);
     * }
     */
    public static void g_scanner_input_text(MemorySegment scanner, MemorySegment text, int text_len) {
        var mh$ = g_scanner_input_text$MH();
        try {
            mh$.invokeExact(scanner, text, text_len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_get_next_token$MH() {
        return RuntimeHelper.requireNonNull(constants$428.const$0,"g_scanner_get_next_token");
    }
    /**
     * {@snippet :
     * enum GTokenType g_scanner_get_next_token(struct _GScanner* scanner);
     * }
     */
    public static int g_scanner_get_next_token(MemorySegment scanner) {
        var mh$ = g_scanner_get_next_token$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_peek_next_token$MH() {
        return RuntimeHelper.requireNonNull(constants$428.const$1,"g_scanner_peek_next_token");
    }
    /**
     * {@snippet :
     * enum GTokenType g_scanner_peek_next_token(struct _GScanner* scanner);
     * }
     */
    public static int g_scanner_peek_next_token(MemorySegment scanner) {
        var mh$ = g_scanner_peek_next_token$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_token$MH() {
        return RuntimeHelper.requireNonNull(constants$428.const$2,"g_scanner_cur_token");
    }
    /**
     * {@snippet :
     * enum GTokenType g_scanner_cur_token(struct _GScanner* scanner);
     * }
     */
    public static int g_scanner_cur_token(MemorySegment scanner) {
        var mh$ = g_scanner_cur_token$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_value$MH() {
        return RuntimeHelper.requireNonNull(constants$428.const$4,"g_scanner_cur_value");
    }
    /**
     * {@snippet :
     * union _GTokenValue g_scanner_cur_value(struct _GScanner* scanner);
     * }
     */
    public static MemorySegment g_scanner_cur_value(SegmentAllocator allocator, MemorySegment scanner) {
        var mh$ = g_scanner_cur_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(allocator, scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_line$MH() {
        return RuntimeHelper.requireNonNull(constants$428.const$5,"g_scanner_cur_line");
    }
    /**
     * {@snippet :
     * unsigned int g_scanner_cur_line(struct _GScanner* scanner);
     * }
     */
    public static int g_scanner_cur_line(MemorySegment scanner) {
        var mh$ = g_scanner_cur_line$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_cur_position$MH() {
        return RuntimeHelper.requireNonNull(constants$429.const$0,"g_scanner_cur_position");
    }
    /**
     * {@snippet :
     * unsigned int g_scanner_cur_position(struct _GScanner* scanner);
     * }
     */
    public static int g_scanner_cur_position(MemorySegment scanner) {
        var mh$ = g_scanner_cur_position$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_eof$MH() {
        return RuntimeHelper.requireNonNull(constants$429.const$1,"g_scanner_eof");
    }
    /**
     * {@snippet :
     * int g_scanner_eof(struct _GScanner* scanner);
     * }
     */
    public static int g_scanner_eof(MemorySegment scanner) {
        var mh$ = g_scanner_eof$MH();
        try {
            return (int)mh$.invokeExact(scanner);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_set_scope$MH() {
        return RuntimeHelper.requireNonNull(constants$429.const$2,"g_scanner_set_scope");
    }
    /**
     * {@snippet :
     * unsigned int g_scanner_set_scope(struct _GScanner* scanner, unsigned int scope_id);
     * }
     */
    public static int g_scanner_set_scope(MemorySegment scanner, int scope_id) {
        var mh$ = g_scanner_set_scope$MH();
        try {
            return (int)mh$.invokeExact(scanner, scope_id);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_add_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$429.const$3,"g_scanner_scope_add_symbol");
    }
    /**
     * {@snippet :
     * void g_scanner_scope_add_symbol(struct _GScanner* scanner, unsigned int scope_id, char* symbol, void* value);
     * }
     */
    public static void g_scanner_scope_add_symbol(MemorySegment scanner, int scope_id, MemorySegment symbol, MemorySegment value) {
        var mh$ = g_scanner_scope_add_symbol$MH();
        try {
            mh$.invokeExact(scanner, scope_id, symbol, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_remove_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$429.const$4,"g_scanner_scope_remove_symbol");
    }
    /**
     * {@snippet :
     * void g_scanner_scope_remove_symbol(struct _GScanner* scanner, unsigned int scope_id, char* symbol);
     * }
     */
    public static void g_scanner_scope_remove_symbol(MemorySegment scanner, int scope_id, MemorySegment symbol) {
        var mh$ = g_scanner_scope_remove_symbol$MH();
        try {
            mh$.invokeExact(scanner, scope_id, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_lookup_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$429.const$5,"g_scanner_scope_lookup_symbol");
    }
    /**
     * {@snippet :
     * void* g_scanner_scope_lookup_symbol(struct _GScanner* scanner, unsigned int scope_id, char* symbol);
     * }
     */
    public static MemorySegment g_scanner_scope_lookup_symbol(MemorySegment scanner, int scope_id, MemorySegment symbol) {
        var mh$ = g_scanner_scope_lookup_symbol$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(scanner, scope_id, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_scope_foreach_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$430.const$1,"g_scanner_scope_foreach_symbol");
    }
    /**
     * {@snippet :
     * void g_scanner_scope_foreach_symbol(struct _GScanner* scanner, unsigned int scope_id, void (*func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_scanner_scope_foreach_symbol(MemorySegment scanner, int scope_id, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_scanner_scope_foreach_symbol$MH();
        try {
            mh$.invokeExact(scanner, scope_id, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_lookup_symbol$MH() {
        return RuntimeHelper.requireNonNull(constants$430.const$2,"g_scanner_lookup_symbol");
    }
    /**
     * {@snippet :
     * void* g_scanner_lookup_symbol(struct _GScanner* scanner, char* symbol);
     * }
     */
    public static MemorySegment g_scanner_lookup_symbol(MemorySegment scanner, MemorySegment symbol) {
        var mh$ = g_scanner_lookup_symbol$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(scanner, symbol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_unexp_token$MH() {
        return RuntimeHelper.requireNonNull(constants$430.const$4,"g_scanner_unexp_token");
    }
    /**
     * {@snippet :
     * void g_scanner_unexp_token(struct _GScanner* scanner, enum GTokenType expected_token, char* identifier_spec, char* symbol_spec, char* symbol_name, char* message, int is_error);
     * }
     */
    public static void g_scanner_unexp_token(MemorySegment scanner, int expected_token, MemorySegment identifier_spec, MemorySegment symbol_spec, MemorySegment symbol_name, MemorySegment message, int is_error) {
        var mh$ = g_scanner_unexp_token$MH();
        try {
            mh$.invokeExact(scanner, expected_token, identifier_spec, symbol_spec, symbol_name, message, is_error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_error$MH() {
        return RuntimeHelper.requireNonNull(constants$430.const$5,"g_scanner_error");
    }
    /**
     * {@snippet :
     * void g_scanner_error(struct _GScanner* scanner, char* format,...);
     * }
     */
    public static void g_scanner_error(MemorySegment scanner, MemorySegment format, Object... x2) {
        var mh$ = g_scanner_error$MH();
        try {
            mh$.invokeExact(scanner, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_scanner_warn$MH() {
        return RuntimeHelper.requireNonNull(constants$431.const$0,"g_scanner_warn");
    }
    /**
     * {@snippet :
     * void g_scanner_warn(struct _GScanner* scanner, char* format,...);
     * }
     */
    public static void g_scanner_warn(MemorySegment scanner, MemorySegment format, Object... x2) {
        var mh$ = g_scanner_warn$MH();
        try {
            mh$.invokeExact(scanner, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_new$MH() {
        return RuntimeHelper.requireNonNull(constants$431.const$3,"g_sequence_new");
    }
    /**
     * {@snippet :
     * struct _GSequence* g_sequence_new(void (*data_destroy)(void*));
     * }
     */
    public static MemorySegment g_sequence_new(MemorySegment data_destroy) {
        var mh$ = g_sequence_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(data_destroy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_free$MH() {
        return RuntimeHelper.requireNonNull(constants$431.const$4,"g_sequence_free");
    }
    /**
     * {@snippet :
     * void g_sequence_free(struct _GSequence* seq);
     * }
     */
    public static void g_sequence_free(MemorySegment seq) {
        var mh$ = g_sequence_free$MH();
        try {
            mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_length$MH() {
        return RuntimeHelper.requireNonNull(constants$431.const$5,"g_sequence_get_length");
    }
    /**
     * {@snippet :
     * int g_sequence_get_length(struct _GSequence* seq);
     * }
     */
    public static int g_sequence_get_length(MemorySegment seq) {
        var mh$ = g_sequence_get_length$MH();
        try {
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$432.const$1,"g_sequence_foreach");
    }
    /**
     * {@snippet :
     * void g_sequence_foreach(struct _GSequence* seq, void (*func)(void*,void*), void* user_data);
     * }
     */
    public static void g_sequence_foreach(MemorySegment seq, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_sequence_foreach$MH();
        try {
            mh$.invokeExact(seq, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_foreach_range$MH() {
        return RuntimeHelper.requireNonNull(constants$432.const$3,"g_sequence_foreach_range");
    }
    /**
     * {@snippet :
     * void g_sequence_foreach_range(struct _GSequenceNode* begin, struct _GSequenceNode* end, void (*func)(void*,void*), void* user_data);
     * }
     */
    public static void g_sequence_foreach_range(MemorySegment begin, MemorySegment end, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_sequence_foreach_range$MH();
        try {
            mh$.invokeExact(begin, end, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort$MH() {
        return RuntimeHelper.requireNonNull(constants$432.const$5,"g_sequence_sort");
    }
    /**
     * {@snippet :
     * void g_sequence_sort(struct _GSequence* seq, int (*cmp_func)(void*,void*,void*), void* cmp_data);
     * }
     */
    public static void g_sequence_sort(MemorySegment seq, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_sort$MH();
        try {
            mh$.invokeExact(seq, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$433.const$1,"g_sequence_sort_iter");
    }
    /**
     * {@snippet :
     * void g_sequence_sort_iter(struct _GSequence* seq, int (*cmp_func)(struct _GSequenceNode*,struct _GSequenceNode*,void*), void* cmp_data);
     * }
     */
    public static void g_sequence_sort_iter(MemorySegment seq, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_sort_iter$MH();
        try {
            mh$.invokeExact(seq, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_is_empty$MH() {
        return RuntimeHelper.requireNonNull(constants$433.const$2,"g_sequence_is_empty");
    }
    /**
     * {@snippet :
     * int g_sequence_is_empty(struct _GSequence* seq);
     * }
     */
    public static int g_sequence_is_empty(MemorySegment seq) {
        var mh$ = g_sequence_is_empty$MH();
        try {
            return (int)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_begin_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$433.const$3,"g_sequence_get_begin_iter");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_get_begin_iter(struct _GSequence* seq);
     * }
     */
    public static MemorySegment g_sequence_get_begin_iter(MemorySegment seq) {
        var mh$ = g_sequence_get_begin_iter$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_end_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$433.const$4,"g_sequence_get_end_iter");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_get_end_iter(struct _GSequence* seq);
     * }
     */
    public static MemorySegment g_sequence_get_end_iter(MemorySegment seq) {
        var mh$ = g_sequence_get_end_iter$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get_iter_at_pos$MH() {
        return RuntimeHelper.requireNonNull(constants$433.const$5,"g_sequence_get_iter_at_pos");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_get_iter_at_pos(struct _GSequence* seq, int pos);
     * }
     */
    public static MemorySegment g_sequence_get_iter_at_pos(MemorySegment seq, int pos) {
        var mh$ = g_sequence_get_iter_at_pos$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq, pos);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_append$MH() {
        return RuntimeHelper.requireNonNull(constants$434.const$0,"g_sequence_append");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_append(struct _GSequence* seq, void* data);
     * }
     */
    public static MemorySegment g_sequence_append(MemorySegment seq, MemorySegment data) {
        var mh$ = g_sequence_append$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_prepend$MH() {
        return RuntimeHelper.requireNonNull(constants$434.const$1,"g_sequence_prepend");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_prepend(struct _GSequence* seq, void* data);
     * }
     */
    public static MemorySegment g_sequence_prepend(MemorySegment seq, MemorySegment data) {
        var mh$ = g_sequence_prepend$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_insert_before$MH() {
        return RuntimeHelper.requireNonNull(constants$434.const$2,"g_sequence_insert_before");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_insert_before(struct _GSequenceNode* iter, void* data);
     * }
     */
    public static MemorySegment g_sequence_insert_before(MemorySegment iter, MemorySegment data) {
        var mh$ = g_sequence_insert_before$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iter, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_move$MH() {
        return RuntimeHelper.requireNonNull(constants$434.const$3,"g_sequence_move");
    }
    /**
     * {@snippet :
     * void g_sequence_move(struct _GSequenceNode* src, struct _GSequenceNode* dest);
     * }
     */
    public static void g_sequence_move(MemorySegment src, MemorySegment dest) {
        var mh$ = g_sequence_move$MH();
        try {
            mh$.invokeExact(src, dest);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_swap$MH() {
        return RuntimeHelper.requireNonNull(constants$434.const$4,"g_sequence_swap");
    }
    /**
     * {@snippet :
     * void g_sequence_swap(struct _GSequenceNode* a, struct _GSequenceNode* b);
     * }
     */
    public static void g_sequence_swap(MemorySegment a, MemorySegment b) {
        var mh$ = g_sequence_swap$MH();
        try {
            mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_insert_sorted$MH() {
        return RuntimeHelper.requireNonNull(constants$435.const$0,"g_sequence_insert_sorted");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_insert_sorted(struct _GSequence* seq, void* data, int (*cmp_func)(void*,void*,void*), void* cmp_data);
     * }
     */
    public static MemorySegment g_sequence_insert_sorted(MemorySegment seq, MemorySegment data, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_insert_sorted$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_insert_sorted_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$435.const$2,"g_sequence_insert_sorted_iter");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_insert_sorted_iter(struct _GSequence* seq, void* data, int (*iter_cmp)(struct _GSequenceNode*,struct _GSequenceNode*,void*), void* cmp_data);
     * }
     */
    public static MemorySegment g_sequence_insert_sorted_iter(MemorySegment seq, MemorySegment data, MemorySegment iter_cmp, MemorySegment cmp_data) {
        var mh$ = g_sequence_insert_sorted_iter$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort_changed$MH() {
        return RuntimeHelper.requireNonNull(constants$435.const$4,"g_sequence_sort_changed");
    }
    /**
     * {@snippet :
     * void g_sequence_sort_changed(struct _GSequenceNode* iter, int (*cmp_func)(void*,void*,void*), void* cmp_data);
     * }
     */
    public static void g_sequence_sort_changed(MemorySegment iter, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_sort_changed$MH();
        try {
            mh$.invokeExact(iter, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_sort_changed_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$436.const$0,"g_sequence_sort_changed_iter");
    }
    /**
     * {@snippet :
     * void g_sequence_sort_changed_iter(struct _GSequenceNode* iter, int (*iter_cmp)(struct _GSequenceNode*,struct _GSequenceNode*,void*), void* cmp_data);
     * }
     */
    public static void g_sequence_sort_changed_iter(MemorySegment iter, MemorySegment iter_cmp, MemorySegment cmp_data) {
        var mh$ = g_sequence_sort_changed_iter$MH();
        try {
            mh$.invokeExact(iter, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$436.const$1,"g_sequence_remove");
    }
    /**
     * {@snippet :
     * void g_sequence_remove(struct _GSequenceNode* iter);
     * }
     */
    public static void g_sequence_remove(MemorySegment iter) {
        var mh$ = g_sequence_remove$MH();
        try {
            mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_remove_range$MH() {
        return RuntimeHelper.requireNonNull(constants$436.const$2,"g_sequence_remove_range");
    }
    /**
     * {@snippet :
     * void g_sequence_remove_range(struct _GSequenceNode* begin, struct _GSequenceNode* end);
     * }
     */
    public static void g_sequence_remove_range(MemorySegment begin, MemorySegment end) {
        var mh$ = g_sequence_remove_range$MH();
        try {
            mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_move_range$MH() {
        return RuntimeHelper.requireNonNull(constants$436.const$3,"g_sequence_move_range");
    }
    /**
     * {@snippet :
     * void g_sequence_move_range(struct _GSequenceNode* dest, struct _GSequenceNode* begin, struct _GSequenceNode* end);
     * }
     */
    public static void g_sequence_move_range(MemorySegment dest, MemorySegment begin, MemorySegment end) {
        var mh$ = g_sequence_move_range$MH();
        try {
            mh$.invokeExact(dest, begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_search$MH() {
        return RuntimeHelper.requireNonNull(constants$436.const$5,"g_sequence_search");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_search(struct _GSequence* seq, void* data, int (*cmp_func)(void*,void*,void*), void* cmp_data);
     * }
     */
    public static MemorySegment g_sequence_search(MemorySegment seq, MemorySegment data, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_search$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_search_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$437.const$1,"g_sequence_search_iter");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_search_iter(struct _GSequence* seq, void* data, int (*iter_cmp)(struct _GSequenceNode*,struct _GSequenceNode*,void*), void* cmp_data);
     * }
     */
    public static MemorySegment g_sequence_search_iter(MemorySegment seq, MemorySegment data, MemorySegment iter_cmp, MemorySegment cmp_data) {
        var mh$ = g_sequence_search_iter$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$437.const$3,"g_sequence_lookup");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_lookup(struct _GSequence* seq, void* data, int (*cmp_func)(void*,void*,void*), void* cmp_data);
     * }
     */
    public static MemorySegment g_sequence_lookup(MemorySegment seq, MemorySegment data, MemorySegment cmp_func, MemorySegment cmp_data) {
        var mh$ = g_sequence_lookup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq, data, cmp_func, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_lookup_iter$MH() {
        return RuntimeHelper.requireNonNull(constants$437.const$5,"g_sequence_lookup_iter");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_lookup_iter(struct _GSequence* seq, void* data, int (*iter_cmp)(struct _GSequenceNode*,struct _GSequenceNode*,void*), void* cmp_data);
     * }
     */
    public static MemorySegment g_sequence_lookup_iter(MemorySegment seq, MemorySegment data, MemorySegment iter_cmp, MemorySegment cmp_data) {
        var mh$ = g_sequence_lookup_iter$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(seq, data, iter_cmp, cmp_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_get$MH() {
        return RuntimeHelper.requireNonNull(constants$438.const$0,"g_sequence_get");
    }
    /**
     * {@snippet :
     * void* g_sequence_get(struct _GSequenceNode* iter);
     * }
     */
    public static MemorySegment g_sequence_get(MemorySegment iter) {
        var mh$ = g_sequence_get$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_set$MH() {
        return RuntimeHelper.requireNonNull(constants$438.const$1,"g_sequence_set");
    }
    /**
     * {@snippet :
     * void g_sequence_set(struct _GSequenceNode* iter, void* data);
     * }
     */
    public static void g_sequence_set(MemorySegment iter, MemorySegment data) {
        var mh$ = g_sequence_set$MH();
        try {
            mh$.invokeExact(iter, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_is_begin$MH() {
        return RuntimeHelper.requireNonNull(constants$438.const$2,"g_sequence_iter_is_begin");
    }
    /**
     * {@snippet :
     * int g_sequence_iter_is_begin(struct _GSequenceNode* iter);
     * }
     */
    public static int g_sequence_iter_is_begin(MemorySegment iter) {
        var mh$ = g_sequence_iter_is_begin$MH();
        try {
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_is_end$MH() {
        return RuntimeHelper.requireNonNull(constants$438.const$3,"g_sequence_iter_is_end");
    }
    /**
     * {@snippet :
     * int g_sequence_iter_is_end(struct _GSequenceNode* iter);
     * }
     */
    public static int g_sequence_iter_is_end(MemorySegment iter) {
        var mh$ = g_sequence_iter_is_end$MH();
        try {
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_next$MH() {
        return RuntimeHelper.requireNonNull(constants$438.const$4,"g_sequence_iter_next");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_iter_next(struct _GSequenceNode* iter);
     * }
     */
    public static MemorySegment g_sequence_iter_next(MemorySegment iter) {
        var mh$ = g_sequence_iter_next$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_prev$MH() {
        return RuntimeHelper.requireNonNull(constants$438.const$5,"g_sequence_iter_prev");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_iter_prev(struct _GSequenceNode* iter);
     * }
     */
    public static MemorySegment g_sequence_iter_prev(MemorySegment iter) {
        var mh$ = g_sequence_iter_prev$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_get_position$MH() {
        return RuntimeHelper.requireNonNull(constants$439.const$0,"g_sequence_iter_get_position");
    }
    /**
     * {@snippet :
     * int g_sequence_iter_get_position(struct _GSequenceNode* iter);
     * }
     */
    public static int g_sequence_iter_get_position(MemorySegment iter) {
        var mh$ = g_sequence_iter_get_position$MH();
        try {
            return (int)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_move$MH() {
        return RuntimeHelper.requireNonNull(constants$439.const$1,"g_sequence_iter_move");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_iter_move(struct _GSequenceNode* iter, int delta);
     * }
     */
    public static MemorySegment g_sequence_iter_move(MemorySegment iter, int delta) {
        var mh$ = g_sequence_iter_move$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iter, delta);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_get_sequence$MH() {
        return RuntimeHelper.requireNonNull(constants$439.const$2,"g_sequence_iter_get_sequence");
    }
    /**
     * {@snippet :
     * struct _GSequence* g_sequence_iter_get_sequence(struct _GSequenceNode* iter);
     * }
     */
    public static MemorySegment g_sequence_iter_get_sequence(MemorySegment iter) {
        var mh$ = g_sequence_iter_get_sequence$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(iter);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_iter_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$439.const$3,"g_sequence_iter_compare");
    }
    /**
     * {@snippet :
     * int g_sequence_iter_compare(struct _GSequenceNode* a, struct _GSequenceNode* b);
     * }
     */
    public static int g_sequence_iter_compare(MemorySegment a, MemorySegment b) {
        var mh$ = g_sequence_iter_compare$MH();
        try {
            return (int)mh$.invokeExact(a, b);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_sequence_range_get_midpoint$MH() {
        return RuntimeHelper.requireNonNull(constants$439.const$4,"g_sequence_range_get_midpoint");
    }
    /**
     * {@snippet :
     * struct _GSequenceNode* g_sequence_range_get_midpoint(struct _GSequenceNode* begin, struct _GSequenceNode* end);
     * }
     */
    public static MemorySegment g_sequence_range_get_midpoint(MemorySegment begin, MemorySegment end) {
        var mh$ = g_sequence_range_get_midpoint$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GShellError.G_SHELL_ERROR_BAD_QUOTING = 0;
     * }
     */
    public static int G_SHELL_ERROR_BAD_QUOTING() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GShellError.G_SHELL_ERROR_EMPTY_STRING = 1;
     * }
     */
    public static int G_SHELL_ERROR_EMPTY_STRING() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GShellError.G_SHELL_ERROR_FAILED = 2;
     * }
     */
    public static int G_SHELL_ERROR_FAILED() {
        return (int)2L;
    }
    public static MethodHandle g_shell_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$439.const$5,"g_shell_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_shell_error_quark();
     * }
     */
    public static int g_shell_error_quark() {
        var mh$ = g_shell_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_shell_quote$MH() {
        return RuntimeHelper.requireNonNull(constants$440.const$0,"g_shell_quote");
    }
    /**
     * {@snippet :
     * char* g_shell_quote(char* unquoted_string);
     * }
     */
    public static MemorySegment g_shell_quote(MemorySegment unquoted_string) {
        var mh$ = g_shell_quote$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(unquoted_string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_shell_unquote$MH() {
        return RuntimeHelper.requireNonNull(constants$440.const$1,"g_shell_unquote");
    }
    /**
     * {@snippet :
     * char* g_shell_unquote(char* quoted_string, struct _GError** error);
     * }
     */
    public static MemorySegment g_shell_unquote(MemorySegment quoted_string, MemorySegment error) {
        var mh$ = g_shell_unquote$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(quoted_string, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_shell_parse_argv$MH() {
        return RuntimeHelper.requireNonNull(constants$440.const$2,"g_shell_parse_argv");
    }
    /**
     * {@snippet :
     * int g_shell_parse_argv(char* command_line, int* argcp, char*** argvp, struct _GError** error);
     * }
     */
    public static int g_shell_parse_argv(MemorySegment command_line, MemorySegment argcp, MemorySegment argvp, MemorySegment error) {
        var mh$ = g_shell_parse_argv$MH();
        try {
            return (int)mh$.invokeExact(command_line, argcp, argvp, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$440.const$3,"g_slice_alloc");
    }
    /**
     * {@snippet :
     * void* g_slice_alloc(unsigned long block_size);
     * }
     */
    public static MemorySegment g_slice_alloc(long block_size) {
        var mh$ = g_slice_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$440.const$4,"g_slice_alloc0");
    }
    /**
     * {@snippet :
     * void* g_slice_alloc0(unsigned long block_size);
     * }
     */
    public static MemorySegment g_slice_alloc0(long block_size) {
        var mh$ = g_slice_alloc0$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(block_size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_copy$MH() {
        return RuntimeHelper.requireNonNull(constants$440.const$5,"g_slice_copy");
    }
    /**
     * {@snippet :
     * void* g_slice_copy(unsigned long block_size, void* mem_block);
     * }
     */
    public static MemorySegment g_slice_copy(long block_size, MemorySegment mem_block) {
        var mh$ = g_slice_copy$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_free1$MH() {
        return RuntimeHelper.requireNonNull(constants$441.const$1,"g_slice_free1");
    }
    /**
     * {@snippet :
     * void g_slice_free1(unsigned long block_size, void* mem_block);
     * }
     */
    public static void g_slice_free1(long block_size, MemorySegment mem_block) {
        var mh$ = g_slice_free1$MH();
        try {
            mh$.invokeExact(block_size, mem_block);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_free_chain_with_offset$MH() {
        return RuntimeHelper.requireNonNull(constants$441.const$3,"g_slice_free_chain_with_offset");
    }
    /**
     * {@snippet :
     * void g_slice_free_chain_with_offset(unsigned long block_size, void* mem_chain, unsigned long next_offset);
     * }
     */
    public static void g_slice_free_chain_with_offset(long block_size, MemorySegment mem_chain, long next_offset) {
        var mh$ = g_slice_free_chain_with_offset$MH();
        try {
            mh$.invokeExact(block_size, mem_chain, next_offset);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GSliceConfig.G_SLICE_CONFIG_ALWAYS_MALLOC = 1;
     * }
     */
    public static int G_SLICE_CONFIG_ALWAYS_MALLOC() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GSliceConfig.G_SLICE_CONFIG_BYPASS_MAGAZINES = 2;
     * }
     */
    public static int G_SLICE_CONFIG_BYPASS_MAGAZINES() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GSliceConfig.G_SLICE_CONFIG_WORKING_SET_MSECS = 3;
     * }
     */
    public static int G_SLICE_CONFIG_WORKING_SET_MSECS() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GSliceConfig.G_SLICE_CONFIG_COLOR_INCREMENT = 4;
     * }
     */
    public static int G_SLICE_CONFIG_COLOR_INCREMENT() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GSliceConfig.G_SLICE_CONFIG_CHUNK_SIZES = 5;
     * }
     */
    public static int G_SLICE_CONFIG_CHUNK_SIZES() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GSliceConfig.G_SLICE_CONFIG_CONTENTION_COUNTER = 6;
     * }
     */
    public static int G_SLICE_CONFIG_CONTENTION_COUNTER() {
        return (int)6L;
    }
    public static MethodHandle g_slice_set_config$MH() {
        return RuntimeHelper.requireNonNull(constants$441.const$5,"g_slice_set_config");
    }
    /**
     * {@snippet :
     * void g_slice_set_config(enum GSliceConfig ckey, long value);
     * }
     */
    public static void g_slice_set_config(int ckey, long value) {
        var mh$ = g_slice_set_config$MH();
        try {
            mh$.invokeExact(ckey, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_get_config$MH() {
        return RuntimeHelper.requireNonNull(constants$442.const$0,"g_slice_get_config");
    }
    /**
     * {@snippet :
     * long g_slice_get_config(enum GSliceConfig ckey);
     * }
     */
    public static long g_slice_get_config(int ckey) {
        var mh$ = g_slice_get_config$MH();
        try {
            return (long)mh$.invokeExact(ckey);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slice_get_config_state$MH() {
        return RuntimeHelper.requireNonNull(constants$442.const$2,"g_slice_get_config_state");
    }
    /**
     * {@snippet :
     * long* g_slice_get_config_state(enum GSliceConfig ckey, long address, unsigned int* n_values);
     * }
     */
    public static MemorySegment g_slice_get_config_state(int ckey, long address, MemorySegment n_values) {
        var mh$ = g_slice_get_config_state$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(ckey, address, n_values);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_FORK = 0;
     * }
     */
    public static int G_SPAWN_ERROR_FORK() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_READ = 1;
     * }
     */
    public static int G_SPAWN_ERROR_READ() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_CHDIR = 2;
     * }
     */
    public static int G_SPAWN_ERROR_CHDIR() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_ACCES = 3;
     * }
     */
    public static int G_SPAWN_ERROR_ACCES() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_PERM = 4;
     * }
     */
    public static int G_SPAWN_ERROR_PERM() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_TOO_BIG = 5;
     * }
     */
    public static int G_SPAWN_ERROR_TOO_BIG() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_2BIG = 5;
     * }
     */
    public static int G_SPAWN_ERROR_2BIG() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_NOEXEC = 6;
     * }
     */
    public static int G_SPAWN_ERROR_NOEXEC() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_NAMETOOLONG = 7;
     * }
     */
    public static int G_SPAWN_ERROR_NAMETOOLONG() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_NOENT = 8;
     * }
     */
    public static int G_SPAWN_ERROR_NOENT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_NOMEM = 9;
     * }
     */
    public static int G_SPAWN_ERROR_NOMEM() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_NOTDIR = 10;
     * }
     */
    public static int G_SPAWN_ERROR_NOTDIR() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_LOOP = 11;
     * }
     */
    public static int G_SPAWN_ERROR_LOOP() {
        return (int)11L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_TXTBUSY = 12;
     * }
     */
    public static int G_SPAWN_ERROR_TXTBUSY() {
        return (int)12L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_IO = 13;
     * }
     */
    public static int G_SPAWN_ERROR_IO() {
        return (int)13L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_NFILE = 14;
     * }
     */
    public static int G_SPAWN_ERROR_NFILE() {
        return (int)14L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_MFILE = 15;
     * }
     */
    public static int G_SPAWN_ERROR_MFILE() {
        return (int)15L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_INVAL = 16;
     * }
     */
    public static int G_SPAWN_ERROR_INVAL() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_ISDIR = 17;
     * }
     */
    public static int G_SPAWN_ERROR_ISDIR() {
        return (int)17L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_LIBBAD = 18;
     * }
     */
    public static int G_SPAWN_ERROR_LIBBAD() {
        return (int)18L;
    }
    /**
     * {@snippet :
     * enum GSpawnError.G_SPAWN_ERROR_FAILED = 19;
     * }
     */
    public static int G_SPAWN_ERROR_FAILED() {
        return (int)19L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_DEFAULT = 0;
     * }
     */
    public static int G_SPAWN_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_LEAVE_DESCRIPTORS_OPEN = 1;
     * }
     */
    public static int G_SPAWN_LEAVE_DESCRIPTORS_OPEN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_DO_NOT_REAP_CHILD = 2;
     * }
     */
    public static int G_SPAWN_DO_NOT_REAP_CHILD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_SEARCH_PATH = 4;
     * }
     */
    public static int G_SPAWN_SEARCH_PATH() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_STDOUT_TO_DEV_NULL = 8;
     * }
     */
    public static int G_SPAWN_STDOUT_TO_DEV_NULL() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_STDERR_TO_DEV_NULL = 16;
     * }
     */
    public static int G_SPAWN_STDERR_TO_DEV_NULL() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_CHILD_INHERITS_STDIN = 32;
     * }
     */
    public static int G_SPAWN_CHILD_INHERITS_STDIN() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_FILE_AND_ARGV_ZERO = 64;
     * }
     */
    public static int G_SPAWN_FILE_AND_ARGV_ZERO() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_SEARCH_PATH_FROM_ENVP = 128;
     * }
     */
    public static int G_SPAWN_SEARCH_PATH_FROM_ENVP() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_CLOEXEC_PIPES = 256;
     * }
     */
    public static int G_SPAWN_CLOEXEC_PIPES() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_CHILD_INHERITS_STDOUT = 512;
     * }
     */
    public static int G_SPAWN_CHILD_INHERITS_STDOUT() {
        return (int)512L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_CHILD_INHERITS_STDERR = 1024;
     * }
     */
    public static int G_SPAWN_CHILD_INHERITS_STDERR() {
        return (int)1024L;
    }
    /**
     * {@snippet :
     * enum GSpawnFlags.G_SPAWN_STDIN_FROM_DEV_NULL = 2048;
     * }
     */
    public static int G_SPAWN_STDIN_FROM_DEV_NULL() {
        return (int)2048L;
    }
    public static MethodHandle g_spawn_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$442.const$4,"g_spawn_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_spawn_error_quark();
     * }
     */
    public static int g_spawn_error_quark() {
        var mh$ = g_spawn_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_exit_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$442.const$5,"g_spawn_exit_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_spawn_exit_error_quark();
     * }
     */
    public static int g_spawn_exit_error_quark() {
        var mh$ = g_spawn_exit_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async$MH() {
        return RuntimeHelper.requireNonNull(constants$443.const$2,"g_spawn_async");
    }
    /**
     * {@snippet :
     * int g_spawn_async(char* working_directory, char** argv, char** envp, enum GSpawnFlags flags, void (*child_setup)(void*), void* user_data, int* child_pid, struct _GError** error);
     * }
     */
    public static int g_spawn_async(MemorySegment working_directory, MemorySegment argv, MemorySegment envp, int flags, MemorySegment child_setup, MemorySegment user_data, MemorySegment child_pid, MemorySegment error) {
        var mh$ = g_spawn_async$MH();
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async_with_pipes$MH() {
        return RuntimeHelper.requireNonNull(constants$443.const$5,"g_spawn_async_with_pipes");
    }
    /**
     * {@snippet :
     * int g_spawn_async_with_pipes(char* working_directory, char** argv, char** envp, enum GSpawnFlags flags, void (*child_setup)(void*), void* user_data, int* child_pid, int* standard_input, int* standard_output, int* standard_error, struct _GError** error);
     * }
     */
    public static int g_spawn_async_with_pipes(MemorySegment working_directory, MemorySegment argv, MemorySegment envp, int flags, MemorySegment child_setup, MemorySegment user_data, MemorySegment child_pid, MemorySegment standard_input, MemorySegment standard_output, MemorySegment standard_error, MemorySegment error) {
        var mh$ = g_spawn_async_with_pipes$MH();
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, standard_input, standard_output, standard_error, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async_with_pipes_and_fds$MH() {
        return RuntimeHelper.requireNonNull(constants$444.const$2,"g_spawn_async_with_pipes_and_fds");
    }
    /**
     * {@snippet :
     * int g_spawn_async_with_pipes_and_fds(char* working_directory, char** argv, char** envp, enum GSpawnFlags flags, void (*child_setup)(void*), void* user_data, int stdin_fd, int stdout_fd, int stderr_fd, int* source_fds, int* target_fds, unsigned long n_fds, int* child_pid_out, int* stdin_pipe_out, int* stdout_pipe_out, int* stderr_pipe_out, struct _GError** error);
     * }
     */
    public static int g_spawn_async_with_pipes_and_fds(MemorySegment working_directory, MemorySegment argv, MemorySegment envp, int flags, MemorySegment child_setup, MemorySegment user_data, int stdin_fd, int stdout_fd, int stderr_fd, MemorySegment source_fds, MemorySegment target_fds, long n_fds, MemorySegment child_pid_out, MemorySegment stdin_pipe_out, MemorySegment stdout_pipe_out, MemorySegment stderr_pipe_out, MemorySegment error) {
        var mh$ = g_spawn_async_with_pipes_and_fds$MH();
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, stdin_fd, stdout_fd, stderr_fd, source_fds, target_fds, n_fds, child_pid_out, stdin_pipe_out, stdout_pipe_out, stderr_pipe_out, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_async_with_fds$MH() {
        return RuntimeHelper.requireNonNull(constants$444.const$5,"g_spawn_async_with_fds");
    }
    /**
     * {@snippet :
     * int g_spawn_async_with_fds(char* working_directory, char** argv, char** envp, enum GSpawnFlags flags, void (*child_setup)(void*), void* user_data, int* child_pid, int stdin_fd, int stdout_fd, int stderr_fd, struct _GError** error);
     * }
     */
    public static int g_spawn_async_with_fds(MemorySegment working_directory, MemorySegment argv, MemorySegment envp, int flags, MemorySegment child_setup, MemorySegment user_data, MemorySegment child_pid, int stdin_fd, int stdout_fd, int stderr_fd, MemorySegment error) {
        var mh$ = g_spawn_async_with_fds$MH();
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, child_pid, stdin_fd, stdout_fd, stderr_fd, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_sync$MH() {
        return RuntimeHelper.requireNonNull(constants$445.const$2,"g_spawn_sync");
    }
    /**
     * {@snippet :
     * int g_spawn_sync(char* working_directory, char** argv, char** envp, enum GSpawnFlags flags, void (*child_setup)(void*), void* user_data, char** standard_output, char** standard_error, int* wait_status, struct _GError** error);
     * }
     */
    public static int g_spawn_sync(MemorySegment working_directory, MemorySegment argv, MemorySegment envp, int flags, MemorySegment child_setup, MemorySegment user_data, MemorySegment standard_output, MemorySegment standard_error, MemorySegment wait_status, MemorySegment error) {
        var mh$ = g_spawn_sync$MH();
        try {
            return (int)mh$.invokeExact(working_directory, argv, envp, flags, child_setup, user_data, standard_output, standard_error, wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_command_line_sync$MH() {
        return RuntimeHelper.requireNonNull(constants$445.const$3,"g_spawn_command_line_sync");
    }
    /**
     * {@snippet :
     * int g_spawn_command_line_sync(char* command_line, char** standard_output, char** standard_error, int* wait_status, struct _GError** error);
     * }
     */
    public static int g_spawn_command_line_sync(MemorySegment command_line, MemorySegment standard_output, MemorySegment standard_error, MemorySegment wait_status, MemorySegment error) {
        var mh$ = g_spawn_command_line_sync$MH();
        try {
            return (int)mh$.invokeExact(command_line, standard_output, standard_error, wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_command_line_async$MH() {
        return RuntimeHelper.requireNonNull(constants$445.const$4,"g_spawn_command_line_async");
    }
    /**
     * {@snippet :
     * int g_spawn_command_line_async(char* command_line, struct _GError** error);
     * }
     */
    public static int g_spawn_command_line_async(MemorySegment command_line, MemorySegment error) {
        var mh$ = g_spawn_command_line_async$MH();
        try {
            return (int)mh$.invokeExact(command_line, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_check_wait_status$MH() {
        return RuntimeHelper.requireNonNull(constants$445.const$5,"g_spawn_check_wait_status");
    }
    /**
     * {@snippet :
     * int g_spawn_check_wait_status(int wait_status, struct _GError** error);
     * }
     */
    public static int g_spawn_check_wait_status(int wait_status, MemorySegment error) {
        var mh$ = g_spawn_check_wait_status$MH();
        try {
            return (int)mh$.invokeExact(wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_check_exit_status$MH() {
        return RuntimeHelper.requireNonNull(constants$446.const$0,"g_spawn_check_exit_status");
    }
    /**
     * {@snippet :
     * int g_spawn_check_exit_status(int wait_status, struct _GError** error);
     * }
     */
    public static int g_spawn_check_exit_status(int wait_status, MemorySegment error) {
        var mh$ = g_spawn_check_exit_status$MH();
        try {
            return (int)mh$.invokeExact(wait_status, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_spawn_close_pid$MH() {
        return RuntimeHelper.requireNonNull(constants$446.const$1,"g_spawn_close_pid");
    }
    /**
     * {@snippet :
     * void g_spawn_close_pid(int pid);
     * }
     */
    public static void g_spawn_close_pid(int pid) {
        var mh$ = g_spawn_close_pid$MH();
        try {
            mh$.invokeExact(pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_new$MH() {
        return RuntimeHelper.requireNonNull(constants$446.const$2,"g_string_chunk_new");
    }
    /**
     * {@snippet :
     * struct _GStringChunk* g_string_chunk_new(unsigned long size);
     * }
     */
    public static MemorySegment g_string_chunk_new(long size) {
        var mh$ = g_string_chunk_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(size);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_free$MH() {
        return RuntimeHelper.requireNonNull(constants$446.const$3,"g_string_chunk_free");
    }
    /**
     * {@snippet :
     * void g_string_chunk_free(struct _GStringChunk* chunk);
     * }
     */
    public static void g_string_chunk_free(MemorySegment chunk) {
        var mh$ = g_string_chunk_free$MH();
        try {
            mh$.invokeExact(chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_clear$MH() {
        return RuntimeHelper.requireNonNull(constants$446.const$4,"g_string_chunk_clear");
    }
    /**
     * {@snippet :
     * void g_string_chunk_clear(struct _GStringChunk* chunk);
     * }
     */
    public static void g_string_chunk_clear(MemorySegment chunk) {
        var mh$ = g_string_chunk_clear$MH();
        try {
            mh$.invokeExact(chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$446.const$5,"g_string_chunk_insert");
    }
    /**
     * {@snippet :
     * char* g_string_chunk_insert(struct _GStringChunk* chunk, char* string);
     * }
     */
    public static MemorySegment g_string_chunk_insert(MemorySegment chunk, MemorySegment string) {
        var mh$ = g_string_chunk_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(chunk, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_insert_len$MH() {
        return RuntimeHelper.requireNonNull(constants$447.const$0,"g_string_chunk_insert_len");
    }
    /**
     * {@snippet :
     * char* g_string_chunk_insert_len(struct _GStringChunk* chunk, char* string, long len);
     * }
     */
    public static MemorySegment g_string_chunk_insert_len(MemorySegment chunk, MemorySegment string, long len) {
        var mh$ = g_string_chunk_insert_len$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(chunk, string, len);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_string_chunk_insert_const$MH() {
        return RuntimeHelper.requireNonNull(constants$447.const$1,"g_string_chunk_insert_const");
    }
    /**
     * {@snippet :
     * char* g_string_chunk_insert_const(struct _GStringChunk* chunk, char* string);
     * }
     */
    public static MemorySegment g_string_chunk_insert_const(MemorySegment chunk, MemorySegment string) {
        var mh$ = g_string_chunk_insert_const$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(chunk, string);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_new$MH() {
        return RuntimeHelper.requireNonNull(constants$447.const$2,"g_strv_builder_new");
    }
    /**
     * {@snippet :
     * struct _GStrvBuilder* g_strv_builder_new();
     * }
     */
    public static MemorySegment g_strv_builder_new() {
        var mh$ = g_strv_builder_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$447.const$3,"g_strv_builder_unref");
    }
    /**
     * {@snippet :
     * void g_strv_builder_unref(struct _GStrvBuilder* builder);
     * }
     */
    public static void g_strv_builder_unref(MemorySegment builder) {
        var mh$ = g_strv_builder_unref$MH();
        try {
            mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$447.const$4,"g_strv_builder_ref");
    }
    /**
     * {@snippet :
     * struct _GStrvBuilder* g_strv_builder_ref(struct _GStrvBuilder* builder);
     * }
     */
    public static MemorySegment g_strv_builder_ref(MemorySegment builder) {
        var mh$ = g_strv_builder_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_add$MH() {
        return RuntimeHelper.requireNonNull(constants$447.const$5,"g_strv_builder_add");
    }
    /**
     * {@snippet :
     * void g_strv_builder_add(struct _GStrvBuilder* builder, char* value);
     * }
     */
    public static void g_strv_builder_add(MemorySegment builder, MemorySegment value) {
        var mh$ = g_strv_builder_add$MH();
        try {
            mh$.invokeExact(builder, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_addv$MH() {
        return RuntimeHelper.requireNonNull(constants$448.const$0,"g_strv_builder_addv");
    }
    /**
     * {@snippet :
     * void g_strv_builder_addv(struct _GStrvBuilder* builder, char** value);
     * }
     */
    public static void g_strv_builder_addv(MemorySegment builder, MemorySegment value) {
        var mh$ = g_strv_builder_addv$MH();
        try {
            mh$.invokeExact(builder, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_add_many$MH() {
        return RuntimeHelper.requireNonNull(constants$448.const$1,"g_strv_builder_add_many");
    }
    /**
     * {@snippet :
     * void g_strv_builder_add_many(struct _GStrvBuilder* builder,...);
     * }
     */
    public static void g_strv_builder_add_many(MemorySegment builder, Object... x1) {
        var mh$ = g_strv_builder_add_many$MH();
        try {
            mh$.invokeExact(builder, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strv_builder_end$MH() {
        return RuntimeHelper.requireNonNull(constants$448.const$2,"g_strv_builder_end");
    }
    /**
     * {@snippet :
     * char** g_strv_builder_end(struct _GStrvBuilder* builder);
     * }
     */
    public static MemorySegment g_strv_builder_end(MemorySegment builder) {
        var mh$ = g_strv_builder_end$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(builder);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __errno_location$MH() {
        return RuntimeHelper.requireNonNull(constants$448.const$3,"__errno_location");
    }
    /**
     * {@snippet :
     * int* __errno_location();
     * }
     */
    public static MemorySegment __errno_location() {
        var mh$ = __errno_location$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_strcmp0$MH() {
        return RuntimeHelper.requireNonNull(constants$449.const$1,"g_strcmp0");
    }
    /**
     * {@snippet :
     * int g_strcmp0(char* str1, char* str2);
     * }
     */
    public static int g_strcmp0(MemorySegment str1, MemorySegment str2) {
        var mh$ = g_strcmp0$MH();
        try {
            return (int)mh$.invokeExact(str1, str2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_minimized_result$MH() {
        return RuntimeHelper.requireNonNull(constants$449.const$3,"g_test_minimized_result");
    }
    /**
     * {@snippet :
     * void g_test_minimized_result(double minimized_quantity, char* format,...);
     * }
     */
    public static void g_test_minimized_result(double minimized_quantity, MemorySegment format, Object... x2) {
        var mh$ = g_test_minimized_result$MH();
        try {
            mh$.invokeExact(minimized_quantity, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_maximized_result$MH() {
        return RuntimeHelper.requireNonNull(constants$449.const$4,"g_test_maximized_result");
    }
    /**
     * {@snippet :
     * void g_test_maximized_result(double maximized_quantity, char* format,...);
     * }
     */
    public static void g_test_maximized_result(double maximized_quantity, MemorySegment format, Object... x2) {
        var mh$ = g_test_maximized_result$MH();
        try {
            mh$.invokeExact(maximized_quantity, format, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_init$MH() {
        return RuntimeHelper.requireNonNull(constants$449.const$5,"g_test_init");
    }
    /**
     * {@snippet :
     * void g_test_init(int* argc, char*** argv,...);
     * }
     */
    public static void g_test_init(MemorySegment argc, MemorySegment argv, Object... x2) {
        var mh$ = g_test_init$MH();
        try {
            mh$.invokeExact(argc, argv, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_subprocess$MH() {
        return RuntimeHelper.requireNonNull(constants$450.const$0,"g_test_subprocess");
    }
    /**
     * {@snippet :
     * int g_test_subprocess();
     * }
     */
    public static int g_test_subprocess() {
        var mh$ = g_test_subprocess$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_run$MH() {
        return RuntimeHelper.requireNonNull(constants$450.const$1,"g_test_run");
    }
    /**
     * {@snippet :
     * int g_test_run();
     * }
     */
    public static int g_test_run() {
        var mh$ = g_test_run$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_add_func$MH() {
        return RuntimeHelper.requireNonNull(constants$450.const$3,"g_test_add_func");
    }
    /**
     * {@snippet :
     * void g_test_add_func(char* testpath, void (*test_func)());
     * }
     */
    public static void g_test_add_func(MemorySegment testpath, MemorySegment test_func) {
        var mh$ = g_test_add_func$MH();
        try {
            mh$.invokeExact(testpath, test_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_add_data_func$MH() {
        return RuntimeHelper.requireNonNull(constants$450.const$5,"g_test_add_data_func");
    }
    /**
     * {@snippet :
     * void g_test_add_data_func(char* testpath, void* test_data, void (*test_func)(void*));
     * }
     */
    public static void g_test_add_data_func(MemorySegment testpath, MemorySegment test_data, MemorySegment test_func) {
        var mh$ = g_test_add_data_func$MH();
        try {
            mh$.invokeExact(testpath, test_data, test_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_add_data_func_full$MH() {
        return RuntimeHelper.requireNonNull(constants$451.const$2,"g_test_add_data_func_full");
    }
    /**
     * {@snippet :
     * void g_test_add_data_func_full(char* testpath, void* test_data, void (*test_func)(void*), void (*data_free_func)(void*));
     * }
     */
    public static void g_test_add_data_func_full(MemorySegment testpath, MemorySegment test_data, MemorySegment test_func, MemorySegment data_free_func) {
        var mh$ = g_test_add_data_func_full$MH();
        try {
            mh$.invokeExact(testpath, test_data, test_func, data_free_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_get_path$MH() {
        return RuntimeHelper.requireNonNull(constants$451.const$3,"g_test_get_path");
    }
    /**
     * {@snippet :
     * char* g_test_get_path();
     * }
     */
    public static MemorySegment g_test_get_path() {
        var mh$ = g_test_get_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_fail$MH() {
        return RuntimeHelper.requireNonNull(constants$451.const$4,"g_test_fail");
    }
    /**
     * {@snippet :
     * void g_test_fail();
     * }
     */
    public static void g_test_fail() {
        var mh$ = g_test_fail$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_fail_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$451.const$5,"g_test_fail_printf");
    }
    /**
     * {@snippet :
     * void g_test_fail_printf(char* format,...);
     * }
     */
    public static void g_test_fail_printf(MemorySegment format, Object... x1) {
        var mh$ = g_test_fail_printf$MH();
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_incomplete$MH() {
        return RuntimeHelper.requireNonNull(constants$452.const$0,"g_test_incomplete");
    }
    /**
     * {@snippet :
     * void g_test_incomplete(char* msg);
     * }
     */
    public static void g_test_incomplete(MemorySegment msg) {
        var mh$ = g_test_incomplete$MH();
        try {
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_incomplete_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$452.const$1,"g_test_incomplete_printf");
    }
    /**
     * {@snippet :
     * void g_test_incomplete_printf(char* format,...);
     * }
     */
    public static void g_test_incomplete_printf(MemorySegment format, Object... x1) {
        var mh$ = g_test_incomplete_printf$MH();
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_skip$MH() {
        return RuntimeHelper.requireNonNull(constants$452.const$2,"g_test_skip");
    }
    /**
     * {@snippet :
     * void g_test_skip(char* msg);
     * }
     */
    public static void g_test_skip(MemorySegment msg) {
        var mh$ = g_test_skip$MH();
        try {
            mh$.invokeExact(msg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_skip_printf$MH() {
        return RuntimeHelper.requireNonNull(constants$452.const$3,"g_test_skip_printf");
    }
    /**
     * {@snippet :
     * void g_test_skip_printf(char* format,...);
     * }
     */
    public static void g_test_skip_printf(MemorySegment format, Object... x1) {
        var mh$ = g_test_skip_printf$MH();
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_failed$MH() {
        return RuntimeHelper.requireNonNull(constants$452.const$4,"g_test_failed");
    }
    /**
     * {@snippet :
     * int g_test_failed();
     * }
     */
    public static int g_test_failed() {
        var mh$ = g_test_failed$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_set_nonfatal_assertions$MH() {
        return RuntimeHelper.requireNonNull(constants$452.const$5,"g_test_set_nonfatal_assertions");
    }
    /**
     * {@snippet :
     * void g_test_set_nonfatal_assertions();
     * }
     */
    public static void g_test_set_nonfatal_assertions() {
        var mh$ = g_test_set_nonfatal_assertions$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_message$MH() {
        return RuntimeHelper.requireNonNull(constants$453.const$0,"g_test_message");
    }
    /**
     * {@snippet :
     * void g_test_message(char* format,...);
     * }
     */
    public static void g_test_message(MemorySegment format, Object... x1) {
        var mh$ = g_test_message$MH();
        try {
            mh$.invokeExact(format, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_bug_base$MH() {
        return RuntimeHelper.requireNonNull(constants$453.const$1,"g_test_bug_base");
    }
    /**
     * {@snippet :
     * void g_test_bug_base(char* uri_pattern);
     * }
     */
    public static void g_test_bug_base(MemorySegment uri_pattern) {
        var mh$ = g_test_bug_base$MH();
        try {
            mh$.invokeExact(uri_pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_bug$MH() {
        return RuntimeHelper.requireNonNull(constants$453.const$2,"g_test_bug");
    }
    /**
     * {@snippet :
     * void g_test_bug(char* bug_uri_snippet);
     * }
     */
    public static void g_test_bug(MemorySegment bug_uri_snippet) {
        var mh$ = g_test_bug$MH();
        try {
            mh$.invokeExact(bug_uri_snippet);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_summary$MH() {
        return RuntimeHelper.requireNonNull(constants$453.const$3,"g_test_summary");
    }
    /**
     * {@snippet :
     * void g_test_summary(char* summary);
     * }
     */
    public static void g_test_summary(MemorySegment summary) {
        var mh$ = g_test_summary$MH();
        try {
            mh$.invokeExact(summary);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_timer_start$MH() {
        return RuntimeHelper.requireNonNull(constants$453.const$4,"g_test_timer_start");
    }
    /**
     * {@snippet :
     * void g_test_timer_start();
     * }
     */
    public static void g_test_timer_start() {
        var mh$ = g_test_timer_start$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_timer_elapsed$MH() {
        return RuntimeHelper.requireNonNull(constants$453.const$5,"g_test_timer_elapsed");
    }
    /**
     * {@snippet :
     * double g_test_timer_elapsed();
     * }
     */
    public static double g_test_timer_elapsed() {
        var mh$ = g_test_timer_elapsed$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_timer_last$MH() {
        return RuntimeHelper.requireNonNull(constants$454.const$0,"g_test_timer_last");
    }
    /**
     * {@snippet :
     * double g_test_timer_last();
     * }
     */
    public static double g_test_timer_last() {
        var mh$ = g_test_timer_last$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_queue_free$MH() {
        return RuntimeHelper.requireNonNull(constants$454.const$1,"g_test_queue_free");
    }
    /**
     * {@snippet :
     * void g_test_queue_free(void* gfree_pointer);
     * }
     */
    public static void g_test_queue_free(MemorySegment gfree_pointer) {
        var mh$ = g_test_queue_free$MH();
        try {
            mh$.invokeExact(gfree_pointer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_queue_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$454.const$3,"g_test_queue_destroy");
    }
    /**
     * {@snippet :
     * void g_test_queue_destroy(void (*destroy_func)(void*), void* destroy_data);
     * }
     */
    public static void g_test_queue_destroy(MemorySegment destroy_func, MemorySegment destroy_data) {
        var mh$ = g_test_queue_destroy$MH();
        try {
            mh$.invokeExact(destroy_func, destroy_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GTestTrapFlags.G_TEST_TRAP_DEFAULT = 0;
     * }
     */
    public static int G_TEST_TRAP_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GTestTrapFlags.G_TEST_TRAP_SILENCE_STDOUT = 128;
     * }
     */
    public static int G_TEST_TRAP_SILENCE_STDOUT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum GTestTrapFlags.G_TEST_TRAP_SILENCE_STDERR = 256;
     * }
     */
    public static int G_TEST_TRAP_SILENCE_STDERR() {
        return (int)256L;
    }
    /**
     * {@snippet :
     * enum GTestTrapFlags.G_TEST_TRAP_INHERIT_STDIN = 512;
     * }
     */
    public static int G_TEST_TRAP_INHERIT_STDIN() {
        return (int)512L;
    }
    public static MethodHandle g_test_trap_fork$MH() {
        return RuntimeHelper.requireNonNull(constants$454.const$4,"g_test_trap_fork");
    }
    /**
     * {@snippet :
     * int g_test_trap_fork(unsigned long usec_timeout, enum GTestTrapFlags test_trap_flags);
     * }
     */
    public static int g_test_trap_fork(long usec_timeout, int test_trap_flags) {
        var mh$ = g_test_trap_fork$MH();
        try {
            return (int)mh$.invokeExact(usec_timeout, test_trap_flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GTestSubprocessFlags.G_TEST_SUBPROCESS_DEFAULT = 0;
     * }
     */
    public static int G_TEST_SUBPROCESS_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GTestSubprocessFlags.G_TEST_SUBPROCESS_INHERIT_STDIN = 1;
     * }
     */
    public static int G_TEST_SUBPROCESS_INHERIT_STDIN() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GTestSubprocessFlags.G_TEST_SUBPROCESS_INHERIT_STDOUT = 2;
     * }
     */
    public static int G_TEST_SUBPROCESS_INHERIT_STDOUT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GTestSubprocessFlags.G_TEST_SUBPROCESS_INHERIT_STDERR = 4;
     * }
     */
    public static int G_TEST_SUBPROCESS_INHERIT_STDERR() {
        return (int)4L;
    }
    public static MethodHandle g_test_trap_subprocess$MH() {
        return RuntimeHelper.requireNonNull(constants$454.const$6,"g_test_trap_subprocess");
    }
    /**
     * {@snippet :
     * void g_test_trap_subprocess(char* test_path, unsigned long usec_timeout, enum GTestSubprocessFlags test_flags);
     * }
     */
    public static void g_test_trap_subprocess(MemorySegment test_path, long usec_timeout, int test_flags) {
        var mh$ = g_test_trap_subprocess$MH();
        try {
            mh$.invokeExact(test_path, usec_timeout, test_flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_trap_has_passed$MH() {
        return RuntimeHelper.requireNonNull(constants$455.const$0,"g_test_trap_has_passed");
    }
    /**
     * {@snippet :
     * int g_test_trap_has_passed();
     * }
     */
    public static int g_test_trap_has_passed() {
        var mh$ = g_test_trap_has_passed$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_trap_reached_timeout$MH() {
        return RuntimeHelper.requireNonNull(constants$455.const$1,"g_test_trap_reached_timeout");
    }
    /**
     * {@snippet :
     * int g_test_trap_reached_timeout();
     * }
     */
    public static int g_test_trap_reached_timeout() {
        var mh$ = g_test_trap_reached_timeout$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_rand_int$MH() {
        return RuntimeHelper.requireNonNull(constants$455.const$2,"g_test_rand_int");
    }
    /**
     * {@snippet :
     * int g_test_rand_int();
     * }
     */
    public static int g_test_rand_int() {
        var mh$ = g_test_rand_int$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_rand_int_range$MH() {
        return RuntimeHelper.requireNonNull(constants$455.const$3,"g_test_rand_int_range");
    }
    /**
     * {@snippet :
     * int g_test_rand_int_range(int begin, int end);
     * }
     */
    public static int g_test_rand_int_range(int begin, int end) {
        var mh$ = g_test_rand_int_range$MH();
        try {
            return (int)mh$.invokeExact(begin, end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_rand_double$MH() {
        return RuntimeHelper.requireNonNull(constants$455.const$4,"g_test_rand_double");
    }
    /**
     * {@snippet :
     * double g_test_rand_double();
     * }
     */
    public static double g_test_rand_double() {
        var mh$ = g_test_rand_double$MH();
        try {
            return (double)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_rand_double_range$MH() {
        return RuntimeHelper.requireNonNull(constants$455.const$5,"g_test_rand_double_range");
    }
    /**
     * {@snippet :
     * double g_test_rand_double_range(double range_start, double range_end);
     * }
     */
    public static double g_test_rand_double_range(double range_start, double range_end) {
        var mh$ = g_test_rand_double_range$MH();
        try {
            return (double)mh$.invokeExact(range_start, range_end);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_create_case$MH() {
        return RuntimeHelper.requireNonNull(constants$456.const$3,"g_test_create_case");
    }
    /**
     * {@snippet :
     * struct GTestCase* g_test_create_case(char* test_name, unsigned long data_size, void* test_data, void (*data_setup)(void*,void*), void (*data_test)(void*,void*), void (*data_teardown)(void*,void*));
     * }
     */
    public static MemorySegment g_test_create_case(MemorySegment test_name, long data_size, MemorySegment test_data, MemorySegment data_setup, MemorySegment data_test, MemorySegment data_teardown) {
        var mh$ = g_test_create_case$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(test_name, data_size, test_data, data_setup, data_test, data_teardown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_create_suite$MH() {
        return RuntimeHelper.requireNonNull(constants$456.const$4,"g_test_create_suite");
    }
    /**
     * {@snippet :
     * struct GTestSuite* g_test_create_suite(char* suite_name);
     * }
     */
    public static MemorySegment g_test_create_suite(MemorySegment suite_name) {
        var mh$ = g_test_create_suite$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(suite_name);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_get_root$MH() {
        return RuntimeHelper.requireNonNull(constants$456.const$5,"g_test_get_root");
    }
    /**
     * {@snippet :
     * struct GTestSuite* g_test_get_root();
     * }
     */
    public static MemorySegment g_test_get_root() {
        var mh$ = g_test_get_root$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_suite_add$MH() {
        return RuntimeHelper.requireNonNull(constants$457.const$0,"g_test_suite_add");
    }
    /**
     * {@snippet :
     * void g_test_suite_add(struct GTestSuite* suite, struct GTestCase* test_case);
     * }
     */
    public static void g_test_suite_add(MemorySegment suite, MemorySegment test_case) {
        var mh$ = g_test_suite_add$MH();
        try {
            mh$.invokeExact(suite, test_case);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_suite_add_suite$MH() {
        return RuntimeHelper.requireNonNull(constants$457.const$1,"g_test_suite_add_suite");
    }
    /**
     * {@snippet :
     * void g_test_suite_add_suite(struct GTestSuite* suite, struct GTestSuite* nestedsuite);
     * }
     */
    public static void g_test_suite_add_suite(MemorySegment suite, MemorySegment nestedsuite) {
        var mh$ = g_test_suite_add_suite$MH();
        try {
            mh$.invokeExact(suite, nestedsuite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_run_suite$MH() {
        return RuntimeHelper.requireNonNull(constants$457.const$2,"g_test_run_suite");
    }
    /**
     * {@snippet :
     * int g_test_run_suite(struct GTestSuite* suite);
     * }
     */
    public static int g_test_run_suite(MemorySegment suite) {
        var mh$ = g_test_run_suite$MH();
        try {
            return (int)mh$.invokeExact(suite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_case_free$MH() {
        return RuntimeHelper.requireNonNull(constants$457.const$3,"g_test_case_free");
    }
    /**
     * {@snippet :
     * void g_test_case_free(struct GTestCase* test_case);
     * }
     */
    public static void g_test_case_free(MemorySegment test_case) {
        var mh$ = g_test_case_free$MH();
        try {
            mh$.invokeExact(test_case);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_suite_free$MH() {
        return RuntimeHelper.requireNonNull(constants$457.const$4,"g_test_suite_free");
    }
    /**
     * {@snippet :
     * void g_test_suite_free(struct GTestSuite* suite);
     * }
     */
    public static void g_test_suite_free(MemorySegment suite) {
        var mh$ = g_test_suite_free$MH();
        try {
            mh$.invokeExact(suite);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_trap_assertions$MH() {
        return RuntimeHelper.requireNonNull(constants$457.const$6,"g_test_trap_assertions");
    }
    /**
     * {@snippet :
     * void g_test_trap_assertions(char* domain, char* file, int line, char* func, unsigned long assertion_flags, char* pattern);
     * }
     */
    public static void g_test_trap_assertions(MemorySegment domain, MemorySegment file, int line, MemorySegment func, long assertion_flags, MemorySegment pattern) {
        var mh$ = g_test_trap_assertions$MH();
        try {
            mh$.invokeExact(domain, file, line, func, assertion_flags, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assertion_message$MH() {
        return RuntimeHelper.requireNonNull(constants$458.const$0,"g_assertion_message");
    }
    /**
     * {@snippet :
     * void g_assertion_message(char* domain, char* file, int line, char* func, char* message);
     * }
     */
    public static void g_assertion_message(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment message) {
        var mh$ = g_assertion_message$MH();
        try {
            mh$.invokeExact(domain, file, line, func, message);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assertion_message_expr$MH() {
        return RuntimeHelper.requireNonNull(constants$458.const$1,"g_assertion_message_expr");
    }
    /**
     * {@snippet :
     * void g_assertion_message_expr(char* domain, char* file, int line, char* func, char* expr);
     * }
     */
    public static void g_assertion_message_expr(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment expr) {
        var mh$ = g_assertion_message_expr$MH();
        try {
            mh$.invokeExact(domain, file, line, func, expr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assertion_message_cmpstr$MH() {
        return RuntimeHelper.requireNonNull(constants$458.const$3,"g_assertion_message_cmpstr");
    }
    /**
     * {@snippet :
     * void g_assertion_message_cmpstr(char* domain, char* file, int line, char* func, char* expr, char* arg1, char* cmp, char* arg2);
     * }
     */
    public static void g_assertion_message_cmpstr(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment expr, MemorySegment arg1, MemorySegment cmp, MemorySegment arg2) {
        var mh$ = g_assertion_message_cmpstr$MH();
        try {
            mh$.invokeExact(domain, file, line, func, expr, arg1, cmp, arg2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assertion_message_cmpstrv$MH() {
        return RuntimeHelper.requireNonNull(constants$458.const$5,"g_assertion_message_cmpstrv");
    }
    /**
     * {@snippet :
     * void g_assertion_message_cmpstrv(char* domain, char* file, int line, char* func, char* expr, char** arg1, char** arg2, unsigned long first_wrong_idx);
     * }
     */
    public static void g_assertion_message_cmpstrv(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment expr, MemorySegment arg1, MemorySegment arg2, long first_wrong_idx) {
        var mh$ = g_assertion_message_cmpstrv$MH();
        try {
            mh$.invokeExact(domain, file, line, func, expr, arg1, arg2, first_wrong_idx);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_assertion_message_error$MH() {
        return RuntimeHelper.requireNonNull(constants$459.const$1,"g_assertion_message_error");
    }
    /**
     * {@snippet :
     * void g_assertion_message_error(char* domain, char* file, int line, char* func, char* expr, struct _GError* error, unsigned int error_domain, int error_code);
     * }
     */
    public static void g_assertion_message_error(MemorySegment domain, MemorySegment file, int line, MemorySegment func, MemorySegment expr, MemorySegment error, int error_domain, int error_code) {
        var mh$ = g_assertion_message_error$MH();
        try {
            mh$.invokeExact(domain, file, line, func, expr, error, error_domain, error_code);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_add_vtable$MH() {
        return RuntimeHelper.requireNonNull(constants$459.const$6,"g_test_add_vtable");
    }
    /**
     * {@snippet :
     * void g_test_add_vtable(char* testpath, unsigned long data_size, void* test_data, void (*data_setup)(void*,void*), void (*data_test)(void*,void*), void (*data_teardown)(void*,void*));
     * }
     */
    public static void g_test_add_vtable(MemorySegment testpath, long data_size, MemorySegment test_data, MemorySegment data_setup, MemorySegment data_test, MemorySegment data_teardown) {
        var mh$ = g_test_add_vtable$MH();
        try {
            mh$.invokeExact(testpath, data_size, test_data, data_setup, data_test, data_teardown);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout g_test_config_vars$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle g_test_config_vars$VH() {
        return constants$211.const$1;
    }
    public static MemorySegment g_test_config_vars$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$461.const$1,"g_test_config_vars");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * struct GTestConfig* g_test_config_vars;
     * }
     */
    public static MemorySegment g_test_config_vars$get() {
        return (java.lang.foreign.MemorySegment) constants$211.const$1.get(RuntimeHelper.requireNonNull(constants$461.const$1, "g_test_config_vars"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * struct GTestConfig* g_test_config_vars;
     * }
     */
    public static void g_test_config_vars$set(MemorySegment x) {
        constants$211.const$1.set(RuntimeHelper.requireNonNull(constants$461.const$1, "g_test_config_vars"), x);
    }
    /**
     * {@snippet :
     * enum GTestResult.G_TEST_RUN_SUCCESS = 0;
     * }
     */
    public static int G_TEST_RUN_SUCCESS() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GTestResult.G_TEST_RUN_SKIPPED = 1;
     * }
     */
    public static int G_TEST_RUN_SKIPPED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GTestResult.G_TEST_RUN_FAILURE = 2;
     * }
     */
    public static int G_TEST_RUN_FAILURE() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GTestResult.G_TEST_RUN_INCOMPLETE = 3;
     * }
     */
    public static int G_TEST_RUN_INCOMPLETE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_NONE = 0;
     * }
     */
    public static int G_TEST_LOG_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_ERROR = 1;
     * }
     */
    public static int G_TEST_LOG_ERROR() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_START_BINARY = 2;
     * }
     */
    public static int G_TEST_LOG_START_BINARY() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_LIST_CASE = 3;
     * }
     */
    public static int G_TEST_LOG_LIST_CASE() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_SKIP_CASE = 4;
     * }
     */
    public static int G_TEST_LOG_SKIP_CASE() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_START_CASE = 5;
     * }
     */
    public static int G_TEST_LOG_START_CASE() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_STOP_CASE = 6;
     * }
     */
    public static int G_TEST_LOG_STOP_CASE() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_MIN_RESULT = 7;
     * }
     */
    public static int G_TEST_LOG_MIN_RESULT() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_MAX_RESULT = 8;
     * }
     */
    public static int G_TEST_LOG_MAX_RESULT() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_MESSAGE = 9;
     * }
     */
    public static int G_TEST_LOG_MESSAGE() {
        return (int)9L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_START_SUITE = 10;
     * }
     */
    public static int G_TEST_LOG_START_SUITE() {
        return (int)10L;
    }
    /**
     * {@snippet :
     * enum GTestLogType.G_TEST_LOG_STOP_SUITE = 11;
     * }
     */
    public static int G_TEST_LOG_STOP_SUITE() {
        return (int)11L;
    }
    public static MethodHandle g_test_log_type_name$MH() {
        return RuntimeHelper.requireNonNull(constants$462.const$5,"g_test_log_type_name");
    }
    /**
     * {@snippet :
     * char* g_test_log_type_name(enum GTestLogType log_type);
     * }
     */
    public static MemorySegment g_test_log_type_name(int log_type) {
        var mh$ = g_test_log_type_name$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(log_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_buffer_new$MH() {
        return RuntimeHelper.requireNonNull(constants$463.const$0,"g_test_log_buffer_new");
    }
    /**
     * {@snippet :
     * struct GTestLogBuffer* g_test_log_buffer_new();
     * }
     */
    public static MemorySegment g_test_log_buffer_new() {
        var mh$ = g_test_log_buffer_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_buffer_free$MH() {
        return RuntimeHelper.requireNonNull(constants$463.const$1,"g_test_log_buffer_free");
    }
    /**
     * {@snippet :
     * void g_test_log_buffer_free(struct GTestLogBuffer* tbuffer);
     * }
     */
    public static void g_test_log_buffer_free(MemorySegment tbuffer) {
        var mh$ = g_test_log_buffer_free$MH();
        try {
            mh$.invokeExact(tbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_buffer_push$MH() {
        return RuntimeHelper.requireNonNull(constants$463.const$2,"g_test_log_buffer_push");
    }
    /**
     * {@snippet :
     * void g_test_log_buffer_push(struct GTestLogBuffer* tbuffer, unsigned int n_bytes, unsigned char* bytes);
     * }
     */
    public static void g_test_log_buffer_push(MemorySegment tbuffer, int n_bytes, MemorySegment bytes) {
        var mh$ = g_test_log_buffer_push$MH();
        try {
            mh$.invokeExact(tbuffer, n_bytes, bytes);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_buffer_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$463.const$3,"g_test_log_buffer_pop");
    }
    /**
     * {@snippet :
     * struct GTestLogMsg* g_test_log_buffer_pop(struct GTestLogBuffer* tbuffer);
     * }
     */
    public static MemorySegment g_test_log_buffer_pop(MemorySegment tbuffer) {
        var mh$ = g_test_log_buffer_pop$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tbuffer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_msg_free$MH() {
        return RuntimeHelper.requireNonNull(constants$463.const$4,"g_test_log_msg_free");
    }
    /**
     * {@snippet :
     * void g_test_log_msg_free(struct GTestLogMsg* tmsg);
     * }
     */
    public static void g_test_log_msg_free(MemorySegment tmsg) {
        var mh$ = g_test_log_msg_free$MH();
        try {
            mh$.invokeExact(tmsg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_log_set_fatal_handler$MH() {
        return RuntimeHelper.requireNonNull(constants$464.const$2,"g_test_log_set_fatal_handler");
    }
    /**
     * {@snippet :
     * void g_test_log_set_fatal_handler(int (*log_func)(char*,enum GLogLevelFlags,char*,void*), void* user_data);
     * }
     */
    public static void g_test_log_set_fatal_handler(MemorySegment log_func, MemorySegment user_data) {
        var mh$ = g_test_log_set_fatal_handler$MH();
        try {
            mh$.invokeExact(log_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_expect_message$MH() {
        return RuntimeHelper.requireNonNull(constants$464.const$3,"g_test_expect_message");
    }
    /**
     * {@snippet :
     * void g_test_expect_message(char* log_domain, enum GLogLevelFlags log_level, char* pattern);
     * }
     */
    public static void g_test_expect_message(MemorySegment log_domain, int log_level, MemorySegment pattern) {
        var mh$ = g_test_expect_message$MH();
        try {
            mh$.invokeExact(log_domain, log_level, pattern);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_assert_expected_messages_internal$MH() {
        return RuntimeHelper.requireNonNull(constants$464.const$5,"g_test_assert_expected_messages_internal");
    }
    /**
     * {@snippet :
     * void g_test_assert_expected_messages_internal(char* domain, char* file, int line, char* func);
     * }
     */
    public static void g_test_assert_expected_messages_internal(MemorySegment domain, MemorySegment file, int line, MemorySegment func) {
        var mh$ = g_test_assert_expected_messages_internal$MH();
        try {
            mh$.invokeExact(domain, file, line, func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GTestFileType.G_TEST_DIST = 0;
     * }
     */
    public static int G_TEST_DIST() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GTestFileType.G_TEST_BUILT = 1;
     * }
     */
    public static int G_TEST_BUILT() {
        return (int)1L;
    }
    public static MethodHandle g_test_build_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$465.const$0,"g_test_build_filename");
    }
    /**
     * {@snippet :
     * char* g_test_build_filename(enum GTestFileType file_type, char* first_path,...);
     * }
     */
    public static MemorySegment g_test_build_filename(int file_type, MemorySegment first_path, Object... x2) {
        var mh$ = g_test_build_filename$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file_type, first_path, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_get_dir$MH() {
        return RuntimeHelper.requireNonNull(constants$465.const$1,"g_test_get_dir");
    }
    /**
     * {@snippet :
     * char* g_test_get_dir(enum GTestFileType file_type);
     * }
     */
    public static MemorySegment g_test_get_dir(int file_type) {
        var mh$ = g_test_get_dir$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file_type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_test_get_filename$MH() {
        return RuntimeHelper.requireNonNull(constants$465.const$2,"g_test_get_filename");
    }
    /**
     * {@snippet :
     * char* g_test_get_filename(enum GTestFileType file_type, char* first_path,...);
     * }
     */
    public static MemorySegment g_test_get_filename(int file_type, MemorySegment first_path, Object... x2) {
        var mh$ = g_test_get_filename$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(file_type, first_path, x2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_new$MH() {
        return RuntimeHelper.requireNonNull(constants$466.const$4,"g_thread_pool_new");
    }
    /**
     * {@snippet :
     * struct _GThreadPool* g_thread_pool_new(void (*func)(void*,void*), void* user_data, int max_threads, int exclusive, struct _GError** error);
     * }
     */
    public static MemorySegment g_thread_pool_new(MemorySegment func, MemorySegment user_data, int max_threads, int exclusive, MemorySegment error) {
        var mh$ = g_thread_pool_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(func, user_data, max_threads, exclusive, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$467.const$2,"g_thread_pool_new_full");
    }
    /**
     * {@snippet :
     * struct _GThreadPool* g_thread_pool_new_full(void (*func)(void*,void*), void* user_data, void (*item_free_func)(void*), int max_threads, int exclusive, struct _GError** error);
     * }
     */
    public static MemorySegment g_thread_pool_new_full(MemorySegment func, MemorySegment user_data, MemorySegment item_free_func, int max_threads, int exclusive, MemorySegment error) {
        var mh$ = g_thread_pool_new_full$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(func, user_data, item_free_func, max_threads, exclusive, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_free$MH() {
        return RuntimeHelper.requireNonNull(constants$467.const$4,"g_thread_pool_free");
    }
    /**
     * {@snippet :
     * void g_thread_pool_free(struct _GThreadPool* pool, int immediate, int wait_);
     * }
     */
    public static void g_thread_pool_free(MemorySegment pool, int immediate, int wait_) {
        var mh$ = g_thread_pool_free$MH();
        try {
            mh$.invokeExact(pool, immediate, wait_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_push$MH() {
        return RuntimeHelper.requireNonNull(constants$467.const$5,"g_thread_pool_push");
    }
    /**
     * {@snippet :
     * int g_thread_pool_push(struct _GThreadPool* pool, void* data, struct _GError** error);
     * }
     */
    public static int g_thread_pool_push(MemorySegment pool, MemorySegment data, MemorySegment error) {
        var mh$ = g_thread_pool_push$MH();
        try {
            return (int)mh$.invokeExact(pool, data, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_unprocessed$MH() {
        return RuntimeHelper.requireNonNull(constants$468.const$0,"g_thread_pool_unprocessed");
    }
    /**
     * {@snippet :
     * unsigned int g_thread_pool_unprocessed(struct _GThreadPool* pool);
     * }
     */
    public static int g_thread_pool_unprocessed(MemorySegment pool) {
        var mh$ = g_thread_pool_unprocessed$MH();
        try {
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_set_sort_function$MH() {
        return RuntimeHelper.requireNonNull(constants$468.const$2,"g_thread_pool_set_sort_function");
    }
    /**
     * {@snippet :
     * void g_thread_pool_set_sort_function(struct _GThreadPool* pool, int (*func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_thread_pool_set_sort_function(MemorySegment pool, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_thread_pool_set_sort_function$MH();
        try {
            mh$.invokeExact(pool, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_move_to_front$MH() {
        return RuntimeHelper.requireNonNull(constants$468.const$3,"g_thread_pool_move_to_front");
    }
    /**
     * {@snippet :
     * int g_thread_pool_move_to_front(struct _GThreadPool* pool, void* data);
     * }
     */
    public static int g_thread_pool_move_to_front(MemorySegment pool, MemorySegment data) {
        var mh$ = g_thread_pool_move_to_front$MH();
        try {
            return (int)mh$.invokeExact(pool, data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_set_max_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$468.const$4,"g_thread_pool_set_max_threads");
    }
    /**
     * {@snippet :
     * int g_thread_pool_set_max_threads(struct _GThreadPool* pool, int max_threads, struct _GError** error);
     * }
     */
    public static int g_thread_pool_set_max_threads(MemorySegment pool, int max_threads, MemorySegment error) {
        var mh$ = g_thread_pool_set_max_threads$MH();
        try {
            return (int)mh$.invokeExact(pool, max_threads, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_get_max_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$468.const$5,"g_thread_pool_get_max_threads");
    }
    /**
     * {@snippet :
     * int g_thread_pool_get_max_threads(struct _GThreadPool* pool);
     * }
     */
    public static int g_thread_pool_get_max_threads(MemorySegment pool) {
        var mh$ = g_thread_pool_get_max_threads$MH();
        try {
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_get_num_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$469.const$0,"g_thread_pool_get_num_threads");
    }
    /**
     * {@snippet :
     * unsigned int g_thread_pool_get_num_threads(struct _GThreadPool* pool);
     * }
     */
    public static int g_thread_pool_get_num_threads(MemorySegment pool) {
        var mh$ = g_thread_pool_get_num_threads$MH();
        try {
            return (int)mh$.invokeExact(pool);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_set_max_unused_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$469.const$1,"g_thread_pool_set_max_unused_threads");
    }
    /**
     * {@snippet :
     * void g_thread_pool_set_max_unused_threads(int max_threads);
     * }
     */
    public static void g_thread_pool_set_max_unused_threads(int max_threads) {
        var mh$ = g_thread_pool_set_max_unused_threads$MH();
        try {
            mh$.invokeExact(max_threads);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_get_max_unused_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$469.const$2,"g_thread_pool_get_max_unused_threads");
    }
    /**
     * {@snippet :
     * int g_thread_pool_get_max_unused_threads();
     * }
     */
    public static int g_thread_pool_get_max_unused_threads() {
        var mh$ = g_thread_pool_get_max_unused_threads$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_get_num_unused_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$469.const$3,"g_thread_pool_get_num_unused_threads");
    }
    /**
     * {@snippet :
     * unsigned int g_thread_pool_get_num_unused_threads();
     * }
     */
    public static int g_thread_pool_get_num_unused_threads() {
        var mh$ = g_thread_pool_get_num_unused_threads$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_stop_unused_threads$MH() {
        return RuntimeHelper.requireNonNull(constants$469.const$4,"g_thread_pool_stop_unused_threads");
    }
    /**
     * {@snippet :
     * void g_thread_pool_stop_unused_threads();
     * }
     */
    public static void g_thread_pool_stop_unused_threads() {
        var mh$ = g_thread_pool_stop_unused_threads$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_set_max_idle_time$MH() {
        return RuntimeHelper.requireNonNull(constants$469.const$5,"g_thread_pool_set_max_idle_time");
    }
    /**
     * {@snippet :
     * void g_thread_pool_set_max_idle_time(unsigned int interval);
     * }
     */
    public static void g_thread_pool_set_max_idle_time(int interval) {
        var mh$ = g_thread_pool_set_max_idle_time$MH();
        try {
            mh$.invokeExact(interval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_pool_get_max_idle_time$MH() {
        return RuntimeHelper.requireNonNull(constants$470.const$0,"g_thread_pool_get_max_idle_time");
    }
    /**
     * {@snippet :
     * unsigned int g_thread_pool_get_max_idle_time();
     * }
     */
    public static int g_thread_pool_get_max_idle_time() {
        var mh$ = g_thread_pool_get_max_idle_time$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_new$MH() {
        return RuntimeHelper.requireNonNull(constants$470.const$1,"g_timer_new");
    }
    /**
     * {@snippet :
     * struct _GTimer* g_timer_new();
     * }
     */
    public static MemorySegment g_timer_new() {
        var mh$ = g_timer_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$470.const$2,"g_timer_destroy");
    }
    /**
     * {@snippet :
     * void g_timer_destroy(struct _GTimer* timer);
     * }
     */
    public static void g_timer_destroy(MemorySegment timer) {
        var mh$ = g_timer_destroy$MH();
        try {
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_start$MH() {
        return RuntimeHelper.requireNonNull(constants$470.const$3,"g_timer_start");
    }
    /**
     * {@snippet :
     * void g_timer_start(struct _GTimer* timer);
     * }
     */
    public static void g_timer_start(MemorySegment timer) {
        var mh$ = g_timer_start$MH();
        try {
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_stop$MH() {
        return RuntimeHelper.requireNonNull(constants$470.const$4,"g_timer_stop");
    }
    /**
     * {@snippet :
     * void g_timer_stop(struct _GTimer* timer);
     * }
     */
    public static void g_timer_stop(MemorySegment timer) {
        var mh$ = g_timer_stop$MH();
        try {
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$470.const$5,"g_timer_reset");
    }
    /**
     * {@snippet :
     * void g_timer_reset(struct _GTimer* timer);
     * }
     */
    public static void g_timer_reset(MemorySegment timer) {
        var mh$ = g_timer_reset$MH();
        try {
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_continue$MH() {
        return RuntimeHelper.requireNonNull(constants$471.const$0,"g_timer_continue");
    }
    /**
     * {@snippet :
     * void g_timer_continue(struct _GTimer* timer);
     * }
     */
    public static void g_timer_continue(MemorySegment timer) {
        var mh$ = g_timer_continue$MH();
        try {
            mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_elapsed$MH() {
        return RuntimeHelper.requireNonNull(constants$471.const$1,"g_timer_elapsed");
    }
    /**
     * {@snippet :
     * double g_timer_elapsed(struct _GTimer* timer, unsigned long* microseconds);
     * }
     */
    public static double g_timer_elapsed(MemorySegment timer, MemorySegment microseconds) {
        var mh$ = g_timer_elapsed$MH();
        try {
            return (double)mh$.invokeExact(timer, microseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_timer_is_active$MH() {
        return RuntimeHelper.requireNonNull(constants$471.const$2,"g_timer_is_active");
    }
    /**
     * {@snippet :
     * int g_timer_is_active(struct _GTimer* timer);
     * }
     */
    public static int g_timer_is_active(MemorySegment timer) {
        var mh$ = g_timer_is_active$MH();
        try {
            return (int)mh$.invokeExact(timer);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_usleep$MH() {
        return RuntimeHelper.requireNonNull(constants$471.const$3,"g_usleep");
    }
    /**
     * {@snippet :
     * void g_usleep(unsigned long microseconds);
     * }
     */
    public static void g_usleep(long microseconds) {
        var mh$ = g_usleep$MH();
        try {
            mh$.invokeExact(microseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_val_add$MH() {
        return RuntimeHelper.requireNonNull(constants$471.const$4,"g_time_val_add");
    }
    /**
     * {@snippet :
     * void g_time_val_add(struct _GTimeVal* time_, long microseconds);
     * }
     */
    public static void g_time_val_add(MemorySegment time_, long microseconds) {
        var mh$ = g_time_val_add$MH();
        try {
            mh$.invokeExact(time_, microseconds);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_val_from_iso8601$MH() {
        return RuntimeHelper.requireNonNull(constants$471.const$5,"g_time_val_from_iso8601");
    }
    /**
     * {@snippet :
     * int g_time_val_from_iso8601(char* iso_date, struct _GTimeVal* time_);
     * }
     */
    public static int g_time_val_from_iso8601(MemorySegment iso_date, MemorySegment time_) {
        var mh$ = g_time_val_from_iso8601$MH();
        try {
            return (int)mh$.invokeExact(iso_date, time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_time_val_to_iso8601$MH() {
        return RuntimeHelper.requireNonNull(constants$472.const$0,"g_time_val_to_iso8601");
    }
    /**
     * {@snippet :
     * char* g_time_val_to_iso8601(struct _GTimeVal* time_);
     * }
     */
    public static MemorySegment g_time_val_to_iso8601(MemorySegment time_) {
        var mh$ = g_time_val_to_iso8601$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(time_);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_trash_stack_push$MH() {
        return RuntimeHelper.requireNonNull(constants$472.const$3,"g_trash_stack_push");
    }
    /**
     * {@snippet :
     * void g_trash_stack_push(struct _GTrashStack** stack_p, void* data_p);
     * }
     */
    public static void g_trash_stack_push(MemorySegment stack_p, MemorySegment data_p) {
        var mh$ = g_trash_stack_push$MH();
        try {
            mh$.invokeExact(stack_p, data_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_trash_stack_pop$MH() {
        return RuntimeHelper.requireNonNull(constants$472.const$4,"g_trash_stack_pop");
    }
    /**
     * {@snippet :
     * void* g_trash_stack_pop(struct _GTrashStack** stack_p);
     * }
     */
    public static MemorySegment g_trash_stack_pop(MemorySegment stack_p) {
        var mh$ = g_trash_stack_pop$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stack_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_trash_stack_peek$MH() {
        return RuntimeHelper.requireNonNull(constants$472.const$5,"g_trash_stack_peek");
    }
    /**
     * {@snippet :
     * void* g_trash_stack_peek(struct _GTrashStack** stack_p);
     * }
     */
    public static MemorySegment g_trash_stack_peek(MemorySegment stack_p) {
        var mh$ = g_trash_stack_peek$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(stack_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_trash_stack_height$MH() {
        return RuntimeHelper.requireNonNull(constants$473.const$0,"g_trash_stack_height");
    }
    /**
     * {@snippet :
     * unsigned int g_trash_stack_height(struct _GTrashStack** stack_p);
     * }
     */
    public static int g_trash_stack_height(MemorySegment stack_p) {
        var mh$ = g_trash_stack_height$MH();
        try {
            return (int)mh$.invokeExact(stack_p);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_new$MH() {
        return RuntimeHelper.requireNonNull(constants$473.const$4,"g_tree_new");
    }
    /**
     * {@snippet :
     * struct _GTree* g_tree_new(int (*key_compare_func)(void*,void*));
     * }
     */
    public static MemorySegment g_tree_new(MemorySegment key_compare_func) {
        var mh$ = g_tree_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(key_compare_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_new_with_data$MH() {
        return RuntimeHelper.requireNonNull(constants$474.const$0,"g_tree_new_with_data");
    }
    /**
     * {@snippet :
     * struct _GTree* g_tree_new_with_data(int (*key_compare_func)(void*,void*,void*), void* key_compare_data);
     * }
     */
    public static MemorySegment g_tree_new_with_data(MemorySegment key_compare_func, MemorySegment key_compare_data) {
        var mh$ = g_tree_new_with_data$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(key_compare_func, key_compare_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_new_full$MH() {
        return RuntimeHelper.requireNonNull(constants$474.const$4,"g_tree_new_full");
    }
    /**
     * {@snippet :
     * struct _GTree* g_tree_new_full(int (*key_compare_func)(void*,void*,void*), void* key_compare_data, void (*key_destroy_func)(void*), void (*value_destroy_func)(void*));
     * }
     */
    public static MemorySegment g_tree_new_full(MemorySegment key_compare_func, MemorySegment key_compare_data, MemorySegment key_destroy_func, MemorySegment value_destroy_func) {
        var mh$ = g_tree_new_full$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(key_compare_func, key_compare_data, key_destroy_func, value_destroy_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_first$MH() {
        return RuntimeHelper.requireNonNull(constants$474.const$5,"g_tree_node_first");
    }
    /**
     * {@snippet :
     * struct _GTreeNode* g_tree_node_first(struct _GTree* tree);
     * }
     */
    public static MemorySegment g_tree_node_first(MemorySegment tree) {
        var mh$ = g_tree_node_first$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_last$MH() {
        return RuntimeHelper.requireNonNull(constants$475.const$0,"g_tree_node_last");
    }
    /**
     * {@snippet :
     * struct _GTreeNode* g_tree_node_last(struct _GTree* tree);
     * }
     */
    public static MemorySegment g_tree_node_last(MemorySegment tree) {
        var mh$ = g_tree_node_last$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_previous$MH() {
        return RuntimeHelper.requireNonNull(constants$475.const$1,"g_tree_node_previous");
    }
    /**
     * {@snippet :
     * struct _GTreeNode* g_tree_node_previous(struct _GTreeNode* node);
     * }
     */
    public static MemorySegment g_tree_node_previous(MemorySegment node) {
        var mh$ = g_tree_node_previous$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_next$MH() {
        return RuntimeHelper.requireNonNull(constants$475.const$2,"g_tree_node_next");
    }
    /**
     * {@snippet :
     * struct _GTreeNode* g_tree_node_next(struct _GTreeNode* node);
     * }
     */
    public static MemorySegment g_tree_node_next(MemorySegment node) {
        var mh$ = g_tree_node_next$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$475.const$3,"g_tree_ref");
    }
    /**
     * {@snippet :
     * struct _GTree* g_tree_ref(struct _GTree* tree);
     * }
     */
    public static MemorySegment g_tree_ref(MemorySegment tree) {
        var mh$ = g_tree_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$475.const$4,"g_tree_unref");
    }
    /**
     * {@snippet :
     * void g_tree_unref(struct _GTree* tree);
     * }
     */
    public static void g_tree_unref(MemorySegment tree) {
        var mh$ = g_tree_unref$MH();
        try {
            mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$475.const$5,"g_tree_destroy");
    }
    /**
     * {@snippet :
     * void g_tree_destroy(struct _GTree* tree);
     * }
     */
    public static void g_tree_destroy(MemorySegment tree) {
        var mh$ = g_tree_destroy$MH();
        try {
            mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_insert_node$MH() {
        return RuntimeHelper.requireNonNull(constants$476.const$0,"g_tree_insert_node");
    }
    /**
     * {@snippet :
     * struct _GTreeNode* g_tree_insert_node(struct _GTree* tree, void* key, void* value);
     * }
     */
    public static MemorySegment g_tree_insert_node(MemorySegment tree, MemorySegment key, MemorySegment value) {
        var mh$ = g_tree_insert_node$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$476.const$1,"g_tree_insert");
    }
    /**
     * {@snippet :
     * void g_tree_insert(struct _GTree* tree, void* key, void* value);
     * }
     */
    public static void g_tree_insert(MemorySegment tree, MemorySegment key, MemorySegment value) {
        var mh$ = g_tree_insert$MH();
        try {
            mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_replace_node$MH() {
        return RuntimeHelper.requireNonNull(constants$476.const$2,"g_tree_replace_node");
    }
    /**
     * {@snippet :
     * struct _GTreeNode* g_tree_replace_node(struct _GTree* tree, void* key, void* value);
     * }
     */
    public static MemorySegment g_tree_replace_node(MemorySegment tree, MemorySegment key, MemorySegment value) {
        var mh$ = g_tree_replace_node$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_replace$MH() {
        return RuntimeHelper.requireNonNull(constants$476.const$3,"g_tree_replace");
    }
    /**
     * {@snippet :
     * void g_tree_replace(struct _GTree* tree, void* key, void* value);
     * }
     */
    public static void g_tree_replace(MemorySegment tree, MemorySegment key, MemorySegment value) {
        var mh$ = g_tree_replace$MH();
        try {
            mh$.invokeExact(tree, key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$476.const$4,"g_tree_remove");
    }
    /**
     * {@snippet :
     * int g_tree_remove(struct _GTree* tree, void* key);
     * }
     */
    public static int g_tree_remove(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_remove$MH();
        try {
            return (int)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_remove_all$MH() {
        return RuntimeHelper.requireNonNull(constants$476.const$5,"g_tree_remove_all");
    }
    /**
     * {@snippet :
     * void g_tree_remove_all(struct _GTree* tree);
     * }
     */
    public static void g_tree_remove_all(MemorySegment tree) {
        var mh$ = g_tree_remove_all$MH();
        try {
            mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_steal$MH() {
        return RuntimeHelper.requireNonNull(constants$477.const$0,"g_tree_steal");
    }
    /**
     * {@snippet :
     * int g_tree_steal(struct _GTree* tree, void* key);
     * }
     */
    public static int g_tree_steal(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_steal$MH();
        try {
            return (int)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_key$MH() {
        return RuntimeHelper.requireNonNull(constants$477.const$1,"g_tree_node_key");
    }
    /**
     * {@snippet :
     * void* g_tree_node_key(struct _GTreeNode* node);
     * }
     */
    public static MemorySegment g_tree_node_key(MemorySegment node) {
        var mh$ = g_tree_node_key$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_node_value$MH() {
        return RuntimeHelper.requireNonNull(constants$477.const$2,"g_tree_node_value");
    }
    /**
     * {@snippet :
     * void* g_tree_node_value(struct _GTreeNode* node);
     * }
     */
    public static MemorySegment g_tree_node_value(MemorySegment node) {
        var mh$ = g_tree_node_value$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(node);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_lookup_node$MH() {
        return RuntimeHelper.requireNonNull(constants$477.const$3,"g_tree_lookup_node");
    }
    /**
     * {@snippet :
     * struct _GTreeNode* g_tree_lookup_node(struct _GTree* tree, void* key);
     * }
     */
    public static MemorySegment g_tree_lookup_node(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_lookup_node$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_lookup$MH() {
        return RuntimeHelper.requireNonNull(constants$477.const$4,"g_tree_lookup");
    }
    /**
     * {@snippet :
     * void* g_tree_lookup(struct _GTree* tree, void* key);
     * }
     */
    public static MemorySegment g_tree_lookup(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_lookup$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_lookup_extended$MH() {
        return RuntimeHelper.requireNonNull(constants$477.const$5,"g_tree_lookup_extended");
    }
    /**
     * {@snippet :
     * int g_tree_lookup_extended(struct _GTree* tree, void* lookup_key, void** orig_key, void** value);
     * }
     */
    public static int g_tree_lookup_extended(MemorySegment tree, MemorySegment lookup_key, MemorySegment orig_key, MemorySegment value) {
        var mh$ = g_tree_lookup_extended$MH();
        try {
            return (int)mh$.invokeExact(tree, lookup_key, orig_key, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$478.const$1,"g_tree_foreach");
    }
    /**
     * {@snippet :
     * void g_tree_foreach(struct _GTree* tree, int (*func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_tree_foreach(MemorySegment tree, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_tree_foreach$MH();
        try {
            mh$.invokeExact(tree, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_foreach_node$MH() {
        return RuntimeHelper.requireNonNull(constants$478.const$3,"g_tree_foreach_node");
    }
    /**
     * {@snippet :
     * void g_tree_foreach_node(struct _GTree* tree, int (*func)(struct _GTreeNode*,void*), void* user_data);
     * }
     */
    public static void g_tree_foreach_node(MemorySegment tree, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_tree_foreach_node$MH();
        try {
            mh$.invokeExact(tree, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_traverse$MH() {
        return RuntimeHelper.requireNonNull(constants$478.const$5,"g_tree_traverse");
    }
    /**
     * {@snippet :
     * void g_tree_traverse(struct _GTree* tree, int (*traverse_func)(void*,void*,void*), enum GTraverseType traverse_type, void* user_data);
     * }
     */
    public static void g_tree_traverse(MemorySegment tree, MemorySegment traverse_func, int traverse_type, MemorySegment user_data) {
        var mh$ = g_tree_traverse$MH();
        try {
            mh$.invokeExact(tree, traverse_func, traverse_type, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_search_node$MH() {
        return RuntimeHelper.requireNonNull(constants$479.const$1,"g_tree_search_node");
    }
    /**
     * {@snippet :
     * struct _GTreeNode* g_tree_search_node(struct _GTree* tree, int (*search_func)(void*,void*), void* user_data);
     * }
     */
    public static MemorySegment g_tree_search_node(MemorySegment tree, MemorySegment search_func, MemorySegment user_data) {
        var mh$ = g_tree_search_node$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree, search_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_search$MH() {
        return RuntimeHelper.requireNonNull(constants$479.const$3,"g_tree_search");
    }
    /**
     * {@snippet :
     * void* g_tree_search(struct _GTree* tree, int (*search_func)(void*,void*), void* user_data);
     * }
     */
    public static MemorySegment g_tree_search(MemorySegment tree, MemorySegment search_func, MemorySegment user_data) {
        var mh$ = g_tree_search$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree, search_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_lower_bound$MH() {
        return RuntimeHelper.requireNonNull(constants$479.const$4,"g_tree_lower_bound");
    }
    /**
     * {@snippet :
     * struct _GTreeNode* g_tree_lower_bound(struct _GTree* tree, void* key);
     * }
     */
    public static MemorySegment g_tree_lower_bound(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_lower_bound$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_upper_bound$MH() {
        return RuntimeHelper.requireNonNull(constants$479.const$5,"g_tree_upper_bound");
    }
    /**
     * {@snippet :
     * struct _GTreeNode* g_tree_upper_bound(struct _GTree* tree, void* key);
     * }
     */
    public static MemorySegment g_tree_upper_bound(MemorySegment tree, MemorySegment key) {
        var mh$ = g_tree_upper_bound$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tree, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_height$MH() {
        return RuntimeHelper.requireNonNull(constants$480.const$0,"g_tree_height");
    }
    /**
     * {@snippet :
     * int g_tree_height(struct _GTree* tree);
     * }
     */
    public static int g_tree_height(MemorySegment tree) {
        var mh$ = g_tree_height$MH();
        try {
            return (int)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tree_nnodes$MH() {
        return RuntimeHelper.requireNonNull(constants$480.const$1,"g_tree_nnodes");
    }
    /**
     * {@snippet :
     * int g_tree_nnodes(struct _GTree* tree);
     * }
     */
    public static int g_tree_nnodes(MemorySegment tree) {
        var mh$ = g_tree_nnodes$MH();
        try {
            return (int)mh$.invokeExact(tree);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_ref$MH() {
        return RuntimeHelper.requireNonNull(constants$480.const$2,"g_uri_ref");
    }
    /**
     * {@snippet :
     * struct _GUri* g_uri_ref(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_ref(MemorySegment uri) {
        var mh$ = g_uri_ref$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_unref$MH() {
        return RuntimeHelper.requireNonNull(constants$480.const$3,"g_uri_unref");
    }
    /**
     * {@snippet :
     * void g_uri_unref(struct _GUri* uri);
     * }
     */
    public static void g_uri_unref(MemorySegment uri) {
        var mh$ = g_uri_unref$MH();
        try {
            mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GUriFlags.G_URI_FLAGS_NONE = 0;
     * }
     */
    public static int G_URI_FLAGS_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GUriFlags.G_URI_FLAGS_PARSE_RELAXED = 1;
     * }
     */
    public static int G_URI_FLAGS_PARSE_RELAXED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GUriFlags.G_URI_FLAGS_HAS_PASSWORD = 2;
     * }
     */
    public static int G_URI_FLAGS_HAS_PASSWORD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GUriFlags.G_URI_FLAGS_HAS_AUTH_PARAMS = 4;
     * }
     */
    public static int G_URI_FLAGS_HAS_AUTH_PARAMS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GUriFlags.G_URI_FLAGS_ENCODED = 8;
     * }
     */
    public static int G_URI_FLAGS_ENCODED() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GUriFlags.G_URI_FLAGS_NON_DNS = 16;
     * }
     */
    public static int G_URI_FLAGS_NON_DNS() {
        return (int)16L;
    }
    /**
     * {@snippet :
     * enum GUriFlags.G_URI_FLAGS_ENCODED_QUERY = 32;
     * }
     */
    public static int G_URI_FLAGS_ENCODED_QUERY() {
        return (int)32L;
    }
    /**
     * {@snippet :
     * enum GUriFlags.G_URI_FLAGS_ENCODED_PATH = 64;
     * }
     */
    public static int G_URI_FLAGS_ENCODED_PATH() {
        return (int)64L;
    }
    /**
     * {@snippet :
     * enum GUriFlags.G_URI_FLAGS_ENCODED_FRAGMENT = 128;
     * }
     */
    public static int G_URI_FLAGS_ENCODED_FRAGMENT() {
        return (int)128L;
    }
    /**
     * {@snippet :
     * enum GUriFlags.G_URI_FLAGS_SCHEME_NORMALIZE = 256;
     * }
     */
    public static int G_URI_FLAGS_SCHEME_NORMALIZE() {
        return (int)256L;
    }
    public static MethodHandle g_uri_split$MH() {
        return RuntimeHelper.requireNonNull(constants$480.const$5,"g_uri_split");
    }
    /**
     * {@snippet :
     * int g_uri_split(char* uri_ref, enum GUriFlags flags, char** scheme, char** userinfo, char** host, int* port, char** path, char** query, char** fragment, struct _GError** error);
     * }
     */
    public static int g_uri_split(MemorySegment uri_ref, int flags, MemorySegment scheme, MemorySegment userinfo, MemorySegment host, MemorySegment port, MemorySegment path, MemorySegment query, MemorySegment fragment, MemorySegment error) {
        var mh$ = g_uri_split$MH();
        try {
            return (int)mh$.invokeExact(uri_ref, flags, scheme, userinfo, host, port, path, query, fragment, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_split_with_user$MH() {
        return RuntimeHelper.requireNonNull(constants$481.const$1,"g_uri_split_with_user");
    }
    /**
     * {@snippet :
     * int g_uri_split_with_user(char* uri_ref, enum GUriFlags flags, char** scheme, char** user, char** password, char** auth_params, char** host, int* port, char** path, char** query, char** fragment, struct _GError** error);
     * }
     */
    public static int g_uri_split_with_user(MemorySegment uri_ref, int flags, MemorySegment scheme, MemorySegment user, MemorySegment password, MemorySegment auth_params, MemorySegment host, MemorySegment port, MemorySegment path, MemorySegment query, MemorySegment fragment, MemorySegment error) {
        var mh$ = g_uri_split_with_user$MH();
        try {
            return (int)mh$.invokeExact(uri_ref, flags, scheme, user, password, auth_params, host, port, path, query, fragment, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_split_network$MH() {
        return RuntimeHelper.requireNonNull(constants$481.const$2,"g_uri_split_network");
    }
    /**
     * {@snippet :
     * int g_uri_split_network(char* uri_string, enum GUriFlags flags, char** scheme, char** host, int* port, struct _GError** error);
     * }
     */
    public static int g_uri_split_network(MemorySegment uri_string, int flags, MemorySegment scheme, MemorySegment host, MemorySegment port, MemorySegment error) {
        var mh$ = g_uri_split_network$MH();
        try {
            return (int)mh$.invokeExact(uri_string, flags, scheme, host, port, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_is_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$481.const$3,"g_uri_is_valid");
    }
    /**
     * {@snippet :
     * int g_uri_is_valid(char* uri_string, enum GUriFlags flags, struct _GError** error);
     * }
     */
    public static int g_uri_is_valid(MemorySegment uri_string, int flags, MemorySegment error) {
        var mh$ = g_uri_is_valid$MH();
        try {
            return (int)mh$.invokeExact(uri_string, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_join$MH() {
        return RuntimeHelper.requireNonNull(constants$481.const$5,"g_uri_join");
    }
    /**
     * {@snippet :
     * char* g_uri_join(enum GUriFlags flags, char* scheme, char* userinfo, char* host, int port, char* path, char* query, char* fragment);
     * }
     */
    public static MemorySegment g_uri_join(int flags, MemorySegment scheme, MemorySegment userinfo, MemorySegment host, int port, MemorySegment path, MemorySegment query, MemorySegment fragment) {
        var mh$ = g_uri_join$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(flags, scheme, userinfo, host, port, path, query, fragment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_join_with_user$MH() {
        return RuntimeHelper.requireNonNull(constants$482.const$1,"g_uri_join_with_user");
    }
    /**
     * {@snippet :
     * char* g_uri_join_with_user(enum GUriFlags flags, char* scheme, char* user, char* password, char* auth_params, char* host, int port, char* path, char* query, char* fragment);
     * }
     */
    public static MemorySegment g_uri_join_with_user(int flags, MemorySegment scheme, MemorySegment user, MemorySegment password, MemorySegment auth_params, MemorySegment host, int port, MemorySegment path, MemorySegment query, MemorySegment fragment) {
        var mh$ = g_uri_join_with_user$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(flags, scheme, user, password, auth_params, host, port, path, query, fragment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_parse$MH() {
        return RuntimeHelper.requireNonNull(constants$482.const$2,"g_uri_parse");
    }
    /**
     * {@snippet :
     * struct _GUri* g_uri_parse(char* uri_string, enum GUriFlags flags, struct _GError** error);
     * }
     */
    public static MemorySegment g_uri_parse(MemorySegment uri_string, int flags, MemorySegment error) {
        var mh$ = g_uri_parse$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri_string, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_parse_relative$MH() {
        return RuntimeHelper.requireNonNull(constants$482.const$4,"g_uri_parse_relative");
    }
    /**
     * {@snippet :
     * struct _GUri* g_uri_parse_relative(struct _GUri* base_uri, char* uri_ref, enum GUriFlags flags, struct _GError** error);
     * }
     */
    public static MemorySegment g_uri_parse_relative(MemorySegment base_uri, MemorySegment uri_ref, int flags, MemorySegment error) {
        var mh$ = g_uri_parse_relative$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(base_uri, uri_ref, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_resolve_relative$MH() {
        return RuntimeHelper.requireNonNull(constants$482.const$5,"g_uri_resolve_relative");
    }
    /**
     * {@snippet :
     * char* g_uri_resolve_relative(char* base_uri_string, char* uri_ref, enum GUriFlags flags, struct _GError** error);
     * }
     */
    public static MemorySegment g_uri_resolve_relative(MemorySegment base_uri_string, MemorySegment uri_ref, int flags, MemorySegment error) {
        var mh$ = g_uri_resolve_relative$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(base_uri_string, uri_ref, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_build$MH() {
        return RuntimeHelper.requireNonNull(constants$483.const$0,"g_uri_build");
    }
    /**
     * {@snippet :
     * struct _GUri* g_uri_build(enum GUriFlags flags, char* scheme, char* userinfo, char* host, int port, char* path, char* query, char* fragment);
     * }
     */
    public static MemorySegment g_uri_build(int flags, MemorySegment scheme, MemorySegment userinfo, MemorySegment host, int port, MemorySegment path, MemorySegment query, MemorySegment fragment) {
        var mh$ = g_uri_build$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(flags, scheme, userinfo, host, port, path, query, fragment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_build_with_user$MH() {
        return RuntimeHelper.requireNonNull(constants$483.const$1,"g_uri_build_with_user");
    }
    /**
     * {@snippet :
     * struct _GUri* g_uri_build_with_user(enum GUriFlags flags, char* scheme, char* user, char* password, char* auth_params, char* host, int port, char* path, char* query, char* fragment);
     * }
     */
    public static MemorySegment g_uri_build_with_user(int flags, MemorySegment scheme, MemorySegment user, MemorySegment password, MemorySegment auth_params, MemorySegment host, int port, MemorySegment path, MemorySegment query, MemorySegment fragment) {
        var mh$ = g_uri_build_with_user$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(flags, scheme, user, password, auth_params, host, port, path, query, fragment);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GUriHideFlags.G_URI_HIDE_NONE = 0;
     * }
     */
    public static int G_URI_HIDE_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GUriHideFlags.G_URI_HIDE_USERINFO = 1;
     * }
     */
    public static int G_URI_HIDE_USERINFO() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GUriHideFlags.G_URI_HIDE_PASSWORD = 2;
     * }
     */
    public static int G_URI_HIDE_PASSWORD() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GUriHideFlags.G_URI_HIDE_AUTH_PARAMS = 4;
     * }
     */
    public static int G_URI_HIDE_AUTH_PARAMS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GUriHideFlags.G_URI_HIDE_QUERY = 8;
     * }
     */
    public static int G_URI_HIDE_QUERY() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GUriHideFlags.G_URI_HIDE_FRAGMENT = 16;
     * }
     */
    public static int G_URI_HIDE_FRAGMENT() {
        return (int)16L;
    }
    public static MethodHandle g_uri_to_string$MH() {
        return RuntimeHelper.requireNonNull(constants$483.const$2,"g_uri_to_string");
    }
    /**
     * {@snippet :
     * char* g_uri_to_string(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_to_string(MemorySegment uri) {
        var mh$ = g_uri_to_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_to_string_partial$MH() {
        return RuntimeHelper.requireNonNull(constants$483.const$3,"g_uri_to_string_partial");
    }
    /**
     * {@snippet :
     * char* g_uri_to_string_partial(struct _GUri* uri, enum GUriHideFlags flags);
     * }
     */
    public static MemorySegment g_uri_to_string_partial(MemorySegment uri, int flags) {
        var mh$ = g_uri_to_string_partial$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_scheme$MH() {
        return RuntimeHelper.requireNonNull(constants$483.const$4,"g_uri_get_scheme");
    }
    /**
     * {@snippet :
     * char* g_uri_get_scheme(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_get_scheme(MemorySegment uri) {
        var mh$ = g_uri_get_scheme$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_userinfo$MH() {
        return RuntimeHelper.requireNonNull(constants$483.const$5,"g_uri_get_userinfo");
    }
    /**
     * {@snippet :
     * char* g_uri_get_userinfo(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_get_userinfo(MemorySegment uri) {
        var mh$ = g_uri_get_userinfo$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_user$MH() {
        return RuntimeHelper.requireNonNull(constants$484.const$0,"g_uri_get_user");
    }
    /**
     * {@snippet :
     * char* g_uri_get_user(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_get_user(MemorySegment uri) {
        var mh$ = g_uri_get_user$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_password$MH() {
        return RuntimeHelper.requireNonNull(constants$484.const$1,"g_uri_get_password");
    }
    /**
     * {@snippet :
     * char* g_uri_get_password(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_get_password(MemorySegment uri) {
        var mh$ = g_uri_get_password$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_auth_params$MH() {
        return RuntimeHelper.requireNonNull(constants$484.const$2,"g_uri_get_auth_params");
    }
    /**
     * {@snippet :
     * char* g_uri_get_auth_params(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_get_auth_params(MemorySegment uri) {
        var mh$ = g_uri_get_auth_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_host$MH() {
        return RuntimeHelper.requireNonNull(constants$484.const$3,"g_uri_get_host");
    }
    /**
     * {@snippet :
     * char* g_uri_get_host(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_get_host(MemorySegment uri) {
        var mh$ = g_uri_get_host$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_port$MH() {
        return RuntimeHelper.requireNonNull(constants$484.const$4,"g_uri_get_port");
    }
    /**
     * {@snippet :
     * int g_uri_get_port(struct _GUri* uri);
     * }
     */
    public static int g_uri_get_port(MemorySegment uri) {
        var mh$ = g_uri_get_port$MH();
        try {
            return (int)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_path$MH() {
        return RuntimeHelper.requireNonNull(constants$484.const$5,"g_uri_get_path");
    }
    /**
     * {@snippet :
     * char* g_uri_get_path(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_get_path(MemorySegment uri) {
        var mh$ = g_uri_get_path$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_query$MH() {
        return RuntimeHelper.requireNonNull(constants$485.const$0,"g_uri_get_query");
    }
    /**
     * {@snippet :
     * char* g_uri_get_query(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_get_query(MemorySegment uri) {
        var mh$ = g_uri_get_query$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_fragment$MH() {
        return RuntimeHelper.requireNonNull(constants$485.const$1,"g_uri_get_fragment");
    }
    /**
     * {@snippet :
     * char* g_uri_get_fragment(struct _GUri* uri);
     * }
     */
    public static MemorySegment g_uri_get_fragment(MemorySegment uri) {
        var mh$ = g_uri_get_fragment$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_get_flags$MH() {
        return RuntimeHelper.requireNonNull(constants$485.const$2,"g_uri_get_flags");
    }
    /**
     * {@snippet :
     * enum GUriFlags g_uri_get_flags(struct _GUri* uri);
     * }
     */
    public static int g_uri_get_flags(MemorySegment uri) {
        var mh$ = g_uri_get_flags$MH();
        try {
            return (int)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GUriParamsFlags.G_URI_PARAMS_NONE = 0;
     * }
     */
    public static int G_URI_PARAMS_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GUriParamsFlags.G_URI_PARAMS_CASE_INSENSITIVE = 1;
     * }
     */
    public static int G_URI_PARAMS_CASE_INSENSITIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GUriParamsFlags.G_URI_PARAMS_WWW_FORM = 2;
     * }
     */
    public static int G_URI_PARAMS_WWW_FORM() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GUriParamsFlags.G_URI_PARAMS_PARSE_RELAXED = 4;
     * }
     */
    public static int G_URI_PARAMS_PARSE_RELAXED() {
        return (int)4L;
    }
    public static MethodHandle g_uri_parse_params$MH() {
        return RuntimeHelper.requireNonNull(constants$485.const$4,"g_uri_parse_params");
    }
    /**
     * {@snippet :
     * struct _GHashTable* g_uri_parse_params(char* params, long length, char* separators, enum GUriParamsFlags flags, struct _GError** error);
     * }
     */
    public static MemorySegment g_uri_parse_params(MemorySegment params, long length, MemorySegment separators, int flags, MemorySegment error) {
        var mh$ = g_uri_parse_params$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(params, length, separators, flags, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_params_iter_init$MH() {
        return RuntimeHelper.requireNonNull(constants$486.const$4,"g_uri_params_iter_init");
    }
    /**
     * {@snippet :
     * void g_uri_params_iter_init(struct _GUriParamsIter* iter, char* params, long length, char* separators, enum GUriParamsFlags flags);
     * }
     */
    public static void g_uri_params_iter_init(MemorySegment iter, MemorySegment params, long length, MemorySegment separators, int flags) {
        var mh$ = g_uri_params_iter_init$MH();
        try {
            mh$.invokeExact(iter, params, length, separators, flags);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_params_iter_next$MH() {
        return RuntimeHelper.requireNonNull(constants$486.const$5,"g_uri_params_iter_next");
    }
    /**
     * {@snippet :
     * int g_uri_params_iter_next(struct _GUriParamsIter* iter, char** attribute, char** value, struct _GError** error);
     * }
     */
    public static int g_uri_params_iter_next(MemorySegment iter, MemorySegment attribute, MemorySegment value, MemorySegment error) {
        var mh$ = g_uri_params_iter_next$MH();
        try {
            return (int)mh$.invokeExact(iter, attribute, value, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_error_quark$MH() {
        return RuntimeHelper.requireNonNull(constants$487.const$0,"g_uri_error_quark");
    }
    /**
     * {@snippet :
     * unsigned int g_uri_error_quark();
     * }
     */
    public static int g_uri_error_quark() {
        var mh$ = g_uri_error_quark$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GUriError.G_URI_ERROR_FAILED = 0;
     * }
     */
    public static int G_URI_ERROR_FAILED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GUriError.G_URI_ERROR_BAD_SCHEME = 1;
     * }
     */
    public static int G_URI_ERROR_BAD_SCHEME() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GUriError.G_URI_ERROR_BAD_USER = 2;
     * }
     */
    public static int G_URI_ERROR_BAD_USER() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GUriError.G_URI_ERROR_BAD_PASSWORD = 3;
     * }
     */
    public static int G_URI_ERROR_BAD_PASSWORD() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum GUriError.G_URI_ERROR_BAD_AUTH_PARAMS = 4;
     * }
     */
    public static int G_URI_ERROR_BAD_AUTH_PARAMS() {
        return (int)4L;
    }
    /**
     * {@snippet :
     * enum GUriError.G_URI_ERROR_BAD_HOST = 5;
     * }
     */
    public static int G_URI_ERROR_BAD_HOST() {
        return (int)5L;
    }
    /**
     * {@snippet :
     * enum GUriError.G_URI_ERROR_BAD_PORT = 6;
     * }
     */
    public static int G_URI_ERROR_BAD_PORT() {
        return (int)6L;
    }
    /**
     * {@snippet :
     * enum GUriError.G_URI_ERROR_BAD_PATH = 7;
     * }
     */
    public static int G_URI_ERROR_BAD_PATH() {
        return (int)7L;
    }
    /**
     * {@snippet :
     * enum GUriError.G_URI_ERROR_BAD_QUERY = 8;
     * }
     */
    public static int G_URI_ERROR_BAD_QUERY() {
        return (int)8L;
    }
    /**
     * {@snippet :
     * enum GUriError.G_URI_ERROR_BAD_FRAGMENT = 9;
     * }
     */
    public static int G_URI_ERROR_BAD_FRAGMENT() {
        return (int)9L;
    }
    public static MethodHandle g_uri_unescape_string$MH() {
        return RuntimeHelper.requireNonNull(constants$487.const$1,"g_uri_unescape_string");
    }
    /**
     * {@snippet :
     * char* g_uri_unescape_string(char* escaped_string, char* illegal_characters);
     * }
     */
    public static MemorySegment g_uri_unescape_string(MemorySegment escaped_string, MemorySegment illegal_characters) {
        var mh$ = g_uri_unescape_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(escaped_string, illegal_characters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_unescape_segment$MH() {
        return RuntimeHelper.requireNonNull(constants$487.const$2,"g_uri_unescape_segment");
    }
    /**
     * {@snippet :
     * char* g_uri_unescape_segment(char* escaped_string, char* escaped_string_end, char* illegal_characters);
     * }
     */
    public static MemorySegment g_uri_unescape_segment(MemorySegment escaped_string, MemorySegment escaped_string_end, MemorySegment illegal_characters) {
        var mh$ = g_uri_unescape_segment$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(escaped_string, escaped_string_end, illegal_characters);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_parse_scheme$MH() {
        return RuntimeHelper.requireNonNull(constants$487.const$3,"g_uri_parse_scheme");
    }
    /**
     * {@snippet :
     * char* g_uri_parse_scheme(char* uri);
     * }
     */
    public static MemorySegment g_uri_parse_scheme(MemorySegment uri) {
        var mh$ = g_uri_parse_scheme$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_peek_scheme$MH() {
        return RuntimeHelper.requireNonNull(constants$487.const$4,"g_uri_peek_scheme");
    }
    /**
     * {@snippet :
     * char* g_uri_peek_scheme(char* uri);
     * }
     */
    public static MemorySegment g_uri_peek_scheme(MemorySegment uri) {
        var mh$ = g_uri_peek_scheme$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(uri);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_escape_string$MH() {
        return RuntimeHelper.requireNonNull(constants$487.const$5,"g_uri_escape_string");
    }
    /**
     * {@snippet :
     * char* g_uri_escape_string(char* unescaped, char* reserved_chars_allowed, int allow_utf8);
     * }
     */
    public static MemorySegment g_uri_escape_string(MemorySegment unescaped, MemorySegment reserved_chars_allowed, int allow_utf8) {
        var mh$ = g_uri_escape_string$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(unescaped, reserved_chars_allowed, allow_utf8);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_unescape_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$488.const$0,"g_uri_unescape_bytes");
    }
    /**
     * {@snippet :
     * struct _GBytes* g_uri_unescape_bytes(char* escaped_string, long length, char* illegal_characters, struct _GError** error);
     * }
     */
    public static MemorySegment g_uri_unescape_bytes(MemorySegment escaped_string, long length, MemorySegment illegal_characters, MemorySegment error) {
        var mh$ = g_uri_unescape_bytes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(escaped_string, length, illegal_characters, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uri_escape_bytes$MH() {
        return RuntimeHelper.requireNonNull(constants$488.const$1,"g_uri_escape_bytes");
    }
    /**
     * {@snippet :
     * char* g_uri_escape_bytes(unsigned char* unescaped, unsigned long length, char* reserved_chars_allowed);
     * }
     */
    public static MemorySegment g_uri_escape_bytes(MemorySegment unescaped, long length, MemorySegment reserved_chars_allowed) {
        var mh$ = g_uri_escape_bytes$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(unescaped, length, reserved_chars_allowed);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uuid_string_is_valid$MH() {
        return RuntimeHelper.requireNonNull(constants$488.const$2,"g_uuid_string_is_valid");
    }
    /**
     * {@snippet :
     * int g_uuid_string_is_valid(char* str);
     * }
     */
    public static int g_uuid_string_is_valid(MemorySegment str) {
        var mh$ = g_uuid_string_is_valid$MH();
        try {
            return (int)mh$.invokeExact(str);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_uuid_string_random$MH() {
        return RuntimeHelper.requireNonNull(constants$488.const$3,"g_uuid_string_random");
    }
    /**
     * {@snippet :
     * char* g_uuid_string_random();
     * }
     */
    public static MemorySegment g_uuid_string_random() {
        var mh$ = g_uuid_string_random$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MemoryLayout glib_major_version$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle glib_major_version$VH() {
        return constants$7.const$0;
    }
    public static MemorySegment glib_major_version$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$488.const$4,"glib_major_version");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * unsigned int glib_major_version;
     * }
     */
    public static int glib_major_version$get() {
        return (int) constants$7.const$0.get(RuntimeHelper.requireNonNull(constants$488.const$4, "glib_major_version"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * unsigned int glib_major_version;
     * }
     */
    public static void glib_major_version$set(int x) {
        constants$7.const$0.set(RuntimeHelper.requireNonNull(constants$488.const$4, "glib_major_version"), x);
    }
    public static MemoryLayout glib_minor_version$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle glib_minor_version$VH() {
        return constants$7.const$0;
    }
    public static MemorySegment glib_minor_version$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$488.const$5,"glib_minor_version");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * unsigned int glib_minor_version;
     * }
     */
    public static int glib_minor_version$get() {
        return (int) constants$7.const$0.get(RuntimeHelper.requireNonNull(constants$488.const$5, "glib_minor_version"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * unsigned int glib_minor_version;
     * }
     */
    public static void glib_minor_version$set(int x) {
        constants$7.const$0.set(RuntimeHelper.requireNonNull(constants$488.const$5, "glib_minor_version"), x);
    }
    public static MemoryLayout glib_micro_version$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle glib_micro_version$VH() {
        return constants$7.const$0;
    }
    public static MemorySegment glib_micro_version$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$489.const$0,"glib_micro_version");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * unsigned int glib_micro_version;
     * }
     */
    public static int glib_micro_version$get() {
        return (int) constants$7.const$0.get(RuntimeHelper.requireNonNull(constants$489.const$0, "glib_micro_version"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * unsigned int glib_micro_version;
     * }
     */
    public static void glib_micro_version$set(int x) {
        constants$7.const$0.set(RuntimeHelper.requireNonNull(constants$489.const$0, "glib_micro_version"), x);
    }
    public static MemoryLayout glib_interface_age$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle glib_interface_age$VH() {
        return constants$7.const$0;
    }
    public static MemorySegment glib_interface_age$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$489.const$1,"glib_interface_age");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * unsigned int glib_interface_age;
     * }
     */
    public static int glib_interface_age$get() {
        return (int) constants$7.const$0.get(RuntimeHelper.requireNonNull(constants$489.const$1, "glib_interface_age"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * unsigned int glib_interface_age;
     * }
     */
    public static void glib_interface_age$set(int x) {
        constants$7.const$0.set(RuntimeHelper.requireNonNull(constants$489.const$1, "glib_interface_age"), x);
    }
    public static MemoryLayout glib_binary_age$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle glib_binary_age$VH() {
        return constants$7.const$0;
    }
    public static MemorySegment glib_binary_age$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$489.const$2,"glib_binary_age");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * unsigned int glib_binary_age;
     * }
     */
    public static int glib_binary_age$get() {
        return (int) constants$7.const$0.get(RuntimeHelper.requireNonNull(constants$489.const$2, "glib_binary_age"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * unsigned int glib_binary_age;
     * }
     */
    public static void glib_binary_age$set(int x) {
        constants$7.const$0.set(RuntimeHelper.requireNonNull(constants$489.const$2, "glib_binary_age"), x);
    }
    public static MethodHandle glib_check_version$MH() {
        return RuntimeHelper.requireNonNull(constants$489.const$3,"glib_check_version");
    }
    /**
     * {@snippet :
     * char* glib_check_version(unsigned int required_major, unsigned int required_minor, unsigned int required_micro);
     * }
     */
    public static MemorySegment glib_check_version(int required_major, int required_minor, int required_micro) {
        var mh$ = glib_check_version$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(required_major, required_minor, required_micro);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_new$MH() {
        return RuntimeHelper.requireNonNull(constants$489.const$5,"g_mem_chunk_new");
    }
    /**
     * {@snippet :
     * struct _GMemChunk* g_mem_chunk_new(char* name, int atom_size, unsigned long area_size, int type);
     * }
     */
    public static MemorySegment g_mem_chunk_new(MemorySegment name, int atom_size, long area_size, int type) {
        var mh$ = g_mem_chunk_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, atom_size, area_size, type);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$490.const$0,"g_mem_chunk_destroy");
    }
    /**
     * {@snippet :
     * void g_mem_chunk_destroy(struct _GMemChunk* mem_chunk);
     * }
     */
    public static void g_mem_chunk_destroy(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_destroy$MH();
        try {
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_alloc$MH() {
        return RuntimeHelper.requireNonNull(constants$490.const$1,"g_mem_chunk_alloc");
    }
    /**
     * {@snippet :
     * void* g_mem_chunk_alloc(struct _GMemChunk* mem_chunk);
     * }
     */
    public static MemorySegment g_mem_chunk_alloc(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_alloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_alloc0$MH() {
        return RuntimeHelper.requireNonNull(constants$490.const$2,"g_mem_chunk_alloc0");
    }
    /**
     * {@snippet :
     * void* g_mem_chunk_alloc0(struct _GMemChunk* mem_chunk);
     * }
     */
    public static MemorySegment g_mem_chunk_alloc0(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_alloc0$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_free$MH() {
        return RuntimeHelper.requireNonNull(constants$490.const$3,"g_mem_chunk_free");
    }
    /**
     * {@snippet :
     * void g_mem_chunk_free(struct _GMemChunk* mem_chunk, void* mem);
     * }
     */
    public static void g_mem_chunk_free(MemorySegment mem_chunk, MemorySegment mem) {
        var mh$ = g_mem_chunk_free$MH();
        try {
            mh$.invokeExact(mem_chunk, mem);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_clean$MH() {
        return RuntimeHelper.requireNonNull(constants$490.const$4,"g_mem_chunk_clean");
    }
    /**
     * {@snippet :
     * void g_mem_chunk_clean(struct _GMemChunk* mem_chunk);
     * }
     */
    public static void g_mem_chunk_clean(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_clean$MH();
        try {
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_reset$MH() {
        return RuntimeHelper.requireNonNull(constants$490.const$5,"g_mem_chunk_reset");
    }
    /**
     * {@snippet :
     * void g_mem_chunk_reset(struct _GMemChunk* mem_chunk);
     * }
     */
    public static void g_mem_chunk_reset(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_reset$MH();
        try {
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_print$MH() {
        return RuntimeHelper.requireNonNull(constants$491.const$0,"g_mem_chunk_print");
    }
    /**
     * {@snippet :
     * void g_mem_chunk_print(struct _GMemChunk* mem_chunk);
     * }
     */
    public static void g_mem_chunk_print(MemorySegment mem_chunk) {
        var mh$ = g_mem_chunk_print$MH();
        try {
            mh$.invokeExact(mem_chunk);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_mem_chunk_info$MH() {
        return RuntimeHelper.requireNonNull(constants$491.const$1,"g_mem_chunk_info");
    }
    /**
     * {@snippet :
     * void g_mem_chunk_info();
     * }
     */
    public static void g_mem_chunk_info() {
        var mh$ = g_mem_chunk_info$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_blow_chunks$MH() {
        return RuntimeHelper.requireNonNull(constants$491.const$2,"g_blow_chunks");
    }
    /**
     * {@snippet :
     * void g_blow_chunks();
     * }
     */
    public static void g_blow_chunks() {
        var mh$ = g_blow_chunks$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_allocator_new$MH() {
        return RuntimeHelper.requireNonNull(constants$491.const$3,"g_allocator_new");
    }
    /**
     * {@snippet :
     * struct _GAllocator* g_allocator_new(char* name, unsigned int n_preallocs);
     * }
     */
    public static MemorySegment g_allocator_new(MemorySegment name, int n_preallocs) {
        var mh$ = g_allocator_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(name, n_preallocs);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_allocator_free$MH() {
        return RuntimeHelper.requireNonNull(constants$491.const$4,"g_allocator_free");
    }
    /**
     * {@snippet :
     * void g_allocator_free(struct _GAllocator* allocator);
     * }
     */
    public static void g_allocator_free(MemorySegment allocator) {
        var mh$ = g_allocator_free$MH();
        try {
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_push_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$491.const$5,"g_list_push_allocator");
    }
    /**
     * {@snippet :
     * void g_list_push_allocator(struct _GAllocator* allocator);
     * }
     */
    public static void g_list_push_allocator(MemorySegment allocator) {
        var mh$ = g_list_push_allocator$MH();
        try {
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_list_pop_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$492.const$0,"g_list_pop_allocator");
    }
    /**
     * {@snippet :
     * void g_list_pop_allocator();
     * }
     */
    public static void g_list_pop_allocator() {
        var mh$ = g_list_pop_allocator$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_push_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$492.const$1,"g_slist_push_allocator");
    }
    /**
     * {@snippet :
     * void g_slist_push_allocator(struct _GAllocator* allocator);
     * }
     */
    public static void g_slist_push_allocator(MemorySegment allocator) {
        var mh$ = g_slist_push_allocator$MH();
        try {
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_slist_pop_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$492.const$2,"g_slist_pop_allocator");
    }
    /**
     * {@snippet :
     * void g_slist_pop_allocator();
     * }
     */
    public static void g_slist_pop_allocator() {
        var mh$ = g_slist_pop_allocator$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_push_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$492.const$3,"g_node_push_allocator");
    }
    /**
     * {@snippet :
     * void g_node_push_allocator(struct _GAllocator* allocator);
     * }
     */
    public static void g_node_push_allocator(MemorySegment allocator) {
        var mh$ = g_node_push_allocator$MH();
        try {
            mh$.invokeExact(allocator);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_node_pop_allocator$MH() {
        return RuntimeHelper.requireNonNull(constants$492.const$4,"g_node_pop_allocator");
    }
    /**
     * {@snippet :
     * void g_node_pop_allocator();
     * }
     */
    public static void g_node_pop_allocator() {
        var mh$ = g_node_pop_allocator$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_new$MH() {
        return RuntimeHelper.requireNonNull(constants$494.const$4,"g_cache_new");
    }
    /**
     * {@snippet :
     * struct _GCache* g_cache_new(void* (*value_new_func)(void*), void (*value_destroy_func)(void*), void* (*key_dup_func)(void*), void (*key_destroy_func)(void*), unsigned int (*hash_key_func)(void*), unsigned int (*hash_value_func)(void*), int (*key_equal_func)(void*,void*));
     * }
     */
    public static MemorySegment g_cache_new(MemorySegment value_new_func, MemorySegment value_destroy_func, MemorySegment key_dup_func, MemorySegment key_destroy_func, MemorySegment hash_key_func, MemorySegment hash_value_func, MemorySegment key_equal_func) {
        var mh$ = g_cache_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(value_new_func, value_destroy_func, key_dup_func, key_destroy_func, hash_key_func, hash_value_func, key_equal_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$494.const$5,"g_cache_destroy");
    }
    /**
     * {@snippet :
     * void g_cache_destroy(struct _GCache* cache);
     * }
     */
    public static void g_cache_destroy(MemorySegment cache) {
        var mh$ = g_cache_destroy$MH();
        try {
            mh$.invokeExact(cache);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$495.const$0,"g_cache_insert");
    }
    /**
     * {@snippet :
     * void* g_cache_insert(struct _GCache* cache, void* key);
     * }
     */
    public static MemorySegment g_cache_insert(MemorySegment cache, MemorySegment key) {
        var mh$ = g_cache_insert$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cache, key);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_remove$MH() {
        return RuntimeHelper.requireNonNull(constants$495.const$1,"g_cache_remove");
    }
    /**
     * {@snippet :
     * void g_cache_remove(struct _GCache* cache, void* value);
     * }
     */
    public static void g_cache_remove(MemorySegment cache, MemorySegment value) {
        var mh$ = g_cache_remove$MH();
        try {
            mh$.invokeExact(cache, value);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_key_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$495.const$3,"g_cache_key_foreach");
    }
    /**
     * {@snippet :
     * void g_cache_key_foreach(struct _GCache* cache, void (*func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_cache_key_foreach(MemorySegment cache, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_cache_key_foreach$MH();
        try {
            mh$.invokeExact(cache, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_cache_value_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$495.const$5,"g_cache_value_foreach");
    }
    /**
     * {@snippet :
     * void g_cache_value_foreach(struct _GCache* cache, void (*func)(void*,void*,void*), void* user_data);
     * }
     */
    public static void g_cache_value_foreach(MemorySegment cache, MemorySegment func, MemorySegment user_data) {
        var mh$ = g_cache_value_foreach$MH();
        try {
            mh$.invokeExact(cache, func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_new$MH() {
        return RuntimeHelper.requireNonNull(constants$498.const$0,"g_completion_new");
    }
    /**
     * {@snippet :
     * struct _GCompletion* g_completion_new(char* (*func)(void*));
     * }
     */
    public static MemorySegment g_completion_new(MemorySegment func) {
        var mh$ = g_completion_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_add_items$MH() {
        return RuntimeHelper.requireNonNull(constants$498.const$1,"g_completion_add_items");
    }
    /**
     * {@snippet :
     * void g_completion_add_items(struct _GCompletion* cmp, struct _GList* items);
     * }
     */
    public static void g_completion_add_items(MemorySegment cmp, MemorySegment items) {
        var mh$ = g_completion_add_items$MH();
        try {
            mh$.invokeExact(cmp, items);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_remove_items$MH() {
        return RuntimeHelper.requireNonNull(constants$498.const$2,"g_completion_remove_items");
    }
    /**
     * {@snippet :
     * void g_completion_remove_items(struct _GCompletion* cmp, struct _GList* items);
     * }
     */
    public static void g_completion_remove_items(MemorySegment cmp, MemorySegment items) {
        var mh$ = g_completion_remove_items$MH();
        try {
            mh$.invokeExact(cmp, items);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_clear_items$MH() {
        return RuntimeHelper.requireNonNull(constants$498.const$3,"g_completion_clear_items");
    }
    /**
     * {@snippet :
     * void g_completion_clear_items(struct _GCompletion* cmp);
     * }
     */
    public static void g_completion_clear_items(MemorySegment cmp) {
        var mh$ = g_completion_clear_items$MH();
        try {
            mh$.invokeExact(cmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_complete$MH() {
        return RuntimeHelper.requireNonNull(constants$498.const$4,"g_completion_complete");
    }
    /**
     * {@snippet :
     * struct _GList* g_completion_complete(struct _GCompletion* cmp, char* prefix, char** new_prefix);
     * }
     */
    public static MemorySegment g_completion_complete(MemorySegment cmp, MemorySegment prefix, MemorySegment new_prefix) {
        var mh$ = g_completion_complete$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cmp, prefix, new_prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_complete_utf8$MH() {
        return RuntimeHelper.requireNonNull(constants$498.const$5,"g_completion_complete_utf8");
    }
    /**
     * {@snippet :
     * struct _GList* g_completion_complete_utf8(struct _GCompletion* cmp, char* prefix, char** new_prefix);
     * }
     */
    public static MemorySegment g_completion_complete_utf8(MemorySegment cmp, MemorySegment prefix, MemorySegment new_prefix) {
        var mh$ = g_completion_complete_utf8$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(cmp, prefix, new_prefix);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_set_compare$MH() {
        return RuntimeHelper.requireNonNull(constants$499.const$1,"g_completion_set_compare");
    }
    /**
     * {@snippet :
     * void g_completion_set_compare(struct _GCompletion* cmp, int (*strncmp_func)(char*,char*,unsigned long));
     * }
     */
    public static void g_completion_set_compare(MemorySegment cmp, MemorySegment strncmp_func) {
        var mh$ = g_completion_set_compare$MH();
        try {
            mh$.invokeExact(cmp, strncmp_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_completion_free$MH() {
        return RuntimeHelper.requireNonNull(constants$499.const$2,"g_completion_free");
    }
    /**
     * {@snippet :
     * void g_completion_free(struct _GCompletion* cmp);
     * }
     */
    public static void g_completion_free(MemorySegment cmp) {
        var mh$ = g_completion_free$MH();
        try {
            mh$.invokeExact(cmp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_new$MH() {
        return RuntimeHelper.requireNonNull(constants$499.const$5,"g_relation_new");
    }
    /**
     * {@snippet :
     * struct _GRelation* g_relation_new(int fields);
     * }
     */
    public static MemorySegment g_relation_new(int fields) {
        var mh$ = g_relation_new$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(fields);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$500.const$0,"g_relation_destroy");
    }
    /**
     * {@snippet :
     * void g_relation_destroy(struct _GRelation* relation);
     * }
     */
    public static void g_relation_destroy(MemorySegment relation) {
        var mh$ = g_relation_destroy$MH();
        try {
            mh$.invokeExact(relation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_index$MH() {
        return RuntimeHelper.requireNonNull(constants$500.const$3,"g_relation_index");
    }
    /**
     * {@snippet :
     * void g_relation_index(struct _GRelation* relation, int field, unsigned int (*hash_func)(void*), int (*key_equal_func)(void*,void*));
     * }
     */
    public static void g_relation_index(MemorySegment relation, int field, MemorySegment hash_func, MemorySegment key_equal_func) {
        var mh$ = g_relation_index$MH();
        try {
            mh$.invokeExact(relation, field, hash_func, key_equal_func);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_insert$MH() {
        return RuntimeHelper.requireNonNull(constants$500.const$4,"g_relation_insert");
    }
    /**
     * {@snippet :
     * void g_relation_insert(struct _GRelation* relation,...);
     * }
     */
    public static void g_relation_insert(MemorySegment relation, Object... x1) {
        var mh$ = g_relation_insert$MH();
        try {
            mh$.invokeExact(relation, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_delete$MH() {
        return RuntimeHelper.requireNonNull(constants$500.const$5,"g_relation_delete");
    }
    /**
     * {@snippet :
     * int g_relation_delete(struct _GRelation* relation, void* key, int field);
     * }
     */
    public static int g_relation_delete(MemorySegment relation, MemorySegment key, int field) {
        var mh$ = g_relation_delete$MH();
        try {
            return (int)mh$.invokeExact(relation, key, field);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_select$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$0,"g_relation_select");
    }
    /**
     * {@snippet :
     * struct _GTuples* g_relation_select(struct _GRelation* relation, void* key, int field);
     * }
     */
    public static MemorySegment g_relation_select(MemorySegment relation, MemorySegment key, int field) {
        var mh$ = g_relation_select$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(relation, key, field);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_count$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$1,"g_relation_count");
    }
    /**
     * {@snippet :
     * int g_relation_count(struct _GRelation* relation, void* key, int field);
     * }
     */
    public static int g_relation_count(MemorySegment relation, MemorySegment key, int field) {
        var mh$ = g_relation_count$MH();
        try {
            return (int)mh$.invokeExact(relation, key, field);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_exists$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$2,"g_relation_exists");
    }
    /**
     * {@snippet :
     * int g_relation_exists(struct _GRelation* relation,...);
     * }
     */
    public static int g_relation_exists(MemorySegment relation, Object... x1) {
        var mh$ = g_relation_exists$MH();
        try {
            return (int)mh$.invokeExact(relation, x1);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_relation_print$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$3,"g_relation_print");
    }
    /**
     * {@snippet :
     * void g_relation_print(struct _GRelation* relation);
     * }
     */
    public static void g_relation_print(MemorySegment relation) {
        var mh$ = g_relation_print$MH();
        try {
            mh$.invokeExact(relation);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tuples_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$4,"g_tuples_destroy");
    }
    /**
     * {@snippet :
     * void g_tuples_destroy(struct _GTuples* tuples);
     * }
     */
    public static void g_tuples_destroy(MemorySegment tuples) {
        var mh$ = g_tuples_destroy$MH();
        try {
            mh$.invokeExact(tuples);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_tuples_index$MH() {
        return RuntimeHelper.requireNonNull(constants$501.const$5,"g_tuples_index");
    }
    /**
     * {@snippet :
     * void* g_tuples_index(struct _GTuples* tuples, int index_, int field);
     * }
     */
    public static MemorySegment g_tuples_index(MemorySegment tuples, int index_, int field) {
        var mh$ = g_tuples_index$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(tuples, index_, field);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum GThreadPriority.G_THREAD_PRIORITY_LOW = 0;
     * }
     */
    public static int G_THREAD_PRIORITY_LOW() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum GThreadPriority.G_THREAD_PRIORITY_NORMAL = 1;
     * }
     */
    public static int G_THREAD_PRIORITY_NORMAL() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum GThreadPriority.G_THREAD_PRIORITY_HIGH = 2;
     * }
     */
    public static int G_THREAD_PRIORITY_HIGH() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum GThreadPriority.G_THREAD_PRIORITY_URGENT = 3;
     * }
     */
    public static int G_THREAD_PRIORITY_URGENT() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * struct _GThreadFunctions g_thread_functions_for_glib_use;
     * }
     */
    public static MemorySegment g_thread_functions_for_glib_use$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$510.const$5,"g_thread_functions_for_glib_use");
    }
    public static MemoryLayout g_thread_use_default_impl$LAYOUT() {
        return JAVA_INT;
    }
    public static VarHandle g_thread_use_default_impl$VH() {
        return constants$7.const$0;
    }
    public static MemorySegment g_thread_use_default_impl$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$511.const$0,"g_thread_use_default_impl");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * int g_thread_use_default_impl;
     * }
     */
    public static int g_thread_use_default_impl$get() {
        return (int) constants$7.const$0.get(RuntimeHelper.requireNonNull(constants$511.const$0, "g_thread_use_default_impl"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * int g_thread_use_default_impl;
     * }
     */
    public static void g_thread_use_default_impl$set(int x) {
        constants$7.const$0.set(RuntimeHelper.requireNonNull(constants$511.const$0, "g_thread_use_default_impl"), x);
    }
    public static MemoryLayout g_thread_gettime$LAYOUT() {
        return RuntimeHelper.POINTER;
    }
    public static VarHandle g_thread_gettime$VH() {
        return constants$211.const$1;
    }
    public static MemorySegment g_thread_gettime$SEGMENT() {
        return RuntimeHelper.requireNonNull(constants$511.const$3,"g_thread_gettime");
    }
    /**
     * Getter for variable:
     * {@snippet :
     * unsigned long (*g_thread_gettime)();
     * }
     */
    public static MemorySegment g_thread_gettime$get() {
        return (java.lang.foreign.MemorySegment) constants$211.const$1.get(RuntimeHelper.requireNonNull(constants$511.const$3, "g_thread_gettime"));
    }
    /**
     * Setter for variable:
     * {@snippet :
     * unsigned long (*g_thread_gettime)();
     * }
     */
    public static void g_thread_gettime$set(MemorySegment x) {
        constants$211.const$1.set(RuntimeHelper.requireNonNull(constants$511.const$3, "g_thread_gettime"), x);
    }
    public static g_thread_gettime g_thread_gettime () {
        return g_thread_gettime.ofAddress(g_thread_gettime$get(), Arena.global());
    }
    public static MethodHandle g_thread_create$MH() {
        return RuntimeHelper.requireNonNull(constants$511.const$5,"g_thread_create");
    }
    /**
     * {@snippet :
     * struct _GThread* g_thread_create(void* (*func)(void*), void* data, int joinable, struct _GError** error);
     * }
     */
    public static MemorySegment g_thread_create(MemorySegment func, MemorySegment data, int joinable, MemorySegment error) {
        var mh$ = g_thread_create$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(func, data, joinable, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_create_full$MH() {
        return RuntimeHelper.requireNonNull(constants$512.const$1,"g_thread_create_full");
    }
    /**
     * {@snippet :
     * struct _GThread* g_thread_create_full(void* (*func)(void*), void* data, unsigned long stack_size, int joinable, int bound, enum GThreadPriority priority, struct _GError** error);
     * }
     */
    public static MemorySegment g_thread_create_full(MemorySegment func, MemorySegment data, long stack_size, int joinable, int bound, int priority, MemorySegment error) {
        var mh$ = g_thread_create_full$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(func, data, stack_size, joinable, bound, priority, error);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_set_priority$MH() {
        return RuntimeHelper.requireNonNull(constants$512.const$2,"g_thread_set_priority");
    }
    /**
     * {@snippet :
     * void g_thread_set_priority(struct _GThread* thread, enum GThreadPriority priority);
     * }
     */
    public static void g_thread_set_priority(MemorySegment thread, int priority) {
        var mh$ = g_thread_set_priority$MH();
        try {
            mh$.invokeExact(thread, priority);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle g_thread_foreach$MH() {
        return RuntimeHelper.requireNonNull(constants$512.const$4,"g_thread_foreach");
    }
    /**
     * {@snippet :
     * void g_thread_foreach(void (*thread_func)(void*,void*), void* user_data);
     * }
     */
    public static void g_thread_foreach(MemorySegment thread_func, MemorySegment user_data) {
        var mh$ = g_thread_foreach$MH();
        try {
            mh$.invokeExact(thread_func, user_data);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * typedef unsigned long __cpu_mask;
     * }
     */
    public static final OfLong __cpu_mask = JAVA_LONG;
    public static MethodHandle __sched_cpucount$MH() {
        return RuntimeHelper.requireNonNull(constants$513.const$2,"__sched_cpucount");
    }
    /**
     * {@snippet :
     * int __sched_cpucount(unsigned long __setsize, struct cpu_set_t* __setp);
     * }
     */
    public static int __sched_cpucount(long __setsize, MemorySegment __setp) {
        var mh$ = __sched_cpucount$MH();
        try {
            return (int)mh$.invokeExact(__setsize, __setp);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpualloc$MH() {
        return RuntimeHelper.requireNonNull(constants$513.const$3,"__sched_cpualloc");
    }
    /**
     * {@snippet :
     * struct cpu_set_t* __sched_cpualloc(unsigned long __count);
     * }
     */
    public static MemorySegment __sched_cpualloc(long __count) {
        var mh$ = __sched_cpualloc$MH();
        try {
            return (java.lang.foreign.MemorySegment)mh$.invokeExact(__count);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sched_cpufree$MH() {
        return RuntimeHelper.requireNonNull(constants$513.const$4,"__sched_cpufree");
    }
    /**
     * {@snippet :
     * void __sched_cpufree(struct cpu_set_t* __set);
     * }
     */
    public static void __sched_cpufree(MemorySegment __set) {
        var mh$ = __sched_cpufree$MH();
        try {
            mh$.invokeExact(__set);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setparam$MH() {
        return RuntimeHelper.requireNonNull(constants$513.const$5,"sched_setparam");
    }
    /**
     * {@snippet :
     * int sched_setparam(int __pid, struct sched_param* __param);
     * }
     */
    public static int sched_setparam(int __pid, MemorySegment __param) {
        var mh$ = sched_setparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getparam$MH() {
        return RuntimeHelper.requireNonNull(constants$514.const$0,"sched_getparam");
    }
    /**
     * {@snippet :
     * int sched_getparam(int __pid, struct sched_param* __param);
     * }
     */
    public static int sched_getparam(int __pid, MemorySegment __param) {
        var mh$ = sched_getparam$MH();
        try {
            return (int)mh$.invokeExact(__pid, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_setscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$514.const$1,"sched_setscheduler");
    }
    /**
     * {@snippet :
     * int sched_setscheduler(int __pid, int __policy, struct sched_param* __param);
     * }
     */
    public static int sched_setscheduler(int __pid, int __policy, MemorySegment __param) {
        var mh$ = sched_setscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_getscheduler$MH() {
        return RuntimeHelper.requireNonNull(constants$514.const$2,"sched_getscheduler");
    }
    /**
     * {@snippet :
     * int sched_getscheduler(int __pid);
     * }
     */
    public static int sched_getscheduler(int __pid) {
        var mh$ = sched_getscheduler$MH();
        try {
            return (int)mh$.invokeExact(__pid);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_yield$MH() {
        return RuntimeHelper.requireNonNull(constants$514.const$3,"sched_yield");
    }
    /**
     * {@snippet :
     * int sched_yield();
     * }
     */
    public static int sched_yield() {
        var mh$ = sched_yield$MH();
        try {
            return (int)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_max$MH() {
        return RuntimeHelper.requireNonNull(constants$514.const$4,"sched_get_priority_max");
    }
    /**
     * {@snippet :
     * int sched_get_priority_max(int __algorithm);
     * }
     */
    public static int sched_get_priority_max(int __algorithm) {
        var mh$ = sched_get_priority_max$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_get_priority_min$MH() {
        return RuntimeHelper.requireNonNull(constants$514.const$5,"sched_get_priority_min");
    }
    /**
     * {@snippet :
     * int sched_get_priority_min(int __algorithm);
     * }
     */
    public static int sched_get_priority_min(int __algorithm) {
        var mh$ = sched_get_priority_min$MH();
        try {
            return (int)mh$.invokeExact(__algorithm);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle sched_rr_get_interval$MH() {
        return RuntimeHelper.requireNonNull(constants$515.const$0,"sched_rr_get_interval");
    }
    /**
     * {@snippet :
     * int sched_rr_get_interval(int __pid, struct timespec* __t);
     * }
     */
    public static int sched_rr_get_interval(int __pid, MemorySegment __t) {
        var mh$ = sched_rr_get_interval$MH();
        try {
            return (int)mh$.invokeExact(__pid, __t);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:37:1).PTHREAD_CREATE_JOINABLE = 0;
     * }
     */
    public static int PTHREAD_CREATE_JOINABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:37:1).PTHREAD_CREATE_DETACHED = 1;
     * }
     */
    public static int PTHREAD_CREATE_DETACHED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:47:1).PTHREAD_MUTEX_TIMED_NP = 0;
     * }
     */
    public static int PTHREAD_MUTEX_TIMED_NP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:47:1).PTHREAD_MUTEX_RECURSIVE_NP = 1;
     * }
     */
    public static int PTHREAD_MUTEX_RECURSIVE_NP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:47:1).PTHREAD_MUTEX_ERRORCHECK_NP = 2;
     * }
     */
    public static int PTHREAD_MUTEX_ERRORCHECK_NP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:47:1).PTHREAD_MUTEX_ADAPTIVE_NP = 3;
     * }
     */
    public static int PTHREAD_MUTEX_ADAPTIVE_NP() {
        return (int)3L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:47:1).PTHREAD_MUTEX_NORMAL = 0;
     * }
     */
    public static int PTHREAD_MUTEX_NORMAL() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:47:1).PTHREAD_MUTEX_RECURSIVE = 1;
     * }
     */
    public static int PTHREAD_MUTEX_RECURSIVE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:47:1).PTHREAD_MUTEX_ERRORCHECK = 2;
     * }
     */
    public static int PTHREAD_MUTEX_ERRORCHECK() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:47:1).PTHREAD_MUTEX_DEFAULT = 0;
     * }
     */
    public static int PTHREAD_MUTEX_DEFAULT() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:69:1).PTHREAD_MUTEX_STALLED = 0;
     * }
     */
    public static int PTHREAD_MUTEX_STALLED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:69:1).PTHREAD_MUTEX_STALLED_NP = 0;
     * }
     */
    public static int PTHREAD_MUTEX_STALLED_NP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:69:1).PTHREAD_MUTEX_ROBUST = 1;
     * }
     */
    public static int PTHREAD_MUTEX_ROBUST() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:69:1).PTHREAD_MUTEX_ROBUST_NP = 1;
     * }
     */
    public static int PTHREAD_MUTEX_ROBUST_NP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:81:1).PTHREAD_PRIO_NONE = 0;
     * }
     */
    public static int PTHREAD_PRIO_NONE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:81:1).PTHREAD_PRIO_INHERIT = 1;
     * }
     */
    public static int PTHREAD_PRIO_INHERIT() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:81:1).PTHREAD_PRIO_PROTECT = 2;
     * }
     */
    public static int PTHREAD_PRIO_PROTECT() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:104:1).PTHREAD_RWLOCK_PREFER_READER_NP = 0;
     * }
     */
    public static int PTHREAD_RWLOCK_PREFER_READER_NP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:104:1).PTHREAD_RWLOCK_PREFER_WRITER_NP = 1;
     * }
     */
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NP() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:104:1).PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP = 2;
     * }
     */
    public static int PTHREAD_RWLOCK_PREFER_WRITER_NONRECURSIVE_NP() {
        return (int)2L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:104:1).PTHREAD_RWLOCK_DEFAULT_NP = 0;
     * }
     */
    public static int PTHREAD_RWLOCK_DEFAULT_NP() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:124:1).PTHREAD_INHERIT_SCHED = 0;
     * }
     */
    public static int PTHREAD_INHERIT_SCHED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:124:1).PTHREAD_EXPLICIT_SCHED = 1;
     * }
     */
    public static int PTHREAD_EXPLICIT_SCHED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:134:1).PTHREAD_SCOPE_SYSTEM = 0;
     * }
     */
    public static int PTHREAD_SCOPE_SYSTEM() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:134:1).PTHREAD_SCOPE_PROCESS = 1;
     * }
     */
    public static int PTHREAD_SCOPE_PROCESS() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:144:1).PTHREAD_PROCESS_PRIVATE = 0;
     * }
     */
    public static int PTHREAD_PROCESS_PRIVATE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:144:1).PTHREAD_PROCESS_SHARED = 1;
     * }
     */
    public static int PTHREAD_PROCESS_SHARED() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:168:1).PTHREAD_CANCEL_ENABLE = 0;
     * }
     */
    public static int PTHREAD_CANCEL_ENABLE() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:168:1).PTHREAD_CANCEL_DISABLE = 1;
     * }
     */
    public static int PTHREAD_CANCEL_DISABLE() {
        return (int)1L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:175:1).PTHREAD_CANCEL_DEFERRED = 0;
     * }
     */
    public static int PTHREAD_CANCEL_DEFERRED() {
        return (int)0L;
    }
    /**
     * {@snippet :
     * enum enum (unnamed at /usr/include/pthread.h:175:1).PTHREAD_CANCEL_ASYNCHRONOUS = 1;
     * }
     */
    public static int PTHREAD_CANCEL_ASYNCHRONOUS() {
        return (int)1L;
    }
    public static MethodHandle pthread_create$MH() {
        return RuntimeHelper.requireNonNull(constants$516.const$4,"pthread_create");
    }
    /**
     * {@snippet :
     * int pthread_create(unsigned long* __newthread, union pthread_attr_t* __attr, void* (*__start_routine)(void*), void* __arg);
     * }
     */
    public static int pthread_create(MemorySegment __newthread, MemorySegment __attr, MemorySegment __start_routine, MemorySegment __arg) {
        var mh$ = pthread_create$MH();
        try {
            return (int)mh$.invokeExact(__newthread, __attr, __start_routine, __arg);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_exit$MH() {
        return RuntimeHelper.requireNonNull(constants$516.const$5,"pthread_exit");
    }
    /**
     * {@snippet :
     * void pthread_exit(void* __retval);
     * }
     */
    public static void pthread_exit(MemorySegment __retval) {
        var mh$ = pthread_exit$MH();
        try {
            mh$.invokeExact(__retval);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_join$MH() {
        return RuntimeHelper.requireNonNull(constants$517.const$0,"pthread_join");
    }
    /**
     * {@snippet :
     * int pthread_join(unsigned long __th, void** __thread_return);
     * }
     */
    public static int pthread_join(long __th, MemorySegment __thread_return) {
        var mh$ = pthread_join$MH();
        try {
            return (int)mh$.invokeExact(__th, __thread_return);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_detach$MH() {
        return RuntimeHelper.requireNonNull(constants$517.const$1,"pthread_detach");
    }
    /**
     * {@snippet :
     * int pthread_detach(unsigned long __th);
     * }
     */
    public static int pthread_detach(long __th) {
        var mh$ = pthread_detach$MH();
        try {
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_self$MH() {
        return RuntimeHelper.requireNonNull(constants$517.const$2,"pthread_self");
    }
    /**
     * {@snippet :
     * unsigned long pthread_self();
     * }
     */
    public static long pthread_self() {
        var mh$ = pthread_self$MH();
        try {
            return (long)mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_equal$MH() {
        return RuntimeHelper.requireNonNull(constants$517.const$4,"pthread_equal");
    }
    /**
     * {@snippet :
     * int pthread_equal(unsigned long __thread1, unsigned long __thread2);
     * }
     */
    public static int pthread_equal(long __thread1, long __thread2) {
        var mh$ = pthread_equal$MH();
        try {
            return (int)mh$.invokeExact(__thread1, __thread2);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$517.const$5,"pthread_attr_init");
    }
    /**
     * {@snippet :
     * int pthread_attr_init(union pthread_attr_t* __attr);
     * }
     */
    public static int pthread_attr_init(MemorySegment __attr) {
        var mh$ = pthread_attr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$518.const$0,"pthread_attr_destroy");
    }
    /**
     * {@snippet :
     * int pthread_attr_destroy(union pthread_attr_t* __attr);
     * }
     */
    public static int pthread_attr_destroy(MemorySegment __attr) {
        var mh$ = pthread_attr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getdetachstate$MH() {
        return RuntimeHelper.requireNonNull(constants$518.const$1,"pthread_attr_getdetachstate");
    }
    /**
     * {@snippet :
     * int pthread_attr_getdetachstate(union pthread_attr_t* __attr, int* __detachstate);
     * }
     */
    public static int pthread_attr_getdetachstate(MemorySegment __attr, MemorySegment __detachstate) {
        var mh$ = pthread_attr_getdetachstate$MH();
        try {
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setdetachstate$MH() {
        return RuntimeHelper.requireNonNull(constants$518.const$2,"pthread_attr_setdetachstate");
    }
    /**
     * {@snippet :
     * int pthread_attr_setdetachstate(union pthread_attr_t* __attr, int __detachstate);
     * }
     */
    public static int pthread_attr_setdetachstate(MemorySegment __attr, int __detachstate) {
        var mh$ = pthread_attr_setdetachstate$MH();
        try {
            return (int)mh$.invokeExact(__attr, __detachstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getguardsize$MH() {
        return RuntimeHelper.requireNonNull(constants$518.const$3,"pthread_attr_getguardsize");
    }
    /**
     * {@snippet :
     * int pthread_attr_getguardsize(union pthread_attr_t* __attr, unsigned long* __guardsize);
     * }
     */
    public static int pthread_attr_getguardsize(MemorySegment __attr, MemorySegment __guardsize) {
        var mh$ = pthread_attr_getguardsize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setguardsize$MH() {
        return RuntimeHelper.requireNonNull(constants$518.const$4,"pthread_attr_setguardsize");
    }
    /**
     * {@snippet :
     * int pthread_attr_setguardsize(union pthread_attr_t* __attr, unsigned long __guardsize);
     * }
     */
    public static int pthread_attr_setguardsize(MemorySegment __attr, long __guardsize) {
        var mh$ = pthread_attr_setguardsize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __guardsize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$518.const$5,"pthread_attr_getschedparam");
    }
    /**
     * {@snippet :
     * int pthread_attr_getschedparam(union pthread_attr_t* __attr, struct sched_param* __param);
     * }
     */
    public static int pthread_attr_getschedparam(MemorySegment __attr, MemorySegment __param) {
        var mh$ = pthread_attr_getschedparam$MH();
        try {
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$519.const$0,"pthread_attr_setschedparam");
    }
    /**
     * {@snippet :
     * int pthread_attr_setschedparam(union pthread_attr_t* __attr, struct sched_param* __param);
     * }
     */
    public static int pthread_attr_setschedparam(MemorySegment __attr, MemorySegment __param) {
        var mh$ = pthread_attr_setschedparam$MH();
        try {
            return (int)mh$.invokeExact(__attr, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getschedpolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$519.const$1,"pthread_attr_getschedpolicy");
    }
    /**
     * {@snippet :
     * int pthread_attr_getschedpolicy(union pthread_attr_t* __attr, int* __policy);
     * }
     */
    public static int pthread_attr_getschedpolicy(MemorySegment __attr, MemorySegment __policy) {
        var mh$ = pthread_attr_getschedpolicy$MH();
        try {
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setschedpolicy$MH() {
        return RuntimeHelper.requireNonNull(constants$519.const$2,"pthread_attr_setschedpolicy");
    }
    /**
     * {@snippet :
     * int pthread_attr_setschedpolicy(union pthread_attr_t* __attr, int __policy);
     * }
     */
    public static int pthread_attr_setschedpolicy(MemorySegment __attr, int __policy) {
        var mh$ = pthread_attr_setschedpolicy$MH();
        try {
            return (int)mh$.invokeExact(__attr, __policy);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getinheritsched$MH() {
        return RuntimeHelper.requireNonNull(constants$519.const$3,"pthread_attr_getinheritsched");
    }
    /**
     * {@snippet :
     * int pthread_attr_getinheritsched(union pthread_attr_t* __attr, int* __inherit);
     * }
     */
    public static int pthread_attr_getinheritsched(MemorySegment __attr, MemorySegment __inherit) {
        var mh$ = pthread_attr_getinheritsched$MH();
        try {
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setinheritsched$MH() {
        return RuntimeHelper.requireNonNull(constants$519.const$4,"pthread_attr_setinheritsched");
    }
    /**
     * {@snippet :
     * int pthread_attr_setinheritsched(union pthread_attr_t* __attr, int __inherit);
     * }
     */
    public static int pthread_attr_setinheritsched(MemorySegment __attr, int __inherit) {
        var mh$ = pthread_attr_setinheritsched$MH();
        try {
            return (int)mh$.invokeExact(__attr, __inherit);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getscope$MH() {
        return RuntimeHelper.requireNonNull(constants$519.const$5,"pthread_attr_getscope");
    }
    /**
     * {@snippet :
     * int pthread_attr_getscope(union pthread_attr_t* __attr, int* __scope);
     * }
     */
    public static int pthread_attr_getscope(MemorySegment __attr, MemorySegment __scope) {
        var mh$ = pthread_attr_getscope$MH();
        try {
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setscope$MH() {
        return RuntimeHelper.requireNonNull(constants$520.const$0,"pthread_attr_setscope");
    }
    /**
     * {@snippet :
     * int pthread_attr_setscope(union pthread_attr_t* __attr, int __scope);
     * }
     */
    public static int pthread_attr_setscope(MemorySegment __attr, int __scope) {
        var mh$ = pthread_attr_setscope$MH();
        try {
            return (int)mh$.invokeExact(__attr, __scope);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstackaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$520.const$1,"pthread_attr_getstackaddr");
    }
    /**
     * {@snippet :
     * int pthread_attr_getstackaddr(union pthread_attr_t* __attr, void** __stackaddr);
     * }
     */
    public static int pthread_attr_getstackaddr(MemorySegment __attr, MemorySegment __stackaddr) {
        var mh$ = pthread_attr_getstackaddr$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstackaddr$MH() {
        return RuntimeHelper.requireNonNull(constants$520.const$2,"pthread_attr_setstackaddr");
    }
    /**
     * {@snippet :
     * int pthread_attr_setstackaddr(union pthread_attr_t* __attr, void* __stackaddr);
     * }
     */
    public static int pthread_attr_setstackaddr(MemorySegment __attr, MemorySegment __stackaddr) {
        var mh$ = pthread_attr_setstackaddr$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstacksize$MH() {
        return RuntimeHelper.requireNonNull(constants$520.const$3,"pthread_attr_getstacksize");
    }
    /**
     * {@snippet :
     * int pthread_attr_getstacksize(union pthread_attr_t* __attr, unsigned long* __stacksize);
     * }
     */
    public static int pthread_attr_getstacksize(MemorySegment __attr, MemorySegment __stacksize) {
        var mh$ = pthread_attr_getstacksize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstacksize$MH() {
        return RuntimeHelper.requireNonNull(constants$520.const$4,"pthread_attr_setstacksize");
    }
    /**
     * {@snippet :
     * int pthread_attr_setstacksize(union pthread_attr_t* __attr, unsigned long __stacksize);
     * }
     */
    public static int pthread_attr_setstacksize(MemorySegment __attr, long __stacksize) {
        var mh$ = pthread_attr_setstacksize$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_getstack$MH() {
        return RuntimeHelper.requireNonNull(constants$520.const$5,"pthread_attr_getstack");
    }
    /**
     * {@snippet :
     * int pthread_attr_getstack(union pthread_attr_t* __attr, void** __stackaddr, unsigned long* __stacksize);
     * }
     */
    public static int pthread_attr_getstack(MemorySegment __attr, MemorySegment __stackaddr, MemorySegment __stacksize) {
        var mh$ = pthread_attr_getstack$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_attr_setstack$MH() {
        return RuntimeHelper.requireNonNull(constants$521.const$0,"pthread_attr_setstack");
    }
    /**
     * {@snippet :
     * int pthread_attr_setstack(union pthread_attr_t* __attr, void* __stackaddr, unsigned long __stacksize);
     * }
     */
    public static int pthread_attr_setstack(MemorySegment __attr, MemorySegment __stackaddr, long __stacksize) {
        var mh$ = pthread_attr_setstack$MH();
        try {
            return (int)mh$.invokeExact(__attr, __stackaddr, __stacksize);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$521.const$2,"pthread_setschedparam");
    }
    /**
     * {@snippet :
     * int pthread_setschedparam(unsigned long __target_thread, int __policy, struct sched_param* __param);
     * }
     */
    public static int pthread_setschedparam(long __target_thread, int __policy, MemorySegment __param) {
        var mh$ = pthread_setschedparam$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_getschedparam$MH() {
        return RuntimeHelper.requireNonNull(constants$521.const$4,"pthread_getschedparam");
    }
    /**
     * {@snippet :
     * int pthread_getschedparam(unsigned long __target_thread, int* __policy, struct sched_param* __param);
     * }
     */
    public static int pthread_getschedparam(long __target_thread, MemorySegment __policy, MemorySegment __param) {
        var mh$ = pthread_getschedparam$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __policy, __param);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setschedprio$MH() {
        return RuntimeHelper.requireNonNull(constants$521.const$5,"pthread_setschedprio");
    }
    /**
     * {@snippet :
     * int pthread_setschedprio(unsigned long __target_thread, int __prio);
     * }
     */
    public static int pthread_setschedprio(long __target_thread, int __prio) {
        var mh$ = pthread_setschedprio$MH();
        try {
            return (int)mh$.invokeExact(__target_thread, __prio);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_once$MH() {
        return RuntimeHelper.requireNonNull(constants$522.const$1,"pthread_once");
    }
    /**
     * {@snippet :
     * int pthread_once(int* __once_control, void (*__init_routine)());
     * }
     */
    public static int pthread_once(MemorySegment __once_control, MemorySegment __init_routine) {
        var mh$ = pthread_once$MH();
        try {
            return (int)mh$.invokeExact(__once_control, __init_routine);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setcancelstate$MH() {
        return RuntimeHelper.requireNonNull(constants$522.const$2,"pthread_setcancelstate");
    }
    /**
     * {@snippet :
     * int pthread_setcancelstate(int __state, int* __oldstate);
     * }
     */
    public static int pthread_setcancelstate(int __state, MemorySegment __oldstate) {
        var mh$ = pthread_setcancelstate$MH();
        try {
            return (int)mh$.invokeExact(__state, __oldstate);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_setcanceltype$MH() {
        return RuntimeHelper.requireNonNull(constants$522.const$3,"pthread_setcanceltype");
    }
    /**
     * {@snippet :
     * int pthread_setcanceltype(int __type, int* __oldtype);
     * }
     */
    public static int pthread_setcanceltype(int __type, MemorySegment __oldtype) {
        var mh$ = pthread_setcanceltype$MH();
        try {
            return (int)mh$.invokeExact(__type, __oldtype);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$522.const$4,"pthread_cancel");
    }
    /**
     * {@snippet :
     * int pthread_cancel(unsigned long __th);
     * }
     */
    public static int pthread_cancel(long __th) {
        var mh$ = pthread_cancel$MH();
        try {
            return (int)mh$.invokeExact(__th);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_testcancel$MH() {
        return RuntimeHelper.requireNonNull(constants$522.const$5,"pthread_testcancel");
    }
    /**
     * {@snippet :
     * void pthread_testcancel();
     * }
     */
    public static void pthread_testcancel() {
        var mh$ = pthread_testcancel$MH();
        try {
            mh$.invokeExact();
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_register_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$524.const$3,"__pthread_register_cancel");
    }
    /**
     * {@snippet :
     * void __pthread_register_cancel(struct __pthread_unwind_buf_t* __buf);
     * }
     */
    public static void __pthread_register_cancel(MemorySegment __buf) {
        var mh$ = __pthread_register_cancel$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_unregister_cancel$MH() {
        return RuntimeHelper.requireNonNull(constants$524.const$4,"__pthread_unregister_cancel");
    }
    /**
     * {@snippet :
     * void __pthread_unregister_cancel(struct __pthread_unwind_buf_t* __buf);
     * }
     */
    public static void __pthread_unregister_cancel(MemorySegment __buf) {
        var mh$ = __pthread_unregister_cancel$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __pthread_unwind_next$MH() {
        return RuntimeHelper.requireNonNull(constants$524.const$5,"__pthread_unwind_next");
    }
    /**
     * {@snippet :
     * void __pthread_unwind_next(struct __pthread_unwind_buf_t* __buf);
     * }
     */
    public static void __pthread_unwind_next(MemorySegment __buf) {
        var mh$ = __pthread_unwind_next$MH();
        try {
            mh$.invokeExact(__buf);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle __sigsetjmp$MH() {
        return RuntimeHelper.requireNonNull(constants$525.const$0,"__sigsetjmp");
    }
    /**
     * {@snippet :
     * int __sigsetjmp(struct __jmp_buf_tag __env[1], int __savemask);
     * }
     */
    public static int __sigsetjmp(MemorySegment __env, int __savemask) {
        var mh$ = __sigsetjmp$MH();
        try {
            return (int)mh$.invokeExact(__env, __savemask);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_init$MH() {
        return RuntimeHelper.requireNonNull(constants$525.const$1,"pthread_mutex_init");
    }
    /**
     * {@snippet :
     * int pthread_mutex_init(union pthread_mutex_t* __mutex, union pthread_mutexattr_t* __mutexattr);
     * }
     */
    public static int pthread_mutex_init(MemorySegment __mutex, MemorySegment __mutexattr) {
        var mh$ = pthread_mutex_init$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __mutexattr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$525.const$2,"pthread_mutex_destroy");
    }
    /**
     * {@snippet :
     * int pthread_mutex_destroy(union pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_mutex_destroy(MemorySegment __mutex) {
        var mh$ = pthread_mutex_destroy$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_trylock$MH() {
        return RuntimeHelper.requireNonNull(constants$525.const$3,"pthread_mutex_trylock");
    }
    /**
     * {@snippet :
     * int pthread_mutex_trylock(union pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_mutex_trylock(MemorySegment __mutex) {
        var mh$ = pthread_mutex_trylock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_lock$MH() {
        return RuntimeHelper.requireNonNull(constants$525.const$4,"pthread_mutex_lock");
    }
    /**
     * {@snippet :
     * int pthread_mutex_lock(union pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_mutex_lock(MemorySegment __mutex) {
        var mh$ = pthread_mutex_lock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_timedlock$MH() {
        return RuntimeHelper.requireNonNull(constants$525.const$5,"pthread_mutex_timedlock");
    }
    /**
     * {@snippet :
     * int pthread_mutex_timedlock(union pthread_mutex_t* __mutex, struct timespec* __abstime);
     * }
     */
    public static int pthread_mutex_timedlock(MemorySegment __mutex, MemorySegment __abstime) {
        var mh$ = pthread_mutex_timedlock$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$526.const$0,"pthread_mutex_unlock");
    }
    /**
     * {@snippet :
     * int pthread_mutex_unlock(union pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_mutex_unlock(MemorySegment __mutex) {
        var mh$ = pthread_mutex_unlock$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_getprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$526.const$1,"pthread_mutex_getprioceiling");
    }
    /**
     * {@snippet :
     * int pthread_mutex_getprioceiling(union pthread_mutex_t* __mutex, int* __prioceiling);
     * }
     */
    public static int pthread_mutex_getprioceiling(MemorySegment __mutex, MemorySegment __prioceiling) {
        var mh$ = pthread_mutex_getprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_setprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$526.const$2,"pthread_mutex_setprioceiling");
    }
    /**
     * {@snippet :
     * int pthread_mutex_setprioceiling(union pthread_mutex_t* __mutex, int __prioceiling, int* __old_ceiling);
     * }
     */
    public static int pthread_mutex_setprioceiling(MemorySegment __mutex, int __prioceiling, MemorySegment __old_ceiling) {
        var mh$ = pthread_mutex_setprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__mutex, __prioceiling, __old_ceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutex_consistent$MH() {
        return RuntimeHelper.requireNonNull(constants$526.const$3,"pthread_mutex_consistent");
    }
    /**
     * {@snippet :
     * int pthread_mutex_consistent(union pthread_mutex_t* __mutex);
     * }
     */
    public static int pthread_mutex_consistent(MemorySegment __mutex) {
        var mh$ = pthread_mutex_consistent$MH();
        try {
            return (int)mh$.invokeExact(__mutex);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$526.const$4,"pthread_mutexattr_init");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_init(union pthread_mutexattr_t* __attr);
     * }
     */
    public static int pthread_mutexattr_init(MemorySegment __attr) {
        var mh$ = pthread_mutexattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$526.const$5,"pthread_mutexattr_destroy");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_destroy(union pthread_mutexattr_t* __attr);
     * }
     */
    public static int pthread_mutexattr_destroy(MemorySegment __attr) {
        var mh$ = pthread_mutexattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$527.const$0,"pthread_mutexattr_getpshared");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_getpshared(union pthread_mutexattr_t* __attr, int* __pshared);
     * }
     */
    public static int pthread_mutexattr_getpshared(MemorySegment __attr, MemorySegment __pshared) {
        var mh$ = pthread_mutexattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$527.const$1,"pthread_mutexattr_setpshared");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_setpshared(union pthread_mutexattr_t* __attr, int __pshared);
     * }
     */
    public static int pthread_mutexattr_setpshared(MemorySegment __attr, int __pshared) {
        var mh$ = pthread_mutexattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_gettype$MH() {
        return RuntimeHelper.requireNonNull(constants$527.const$2,"pthread_mutexattr_gettype");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_gettype(union pthread_mutexattr_t* __attr, int* __kind);
     * }
     */
    public static int pthread_mutexattr_gettype(MemorySegment __attr, MemorySegment __kind) {
        var mh$ = pthread_mutexattr_gettype$MH();
        try {
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_settype$MH() {
        return RuntimeHelper.requireNonNull(constants$527.const$3,"pthread_mutexattr_settype");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_settype(union pthread_mutexattr_t* __attr, int __kind);
     * }
     */
    public static int pthread_mutexattr_settype(MemorySegment __attr, int __kind) {
        var mh$ = pthread_mutexattr_settype$MH();
        try {
            return (int)mh$.invokeExact(__attr, __kind);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getprotocol$MH() {
        return RuntimeHelper.requireNonNull(constants$527.const$4,"pthread_mutexattr_getprotocol");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_getprotocol(union pthread_mutexattr_t* __attr, int* __protocol);
     * }
     */
    public static int pthread_mutexattr_getprotocol(MemorySegment __attr, MemorySegment __protocol) {
        var mh$ = pthread_mutexattr_getprotocol$MH();
        try {
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setprotocol$MH() {
        return RuntimeHelper.requireNonNull(constants$527.const$5,"pthread_mutexattr_setprotocol");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_setprotocol(union pthread_mutexattr_t* __attr, int __protocol);
     * }
     */
    public static int pthread_mutexattr_setprotocol(MemorySegment __attr, int __protocol) {
        var mh$ = pthread_mutexattr_setprotocol$MH();
        try {
            return (int)mh$.invokeExact(__attr, __protocol);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$528.const$0,"pthread_mutexattr_getprioceiling");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_getprioceiling(union pthread_mutexattr_t* __attr, int* __prioceiling);
     * }
     */
    public static int pthread_mutexattr_getprioceiling(MemorySegment __attr, MemorySegment __prioceiling) {
        var mh$ = pthread_mutexattr_getprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setprioceiling$MH() {
        return RuntimeHelper.requireNonNull(constants$528.const$1,"pthread_mutexattr_setprioceiling");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_setprioceiling(union pthread_mutexattr_t* __attr, int __prioceiling);
     * }
     */
    public static int pthread_mutexattr_setprioceiling(MemorySegment __attr, int __prioceiling) {
        var mh$ = pthread_mutexattr_setprioceiling$MH();
        try {
            return (int)mh$.invokeExact(__attr, __prioceiling);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_getrobust$MH() {
        return RuntimeHelper.requireNonNull(constants$528.const$2,"pthread_mutexattr_getrobust");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_getrobust(union pthread_mutexattr_t* __attr, int* __robustness);
     * }
     */
    public static int pthread_mutexattr_getrobust(MemorySegment __attr, MemorySegment __robustness) {
        var mh$ = pthread_mutexattr_getrobust$MH();
        try {
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_mutexattr_setrobust$MH() {
        return RuntimeHelper.requireNonNull(constants$528.const$3,"pthread_mutexattr_setrobust");
    }
    /**
     * {@snippet :
     * int pthread_mutexattr_setrobust(union pthread_mutexattr_t* __attr, int __robustness);
     * }
     */
    public static int pthread_mutexattr_setrobust(MemorySegment __attr, int __robustness) {
        var mh$ = pthread_mutexattr_setrobust$MH();
        try {
            return (int)mh$.invokeExact(__attr, __robustness);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_init$MH() {
        return RuntimeHelper.requireNonNull(constants$528.const$4,"pthread_rwlock_init");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_init(union pthread_rwlock_t* __rwlock, union pthread_rwlockattr_t* __attr);
     * }
     */
    public static int pthread_rwlock_init(MemorySegment __rwlock, MemorySegment __attr) {
        var mh$ = pthread_rwlock_init$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$528.const$5,"pthread_rwlock_destroy");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_destroy(union pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_destroy(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_destroy$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_rdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$529.const$0,"pthread_rwlock_rdlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_rdlock(union pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_rdlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_rdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_tryrdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$529.const$1,"pthread_rwlock_tryrdlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_tryrdlock(union pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_tryrdlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_tryrdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_timedrdlock$MH() {
        return RuntimeHelper.requireNonNull(constants$529.const$2,"pthread_rwlock_timedrdlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_timedrdlock(union pthread_rwlock_t* __rwlock, struct timespec* __abstime);
     * }
     */
    public static int pthread_rwlock_timedrdlock(MemorySegment __rwlock, MemorySegment __abstime) {
        var mh$ = pthread_rwlock_timedrdlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_wrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$529.const$3,"pthread_rwlock_wrlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_wrlock(union pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_wrlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_wrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_trywrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$529.const$4,"pthread_rwlock_trywrlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_trywrlock(union pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_trywrlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_trywrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_timedwrlock$MH() {
        return RuntimeHelper.requireNonNull(constants$529.const$5,"pthread_rwlock_timedwrlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_timedwrlock(union pthread_rwlock_t* __rwlock, struct timespec* __abstime);
     * }
     */
    public static int pthread_rwlock_timedwrlock(MemorySegment __rwlock, MemorySegment __abstime) {
        var mh$ = pthread_rwlock_timedwrlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock, __abstime);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlock_unlock$MH() {
        return RuntimeHelper.requireNonNull(constants$530.const$0,"pthread_rwlock_unlock");
    }
    /**
     * {@snippet :
     * int pthread_rwlock_unlock(union pthread_rwlock_t* __rwlock);
     * }
     */
    public static int pthread_rwlock_unlock(MemorySegment __rwlock) {
        var mh$ = pthread_rwlock_unlock$MH();
        try {
            return (int)mh$.invokeExact(__rwlock);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_init$MH() {
        return RuntimeHelper.requireNonNull(constants$530.const$1,"pthread_rwlockattr_init");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_init(union pthread_rwlockattr_t* __attr);
     * }
     */
    public static int pthread_rwlockattr_init(MemorySegment __attr) {
        var mh$ = pthread_rwlockattr_init$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$530.const$2,"pthread_rwlockattr_destroy");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_destroy(union pthread_rwlockattr_t* __attr);
     * }
     */
    public static int pthread_rwlockattr_destroy(MemorySegment __attr) {
        var mh$ = pthread_rwlockattr_destroy$MH();
        try {
            return (int)mh$.invokeExact(__attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_getpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$530.const$3,"pthread_rwlockattr_getpshared");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_getpshared(union pthread_rwlockattr_t* __attr, int* __pshared);
     * }
     */
    public static int pthread_rwlockattr_getpshared(MemorySegment __attr, MemorySegment __pshared) {
        var mh$ = pthread_rwlockattr_getpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_setpshared$MH() {
        return RuntimeHelper.requireNonNull(constants$530.const$4,"pthread_rwlockattr_setpshared");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_setpshared(union pthread_rwlockattr_t* __attr, int __pshared);
     * }
     */
    public static int pthread_rwlockattr_setpshared(MemorySegment __attr, int __pshared) {
        var mh$ = pthread_rwlockattr_setpshared$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pshared);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_getkind_np$MH() {
        return RuntimeHelper.requireNonNull(constants$530.const$5,"pthread_rwlockattr_getkind_np");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_getkind_np(union pthread_rwlockattr_t* __attr, int* __pref);
     * }
     */
    public static int pthread_rwlockattr_getkind_np(MemorySegment __attr, MemorySegment __pref) {
        var mh$ = pthread_rwlockattr_getkind_np$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_rwlockattr_setkind_np$MH() {
        return RuntimeHelper.requireNonNull(constants$531.const$0,"pthread_rwlockattr_setkind_np");
    }
    /**
     * {@snippet :
     * int pthread_rwlockattr_setkind_np(union pthread_rwlockattr_t* __attr, int __pref);
     * }
     */
    public static int pthread_rwlockattr_setkind_np(MemorySegment __attr, int __pref) {
        var mh$ = pthread_rwlockattr_setkind_np$MH();
        try {
            return (int)mh$.invokeExact(__attr, __pref);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_init$MH() {
        return RuntimeHelper.requireNonNull(constants$531.const$1,"pthread_cond_init");
    }
    /**
     * {@snippet :
     * int pthread_cond_init(union pthread_cond_t* __cond, union pthread_condattr_t* __cond_attr);
     * }
     */
    public static int pthread_cond_init(MemorySegment __cond, MemorySegment __cond_attr) {
        var mh$ = pthread_cond_init$MH();
        try {
            return (int)mh$.invokeExact(__cond, __cond_attr);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
    public static MethodHandle pthread_cond_destroy$MH() {
        return RuntimeHelper.requireNonNull(constants$531.const$2,"pthread_cond_destroy");
    }
    /**
     * {@snippet :
     * int pthread_cond_destroy(union pthread_cond_t* __cond);
     * }
     */
    public static int pthread_cond_destroy(MemorySegment __cond) {
        var mh$ = pthread_cond_destroy$MH();
        try {
            return (int)mh$.invokeExact(__cond);
        } catch (Throwable ex$) {
            throw new AssertionError("should not reach here", ex$);
        }
    }
}


