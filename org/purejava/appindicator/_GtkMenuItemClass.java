// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkMenuItemClass {
 *     struct _GtkBinClass parent_class;
 *      *     unsigned int hide_on_activate;
 *     void (*activate)(struct _GtkMenuItem*);
 *     void (*activate_item)(struct _GtkMenuItem*);
 *     void (*toggle_size_request)(struct _GtkMenuItem*,int*);
 *     void (*toggle_size_allocate)(struct _GtkMenuItem*,int);
 *     void (*set_label)(struct _GtkMenuItem*,char*);
 *     char* (*get_label)(struct _GtkMenuItem*);
 *     void (*select)(struct _GtkMenuItem*);
 *     void (*deselect)(struct _GtkMenuItem*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkMenuItemClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2612.const$0;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 1008);
    }
    /**
     * {@snippet :
 * void (*activate)(struct _GtkMenuItem*);
     * }
     */
    public interface activate {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(activate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2612.const$1, fi, constants$13.const$1, scope);
        }
        static activate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle activate$VH() {
        return constants$2612.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*activate)(struct _GtkMenuItem*);
     * }
     */
    public static MemorySegment activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2612.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*activate)(struct _GtkMenuItem*);
     * }
     */
    public static void activate$set(MemorySegment seg, MemorySegment x) {
        constants$2612.const$2.set(seg, x);
    }
    public static MemorySegment activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2612.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2612.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate(MemorySegment segment, Arena scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*activate_item)(struct _GtkMenuItem*);
     * }
     */
    public interface activate_item {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(activate_item fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2612.const$3, fi, constants$13.const$1, scope);
        }
        static activate_item ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle activate_item$VH() {
        return constants$2612.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*activate_item)(struct _GtkMenuItem*);
     * }
     */
    public static MemorySegment activate_item$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2612.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*activate_item)(struct _GtkMenuItem*);
     * }
     */
    public static void activate_item$set(MemorySegment seg, MemorySegment x) {
        constants$2612.const$4.set(seg, x);
    }
    public static MemorySegment activate_item$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2612.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void activate_item$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2612.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate_item activate_item(MemorySegment segment, Arena scope) {
        return activate_item.ofAddress(activate_item$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*toggle_size_request)(struct _GtkMenuItem*,int*);
     * }
     */
    public interface toggle_size_request {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(toggle_size_request fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2612.const$5, fi, constants$13.const$4, scope);
        }
        static toggle_size_request ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle toggle_size_request$VH() {
        return constants$2613.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*toggle_size_request)(struct _GtkMenuItem*,int*);
     * }
     */
    public static MemorySegment toggle_size_request$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2613.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*toggle_size_request)(struct _GtkMenuItem*,int*);
     * }
     */
    public static void toggle_size_request$set(MemorySegment seg, MemorySegment x) {
        constants$2613.const$0.set(seg, x);
    }
    public static MemorySegment toggle_size_request$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2613.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_size_request$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2613.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_size_request toggle_size_request(MemorySegment segment, Arena scope) {
        return toggle_size_request.ofAddress(toggle_size_request$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*toggle_size_allocate)(struct _GtkMenuItem*,int);
     * }
     */
    public interface toggle_size_allocate {

        void apply(java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(toggle_size_allocate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2613.const$1, fi, constants$40.const$2, scope);
        }
        static toggle_size_allocate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle toggle_size_allocate$VH() {
        return constants$2613.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*toggle_size_allocate)(struct _GtkMenuItem*,int);
     * }
     */
    public static MemorySegment toggle_size_allocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2613.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*toggle_size_allocate)(struct _GtkMenuItem*,int);
     * }
     */
    public static void toggle_size_allocate$set(MemorySegment seg, MemorySegment x) {
        constants$2613.const$2.set(seg, x);
    }
    public static MemorySegment toggle_size_allocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2613.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void toggle_size_allocate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2613.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static toggle_size_allocate toggle_size_allocate(MemorySegment segment, Arena scope) {
        return toggle_size_allocate.ofAddress(toggle_size_allocate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_label)(struct _GtkMenuItem*,char*);
     * }
     */
    public interface set_label {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(set_label fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2613.const$3, fi, constants$13.const$4, scope);
        }
        static set_label ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_label$VH() {
        return constants$2613.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_label)(struct _GtkMenuItem*,char*);
     * }
     */
    public static MemorySegment set_label$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2613.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_label)(struct _GtkMenuItem*,char*);
     * }
     */
    public static void set_label$set(MemorySegment seg, MemorySegment x) {
        constants$2613.const$4.set(seg, x);
    }
    public static MemorySegment set_label$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2613.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void set_label$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2613.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_label set_label(MemorySegment segment, Arena scope) {
        return set_label.ofAddress(set_label$get(segment), scope);
    }
    /**
     * {@snippet :
 * char* (*get_label)(struct _GtkMenuItem*);
     * }
     */
    public interface get_label {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_label fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2613.const$5, fi, constants$5.const$2, scope);
        }
        static get_label ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_label$VH() {
        return constants$2614.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * char* (*get_label)(struct _GtkMenuItem*);
     * }
     */
    public static MemorySegment get_label$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2614.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * char* (*get_label)(struct _GtkMenuItem*);
     * }
     */
    public static void get_label$set(MemorySegment seg, MemorySegment x) {
        constants$2614.const$0.set(seg, x);
    }
    public static MemorySegment get_label$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2614.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_label$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2614.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_label get_label(MemorySegment segment, Arena scope) {
        return get_label.ofAddress(get_label$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*select)(struct _GtkMenuItem*);
     * }
     */
    public interface select {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(select fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2614.const$1, fi, constants$13.const$1, scope);
        }
        static select ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle select$VH() {
        return constants$2614.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*select)(struct _GtkMenuItem*);
     * }
     */
    public static MemorySegment select$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2614.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*select)(struct _GtkMenuItem*);
     * }
     */
    public static void select$set(MemorySegment seg, MemorySegment x) {
        constants$2614.const$2.set(seg, x);
    }
    public static MemorySegment select$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2614.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void select$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2614.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static select select(MemorySegment segment, Arena scope) {
        return select.ofAddress(select$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*deselect)(struct _GtkMenuItem*);
     * }
     */
    public interface deselect {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(deselect fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2614.const$3, fi, constants$13.const$1, scope);
        }
        static deselect ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle deselect$VH() {
        return constants$2614.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*deselect)(struct _GtkMenuItem*);
     * }
     */
    public static MemorySegment deselect$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2614.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*deselect)(struct _GtkMenuItem*);
     * }
     */
    public static void deselect$set(MemorySegment seg, MemorySegment x) {
        constants$2614.const$4.set(seg, x);
    }
    public static MemorySegment deselect$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2614.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void deselect$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2614.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static deselect deselect(MemorySegment segment, Arena scope) {
        return deselect.ofAddress(deselect$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2614.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2615.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2615.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2615.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2615.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2615.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2615.const$1, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2615.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2615.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2615.const$2.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2615.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2615.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2615.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2615.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2615.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2615.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2615.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2615.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2615.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2616.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2616.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2616.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2616.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2616.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


