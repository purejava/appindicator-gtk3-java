// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * void (*g_datalist_foreach$func)(unsigned int,void*,void*);
 * }
 */
public interface g_datalist_foreach$func {

    void apply(int key_id, java.lang.foreign.MemorySegment data, java.lang.foreign.MemorySegment user_data);
    static MemorySegment allocate(g_datalist_foreach$func fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$181.const$1, fi, constants$127.const$3, scope);
    }
    static g_datalist_foreach$func ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (int _key_id, java.lang.foreign.MemorySegment _data, java.lang.foreign.MemorySegment _user_data) -> {
            try {
                constants$127.const$5.invokeExact(symbol, _key_id, _data, _user_data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


