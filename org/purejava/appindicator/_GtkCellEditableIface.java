// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkCellEditableIface {
 *     struct _GTypeInterface g_iface;
 *     void (*editing_done)(struct _GtkCellEditable*);
 *     void (*remove_widget)(struct _GtkCellEditable*);
 *     void (*start_editing)(struct _GtkCellEditable*,union _GdkEvent*);
 * };
 * }
 */
public class _GtkCellEditableIface {

    public static MemoryLayout $LAYOUT() {
        return constants$2306.const$0;
    }
    public static MemorySegment g_iface$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    /**
     * {@snippet :
 * void (*editing_done)(struct _GtkCellEditable*);
     * }
     */
    public interface editing_done {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(editing_done fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2306.const$1, fi, constants$13.const$1, scope);
        }
        static editing_done ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle editing_done$VH() {
        return constants$2306.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*editing_done)(struct _GtkCellEditable*);
     * }
     */
    public static MemorySegment editing_done$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2306.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*editing_done)(struct _GtkCellEditable*);
     * }
     */
    public static void editing_done$set(MemorySegment seg, MemorySegment x) {
        constants$2306.const$2.set(seg, x);
    }
    public static MemorySegment editing_done$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2306.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void editing_done$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2306.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static editing_done editing_done(MemorySegment segment, Arena scope) {
        return editing_done.ofAddress(editing_done$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*remove_widget)(struct _GtkCellEditable*);
     * }
     */
    public interface remove_widget {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(remove_widget fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2306.const$3, fi, constants$13.const$1, scope);
        }
        static remove_widget ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remove_widget$VH() {
        return constants$2306.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*remove_widget)(struct _GtkCellEditable*);
     * }
     */
    public static MemorySegment remove_widget$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2306.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*remove_widget)(struct _GtkCellEditable*);
     * }
     */
    public static void remove_widget$set(MemorySegment seg, MemorySegment x) {
        constants$2306.const$4.set(seg, x);
    }
    public static MemorySegment remove_widget$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2306.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void remove_widget$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2306.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove_widget remove_widget(MemorySegment segment, Arena scope) {
        return remove_widget.ofAddress(remove_widget$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*start_editing)(struct _GtkCellEditable*,union _GdkEvent*);
     * }
     */
    public interface start_editing {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(start_editing fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2306.const$5, fi, constants$13.const$4, scope);
        }
        static start_editing ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle start_editing$VH() {
        return constants$2307.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*start_editing)(struct _GtkCellEditable*,union _GdkEvent*);
     * }
     */
    public static MemorySegment start_editing$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2307.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*start_editing)(struct _GtkCellEditable*,union _GdkEvent*);
     * }
     */
    public static void start_editing$set(MemorySegment seg, MemorySegment x) {
        constants$2307.const$0.set(seg, x);
    }
    public static MemorySegment start_editing$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2307.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void start_editing$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2307.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static start_editing start_editing(MemorySegment segment, Arena scope) {
        return start_editing.ofAddress(start_editing$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


