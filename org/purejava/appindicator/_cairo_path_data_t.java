// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * union _cairo_path_data_t {
 *     struct  header;
 *     struct  point;
 * };
 * }
 */
public class _cairo_path_data_t {

    public static MemoryLayout $LAYOUT() {
        return constants$1718.const$3;
    }
    /**
     * {@snippet :
     * struct {
     *     enum _cairo_path_data_type type;
     *     int length;
     * };
     * }
     */
    public static final class header {

        // Suppresses default constructor, ensuring non-instantiability.
        private header() {}
        public static MemoryLayout $LAYOUT() {
            return constants$1718.const$4;
        }
        public static VarHandle type$VH() {
            return constants$1718.const$5;
        }
        /**
         * Getter for field:
         * {@snippet :
         * enum _cairo_path_data_type type;
         * }
         */
        public static int type$get(MemorySegment seg) {
            return (int)constants$1718.const$5.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * enum _cairo_path_data_type type;
         * }
         */
        public static void type$set(MemorySegment seg, int x) {
            constants$1718.const$5.set(seg, x);
        }
        public static int type$get(MemorySegment seg, long index) {
            return (int)constants$1718.const$5.get(seg.asSlice(index*sizeof()));
        }
        public static void type$set(MemorySegment seg, long index, int x) {
            constants$1718.const$5.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle length$VH() {
            return constants$1719.const$0;
        }
        /**
         * Getter for field:
         * {@snippet :
         * int length;
         * }
         */
        public static int length$get(MemorySegment seg) {
            return (int)constants$1719.const$0.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * int length;
         * }
         */
        public static void length$set(MemorySegment seg, int x) {
            constants$1719.const$0.set(seg, x);
        }
        public static int length$get(MemorySegment seg, long index) {
            return (int)constants$1719.const$0.get(seg.asSlice(index*sizeof()));
        }
        public static void length$set(MemorySegment seg, long index, int x) {
            constants$1719.const$0.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment header$slice(MemorySegment seg) {
        return seg.asSlice(0, 8);
    }
    /**
     * {@snippet :
     * struct {
     *     double x;
     *     double y;
     * };
     * }
     */
    public static final class point {

        // Suppresses default constructor, ensuring non-instantiability.
        private point() {}
        public static MemoryLayout $LAYOUT() {
            return constants$1719.const$1;
        }
        public static VarHandle x$VH() {
            return constants$1719.const$2;
        }
        /**
         * Getter for field:
         * {@snippet :
         * double x;
         * }
         */
        public static double x$get(MemorySegment seg) {
            return (double)constants$1719.const$2.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * double x;
         * }
         */
        public static void x$set(MemorySegment seg, double x) {
            constants$1719.const$2.set(seg, x);
        }
        public static double x$get(MemorySegment seg, long index) {
            return (double)constants$1719.const$2.get(seg.asSlice(index*sizeof()));
        }
        public static void x$set(MemorySegment seg, long index, double x) {
            constants$1719.const$2.set(seg.asSlice(index*sizeof()), x);
        }
        public static VarHandle y$VH() {
            return constants$1719.const$3;
        }
        /**
         * Getter for field:
         * {@snippet :
         * double y;
         * }
         */
        public static double y$get(MemorySegment seg) {
            return (double)constants$1719.const$3.get(seg);
        }
        /**
         * Setter for field:
         * {@snippet :
         * double y;
         * }
         */
        public static void y$set(MemorySegment seg, double x) {
            constants$1719.const$3.set(seg, x);
        }
        public static double y$get(MemorySegment seg, long index) {
            return (double)constants$1719.const$3.get(seg.asSlice(index*sizeof()));
        }
        public static void y$set(MemorySegment seg, long index, double x) {
            constants$1719.const$3.set(seg.asSlice(index*sizeof()), x);
        }
        public static long sizeof() { return $LAYOUT().byteSize(); }
        public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
        public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
            return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
        }
        public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
    }

    public static MemorySegment point$slice(MemorySegment seg) {
        return seg.asSlice(0, 16);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


