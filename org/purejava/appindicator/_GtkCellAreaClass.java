// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkCellAreaClass {
 *     struct _GObjectClass parent_class;
 *     void (*add)(struct _GtkCellArea*,struct _GtkCellRenderer*);
 *     void (*remove)(struct _GtkCellArea*,struct _GtkCellRenderer*);
 *     void (*foreach)(struct _GtkCellArea*,int (*)(struct _GtkCellRenderer*,void*),void*);
 *     void (*foreach_alloc)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,int (*)(struct _GtkCellRenderer*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,void*),void*);
 *     int (*event)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,union _GdkEvent*,struct _cairo_rectangle_int*,enum GtkCellRendererState);
 *     void (*render)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,enum GtkCellRendererState,int);
 *     void (*apply_attributes)(struct _GtkCellArea*,struct _GtkTreeModel*,struct _GtkTreeIter*,int,int);
 *     struct _GtkCellAreaContext* (*create_context)(struct _GtkCellArea*);
 *     struct _GtkCellAreaContext* (*copy_context)(struct _GtkCellArea*,struct _GtkCellAreaContext*);
 *     enum GtkSizeRequestMode (*get_request_mode)(struct _GtkCellArea*);
 *     void (*get_preferred_width)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int*,int*);
 *     void (*get_preferred_height_for_width)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int,int*,int*);
 *     void (*get_preferred_height)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int*,int*);
 *     void (*get_preferred_width_for_height)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int,int*,int*);
 *     void (*set_cell_property)(struct _GtkCellArea*,struct _GtkCellRenderer*,unsigned int,struct _GValue*,struct _GParamSpec*);
 *     void (*get_cell_property)(struct _GtkCellArea*,struct _GtkCellRenderer*,unsigned int,struct _GValue*,struct _GParamSpec*);
 *     int (*focus)(struct _GtkCellArea*,enum GtkDirectionType);
 *     int (*is_activatable)(struct _GtkCellArea*);
 *     int (*activate)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo_rectangle_int*,enum GtkCellRendererState,int);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 *     void (*_gtk_reserved5)();
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 *     void (*_gtk_reserved8)();
 * };
 * }
 */
public class _GtkCellAreaClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2323.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    /**
     * {@snippet :
 * void (*add)(struct _GtkCellArea*,struct _GtkCellRenderer*);
     * }
     */
    public interface add {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(add fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2324.const$0, fi, constants$13.const$4, scope);
        }
        static add ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle add$VH() {
        return constants$2324.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*add)(struct _GtkCellArea*,struct _GtkCellRenderer*);
     * }
     */
    public static MemorySegment add$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2324.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*add)(struct _GtkCellArea*,struct _GtkCellRenderer*);
     * }
     */
    public static void add$set(MemorySegment seg, MemorySegment x) {
        constants$2324.const$1.set(seg, x);
    }
    public static MemorySegment add$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2324.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void add$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2324.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static add add(MemorySegment segment, Arena scope) {
        return add.ofAddress(add$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*remove)(struct _GtkCellArea*,struct _GtkCellRenderer*);
     * }
     */
    public interface remove {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(remove fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2324.const$2, fi, constants$13.const$4, scope);
        }
        static remove ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle remove$VH() {
        return constants$2324.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*remove)(struct _GtkCellArea*,struct _GtkCellRenderer*);
     * }
     */
    public static MemorySegment remove$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2324.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*remove)(struct _GtkCellArea*,struct _GtkCellRenderer*);
     * }
     */
    public static void remove$set(MemorySegment seg, MemorySegment x) {
        constants$2324.const$3.set(seg, x);
    }
    public static MemorySegment remove$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2324.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void remove$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2324.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static remove remove(MemorySegment segment, Arena scope) {
        return remove.ofAddress(remove$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*foreach)(struct _GtkCellArea*,int (*)(struct _GtkCellRenderer*,void*),void*);
     * }
     */
    public interface foreach {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(foreach fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2324.const$4, fi, constants$14.const$3, scope);
        }
        static foreach ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle foreach$VH() {
        return constants$2324.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*foreach)(struct _GtkCellArea*,int (*)(struct _GtkCellRenderer*,void*),void*);
     * }
     */
    public static MemorySegment foreach$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2324.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*foreach)(struct _GtkCellArea*,int (*)(struct _GtkCellRenderer*,void*),void*);
     * }
     */
    public static void foreach$set(MemorySegment seg, MemorySegment x) {
        constants$2324.const$5.set(seg, x);
    }
    public static MemorySegment foreach$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2324.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void foreach$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2324.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static foreach foreach(MemorySegment segment, Arena scope) {
        return foreach.ofAddress(foreach$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*foreach_alloc)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,int (*)(struct _GtkCellRenderer*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,void*),void*);
     * }
     */
    public interface foreach_alloc {

        void apply(java.lang.foreign.MemorySegment connection, java.lang.foreign.MemorySegment sender_name, java.lang.foreign.MemorySegment object_path, java.lang.foreign.MemorySegment interface_name, java.lang.foreign.MemorySegment signal_name, java.lang.foreign.MemorySegment parameters, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(foreach_alloc fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2325.const$0, fi, constants$868.const$1, scope);
        }
        static foreach_alloc ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _connection, java.lang.foreign.MemorySegment _sender_name, java.lang.foreign.MemorySegment _object_path, java.lang.foreign.MemorySegment _interface_name, java.lang.foreign.MemorySegment _signal_name, java.lang.foreign.MemorySegment _parameters, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$868.const$3.invokeExact(symbol, _connection, _sender_name, _object_path, _interface_name, _signal_name, _parameters, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle foreach_alloc$VH() {
        return constants$2325.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*foreach_alloc)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,int (*)(struct _GtkCellRenderer*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,void*),void*);
     * }
     */
    public static MemorySegment foreach_alloc$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2325.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*foreach_alloc)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,int (*)(struct _GtkCellRenderer*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,void*),void*);
     * }
     */
    public static void foreach_alloc$set(MemorySegment seg, MemorySegment x) {
        constants$2325.const$1.set(seg, x);
    }
    public static MemorySegment foreach_alloc$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2325.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void foreach_alloc$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2325.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static foreach_alloc foreach_alloc(MemorySegment segment, Arena scope) {
        return foreach_alloc.ofAddress(foreach_alloc$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*event)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,union _GdkEvent*,struct _cairo_rectangle_int*,enum GtkCellRendererState);
     * }
     */
    public interface event {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, int _x5);
        static MemorySegment allocate(event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2325.const$3, fi, constants$2325.const$2, scope);
        }
        static event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, int __x5) -> {
                try {
                    return (int)constants$2325.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle event$VH() {
        return constants$2325.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*event)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,union _GdkEvent*,struct _cairo_rectangle_int*,enum GtkCellRendererState);
     * }
     */
    public static MemorySegment event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2325.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*event)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,union _GdkEvent*,struct _cairo_rectangle_int*,enum GtkCellRendererState);
     * }
     */
    public static void event$set(MemorySegment seg, MemorySegment x) {
        constants$2325.const$5.set(seg, x);
    }
    public static MemorySegment event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2325.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2325.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static event event(MemorySegment segment, Arena scope) {
        return event.ofAddress(event$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*render)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,enum GtkCellRendererState,int);
     * }
     */
    public interface render {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5, int _x6, int _x7);
        static MemorySegment allocate(render fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2326.const$1, fi, constants$2326.const$0, scope);
        }
        static render ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5, int __x6, int __x7) -> {
                try {
                    constants$2326.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6, __x7);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle render$VH() {
        return constants$2326.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*render)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,enum GtkCellRendererState,int);
     * }
     */
    public static MemorySegment render$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2326.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*render)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo*,struct _cairo_rectangle_int*,struct _cairo_rectangle_int*,enum GtkCellRendererState,int);
     * }
     */
    public static void render$set(MemorySegment seg, MemorySegment x) {
        constants$2326.const$3.set(seg, x);
    }
    public static MemorySegment render$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2326.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void render$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2326.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static render render(MemorySegment segment, Arena scope) {
        return render.ofAddress(render$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*apply_attributes)(struct _GtkCellArea*,struct _GtkTreeModel*,struct _GtkTreeIter*,int,int);
     * }
     */
    public interface apply_attributes {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4);
        static MemorySegment allocate(apply_attributes fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2326.const$4, fi, constants$1641.const$5, scope);
        }
        static apply_attributes ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4) -> {
                try {
                    constants$1642.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle apply_attributes$VH() {
        return constants$2326.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*apply_attributes)(struct _GtkCellArea*,struct _GtkTreeModel*,struct _GtkTreeIter*,int,int);
     * }
     */
    public static MemorySegment apply_attributes$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2326.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*apply_attributes)(struct _GtkCellArea*,struct _GtkTreeModel*,struct _GtkTreeIter*,int,int);
     * }
     */
    public static void apply_attributes$set(MemorySegment seg, MemorySegment x) {
        constants$2326.const$5.set(seg, x);
    }
    public static MemorySegment apply_attributes$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2326.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void apply_attributes$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2326.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static apply_attributes apply_attributes(MemorySegment segment, Arena scope) {
        return apply_attributes.ofAddress(apply_attributes$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkCellAreaContext* (*create_context)(struct _GtkCellArea*);
     * }
     */
    public interface create_context {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(create_context fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2327.const$0, fi, constants$5.const$2, scope);
        }
        static create_context ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle create_context$VH() {
        return constants$2327.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkCellAreaContext* (*create_context)(struct _GtkCellArea*);
     * }
     */
    public static MemorySegment create_context$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2327.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkCellAreaContext* (*create_context)(struct _GtkCellArea*);
     * }
     */
    public static void create_context$set(MemorySegment seg, MemorySegment x) {
        constants$2327.const$1.set(seg, x);
    }
    public static MemorySegment create_context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2327.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void create_context$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2327.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static create_context create_context(MemorySegment segment, Arena scope) {
        return create_context.ofAddress(create_context$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _GtkCellAreaContext* (*copy_context)(struct _GtkCellArea*,struct _GtkCellAreaContext*);
     * }
     */
    public interface copy_context {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment path, java.lang.foreign.MemorySegment func_data);
        static MemorySegment allocate(copy_context fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2327.const$2, fi, constants$5.const$5, scope);
        }
        static copy_context ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _path, java.lang.foreign.MemorySegment _func_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$15.const$1.invokeExact(symbol, _path, _func_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle copy_context$VH() {
        return constants$2327.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkCellAreaContext* (*copy_context)(struct _GtkCellArea*,struct _GtkCellAreaContext*);
     * }
     */
    public static MemorySegment copy_context$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2327.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkCellAreaContext* (*copy_context)(struct _GtkCellArea*,struct _GtkCellAreaContext*);
     * }
     */
    public static void copy_context$set(MemorySegment seg, MemorySegment x) {
        constants$2327.const$3.set(seg, x);
    }
    public static MemorySegment copy_context$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2327.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void copy_context$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2327.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static copy_context copy_context(MemorySegment segment, Arena scope) {
        return copy_context.ofAddress(copy_context$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum GtkSizeRequestMode (*get_request_mode)(struct _GtkCellArea*);
     * }
     */
    public interface get_request_mode {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_request_mode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2327.const$4, fi, constants$10.const$5, scope);
        }
        static get_request_mode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_request_mode$VH() {
        return constants$2327.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GtkSizeRequestMode (*get_request_mode)(struct _GtkCellArea*);
     * }
     */
    public static MemorySegment get_request_mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2327.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GtkSizeRequestMode (*get_request_mode)(struct _GtkCellArea*);
     * }
     */
    public static void get_request_mode$set(MemorySegment seg, MemorySegment x) {
        constants$2327.const$5.set(seg, x);
    }
    public static MemorySegment get_request_mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2327.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_request_mode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2327.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_request_mode get_request_mode(MemorySegment segment, Arena scope) {
        return get_request_mode.ofAddress(get_request_mode$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_preferred_width)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int*,int*);
     * }
     */
    public interface get_preferred_width {

        void apply(java.lang.foreign.MemorySegment cell_layout, java.lang.foreign.MemorySegment cell, java.lang.foreign.MemorySegment tree_model, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_preferred_width fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2328.const$0, fi, constants$331.const$1, scope);
        }
        static get_preferred_width ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _cell_layout, java.lang.foreign.MemorySegment _cell, java.lang.foreign.MemorySegment _tree_model, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$916.const$3.invokeExact(symbol, _cell_layout, _cell, _tree_model, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_preferred_width$VH() {
        return constants$2328.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_width)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2328.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_width)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int*,int*);
     * }
     */
    public static void get_preferred_width$set(MemorySegment seg, MemorySegment x) {
        constants$2328.const$1.set(seg, x);
    }
    public static MemorySegment get_preferred_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2328.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2328.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width get_preferred_width(MemorySegment segment, Arena scope) {
        return get_preferred_width.ofAddress(get_preferred_width$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_preferred_height_for_width)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int,int*,int*);
     * }
     */
    public interface get_preferred_height_for_width {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(get_preferred_height_for_width fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2328.const$3, fi, constants$2328.const$2, scope);
        }
        static get_preferred_height_for_width ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$2328.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_preferred_height_for_width$VH() {
        return constants$2328.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_height_for_width)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_height_for_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2328.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_height_for_width)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int,int*,int*);
     * }
     */
    public static void get_preferred_height_for_width$set(MemorySegment seg, MemorySegment x) {
        constants$2328.const$5.set(seg, x);
    }
    public static MemorySegment get_preferred_height_for_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2328.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height_for_width$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2328.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height_for_width get_preferred_height_for_width(MemorySegment segment, Arena scope) {
        return get_preferred_height_for_width.ofAddress(get_preferred_height_for_width$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_preferred_height)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int*,int*);
     * }
     */
    public interface get_preferred_height {

        void apply(java.lang.foreign.MemorySegment cell_layout, java.lang.foreign.MemorySegment cell, java.lang.foreign.MemorySegment tree_model, java.lang.foreign.MemorySegment iter, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(get_preferred_height fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2329.const$0, fi, constants$331.const$1, scope);
        }
        static get_preferred_height ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _cell_layout, java.lang.foreign.MemorySegment _cell, java.lang.foreign.MemorySegment _tree_model, java.lang.foreign.MemorySegment _iter, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$916.const$3.invokeExact(symbol, _cell_layout, _cell, _tree_model, _iter, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_preferred_height$VH() {
        return constants$2329.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_height)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2329.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_height)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int*,int*);
     * }
     */
    public static void get_preferred_height$set(MemorySegment seg, MemorySegment x) {
        constants$2329.const$1.set(seg, x);
    }
    public static MemorySegment get_preferred_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2329.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2329.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height get_preferred_height(MemorySegment segment, Arena scope) {
        return get_preferred_height.ofAddress(get_preferred_height$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_preferred_width_for_height)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int,int*,int*);
     * }
     */
    public interface get_preferred_width_for_height {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(get_preferred_width_for_height fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2329.const$2, fi, constants$2328.const$2, scope);
        }
        static get_preferred_width_for_height ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$2328.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_preferred_width_for_height$VH() {
        return constants$2329.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_width_for_height)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_width_for_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2329.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_width_for_height)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,int,int*,int*);
     * }
     */
    public static void get_preferred_width_for_height$set(MemorySegment seg, MemorySegment x) {
        constants$2329.const$3.set(seg, x);
    }
    public static MemorySegment get_preferred_width_for_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2329.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width_for_height$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2329.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width_for_height get_preferred_width_for_height(MemorySegment segment, Arena scope) {
        return get_preferred_width_for_height.ofAddress(get_preferred_width_for_height$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*set_cell_property)(struct _GtkCellArea*,struct _GtkCellRenderer*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public interface set_cell_property {

        void apply(java.lang.foreign.MemorySegment funcs, java.lang.foreign.MemorySegment paint_data, int glyph, java.lang.foreign.MemorySegment font, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(set_cell_property fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2329.const$4, fi, constants$379.const$3, scope);
        }
        static set_cell_property ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _funcs, java.lang.foreign.MemorySegment _paint_data, int _glyph, java.lang.foreign.MemorySegment _font, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$1456.const$2.invokeExact(symbol, _funcs, _paint_data, _glyph, _font, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle set_cell_property$VH() {
        return constants$2329.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*set_cell_property)(struct _GtkCellArea*,struct _GtkCellRenderer*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public static MemorySegment set_cell_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2329.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*set_cell_property)(struct _GtkCellArea*,struct _GtkCellRenderer*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public static void set_cell_property$set(MemorySegment seg, MemorySegment x) {
        constants$2329.const$5.set(seg, x);
    }
    public static MemorySegment set_cell_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2329.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void set_cell_property$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2329.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static set_cell_property set_cell_property(MemorySegment segment, Arena scope) {
        return set_cell_property.ofAddress(set_cell_property$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_cell_property)(struct _GtkCellArea*,struct _GtkCellRenderer*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public interface get_cell_property {

        void apply(java.lang.foreign.MemorySegment funcs, java.lang.foreign.MemorySegment paint_data, int glyph, java.lang.foreign.MemorySegment font, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_cell_property fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2330.const$0, fi, constants$379.const$3, scope);
        }
        static get_cell_property ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _funcs, java.lang.foreign.MemorySegment _paint_data, int _glyph, java.lang.foreign.MemorySegment _font, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$1456.const$2.invokeExact(symbol, _funcs, _paint_data, _glyph, _font, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_cell_property$VH() {
        return constants$2330.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_cell_property)(struct _GtkCellArea*,struct _GtkCellRenderer*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public static MemorySegment get_cell_property$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2330.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_cell_property)(struct _GtkCellArea*,struct _GtkCellRenderer*,unsigned int,struct _GValue*,struct _GParamSpec*);
     * }
     */
    public static void get_cell_property$set(MemorySegment seg, MemorySegment x) {
        constants$2330.const$1.set(seg, x);
    }
    public static MemorySegment get_cell_property$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2330.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_cell_property$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2330.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_cell_property get_cell_property(MemorySegment segment, Arena scope) {
        return get_cell_property.ofAddress(get_cell_property$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*focus)(struct _GtkCellArea*,enum GtkDirectionType);
     * }
     */
    public interface focus {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(focus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2330.const$2, fi, constants$11.const$4, scope);
        }
        static focus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle focus$VH() {
        return constants$2330.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*focus)(struct _GtkCellArea*,enum GtkDirectionType);
     * }
     */
    public static MemorySegment focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2330.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*focus)(struct _GtkCellArea*,enum GtkDirectionType);
     * }
     */
    public static void focus$set(MemorySegment seg, MemorySegment x) {
        constants$2330.const$3.set(seg, x);
    }
    public static MemorySegment focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2330.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void focus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2330.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus focus(MemorySegment segment, Arena scope) {
        return focus.ofAddress(focus$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*is_activatable)(struct _GtkCellArea*);
     * }
     */
    public interface is_activatable {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(is_activatable fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2330.const$4, fi, constants$10.const$5, scope);
        }
        static is_activatable ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle is_activatable$VH() {
        return constants$2330.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*is_activatable)(struct _GtkCellArea*);
     * }
     */
    public static MemorySegment is_activatable$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2330.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*is_activatable)(struct _GtkCellArea*);
     * }
     */
    public static void is_activatable$set(MemorySegment seg, MemorySegment x) {
        constants$2330.const$5.set(seg, x);
    }
    public static MemorySegment is_activatable$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2330.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void is_activatable$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2330.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static is_activatable is_activatable(MemorySegment segment, Arena scope) {
        return is_activatable.ofAddress(is_activatable$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*activate)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo_rectangle_int*,enum GtkCellRendererState,int);
     * }
     */
    public interface activate {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, int _x4, int _x5);
        static MemorySegment allocate(activate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2331.const$1, fi, constants$2331.const$0, scope);
        }
        static activate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, int __x4, int __x5) -> {
                try {
                    return (int)constants$2331.const$2.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle activate$VH() {
        return constants$2331.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*activate)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo_rectangle_int*,enum GtkCellRendererState,int);
     * }
     */
    public static MemorySegment activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2331.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*activate)(struct _GtkCellArea*,struct _GtkCellAreaContext*,struct _GtkWidget*,struct _cairo_rectangle_int*,enum GtkCellRendererState,int);
     * }
     */
    public static void activate$set(MemorySegment seg, MemorySegment x) {
        constants$2331.const$3.set(seg, x);
    }
    public static MemorySegment activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2331.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void activate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2331.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static activate activate(MemorySegment segment, Arena scope) {
        return activate.ofAddress(activate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2331.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2331.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2331.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2331.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2331.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2331.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2332.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2332.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2332.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2332.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2332.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2332.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2332.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2332.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2332.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2332.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2332.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2332.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2332.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2332.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2332.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2332.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2332.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2332.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved5)();
     * }
     */
    public interface _gtk_reserved5 {

        void apply();
        static MemorySegment allocate(_gtk_reserved5 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2333.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved5 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved5$VH() {
        return constants$2333.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2333.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved5)();
     * }
     */
    public static void _gtk_reserved5$set(MemorySegment seg, MemorySegment x) {
        constants$2333.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved5$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2333.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved5$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2333.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved5 _gtk_reserved5(MemorySegment segment, Arena scope) {
        return _gtk_reserved5.ofAddress(_gtk_reserved5$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2333.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved6$VH() {
        return constants$2333.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2333.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$2333.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2333.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2333.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, Arena scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2333.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved7$VH() {
        return constants$2333.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2333.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$2333.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2333.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2333.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, Arena scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved8)();
     * }
     */
    public interface _gtk_reserved8 {

        void apply();
        static MemorySegment allocate(_gtk_reserved8 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2334.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved8 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved8$VH() {
        return constants$2334.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2334.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved8)();
     * }
     */
    public static void _gtk_reserved8$set(MemorySegment seg, MemorySegment x) {
        constants$2334.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved8$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2334.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved8$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2334.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved8 _gtk_reserved8(MemorySegment segment, Arena scope) {
        return _gtk_reserved8.ofAddress(_gtk_reserved8$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


