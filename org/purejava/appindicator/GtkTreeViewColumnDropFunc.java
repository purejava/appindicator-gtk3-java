// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * int (*GtkTreeViewColumnDropFunc)(struct _GtkTreeView* tree_view,struct _GtkTreeViewColumn* column,struct _GtkTreeViewColumn* prev_column,struct _GtkTreeViewColumn* next_column,void* data);
 * }
 */
public interface GtkTreeViewColumnDropFunc {

    int apply(java.lang.foreign.MemorySegment tree_view, java.lang.foreign.MemorySegment column, java.lang.foreign.MemorySegment prev_column, java.lang.foreign.MemorySegment next_column, java.lang.foreign.MemorySegment data);
    static MemorySegment allocate(GtkTreeViewColumnDropFunc fi, Arena scope) {
        return RuntimeHelper.upcallStub(constants$2474.const$0, fi, constants$165.const$2, scope);
    }
    static GtkTreeViewColumnDropFunc ofAddress(MemorySegment addr, Arena arena) {
        MemorySegment symbol = addr.reinterpret(arena, null);
        return (java.lang.foreign.MemorySegment _tree_view, java.lang.foreign.MemorySegment _column, java.lang.foreign.MemorySegment _prev_column, java.lang.foreign.MemorySegment _next_column, java.lang.foreign.MemorySegment _data) -> {
            try {
                return (int)constants$2086.const$3.invokeExact(symbol, _tree_view, _column, _prev_column, _next_column, _data);
            } catch (Throwable ex$) {
                throw new AssertionError("should not reach here", ex$);
            }
        };
    }
}


