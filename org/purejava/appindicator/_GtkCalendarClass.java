// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkCalendarClass {
 *     struct _GtkWidgetClass parent_class;
 *     void (*month_changed)(struct _GtkCalendar*);
 *     void (*day_selected)(struct _GtkCalendar*);
 *     void (*day_selected_double_click)(struct _GtkCalendar*);
 *     void (*prev_month)(struct _GtkCalendar*);
 *     void (*next_month)(struct _GtkCalendar*);
 *     void (*prev_year)(struct _GtkCalendar*);
 *     void (*next_year)(struct _GtkCalendar*);
 *     void (*_gtk_reserved1)();
 *     void (*_gtk_reserved2)();
 *     void (*_gtk_reserved3)();
 *     void (*_gtk_reserved4)();
 * };
 * }
 */
public class _GtkCalendarClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2558.const$3;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 824);
    }
    /**
     * {@snippet :
 * void (*month_changed)(struct _GtkCalendar*);
     * }
     */
    public interface month_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(month_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2558.const$4, fi, constants$13.const$1, scope);
        }
        static month_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle month_changed$VH() {
        return constants$2558.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*month_changed)(struct _GtkCalendar*);
     * }
     */
    public static MemorySegment month_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2558.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*month_changed)(struct _GtkCalendar*);
     * }
     */
    public static void month_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2558.const$5.set(seg, x);
    }
    public static MemorySegment month_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2558.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void month_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2558.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static month_changed month_changed(MemorySegment segment, Arena scope) {
        return month_changed.ofAddress(month_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*day_selected)(struct _GtkCalendar*);
     * }
     */
    public interface day_selected {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(day_selected fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2559.const$0, fi, constants$13.const$1, scope);
        }
        static day_selected ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle day_selected$VH() {
        return constants$2559.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*day_selected)(struct _GtkCalendar*);
     * }
     */
    public static MemorySegment day_selected$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2559.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*day_selected)(struct _GtkCalendar*);
     * }
     */
    public static void day_selected$set(MemorySegment seg, MemorySegment x) {
        constants$2559.const$1.set(seg, x);
    }
    public static MemorySegment day_selected$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2559.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void day_selected$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2559.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static day_selected day_selected(MemorySegment segment, Arena scope) {
        return day_selected.ofAddress(day_selected$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*day_selected_double_click)(struct _GtkCalendar*);
     * }
     */
    public interface day_selected_double_click {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(day_selected_double_click fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2559.const$2, fi, constants$13.const$1, scope);
        }
        static day_selected_double_click ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle day_selected_double_click$VH() {
        return constants$2559.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*day_selected_double_click)(struct _GtkCalendar*);
     * }
     */
    public static MemorySegment day_selected_double_click$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2559.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*day_selected_double_click)(struct _GtkCalendar*);
     * }
     */
    public static void day_selected_double_click$set(MemorySegment seg, MemorySegment x) {
        constants$2559.const$3.set(seg, x);
    }
    public static MemorySegment day_selected_double_click$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2559.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void day_selected_double_click$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2559.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static day_selected_double_click day_selected_double_click(MemorySegment segment, Arena scope) {
        return day_selected_double_click.ofAddress(day_selected_double_click$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*prev_month)(struct _GtkCalendar*);
     * }
     */
    public interface prev_month {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(prev_month fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2559.const$4, fi, constants$13.const$1, scope);
        }
        static prev_month ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle prev_month$VH() {
        return constants$2559.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*prev_month)(struct _GtkCalendar*);
     * }
     */
    public static MemorySegment prev_month$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2559.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*prev_month)(struct _GtkCalendar*);
     * }
     */
    public static void prev_month$set(MemorySegment seg, MemorySegment x) {
        constants$2559.const$5.set(seg, x);
    }
    public static MemorySegment prev_month$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2559.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void prev_month$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2559.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static prev_month prev_month(MemorySegment segment, Arena scope) {
        return prev_month.ofAddress(prev_month$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*next_month)(struct _GtkCalendar*);
     * }
     */
    public interface next_month {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(next_month fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2560.const$0, fi, constants$13.const$1, scope);
        }
        static next_month ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle next_month$VH() {
        return constants$2560.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*next_month)(struct _GtkCalendar*);
     * }
     */
    public static MemorySegment next_month$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2560.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*next_month)(struct _GtkCalendar*);
     * }
     */
    public static void next_month$set(MemorySegment seg, MemorySegment x) {
        constants$2560.const$1.set(seg, x);
    }
    public static MemorySegment next_month$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2560.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void next_month$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2560.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static next_month next_month(MemorySegment segment, Arena scope) {
        return next_month.ofAddress(next_month$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*prev_year)(struct _GtkCalendar*);
     * }
     */
    public interface prev_year {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(prev_year fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2560.const$2, fi, constants$13.const$1, scope);
        }
        static prev_year ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle prev_year$VH() {
        return constants$2560.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*prev_year)(struct _GtkCalendar*);
     * }
     */
    public static MemorySegment prev_year$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2560.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*prev_year)(struct _GtkCalendar*);
     * }
     */
    public static void prev_year$set(MemorySegment seg, MemorySegment x) {
        constants$2560.const$3.set(seg, x);
    }
    public static MemorySegment prev_year$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2560.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void prev_year$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2560.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static prev_year prev_year(MemorySegment segment, Arena scope) {
        return prev_year.ofAddress(prev_year$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*next_year)(struct _GtkCalendar*);
     * }
     */
    public interface next_year {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(next_year fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2560.const$4, fi, constants$13.const$1, scope);
        }
        static next_year ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle next_year$VH() {
        return constants$2560.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*next_year)(struct _GtkCalendar*);
     * }
     */
    public static MemorySegment next_year$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2560.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*next_year)(struct _GtkCalendar*);
     * }
     */
    public static void next_year$set(MemorySegment seg, MemorySegment x) {
        constants$2560.const$5.set(seg, x);
    }
    public static MemorySegment next_year$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2560.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void next_year$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2560.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static next_year next_year(MemorySegment segment, Arena scope) {
        return next_year.ofAddress(next_year$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved1)();
     * }
     */
    public interface _gtk_reserved1 {

        void apply();
        static MemorySegment allocate(_gtk_reserved1 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2561.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved1 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved1$VH() {
        return constants$2561.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2561.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved1)();
     * }
     */
    public static void _gtk_reserved1$set(MemorySegment seg, MemorySegment x) {
        constants$2561.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved1$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2561.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved1$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2561.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved1 _gtk_reserved1(MemorySegment segment, Arena scope) {
        return _gtk_reserved1.ofAddress(_gtk_reserved1$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved2)();
     * }
     */
    public interface _gtk_reserved2 {

        void apply();
        static MemorySegment allocate(_gtk_reserved2 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2561.const$2, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved2 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved2$VH() {
        return constants$2561.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2561.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved2)();
     * }
     */
    public static void _gtk_reserved2$set(MemorySegment seg, MemorySegment x) {
        constants$2561.const$3.set(seg, x);
    }
    public static MemorySegment _gtk_reserved2$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2561.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved2$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2561.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved2 _gtk_reserved2(MemorySegment segment, Arena scope) {
        return _gtk_reserved2.ofAddress(_gtk_reserved2$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved3)();
     * }
     */
    public interface _gtk_reserved3 {

        void apply();
        static MemorySegment allocate(_gtk_reserved3 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2561.const$4, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved3 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved3$VH() {
        return constants$2561.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2561.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved3)();
     * }
     */
    public static void _gtk_reserved3$set(MemorySegment seg, MemorySegment x) {
        constants$2561.const$5.set(seg, x);
    }
    public static MemorySegment _gtk_reserved3$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2561.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved3$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2561.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved3 _gtk_reserved3(MemorySegment segment, Arena scope) {
        return _gtk_reserved3.ofAddress(_gtk_reserved3$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved4)();
     * }
     */
    public interface _gtk_reserved4 {

        void apply();
        static MemorySegment allocate(_gtk_reserved4 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2562.const$0, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved4 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved4$VH() {
        return constants$2562.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2562.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved4)();
     * }
     */
    public static void _gtk_reserved4$set(MemorySegment seg, MemorySegment x) {
        constants$2562.const$1.set(seg, x);
    }
    public static MemorySegment _gtk_reserved4$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2562.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved4$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2562.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved4 _gtk_reserved4(MemorySegment segment, Arena scope) {
        return _gtk_reserved4.ofAddress(_gtk_reserved4$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


