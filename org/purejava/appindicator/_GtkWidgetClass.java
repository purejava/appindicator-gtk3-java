// Generated by jextract

package org.purejava.appindicator;

import java.lang.invoke.MethodHandle;
import java.lang.invoke.VarHandle;
import java.nio.ByteOrder;
import java.lang.foreign.*;
import static java.lang.foreign.ValueLayout.*;
/**
 * {@snippet :
 * struct _GtkWidgetClass {
 *     struct _GObjectClass parent_class;
 *     unsigned int activate_signal;
 *     void (*dispatch_child_properties_changed)(struct _GtkWidget*,unsigned int,struct _GParamSpec**);
 *     void (*destroy)(struct _GtkWidget*);
 *     void (*show)(struct _GtkWidget*);
 *     void (*show_all)(struct _GtkWidget*);
 *     void (*hide)(struct _GtkWidget*);
 *     void (*map)(struct _GtkWidget*);
 *     void (*unmap)(struct _GtkWidget*);
 *     void (*realize)(struct _GtkWidget*);
 *     void (*unrealize)(struct _GtkWidget*);
 *     void (*size_allocate)(struct _GtkWidget*,struct _cairo_rectangle_int*);
 *     void (*state_changed)(struct _GtkWidget*,enum GtkStateType);
 *     void (*state_flags_changed)(struct _GtkWidget*,enum GtkStateFlags);
 *     void (*parent_set)(struct _GtkWidget*,struct _GtkWidget*);
 *     void (*hierarchy_changed)(struct _GtkWidget*,struct _GtkWidget*);
 *     void (*style_set)(struct _GtkWidget*,struct _GtkStyle*);
 *     void (*direction_changed)(struct _GtkWidget*,enum GtkTextDirection);
 *     void (*grab_notify)(struct _GtkWidget*,int);
 *     void (*child_notify)(struct _GtkWidget*,struct _GParamSpec*);
 *     int (*draw)(struct _GtkWidget*,struct _cairo*);
 *     enum GtkSizeRequestMode (*get_request_mode)(struct _GtkWidget*);
 *     void (*get_preferred_height)(struct _GtkWidget*,int*,int*);
 *     void (*get_preferred_width_for_height)(struct _GtkWidget*,int,int*,int*);
 *     void (*get_preferred_width)(struct _GtkWidget*,int*,int*);
 *     void (*get_preferred_height_for_width)(struct _GtkWidget*,int,int*,int*);
 *     int (*mnemonic_activate)(struct _GtkWidget*,int);
 *     void (*grab_focus)(struct _GtkWidget*);
 *     int (*focus)(struct _GtkWidget*,enum GtkDirectionType);
 *     void (*move_focus)(struct _GtkWidget*,enum GtkDirectionType);
 *     int (*keynav_failed)(struct _GtkWidget*,enum GtkDirectionType);
 *     int (*event)(struct _GtkWidget*,union _GdkEvent*);
 *     int (*button_press_event)(struct _GtkWidget*,struct _GdkEventButton*);
 *     int (*button_release_event)(struct _GtkWidget*,struct _GdkEventButton*);
 *     int (*scroll_event)(struct _GtkWidget*,struct _GdkEventScroll*);
 *     int (*motion_notify_event)(struct _GtkWidget*,struct _GdkEventMotion*);
 *     int (*delete_event)(struct _GtkWidget*,struct _GdkEventAny*);
 *     int (*destroy_event)(struct _GtkWidget*,struct _GdkEventAny*);
 *     int (*key_press_event)(struct _GtkWidget*,struct _GdkEventKey*);
 *     int (*key_release_event)(struct _GtkWidget*,struct _GdkEventKey*);
 *     int (*enter_notify_event)(struct _GtkWidget*,struct _GdkEventCrossing*);
 *     int (*leave_notify_event)(struct _GtkWidget*,struct _GdkEventCrossing*);
 *     int (*configure_event)(struct _GtkWidget*,struct _GdkEventConfigure*);
 *     int (*focus_in_event)(struct _GtkWidget*,struct _GdkEventFocus*);
 *     int (*focus_out_event)(struct _GtkWidget*,struct _GdkEventFocus*);
 *     int (*map_event)(struct _GtkWidget*,struct _GdkEventAny*);
 *     int (*unmap_event)(struct _GtkWidget*,struct _GdkEventAny*);
 *     int (*property_notify_event)(struct _GtkWidget*,struct _GdkEventProperty*);
 *     int (*selection_clear_event)(struct _GtkWidget*,struct _GdkEventSelection*);
 *     int (*selection_request_event)(struct _GtkWidget*,struct _GdkEventSelection*);
 *     int (*selection_notify_event)(struct _GtkWidget*,struct _GdkEventSelection*);
 *     int (*proximity_in_event)(struct _GtkWidget*,struct _GdkEventProximity*);
 *     int (*proximity_out_event)(struct _GtkWidget*,struct _GdkEventProximity*);
 *     int (*visibility_notify_event)(struct _GtkWidget*,struct _GdkEventVisibility*);
 *     int (*window_state_event)(struct _GtkWidget*,struct _GdkEventWindowState*);
 *     int (*damage_event)(struct _GtkWidget*,struct _GdkEventExpose*);
 *     int (*grab_broken_event)(struct _GtkWidget*,struct _GdkEventGrabBroken*);
 *     void (*selection_get)(struct _GtkWidget*,struct _GtkSelectionData*,unsigned int,unsigned int);
 *     void (*selection_received)(struct _GtkWidget*,struct _GtkSelectionData*,unsigned int);
 *     void (*drag_begin)(struct _GtkWidget*,struct _GdkDragContext*);
 *     void (*drag_end)(struct _GtkWidget*,struct _GdkDragContext*);
 *     void (*drag_data_get)(struct _GtkWidget*,struct _GdkDragContext*,struct _GtkSelectionData*,unsigned int,unsigned int);
 *     void (*drag_data_delete)(struct _GtkWidget*,struct _GdkDragContext*);
 *     void (*drag_leave)(struct _GtkWidget*,struct _GdkDragContext*,unsigned int);
 *     int (*drag_motion)(struct _GtkWidget*,struct _GdkDragContext*,int,int,unsigned int);
 *     int (*drag_drop)(struct _GtkWidget*,struct _GdkDragContext*,int,int,unsigned int);
 *     void (*drag_data_received)(struct _GtkWidget*,struct _GdkDragContext*,int,int,struct _GtkSelectionData*,unsigned int,unsigned int);
 *     int (*drag_failed)(struct _GtkWidget*,struct _GdkDragContext*,enum GtkDragResult);
 *     int (*popup_menu)(struct _GtkWidget*);
 *     int (*show_help)(struct _GtkWidget*,enum GtkWidgetHelpType);
 *     struct _AtkObject* (*get_accessible)(struct _GtkWidget*);
 *     void (*screen_changed)(struct _GtkWidget*,struct _GdkScreen*);
 *     int (*can_activate_accel)(struct _GtkWidget*,unsigned int);
 *     void (*composited_changed)(struct _GtkWidget*);
 *     int (*query_tooltip)(struct _GtkWidget*,int,int,int,struct _GtkTooltip*);
 *     void (*compute_expand)(struct _GtkWidget*,int*,int*);
 *     void (*adjust_size_request)(struct _GtkWidget*,enum GtkOrientation,int*,int*);
 *     void (*adjust_size_allocation)(struct _GtkWidget*,enum GtkOrientation,int*,int*,int*,int*);
 *     void (*style_updated)(struct _GtkWidget*);
 *     int (*touch_event)(struct _GtkWidget*,struct _GdkEventTouch*);
 *     void (*get_preferred_height_and_baseline_for_width)(struct _GtkWidget*,int,int*,int*,int*,int*);
 *     void (*adjust_baseline_request)(struct _GtkWidget*,int*,int*);
 *     void (*adjust_baseline_allocation)(struct _GtkWidget*,int*);
 *     void (*queue_draw_region)(struct _GtkWidget*,struct _cairo_region*);
 *     struct _GtkWidgetClassPrivate* priv;
 *     void (*_gtk_reserved6)();
 *     void (*_gtk_reserved7)();
 * };
 * }
 */
public class _GtkWidgetClass {

    public static MemoryLayout $LAYOUT() {
        return constants$2095.const$5;
    }
    public static MemorySegment parent_class$slice(MemorySegment seg) {
        return seg.asSlice(0, 136);
    }
    public static VarHandle activate_signal$VH() {
        return constants$2096.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * unsigned int activate_signal;
     * }
     */
    public static int activate_signal$get(MemorySegment seg) {
        return (int)constants$2096.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * unsigned int activate_signal;
     * }
     */
    public static void activate_signal$set(MemorySegment seg, int x) {
        constants$2096.const$0.set(seg, x);
    }
    public static int activate_signal$get(MemorySegment seg, long index) {
        return (int)constants$2096.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void activate_signal$set(MemorySegment seg, long index, int x) {
        constants$2096.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*dispatch_child_properties_changed)(struct _GtkWidget*,unsigned int,struct _GParamSpec**);
     * }
     */
    public interface dispatch_child_properties_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2);
        static MemorySegment allocate(dispatch_child_properties_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2096.const$1, fi, constants$42.const$4, scope);
        }
        static dispatch_child_properties_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2) -> {
                try {
                    constants$625.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle dispatch_child_properties_changed$VH() {
        return constants$2096.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*dispatch_child_properties_changed)(struct _GtkWidget*,unsigned int,struct _GParamSpec**);
     * }
     */
    public static MemorySegment dispatch_child_properties_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2096.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*dispatch_child_properties_changed)(struct _GtkWidget*,unsigned int,struct _GParamSpec**);
     * }
     */
    public static void dispatch_child_properties_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2096.const$2.set(seg, x);
    }
    public static MemorySegment dispatch_child_properties_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2096.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void dispatch_child_properties_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2096.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static dispatch_child_properties_changed dispatch_child_properties_changed(MemorySegment segment, Arena scope) {
        return dispatch_child_properties_changed.ofAddress(dispatch_child_properties_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*destroy)(struct _GtkWidget*);
     * }
     */
    public interface destroy {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(destroy fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2096.const$3, fi, constants$13.const$1, scope);
        }
        static destroy ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle destroy$VH() {
        return constants$2096.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*destroy)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment destroy$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2096.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*destroy)(struct _GtkWidget*);
     * }
     */
    public static void destroy$set(MemorySegment seg, MemorySegment x) {
        constants$2096.const$4.set(seg, x);
    }
    public static MemorySegment destroy$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2096.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void destroy$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2096.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static destroy destroy(MemorySegment segment, Arena scope) {
        return destroy.ofAddress(destroy$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*show)(struct _GtkWidget*);
     * }
     */
    public interface show {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(show fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2096.const$5, fi, constants$13.const$1, scope);
        }
        static show ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle show$VH() {
        return constants$2097.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*show)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment show$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2097.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*show)(struct _GtkWidget*);
     * }
     */
    public static void show$set(MemorySegment seg, MemorySegment x) {
        constants$2097.const$0.set(seg, x);
    }
    public static MemorySegment show$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2097.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void show$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2097.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static show show(MemorySegment segment, Arena scope) {
        return show.ofAddress(show$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*show_all)(struct _GtkWidget*);
     * }
     */
    public interface show_all {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(show_all fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2097.const$1, fi, constants$13.const$1, scope);
        }
        static show_all ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle show_all$VH() {
        return constants$2097.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*show_all)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment show_all$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2097.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*show_all)(struct _GtkWidget*);
     * }
     */
    public static void show_all$set(MemorySegment seg, MemorySegment x) {
        constants$2097.const$2.set(seg, x);
    }
    public static MemorySegment show_all$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2097.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void show_all$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2097.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static show_all show_all(MemorySegment segment, Arena scope) {
        return show_all.ofAddress(show_all$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*hide)(struct _GtkWidget*);
     * }
     */
    public interface hide {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(hide fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2097.const$3, fi, constants$13.const$1, scope);
        }
        static hide ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle hide$VH() {
        return constants$2097.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*hide)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment hide$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2097.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*hide)(struct _GtkWidget*);
     * }
     */
    public static void hide$set(MemorySegment seg, MemorySegment x) {
        constants$2097.const$4.set(seg, x);
    }
    public static MemorySegment hide$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2097.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hide$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2097.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static hide hide(MemorySegment segment, Arena scope) {
        return hide.ofAddress(hide$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*map)(struct _GtkWidget*);
     * }
     */
    public interface map {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(map fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2097.const$5, fi, constants$13.const$1, scope);
        }
        static map ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle map$VH() {
        return constants$2098.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*map)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment map$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2098.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*map)(struct _GtkWidget*);
     * }
     */
    public static void map$set(MemorySegment seg, MemorySegment x) {
        constants$2098.const$0.set(seg, x);
    }
    public static MemorySegment map$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2098.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void map$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2098.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static map map(MemorySegment segment, Arena scope) {
        return map.ofAddress(map$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unmap)(struct _GtkWidget*);
     * }
     */
    public interface unmap {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(unmap fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2098.const$1, fi, constants$13.const$1, scope);
        }
        static unmap ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmap$VH() {
        return constants$2098.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unmap)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment unmap$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2098.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unmap)(struct _GtkWidget*);
     * }
     */
    public static void unmap$set(MemorySegment seg, MemorySegment x) {
        constants$2098.const$2.set(seg, x);
    }
    public static MemorySegment unmap$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2098.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void unmap$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2098.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmap unmap(MemorySegment segment, Arena scope) {
        return unmap.ofAddress(unmap$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*realize)(struct _GtkWidget*);
     * }
     */
    public interface realize {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(realize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2098.const$3, fi, constants$13.const$1, scope);
        }
        static realize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle realize$VH() {
        return constants$2098.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*realize)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment realize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2098.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*realize)(struct _GtkWidget*);
     * }
     */
    public static void realize$set(MemorySegment seg, MemorySegment x) {
        constants$2098.const$4.set(seg, x);
    }
    public static MemorySegment realize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2098.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void realize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2098.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static realize realize(MemorySegment segment, Arena scope) {
        return realize.ofAddress(realize$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*unrealize)(struct _GtkWidget*);
     * }
     */
    public interface unrealize {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(unrealize fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2098.const$5, fi, constants$13.const$1, scope);
        }
        static unrealize ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unrealize$VH() {
        return constants$2099.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*unrealize)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment unrealize$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2099.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*unrealize)(struct _GtkWidget*);
     * }
     */
    public static void unrealize$set(MemorySegment seg, MemorySegment x) {
        constants$2099.const$0.set(seg, x);
    }
    public static MemorySegment unrealize$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2099.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void unrealize$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2099.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static unrealize unrealize(MemorySegment segment, Arena scope) {
        return unrealize.ofAddress(unrealize$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*size_allocate)(struct _GtkWidget*,struct _cairo_rectangle_int*);
     * }
     */
    public interface size_allocate {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(size_allocate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2099.const$1, fi, constants$13.const$4, scope);
        }
        static size_allocate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle size_allocate$VH() {
        return constants$2099.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*size_allocate)(struct _GtkWidget*,struct _cairo_rectangle_int*);
     * }
     */
    public static MemorySegment size_allocate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2099.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*size_allocate)(struct _GtkWidget*,struct _cairo_rectangle_int*);
     * }
     */
    public static void size_allocate$set(MemorySegment seg, MemorySegment x) {
        constants$2099.const$2.set(seg, x);
    }
    public static MemorySegment size_allocate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2099.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void size_allocate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2099.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static size_allocate size_allocate(MemorySegment segment, Arena scope) {
        return size_allocate.ofAddress(size_allocate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*state_changed)(struct _GtkWidget*,enum GtkStateType);
     * }
     */
    public interface state_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(state_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2099.const$3, fi, constants$40.const$2, scope);
        }
        static state_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle state_changed$VH() {
        return constants$2099.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*state_changed)(struct _GtkWidget*,enum GtkStateType);
     * }
     */
    public static MemorySegment state_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2099.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*state_changed)(struct _GtkWidget*,enum GtkStateType);
     * }
     */
    public static void state_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2099.const$4.set(seg, x);
    }
    public static MemorySegment state_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2099.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void state_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2099.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static state_changed state_changed(MemorySegment segment, Arena scope) {
        return state_changed.ofAddress(state_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*state_flags_changed)(struct _GtkWidget*,enum GtkStateFlags);
     * }
     */
    public interface state_flags_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(state_flags_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2099.const$5, fi, constants$40.const$2, scope);
        }
        static state_flags_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle state_flags_changed$VH() {
        return constants$2100.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*state_flags_changed)(struct _GtkWidget*,enum GtkStateFlags);
     * }
     */
    public static MemorySegment state_flags_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2100.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*state_flags_changed)(struct _GtkWidget*,enum GtkStateFlags);
     * }
     */
    public static void state_flags_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2100.const$0.set(seg, x);
    }
    public static MemorySegment state_flags_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2100.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void state_flags_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2100.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static state_flags_changed state_flags_changed(MemorySegment segment, Arena scope) {
        return state_flags_changed.ofAddress(state_flags_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*parent_set)(struct _GtkWidget*,struct _GtkWidget*);
     * }
     */
    public interface parent_set {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(parent_set fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2100.const$1, fi, constants$13.const$4, scope);
        }
        static parent_set ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle parent_set$VH() {
        return constants$2100.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*parent_set)(struct _GtkWidget*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment parent_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2100.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*parent_set)(struct _GtkWidget*,struct _GtkWidget*);
     * }
     */
    public static void parent_set$set(MemorySegment seg, MemorySegment x) {
        constants$2100.const$2.set(seg, x);
    }
    public static MemorySegment parent_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2100.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void parent_set$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2100.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static parent_set parent_set(MemorySegment segment, Arena scope) {
        return parent_set.ofAddress(parent_set$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*hierarchy_changed)(struct _GtkWidget*,struct _GtkWidget*);
     * }
     */
    public interface hierarchy_changed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(hierarchy_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2100.const$3, fi, constants$13.const$4, scope);
        }
        static hierarchy_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle hierarchy_changed$VH() {
        return constants$2100.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*hierarchy_changed)(struct _GtkWidget*,struct _GtkWidget*);
     * }
     */
    public static MemorySegment hierarchy_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2100.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*hierarchy_changed)(struct _GtkWidget*,struct _GtkWidget*);
     * }
     */
    public static void hierarchy_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2100.const$4.set(seg, x);
    }
    public static MemorySegment hierarchy_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2100.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void hierarchy_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2100.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static hierarchy_changed hierarchy_changed(MemorySegment segment, Arena scope) {
        return hierarchy_changed.ofAddress(hierarchy_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*style_set)(struct _GtkWidget*,struct _GtkStyle*);
     * }
     */
    public interface style_set {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(style_set fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2100.const$5, fi, constants$13.const$4, scope);
        }
        static style_set ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle style_set$VH() {
        return constants$2101.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*style_set)(struct _GtkWidget*,struct _GtkStyle*);
     * }
     */
    public static MemorySegment style_set$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2101.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*style_set)(struct _GtkWidget*,struct _GtkStyle*);
     * }
     */
    public static void style_set$set(MemorySegment seg, MemorySegment x) {
        constants$2101.const$0.set(seg, x);
    }
    public static MemorySegment style_set$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2101.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void style_set$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2101.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static style_set style_set(MemorySegment segment, Arena scope) {
        return style_set.ofAddress(style_set$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*direction_changed)(struct _GtkWidget*,enum GtkTextDirection);
     * }
     */
    public interface direction_changed {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(direction_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2101.const$1, fi, constants$40.const$2, scope);
        }
        static direction_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle direction_changed$VH() {
        return constants$2101.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*direction_changed)(struct _GtkWidget*,enum GtkTextDirection);
     * }
     */
    public static MemorySegment direction_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2101.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*direction_changed)(struct _GtkWidget*,enum GtkTextDirection);
     * }
     */
    public static void direction_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2101.const$2.set(seg, x);
    }
    public static MemorySegment direction_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2101.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void direction_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2101.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static direction_changed direction_changed(MemorySegment segment, Arena scope) {
        return direction_changed.ofAddress(direction_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*grab_notify)(struct _GtkWidget*,int);
     * }
     */
    public interface grab_notify {

        void apply(java.lang.foreign.MemorySegment colors, int n_colors);
        static MemorySegment allocate(grab_notify fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2101.const$3, fi, constants$40.const$2, scope);
        }
        static grab_notify ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _colors, int _n_colors) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, _colors, _n_colors);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle grab_notify$VH() {
        return constants$2101.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*grab_notify)(struct _GtkWidget*,int);
     * }
     */
    public static MemorySegment grab_notify$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2101.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*grab_notify)(struct _GtkWidget*,int);
     * }
     */
    public static void grab_notify$set(MemorySegment seg, MemorySegment x) {
        constants$2101.const$4.set(seg, x);
    }
    public static MemorySegment grab_notify$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2101.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void grab_notify$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2101.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static grab_notify grab_notify(MemorySegment segment, Arena scope) {
        return grab_notify.ofAddress(grab_notify$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*child_notify)(struct _GtkWidget*,struct _GParamSpec*);
     * }
     */
    public interface child_notify {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(child_notify fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2101.const$5, fi, constants$13.const$4, scope);
        }
        static child_notify ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle child_notify$VH() {
        return constants$2102.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*child_notify)(struct _GtkWidget*,struct _GParamSpec*);
     * }
     */
    public static MemorySegment child_notify$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2102.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*child_notify)(struct _GtkWidget*,struct _GParamSpec*);
     * }
     */
    public static void child_notify$set(MemorySegment seg, MemorySegment x) {
        constants$2102.const$0.set(seg, x);
    }
    public static MemorySegment child_notify$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2102.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void child_notify$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2102.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static child_notify child_notify(MemorySegment segment, Arena scope) {
        return child_notify.ofAddress(child_notify$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*draw)(struct _GtkWidget*,struct _cairo*);
     * }
     */
    public interface draw {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(draw fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2102.const$1, fi, constants$9.const$0, scope);
        }
        static draw ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle draw$VH() {
        return constants$2102.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*draw)(struct _GtkWidget*,struct _cairo*);
     * }
     */
    public static MemorySegment draw$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2102.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*draw)(struct _GtkWidget*,struct _cairo*);
     * }
     */
    public static void draw$set(MemorySegment seg, MemorySegment x) {
        constants$2102.const$2.set(seg, x);
    }
    public static MemorySegment draw$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2102.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void draw$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2102.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static draw draw(MemorySegment segment, Arena scope) {
        return draw.ofAddress(draw$get(segment), scope);
    }
    /**
     * {@snippet :
 * enum GtkSizeRequestMode (*get_request_mode)(struct _GtkWidget*);
     * }
     */
    public interface get_request_mode {

        int apply(java.lang.foreign.MemorySegment _x0);
        static MemorySegment allocate(get_request_mode fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2102.const$3, fi, constants$10.const$5, scope);
        }
        static get_request_mode ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, __x0);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_request_mode$VH() {
        return constants$2102.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * enum GtkSizeRequestMode (*get_request_mode)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment get_request_mode$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2102.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * enum GtkSizeRequestMode (*get_request_mode)(struct _GtkWidget*);
     * }
     */
    public static void get_request_mode$set(MemorySegment seg, MemorySegment x) {
        constants$2102.const$4.set(seg, x);
    }
    public static MemorySegment get_request_mode$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2102.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_request_mode$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2102.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_request_mode get_request_mode(MemorySegment segment, Arena scope) {
        return get_request_mode.ofAddress(get_request_mode$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_preferred_height)(struct _GtkWidget*,int*,int*);
     * }
     */
    public interface get_preferred_height {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_preferred_height fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2102.const$5, fi, constants$14.const$3, scope);
        }
        static get_preferred_height ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_preferred_height$VH() {
        return constants$2103.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_height)(struct _GtkWidget*,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2103.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_height)(struct _GtkWidget*,int*,int*);
     * }
     */
    public static void get_preferred_height$set(MemorySegment seg, MemorySegment x) {
        constants$2103.const$0.set(seg, x);
    }
    public static MemorySegment get_preferred_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2103.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2103.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height get_preferred_height(MemorySegment segment, Arena scope) {
        return get_preferred_height.ofAddress(get_preferred_height$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_preferred_width_for_height)(struct _GtkWidget*,int,int*,int*);
     * }
     */
    public interface get_preferred_width_for_height {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(get_preferred_width_for_height fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2103.const$1, fi, constants$179.const$1, scope);
        }
        static get_preferred_width_for_height ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$372.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_preferred_width_for_height$VH() {
        return constants$2103.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_width_for_height)(struct _GtkWidget*,int,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_width_for_height$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2103.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_width_for_height)(struct _GtkWidget*,int,int*,int*);
     * }
     */
    public static void get_preferred_width_for_height$set(MemorySegment seg, MemorySegment x) {
        constants$2103.const$2.set(seg, x);
    }
    public static MemorySegment get_preferred_width_for_height$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2103.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width_for_height$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2103.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width_for_height get_preferred_width_for_height(MemorySegment segment, Arena scope) {
        return get_preferred_width_for_height.ofAddress(get_preferred_width_for_height$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_preferred_width)(struct _GtkWidget*,int*,int*);
     * }
     */
    public interface get_preferred_width {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_preferred_width fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2103.const$3, fi, constants$14.const$3, scope);
        }
        static get_preferred_width ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_preferred_width$VH() {
        return constants$2103.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_width)(struct _GtkWidget*,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2103.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_width)(struct _GtkWidget*,int*,int*);
     * }
     */
    public static void get_preferred_width$set(MemorySegment seg, MemorySegment x) {
        constants$2103.const$4.set(seg, x);
    }
    public static MemorySegment get_preferred_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2103.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_width$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2103.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_width get_preferred_width(MemorySegment segment, Arena scope) {
        return get_preferred_width.ofAddress(get_preferred_width$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_preferred_height_for_width)(struct _GtkWidget*,int,int*,int*);
     * }
     */
    public interface get_preferred_height_for_width {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(get_preferred_height_for_width fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2103.const$5, fi, constants$179.const$1, scope);
        }
        static get_preferred_height_for_width ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$372.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_preferred_height_for_width$VH() {
        return constants$2104.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_height_for_width)(struct _GtkWidget*,int,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_height_for_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2104.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_height_for_width)(struct _GtkWidget*,int,int*,int*);
     * }
     */
    public static void get_preferred_height_for_width$set(MemorySegment seg, MemorySegment x) {
        constants$2104.const$0.set(seg, x);
    }
    public static MemorySegment get_preferred_height_for_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2104.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height_for_width$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2104.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height_for_width get_preferred_height_for_width(MemorySegment segment, Arena scope) {
        return get_preferred_height_for_width.ofAddress(get_preferred_height_for_width$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*mnemonic_activate)(struct _GtkWidget*,int);
     * }
     */
    public interface mnemonic_activate {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(mnemonic_activate fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2104.const$1, fi, constants$11.const$4, scope);
        }
        static mnemonic_activate ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle mnemonic_activate$VH() {
        return constants$2104.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*mnemonic_activate)(struct _GtkWidget*,int);
     * }
     */
    public static MemorySegment mnemonic_activate$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2104.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*mnemonic_activate)(struct _GtkWidget*,int);
     * }
     */
    public static void mnemonic_activate$set(MemorySegment seg, MemorySegment x) {
        constants$2104.const$2.set(seg, x);
    }
    public static MemorySegment mnemonic_activate$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2104.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void mnemonic_activate$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2104.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static mnemonic_activate mnemonic_activate(MemorySegment segment, Arena scope) {
        return mnemonic_activate.ofAddress(mnemonic_activate$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*grab_focus)(struct _GtkWidget*);
     * }
     */
    public interface grab_focus {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(grab_focus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2104.const$3, fi, constants$13.const$1, scope);
        }
        static grab_focus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle grab_focus$VH() {
        return constants$2104.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*grab_focus)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment grab_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2104.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*grab_focus)(struct _GtkWidget*);
     * }
     */
    public static void grab_focus$set(MemorySegment seg, MemorySegment x) {
        constants$2104.const$4.set(seg, x);
    }
    public static MemorySegment grab_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2104.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void grab_focus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2104.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static grab_focus grab_focus(MemorySegment segment, Arena scope) {
        return grab_focus.ofAddress(grab_focus$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*focus)(struct _GtkWidget*,enum GtkDirectionType);
     * }
     */
    public interface focus {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(focus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2104.const$5, fi, constants$11.const$4, scope);
        }
        static focus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle focus$VH() {
        return constants$2105.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*focus)(struct _GtkWidget*,enum GtkDirectionType);
     * }
     */
    public static MemorySegment focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2105.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*focus)(struct _GtkWidget*,enum GtkDirectionType);
     * }
     */
    public static void focus$set(MemorySegment seg, MemorySegment x) {
        constants$2105.const$0.set(seg, x);
    }
    public static MemorySegment focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2105.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void focus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2105.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus focus(MemorySegment segment, Arena scope) {
        return focus.ofAddress(focus$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*move_focus)(struct _GtkWidget*,enum GtkDirectionType);
     * }
     */
    public interface move_focus {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(move_focus fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2105.const$1, fi, constants$40.const$2, scope);
        }
        static move_focus ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    constants$509.const$5.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle move_focus$VH() {
        return constants$2105.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*move_focus)(struct _GtkWidget*,enum GtkDirectionType);
     * }
     */
    public static MemorySegment move_focus$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2105.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*move_focus)(struct _GtkWidget*,enum GtkDirectionType);
     * }
     */
    public static void move_focus$set(MemorySegment seg, MemorySegment x) {
        constants$2105.const$2.set(seg, x);
    }
    public static MemorySegment move_focus$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2105.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void move_focus$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2105.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static move_focus move_focus(MemorySegment segment, Arena scope) {
        return move_focus.ofAddress(move_focus$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*keynav_failed)(struct _GtkWidget*,enum GtkDirectionType);
     * }
     */
    public interface keynav_failed {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(keynav_failed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2105.const$3, fi, constants$11.const$4, scope);
        }
        static keynav_failed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle keynav_failed$VH() {
        return constants$2105.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*keynav_failed)(struct _GtkWidget*,enum GtkDirectionType);
     * }
     */
    public static MemorySegment keynav_failed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2105.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*keynav_failed)(struct _GtkWidget*,enum GtkDirectionType);
     * }
     */
    public static void keynav_failed$set(MemorySegment seg, MemorySegment x) {
        constants$2105.const$4.set(seg, x);
    }
    public static MemorySegment keynav_failed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2105.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void keynav_failed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2105.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static keynav_failed keynav_failed(MemorySegment segment, Arena scope) {
        return keynav_failed.ofAddress(keynav_failed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*event)(struct _GtkWidget*,union _GdkEvent*);
     * }
     */
    public interface event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2105.const$5, fi, constants$9.const$0, scope);
        }
        static event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle event$VH() {
        return constants$2106.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*event)(struct _GtkWidget*,union _GdkEvent*);
     * }
     */
    public static MemorySegment event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2106.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*event)(struct _GtkWidget*,union _GdkEvent*);
     * }
     */
    public static void event$set(MemorySegment seg, MemorySegment x) {
        constants$2106.const$0.set(seg, x);
    }
    public static MemorySegment event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2106.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2106.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static event event(MemorySegment segment, Arena scope) {
        return event.ofAddress(event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*button_press_event)(struct _GtkWidget*,struct _GdkEventButton*);
     * }
     */
    public interface button_press_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(button_press_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2106.const$1, fi, constants$9.const$0, scope);
        }
        static button_press_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle button_press_event$VH() {
        return constants$2106.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*button_press_event)(struct _GtkWidget*,struct _GdkEventButton*);
     * }
     */
    public static MemorySegment button_press_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2106.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*button_press_event)(struct _GtkWidget*,struct _GdkEventButton*);
     * }
     */
    public static void button_press_event$set(MemorySegment seg, MemorySegment x) {
        constants$2106.const$2.set(seg, x);
    }
    public static MemorySegment button_press_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2106.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void button_press_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2106.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static button_press_event button_press_event(MemorySegment segment, Arena scope) {
        return button_press_event.ofAddress(button_press_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*button_release_event)(struct _GtkWidget*,struct _GdkEventButton*);
     * }
     */
    public interface button_release_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(button_release_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2106.const$3, fi, constants$9.const$0, scope);
        }
        static button_release_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle button_release_event$VH() {
        return constants$2106.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*button_release_event)(struct _GtkWidget*,struct _GdkEventButton*);
     * }
     */
    public static MemorySegment button_release_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2106.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*button_release_event)(struct _GtkWidget*,struct _GdkEventButton*);
     * }
     */
    public static void button_release_event$set(MemorySegment seg, MemorySegment x) {
        constants$2106.const$4.set(seg, x);
    }
    public static MemorySegment button_release_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2106.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void button_release_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2106.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static button_release_event button_release_event(MemorySegment segment, Arena scope) {
        return button_release_event.ofAddress(button_release_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*scroll_event)(struct _GtkWidget*,struct _GdkEventScroll*);
     * }
     */
    public interface scroll_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(scroll_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2106.const$5, fi, constants$9.const$0, scope);
        }
        static scroll_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle scroll_event$VH() {
        return constants$2107.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*scroll_event)(struct _GtkWidget*,struct _GdkEventScroll*);
     * }
     */
    public static MemorySegment scroll_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2107.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*scroll_event)(struct _GtkWidget*,struct _GdkEventScroll*);
     * }
     */
    public static void scroll_event$set(MemorySegment seg, MemorySegment x) {
        constants$2107.const$0.set(seg, x);
    }
    public static MemorySegment scroll_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2107.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void scroll_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2107.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static scroll_event scroll_event(MemorySegment segment, Arena scope) {
        return scroll_event.ofAddress(scroll_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*motion_notify_event)(struct _GtkWidget*,struct _GdkEventMotion*);
     * }
     */
    public interface motion_notify_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(motion_notify_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2107.const$1, fi, constants$9.const$0, scope);
        }
        static motion_notify_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle motion_notify_event$VH() {
        return constants$2107.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*motion_notify_event)(struct _GtkWidget*,struct _GdkEventMotion*);
     * }
     */
    public static MemorySegment motion_notify_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2107.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*motion_notify_event)(struct _GtkWidget*,struct _GdkEventMotion*);
     * }
     */
    public static void motion_notify_event$set(MemorySegment seg, MemorySegment x) {
        constants$2107.const$2.set(seg, x);
    }
    public static MemorySegment motion_notify_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2107.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void motion_notify_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2107.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static motion_notify_event motion_notify_event(MemorySegment segment, Arena scope) {
        return motion_notify_event.ofAddress(motion_notify_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*delete_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public interface delete_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(delete_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2107.const$3, fi, constants$9.const$0, scope);
        }
        static delete_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle delete_event$VH() {
        return constants$2107.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*delete_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public static MemorySegment delete_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2107.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*delete_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public static void delete_event$set(MemorySegment seg, MemorySegment x) {
        constants$2107.const$4.set(seg, x);
    }
    public static MemorySegment delete_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2107.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void delete_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2107.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static delete_event delete_event(MemorySegment segment, Arena scope) {
        return delete_event.ofAddress(delete_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*destroy_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public interface destroy_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(destroy_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2107.const$5, fi, constants$9.const$0, scope);
        }
        static destroy_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle destroy_event$VH() {
        return constants$2108.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*destroy_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public static MemorySegment destroy_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2108.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*destroy_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public static void destroy_event$set(MemorySegment seg, MemorySegment x) {
        constants$2108.const$0.set(seg, x);
    }
    public static MemorySegment destroy_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2108.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void destroy_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2108.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static destroy_event destroy_event(MemorySegment segment, Arena scope) {
        return destroy_event.ofAddress(destroy_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*key_press_event)(struct _GtkWidget*,struct _GdkEventKey*);
     * }
     */
    public interface key_press_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(key_press_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2108.const$1, fi, constants$9.const$0, scope);
        }
        static key_press_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle key_press_event$VH() {
        return constants$2108.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*key_press_event)(struct _GtkWidget*,struct _GdkEventKey*);
     * }
     */
    public static MemorySegment key_press_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2108.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*key_press_event)(struct _GtkWidget*,struct _GdkEventKey*);
     * }
     */
    public static void key_press_event$set(MemorySegment seg, MemorySegment x) {
        constants$2108.const$2.set(seg, x);
    }
    public static MemorySegment key_press_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2108.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void key_press_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2108.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static key_press_event key_press_event(MemorySegment segment, Arena scope) {
        return key_press_event.ofAddress(key_press_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*key_release_event)(struct _GtkWidget*,struct _GdkEventKey*);
     * }
     */
    public interface key_release_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(key_release_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2108.const$3, fi, constants$9.const$0, scope);
        }
        static key_release_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle key_release_event$VH() {
        return constants$2108.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*key_release_event)(struct _GtkWidget*,struct _GdkEventKey*);
     * }
     */
    public static MemorySegment key_release_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2108.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*key_release_event)(struct _GtkWidget*,struct _GdkEventKey*);
     * }
     */
    public static void key_release_event$set(MemorySegment seg, MemorySegment x) {
        constants$2108.const$4.set(seg, x);
    }
    public static MemorySegment key_release_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2108.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void key_release_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2108.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static key_release_event key_release_event(MemorySegment segment, Arena scope) {
        return key_release_event.ofAddress(key_release_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*enter_notify_event)(struct _GtkWidget*,struct _GdkEventCrossing*);
     * }
     */
    public interface enter_notify_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(enter_notify_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2108.const$5, fi, constants$9.const$0, scope);
        }
        static enter_notify_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle enter_notify_event$VH() {
        return constants$2109.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*enter_notify_event)(struct _GtkWidget*,struct _GdkEventCrossing*);
     * }
     */
    public static MemorySegment enter_notify_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2109.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*enter_notify_event)(struct _GtkWidget*,struct _GdkEventCrossing*);
     * }
     */
    public static void enter_notify_event$set(MemorySegment seg, MemorySegment x) {
        constants$2109.const$0.set(seg, x);
    }
    public static MemorySegment enter_notify_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2109.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void enter_notify_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2109.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static enter_notify_event enter_notify_event(MemorySegment segment, Arena scope) {
        return enter_notify_event.ofAddress(enter_notify_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*leave_notify_event)(struct _GtkWidget*,struct _GdkEventCrossing*);
     * }
     */
    public interface leave_notify_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(leave_notify_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2109.const$1, fi, constants$9.const$0, scope);
        }
        static leave_notify_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle leave_notify_event$VH() {
        return constants$2109.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*leave_notify_event)(struct _GtkWidget*,struct _GdkEventCrossing*);
     * }
     */
    public static MemorySegment leave_notify_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2109.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*leave_notify_event)(struct _GtkWidget*,struct _GdkEventCrossing*);
     * }
     */
    public static void leave_notify_event$set(MemorySegment seg, MemorySegment x) {
        constants$2109.const$2.set(seg, x);
    }
    public static MemorySegment leave_notify_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2109.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void leave_notify_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2109.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static leave_notify_event leave_notify_event(MemorySegment segment, Arena scope) {
        return leave_notify_event.ofAddress(leave_notify_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*configure_event)(struct _GtkWidget*,struct _GdkEventConfigure*);
     * }
     */
    public interface configure_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(configure_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2109.const$3, fi, constants$9.const$0, scope);
        }
        static configure_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle configure_event$VH() {
        return constants$2109.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*configure_event)(struct _GtkWidget*,struct _GdkEventConfigure*);
     * }
     */
    public static MemorySegment configure_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2109.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*configure_event)(struct _GtkWidget*,struct _GdkEventConfigure*);
     * }
     */
    public static void configure_event$set(MemorySegment seg, MemorySegment x) {
        constants$2109.const$4.set(seg, x);
    }
    public static MemorySegment configure_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2109.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void configure_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2109.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static configure_event configure_event(MemorySegment segment, Arena scope) {
        return configure_event.ofAddress(configure_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*focus_in_event)(struct _GtkWidget*,struct _GdkEventFocus*);
     * }
     */
    public interface focus_in_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(focus_in_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2109.const$5, fi, constants$9.const$0, scope);
        }
        static focus_in_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle focus_in_event$VH() {
        return constants$2110.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*focus_in_event)(struct _GtkWidget*,struct _GdkEventFocus*);
     * }
     */
    public static MemorySegment focus_in_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2110.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*focus_in_event)(struct _GtkWidget*,struct _GdkEventFocus*);
     * }
     */
    public static void focus_in_event$set(MemorySegment seg, MemorySegment x) {
        constants$2110.const$0.set(seg, x);
    }
    public static MemorySegment focus_in_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2110.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void focus_in_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2110.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus_in_event focus_in_event(MemorySegment segment, Arena scope) {
        return focus_in_event.ofAddress(focus_in_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*focus_out_event)(struct _GtkWidget*,struct _GdkEventFocus*);
     * }
     */
    public interface focus_out_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(focus_out_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2110.const$1, fi, constants$9.const$0, scope);
        }
        static focus_out_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle focus_out_event$VH() {
        return constants$2110.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*focus_out_event)(struct _GtkWidget*,struct _GdkEventFocus*);
     * }
     */
    public static MemorySegment focus_out_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2110.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*focus_out_event)(struct _GtkWidget*,struct _GdkEventFocus*);
     * }
     */
    public static void focus_out_event$set(MemorySegment seg, MemorySegment x) {
        constants$2110.const$2.set(seg, x);
    }
    public static MemorySegment focus_out_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2110.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void focus_out_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2110.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static focus_out_event focus_out_event(MemorySegment segment, Arena scope) {
        return focus_out_event.ofAddress(focus_out_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*map_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public interface map_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(map_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2110.const$3, fi, constants$9.const$0, scope);
        }
        static map_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle map_event$VH() {
        return constants$2110.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*map_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public static MemorySegment map_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2110.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*map_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public static void map_event$set(MemorySegment seg, MemorySegment x) {
        constants$2110.const$4.set(seg, x);
    }
    public static MemorySegment map_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2110.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void map_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2110.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static map_event map_event(MemorySegment segment, Arena scope) {
        return map_event.ofAddress(map_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*unmap_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public interface unmap_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(unmap_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2110.const$5, fi, constants$9.const$0, scope);
        }
        static unmap_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle unmap_event$VH() {
        return constants$2111.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*unmap_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public static MemorySegment unmap_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2111.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*unmap_event)(struct _GtkWidget*,struct _GdkEventAny*);
     * }
     */
    public static void unmap_event$set(MemorySegment seg, MemorySegment x) {
        constants$2111.const$0.set(seg, x);
    }
    public static MemorySegment unmap_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2111.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void unmap_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2111.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static unmap_event unmap_event(MemorySegment segment, Arena scope) {
        return unmap_event.ofAddress(unmap_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*property_notify_event)(struct _GtkWidget*,struct _GdkEventProperty*);
     * }
     */
    public interface property_notify_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(property_notify_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2111.const$1, fi, constants$9.const$0, scope);
        }
        static property_notify_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle property_notify_event$VH() {
        return constants$2111.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*property_notify_event)(struct _GtkWidget*,struct _GdkEventProperty*);
     * }
     */
    public static MemorySegment property_notify_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2111.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*property_notify_event)(struct _GtkWidget*,struct _GdkEventProperty*);
     * }
     */
    public static void property_notify_event$set(MemorySegment seg, MemorySegment x) {
        constants$2111.const$2.set(seg, x);
    }
    public static MemorySegment property_notify_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2111.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void property_notify_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2111.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static property_notify_event property_notify_event(MemorySegment segment, Arena scope) {
        return property_notify_event.ofAddress(property_notify_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*selection_clear_event)(struct _GtkWidget*,struct _GdkEventSelection*);
     * }
     */
    public interface selection_clear_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(selection_clear_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2111.const$3, fi, constants$9.const$0, scope);
        }
        static selection_clear_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selection_clear_event$VH() {
        return constants$2111.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*selection_clear_event)(struct _GtkWidget*,struct _GdkEventSelection*);
     * }
     */
    public static MemorySegment selection_clear_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2111.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*selection_clear_event)(struct _GtkWidget*,struct _GdkEventSelection*);
     * }
     */
    public static void selection_clear_event$set(MemorySegment seg, MemorySegment x) {
        constants$2111.const$4.set(seg, x);
    }
    public static MemorySegment selection_clear_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2111.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void selection_clear_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2111.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static selection_clear_event selection_clear_event(MemorySegment segment, Arena scope) {
        return selection_clear_event.ofAddress(selection_clear_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*selection_request_event)(struct _GtkWidget*,struct _GdkEventSelection*);
     * }
     */
    public interface selection_request_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(selection_request_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2111.const$5, fi, constants$9.const$0, scope);
        }
        static selection_request_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selection_request_event$VH() {
        return constants$2112.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*selection_request_event)(struct _GtkWidget*,struct _GdkEventSelection*);
     * }
     */
    public static MemorySegment selection_request_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2112.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*selection_request_event)(struct _GtkWidget*,struct _GdkEventSelection*);
     * }
     */
    public static void selection_request_event$set(MemorySegment seg, MemorySegment x) {
        constants$2112.const$0.set(seg, x);
    }
    public static MemorySegment selection_request_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2112.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void selection_request_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2112.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static selection_request_event selection_request_event(MemorySegment segment, Arena scope) {
        return selection_request_event.ofAddress(selection_request_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*selection_notify_event)(struct _GtkWidget*,struct _GdkEventSelection*);
     * }
     */
    public interface selection_notify_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(selection_notify_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2112.const$1, fi, constants$9.const$0, scope);
        }
        static selection_notify_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selection_notify_event$VH() {
        return constants$2112.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*selection_notify_event)(struct _GtkWidget*,struct _GdkEventSelection*);
     * }
     */
    public static MemorySegment selection_notify_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2112.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*selection_notify_event)(struct _GtkWidget*,struct _GdkEventSelection*);
     * }
     */
    public static void selection_notify_event$set(MemorySegment seg, MemorySegment x) {
        constants$2112.const$2.set(seg, x);
    }
    public static MemorySegment selection_notify_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2112.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void selection_notify_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2112.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static selection_notify_event selection_notify_event(MemorySegment segment, Arena scope) {
        return selection_notify_event.ofAddress(selection_notify_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*proximity_in_event)(struct _GtkWidget*,struct _GdkEventProximity*);
     * }
     */
    public interface proximity_in_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(proximity_in_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2112.const$3, fi, constants$9.const$0, scope);
        }
        static proximity_in_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle proximity_in_event$VH() {
        return constants$2112.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*proximity_in_event)(struct _GtkWidget*,struct _GdkEventProximity*);
     * }
     */
    public static MemorySegment proximity_in_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2112.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*proximity_in_event)(struct _GtkWidget*,struct _GdkEventProximity*);
     * }
     */
    public static void proximity_in_event$set(MemorySegment seg, MemorySegment x) {
        constants$2112.const$4.set(seg, x);
    }
    public static MemorySegment proximity_in_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2112.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void proximity_in_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2112.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static proximity_in_event proximity_in_event(MemorySegment segment, Arena scope) {
        return proximity_in_event.ofAddress(proximity_in_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*proximity_out_event)(struct _GtkWidget*,struct _GdkEventProximity*);
     * }
     */
    public interface proximity_out_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(proximity_out_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2112.const$5, fi, constants$9.const$0, scope);
        }
        static proximity_out_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle proximity_out_event$VH() {
        return constants$2113.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*proximity_out_event)(struct _GtkWidget*,struct _GdkEventProximity*);
     * }
     */
    public static MemorySegment proximity_out_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2113.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*proximity_out_event)(struct _GtkWidget*,struct _GdkEventProximity*);
     * }
     */
    public static void proximity_out_event$set(MemorySegment seg, MemorySegment x) {
        constants$2113.const$0.set(seg, x);
    }
    public static MemorySegment proximity_out_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2113.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void proximity_out_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2113.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static proximity_out_event proximity_out_event(MemorySegment segment, Arena scope) {
        return proximity_out_event.ofAddress(proximity_out_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*visibility_notify_event)(struct _GtkWidget*,struct _GdkEventVisibility*);
     * }
     */
    public interface visibility_notify_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(visibility_notify_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2113.const$1, fi, constants$9.const$0, scope);
        }
        static visibility_notify_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle visibility_notify_event$VH() {
        return constants$2113.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*visibility_notify_event)(struct _GtkWidget*,struct _GdkEventVisibility*);
     * }
     */
    public static MemorySegment visibility_notify_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2113.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*visibility_notify_event)(struct _GtkWidget*,struct _GdkEventVisibility*);
     * }
     */
    public static void visibility_notify_event$set(MemorySegment seg, MemorySegment x) {
        constants$2113.const$2.set(seg, x);
    }
    public static MemorySegment visibility_notify_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2113.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void visibility_notify_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2113.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static visibility_notify_event visibility_notify_event(MemorySegment segment, Arena scope) {
        return visibility_notify_event.ofAddress(visibility_notify_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*window_state_event)(struct _GtkWidget*,struct _GdkEventWindowState*);
     * }
     */
    public interface window_state_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(window_state_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2113.const$3, fi, constants$9.const$0, scope);
        }
        static window_state_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle window_state_event$VH() {
        return constants$2113.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*window_state_event)(struct _GtkWidget*,struct _GdkEventWindowState*);
     * }
     */
    public static MemorySegment window_state_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2113.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*window_state_event)(struct _GtkWidget*,struct _GdkEventWindowState*);
     * }
     */
    public static void window_state_event$set(MemorySegment seg, MemorySegment x) {
        constants$2113.const$4.set(seg, x);
    }
    public static MemorySegment window_state_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2113.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void window_state_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2113.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static window_state_event window_state_event(MemorySegment segment, Arena scope) {
        return window_state_event.ofAddress(window_state_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*damage_event)(struct _GtkWidget*,struct _GdkEventExpose*);
     * }
     */
    public interface damage_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(damage_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2113.const$5, fi, constants$9.const$0, scope);
        }
        static damage_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle damage_event$VH() {
        return constants$2114.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*damage_event)(struct _GtkWidget*,struct _GdkEventExpose*);
     * }
     */
    public static MemorySegment damage_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2114.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*damage_event)(struct _GtkWidget*,struct _GdkEventExpose*);
     * }
     */
    public static void damage_event$set(MemorySegment seg, MemorySegment x) {
        constants$2114.const$0.set(seg, x);
    }
    public static MemorySegment damage_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2114.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void damage_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2114.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static damage_event damage_event(MemorySegment segment, Arena scope) {
        return damage_event.ofAddress(damage_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*grab_broken_event)(struct _GtkWidget*,struct _GdkEventGrabBroken*);
     * }
     */
    public interface grab_broken_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(grab_broken_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2114.const$1, fi, constants$9.const$0, scope);
        }
        static grab_broken_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle grab_broken_event$VH() {
        return constants$2114.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*grab_broken_event)(struct _GtkWidget*,struct _GdkEventGrabBroken*);
     * }
     */
    public static MemorySegment grab_broken_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2114.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*grab_broken_event)(struct _GtkWidget*,struct _GdkEventGrabBroken*);
     * }
     */
    public static void grab_broken_event$set(MemorySegment seg, MemorySegment x) {
        constants$2114.const$2.set(seg, x);
    }
    public static MemorySegment grab_broken_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2114.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void grab_broken_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2114.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static grab_broken_event grab_broken_event(MemorySegment segment, Arena scope) {
        return grab_broken_event.ofAddress(grab_broken_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*selection_get)(struct _GtkWidget*,struct _GtkSelectionData*,unsigned int,unsigned int);
     * }
     */
    public interface selection_get {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3);
        static MemorySegment allocate(selection_get fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2114.const$3, fi, constants$1043.const$2, scope);
        }
        static selection_get ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3) -> {
                try {
                    constants$1644.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selection_get$VH() {
        return constants$2114.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*selection_get)(struct _GtkWidget*,struct _GtkSelectionData*,unsigned int,unsigned int);
     * }
     */
    public static MemorySegment selection_get$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2114.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*selection_get)(struct _GtkWidget*,struct _GtkSelectionData*,unsigned int,unsigned int);
     * }
     */
    public static void selection_get$set(MemorySegment seg, MemorySegment x) {
        constants$2114.const$4.set(seg, x);
    }
    public static MemorySegment selection_get$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2114.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void selection_get$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2114.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static selection_get selection_get(MemorySegment segment, Arena scope) {
        return selection_get.ofAddress(selection_get$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*selection_received)(struct _GtkWidget*,struct _GtkSelectionData*,unsigned int);
     * }
     */
    public interface selection_received {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(selection_received fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2114.const$5, fi, constants$164.const$5, scope);
        }
        static selection_received ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle selection_received$VH() {
        return constants$2115.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*selection_received)(struct _GtkWidget*,struct _GtkSelectionData*,unsigned int);
     * }
     */
    public static MemorySegment selection_received$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2115.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*selection_received)(struct _GtkWidget*,struct _GtkSelectionData*,unsigned int);
     * }
     */
    public static void selection_received$set(MemorySegment seg, MemorySegment x) {
        constants$2115.const$0.set(seg, x);
    }
    public static MemorySegment selection_received$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2115.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void selection_received$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2115.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static selection_received selection_received(MemorySegment segment, Arena scope) {
        return selection_received.ofAddress(selection_received$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drag_begin)(struct _GtkWidget*,struct _GdkDragContext*);
     * }
     */
    public interface drag_begin {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(drag_begin fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2115.const$1, fi, constants$13.const$4, scope);
        }
        static drag_begin ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_begin$VH() {
        return constants$2115.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drag_begin)(struct _GtkWidget*,struct _GdkDragContext*);
     * }
     */
    public static MemorySegment drag_begin$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2115.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drag_begin)(struct _GtkWidget*,struct _GdkDragContext*);
     * }
     */
    public static void drag_begin$set(MemorySegment seg, MemorySegment x) {
        constants$2115.const$2.set(seg, x);
    }
    public static MemorySegment drag_begin$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2115.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_begin$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2115.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_begin drag_begin(MemorySegment segment, Arena scope) {
        return drag_begin.ofAddress(drag_begin$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drag_end)(struct _GtkWidget*,struct _GdkDragContext*);
     * }
     */
    public interface drag_end {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(drag_end fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2115.const$3, fi, constants$13.const$4, scope);
        }
        static drag_end ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_end$VH() {
        return constants$2115.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drag_end)(struct _GtkWidget*,struct _GdkDragContext*);
     * }
     */
    public static MemorySegment drag_end$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2115.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drag_end)(struct _GtkWidget*,struct _GdkDragContext*);
     * }
     */
    public static void drag_end$set(MemorySegment seg, MemorySegment x) {
        constants$2115.const$4.set(seg, x);
    }
    public static MemorySegment drag_end$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2115.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_end$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2115.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_end drag_end(MemorySegment segment, Arena scope) {
        return drag_end.ofAddress(drag_end$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drag_data_get)(struct _GtkWidget*,struct _GdkDragContext*,struct _GtkSelectionData*,unsigned int,unsigned int);
     * }
     */
    public interface drag_data_get {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, java.lang.foreign.MemorySegment _x2, int _x3, int _x4);
        static MemorySegment allocate(drag_data_get fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2115.const$5, fi, constants$1641.const$5, scope);
        }
        static drag_data_get ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, java.lang.foreign.MemorySegment __x2, int __x3, int __x4) -> {
                try {
                    constants$1642.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_data_get$VH() {
        return constants$2116.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drag_data_get)(struct _GtkWidget*,struct _GdkDragContext*,struct _GtkSelectionData*,unsigned int,unsigned int);
     * }
     */
    public static MemorySegment drag_data_get$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drag_data_get)(struct _GtkWidget*,struct _GdkDragContext*,struct _GtkSelectionData*,unsigned int,unsigned int);
     * }
     */
    public static void drag_data_get$set(MemorySegment seg, MemorySegment x) {
        constants$2116.const$0.set(seg, x);
    }
    public static MemorySegment drag_data_get$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_data_get$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2116.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_data_get drag_data_get(MemorySegment segment, Arena scope) {
        return drag_data_get.ofAddress(drag_data_get$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drag_data_delete)(struct _GtkWidget*,struct _GdkDragContext*);
     * }
     */
    public interface drag_data_delete {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(drag_data_delete fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2116.const$1, fi, constants$13.const$4, scope);
        }
        static drag_data_delete ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_data_delete$VH() {
        return constants$2116.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drag_data_delete)(struct _GtkWidget*,struct _GdkDragContext*);
     * }
     */
    public static MemorySegment drag_data_delete$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drag_data_delete)(struct _GtkWidget*,struct _GdkDragContext*);
     * }
     */
    public static void drag_data_delete$set(MemorySegment seg, MemorySegment x) {
        constants$2116.const$2.set(seg, x);
    }
    public static MemorySegment drag_data_delete$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_data_delete$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2116.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_data_delete drag_data_delete(MemorySegment segment, Arena scope) {
        return drag_data_delete.ofAddress(drag_data_delete$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drag_leave)(struct _GtkWidget*,struct _GdkDragContext*,unsigned int);
     * }
     */
    public interface drag_leave {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(drag_leave fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2116.const$3, fi, constants$164.const$5, scope);
        }
        static drag_leave ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    constants$420.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_leave$VH() {
        return constants$2116.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drag_leave)(struct _GtkWidget*,struct _GdkDragContext*,unsigned int);
     * }
     */
    public static MemorySegment drag_leave$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drag_leave)(struct _GtkWidget*,struct _GdkDragContext*,unsigned int);
     * }
     */
    public static void drag_leave$set(MemorySegment seg, MemorySegment x) {
        constants$2116.const$4.set(seg, x);
    }
    public static MemorySegment drag_leave$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2116.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_leave$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2116.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_leave drag_leave(MemorySegment segment, Arena scope) {
        return drag_leave.ofAddress(drag_leave$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*drag_motion)(struct _GtkWidget*,struct _GdkDragContext*,int,int,unsigned int);
     * }
     */
    public interface drag_motion {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, int _x4);
        static MemorySegment allocate(drag_motion fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2117.const$0, fi, constants$2116.const$5, scope);
        }
        static drag_motion ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, int __x4) -> {
                try {
                    return (int)constants$2117.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_motion$VH() {
        return constants$2117.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*drag_motion)(struct _GtkWidget*,struct _GdkDragContext*,int,int,unsigned int);
     * }
     */
    public static MemorySegment drag_motion$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2117.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*drag_motion)(struct _GtkWidget*,struct _GdkDragContext*,int,int,unsigned int);
     * }
     */
    public static void drag_motion$set(MemorySegment seg, MemorySegment x) {
        constants$2117.const$2.set(seg, x);
    }
    public static MemorySegment drag_motion$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2117.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_motion$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2117.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_motion drag_motion(MemorySegment segment, Arena scope) {
        return drag_motion.ofAddress(drag_motion$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*drag_drop)(struct _GtkWidget*,struct _GdkDragContext*,int,int,unsigned int);
     * }
     */
    public interface drag_drop {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, int _x4);
        static MemorySegment allocate(drag_drop fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2117.const$3, fi, constants$2116.const$5, scope);
        }
        static drag_drop ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, int __x4) -> {
                try {
                    return (int)constants$2117.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_drop$VH() {
        return constants$2117.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*drag_drop)(struct _GtkWidget*,struct _GdkDragContext*,int,int,unsigned int);
     * }
     */
    public static MemorySegment drag_drop$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2117.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*drag_drop)(struct _GtkWidget*,struct _GdkDragContext*,int,int,unsigned int);
     * }
     */
    public static void drag_drop$set(MemorySegment seg, MemorySegment x) {
        constants$2117.const$4.set(seg, x);
    }
    public static MemorySegment drag_drop$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2117.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_drop$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2117.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_drop drag_drop(MemorySegment segment, Arena scope) {
        return drag_drop.ofAddress(drag_drop$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*drag_data_received)(struct _GtkWidget*,struct _GdkDragContext*,int,int,struct _GtkSelectionData*,unsigned int,unsigned int);
     * }
     */
    public interface drag_data_received {

        void apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4, int _x5, int _x6);
        static MemorySegment allocate(drag_data_received fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2118.const$0, fi, constants$2117.const$5, scope);
        }
        static drag_data_received ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4, int __x5, int __x6) -> {
                try {
                    constants$2118.const$1.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5, __x6);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_data_received$VH() {
        return constants$2118.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*drag_data_received)(struct _GtkWidget*,struct _GdkDragContext*,int,int,struct _GtkSelectionData*,unsigned int,unsigned int);
     * }
     */
    public static MemorySegment drag_data_received$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2118.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*drag_data_received)(struct _GtkWidget*,struct _GdkDragContext*,int,int,struct _GtkSelectionData*,unsigned int,unsigned int);
     * }
     */
    public static void drag_data_received$set(MemorySegment seg, MemorySegment x) {
        constants$2118.const$2.set(seg, x);
    }
    public static MemorySegment drag_data_received$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2118.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_data_received$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2118.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_data_received drag_data_received(MemorySegment segment, Arena scope) {
        return drag_data_received.ofAddress(drag_data_received$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*drag_failed)(struct _GtkWidget*,struct _GdkDragContext*,enum GtkDragResult);
     * }
     */
    public interface drag_failed {

        int apply(java.lang.foreign.MemorySegment _x0, java.lang.foreign.MemorySegment _x1, int _x2);
        static MemorySegment allocate(drag_failed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2118.const$3, fi, constants$62.const$0, scope);
        }
        static drag_failed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, java.lang.foreign.MemorySegment __x1, int __x2) -> {
                try {
                    return (int)constants$955.const$2.invokeExact(symbol, __x0, __x1, __x2);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle drag_failed$VH() {
        return constants$2118.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*drag_failed)(struct _GtkWidget*,struct _GdkDragContext*,enum GtkDragResult);
     * }
     */
    public static MemorySegment drag_failed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2118.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*drag_failed)(struct _GtkWidget*,struct _GdkDragContext*,enum GtkDragResult);
     * }
     */
    public static void drag_failed$set(MemorySegment seg, MemorySegment x) {
        constants$2118.const$4.set(seg, x);
    }
    public static MemorySegment drag_failed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2118.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void drag_failed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2118.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static drag_failed drag_failed(MemorySegment segment, Arena scope) {
        return drag_failed.ofAddress(drag_failed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*popup_menu)(struct _GtkWidget*);
     * }
     */
    public interface popup_menu {

        int apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(popup_menu fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2118.const$5, fi, constants$10.const$5, scope);
        }
        static popup_menu ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$14.const$2.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle popup_menu$VH() {
        return constants$2119.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*popup_menu)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment popup_menu$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2119.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*popup_menu)(struct _GtkWidget*);
     * }
     */
    public static void popup_menu$set(MemorySegment seg, MemorySegment x) {
        constants$2119.const$0.set(seg, x);
    }
    public static MemorySegment popup_menu$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2119.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void popup_menu$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2119.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static popup_menu popup_menu(MemorySegment segment, Arena scope) {
        return popup_menu.ofAddress(popup_menu$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*show_help)(struct _GtkWidget*,enum GtkWidgetHelpType);
     * }
     */
    public interface show_help {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(show_help fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2119.const$1, fi, constants$11.const$4, scope);
        }
        static show_help ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle show_help$VH() {
        return constants$2119.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*show_help)(struct _GtkWidget*,enum GtkWidgetHelpType);
     * }
     */
    public static MemorySegment show_help$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2119.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*show_help)(struct _GtkWidget*,enum GtkWidgetHelpType);
     * }
     */
    public static void show_help$set(MemorySegment seg, MemorySegment x) {
        constants$2119.const$2.set(seg, x);
    }
    public static MemorySegment show_help$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2119.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void show_help$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2119.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static show_help show_help(MemorySegment segment, Arena scope) {
        return show_help.ofAddress(show_help$get(segment), scope);
    }
    /**
     * {@snippet :
 * struct _AtkObject* (*get_accessible)(struct _GtkWidget*);
     * }
     */
    public interface get_accessible {

        java.lang.foreign.MemorySegment apply(java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(get_accessible fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2119.const$3, fi, constants$5.const$2, scope);
        }
        static get_accessible ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (java.lang.foreign.MemorySegment)constants$99.const$0.invokeExact(symbol, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_accessible$VH() {
        return constants$2119.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _AtkObject* (*get_accessible)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment get_accessible$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2119.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _AtkObject* (*get_accessible)(struct _GtkWidget*);
     * }
     */
    public static void get_accessible$set(MemorySegment seg, MemorySegment x) {
        constants$2119.const$4.set(seg, x);
    }
    public static MemorySegment get_accessible$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2119.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void get_accessible$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2119.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_accessible get_accessible(MemorySegment segment, Arena scope) {
        return get_accessible.ofAddress(get_accessible$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*screen_changed)(struct _GtkWidget*,struct _GdkScreen*);
     * }
     */
    public interface screen_changed {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(screen_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2119.const$5, fi, constants$13.const$4, scope);
        }
        static screen_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle screen_changed$VH() {
        return constants$2120.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*screen_changed)(struct _GtkWidget*,struct _GdkScreen*);
     * }
     */
    public static MemorySegment screen_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*screen_changed)(struct _GtkWidget*,struct _GdkScreen*);
     * }
     */
    public static void screen_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2120.const$0.set(seg, x);
    }
    public static MemorySegment screen_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void screen_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2120.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static screen_changed screen_changed(MemorySegment segment, Arena scope) {
        return screen_changed.ofAddress(screen_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*can_activate_accel)(struct _GtkWidget*,unsigned int);
     * }
     */
    public interface can_activate_accel {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1);
        static MemorySegment allocate(can_activate_accel fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2120.const$1, fi, constants$11.const$4, scope);
        }
        static can_activate_accel ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1) -> {
                try {
                    return (int)constants$837.const$4.invokeExact(symbol, __x0, __x1);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle can_activate_accel$VH() {
        return constants$2120.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*can_activate_accel)(struct _GtkWidget*,unsigned int);
     * }
     */
    public static MemorySegment can_activate_accel$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*can_activate_accel)(struct _GtkWidget*,unsigned int);
     * }
     */
    public static void can_activate_accel$set(MemorySegment seg, MemorySegment x) {
        constants$2120.const$2.set(seg, x);
    }
    public static MemorySegment can_activate_accel$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void can_activate_accel$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2120.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    public static can_activate_accel can_activate_accel(MemorySegment segment, Arena scope) {
        return can_activate_accel.ofAddress(can_activate_accel$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*composited_changed)(struct _GtkWidget*);
     * }
     */
    public interface composited_changed {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(composited_changed fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2120.const$3, fi, constants$13.const$1, scope);
        }
        static composited_changed ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle composited_changed$VH() {
        return constants$2120.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*composited_changed)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment composited_changed$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*composited_changed)(struct _GtkWidget*);
     * }
     */
    public static void composited_changed$set(MemorySegment seg, MemorySegment x) {
        constants$2120.const$4.set(seg, x);
    }
    public static MemorySegment composited_changed$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2120.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void composited_changed$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2120.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static composited_changed composited_changed(MemorySegment segment, Arena scope) {
        return composited_changed.ofAddress(composited_changed$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*query_tooltip)(struct _GtkWidget*,int,int,int,struct _GtkTooltip*);
     * }
     */
    public interface query_tooltip {

        int apply(java.lang.foreign.MemorySegment _x0, int _x1, int _x2, int _x3, java.lang.foreign.MemorySegment _x4);
        static MemorySegment allocate(query_tooltip fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2120.const$5, fi, constants$1290.const$1, scope);
        }
        static query_tooltip ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, int __x2, int __x3, java.lang.foreign.MemorySegment __x4) -> {
                try {
                    return (int)constants$2121.const$0.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle query_tooltip$VH() {
        return constants$2121.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*query_tooltip)(struct _GtkWidget*,int,int,int,struct _GtkTooltip*);
     * }
     */
    public static MemorySegment query_tooltip$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2121.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*query_tooltip)(struct _GtkWidget*,int,int,int,struct _GtkTooltip*);
     * }
     */
    public static void query_tooltip$set(MemorySegment seg, MemorySegment x) {
        constants$2121.const$1.set(seg, x);
    }
    public static MemorySegment query_tooltip$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2121.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void query_tooltip$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2121.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static query_tooltip query_tooltip(MemorySegment segment, Arena scope) {
        return query_tooltip.ofAddress(query_tooltip$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*compute_expand)(struct _GtkWidget*,int*,int*);
     * }
     */
    public interface compute_expand {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(compute_expand fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2121.const$2, fi, constants$14.const$3, scope);
        }
        static compute_expand ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle compute_expand$VH() {
        return constants$2121.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*compute_expand)(struct _GtkWidget*,int*,int*);
     * }
     */
    public static MemorySegment compute_expand$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2121.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*compute_expand)(struct _GtkWidget*,int*,int*);
     * }
     */
    public static void compute_expand$set(MemorySegment seg, MemorySegment x) {
        constants$2121.const$3.set(seg, x);
    }
    public static MemorySegment compute_expand$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2121.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void compute_expand$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2121.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static compute_expand compute_expand(MemorySegment segment, Arena scope) {
        return compute_expand.ofAddress(compute_expand$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*adjust_size_request)(struct _GtkWidget*,enum GtkOrientation,int*,int*);
     * }
     */
    public interface adjust_size_request {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3);
        static MemorySegment allocate(adjust_size_request fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2121.const$4, fi, constants$179.const$1, scope);
        }
        static adjust_size_request ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3) -> {
                try {
                    constants$372.const$3.invokeExact(symbol, __x0, __x1, __x2, __x3);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle adjust_size_request$VH() {
        return constants$2121.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*adjust_size_request)(struct _GtkWidget*,enum GtkOrientation,int*,int*);
     * }
     */
    public static MemorySegment adjust_size_request$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2121.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*adjust_size_request)(struct _GtkWidget*,enum GtkOrientation,int*,int*);
     * }
     */
    public static void adjust_size_request$set(MemorySegment seg, MemorySegment x) {
        constants$2121.const$5.set(seg, x);
    }
    public static MemorySegment adjust_size_request$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2121.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void adjust_size_request$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2121.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static adjust_size_request adjust_size_request(MemorySegment segment, Arena scope) {
        return adjust_size_request.ofAddress(adjust_size_request$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*adjust_size_allocation)(struct _GtkWidget*,enum GtkOrientation,int*,int*,int*,int*);
     * }
     */
    public interface adjust_size_allocation {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(adjust_size_allocation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2122.const$0, fi, constants$380.const$0, scope);
        }
        static adjust_size_allocation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$945.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle adjust_size_allocation$VH() {
        return constants$2122.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*adjust_size_allocation)(struct _GtkWidget*,enum GtkOrientation,int*,int*,int*,int*);
     * }
     */
    public static MemorySegment adjust_size_allocation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2122.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*adjust_size_allocation)(struct _GtkWidget*,enum GtkOrientation,int*,int*,int*,int*);
     * }
     */
    public static void adjust_size_allocation$set(MemorySegment seg, MemorySegment x) {
        constants$2122.const$1.set(seg, x);
    }
    public static MemorySegment adjust_size_allocation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2122.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void adjust_size_allocation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2122.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static adjust_size_allocation adjust_size_allocation(MemorySegment segment, Arena scope) {
        return adjust_size_allocation.ofAddress(adjust_size_allocation$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*style_updated)(struct _GtkWidget*);
     * }
     */
    public interface style_updated {

        void apply(java.lang.foreign.MemorySegment display);
        static MemorySegment allocate(style_updated fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2122.const$2, fi, constants$13.const$1, scope);
        }
        static style_updated ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _display) -> {
                try {
                    constants$13.const$3.invokeExact(symbol, _display);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle style_updated$VH() {
        return constants$2122.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*style_updated)(struct _GtkWidget*);
     * }
     */
    public static MemorySegment style_updated$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2122.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*style_updated)(struct _GtkWidget*);
     * }
     */
    public static void style_updated$set(MemorySegment seg, MemorySegment x) {
        constants$2122.const$3.set(seg, x);
    }
    public static MemorySegment style_updated$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2122.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void style_updated$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2122.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static style_updated style_updated(MemorySegment segment, Arena scope) {
        return style_updated.ofAddress(style_updated$get(segment), scope);
    }
    /**
     * {@snippet :
 * int (*touch_event)(struct _GtkWidget*,struct _GdkEventTouch*);
     * }
     */
    public interface touch_event {

        int apply(java.lang.foreign.MemorySegment filter_info, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(touch_event fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2122.const$4, fi, constants$9.const$0, scope);
        }
        static touch_event ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _filter_info, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    return (int)constants$12.const$1.invokeExact(symbol, _filter_info, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle touch_event$VH() {
        return constants$2122.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * int (*touch_event)(struct _GtkWidget*,struct _GdkEventTouch*);
     * }
     */
    public static MemorySegment touch_event$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2122.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * int (*touch_event)(struct _GtkWidget*,struct _GdkEventTouch*);
     * }
     */
    public static void touch_event$set(MemorySegment seg, MemorySegment x) {
        constants$2122.const$5.set(seg, x);
    }
    public static MemorySegment touch_event$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2122.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void touch_event$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2122.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static touch_event touch_event(MemorySegment segment, Arena scope) {
        return touch_event.ofAddress(touch_event$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*get_preferred_height_and_baseline_for_width)(struct _GtkWidget*,int,int*,int*,int*,int*);
     * }
     */
    public interface get_preferred_height_and_baseline_for_width {

        void apply(java.lang.foreign.MemorySegment _x0, int _x1, java.lang.foreign.MemorySegment _x2, java.lang.foreign.MemorySegment _x3, java.lang.foreign.MemorySegment _x4, java.lang.foreign.MemorySegment _x5);
        static MemorySegment allocate(get_preferred_height_and_baseline_for_width fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2123.const$0, fi, constants$380.const$0, scope);
        }
        static get_preferred_height_and_baseline_for_width ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment __x0, int __x1, java.lang.foreign.MemorySegment __x2, java.lang.foreign.MemorySegment __x3, java.lang.foreign.MemorySegment __x4, java.lang.foreign.MemorySegment __x5) -> {
                try {
                    constants$945.const$4.invokeExact(symbol, __x0, __x1, __x2, __x3, __x4, __x5);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle get_preferred_height_and_baseline_for_width$VH() {
        return constants$2123.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*get_preferred_height_and_baseline_for_width)(struct _GtkWidget*,int,int*,int*,int*,int*);
     * }
     */
    public static MemorySegment get_preferred_height_and_baseline_for_width$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2123.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*get_preferred_height_and_baseline_for_width)(struct _GtkWidget*,int,int*,int*,int*,int*);
     * }
     */
    public static void get_preferred_height_and_baseline_for_width$set(MemorySegment seg, MemorySegment x) {
        constants$2123.const$1.set(seg, x);
    }
    public static MemorySegment get_preferred_height_and_baseline_for_width$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2123.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void get_preferred_height_and_baseline_for_width$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2123.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static get_preferred_height_and_baseline_for_width get_preferred_height_and_baseline_for_width(MemorySegment segment, Arena scope) {
        return get_preferred_height_and_baseline_for_width.ofAddress(get_preferred_height_and_baseline_for_width$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*adjust_baseline_request)(struct _GtkWidget*,int*,int*);
     * }
     */
    public interface adjust_baseline_request {

        void apply(java.lang.foreign.MemorySegment key, java.lang.foreign.MemorySegment value, java.lang.foreign.MemorySegment user_data);
        static MemorySegment allocate(adjust_baseline_request fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2123.const$2, fi, constants$14.const$3, scope);
        }
        static adjust_baseline_request ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _key, java.lang.foreign.MemorySegment _value, java.lang.foreign.MemorySegment _user_data) -> {
                try {
                    constants$14.const$5.invokeExact(symbol, _key, _value, _user_data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle adjust_baseline_request$VH() {
        return constants$2123.const$3;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*adjust_baseline_request)(struct _GtkWidget*,int*,int*);
     * }
     */
    public static MemorySegment adjust_baseline_request$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2123.const$3.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*adjust_baseline_request)(struct _GtkWidget*,int*,int*);
     * }
     */
    public static void adjust_baseline_request$set(MemorySegment seg, MemorySegment x) {
        constants$2123.const$3.set(seg, x);
    }
    public static MemorySegment adjust_baseline_request$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2123.const$3.get(seg.asSlice(index*sizeof()));
    }
    public static void adjust_baseline_request$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2123.const$3.set(seg.asSlice(index*sizeof()), x);
    }
    public static adjust_baseline_request adjust_baseline_request(MemorySegment segment, Arena scope) {
        return adjust_baseline_request.ofAddress(adjust_baseline_request$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*adjust_baseline_allocation)(struct _GtkWidget*,int*);
     * }
     */
    public interface adjust_baseline_allocation {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(adjust_baseline_allocation fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2123.const$4, fi, constants$13.const$4, scope);
        }
        static adjust_baseline_allocation ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle adjust_baseline_allocation$VH() {
        return constants$2123.const$5;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*adjust_baseline_allocation)(struct _GtkWidget*,int*);
     * }
     */
    public static MemorySegment adjust_baseline_allocation$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2123.const$5.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*adjust_baseline_allocation)(struct _GtkWidget*,int*);
     * }
     */
    public static void adjust_baseline_allocation$set(MemorySegment seg, MemorySegment x) {
        constants$2123.const$5.set(seg, x);
    }
    public static MemorySegment adjust_baseline_allocation$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2123.const$5.get(seg.asSlice(index*sizeof()));
    }
    public static void adjust_baseline_allocation$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2123.const$5.set(seg.asSlice(index*sizeof()), x);
    }
    public static adjust_baseline_allocation adjust_baseline_allocation(MemorySegment segment, Arena scope) {
        return adjust_baseline_allocation.ofAddress(adjust_baseline_allocation$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*queue_draw_region)(struct _GtkWidget*,struct _cairo_region*);
     * }
     */
    public interface queue_draw_region {

        void apply(java.lang.foreign.MemorySegment tag, java.lang.foreign.MemorySegment data);
        static MemorySegment allocate(queue_draw_region fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2124.const$0, fi, constants$13.const$4, scope);
        }
        static queue_draw_region ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return (java.lang.foreign.MemorySegment _tag, java.lang.foreign.MemorySegment _data) -> {
                try {
                    constants$14.const$0.invokeExact(symbol, _tag, _data);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle queue_draw_region$VH() {
        return constants$2124.const$1;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*queue_draw_region)(struct _GtkWidget*,struct _cairo_region*);
     * }
     */
    public static MemorySegment queue_draw_region$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2124.const$1.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*queue_draw_region)(struct _GtkWidget*,struct _cairo_region*);
     * }
     */
    public static void queue_draw_region$set(MemorySegment seg, MemorySegment x) {
        constants$2124.const$1.set(seg, x);
    }
    public static MemorySegment queue_draw_region$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2124.const$1.get(seg.asSlice(index*sizeof()));
    }
    public static void queue_draw_region$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2124.const$1.set(seg.asSlice(index*sizeof()), x);
    }
    public static queue_draw_region queue_draw_region(MemorySegment segment, Arena scope) {
        return queue_draw_region.ofAddress(queue_draw_region$get(segment), scope);
    }
    public static VarHandle priv$VH() {
        return constants$2124.const$2;
    }
    /**
     * Getter for field:
     * {@snippet :
     * struct _GtkWidgetClassPrivate* priv;
     * }
     */
    public static MemorySegment priv$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2124.const$2.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * struct _GtkWidgetClassPrivate* priv;
     * }
     */
    public static void priv$set(MemorySegment seg, MemorySegment x) {
        constants$2124.const$2.set(seg, x);
    }
    public static MemorySegment priv$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2124.const$2.get(seg.asSlice(index*sizeof()));
    }
    public static void priv$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2124.const$2.set(seg.asSlice(index*sizeof()), x);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved6)();
     * }
     */
    public interface _gtk_reserved6 {

        void apply();
        static MemorySegment allocate(_gtk_reserved6 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2124.const$3, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved6 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved6$VH() {
        return constants$2124.const$4;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2124.const$4.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved6)();
     * }
     */
    public static void _gtk_reserved6$set(MemorySegment seg, MemorySegment x) {
        constants$2124.const$4.set(seg, x);
    }
    public static MemorySegment _gtk_reserved6$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2124.const$4.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved6$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2124.const$4.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved6 _gtk_reserved6(MemorySegment segment, Arena scope) {
        return _gtk_reserved6.ofAddress(_gtk_reserved6$get(segment), scope);
    }
    /**
     * {@snippet :
 * void (*_gtk_reserved7)();
     * }
     */
    public interface _gtk_reserved7 {

        void apply();
        static MemorySegment allocate(_gtk_reserved7 fi, Arena scope) {
            return RuntimeHelper.upcallStub(constants$2124.const$5, fi, constants$7.const$5, scope);
        }
        static _gtk_reserved7 ofAddress(MemorySegment addr, Arena arena) {
            MemorySegment symbol = addr.reinterpret(arena, null);
            return () -> {
                try {
                    constants$64.const$1.invokeExact(symbol);
                } catch (Throwable ex$) {
                    throw new AssertionError("should not reach here", ex$);
                }
            };
        }
    }

    public static VarHandle _gtk_reserved7$VH() {
        return constants$2125.const$0;
    }
    /**
     * Getter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg) {
        return (java.lang.foreign.MemorySegment)constants$2125.const$0.get(seg);
    }
    /**
     * Setter for field:
     * {@snippet :
     * void (*_gtk_reserved7)();
     * }
     */
    public static void _gtk_reserved7$set(MemorySegment seg, MemorySegment x) {
        constants$2125.const$0.set(seg, x);
    }
    public static MemorySegment _gtk_reserved7$get(MemorySegment seg, long index) {
        return (java.lang.foreign.MemorySegment)constants$2125.const$0.get(seg.asSlice(index*sizeof()));
    }
    public static void _gtk_reserved7$set(MemorySegment seg, long index, MemorySegment x) {
        constants$2125.const$0.set(seg.asSlice(index*sizeof()), x);
    }
    public static _gtk_reserved7 _gtk_reserved7(MemorySegment segment, Arena scope) {
        return _gtk_reserved7.ofAddress(_gtk_reserved7$get(segment), scope);
    }
    public static long sizeof() { return $LAYOUT().byteSize(); }
    public static MemorySegment allocate(SegmentAllocator allocator) { return allocator.allocate($LAYOUT()); }
    public static MemorySegment allocateArray(long len, SegmentAllocator allocator) {
        return allocator.allocate(MemoryLayout.sequenceLayout(len, $LAYOUT()));
    }
    public static MemorySegment ofAddress(MemorySegment addr, Arena scope) { return RuntimeHelper.asArray(addr, $LAYOUT(), 1, scope); }
}


